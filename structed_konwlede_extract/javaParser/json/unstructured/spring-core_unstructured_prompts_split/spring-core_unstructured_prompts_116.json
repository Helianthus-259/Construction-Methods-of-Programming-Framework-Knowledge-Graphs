[
  {
    "entityId": "org.springframework.core.TestBean#handle(TestObject,List<TestObject>,Set<TestObject>,Mono<TestObject>,Flux<TestObject>,Single<TestObject>,Observable<TestObject>)",
    "entityType": "method",
    "code": "public void handle(TestObject to, List<TestObject> toList, Set<TestObject> toSet, Mono<TestObject> toMono, Flux<TestObject> toFlux, Single<TestObject> toSingle, Observable<TestObject> toObservable) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleTo()",
    "entityType": "method",
    "code": "public TestObject handleTo() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToList()",
    "entityType": "method",
    "code": "public List<TestObject> handleToList() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToSet()",
    "entityType": "method",
    "code": "public Set<TestObject> handleToSet() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToMono()",
    "entityType": "method",
    "code": "public Mono<TestObject> handleToMono() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToFlux()",
    "entityType": "method",
    "code": "public Flux<TestObject> handleToFlux() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToSingle()",
    "entityType": "method",
    "code": "public Single<TestObject> handleToSingle() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestBean#handleToObservable()",
    "entityType": "method",
    "code": "public Observable<TestObject> handleToObservable() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConverterTests",
    "entityType": "class",
    "code": "private final Converter<Integer, Integer> moduloTwo = number -> number % 2;\nprivate final Converter<Integer, Integer> addOne = number -> number + 1;\n@Test\r\nvoid andThenWhenGivenANullConverterThenThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.moduloTwo.andThen(null));\r\n}\n@Test\r\nvoid andThenWhenGivenConverterThenComposesInOrder() {\r\n    assertThat(this.moduloTwo.andThen(this.addOne).convert(13)).isEqualTo(2);\r\n    assertThat(this.addOne.andThen(this.moduloTwo).convert(13)).isEqualTo(0);\r\n}\n@Test\r\nvoid andThenCanConvertfromDifferentSourceType() {\r\n    Converter<String, Integer> length = String::length;\r\n    assertThat(length.andThen(this.moduloTwo).convert(\"example\")).isEqualTo(1);\r\n    assertThat(length.andThen(this.addOne).convert(\"example\")).isEqualTo(8);\r\n}\n@Test\r\nvoid andThenCanConvertToDifferentTargetType() {\r\n    Converter<String, Integer> length = String::length;\r\n    Converter<Integer, String> toString = Object::toString;\r\n    assertThat(length.andThen(toString).convert(\"example\")).isEqualTo(\"7\");\r\n    assertThat(toString.andThen(length).convert(1_000)).isEqualTo(4);\r\n}",
    "comment": "\n * Tests for {@link Converter}\n *\n * @author Josh Cummings\n * @author Sam Brannen\n * @since 5.3\n "
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenANullConverterThenThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid andThenWhenGivenANullConverterThenThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.moduloTwo.andThen(null));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenConverterThenComposesInOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid andThenWhenGivenConverterThenComposesInOrder() {\r\n    assertThat(this.moduloTwo.andThen(this.addOne).convert(13)).isEqualTo(2);\r\n    assertThat(this.addOne.andThen(this.moduloTwo).convert(13)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConverterTests#andThenCanConvertfromDifferentSourceType()",
    "entityType": "method",
    "code": "@Test\r\nvoid andThenCanConvertfromDifferentSourceType() {\r\n    Converter<String, Integer> length = String::length;\r\n    assertThat(length.andThen(this.moduloTwo).convert(\"example\")).isEqualTo(1);\r\n    assertThat(length.andThen(this.addOne).convert(\"example\")).isEqualTo(8);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConverterTests#andThenCanConvertToDifferentTargetType()",
    "entityType": "method",
    "code": "@Test\r\nvoid andThenCanConvertToDifferentTargetType() {\r\n    Converter<String, Integer> length = String::length;\r\n    Converter<Integer, String> toString = Object::toString;\r\n    assertThat(length.andThen(toString).convert(\"example\")).isEqualTo(\"7\");\r\n    assertThat(toString.andThen(length).convert(1_000)).isEqualTo(4);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests",
    "entityType": "class",
    "code": "private final StringToInteger converter = new StringToInteger();\nprivate final ConversionService conversionService = new DefaultConversionService();\nprivate final TestComparator comparator = new TestComparator();\n@Test\r\nvoid shouldThrowOnNullComparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<>(null, this.converter));\r\n}\n@Test\r\nvoid shouldThrowOnNullConverter() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, null));\r\n}\n@Test\r\nvoid shouldThrowOnNullConversionService() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, null, Integer.class));\r\n}\n@Test\r\nvoid shouldThrowOnNullType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, this.conversionService, null));\r\n}\n@Test\r\nvoid shouldUseConverterOnCompare() {\r\n    ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(this.comparator, this.converter);\r\n    testConversion(convertingComparator);\r\n}\n@Test\r\nvoid shouldUseConversionServiceOnCompare() {\r\n    ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(comparator, conversionService, Integer.class);\r\n    testConversion(convertingComparator);\r\n}\n@Test\r\nvoid shouldGetForConverter() {\r\n    testConversion(new ConvertingComparator<>(comparator, converter));\r\n}\nprivate void testConversion(ConvertingComparator<String, Integer> convertingComparator) {\r\n    assertThat(convertingComparator.compare(\"0\", \"0\")).isEqualTo(0);\r\n    assertThat(convertingComparator.compare(\"0\", \"1\")).isEqualTo(-1);\r\n    assertThat(convertingComparator.compare(\"1\", \"0\")).isEqualTo(1);\r\n    comparator.assertCalled();\r\n}\n@Test\r\nvoid shouldGetMapEntryKeys() {\r\n    ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList();\r\n    Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryKeys(Comparators.comparable());\r\n    list.sort(comparator);\r\n    assertThat(list.get(0).getKey()).isEqualTo(\"a\");\r\n}\n@Test\r\nvoid shouldGetMapEntryValues() {\r\n    ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList();\r\n    Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryValues(Comparators.comparable());\r\n    list.sort(comparator);\r\n    assertThat(list.get(0).getValue()).isEqualTo(1);\r\n}\nprivate ArrayList<Entry<String, Integer>> createReverseOrderMapEntryList() {\r\n    Map<String, Integer> map = new LinkedHashMap<>();\r\n    map.put(\"b\", 2);\r\n    map.put(\"a\", 1);\r\n    ArrayList<Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\r\n    assertThat(list.get(0).getKey()).isEqualTo(\"b\");\r\n    return list;\r\n}\nprivate static class StringToInteger implements Converter<String, Integer> {\r\n\r\n    @Override\r\n    public Integer convert(String source) {\r\n        return Integer.valueOf(source);\r\n    }\r\n}\nprivate static class TestComparator implements Comparator<Integer> {\r\n\r\n    private boolean called;\r\n\r\n    @Override\r\n    public int compare(Integer o1, Integer o2) {\r\n        assertThat(o1).isInstanceOf(Integer.class);\r\n        assertThat(o2).isInstanceOf(Integer.class);\r\n        this.called = true;\r\n        return Comparators.comparable().compare(o1, o2);\r\n    }\r\n\r\n    public void assertCalled() {\r\n        assertThat(this.called).isTrue();\r\n    }\r\n}",
    "comment": "\n * Tests for {@link ConvertingComparator}.\n *\n * @author Phillip Webb\n "
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldThrowOnNullComparator()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldThrowOnNullComparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<>(null, this.converter));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldThrowOnNullConverter()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldThrowOnNullConverter() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, null));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldThrowOnNullConversionService()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldThrowOnNullConversionService() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, null, Integer.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldThrowOnNullType()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldThrowOnNullType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConvertingComparator<String, Integer>(this.comparator, this.conversionService, null));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldUseConverterOnCompare()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldUseConverterOnCompare() {\r\n    ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(this.comparator, this.converter);\r\n    testConversion(convertingComparator);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldUseConversionServiceOnCompare()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldUseConversionServiceOnCompare() {\r\n    ConvertingComparator<String, Integer> convertingComparator = new ConvertingComparator<>(comparator, conversionService, Integer.class);\r\n    testConversion(convertingComparator);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldGetForConverter()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldGetForConverter() {\r\n    testConversion(new ConvertingComparator<>(comparator, converter));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#testConversion(ConvertingComparator<String,Integer>)",
    "entityType": "method",
    "code": "private void testConversion(ConvertingComparator<String, Integer> convertingComparator) {\r\n    assertThat(convertingComparator.compare(\"0\", \"0\")).isEqualTo(0);\r\n    assertThat(convertingComparator.compare(\"0\", \"1\")).isEqualTo(-1);\r\n    assertThat(convertingComparator.compare(\"1\", \"0\")).isEqualTo(1);\r\n    comparator.assertCalled();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldGetMapEntryKeys()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldGetMapEntryKeys() {\r\n    ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList();\r\n    Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryKeys(Comparators.comparable());\r\n    list.sort(comparator);\r\n    assertThat(list.get(0).getKey()).isEqualTo(\"a\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#shouldGetMapEntryValues()",
    "entityType": "method",
    "code": "@Test\r\nvoid shouldGetMapEntryValues() {\r\n    ArrayList<Entry<String, Integer>> list = createReverseOrderMapEntryList();\r\n    Comparator<Map.Entry<String, Integer>> comparator = ConvertingComparator.mapEntryValues(Comparators.comparable());\r\n    list.sort(comparator);\r\n    assertThat(list.get(0).getValue()).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ConvertingComparatorTests#createReverseOrderMapEntryList()",
    "entityType": "method",
    "code": "private ArrayList<Entry<String, Integer>> createReverseOrderMapEntryList() {\r\n    Map<String, Integer> map = new LinkedHashMap<>();\r\n    map.put(\"b\", 2);\r\n    map.put(\"a\", 1);\r\n    ArrayList<Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\r\n    assertThat(list.get(0).getKey()).isEqualTo(\"b\");\r\n    return list;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.StringToInteger",
    "entityType": "class",
    "code": "@Override\r\npublic Integer convert(String source) {\r\n    return Integer.valueOf(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.StringToInteger#convert(String)",
    "entityType": "method",
    "code": "@Override\r\npublic Integer convert(String source) {\r\n    return Integer.valueOf(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestComparator",
    "entityType": "class",
    "code": "private boolean called;\n@Override\r\npublic int compare(Integer o1, Integer o2) {\r\n    assertThat(o1).isInstanceOf(Integer.class);\r\n    assertThat(o2).isInstanceOf(Integer.class);\r\n    this.called = true;\r\n    return Comparators.comparable().compare(o1, o2);\r\n}\npublic void assertCalled() {\r\n    assertThat(this.called).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestComparator#compare(Integer,Integer)",
    "entityType": "method",
    "code": "@Override\r\npublic int compare(Integer o1, Integer o2) {\r\n    assertThat(o1).isInstanceOf(Integer.class);\r\n    assertThat(o2).isInstanceOf(Integer.class);\r\n    this.called = true;\r\n    return Comparators.comparable().compare(o1, o2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestComparator#assertCalled()",
    "entityType": "method",
    "code": "public void assertCalled() {\r\n    assertThat(this.called).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "entityType": "class",
    "code": "private final DefaultConversionService conversionService = new DefaultConversionService();\n@Test\r\nvoid stringToCharacter() {\r\n    assertThat(conversionService.convert(\"1\", Character.class)).isEqualTo(Character.valueOf('1'));\r\n}\n@Test\r\nvoid stringToCharacterEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Character.class)).isNull();\r\n}\n@Test\r\nvoid stringToCharacterInvalidString() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(\"invalid\", Character.class));\r\n}\n@Test\r\nvoid characterToString() {\r\n    assertThat(conversionService.convert('3', String.class)).isEqualTo(\"3\");\r\n}\n@Test\r\nvoid stringToBooleanTrue() {\r\n    assertThat(conversionService.convert(\"true\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"on\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"yes\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"1\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"TRUE\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"ON\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"YES\", Boolean.class)).isTrue();\r\n}\n@Test\r\nvoid stringToBooleanFalse() {\r\n    assertThat(conversionService.convert(\"false\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"off\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"no\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"0\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"FALSE\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"OFF\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"NO\", Boolean.class)).isFalse();\r\n}\n@Test\r\nvoid stringToBooleanEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Boolean.class)).isNull();\r\n}\n@Test\r\nvoid stringToBooleanInvalidString() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(\"invalid\", Boolean.class));\r\n}\n@Test\r\nvoid booleanToString() {\r\n    assertThat(conversionService.convert(true, String.class)).isEqualTo(\"true\");\r\n}\n@Test\r\nvoid stringToByte() {\r\n    assertThat(conversionService.convert(\"1\", Byte.class)).isEqualTo((byte) 1);\r\n}\n@Test\r\nvoid byteToString() {\r\n    assertThat(conversionService.convert(\"A\".getBytes()[0], String.class)).isEqualTo(\"65\");\r\n}\n@Test\r\nvoid stringToShort() {\r\n    assertThat(conversionService.convert(\"1\", Short.class)).isEqualTo((short) 1);\r\n}\n@Test\r\nvoid shortToString() {\r\n    short three = 3;\r\n    assertThat(conversionService.convert(three, String.class)).isEqualTo(\"3\");\r\n}\n@Test\r\nvoid stringToInteger() {\r\n    assertThat(conversionService.convert(\"1\", Integer.class)).isEqualTo(1);\r\n}\n@Test\r\nvoid integerToString() {\r\n    assertThat(conversionService.convert(3, String.class)).isEqualTo(\"3\");\r\n}\n@Test\r\nvoid stringToLong() {\r\n    assertThat(conversionService.convert(\"1\", Long.class)).isEqualTo(Long.valueOf(1));\r\n}\n@Test\r\nvoid longToString() {\r\n    assertThat(conversionService.convert(3L, String.class)).isEqualTo(\"3\");\r\n}\n@Test\r\nvoid stringToFloat() {\r\n    assertThat(conversionService.convert(\"1.0\", Float.class)).isEqualTo(Float.valueOf(\"1.0\"));\r\n}\n@Test\r\nvoid floatToString() {\r\n    assertThat(conversionService.convert(Float.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\r\n}\n@Test\r\nvoid stringToDouble() {\r\n    assertThat(conversionService.convert(\"1.0\", Double.class)).isEqualTo(Double.valueOf(\"1.0\"));\r\n}\n@Test\r\nvoid doubleToString() {\r\n    assertThat(conversionService.convert(Double.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\r\n}\n@Test\r\nvoid stringToBigInteger() {\r\n    assertThat(conversionService.convert(\"1\", BigInteger.class)).isEqualTo(new BigInteger(\"1\"));\r\n}\n@Test\r\nvoid bigIntegerToString() {\r\n    assertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\r\n}\n@Test\r\nvoid stringToBigDecimal() {\r\n    assertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}\n@Test\r\nvoid bigDecimalToString() {\r\n    assertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\r\n}\n@Test\r\nvoid stringToNumber() {\r\n    assertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}\n@Test\r\nvoid stringToNumberEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Number.class)).isNull();\r\n}\n@Test\r\nvoid stringToEnum() {\r\n    assertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\r\n}\n@Test\r\nvoid stringToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}\n@Test\r\nvoid stringToEnumEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Foo.class)).isNull();\r\n}\n@Test\r\nvoid enumToString() {\r\n    assertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\r\n}\n@Test\r\nvoid integerToEnum() {\r\n    assertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\r\n}\n@Test\r\nvoid integerToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}\n@Test\r\nvoid integerToEnumNull() {\r\n    assertThat(conversionService.convert(null, Foo.class)).isNull();\r\n}\n@Test\r\nvoid enumToInteger() {\r\n    assertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\r\n}\n@Test\r\nvoid stringToEnumSet() throws Exception {\r\n    assertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\r\n}\n@Test\r\nvoid stringToLocale() {\r\n    assertThat(conversionService.convert(\"en\", Locale.class)).isEqualTo(Locale.ENGLISH);\r\n}\n@Test\r\nvoid stringToLocaleWithCountry() {\r\n    assertThat(conversionService.convert(\"en_US\", Locale.class)).isEqualTo(Locale.US);\r\n}\n@Test\r\nvoid stringToLocaleWithLanguageTag() {\r\n    assertThat(conversionService.convert(\"en-US\", Locale.class)).isEqualTo(Locale.US);\r\n}\n@Test\r\nvoid stringToCharset() {\r\n    assertThat(conversionService.convert(\"UTF-8\", Charset.class)).isEqualTo(StandardCharsets.UTF_8);\r\n}\n@Test\r\nvoid charsetToString() {\r\n    assertThat(conversionService.convert(StandardCharsets.UTF_8, String.class)).isEqualTo(\"UTF-8\");\r\n}\n@Test\r\nvoid stringToCurrency() {\r\n    assertThat(conversionService.convert(\"EUR\", Currency.class)).isEqualTo(Currency.getInstance(\"EUR\"));\r\n}\n@Test\r\nvoid currencyToString() {\r\n    assertThat(conversionService.convert(Currency.getInstance(\"USD\"), String.class)).isEqualTo(\"USD\");\r\n}\n@Test\r\nvoid stringToString() {\r\n    String str = \"test\";\r\n    assertThat(conversionService.convert(str, String.class)).isSameAs(str);\r\n}\n@Test\r\nvoid uuidToStringAndStringToUuid() {\r\n    UUID uuid = UUID.randomUUID();\r\n    String convertToString = conversionService.convert(uuid, String.class);\r\n    UUID convertToUUID = conversionService.convert(convertToString, UUID.class);\r\n    assertThat(convertToUUID).isEqualTo(uuid);\r\n}\n@Test\r\nvoid stringToPatternEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Pattern.class)).isNull();\r\n}\n@Test\r\nvoid stringToPattern() {\r\n    String pattern = \"\\\\s\";\r\n    assertThat(conversionService.convert(pattern, Pattern.class)).isInstanceOfSatisfying(Pattern.class, regex -> assertThat(regex.pattern()).isEqualTo(pattern));\r\n}\n@Test\r\nvoid patternToString() {\r\n    String regex = \"\\\\d\";\r\n    assertThat(conversionService.convert(Pattern.compile(regex), String.class)).isEqualTo(regex);\r\n}\n@Test\r\nvoid numberToNumber() {\r\n    assertThat(conversionService.convert(1, Long.class)).isEqualTo(Long.valueOf(1));\r\n}\n@Test\r\nvoid numberToNumberNotSupportedNumber() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\r\n}\n@Test\r\nvoid numberToCharacter() {\r\n    assertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\r\n}\n@Test\r\nvoid characterToNumber() {\r\n    assertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\r\n}\n// collection conversion\r\n@Test\r\nvoid convertArrayToCollectionInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Collection.class);\r\n    assertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertArrayToSetInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Set.class);\r\n    assertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertArrayToListInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, List.class);\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertArrayToStream() throws Exception {\r\n    String[] source = { \"1\", \"3\", \"4\" };\r\n    @SuppressWarnings(\"unchecked\")\r\n    Stream<Integer> result = (Stream<Integer>) this.conversionService.convert(source, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericStream\")));\r\n    assertThat(result).containsExactly(1, 3, 4);\r\n}\n@Test\r\nvoid spr7766() throws Exception {\r\n    conversionService.addConverter(new ColorConverter());\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Color> colors = (List<Color>) conversionService.convert(new String[] { \"ffffff\", \"#000000\" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod(\"handlerMethod\", List.class), 0)));\r\n    assertThat(colors).containsExactly(Color.WHITE, Color.BLACK);\r\n}\n@Test\r\nvoid convertArrayToCollectionImpl() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    ArrayList<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, ArrayList.class);\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertArrayToAbstractCollection() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, AbstractList.class));\r\n}\n@Test\r\nvoid convertArrayToString() {\r\n    String result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, String.class);\r\n    assertThat(result).isEqualTo(\"1,2,3\");\r\n}\n@Test\r\nvoid convertArrayToStringWithElementConversion() {\r\n    String result = conversionService.convert(new Integer[] { 1, 2, 3 }, String.class);\r\n    assertThat(result).isEqualTo(\"1,2,3\");\r\n}\n@Test\r\nvoid convertEmptyArrayToString() {\r\n    String result = conversionService.convert(new String[0], String.class);\r\n    assertThat(result).isEmpty();\r\n}\n@Test\r\nvoid convertStringToArray() {\r\n    String[] result = conversionService.convert(\"1,2,3\", String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertStringToArrayWithElementConversion() {\r\n    Integer[] result = conversionService.convert(\"1,2,3\", Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertStringToPrimitiveArrayWithElementConversion() {\r\n    int[] result = conversionService.convert(\"1,2,3\", int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertEmptyStringToArray() {\r\n    String[] result = conversionService.convert(\"\", String[].class);\r\n    assertThat(result).isEmpty();\r\n}\n@Test\r\nvoid convertArrayToObject() {\r\n    Object[] array = new Object[] { 3L };\r\n    Object result = conversionService.convert(array, Long.class);\r\n    assertThat(result).isEqualTo(3L);\r\n}\n@Test\r\nvoid convertArrayToObjectWithElementConversion() {\r\n    String[] array = new String[] { \"3\" };\r\n    Integer result = conversionService.convert(array, Integer.class);\r\n    assertThat(result).isEqualTo(3);\r\n}\n@Test\r\nvoid convertArrayToObjectAssignableTargetType() {\r\n    Long[] array = new Long[] { 3L };\r\n    Long[] result = (Long[]) conversionService.convert(array, Object.class);\r\n    assertThat(result).isEqualTo(array);\r\n}\n@Test\r\nvoid convertObjectToArray() {\r\n    Object[] result = conversionService.convert(3L, Object[].class);\r\n    assertThat(result).containsExactly(3L);\r\n}\n@Test\r\nvoid convertObjectToArrayWithElementConversion() {\r\n    Integer[] result = conversionService.convert(3L, Integer[].class);\r\n    assertThat(result).containsExactly(3);\r\n}\n@Test\r\nvoid convertCollectionToArray() {\r\n    List<String> list = List.of(\"1\", \"2\", \"3\");\r\n    String[] result = conversionService.convert(list, String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertCollectionToArrayWithElementConversion() {\r\n    List<String> list = List.of(\"1\", \"2\", \"3\");\r\n    Integer[] result = conversionService.convert(list, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertCollectionToString() {\r\n    List<String> list = List.of(\"foo\", \"bar\");\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"foo,bar\");\r\n}\n@Test\r\nvoid convertCollectionToStringWithElementConversion() throws Exception {\r\n    List<Integer> list = List.of(3, 5);\r\n    String result = (String) conversionService.convert(list, new TypeDescriptor(getClass().getField(\"genericList\")), TypeDescriptor.valueOf(String.class));\r\n    assertThat(result).isEqualTo(\"3,5\");\r\n}\n@Test\r\nvoid convertStringToCollection() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> result = conversionService.convert(\"1,2,3\", List.class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertStringToCollectionWithElementConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertEmptyStringToCollection() {\r\n    Collection<?> result = conversionService.convert(\"\", Collection.class);\r\n    assertThat(result).isEmpty();\r\n}\n@Test\r\nvoid convertCollectionToObject() {\r\n    List<Long> list = Collections.singletonList(3L);\r\n    Long result = conversionService.convert(list, Long.class);\r\n    assertThat(result).isEqualTo(3L);\r\n}\n@Test\r\nvoid convertCollectionToObjectWithElementConversion() {\r\n    List<String> list = Collections.singletonList(\"3\");\r\n    Integer result = conversionService.convert(list, Integer.class);\r\n    assertThat(result).isEqualTo(3);\r\n}\n@Test\r\nvoid convertCollectionToObjectAssignableTarget() throws Exception {\r\n    Collection<String> source = List.of(\"foo\");\r\n    Object result = conversionService.convert(source, new TypeDescriptor(getClass().getField(\"assignableTarget\")));\r\n    assertThat(result).isSameAs(source);\r\n}\n@Test\r\nvoid convertCollectionToObjectWithCustomConverter() {\r\n    List<String> source = List.of(\"A\", \"B\");\r\n    conversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new);\r\n    ListWrapper result = conversionService.convert(source, ListWrapper.class);\r\n    assertThat(result.getList()).isSameAs(source);\r\n}\n@Test\r\nvoid convertObjectToCollection() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Long> result = conversionService.convert(3L, List.class);\r\n    assertThat(result).containsExactly(3L);\r\n}\n@Test\r\nvoid convertObjectToCollectionWithElementConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(result).containsExactly(3);\r\n}\n@Test\r\nvoid convertStringArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertStringArrayToIntArray() {\r\n    int[] result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertIntArrayToStringArray() {\r\n    String[] result = conversionService.convert(new int[] { 1, 2, 3 }, String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\nvoid convertIntegerArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertIntegerArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertIntArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new int[] { 1, 2 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}\n@Test\r\nvoid convertObjectArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new Object[] { 1, 2, 3 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertObjectArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Object[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n// gh-33212\r\n@Test\r\nvoid convertIntArrayToObjectArray() {\r\n    Object[] result = conversionService.convert(new int[] { 1, 2 }, Object[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}\n@Test\r\nvoid convertIntArrayToFloatArray() {\r\n    Float[] result = conversionService.convert(new int[] { 1, 2 }, Float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}\n@Test\r\nvoid convertIntArrayToPrimitiveFloatArray() {\r\n    float[] result = conversionService.convert(new int[] { 1, 2 }, float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}\n@Test\r\nvoid convertPrimitiveByteArrayToByteWrapperArray() {\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    Byte[] converted = conversionService.convert(byteArray, Byte[].class);\r\n    assertThat(converted).isEqualTo(new Byte[] { 1, 2, 3 });\r\n}\n// gh-14200, SPR-9566\r\n@Test\r\nvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\r\n    byte[] byteArray = new byte[] { 1, 2, 3 };\r\n    byte[] result = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(result).isSameAs(byteArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n// gh-14200, SPR-9566\r\n@Test\r\nvoid convertIntArrayToIntArray() {\r\n    int[] intArray = new int[] { 1, 2, 3 };\r\n    int[] result = conversionService.convert(intArray, int[].class);\r\n    assertThat(result).isSameAs(intArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertListOfNonStringifiable() {\r\n    List<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    try {\r\n        conversionService.convert(list, String.class);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getMessage()).contains(list.getClass().getName());\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n        assertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\r\n    }\r\n}\n@Test\r\nvoid convertListOfStringToString() {\r\n    List<String> list = List.of(\"Foo\", \"Bar\");\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar\");\r\n}\n@Test\r\nvoid convertListOfListToString() {\r\n    List<String> list1 = List.of(\"Foo\", \"Bar\");\r\n    List<String> list2 = List.of(\"Baz\", \"Boop\");\r\n    List<List<String>> list = List.of(list1, list2);\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\r\n}\n@Test\r\nvoid convertCollectionToCollection() throws Exception {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(foo, new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid convertCollectionToCollectionNull() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(null, TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).isNull();\r\n}\n@Test\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\nvoid convertCollectionToCollectionNotGeneric() {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\r\n    assertThat(bar).containsExactly(\"1\", \"2\", \"3\");\r\n}\n@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\r\n    Map map = new LinkedHashMap();\r\n    map.put(\"1\", \"1\");\r\n    map.put(\"2\", \"2\");\r\n    map.put(\"3\", \"3\");\r\n    Collection values = map.values();\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(values, TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}\n@Test\r\nvoid collection() {\r\n    List<String> strings = List.of(\"3\", \"9\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> integers = (List<Integer>) conversionService.convert(strings, TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).containsExactly(3, 9);\r\n}\n@Test\r\nvoid convertMapToMap() throws Exception {\r\n    Map<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\r\n    assertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\r\n}\n@Test\r\nvoid convertHashMapValuesToList() {\r\n    Map<String, Integer> hashMap = new LinkedHashMap<>();\r\n    hashMap.put(\"1\", 1);\r\n    hashMap.put(\"2\", 2);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> converted = conversionService.convert(hashMap.values(), List.class);\r\n    assertThat(converted).containsExactly(1, 2);\r\n}\n@Test\r\nvoid map() {\r\n    Map<String, String> strings = new HashMap<>();\r\n    strings.put(\"3\", \"9\");\r\n    strings.put(\"6\", \"31\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).contains(entry(3, 9), entry(6, 31));\r\n}\n@Test\r\nvoid convertPropertiesToString() {\r\n    Properties foo = new Properties();\r\n    foo.setProperty(\"1\", \"BAR\");\r\n    foo.setProperty(\"2\", \"BAZ\");\r\n    String result = conversionService.convert(foo, String.class);\r\n    assertThat(result).contains(\"1=BAR\", \"2=BAZ\");\r\n}\n@Test\r\nvoid convertStringToProperties() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        a=b\r\n        c=2\r\n        d=\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\r\n}\n@Test\r\nvoid convertStringToPropertiesWithLeadingSpaces() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        \\s  foo=bar\r\n        \\s   bar=baz\r\n        \\s    baz=boo\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\r\n}\n// generic object conversion\r\n@Test\r\nvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\r\n}\n/**\r\n * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\r\n */\r\n@Test\r\nvoid convertObjectToObjectUsingValueOfMethod() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\r\n    // valueOf() invokes the constructor\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\r\n}\n@Test\r\nvoid convertObjectToStringUsingToString() {\r\n    SSN.reset();\r\n    assertThat(conversionService.convert(new SSN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\r\n    assertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\r\n    assertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\r\n}\n@Test\r\nvoid convertObjectToObjectUsingObjectConstructor() {\r\n    SSN.reset();\r\n    assertThat(conversionService.convert(\"123456789\", SSN.class)).isEqualTo(new SSN(\"123456789\"));\r\n    assertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\r\n    assertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\r\n}\n@Test\r\nvoid convertStringToTimezone() {\r\n    assertThat(conversionService.convert(\"GMT+2\", TimeZone.class).getID()).isEqualTo(\"GMT+02:00\");\r\n}\n@Test\r\nvoid convertObjectToStringWithJavaTimeOfMethodPresent() {\r\n    assertThat(conversionService.convert(ZoneId.of(\"GMT+1\"), String.class)).startsWith(\"GMT+\");\r\n}\n@Test\r\nvoid convertObjectToStringNotSupported() {\r\n    assertThat(conversionService.canConvert(TestEntity.class, String.class)).isFalse();\r\n}\n@Test\r\nvoid convertObjectToObjectWithJavaTimeOfMethod() {\r\n    assertThat(conversionService.convert(\"GMT+1\", ZoneId.class)).isEqualTo(ZoneId.of(\"GMT+1\"));\r\n}\n@Test\r\nvoid convertObjectToObjectNoValueOfMethodOrConstructor() {\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(3L, SSN.class));\r\n}\n@Test\r\nvoid convertObjectToObjectFinderMethod() {\r\n    TestEntity e = conversionService.convert(1L, TestEntity.class);\r\n    assertThat(e.getId()).isEqualTo(Long.valueOf(1));\r\n}\n@Test\r\nvoid convertObjectToObjectFinderMethodWithNull() {\r\n    TestEntity entity = (TestEntity) conversionService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class));\r\n    assertThat(entity).isNull();\r\n}\n@Test\r\nvoid convertObjectToObjectFinderMethodWithIdConversion() {\r\n    TestEntity entity = conversionService.convert(\"1\", TestEntity.class);\r\n    assertThat(entity.getId()).isEqualTo(Long.valueOf(1));\r\n}\n@Test\r\nvoid convertCharArrayToString() {\r\n    String converted = conversionService.convert(new char[] { 'a', 'b', 'c' }, String.class);\r\n    assertThat(converted).isEqualTo(\"a,b,c\");\r\n}\n@Test\r\nvoid convertStringToCharArray() {\r\n    char[] converted = conversionService.convert(\"a,b,c\", char[].class);\r\n    assertThat(converted).containsExactly('a', 'b', 'c');\r\n}\n@Test\r\nvoid convertStringToCustomCharArray() {\r\n    conversionService.addConverter(String.class, char[].class, String::toCharArray);\r\n    char[] converted = conversionService.convert(\"abc\", char[].class);\r\n    assertThat(converted).containsExactly('a', 'b', 'c');\r\n}\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\r\n    String[][] grid = new String[][] { { \"1\", \"2\", \"3\", \"4\" }, { \"5\", \"6\", \"7\", \"8\" }, { \"9\", \"10\", \"11\", \"12\" } };\r\n    List<String[]> converted = conversionService.convert(grid, List.class);\r\n    String[][] convertedBack = conversionService.convert(converted, String[][].class);\r\n    assertThat(convertedBack).isEqualTo(grid);\r\n}\n@Test\r\nvoid convertCannotOptimizeArray() {\r\n    conversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    byte[] converted = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(converted).isNotSameAs(byteArray);\r\n    assertThat(converted).containsExactly(2, 3, 4);\r\n}\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid convertObjectToOptional() {\r\n    Method method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\r\n    MethodParameter parameter = new MethodParameter(method, 0);\r\n    TypeDescriptor descriptor = new TypeDescriptor(parameter);\r\n    Object actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\r\n    assertThat(actual.getClass()).isEqualTo(Optional.class);\r\n    assertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\r\n}\n@Test\r\nvoid convertObjectToOptionalNull() {\r\n    assertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\r\n}\n@Test\r\nvoid convertExistingOptional() {\r\n    assertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\r\n}\n// test fields and helpers\r\npublic List<Integer> genericList = new ArrayList<>();\npublic Stream<Integer> genericStream;\npublic Map<Integer, Foo> genericMap = new HashMap<>();\npublic EnumSet<Foo> enumSet;\npublic Object assignableTarget;\npublic void handlerMethod(List<Color> color) ;\npublic enum Foo {\r\n\r\n    BAR, BAZ\r\n}\npublic enum SubFoo {\r\n\r\n    BAR {\r\n\r\n        @Override\r\n        String s() {\r\n            return \"x\";\r\n        }\r\n    }\r\n    , BAZ {\r\n\r\n        @Override\r\n        String s() {\r\n            return \"y\";\r\n        }\r\n    }\r\n    ;\r\n\r\n    abstract String s();\r\n}\npublic class ColorConverter implements Converter<String, Color> {\r\n\r\n    @Override\r\n    public Color convert(String source) {\r\n        if (!source.startsWith(\"#\")) {\r\n            source = \"#\" + source;\r\n        }\r\n        return Color.decode(source);\r\n    }\r\n}\n@SuppressWarnings(\"serial\")\r\npublic static class CustomNumber extends Number {\r\n\r\n    @Override\r\n    public double doubleValue() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public float floatValue() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int intValue() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public long longValue() {\r\n        return 0;\r\n    }\r\n}\npublic static class TestEntity {\r\n\r\n    private Long id;\r\n\r\n    public TestEntity(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public static TestEntity findTestEntity(Long id) {\r\n        return new TestEntity(id);\r\n    }\r\n\r\n    public void handleOptionalValue(Optional<List<Integer>> value) {\r\n    }\r\n}\nprivate static class ListWrapper {\r\n\r\n    private List<?> list;\r\n\r\n    public ListWrapper(List<?> list) {\r\n        this.list = list;\r\n    }\r\n\r\n    public List<?> getList() {\r\n        return list;\r\n    }\r\n}\nprivate static class SSN {\r\n\r\n    static int constructorCount = 0;\r\n\r\n    static int toStringCount = 0;\r\n\r\n    static void reset() {\r\n        constructorCount = 0;\r\n        toStringCount = 0;\r\n    }\r\n\r\n    private final String value;\r\n\r\n    public SSN(String value) {\r\n        constructorCount++;\r\n        this.value = value;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(@Nullable Object o) {\r\n        if (!(o instanceof SSN ssn)) {\r\n            return false;\r\n        }\r\n        return this.value.equals(ssn.value);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return value.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        toStringCount++;\r\n        return value;\r\n    }\r\n}\nprivate static class ISBN {\r\n\r\n    static int constructorCount = 0;\r\n\r\n    static int toStringCount = 0;\r\n\r\n    static int valueOfCount = 0;\r\n\r\n    static void reset() {\r\n        constructorCount = 0;\r\n        toStringCount = 0;\r\n        valueOfCount = 0;\r\n    }\r\n\r\n    private final String value;\r\n\r\n    public ISBN(String value) {\r\n        constructorCount++;\r\n        this.value = value;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(@Nullable Object o) {\r\n        if (!(o instanceof ISBN isbn)) {\r\n            return false;\r\n        }\r\n        return this.value.equals(isbn.value);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return value.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        toStringCount++;\r\n        return value;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public static ISBN valueOf(String value) {\r\n        valueOfCount++;\r\n        return new ISBN(value);\r\n    }\r\n}",
    "comment": "\n * Tests for {@link DefaultConversionService}.\n *\n * <p>In this package for enforcing accessibility checks to non-public classes outside\n * the {@code org.springframework.core.convert.support} implementation package.\n * Only in such a scenario, {@code setAccessible(true)} is actually necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @author Sam Brannen\n "
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToCharacter()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToCharacter() {\r\n    assertThat(conversionService.convert(\"1\", Character.class)).isEqualTo(Character.valueOf('1'));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToCharacterEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToCharacterEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Character.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToCharacterInvalidString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToCharacterInvalidString() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(\"invalid\", Character.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#characterToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid characterToString() {\r\n    assertThat(conversionService.convert('3', String.class)).isEqualTo(\"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBooleanTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBooleanTrue() {\r\n    assertThat(conversionService.convert(\"true\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"on\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"yes\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"1\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"TRUE\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"ON\", Boolean.class)).isTrue();\r\n    assertThat(conversionService.convert(\"YES\", Boolean.class)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBooleanFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBooleanFalse() {\r\n    assertThat(conversionService.convert(\"false\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"off\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"no\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"0\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"FALSE\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"OFF\", Boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(\"NO\", Boolean.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBooleanEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBooleanEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Boolean.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBooleanInvalidString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBooleanInvalidString() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(\"invalid\", Boolean.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#booleanToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid booleanToString() {\r\n    assertThat(conversionService.convert(true, String.class)).isEqualTo(\"true\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToByte()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToByte() {\r\n    assertThat(conversionService.convert(\"1\", Byte.class)).isEqualTo((byte) 1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#byteToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid byteToString() {\r\n    assertThat(conversionService.convert(\"A\".getBytes()[0], String.class)).isEqualTo(\"65\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToShort()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToShort() {\r\n    assertThat(conversionService.convert(\"1\", Short.class)).isEqualTo((short) 1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#shortToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid shortToString() {\r\n    short three = 3;\r\n    assertThat(conversionService.convert(three, String.class)).isEqualTo(\"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToInteger()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToInteger() {\r\n    assertThat(conversionService.convert(\"1\", Integer.class)).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid integerToString() {\r\n    assertThat(conversionService.convert(3, String.class)).isEqualTo(\"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToLong()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToLong() {\r\n    assertThat(conversionService.convert(\"1\", Long.class)).isEqualTo(Long.valueOf(1));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#longToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid longToString() {\r\n    assertThat(conversionService.convert(3L, String.class)).isEqualTo(\"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToFloat()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToFloat() {\r\n    assertThat(conversionService.convert(\"1.0\", Float.class)).isEqualTo(Float.valueOf(\"1.0\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#floatToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid floatToString() {\r\n    assertThat(conversionService.convert(Float.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToDouble()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToDouble() {\r\n    assertThat(conversionService.convert(\"1.0\", Double.class)).isEqualTo(Double.valueOf(\"1.0\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#doubleToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid doubleToString() {\r\n    assertThat(conversionService.convert(Double.valueOf(\"1.0\"), String.class)).isEqualTo(\"1.0\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBigInteger()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBigInteger() {\r\n    assertThat(conversionService.convert(\"1\", BigInteger.class)).isEqualTo(new BigInteger(\"1\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigIntegerToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid bigIntegerToString() {\r\n    assertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBigDecimal()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToBigDecimal() {\r\n    assertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigDecimalToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid bigDecimalToString() {\r\n    assertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumber()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToNumber() {\r\n    assertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumberEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToNumberEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Number.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnum()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToEnum() {\r\n    assertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumWithSubclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToEnumEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Foo.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid enumToString() {\r\n    assertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnum()",
    "entityType": "method",
    "code": "@Test\r\nvoid integerToEnum() {\r\n    assertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumWithSubclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid integerToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid integerToEnumNull() {\r\n    assertThat(conversionService.convert(null, Foo.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToInteger()",
    "entityType": "method",
    "code": "@Test\r\nvoid enumToInteger() {\r\n    assertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumSet()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToEnumSet() throws Exception {\r\n    assertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToLocale()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToLocale() {\r\n    assertThat(conversionService.convert(\"en\", Locale.class)).isEqualTo(Locale.ENGLISH);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToLocaleWithCountry()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToLocaleWithCountry() {\r\n    assertThat(conversionService.convert(\"en_US\", Locale.class)).isEqualTo(Locale.US);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToLocaleWithLanguageTag()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToLocaleWithLanguageTag() {\r\n    assertThat(conversionService.convert(\"en-US\", Locale.class)).isEqualTo(Locale.US);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToCharset()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToCharset() {\r\n    assertThat(conversionService.convert(\"UTF-8\", Charset.class)).isEqualTo(StandardCharsets.UTF_8);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#charsetToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid charsetToString() {\r\n    assertThat(conversionService.convert(StandardCharsets.UTF_8, String.class)).isEqualTo(\"UTF-8\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToCurrency()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToCurrency() {\r\n    assertThat(conversionService.convert(\"EUR\", Currency.class)).isEqualTo(Currency.getInstance(\"EUR\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#currencyToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid currencyToString() {\r\n    assertThat(conversionService.convert(Currency.getInstance(\"USD\"), String.class)).isEqualTo(\"USD\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToString() {\r\n    String str = \"test\";\r\n    assertThat(conversionService.convert(str, String.class)).isSameAs(str);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#uuidToStringAndStringToUuid()",
    "entityType": "method",
    "code": "@Test\r\nvoid uuidToStringAndStringToUuid() {\r\n    UUID uuid = UUID.randomUUID();\r\n    String convertToString = conversionService.convert(uuid, String.class);\r\n    UUID convertToUUID = conversionService.convert(convertToString, UUID.class);\r\n    assertThat(convertToUUID).isEqualTo(uuid);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToPatternEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToPatternEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Pattern.class)).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToPattern()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringToPattern() {\r\n    String pattern = \"\\\\s\";\r\n    assertThat(conversionService.convert(pattern, Pattern.class)).isInstanceOfSatisfying(Pattern.class, regex -> assertThat(regex.pattern()).isEqualTo(pattern));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#patternToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid patternToString() {\r\n    String regex = \"\\\\d\";\r\n    assertThat(conversionService.convert(Pattern.compile(regex), String.class)).isEqualTo(regex);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumber()",
    "entityType": "method",
    "code": "@Test\r\nvoid numberToNumber() {\r\n    assertThat(conversionService.convert(1, Long.class)).isEqualTo(Long.valueOf(1));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumberNotSupportedNumber()",
    "entityType": "method",
    "code": "@Test\r\nvoid numberToNumberNotSupportedNumber() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToCharacter()",
    "entityType": "method",
    "code": "@Test\r\nvoid numberToCharacter() {\r\n    assertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#characterToNumber()",
    "entityType": "method",
    "code": "@Test\r\nvoid characterToNumber() {\r\n    assertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionInterface()",
    "entityType": "method",
    "code": "// collection conversion\r\n@Test\r\nvoid convertArrayToCollectionInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Collection.class);\r\n    assertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToSetInterface()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToSetInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Set.class);\r\n    assertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToListInterface()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToListInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, List.class);\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionGenericTypeConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToStream()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToStream() throws Exception {\r\n    String[] source = { \"1\", \"3\", \"4\" };\r\n    @SuppressWarnings(\"unchecked\")\r\n    Stream<Integer> result = (Stream<Integer>) this.conversionService.convert(source, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericStream\")));\r\n    assertThat(result).containsExactly(1, 3, 4);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#spr7766()",
    "entityType": "method",
    "code": "@Test\r\nvoid spr7766() throws Exception {\r\n    conversionService.addConverter(new ColorConverter());\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Color> colors = (List<Color>) conversionService.convert(new String[] { \"ffffff\", \"#000000\" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod(\"handlerMethod\", List.class), 0)));\r\n    assertThat(colors).containsExactly(Color.WHITE, Color.BLACK);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionImpl()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToCollectionImpl() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    ArrayList<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, ArrayList.class);\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToAbstractCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToAbstractCollection() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, AbstractList.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToString() {\r\n    String result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, String.class);\r\n    assertThat(result).isEqualTo(\"1,2,3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToStringWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToStringWithElementConversion() {\r\n    String result = conversionService.convert(new Integer[] { 1, 2, 3 }, String.class);\r\n    assertThat(result).isEqualTo(\"1,2,3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertEmptyArrayToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertEmptyArrayToString() {\r\n    String result = conversionService.convert(new String[0], String.class);\r\n    assertThat(result).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToArray() {\r\n    String[] result = conversionService.convert(\"1,2,3\", String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToArrayWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToArrayWithElementConversion() {\r\n    Integer[] result = conversionService.convert(\"1,2,3\", Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToPrimitiveArrayWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToPrimitiveArrayWithElementConversion() {\r\n    int[] result = conversionService.convert(\"1,2,3\", int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertEmptyStringToArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertEmptyStringToArray() {\r\n    String[] result = conversionService.convert(\"\", String[].class);\r\n    assertThat(result).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToObject()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToObject() {\r\n    Object[] array = new Object[] { 3L };\r\n    Object result = conversionService.convert(array, Long.class);\r\n    assertThat(result).isEqualTo(3L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToObjectWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToObjectWithElementConversion() {\r\n    String[] array = new String[] { \"3\" };\r\n    Integer result = conversionService.convert(array, Integer.class);\r\n    assertThat(result).isEqualTo(3);\r\n}",
    "comment": ""
  }
]