[
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectBeingFloatArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectBeingFloatArray() {\r\n    Object array = new float[] { 9.9f, 9.54f };\r\n    int expected = ObjectUtils.nullSafeHashCode((float[]) array);\r\n    assertEqualHashCodes(expected, array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#visitEnum(String,String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnum(final String name, final String descriptor, final String value) {\r\n    // Case of an element_value with an enum_const_value field.\r\n    // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.16.1.\r\n    ++numElementValuePairs;\r\n    if (useNamedValues) {\r\n        annotation.putShort(symbolTable.addConstantUtf8(name));\r\n    }\r\n    annotation.put12('e', symbolTable.addConstantUtf8(descriptor)).putShort(symbolTable.addConstantUtf8(value));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithNullIntArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithNullIntArray() {\r\n    int[] array = null;\r\n    assertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithIntArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithIntArray() {\r\n    int[] array = { 884, 340 };\r\n    int actual = ObjectUtils.nullSafeHashCode(array);\r\n    assertThat(actual).isEqualTo(Arrays.hashCode(array));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#visitAnnotation(String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitAnnotation(final String name, final String descriptor) {\r\n    // Case of an element_value with an annotation_value field.\r\n    // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.16.1.\r\n    ++numElementValuePairs;\r\n    if (useNamedValues) {\r\n        annotation.putShort(symbolTable.addConstantUtf8(name));\r\n    }\r\n    // Write tag and type_index, and reserve 2 bytes for num_element_value_pairs.\r\n    annotation.put12('@', symbolTable.addConstantUtf8(descriptor)).putShort(0);\r\n    return new AnnotationWriter(symbolTable, /* useNamedValues= */\r\n    true, annotation, null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectBeingIntArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectBeingIntArray() {\r\n    Object array = new int[] { 89, 32 };\r\n    int expected = ObjectUtils.nullSafeHashCode((int[]) array);\r\n    assertEqualHashCodes(expected, array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#visitArray(String)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitArray(final String name) {\r\n    // Case of an element_value with an array_value field.\r\n    // https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.16.1\r\n    ++numElementValuePairs;\r\n    if (useNamedValues) {\r\n        annotation.putShort(symbolTable.addConstantUtf8(name));\r\n    }\r\n    // Write tag, and reserve 2 bytes for num_values. Here we take advantage of the fact that the\r\n    // end of an element_value of array type is similar to the end of an 'annotation' structure: an\r\n    // unsigned short num_values followed by num_values element_value, versus an unsigned short\r\n    // num_element_value_pairs, followed by num_element_value_pairs { element_name_index,\r\n    // element_value } tuples. This allows us to use an AnnotationWriter with unnamed values to\r\n    // visit the array elements. Its num_element_value_pairs will correspond to the number of array\r\n    // elements and will be stored in what is in fact num_values.\r\n    annotation.put12('[', 0);\r\n    return new AnnotationWriter(symbolTable, /* useNamedValues= */\r\n    false, annotation, null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithNullLongArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithNullLongArray() {\r\n    long[] array = null;\r\n    assertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithLongArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithLongArray() {\r\n    long[] array = { 7993L, 84320L };\r\n    int actual = ObjectUtils.nullSafeHashCode(array);\r\n    assertThat(actual).isEqualTo(Arrays.hashCode(array));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#visitEnd()",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnd() {\r\n    if (numElementValuePairsOffset != -1) {\r\n        byte[] data = annotation.data;\r\n        data[numElementValuePairsOffset] = (byte) (numElementValuePairs >>> 8);\r\n        data[numElementValuePairsOffset + 1] = (byte) numElementValuePairs;\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectBeingLongArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectBeingLongArray() {\r\n    Object array = new long[] { 4389, 320 };\r\n    int expected = ObjectUtils.nullSafeHashCode((long[]) array);\r\n    assertEqualHashCodes(expected, array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithNullShortArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithNullShortArray() {\r\n    short[] array = null;\r\n    assertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(String)",
    "entityType": "method",
    "code": "// -----------------------------------------------------------------------------------------------\r\n// Utility methods\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the size of a Runtime[In]Visible[Type]Annotations attribute containing this annotation\r\n * and all its <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the attribute name\r\n * to the constant pool of the class (if not null).\r\n *\r\n * @param attributeName one of \"Runtime[In]Visible[Type]Annotations\", or {@literal null}.\r\n * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing this\r\n *     annotation and all its predecessors. This includes the size of the attribute_name_index and\r\n *     attribute_length fields.\r\n */\r\nint computeAnnotationsSize(final String attributeName) {\r\n    if (attributeName != null) {\r\n        symbolTable.addConstantUtf8(attributeName);\r\n    }\r\n    // The attribute_name_index, attribute_length and num_annotations fields use 8 bytes.\r\n    int attributeSize = 8;\r\n    AnnotationWriter annotationWriter = this;\r\n    while (annotationWriter != null) {\r\n        attributeSize += annotationWriter.annotation.length;\r\n        annotationWriter = annotationWriter.previousAnnotation;\r\n    }\r\n    return attributeSize;\r\n}",
    "comment": "\n   * Returns the size of a Runtime[In]Visible[Type]Annotations attribute containing this annotation\n   * and all its <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the attribute name\n   * to the constant pool of the class (if not null).\n   *\n   * @param attributeName one of \"Runtime[In]Visible[Type]Annotations\", or {@literal null}.\n   * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing this\n   *     annotation and all its predecessors. This includes the size of the attribute_name_index and\n   *     attribute_length fields.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithShortArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithShortArray() {\r\n    short[] array = { 4, 25 };\r\n    int actual = ObjectUtils.nullSafeHashCode(array);\r\n    assertThat(actual).isEqualTo(Arrays.hashCode(array));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectBeingShortArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectBeingShortArray() {\r\n    Object array = new short[] { 5, 3 };\r\n    int expected = ObjectUtils.nullSafeHashCode((short[]) array);\r\n    assertEqualHashCodes(expected, array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObject()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeHashCodeWithObject() {\r\n    String str = \"Luke\";\r\n    assertThat(ObjectUtils.nullSafeHashCode(str)).isEqualTo(str.hashCode());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter)",
    "entityType": "method",
    "code": "/**\r\n * Returns the size of the Runtime[In]Visible[Type]Annotations attributes containing the given\r\n * annotations and all their <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the\r\n * attribute names to the constant pool of the class (if not null).\r\n *\r\n * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\r\n *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\r\n *     {@literal null}.\r\n * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\r\n *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\r\n *     field. May be {@literal null}.\r\n * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\r\n *     field, method or class. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\r\n *     field, method or class field. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing the\r\n *     given annotations and all their predecessors. This includes the size of the\r\n *     attribute_name_index and attribute_length fields.\r\n */\r\nstatic int computeAnnotationsSize(final AnnotationWriter lastRuntimeVisibleAnnotation, final AnnotationWriter lastRuntimeInvisibleAnnotation, final AnnotationWriter lastRuntimeVisibleTypeAnnotation, final AnnotationWriter lastRuntimeInvisibleTypeAnnotation) {\r\n    int size = 0;\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        size += lastRuntimeVisibleAnnotation.computeAnnotationsSize(Constants.RUNTIME_VISIBLE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize(Constants.RUNTIME_INVISIBLE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\r\n    }\r\n    return size;\r\n}",
    "comment": "\n   * Returns the size of the Runtime[In]Visible[Type]Annotations attributes containing the given\n   * annotations and all their <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the\n   * attribute names to the constant pool of the class (if not null).\n   *\n   * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\n   *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\n   *     {@literal null}.\n   * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\n   *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\n   *     field. May be {@literal null}.\n   * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\n   *     field, method or class. The previous ones can be accessed with the {@link\n   *     #previousAnnotation} field. May be {@literal null}.\n   * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\n   *     field, method or class field. The previous ones can be accessed with the {@link\n   *     #previousAnnotation} field. May be {@literal null}.\n   * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing the\n   *     given annotations and all their predecessors. This includes the size of the\n   *     attribute_name_index and attribute_length fields.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectArray() {\r\n    Object[] array = { \"Leia\", \"Han\" };\r\n    int actual = ObjectUtils.nullSafeHashCode(array);\r\n    assertThat(actual).isEqualTo(Arrays.hashCode(array));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeHashCode((Object[]) null)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectBeingObjectArray()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectBeingObjectArray() {\r\n    Object array = new Object[] { \"Luke\", \"Anakin\" };\r\n    int expected = ObjectUtils.nullSafeHashCode((Object[]) array);\r\n    assertEqualHashCodes(expected, array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeHashCodeWithObjectEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid nullSafeHashCodeWithObjectEqualToNull() {\r\n    Object[] array = null;\r\n    assertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#putAnnotations(int,ByteVector)",
    "entityType": "method",
    "code": "/**\r\n * Puts a Runtime[In]Visible[Type]Annotations attribute containing this annotations and all its\r\n * <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector. Annotations are\r\n * put in the same order they have been visited.\r\n *\r\n * @param attributeNameIndex the constant pool index of the attribute name (one of\r\n *     \"Runtime[In]Visible[Type]Annotations\").\r\n * @param output where the attribute must be put.\r\n */\r\nvoid putAnnotations(final int attributeNameIndex, final ByteVector output) {\r\n    // For num_annotations.\r\n    int attributeLength = 2;\r\n    int numAnnotations = 0;\r\n    AnnotationWriter annotationWriter = this;\r\n    AnnotationWriter firstAnnotation = null;\r\n    while (annotationWriter != null) {\r\n        // In case the user forgot to call visitEnd().\r\n        annotationWriter.visitEnd();\r\n        attributeLength += annotationWriter.annotation.length;\r\n        numAnnotations++;\r\n        firstAnnotation = annotationWriter;\r\n        annotationWriter = annotationWriter.previousAnnotation;\r\n    }\r\n    output.putShort(attributeNameIndex);\r\n    output.putInt(attributeLength);\r\n    output.putShort(numAnnotations);\r\n    annotationWriter = firstAnnotation;\r\n    while (annotationWriter != null) {\r\n        output.putByteArray(annotationWriter.annotation.data, 0, annotationWriter.annotation.length);\r\n        annotationWriter = annotationWriter.nextAnnotation;\r\n    }\r\n}",
    "comment": "\n   * Puts a Runtime[In]Visible[Type]Annotations attribute containing this annotations and all its\n   * <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector. Annotations are\n   * put in the same order they have been visited.\n   *\n   * @param attributeNameIndex the constant pool index of the attribute name (one of\n   *     \"Runtime[In]Visible[Type]Annotations\").\n   * @param output where the attribute must be put.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithBooleanArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithBooleanArray() {\r\n    boolean[] array = { true, false };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{true, false}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithBooleanArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithBooleanArrayBeingEmpty() {\r\n    boolean[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithBooleanArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithBooleanArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((boolean[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#putAnnotations(SymbolTable,AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter,ByteVector)",
    "entityType": "method",
    "code": "/**\r\n * Puts the Runtime[In]Visible[Type]Annotations attributes containing the given annotations and\r\n * all their <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector.\r\n * Annotations are put in the same order they have been visited.\r\n *\r\n * @param symbolTable where the constants used in the AnnotationWriter instances are stored.\r\n * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\r\n *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\r\n *     {@literal null}.\r\n * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\r\n *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\r\n *     field. May be {@literal null}.\r\n * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\r\n *     field, method or class. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\r\n *     field, method or class field. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param output where the attributes must be put.\r\n */\r\nstatic void putAnnotations(final SymbolTable symbolTable, final AnnotationWriter lastRuntimeVisibleAnnotation, final AnnotationWriter lastRuntimeInvisibleAnnotation, final AnnotationWriter lastRuntimeVisibleTypeAnnotation, final AnnotationWriter lastRuntimeInvisibleTypeAnnotation, final ByteVector output) {\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        lastRuntimeVisibleAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        lastRuntimeInvisibleAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        lastRuntimeVisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        lastRuntimeInvisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output);\r\n    }\r\n}",
    "comment": "\n   * Puts the Runtime[In]Visible[Type]Annotations attributes containing the given annotations and\n   * all their <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector.\n   * Annotations are put in the same order they have been visited.\n   *\n   * @param symbolTable where the constants used in the AnnotationWriter instances are stored.\n   * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\n   *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\n   *     {@literal null}.\n   * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\n   *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\n   *     field. May be {@literal null}.\n   * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\n   *     field, method or class. The previous ones can be accessed with the {@link\n   *     #previousAnnotation} field. May be {@literal null}.\n   * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\n   *     field, method or class field. The previous ones can be accessed with the {@link\n   *     #previousAnnotation} field. May be {@literal null}.\n   * @param output where the attributes must be put.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithByteArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithByteArray() {\r\n    byte[] array = { 5, 8 };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{5, 8}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithByteArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithByteArrayBeingEmpty() {\r\n    byte[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#computeParameterAnnotationsSize(String,AnnotationWriter[],int)",
    "entityType": "method",
    "code": "/**\r\n * Returns the size of a Runtime[In]VisibleParameterAnnotations attribute containing all the\r\n * annotation lists from the given AnnotationWriter sub-array. Also adds the attribute name to the\r\n * constant pool of the class.\r\n *\r\n * @param attributeName one of \"Runtime[In]VisibleParameterAnnotations\".\r\n * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\r\n *     element).\r\n * @param annotableParameterCount the number of elements in annotationWriters to take into account\r\n *     (elements [0..annotableParameterCount[ are taken into account).\r\n * @return the size in bytes of a Runtime[In]VisibleParameterAnnotations attribute corresponding\r\n *     to the given sub-array of AnnotationWriter lists. This includes the size of the\r\n *     attribute_name_index and attribute_length fields.\r\n */\r\nstatic int computeParameterAnnotationsSize(final String attributeName, final AnnotationWriter[] annotationWriters, final int annotableParameterCount) {\r\n    // Note: attributeName is added to the constant pool by the call to computeAnnotationsSize\r\n    // below. This assumes that there is at least one non-null element in the annotationWriters\r\n    // sub-array (which is ensured by the lazy instantiation of this array in MethodWriter).\r\n    // The attribute_name_index, attribute_length and num_parameters fields use 7 bytes, and each\r\n    // element of the parameter_annotations array uses 2 bytes for its num_annotations field.\r\n    int attributeSize = 7 + 2 * annotableParameterCount;\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        attributeSize += annotationWriter == null ? 0 : annotationWriter.computeAnnotationsSize(attributeName) - 8;\r\n    }\r\n    return attributeSize;\r\n}",
    "comment": "\n   * Returns the size of a Runtime[In]VisibleParameterAnnotations attribute containing all the\n   * annotation lists from the given AnnotationWriter sub-array. Also adds the attribute name to the\n   * constant pool of the class.\n   *\n   * @param attributeName one of \"Runtime[In]VisibleParameterAnnotations\".\n   * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\n   *     element).\n   * @param annotableParameterCount the number of elements in annotationWriters to take into account\n   *     (elements [0..annotableParameterCount[ are taken into account).\n   * @return the size in bytes of a Runtime[In]VisibleParameterAnnotations attribute corresponding\n   *     to the given sub-array of AnnotationWriter lists. This includes the size of the\n   *     attribute_name_index and attribute_length fields.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithByteArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithByteArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((byte[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithCharArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithCharArray() {\r\n    char[] array = { 'A', 'B' };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{'A', 'B'}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithCharArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithCharArrayBeingEmpty() {\r\n    char[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithCharArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithCharArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((char[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithDoubleArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithDoubleArray() {\r\n    double[] array = { 8594.93, 8594023.95 };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{8594.93, 8594023.95}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.asm.AnnotationWriter#putParameterAnnotations(int,AnnotationWriter[],int,ByteVector)",
    "entityType": "method",
    "code": "/**\r\n * Puts a Runtime[In]VisibleParameterAnnotations attribute containing all the annotation lists\r\n * from the given AnnotationWriter sub-array in the given ByteVector.\r\n *\r\n * @param attributeNameIndex constant pool index of the attribute name (one of\r\n *     Runtime[In]VisibleParameterAnnotations).\r\n * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\r\n *     element).\r\n * @param annotableParameterCount the number of elements in annotationWriters to put (elements\r\n *     [0..annotableParameterCount[ are put).\r\n * @param output where the attribute must be put.\r\n */\r\nstatic void putParameterAnnotations(final int attributeNameIndex, final AnnotationWriter[] annotationWriters, final int annotableParameterCount, final ByteVector output) {\r\n    // The num_parameters field uses 1 byte, and each element of the parameter_annotations array\r\n    // uses 2 bytes for its num_annotations field.\r\n    int attributeLength = 1 + 2 * annotableParameterCount;\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        attributeLength += annotationWriter == null ? 0 : annotationWriter.computeAnnotationsSize(null) - 8;\r\n    }\r\n    output.putShort(attributeNameIndex);\r\n    output.putInt(attributeLength);\r\n    output.putByte(annotableParameterCount);\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        AnnotationWriter firstAnnotation = null;\r\n        int numAnnotations = 0;\r\n        while (annotationWriter != null) {\r\n            // In case user the forgot to call visitEnd().\r\n            annotationWriter.visitEnd();\r\n            numAnnotations++;\r\n            firstAnnotation = annotationWriter;\r\n            annotationWriter = annotationWriter.previousAnnotation;\r\n        }\r\n        output.putShort(numAnnotations);\r\n        annotationWriter = firstAnnotation;\r\n        while (annotationWriter != null) {\r\n            output.putByteArray(annotationWriter.annotation.data, 0, annotationWriter.annotation.length);\r\n            annotationWriter = annotationWriter.nextAnnotation;\r\n        }\r\n    }\r\n}",
    "comment": "\n   * Puts a Runtime[In]VisibleParameterAnnotations attribute containing all the annotation lists\n   * from the given AnnotationWriter sub-array in the given ByteVector.\n   *\n   * @param attributeNameIndex constant pool index of the attribute name (one of\n   *     Runtime[In]VisibleParameterAnnotations).\n   * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\n   *     element).\n   * @param annotableParameterCount the number of elements in annotationWriters to put (elements\n   *     [0..annotableParameterCount[ are put).\n   * @param output where the attribute must be put.\n   "
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithDoubleArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithDoubleArrayBeingEmpty() {\r\n    double[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithDoubleArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithDoubleArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((double[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithFloatArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithFloatArray() {\r\n    float[] array = { 8.6f, 43.8f };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{8.6, 43.8}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithFloatArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithFloatArrayBeingEmpty() {\r\n    float[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithFloatArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithFloatArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((float[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithIntArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithIntArray() {\r\n    int[] array = { 9, 64 };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{9, 64}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithIntArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithIntArrayBeingEmpty() {\r\n    int[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithIntArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithIntArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((int[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithLongArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithLongArray() {\r\n    long[] array = { 434L, 23423L };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{434, 23423}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithLongArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithLongArrayBeingEmpty() {\r\n    long[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithLongArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithLongArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((long[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithPlainOldString()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithPlainOldString() {\r\n    assertThat(ObjectUtils.nullSafeToString(\"I shoh love tha taste of mangoes\")).isEqualTo(\"I shoh love tha taste of mangoes\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithObjectArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithObjectArray() {\r\n    Object[] array = { \"Han\", 43L };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{Han, 43}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithObjectArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithObjectArrayBeingEmpty() {\r\n    Object[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithObjectArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithObjectArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((Object[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithShortArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithShortArray() {\r\n    short[] array = { 7, 9 };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{7, 9}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithShortArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithShortArrayBeingEmpty() {\r\n    short[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithShortArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithShortArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((short[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithStringArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithStringArray() {\r\n    String[] array = { \"Luke\", \"Anakin\" };\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{Luke, Anakin}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithStringArrayBeingEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithStringArrayBeingEmpty() {\r\n    String[] array = ;;\r\n    assertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#nullSafeToStringWithStringArrayEqualToNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeToStringWithStringArrayEqualToNull() {\r\n    assertThat(ObjectUtils.nullSafeToString((String[]) null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#containsConstant()",
    "entityType": "method",
    "code": "@Test\r\nvoid containsConstant() {\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"FOO\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"foo\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"BaR\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"bar\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"BAZ\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"baz\")).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"BOGUS\")).isFalse();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"FOO\", true)).isTrue();\r\n    assertThat(ObjectUtils.containsConstant(Tropes.values(), \"foo\", true)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#containsElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid containsElement() {\r\n    Object[] array = { \"foo\", \"bar\", 42, new String[] { \"baz\", \"quux\" } };\r\n    assertThat(ObjectUtils.containsElement(null, \"foo\")).isFalse();\r\n    assertThat(ObjectUtils.containsElement(array, null)).isFalse();\r\n    assertThat(ObjectUtils.containsElement(array, \"bogus\")).isFalse();\r\n    assertThat(ObjectUtils.containsElement(array, \"foo\")).isTrue();\r\n    assertThat(ObjectUtils.containsElement(array, \"bar\")).isTrue();\r\n    assertThat(ObjectUtils.containsElement(array, 42)).isTrue();\r\n    assertThat(ObjectUtils.containsElement(array, new String[] { \"baz\", \"quux\" })).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#caseInsensitiveValueOf()",
    "entityType": "method",
    "code": "@Test\r\nvoid caseInsensitiveValueOf() {\r\n    assertThat(ObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"foo\")).isEqualTo(Tropes.FOO);\r\n    assertThat(ObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"BAR\")).isEqualTo(Tropes.BAR);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"bogus\")).withMessage(\"Constant [bogus] does not exist in enum type org.springframework.util.ObjectUtilsTests$Tropes\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#assertEqualHashCodes(int,Object)",
    "entityType": "method",
    "code": "private static void assertEqualHashCodes(int expected, Object array) {\r\n    int actual = ObjectUtils.nullSafeHashCode(array);\r\n    assertThat(actual).isEqualTo(expected);\r\n    assertThat(array.hashCode()).isNotEqualTo(actual);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ObjectUtilsTests#unwrapOptional()",
    "entityType": "method",
    "code": "@Test\r\nvoid unwrapOptional() {\r\n    assertThat(ObjectUtils.unwrapOptional(null)).isNull();\r\n    assertThat(ObjectUtils.unwrapOptional(\"some value\")).isEqualTo(\"some value\");\r\n    assertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\r\n    assertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\r\n    Optional<Optional<Object>> nestedEmptyOptional = Optional.of(Optional.empty());\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ObjectUtils.unwrapOptional(nestedEmptyOptional)).withMessage(\"Multi-level Optional usage not supported\");\r\n    Optional<Optional<String>> nestedStringOptional = Optional.of(Optional.of(\"some value\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ObjectUtils.unwrapOptional(nestedStringOptional)).withMessage(\"Multi-level Optional usage not supported\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests",
    "entityType": "class",
    "code": "private static final String truncated = \" (truncated)...\";\nprivate static final int truncatedLength = 100 + truncated.length();\n@Test\r\nvoid nullSafeConciseToStringForNull() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(null)).isEqualTo(\"null\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForEmptyOptional() {\r\n    Optional<String> optional = Optional.empty();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(\"Optional.empty\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionals() {\r\n    Optional<Tropes> optionalEnum = Optional.of(Tropes.BAR);\r\n    String expected = \"Optional[BAR]\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalEnum)).isEqualTo(expected);\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    Optional<String> optionalString = Optional.of(repeat100);\r\n    expected = \"Optional[%s]\".formatted(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n    optionalString = Optional.of(repeat101);\r\n    expected = \"Optional[%s]\".formatted(repeat100 + truncated);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionalCustomType() {\r\n    class CustomType ;\r\n    CustomType customType = new CustomType();\r\n    Optional<CustomType> optional = Optional.of(customType);\r\n    String expected = \"Optional[%s]\".formatted(ObjectUtils.nullSafeConciseToString(customType));\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(expected);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForClass() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(String.class)).isEqualTo(\"java.lang.String\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForStrings() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForStringBuilders() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(\"foo\"))).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat100))).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat101))).hasSize(truncatedLength).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForEnum() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Tropes.FOO)).isEqualTo(\"FOO\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForPrimitivesAndWrappers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(true)).isEqualTo(\"true\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString('X')).isEqualTo(\"X\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(42L)).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(99.1234D)).isEqualTo(\"99.1234\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForBigNumbers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigInteger.valueOf(42L))).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigDecimal.valueOf(99.1234D))).isEqualTo(\"99.1234\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForDate() {\r\n    Date date = new Date();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(date)).isEqualTo(date.toString());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForTemporal() {\r\n    LocalDate localDate = LocalDate.now();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localDate)).isEqualTo(localDate.toString());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForUUID() {\r\n    UUID id = UUID.randomUUID();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(id)).isEqualTo(id.toString());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForFile() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForPath() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForURI() {\r\n    String uri = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).isEqualTo(uri);\r\n    uri += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).hasSize(truncatedLength).startsWith(uri.subSequence(0, 100)).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForURL() throws Exception {\r\n    String url = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).isEqualTo(url);\r\n    url += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).hasSize(truncatedLength).startsWith(url.subSequence(0, 100)).endsWith(truncated);\r\n}\n@Test\r\nvoid nullSafeConciseToStringForInetAddress() {\r\n    InetAddress localhost = getLocalhost();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localhost)).isEqualTo(localhost.toString());\r\n}\nprivate static InetAddress getLocalhost() {\r\n    try {\r\n        return InetAddress.getLocalHost();\r\n    } catch (UnknownHostException ex) {\r\n        return InetAddress.getLoopbackAddress();\r\n    }\r\n}\n@Test\r\nvoid nullSafeConciseToStringForCharset() {\r\n    Charset charset = StandardCharsets.UTF_8;\r\n    assertThat(ObjectUtils.nullSafeConciseToString(charset)).isEqualTo(charset.name());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForCurrency() {\r\n    Currency currency = Currency.getInstance(Locale.US);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(currency)).isEqualTo(currency.toString());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForLocale() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Locale.GERMANY)).isEqualTo(\"de_DE\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForRegExPattern() {\r\n    Pattern pattern = Pattern.compile(\"^(foo|bar)$\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(pattern)).isEqualTo(pattern.toString());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForTimeZone() {\r\n    TimeZone timeZone = TimeZone.getDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(timeZone)).isEqualTo(timeZone.getID());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForZoneId() {\r\n    ZoneId zoneId = ZoneId.systemDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(zoneId)).isEqualTo(zoneId.getId());\r\n}\n@Test\r\nvoid nullSafeConciseToStringForEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] ;)).isEqualTo(\";\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForNonEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] { 'a' })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] { \"enigma\" })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForEmptyCollections() {\r\n    List<String> list = List.of();\r\n    Set<Integer> set = Set.of();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForNonEmptyCollections() {\r\n    List<String> list = List.of(\"a\", \"b\");\r\n    Set<Integer> set = Set.of(1);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForEmptyMaps() {\r\n    Map<String, String> map = Map.of();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForNonEmptyMaps() {\r\n    Map<String, Integer> map = Map.of(\"a\", 1, \"b\", 2, \"c\", 3);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\r\n}\n@Test\r\nvoid nullSafeConciseToStringForCustomTypes() {\r\n    class ExplosiveType {\r\n\r\n        @Override\r\n        public String toString() {\r\n            throw new UnsupportedOperationException(\"no-go\");\r\n        }\r\n    }\r\n    ExplosiveType explosiveType = new ExplosiveType();\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(explosiveType::toString);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(explosiveType)).startsWith(prefix(ExplosiveType.class));\r\n    class WordyType {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"blah blah\".repeat(20);\r\n        }\r\n    }\r\n    WordyType wordyType = new WordyType();\r\n    assertThat(wordyType).asString().hasSizeGreaterThanOrEqualTo(180);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(wordyType)).startsWith(prefix(WordyType.class));\r\n}\nprivate static String prefix(Class<?> clazz) {\r\n    return clazz.getTypeName() + \"@\";\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNull() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(null)).isEqualTo(\"null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyOptional()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForEmptyOptional() {\r\n    Optional<String> optional = Optional.empty();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(\"Optional.empty\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionals()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionals() {\r\n    Optional<Tropes> optionalEnum = Optional.of(Tropes.BAR);\r\n    String expected = \"Optional[BAR]\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalEnum)).isEqualTo(expected);\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    Optional<String> optionalString = Optional.of(repeat100);\r\n    expected = \"Optional[%s]\".formatted(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n    optionalString = Optional.of(repeat101);\r\n    expected = \"Optional[%s]\".formatted(repeat100 + truncated);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionalCustomType()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionalCustomType() {\r\n    class CustomType ;\r\n    CustomType customType = new CustomType();\r\n    Optional<CustomType> optional = Optional.of(customType);\r\n    String expected = \"Optional[%s]\".formatted(ObjectUtils.nullSafeConciseToString(customType));\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(expected);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForClass() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(String.class)).isEqualTo(\"java.lang.String\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStrings()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForStrings() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStringBuilders()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForStringBuilders() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(\"foo\"))).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat100))).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat101))).hasSize(truncatedLength).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEnum()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForEnum() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Tropes.FOO)).isEqualTo(\"FOO\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPrimitivesAndWrappers()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForPrimitivesAndWrappers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(true)).isEqualTo(\"true\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString('X')).isEqualTo(\"X\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(42L)).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(99.1234D)).isEqualTo(\"99.1234\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForBigNumbers()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForBigNumbers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigInteger.valueOf(42L))).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigDecimal.valueOf(99.1234D))).isEqualTo(\"99.1234\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForDate()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForDate() {\r\n    Date date = new Date();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(date)).isEqualTo(date.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTemporal()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForTemporal() {\r\n    LocalDate localDate = LocalDate.now();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localDate)).isEqualTo(localDate.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForUUID()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForUUID() {\r\n    UUID id = UUID.randomUUID();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(id)).isEqualTo(id.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForFile() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPath()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForPath() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURI()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForURI() {\r\n    String uri = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).isEqualTo(uri);\r\n    uri += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).hasSize(truncatedLength).startsWith(uri.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURL()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForURL() throws Exception {\r\n    String url = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).isEqualTo(url);\r\n    url += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).hasSize(truncatedLength).startsWith(url.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForInetAddress()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForInetAddress() {\r\n    InetAddress localhost = getLocalhost();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localhost)).isEqualTo(localhost.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#getLocalhost()",
    "entityType": "method",
    "code": "private static InetAddress getLocalhost() {\r\n    try {\r\n        return InetAddress.getLocalHost();\r\n    } catch (UnknownHostException ex) {\r\n        return InetAddress.getLoopbackAddress();\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCharset()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForCharset() {\r\n    Charset charset = StandardCharsets.UTF_8;\r\n    assertThat(ObjectUtils.nullSafeConciseToString(charset)).isEqualTo(charset.name());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCurrency()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForCurrency() {\r\n    Currency currency = Currency.getInstance(Locale.US);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(currency)).isEqualTo(currency.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForLocale()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForLocale() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Locale.GERMANY)).isEqualTo(\"de_DE\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForRegExPattern()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForRegExPattern() {\r\n    Pattern pattern = Pattern.compile(\"^(foo|bar)$\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(pattern)).isEqualTo(pattern.toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTimeZone()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForTimeZone() {\r\n    TimeZone timeZone = TimeZone.getDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(timeZone)).isEqualTo(timeZone.getID());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForZoneId()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForZoneId() {\r\n    ZoneId zoneId = ZoneId.systemDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(zoneId)).isEqualTo(zoneId.getId());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyArrays()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] ;)).isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyArrays()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] { 'a' })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] { \"enigma\" })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyCollections()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForEmptyCollections() {\r\n    List<String> list = List.of();\r\n    Set<Integer> set = Set.of();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyCollections()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyCollections() {\r\n    List<String> list = List.of(\"a\", \"b\");\r\n    Set<Integer> set = Set.of(1);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyMaps()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForEmptyMaps() {\r\n    Map<String, String> map = Map.of();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyMaps()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyMaps() {\r\n    Map<String, Integer> map = Map.of(\"a\", 1, \"b\", 2, \"c\", 3);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCustomTypes()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullSafeConciseToStringForCustomTypes() {\r\n    class ExplosiveType {\r\n\r\n        @Override\r\n        public String toString() {\r\n            throw new UnsupportedOperationException(\"no-go\");\r\n        }\r\n    }\r\n    ExplosiveType explosiveType = new ExplosiveType();\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(explosiveType::toString);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(explosiveType)).startsWith(prefix(ExplosiveType.class));\r\n    class WordyType {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"blah blah\".repeat(20);\r\n        }\r\n    }\r\n    WordyType wordyType = new WordyType();\r\n    assertThat(wordyType).asString().hasSizeGreaterThanOrEqualTo(180);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(wordyType)).startsWith(prefix(WordyType.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NullSafeConciseToStringTests#prefix(Class<?>)",
    "entityType": "method",
    "code": "private static String prefix(Class<?> clazz) {\r\n    return clazz.getTypeName() + \"@\";\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.CustomType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ExplosiveType",
    "entityType": "class",
    "code": "@Override\r\npublic String toString() {\r\n    throw new UnsupportedOperationException(\"no-go\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.ExplosiveType#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    throw new UnsupportedOperationException(\"no-go\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.WordyType",
    "entityType": "class",
    "code": "@Override\r\npublic String toString() {\r\n    return \"blah blah\".repeat(20);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.WordyType#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    return \"blah blah\".repeat(20);\r\n}",
    "comment": ""
  }
]