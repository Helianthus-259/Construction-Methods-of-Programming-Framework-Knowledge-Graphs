[
  {
    "entityId": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithOrderAndPriority()",
    "entityType": "method",
    "code": "@Test\r\nvoid sortInstancesWithOrderAndPriority() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B());\r\n    list.add(new A2());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(A2.class, B.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid sortInstancesWithSubclass() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B());\r\n    list.add(new C());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(C.class, B.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
    "entityType": "method",
    "code": "@Test\r\nvoid sortClasses() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(B.class);\r\n    list.add(A.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(A.class, B.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid sortClassesWithSubclass() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(B.class);\r\n    list.add(C.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(C.class, B.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortWithNulls()",
    "entityType": "method",
    "code": "@Test\r\nvoid sortWithNulls() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(null);\r\n    list.add(B.class);\r\n    list.add(null);\r\n    list.add(A.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(A.class, B.class, null, null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.A",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.B",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.C",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.A2",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.B2",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
    "entityType": "class",
    "code": "@Test\r\nvoid multiplRoutesToMetaAnnotation() {\r\n    Class<?> source = WithMetaMetaTestAnnotation1AndMetaTestAnnotation2.class;\r\n    // Merged annotation chooses lowest depth\r\n    MergedAnnotation<TestAnnotation> mergedAnnotation = MergedAnnotations.from(source).get(TestAnnotation.class);\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"testAndMetaTest\");\r\n    // AnnotatedElementUtils finds first\r\n    TestAnnotation previousVersion = AnnotatedElementUtils.getMergedAnnotation(source, TestAnnotation.class);\r\n    assertThat(previousVersion.value()).isEqualTo(\"metaTest\");\r\n}\n@Test\r\nvoid defaultValue() {\r\n    DefaultValueAnnotation synthesized = MergedAnnotations.from(WithDefaultValue.class).get(DefaultValueAnnotation.class).synthesize();\r\n    assertThat(AnnotationUtils.isSynthesizedAnnotation(synthesized)).as(\"synthesized annotation\").isTrue();\r\n    Object defaultValue = AnnotationUtils.getDefaultValue(synthesized, \"enumValue\");\r\n    assertThat(defaultValue).isEqualTo(TestEnum.ONE);\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation {\r\n\r\n    String value();\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@TestAnnotation(\"metaTest\")\r\n@interface MetaTestAnnotation {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@TestAnnotation(\"testAndMetaTest\")\r\n@MetaTestAnnotation\r\n@interface TestAndMetaTestAnnotation {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@MetaTestAnnotation\r\n@interface MetaMetaTestAnnotation {\r\n}\n@MetaMetaTestAnnotation\r\n@TestAndMetaTestAnnotation\r\nstatic class WithMetaMetaTestAnnotation1AndMetaTestAnnotation2 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface DefaultValueAnnotation {\r\n\r\n    @AliasFor(\"enumAlias\")\r\n    TestEnum enumValue() default TestEnum.ONE;\r\n\r\n    @AliasFor(\"enumValue\")\r\n    TestEnum enumAlias() default TestEnum.ONE;\r\n}\n@DefaultValueAnnotation\r\nstatic class WithDefaultValue {\r\n}\nenum TestEnum {\r\n\r\n    ONE, TWO\r\n}",
    "comment": "\n * Tests to ensure back-compatibility with Spring Framework 5.1.\n *\n * @author Phillip Webb\n * @since 5.2\n "
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
    "entityType": "method",
    "code": "@Test\r\nvoid multiplRoutesToMetaAnnotation() {\r\n    Class<?> source = WithMetaMetaTestAnnotation1AndMetaTestAnnotation2.class;\r\n    // Merged annotation chooses lowest depth\r\n    MergedAnnotation<TestAnnotation> mergedAnnotation = MergedAnnotations.from(source).get(TestAnnotation.class);\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"testAndMetaTest\");\r\n    // AnnotatedElementUtils finds first\r\n    TestAnnotation previousVersion = AnnotatedElementUtils.getMergedAnnotation(source, TestAnnotation.class);\r\n    assertThat(previousVersion.value()).isEqualTo(\"metaTest\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
    "entityType": "method",
    "code": "@Test\r\nvoid defaultValue() {\r\n    DefaultValueAnnotation synthesized = MergedAnnotations.from(WithDefaultValue.class).get(DefaultValueAnnotation.class).synthesize();\r\n    assertThat(AnnotationUtils.isSynthesizedAnnotation(synthesized)).as(\"synthesized annotation\").isTrue();\r\n    Object defaultValue = AnnotationUtils.getDefaultValue(synthesized, \"enumValue\");\r\n    assertThat(defaultValue).isEqualTo(TestEnum.ONE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithDefaultValue",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
    "entityType": "class",
    "code": "@EnclosedTwo\r\npublic static class EnclosedStatic {\r\n\r\n    @EnclosedThree\r\n    public static class EnclosedStaticStatic {\r\n    }\r\n}\n@EnclosedTwo\r\npublic class EnclosedInner {\r\n\r\n    @EnclosedThree\r\n    public class EnclosedInnerInner {\r\n    }\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface EnclosedOne {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface EnclosedTwo {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface EnclosedThree {\r\n}",
    "comment": "\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n "
  },
  {
    "entityId": "org.springframework.core.annotation.EnclosedStatic",
    "entityType": "class",
    "code": "@EnclosedThree\r\npublic static class EnclosedStaticStatic {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.EnclosedStaticStatic",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.EnclosedInner",
    "entityType": "class",
    "code": "@EnclosedThree\r\npublic class EnclosedInnerInner {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.EnclosedInnerInner",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests",
    "entityType": "class",
    "code": "private static final AnnotationFilter FILTER = annotationType -> ObjectUtils.nullSafeEquals(annotationType, TestAnnotation.class.getName());\n@Test\r\nvoid matchesAnnotationWhenMatchReturnsTrue() {\r\n    TestAnnotation annotation = WithTestAnnotation.class.getDeclaredAnnotation(TestAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isTrue();\r\n}\n@Test\r\nvoid matchesAnnotationWhenNoMatchReturnsFalse() {\r\n    OtherAnnotation annotation = WithOtherAnnotation.class.getDeclaredAnnotation(OtherAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isFalse();\r\n}\n@Test\r\nvoid matchesAnnotationClassWhenMatchReturnsTrue() {\r\n    Class<TestAnnotation> annotationType = TestAnnotation.class;\r\n    assertThat(FILTER.matches(annotationType)).isTrue();\r\n}\n@Test\r\nvoid matchesAnnotationClassWhenNoMatchReturnsFalse() {\r\n    Class<OtherAnnotation> annotationType = OtherAnnotation.class;\r\n    assertThat(FILTER.matches(annotationType)).isFalse();\r\n}\n@Test\r\nvoid plainWhenJavaLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(Retention.class)).isTrue();\r\n}\n@Test\r\nvoid plainWhenSpringLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(Contract.class)).isTrue();\r\n}\n@Test\r\nvoid plainWhenOtherAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(TestAnnotation.class)).isFalse();\r\n}\n@Test\r\nvoid javaWhenJavaLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Retention.class)).isTrue();\r\n}\n@Test\r\nvoid javaWhenJavaxAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Nonnull.class)).isTrue();\r\n}\n@Test\r\nvoid javaWhenSpringLangAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Nullable.class)).isFalse();\r\n}\n@Test\r\nvoid javaWhenOtherAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.JAVA.matches(TestAnnotation.class)).isFalse();\r\n}\n@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid noneReturnsFalse() {\r\n    assertThat(AnnotationFilter.NONE.matches(Retention.class)).isFalse();\r\n    assertThat(AnnotationFilter.NONE.matches(Nullable.class)).isFalse();\r\n    assertThat(AnnotationFilter.NONE.matches(TestAnnotation.class)).isFalse();\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation {\r\n}\n@TestAnnotation\r\nstatic class WithTestAnnotation {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface OtherAnnotation {\r\n}\n@OtherAnnotation\r\nstatic class WithOtherAnnotation {\r\n}",
    "comment": "\n * Tests for {@link AnnotationFilter}.\n *\n * @author Phillip Webb\n "
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid matchesAnnotationWhenMatchReturnsTrue() {\r\n    TestAnnotation annotation = WithTestAnnotation.class.getDeclaredAnnotation(TestAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid matchesAnnotationWhenNoMatchReturnsFalse() {\r\n    OtherAnnotation annotation = WithOtherAnnotation.class.getDeclaredAnnotation(OtherAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid matchesAnnotationClassWhenMatchReturnsTrue() {\r\n    Class<TestAnnotation> annotationType = TestAnnotation.class;\r\n    assertThat(FILTER.matches(annotationType)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenNoMatchReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid matchesAnnotationClassWhenNoMatchReturnsFalse() {\r\n    Class<OtherAnnotation> annotationType = OtherAnnotation.class;\r\n    assertThat(FILTER.matches(annotationType)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenJavaLangAnnotationReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid plainWhenJavaLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(Retention.class)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenSpringLangAnnotationReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid plainWhenSpringLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(Contract.class)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#plainWhenOtherAnnotationReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid plainWhenOtherAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.PLAIN.matches(TestAnnotation.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaLangAnnotationReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid javaWhenJavaLangAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Retention.class)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenJavaxAnnotationReturnsTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid javaWhenJavaxAnnotationReturnsTrue() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Nonnull.class)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenSpringLangAnnotationReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid javaWhenSpringLangAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.JAVA.matches(Nullable.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#javaWhenOtherAnnotationReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid javaWhenOtherAnnotationReturnsFalse() {\r\n    assertThat(AnnotationFilter.JAVA.matches(TestAnnotation.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationFilterTests#noneReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid noneReturnsFalse() {\r\n    assertThat(AnnotationFilter.NONE.matches(Retention.class)).isFalse();\r\n    assertThat(AnnotationFilter.NONE.matches(Nullable.class)).isFalse();\r\n    assertThat(AnnotationFilter.NONE.matches(TestAnnotation.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithTestAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithOtherAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
    "entityType": "class",
    "code": "@Test\r\nvoid filteredTypeThrowsTypeNotPresentException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleAnnotation.class.getName(), classLoader);\r\n    Annotation annotation = withAnnotation.getAnnotations()[0];\r\n    Method method = annotation.annotationType().getMethod(\"value\");\r\n    method.setAccessible(true);\r\n    assertThatExceptionOfType(TypeNotPresentException.class).isThrownBy(() -> ReflectionUtils.invokeMethod(method, annotation)).withCauseInstanceOf(ClassNotFoundException.class);\r\n}\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, annotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, metaAnnotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, annotationClass)).isFalse();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, metaAnnotationClass)).isFalse();\r\n}\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    MergedAnnotations annotations = MergedAnnotations.from(withAnnotation);\r\n    assertThat(annotations.get(annotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.get(metaAnnotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.isPresent(metaAnnotationClass)).isFalse();\r\n    assertThat(annotations.isPresent(annotationClass)).isFalse();\r\n}\nstatic class FilteringClassLoader extends OverridingClassLoader {\r\n\r\n    FilteringClassLoader(ClassLoader parent) {\r\n        super(parent);\r\n    }\r\n\r\n    @Override\r\n    protected boolean isEligibleForOverriding(String className) {\r\n        return className.startsWith(AnnotationIntrospectionFailureTests.class.getName()) || className.startsWith(\"jdk.internal\");\r\n    }\r\n\r\n    @Override\r\n    protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\r\n        if (name.contains(\"Filtered\") || name.startsWith(\"jdk.internal\")) {\r\n            throw new ClassNotFoundException(name);\r\n        }\r\n        return super.loadClassForOverriding(name);\r\n    }\r\n}\nstatic class FilteredType {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface ExampleAnnotation {\r\n\r\n    Class<?> value() default Void.class;\r\n}\n@ExampleAnnotation(FilteredType.class)\r\nstatic class WithExampleAnnotation {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@ExampleAnnotation\r\n@interface ExampleMetaAnnotation {\r\n\r\n    @AliasFor(annotation = ExampleAnnotation.class, attribute = \"value\")\r\n    Class<?> example1() default Void.class;\r\n\r\n    @AliasFor(annotation = ExampleAnnotation.class, attribute = \"value\")\r\n    Class<?> example2() default Void.class;\r\n}\n@ExampleMetaAnnotation(example1 = FilteredType.class)\r\nstatic class WithExampleMetaAnnotation {\r\n}",
    "comment": "\n * Tests that trigger annotation introspection failures and ensure that they are\n * dealt with correctly.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see AnnotationUtils\n * @see AnnotatedElementUtils\n "
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeThrowsTypeNotPresentException()",
    "entityType": "method",
    "code": "@Test\r\nvoid filteredTypeThrowsTypeNotPresentException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleAnnotation.class.getName(), classLoader);\r\n    Annotation annotation = withAnnotation.getAnnotations()[0];\r\n    Method method = annotation.annotationType().getMethod(\"value\");\r\n    method.setAccessible(true);\r\n    assertThatExceptionOfType(TypeNotPresentException.class).isThrownBy(() -> ReflectionUtils.invokeMethod(method, annotation)).withCauseInstanceOf(ClassNotFoundException.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, annotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, metaAnnotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, annotationClass)).isFalse();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, metaAnnotationClass)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    MergedAnnotations annotations = MergedAnnotations.from(withAnnotation);\r\n    assertThat(annotations.get(annotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.get(metaAnnotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.isPresent(metaAnnotationClass)).isFalse();\r\n    assertThat(annotations.isPresent(annotationClass)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.FilteringClassLoader",
    "entityType": "class",
    "code": "FilteringClassLoader(ClassLoader parent) {\r\n    super(parent);\r\n}\n@Override\r\nprotected boolean isEligibleForOverriding(String className) {\r\n    return className.startsWith(AnnotationIntrospectionFailureTests.class.getName()) || className.startsWith(\"jdk.internal\");\r\n}\n@Override\r\nprotected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\r\n    if (name.contains(\"Filtered\") || name.startsWith(\"jdk.internal\")) {\r\n        throw new ClassNotFoundException(name);\r\n    }\r\n    return super.loadClassForOverriding(name);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
    "entityType": "method",
    "code": "@Override\r\nprotected boolean isEligibleForOverriding(String className) {\r\n    return className.startsWith(AnnotationIntrospectionFailureTests.class.getName()) || className.startsWith(\"jdk.internal\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
    "entityType": "method",
    "code": "@Override\r\nprotected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\r\n    if (name.contains(\"Filtered\") || name.startsWith(\"jdk.internal\")) {\r\n        throw new ClassNotFoundException(name);\r\n    }\r\n    return super.loadClassForOverriding(name);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.FilteredType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithExampleAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WithExampleMetaAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests",
    "entityType": "class",
    "code": "@Test\r\nvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\r\n}\n@Test\r\nvoid directStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\r\n    Class<?> source = WithSingleSuperclassAndDoubleInherited.class;\r\n    assertThat(Arrays.stream(source.getAnnotations()).map(Annotation::annotationType).map(Class::getName)).containsExactly(TestInheritedAnnotation2.class.getName());\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\r\n}\n@Test\r\nvoid superclassStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\r\n}\n@Test\r\nvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\r\n}\n@Test\r\nvoid directStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\r\n}\n@Test\r\nvoid superclassStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n    source = methodFrom(Hello1Impl.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\r\n}\n// gh-31803\r\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\r\n    Method source = methodFrom(Hello2Impl.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}\n@Test\r\nvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\r\n    Method source = methodFrom(Ignorable.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\r\n    Method source = methodFrom(MultipleMethods.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\r\n    Method source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\r\n    Method source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\r\n    Class<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass)).containsExactly(\"0:EnclosedThree\");\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList()).containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\r\n    Class<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass)).containsExactly(\"0:EnclosedThree\");\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\r\n}\n@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\");\r\n}\n@Test\r\nvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, new AnnotationsProcessor<Object, String>() {\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAggregate(Object context, int aggregateIndex) {\r\n            return \"\";\r\n        }\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAnnotations(Object context, int aggregateIndex, @Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\r\n            throw new IllegalStateException(\"Should not call\");\r\n        }\r\n    });\r\n    assertThat(result).isEmpty();\r\n}\n@Test\r\nvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\r\n    List<Integer> indexes = new ArrayList<>();\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, (context, aggregateIndex, source, annotations) -> {\r\n        indexes.add(aggregateIndex);\r\n        return \"\";\r\n    });\r\n    assertThat(result).isEmpty();\r\n    assertThat(indexes).containsExactly(0);\r\n}\n@Test\r\nvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, new AnnotationsProcessor<Object, String>() {\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAnnotations(Object context, int aggregateIndex, @Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\r\n            return \"K\";\r\n        }\r\n\r\n        @Override\r\n        @NonNull\r\n        public String finish(@Nullable String result) {\r\n            return \"O\" + result;\r\n        }\r\n    });\r\n    assertThat(result).isEqualTo(\"OK\");\r\n}\nprivate Method methodFrom(Class<?> type) {\r\n    return ReflectionUtils.findMethod(type, \"method\");\r\n}\nprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) {\r\n    return scan(element, searchStrategy, Search.never);\r\n}\nprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass) {\r\n    List<String> results = new ArrayList<>();\r\n    scan(this, element, searchStrategy, searchEnclosingClass, (criteria, aggregateIndex, source, annotations) -> {\r\n        trackIndexedAnnotations(aggregateIndex, annotations, results);\r\n        // continue searching\r\n        return null;\r\n    });\r\n    return results.stream();\r\n}\nprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor) {\r\n    return scan(context, source, searchStrategy, Search.never, processor);\r\n}\nprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\r\n    return AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\r\n}\nprivate void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\r\n    Arrays.stream(annotations).filter(Objects::nonNull).map(annotation -> indexedName(aggregateIndex, annotation)).forEach(results::add);\r\n}\nprivate String indexedName(int aggregateIndex, Annotation annotation) {\r\n    return aggregateIndex + \":\" + annotation.annotationType().getSimpleName();\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation1 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation2 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation3 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation4 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation5 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface TestAnnotation6 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@interface TestInheritedAnnotation1 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@interface TestInheritedAnnotation2 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@interface TestInheritedAnnotation3 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@interface TestInheritedAnnotation4 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@interface TestInheritedAnnotation5 {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface OnSuperClass {\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\n@interface OnInterface {\r\n}\nstatic class WithNoAnnotations {\r\n\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation1\r\nstatic class WithSingleAnnotation {\r\n\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation1\r\n@TestAnnotation2\r\nstatic class WithMultipleAnnotations {\r\n\r\n    @TestAnnotation1\r\n    @TestAnnotation2\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation2\r\n@TestInheritedAnnotation2\r\nstatic class SingleSuperclass {\r\n\r\n    @TestAnnotation2\r\n    @TestInheritedAnnotation2\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation1\r\nstatic class WithSingleSuperclass extends SingleSuperclass {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\n@TestInheritedAnnotation2\r\nstatic class WithSingleSuperclassAndDoubleInherited extends SingleSuperclass {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation1\r\nstatic class WithSingleInterface implements SingleInterface {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation2\r\n@TestInheritedAnnotation2\r\ninterface SingleInterface {\r\n\r\n    @TestAnnotation2\r\n    @TestInheritedAnnotation2\r\n    void method();\r\n}\n@TestAnnotation1\r\nstatic class WithHierarchy extends HierarchySuperclass implements HierarchyInterface {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\ninterface Hello1 {\r\n\r\n    @TestAnnotation1\r\n    void method();\r\n}\ninterface Hello2 extends Hello1 {\r\n}\nstatic class Hello1Impl implements Hello1 {\r\n\r\n    @Override\r\n    public void method() {\r\n    }\r\n}\nstatic class Hello2Impl implements Hello2 {\r\n\r\n    @Override\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation2\r\n@TestInheritedAnnotation2\r\nstatic class HierarchySuperclass extends HierarchySuperSuperclass {\r\n\r\n    @Override\r\n    @TestAnnotation2\r\n    @TestInheritedAnnotation2\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation3\r\n@TestInheritedAnnotation3\r\nstatic class HierarchySuperSuperclass implements HierarchySuperSuperclassInterface {\r\n\r\n    @Override\r\n    @TestAnnotation3\r\n    public void method() {\r\n    }\r\n}\n@TestAnnotation4\r\ninterface HierarchySuperSuperclassInterface {\r\n\r\n    @TestAnnotation4\r\n    void method();\r\n}\n@TestAnnotation5\r\n@TestInheritedAnnotation5\r\ninterface HierarchyInterface extends HierarchyInterfaceInterface {\r\n\r\n    @Override\r\n    @TestAnnotation5\r\n    @TestInheritedAnnotation5\r\n    void method();\r\n}\n@TestAnnotation6\r\ninterface HierarchyInterfaceInterface {\r\n\r\n    @TestAnnotation6\r\n    void method();\r\n}\nstatic class BridgedMethod implements BridgeMethod<String> {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method(String arg) {\r\n    }\r\n}\ninterface BridgeMethod<T> {\r\n\r\n    @TestAnnotation2\r\n    void method(T arg);\r\n}\nstatic class Ignorable implements IgnorableOverrideInterface1, IgnorableOverrideInterface2 {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\ninterface IgnorableOverrideInterface1 {\r\n\r\n    void method();\r\n}\ninterface IgnorableOverrideInterface2 {\r\n\r\n    void method();\r\n}\nabstract static class MultipleMethods implements MultipleMethodsInterface {\r\n\r\n    @TestAnnotation1\r\n    public void method() {\r\n    }\r\n}\ninterface MultipleMethodsInterface {\r\n\r\n    @TestAnnotation2\r\n    void method(String arg);\r\n\r\n    @TestAnnotation2\r\n    void method1();\r\n}\nstatic class GenericOverride implements GenericOverrideInterface<String> {\r\n\r\n    @Override\r\n    @TestAnnotation1\r\n    public void method(String argument) {\r\n    }\r\n}\ninterface GenericOverrideInterface<T extends CharSequence> {\r\n\r\n    @TestAnnotation2\r\n    void method(T argument);\r\n}\nabstract static class GenericNonOverride implements GenericNonOverrideInterface<String> {\r\n\r\n    @TestAnnotation1\r\n    public void method(StringBuilder argument) {\r\n    }\r\n}\ninterface GenericNonOverrideInterface<T extends CharSequence> {\r\n\r\n    @TestAnnotation2\r\n    void method(T argument);\r\n}",
    "comment": "\n * Tests for {@link AnnotationsScanner}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n "
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasSuperclassScansOnlyDirect()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassWhenHasInterfaceScansOnlyDirect()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnClassHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\r\n    Class<?> source = WithSingleSuperclassAndDoubleInherited.class;\r\n    assertThat(Arrays.stream(source.getAnnotations()).map(Annotation::annotationType).map(Class::getName)).containsExactly(TestInheritedAnnotation2.class.getName());\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasSuperclassScansOnlyDirect()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodWhenHasInterfaceScansOnlyDirect()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasSuperclassScansSuperclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnMethodHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n    source = methodFrom(Hello1Impl.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce()",
    "entityType": "method",
    "code": "// gh-31803\r\n@Test\r\nvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\r\n    Method source = methodFrom(Hello2Impl.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
    "entityType": "method",
    "code": "@Test\r\nvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "comment": ""
  }
]