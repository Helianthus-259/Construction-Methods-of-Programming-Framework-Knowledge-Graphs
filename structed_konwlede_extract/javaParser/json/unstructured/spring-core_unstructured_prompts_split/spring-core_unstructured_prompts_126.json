[
  {
    "entityId": "org.springframework.core.io.GetInputStream",
    "entityType": "class",
    "code": "@Test\r\nvoid withStringConstructorRaisesExceptionForNonexistentResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE));\r\n}\n@Test\r\nvoid withClassLoaderConstructorRaisesExceptionForNonexistentResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass().getClassLoader()));\r\n}\n@Test\r\nvoid withClassLiteralConstructorRaisesExceptionForNonexistentRelativeResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()));\r\n}\n@Test\r\nvoid withClassLiteralConstructorRaisesExceptionForNonexistentAbsoluteResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass()));\r\n}\nprivate static void assertExceptionContainsAbsolutePath(ClassPathResource resource) {\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream).withMessageContaining(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetInputStream#withStringConstructorRaisesExceptionForNonexistentResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid withStringConstructorRaisesExceptionForNonexistentResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetInputStream#withClassLoaderConstructorRaisesExceptionForNonexistentResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLoaderConstructorRaisesExceptionForNonexistentResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass().getClassLoader()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetInputStream#withClassLiteralConstructorRaisesExceptionForNonexistentRelativeResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLiteralConstructorRaisesExceptionForNonexistentRelativeResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetInputStream#withClassLiteralConstructorRaisesExceptionForNonexistentAbsoluteResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLiteralConstructorRaisesExceptionForNonexistentAbsoluteResource() {\r\n    assertExceptionContainsAbsolutePath(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetInputStream#assertExceptionContainsAbsolutePath(ClassPathResource)",
    "entityType": "method",
    "code": "private static void assertExceptionContainsAbsolutePath(ClassPathResource resource) {\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream).withMessageContaining(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription",
    "entityType": "class",
    "code": "@Test\r\nvoid withStringConstructor() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE));\r\n}\n@Test\r\nvoid withStringConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH));\r\n}\n@Test\r\nvoid withClassLiteralConstructor() {\r\n    assertDescription(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()));\r\n}\n@Test\r\nvoid withClassLiteralConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH, getClass()));\r\n}\n@Test\r\nvoid withClassLoaderConstructor() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass().getClassLoader()));\r\n}\n@Test\r\nvoid withClassLoaderConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH, getClass().getClassLoader()));\r\n}\nprivate static void assertDescription(ClassPathResource resource) {\r\n    assertThat(resource.getDescription()).isEqualTo(\"class path resource [%s]\", ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withStringConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid withStringConstructor() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withStringConstructorAndLeadingSlash()",
    "entityType": "method",
    "code": "@Test\r\nvoid withStringConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withClassLiteralConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLiteralConstructor() {\r\n    assertDescription(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withClassLiteralConstructorAndLeadingSlash()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLiteralConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH, getClass()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withClassLoaderConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLoaderConstructor() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE, getClass().getClassLoader()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#withClassLoaderConstructorAndLeadingSlash()",
    "entityType": "method",
    "code": "@Test\r\nvoid withClassLoaderConstructorAndLeadingSlash() {\r\n    assertDescription(new ClassPathResource(ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE_WITH_LEADING_SLASH, getClass().getClassLoader()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetDescription#assertDescription(ClassPathResource)",
    "entityType": "method",
    "code": "private static void assertDescription(ClassPathResource resource) {\r\n    assertThat(resource.getDescription()).isEqualTo(\"class path resource [%s]\", ABSOLUTE_PATH_TO_NONEXISTENT_RESOURCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetPath",
    "entityType": "class",
    "code": "@Test\r\nvoid dropsLeadingSlashForClassLoaderAccess() {\r\n    assertThat(new ClassPathResource(\"/test.html\").getPath()).isEqualTo(\"test.html\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\").createRelative(\"/test.html\")).getPath()).isEqualTo(\"test.html\");\r\n}\n@Test\r\nvoid convertsToAbsolutePathForClassRelativeAccess() {\r\n    assertThat(new ClassPathResource(\"/test.html\", getClass()).getPath()).isEqualTo(\"test.html\");\r\n    assertThat(new ClassPathResource(\"\", getClass()).getPath()).isEqualTo(PACKAGE_PATH + \"/\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\", getClass()).createRelative(\"/test.html\")).getPath()).isEqualTo(\"test.html\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\", getClass()).createRelative(\"test.html\")).getPath()).isEqualTo(PACKAGE_PATH + \"/test.html\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetPath#dropsLeadingSlashForClassLoaderAccess()",
    "entityType": "method",
    "code": "@Test\r\nvoid dropsLeadingSlashForClassLoaderAccess() {\r\n    assertThat(new ClassPathResource(\"/test.html\").getPath()).isEqualTo(\"test.html\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\").createRelative(\"/test.html\")).getPath()).isEqualTo(\"test.html\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.GetPath#convertsToAbsolutePathForClassRelativeAccess()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertsToAbsolutePathForClassRelativeAccess() {\r\n    assertThat(new ClassPathResource(\"/test.html\", getClass()).getPath()).isEqualTo(\"test.html\");\r\n    assertThat(new ClassPathResource(\"\", getClass()).getPath()).isEqualTo(PACKAGE_PATH + \"/\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\", getClass()).createRelative(\"/test.html\")).getPath()).isEqualTo(\"test.html\");\r\n    assertThat(((ClassPathResource) new ClassPathResource(\"\", getClass()).createRelative(\"test.html\")).getPath()).isEqualTo(PACKAGE_PATH + \"/test.html\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ModuleResourceTests",
    "entityType": "class",
    "code": "private static final String existingPath = \"java/beans/Introspector.class\";\nprivate static final String nonExistingPath = \"org/example/NonExistingClass.class\";\n@Test\r\nvoid existingClassFileResource() throws IOException {\r\n    // Check expected behavior of ClassPathResource first.\r\n    ClassPathResource cpr = new ClassPathResource(existingPath);\r\n    assertExistingResource(cpr);\r\n    assertThat(cpr.getDescription()).startsWith(\"class path resource\").contains(cpr.getPath());\r\n    ModuleResource mr = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    assertExistingResource(mr);\r\n    assertThat(mr.getDescription()).startsWith(\"module resource\").contains(mr.getModule().getName(), mr.getPath());\r\n    assertThat(mr.getContentAsByteArray()).isEqualTo(cpr.getContentAsByteArray());\r\n    assertThat(mr.contentLength()).isEqualTo(cpr.contentLength());\r\n}\n@Test\r\nvoid nonExistingResource() {\r\n    ModuleResource mr = new ModuleResource(Introspector.class.getModule(), nonExistingPath);\r\n    assertThat(mr.exists()).isFalse();\r\n    assertThat(mr.isReadable()).isFalse();\r\n    assertThat(mr.isOpen()).isFalse();\r\n    assertThat(mr.isFile()).isFalse();\r\n    assertThat(mr.getFilename()).isEqualTo(\"NonExistingClass.class\");\r\n    assertThat(mr.getDescription()).startsWith(\"module resource\").contains(mr.getModule().getName(), mr.getPath());\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(mr::getContentAsByteArray);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(mr::contentLength);\r\n}\n@Test\r\nvoid equalsAndHashCode() {\r\n    Resource resource1 = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    Resource resource2 = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    Resource resource3 = new ModuleResource(Introspector.class.getModule(), nonExistingPath);\r\n    assertThat(resource1).isEqualTo(resource1);\r\n    assertThat(resource1).isEqualTo(resource2);\r\n    assertThat(resource2).isEqualTo(resource1);\r\n    assertThat(resource1).isNotEqualTo(resource3);\r\n    assertThat(resource1).hasSameHashCodeAs(resource2);\r\n    assertThat(resource1).doesNotHaveSameHashCodeAs(resource3);\r\n}\nprivate static void assertExistingResource(Resource resource) {\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n    assertThat(resource.isFile()).isFalse();\r\n    assertThat(resource.getFilename()).isEqualTo(\"Introspector.class\");\r\n}",
    "comment": "\n * Tests for {@link ModuleResource}.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 6.1\n "
  },
  {
    "entityId": "org.springframework.core.io.ModuleResourceTests#existingClassFileResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid existingClassFileResource() throws IOException {\r\n    // Check expected behavior of ClassPathResource first.\r\n    ClassPathResource cpr = new ClassPathResource(existingPath);\r\n    assertExistingResource(cpr);\r\n    assertThat(cpr.getDescription()).startsWith(\"class path resource\").contains(cpr.getPath());\r\n    ModuleResource mr = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    assertExistingResource(mr);\r\n    assertThat(mr.getDescription()).startsWith(\"module resource\").contains(mr.getModule().getName(), mr.getPath());\r\n    assertThat(mr.getContentAsByteArray()).isEqualTo(cpr.getContentAsByteArray());\r\n    assertThat(mr.contentLength()).isEqualTo(cpr.contentLength());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ModuleResourceTests#nonExistingResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid nonExistingResource() {\r\n    ModuleResource mr = new ModuleResource(Introspector.class.getModule(), nonExistingPath);\r\n    assertThat(mr.exists()).isFalse();\r\n    assertThat(mr.isReadable()).isFalse();\r\n    assertThat(mr.isOpen()).isFalse();\r\n    assertThat(mr.isFile()).isFalse();\r\n    assertThat(mr.getFilename()).isEqualTo(\"NonExistingClass.class\");\r\n    assertThat(mr.getDescription()).startsWith(\"module resource\").contains(mr.getModule().getName(), mr.getPath());\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(mr::getContentAsByteArray);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(mr::contentLength);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ModuleResourceTests#equalsAndHashCode()",
    "entityType": "method",
    "code": "@Test\r\nvoid equalsAndHashCode() {\r\n    Resource resource1 = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    Resource resource2 = new ModuleResource(Introspector.class.getModule(), existingPath);\r\n    Resource resource3 = new ModuleResource(Introspector.class.getModule(), nonExistingPath);\r\n    assertThat(resource1).isEqualTo(resource1);\r\n    assertThat(resource1).isEqualTo(resource2);\r\n    assertThat(resource2).isEqualTo(resource1);\r\n    assertThat(resource1).isNotEqualTo(resource3);\r\n    assertThat(resource1).hasSameHashCodeAs(resource2);\r\n    assertThat(resource1).doesNotHaveSameHashCodeAs(resource3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ModuleResourceTests#assertExistingResource(Resource)",
    "entityType": "method",
    "code": "private static void assertExistingResource(Resource resource) {\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n    assertThat(resource.isFile()).isFalse();\r\n    assertThat(resource.getFilename()).isEqualTo(\"Introspector.class\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests",
    "entityType": "class",
    "code": "private static final String TEST_DIR = platformPath(\"src/test/resources/org/springframework/core/io\");\nprivate static final String TEST_FILE = platformPath(\"src/test/resources/org/springframework/core/io/example.properties\");\nprivate static final String NON_EXISTING_FILE = platformPath(\"src/test/resources/org/springframework/core/io/doesnotexist.properties\");\nprivate static String platformPath(String string) {\r\n    return string.replace('/', File.separatorChar);\r\n}\n@Test\r\nvoid nullPath() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((Path) null)).withMessageContaining(\"Path must not be null\");\r\n}\n@Test\r\nvoid nullPathString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((String) null)).withMessageContaining(\"Path must not be null\");\r\n}\n@Test\r\nvoid nullUri() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((URI) null)).withMessageContaining(\"URI must not be null\");\r\n}\n@Test\r\nvoid createFromPath() {\r\n    Path path = Paths.get(TEST_FILE);\r\n    PathResource resource = new PathResource(path);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}\n@Test\r\nvoid createFromString() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}\n@Test\r\nvoid createFromUri() {\r\n    File file = new File(TEST_FILE);\r\n    PathResource resource = new PathResource(file.toURI());\r\n    assertThat(resource.getPath()).isEqualTo(file.getAbsoluteFile().toString());\r\n}\n@Test\r\nvoid getPathForFile() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}\n@Test\r\nvoid getPathForDir() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_DIR);\r\n}\n@Test\r\nvoid fileExists() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.exists()).isTrue();\r\n}\n@Test\r\nvoid dirExists() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.exists()).isTrue();\r\n}\n@Test\r\nvoid fileDoesNotExist() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.exists()).isFalse();\r\n}\n@Test\r\nvoid fileIsReadable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isReadable()).isTrue();\r\n}\n@Test\r\nvoid nonExistingFileIsNotReadable() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}\n@Test\r\nvoid directoryIsNotReadable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}\n@Test\r\nvoid getInputStream() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream());\r\n    assertThat(bytes).hasSizeGreaterThan(0);\r\n}\n@Test\r\nvoid getInputStreamForDir() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream);\r\n}\n@Test\r\nvoid getInputStreamForNonExistingFile() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream);\r\n}\n@Test\r\nvoid getUrl() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getURL().toString()).endsWith(\"core/io/example.properties\");\r\n}\n@Test\r\nvoid getUri() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getURI().toString()).endsWith(\"core/io/example.properties\");\r\n}\n@Test\r\nvoid getFile() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.getFile().getAbsoluteFile()).isEqualTo(file.getAbsoluteFile());\r\n}\n@Test\r\nvoid getFileUnsupported() {\r\n    Path path = mock();\r\n    given(path.normalize()).willReturn(path);\r\n    given(path.toFile()).willThrow(new UnsupportedOperationException());\r\n    PathResource resource = new PathResource(path);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getFile);\r\n}\n@Test\r\nvoid contentLength() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.contentLength()).isEqualTo(file.length());\r\n}\n@Test\r\nvoid contentLengthForDirectory() throws IOException {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    File file = new File(TEST_DIR);\r\n    assertThat(resource.contentLength()).isEqualTo(file.length());\r\n}\n@Test\r\nvoid lastModified() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.lastModified() / 1000).isEqualTo(file.lastModified() / 1000);\r\n}\n@Test\r\nvoid createRelativeFromDir() {\r\n    Resource resource = new PathResource(TEST_DIR).createRelative(\"example.properties\");\r\n    assertThat(resource).isEqualTo(new PathResource(TEST_FILE));\r\n}\n@Test\r\nvoid createRelativeFromFile() {\r\n    Resource resource = new PathResource(TEST_FILE).createRelative(\"../example.properties\");\r\n    assertThat(resource).isEqualTo(new PathResource(TEST_FILE));\r\n}\n@Test\r\nvoid filename() {\r\n    Resource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getFilename()).isEqualTo(\"example.properties\");\r\n}\n@Test\r\nvoid description() {\r\n    Resource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getDescription()).contains(\"path [\");\r\n    assertThat(resource.getDescription()).contains(TEST_FILE);\r\n}\n@Test\r\nvoid fileIsWritable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isWritable()).isTrue();\r\n}\n@Test\r\nvoid directoryIsNotWritable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isWritable()).isFalse();\r\n}\n@Test\r\nvoid equalsAndHashCode() {\r\n    Resource resource1 = new PathResource(TEST_FILE);\r\n    Resource resource2 = new PathResource(TEST_FILE);\r\n    Resource resource3 = new PathResource(TEST_DIR);\r\n    assertThat(resource1).isEqualTo(resource1);\r\n    assertThat(resource1).isEqualTo(resource2);\r\n    assertThat(resource2).isEqualTo(resource1);\r\n    assertThat(resource1).isNotEqualTo(resource3);\r\n    assertThat(resource1).hasSameHashCodeAs(resource2);\r\n    assertThat(resource1).doesNotHaveSameHashCodeAs(resource3);\r\n}\n@Test\r\nvoid getOutputStreamForExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    PathResource resource = new PathResource(temporaryFolder.resolve(\"test\"));\r\n    FileCopyUtils.copy(\"test\".getBytes(StandardCharsets.UTF_8), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}\n@Test\r\nvoid getOutputStreamForNonExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    File file = temporaryFolder.resolve(\"test\").toFile();\r\n    file.delete();\r\n    PathResource resource = new PathResource(file.toPath());\r\n    FileCopyUtils.copy(\"test\".getBytes(), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}\n@Test\r\nvoid getOutputStreamForDirectory() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getOutputStream);\r\n}\n@Test\r\nvoid getReadableByteChannel() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    try (ReadableByteChannel channel = resource.readableChannel()) {\r\n        ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n        channel.read(buffer);\r\n        buffer.rewind();\r\n        assertThat(buffer.limit()).isGreaterThan(0);\r\n    }\r\n}\n@Test\r\nvoid getReadableByteChannelForDir() throws IOException {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    try {\r\n        resource.readableChannel();\r\n    } catch (AccessDeniedException ex) {\r\n        // on Windows\r\n    }\r\n}\n@Test\r\nvoid getReadableByteChannelForNonExistingFile() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::readableChannel);\r\n}\n@Test\r\nvoid getWritableChannel(@TempDir Path temporaryFolder) throws IOException {\r\n    Path testPath = temporaryFolder.resolve(\"test\");\r\n    Files.createFile(testPath);\r\n    PathResource resource = new PathResource(testPath);\r\n    ByteBuffer buffer = ByteBuffer.wrap(\"test\".getBytes(StandardCharsets.UTF_8));\r\n    try (WritableByteChannel channel = resource.writableChannel()) {\r\n        channel.write(buffer);\r\n    }\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "comment": "\n * Tests for {@link PathResource}.\n *\n * @author Philippe Marschall\n * @author Phillip Webb\n * @author Nicholas Williams\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @author Arjen Poutsma\n "
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#platformPath(String)",
    "entityType": "method",
    "code": "private static String platformPath(String string) {\r\n    return string.replace('/', File.separatorChar);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#nullPath()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullPath() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((Path) null)).withMessageContaining(\"Path must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#nullPathString()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullPathString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((String) null)).withMessageContaining(\"Path must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#nullUri()",
    "entityType": "method",
    "code": "@Test\r\nvoid nullUri() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PathResource((URI) null)).withMessageContaining(\"URI must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#createFromPath()",
    "entityType": "method",
    "code": "@Test\r\nvoid createFromPath() {\r\n    Path path = Paths.get(TEST_FILE);\r\n    PathResource resource = new PathResource(path);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#createFromString()",
    "entityType": "method",
    "code": "@Test\r\nvoid createFromString() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#createFromUri()",
    "entityType": "method",
    "code": "@Test\r\nvoid createFromUri() {\r\n    File file = new File(TEST_FILE);\r\n    PathResource resource = new PathResource(file.toURI());\r\n    assertThat(resource.getPath()).isEqualTo(file.getAbsoluteFile().toString());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getPathForFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid getPathForFile() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_FILE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getPathForDir()",
    "entityType": "method",
    "code": "@Test\r\nvoid getPathForDir() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.getPath()).isEqualTo(TEST_DIR);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#fileExists()",
    "entityType": "method",
    "code": "@Test\r\nvoid fileExists() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#dirExists()",
    "entityType": "method",
    "code": "@Test\r\nvoid dirExists() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#fileDoesNotExist()",
    "entityType": "method",
    "code": "@Test\r\nvoid fileDoesNotExist() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.exists()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#fileIsReadable()",
    "entityType": "method",
    "code": "@Test\r\nvoid fileIsReadable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isReadable()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#nonExistingFileIsNotReadable()",
    "entityType": "method",
    "code": "@Test\r\nvoid nonExistingFileIsNotReadable() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#directoryIsNotReadable()",
    "entityType": "method",
    "code": "@Test\r\nvoid directoryIsNotReadable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getInputStream()",
    "entityType": "method",
    "code": "@Test\r\nvoid getInputStream() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream());\r\n    assertThat(bytes).hasSizeGreaterThan(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getInputStreamForDir()",
    "entityType": "method",
    "code": "@Test\r\nvoid getInputStreamForDir() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getInputStreamForNonExistingFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid getInputStreamForNonExistingFile() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getInputStream);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getUrl()",
    "entityType": "method",
    "code": "@Test\r\nvoid getUrl() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getURL().toString()).endsWith(\"core/io/example.properties\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getUri()",
    "entityType": "method",
    "code": "@Test\r\nvoid getUri() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getURI().toString()).endsWith(\"core/io/example.properties\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid getFile() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.getFile().getAbsoluteFile()).isEqualTo(file.getAbsoluteFile());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getFileUnsupported()",
    "entityType": "method",
    "code": "@Test\r\nvoid getFileUnsupported() {\r\n    Path path = mock();\r\n    given(path.normalize()).willReturn(path);\r\n    given(path.toFile()).willThrow(new UnsupportedOperationException());\r\n    PathResource resource = new PathResource(path);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getFile);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#contentLength()",
    "entityType": "method",
    "code": "@Test\r\nvoid contentLength() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.contentLength()).isEqualTo(file.length());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#contentLengthForDirectory()",
    "entityType": "method",
    "code": "@Test\r\nvoid contentLengthForDirectory() throws IOException {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    File file = new File(TEST_DIR);\r\n    assertThat(resource.contentLength()).isEqualTo(file.length());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#lastModified()",
    "entityType": "method",
    "code": "@Test\r\nvoid lastModified() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    File file = new File(TEST_FILE);\r\n    assertThat(resource.lastModified() / 1000).isEqualTo(file.lastModified() / 1000);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#createRelativeFromDir()",
    "entityType": "method",
    "code": "@Test\r\nvoid createRelativeFromDir() {\r\n    Resource resource = new PathResource(TEST_DIR).createRelative(\"example.properties\");\r\n    assertThat(resource).isEqualTo(new PathResource(TEST_FILE));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#createRelativeFromFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid createRelativeFromFile() {\r\n    Resource resource = new PathResource(TEST_FILE).createRelative(\"../example.properties\");\r\n    assertThat(resource).isEqualTo(new PathResource(TEST_FILE));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#filename()",
    "entityType": "method",
    "code": "@Test\r\nvoid filename() {\r\n    Resource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getFilename()).isEqualTo(\"example.properties\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#description()",
    "entityType": "method",
    "code": "@Test\r\nvoid description() {\r\n    Resource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.getDescription()).contains(\"path [\");\r\n    assertThat(resource.getDescription()).contains(TEST_FILE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#fileIsWritable()",
    "entityType": "method",
    "code": "@Test\r\nvoid fileIsWritable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isWritable()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#directoryIsNotWritable()",
    "entityType": "method",
    "code": "@Test\r\nvoid directoryIsNotWritable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isWritable()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#equalsAndHashCode()",
    "entityType": "method",
    "code": "@Test\r\nvoid equalsAndHashCode() {\r\n    Resource resource1 = new PathResource(TEST_FILE);\r\n    Resource resource2 = new PathResource(TEST_FILE);\r\n    Resource resource3 = new PathResource(TEST_DIR);\r\n    assertThat(resource1).isEqualTo(resource1);\r\n    assertThat(resource1).isEqualTo(resource2);\r\n    assertThat(resource2).isEqualTo(resource1);\r\n    assertThat(resource1).isNotEqualTo(resource3);\r\n    assertThat(resource1).hasSameHashCodeAs(resource2);\r\n    assertThat(resource1).doesNotHaveSameHashCodeAs(resource3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getOutputStreamForExistingFile(Path)",
    "entityType": "method",
    "code": "@Test\r\nvoid getOutputStreamForExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    PathResource resource = new PathResource(temporaryFolder.resolve(\"test\"));\r\n    FileCopyUtils.copy(\"test\".getBytes(StandardCharsets.UTF_8), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getOutputStreamForNonExistingFile(Path)",
    "entityType": "method",
    "code": "@Test\r\nvoid getOutputStreamForNonExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    File file = temporaryFolder.resolve(\"test\").toFile();\r\n    file.delete();\r\n    PathResource resource = new PathResource(file.toPath());\r\n    FileCopyUtils.copy(\"test\".getBytes(), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getOutputStreamForDirectory()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOutputStreamForDirectory() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getOutputStream);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getReadableByteChannel()",
    "entityType": "method",
    "code": "@Test\r\nvoid getReadableByteChannel() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    try (ReadableByteChannel channel = resource.readableChannel()) {\r\n        ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n        channel.read(buffer);\r\n        buffer.rewind();\r\n        assertThat(buffer.limit()).isGreaterThan(0);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForDir()",
    "entityType": "method",
    "code": "@Test\r\nvoid getReadableByteChannelForDir() throws IOException {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    try {\r\n        resource.readableChannel();\r\n    } catch (AccessDeniedException ex) {\r\n        // on Windows\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForNonExistingFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid getReadableByteChannelForNonExistingFile() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::readableChannel);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.PathResourceTests#getWritableChannel(Path)",
    "entityType": "method",
    "code": "@Test\r\nvoid getWritableChannel(@TempDir Path temporaryFolder) throws IOException {\r\n    Path testPath = temporaryFolder.resolve(\"test\");\r\n    Files.createFile(testPath);\r\n    PathResource resource = new PathResource(testPath);\r\n    ByteBuffer buffer = ByteBuffer.wrap(\"test\".getBytes(StandardCharsets.UTF_8));\r\n    try (WritableByteChannel channel = resource.writableChannel()) {\r\n        channel.write(buffer);\r\n    }\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests",
    "entityType": "class",
    "code": "@Test\r\nvoid sunnyDay() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(\"classpath:org/springframework/core/io/ResourceEditorTests.class\");\r\n    Resource resource = (Resource) editor.getValue();\r\n    assertThat(resource).isNotNull();\r\n    assertThat(resource.exists()).isTrue();\r\n}\n@Test\r\nvoid ctorWithNullCtorArgs() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceEditor(null, null));\r\n}\n@Test\r\nvoid setAndGetAsTextWithNull() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(null);\r\n    assertThat(editor.getAsText()).isEmpty();\r\n}\n@Test\r\nvoid setAndGetAsTextWithWhitespaceResource() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(\"  \");\r\n    assertThat(editor.getAsText()).isEmpty();\r\n}\n@Test\r\nvoid systemPropertyReplacement() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        editor.setAsText(\"${test.prop}\");\r\n        Resource resolved = (Resource) editor.getValue();\r\n        assertThat(resolved.getFilename()).isEqualTo(\"foo\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}\n@Test\r\nvoid systemPropertyReplacementWithUnresolvablePlaceholder() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        editor.setAsText(\"${test.prop}-${bar}\");\r\n        Resource resolved = (Resource) editor.getValue();\r\n        assertThat(resolved.getFilename()).isEqualTo(\"foo-${bar}\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}\n@Test\r\nvoid strictSystemPropertyReplacementWithUnresolvablePlaceholder() {\r\n    PropertyEditor editor = new ResourceEditor(new DefaultResourceLoader(), new StandardEnvironment(), false);\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> {\r\n            editor.setAsText(\"${test.prop}-${bar}\");\r\n            editor.getValue();\r\n        });\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "comment": "\n * Tests for {@link ResourceEditor}.\n *\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Dave Syer\n "
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#sunnyDay()",
    "entityType": "method",
    "code": "@Test\r\nvoid sunnyDay() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(\"classpath:org/springframework/core/io/ResourceEditorTests.class\");\r\n    Resource resource = (Resource) editor.getValue();\r\n    assertThat(resource).isNotNull();\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#ctorWithNullCtorArgs()",
    "entityType": "method",
    "code": "@Test\r\nvoid ctorWithNullCtorArgs() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceEditor(null, null));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#setAndGetAsTextWithNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid setAndGetAsTextWithNull() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(null);\r\n    assertThat(editor.getAsText()).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#setAndGetAsTextWithWhitespaceResource()",
    "entityType": "method",
    "code": "@Test\r\nvoid setAndGetAsTextWithWhitespaceResource() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(\"  \");\r\n    assertThat(editor.getAsText()).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#systemPropertyReplacement()",
    "entityType": "method",
    "code": "@Test\r\nvoid systemPropertyReplacement() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        editor.setAsText(\"${test.prop}\");\r\n        Resource resolved = (Resource) editor.getValue();\r\n        assertThat(resolved.getFilename()).isEqualTo(\"foo\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#systemPropertyReplacementWithUnresolvablePlaceholder()",
    "entityType": "method",
    "code": "@Test\r\nvoid systemPropertyReplacementWithUnresolvablePlaceholder() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        editor.setAsText(\"${test.prop}-${bar}\");\r\n        Resource resolved = (Resource) editor.getValue();\r\n        assertThat(resolved.getFilename()).isEqualTo(\"foo-${bar}\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceEditorTests#strictSystemPropertyReplacementWithUnresolvablePlaceholder()",
    "entityType": "method",
    "code": "@Test\r\nvoid strictSystemPropertyReplacementWithUnresolvablePlaceholder() {\r\n    PropertyEditor editor = new ResourceEditor(new DefaultResourceLoader(), new StandardEnvironment(), false);\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> {\r\n            editor.setAsText(\"${test.prop}-${bar}\");\r\n            editor.getValue();\r\n        });\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests",
    "entityType": "class",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceIsValid(Resource resource) throws Exception {\r\n    assertThat(resource.getFilename()).isEqualTo(\"ResourceTests.class\");\r\n    assertThat(resource.getURL().getFile()).endsWith(\"ResourceTests.class\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isGreaterThan(0);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n    assertThat(resource.getContentAsByteArray()).containsExactly(Files.readAllBytes(Path.of(resource.getURI())));\r\n}\n@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelative(Resource resource) throws Exception {\r\n    Resource relative1 = resource.createRelative(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getFilename()).isEqualTo(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getURL().getFile().endsWith(\"ClassPathResourceTests.class\")).isTrue();\r\n    assertThat(relative1.exists()).isTrue();\r\n    assertThat(relative1.isReadable()).isTrue();\r\n    assertThat(relative1.contentLength()).isGreaterThan(0);\r\n    assertThat(relative1.lastModified()).isGreaterThan(0);\r\n}\n@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithFolder(Resource resource) throws Exception {\r\n    Resource relative2 = resource.createRelative(\"support/PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getFilename()).isEqualTo(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getURL().getFile()).endsWith(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.exists()).isTrue();\r\n    assertThat(relative2.isReadable()).isTrue();\r\n    assertThat(relative2.contentLength()).isGreaterThan(0);\r\n    assertThat(relative2.lastModified()).isGreaterThan(0);\r\n}\n@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithDotPath(Resource resource) throws Exception {\r\n    Resource relative3 = resource.createRelative(\"../CollectionFactoryTests.class\");\r\n    assertThat(relative3.getFilename()).isEqualTo(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.getURL().getFile()).endsWith(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.exists()).isTrue();\r\n    assertThat(relative3.isReadable()).isTrue();\r\n    assertThat(relative3.contentLength()).isGreaterThan(0);\r\n    assertThat(relative3.lastModified()).isGreaterThan(0);\r\n}\n@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeUnknown(Resource resource) throws Exception {\r\n    Resource relative4 = resource.createRelative(\"X.class\");\r\n    assertThat(relative4.exists()).isFalse();\r\n    assertThat(relative4.isReadable()).isFalse();\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::contentLength);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::lastModified);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getInputStream);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::readableChannel);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getContentAsByteArray);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(() -> relative4.getContentAsString(UTF_8));\r\n}\nprivate static Stream<Arguments> resource() throws URISyntaxException {\r\n    URL resourceClass = ResourceTests.class.getResource(\"ResourceTests.class\");\r\n    Path resourceClassFilePath = Paths.get(resourceClass.toURI());\r\n    return Stream.of(argumentSet(\"ClassPathResource\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\")), argumentSet(\"ClassPathResource with ClassLoader\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\", ResourceTests.class.getClassLoader())), argumentSet(\"ClassPathResource with Class\", new ClassPathResource(\"ResourceTests.class\", ResourceTests.class)), argumentSet(\"FileSystemResource\", new FileSystemResource(resourceClass.getFile())), argumentSet(\"FileSystemResource with File\", new FileSystemResource(new File(resourceClass.getFile()))), argumentSet(\"FileSystemResource with File path\", new FileSystemResource(resourceClassFilePath)), argumentSet(\"UrlResource\", new UrlResource(resourceClass)));\r\n}\n@Nested\r\nclass ByteArrayResourceTests {\r\n\r\n    @Test\r\n    void hasContent() throws Exception {\r\n        String testString = \"testString\";\r\n        byte[] testBytes = testString.getBytes();\r\n        Resource resource = new ByteArrayResource(testBytes);\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isOpen()).isFalse();\r\n        byte[] contentBytes = resource.getContentAsByteArray();\r\n        assertThat(contentBytes).containsExactly(testBytes);\r\n        String contentString = resource.getContentAsString(StandardCharsets.US_ASCII);\r\n        assertThat(contentString).isEqualTo(testString);\r\n        contentString = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()));\r\n        assertThat(contentString).isEqualTo(testString);\r\n        assertThat(new ByteArrayResource(testBytes)).isEqualTo(resource);\r\n    }\r\n\r\n    @Test\r\n    void isNotOpen() {\r\n        Resource resource = new ByteArrayResource(\"testString\".getBytes());\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isOpen()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    void hasDescription() {\r\n        Resource resource = new ByteArrayResource(\"testString\".getBytes(), \"my description\");\r\n        assertThat(resource.getDescription()).contains(\"my description\");\r\n    }\r\n}\n@Nested\r\nclass InputStreamResourceTests {\r\n\r\n    @Test\r\n    void hasContent() throws Exception {\r\n        String testString = \"testString\";\r\n        byte[] testBytes = testString.getBytes();\r\n        InputStream is = new ByteArrayInputStream(testBytes);\r\n        Resource resource1 = new InputStreamResource(is);\r\n        String content = FileCopyUtils.copyToString(new InputStreamReader(resource1.getInputStream()));\r\n        assertThat(content).isEqualTo(testString);\r\n        assertThat(new InputStreamResource(is)).isEqualTo(resource1);\r\n        assertThat(new InputStreamResource(() -> is)).isNotEqualTo(resource1);\r\n        assertThatIllegalStateException().isThrownBy(resource1::getInputStream);\r\n        Resource resource2 = new InputStreamResource(new ByteArrayInputStream(testBytes));\r\n        assertThat(resource2.getContentAsByteArray()).containsExactly(testBytes);\r\n        assertThatIllegalStateException().isThrownBy(resource2::getContentAsByteArray);\r\n        AtomicBoolean obtained = new AtomicBoolean();\r\n        Resource resource3 = new InputStreamResource(() -> {\r\n            obtained.set(true);\r\n            return new ByteArrayInputStream(testBytes);\r\n        });\r\n        assertThat(obtained).isFalse();\r\n        assertThat(resource3.getContentAsString(StandardCharsets.US_ASCII)).isEqualTo(testString);\r\n        assertThat(obtained).isTrue();\r\n        assertThatIllegalStateException().isThrownBy(() -> resource3.getContentAsString(StandardCharsets.US_ASCII));\r\n    }\r\n\r\n    @Test\r\n    void isOpen() {\r\n        InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n        Resource resource = new InputStreamResource(is);\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isOpen()).isTrue();\r\n        resource = new InputStreamResource(() -> is);\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isOpen()).isTrue();\r\n    }\r\n\r\n    @Test\r\n    void hasDescription() {\r\n        InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n        Resource resource = new InputStreamResource(is, \"my description\");\r\n        assertThat(resource.getDescription()).contains(\"my description\");\r\n        resource = new InputStreamResource(() -> is, \"my description\");\r\n        assertThat(resource.getDescription()).contains(\"my description\");\r\n    }\r\n}\n@Nested\r\nclass FileSystemResourceTests {\r\n\r\n    @Test\r\n    void sameResourceIsEqual() {\r\n        String file = getClass().getResource(\"ResourceTests.class\").getFile();\r\n        Resource resource = new FileSystemResource(file);\r\n        assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n    }\r\n\r\n    @Test\r\n    void sameResourceFromFileIsEqual() {\r\n        File file = new File(getClass().getResource(\"ResourceTests.class\").getFile());\r\n        Resource resource = new FileSystemResource(file);\r\n        assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n    }\r\n\r\n    @Test\r\n    void sameResourceFromFilePathIsEqual() throws Exception {\r\n        Path filePath = Paths.get(getClass().getResource(\"ResourceTests.class\").toURI());\r\n        Resource resource = new FileSystemResource(filePath);\r\n        assertThat(resource).isEqualTo(new FileSystemResource(filePath));\r\n    }\r\n\r\n    @Test\r\n    void sameResourceFromDotPathIsEqual() {\r\n        Resource resource = new FileSystemResource(\"core/io/ResourceTests.class\");\r\n        assertThat(new FileSystemResource(\"core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n    }\r\n\r\n    @Test\r\n    void relativeResourcesAreEqual() throws Exception {\r\n        Resource resource = new FileSystemResource(\"dir/\");\r\n        Resource relative = resource.createRelative(\"subdir\");\r\n        assertThat(relative).isEqualTo(new FileSystemResource(\"dir/subdir\"));\r\n    }\r\n\r\n    @Test\r\n    void readableChannelProvidesContent() throws Exception {\r\n        Resource resource = new FileSystemResource(getClass().getResource(\"ResourceTests.class\").getFile());\r\n        try (ReadableByteChannel channel = resource.readableChannel()) {\r\n            ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n            channel.read(buffer);\r\n            buffer.rewind();\r\n            assertThat(buffer.limit()).isGreaterThan(0);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void urlAndUriAreNormalizedWhenCreatedFromFile() throws Exception {\r\n        Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n        assertUrlAndUriBehavior(new FileSystemResource(path.toFile()));\r\n    }\r\n\r\n    @Test\r\n    void urlAndUriAreNormalizedWhenCreatedFromPath() throws Exception {\r\n        Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n        assertUrlAndUriBehavior(new FileSystemResource(path));\r\n    }\r\n\r\n    /**\r\n     * The following assertions serve as regression tests for the lack of the\r\n     * \"authority component\" (//) in the returned URI/URL. For example, we are\r\n     * expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\r\n     */\r\n    private void assertUrlAndUriBehavior(Resource resource) throws IOException {\r\n        assertThat(resource.getURL().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n        assertThat(resource.getURI().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n    }\r\n}\n@Nested\r\nclass UrlResourceTests {\r\n\r\n    private static final String LAST_MODIFIED = \"Wed, 09 Apr 2014 09:57:42 GMT\";\r\n\r\n    private final MockWebServer server = new MockWebServer();\r\n\r\n    @Test\r\n    void sameResourceWithRelativePathIsEqual() throws Exception {\r\n        Resource resource = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n        assertThat(new UrlResource(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n    }\r\n\r\n    @Test\r\n    void filenameIsExtractedFromFilePath() throws Exception {\r\n        assertThat(new UrlResource(\"file:test?argh\").getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(\"file:/test?argh\").getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(\"file:test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(\"file:/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(\"file:/dir/test?argh\").getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    }\r\n\r\n    @Test\r\n    void filenameIsExtractedFromURL() throws Exception {\r\n        assertThat(new UrlResource(new URL(\"file:test?argh\")).getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(new URL(\"file:/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(new URL(\"file:test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(new URL(\"file:/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(new URL(\"file:/dir/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n        assertThat(new UrlResource(new URL(\"file:/dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(new URL(\"file:\\\\dir\\\\test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(new UrlResource(new URL(\"file:\\\\dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    }\r\n\r\n    @Test\r\n    void filenameContainingHashTagIsExtractedFromFilePathUnencoded() throws Exception {\r\n        String unencodedPath = \"/dir/test#1.txt\";\r\n        String encodedPath = \"/dir/test%231.txt\";\r\n        URI uri = new URI(\"file\", unencodedPath, null);\r\n        URL url = uri.toURL();\r\n        assertThat(uri.getPath()).isEqualTo(unencodedPath);\r\n        assertThat(uri.getRawPath()).isEqualTo(encodedPath);\r\n        assertThat(url.getPath()).isEqualTo(encodedPath);\r\n        UrlResource urlResource = new UrlResource(url);\r\n        assertThat(urlResource.getURI().getPath()).isEqualTo(unencodedPath);\r\n        assertThat(urlResource.getFilename()).isEqualTo(\"test#1.txt\");\r\n    }\r\n\r\n    @Test\r\n    void factoryMethodsProduceEqualResources() throws Exception {\r\n        Resource resource1 = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n        Resource resource2 = UrlResource.from(\"file:core/io/ResourceTests.class\");\r\n        Resource resource3 = UrlResource.from(resource1.getURI());\r\n        assertThat(resource2.getURL()).isEqualTo(resource1.getURL());\r\n        assertThat(resource3.getURL()).isEqualTo(resource1.getURL());\r\n        assertThat(UrlResource.from(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource1);\r\n        assertThat(UrlResource.from(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(UrlResource.from(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n        assertThat(UrlResource.from(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    }\r\n\r\n    @Test\r\n    void relativeResourcesAreEqual() throws Exception {\r\n        Resource resource = new UrlResource(\"file:dir/\");\r\n        Resource relative = resource.createRelative(\"subdir\");\r\n        assertThat(relative).isEqualTo(new UrlResource(\"file:dir/subdir\"));\r\n    }\r\n\r\n    @Test\r\n    void unusualRelativeResourcesAreEqual() throws Exception {\r\n        Resource resource = new UrlResource(\"file:dir/\");\r\n        Resource relative = resource.createRelative(\"https://spring.io\");\r\n        assertThat(relative).isEqualTo(new UrlResource(\"file:dir/https://spring.io\"));\r\n    }\r\n\r\n    @Test\r\n    void missingRemoteResourceDoesNotExist() throws Exception {\r\n        String baseUrl = startServer(true);\r\n        UrlResource resource = new UrlResource(baseUrl + \"/missing\");\r\n        assertThat(resource.exists()).isFalse();\r\n    }\r\n\r\n    @Test\r\n    void remoteResourceExists() throws Exception {\r\n        String baseUrl = startServer(true);\r\n        UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isReadable()).isTrue();\r\n        assertThat(resource.contentLength()).isEqualTo(6);\r\n        assertThat(resource.lastModified()).isGreaterThan(0);\r\n    }\r\n\r\n    @Test\r\n    void remoteResourceExistsFallback() throws Exception {\r\n        String baseUrl = startServer(false);\r\n        UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n        assertThat(resource.exists()).isTrue();\r\n        assertThat(resource.isReadable()).isTrue();\r\n        assertThat(resource.contentLength()).isEqualTo(6);\r\n        assertThat(resource.lastModified()).isGreaterThan(0);\r\n    }\r\n\r\n    @Test\r\n    void canCustomizeHttpUrlConnectionForExists() throws Exception {\r\n        String baseUrl = startServer(true);\r\n        CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n        assertThat(resource.exists()).isTrue();\r\n        RecordedRequest request = this.server.takeRequest();\r\n        assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n        assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n    }\r\n\r\n    @Test\r\n    void canCustomizeHttpUrlConnectionForExistsFallback() throws Exception {\r\n        String baseUrl = startServer(false);\r\n        CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n        assertThat(resource.exists()).isTrue();\r\n        RecordedRequest request = this.server.takeRequest();\r\n        assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n        assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n    }\r\n\r\n    @Test\r\n    void canCustomizeHttpUrlConnectionForRead() throws Exception {\r\n        String baseUrl = startServer(true);\r\n        CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n        assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n        RecordedRequest request = this.server.takeRequest();\r\n        assertThat(request.getMethod()).isEqualTo(\"GET\");\r\n        assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n    }\r\n\r\n    @Test\r\n    void useUserInfoToSetBasicAuth() throws Exception {\r\n        startServer(true);\r\n        UrlResource resource = new UrlResource(\"http://alice:secret@localhost:\" + this.server.getPort() + \"/resource\");\r\n        assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n        RecordedRequest request = this.server.takeRequest();\r\n        String authorization = request.getHeader(\"Authorization\");\r\n        assertThat(authorization).isNotNull().startsWith(\"Basic \");\r\n        assertThat(new String(Base64.getDecoder().decode(authorization.substring(6)), StandardCharsets.ISO_8859_1)).isEqualTo(\"alice:secret\");\r\n    }\r\n\r\n    @AfterEach\r\n    void shutdown() throws Exception {\r\n        this.server.shutdown();\r\n    }\r\n\r\n    private String startServer(boolean withHeadSupport) throws Exception {\r\n        this.server.setDispatcher(new ResourceDispatcher(withHeadSupport));\r\n        this.server.start();\r\n        return \"http://localhost:\" + this.server.getPort();\r\n    }\r\n\r\n    class CustomResource extends UrlResource {\r\n\r\n        public CustomResource(String path) throws MalformedURLException {\r\n            super(path);\r\n        }\r\n\r\n        @Override\r\n        protected void customizeConnection(HttpURLConnection con) {\r\n            con.setRequestProperty(\"Framework-Name\", \"Spring\");\r\n        }\r\n    }\r\n\r\n    class ResourceDispatcher extends Dispatcher {\r\n\r\n        boolean withHeadSupport;\r\n\r\n        public ResourceDispatcher(boolean withHeadSupport) {\r\n            this.withHeadSupport = withHeadSupport;\r\n        }\r\n\r\n        @Override\r\n        public MockResponse dispatch(RecordedRequest request) {\r\n            if (request.getPath().equals(\"/resource\")) {\r\n                return switch(request.getMethod()) {\r\n                    case \"HEAD\" ->\r\n                        (this.withHeadSupport ? new MockResponse().addHeader(\"Content-Type\", \"text/plain\").addHeader(\"Content-Length\", \"6\").addHeader(\"Last-Modified\", LAST_MODIFIED) : new MockResponse().setResponseCode(405));\r\n                    case \"GET\" ->\r\n                        new MockResponse().addHeader(\"Content-Type\", \"text/plain\").addHeader(\"Content-Length\", \"6\").addHeader(\"Last-Modified\", LAST_MODIFIED).setBody(\"Spring\");\r\n                    default ->\r\n                        new MockResponse().setResponseCode(404);\r\n                };\r\n            }\r\n            return new MockResponse().setResponseCode(404);\r\n        }\r\n    }\r\n}\n@Nested\r\nclass AbstractResourceTests {\r\n\r\n    @Test\r\n    void missingResourceIsNotReadable() {\r\n        final String name = \"test-resource\";\r\n        Resource resource = new AbstractResource() {\r\n\r\n            @Override\r\n            public String getDescription() {\r\n                return name;\r\n            }\r\n\r\n            @Override\r\n            public InputStream getInputStream() throws IOException {\r\n                throw new FileNotFoundException();\r\n            }\r\n        };\r\n        assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getURL).withMessageContaining(name);\r\n        assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getFile).withMessageContaining(name);\r\n        assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(() -> resource.createRelative(\"/testing\")).withMessageContaining(name);\r\n        assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getContentAsByteArray);\r\n        assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(() -> resource.getContentAsString(StandardCharsets.US_ASCII));\r\n        assertThat(resource.getFilename()).isNull();\r\n    }\r\n\r\n    @Test\r\n    void hasContentLength() throws Exception {\r\n        AbstractResource resource = new AbstractResource() {\r\n\r\n            @Override\r\n            public InputStream getInputStream() {\r\n                return new ByteArrayInputStream(new byte[] { 'a', 'b', 'c' });\r\n            }\r\n\r\n            @Override\r\n            public String getDescription() {\r\n                return \"\";\r\n            }\r\n        };\r\n        assertThat(resource.contentLength()).isEqualTo(3L);\r\n    }\r\n}",
    "comment": "\n * Tests for various {@link Resource} implementations.\n *\n * @author Juergen Hoeller\n * @author Chris Beams\n * @author Sam Brannen\n * @author Brian Clozel\n "
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resourceIsValid(Resource)",
    "entityType": "method",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceIsValid(Resource resource) throws Exception {\r\n    assertThat(resource.getFilename()).isEqualTo(\"ResourceTests.class\");\r\n    assertThat(resource.getURL().getFile()).endsWith(\"ResourceTests.class\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isGreaterThan(0);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n    assertThat(resource.getContentAsByteArray()).containsExactly(Files.readAllBytes(Path.of(resource.getURI())));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resourceCreateRelative(Resource)",
    "entityType": "method",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelative(Resource resource) throws Exception {\r\n    Resource relative1 = resource.createRelative(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getFilename()).isEqualTo(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getURL().getFile().endsWith(\"ClassPathResourceTests.class\")).isTrue();\r\n    assertThat(relative1.exists()).isTrue();\r\n    assertThat(relative1.isReadable()).isTrue();\r\n    assertThat(relative1.contentLength()).isGreaterThan(0);\r\n    assertThat(relative1.lastModified()).isGreaterThan(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithFolder(Resource)",
    "entityType": "method",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithFolder(Resource resource) throws Exception {\r\n    Resource relative2 = resource.createRelative(\"support/PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getFilename()).isEqualTo(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getURL().getFile()).endsWith(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.exists()).isTrue();\r\n    assertThat(relative2.isReadable()).isTrue();\r\n    assertThat(relative2.contentLength()).isGreaterThan(0);\r\n    assertThat(relative2.lastModified()).isGreaterThan(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithDotPath(Resource)",
    "entityType": "method",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithDotPath(Resource resource) throws Exception {\r\n    Resource relative3 = resource.createRelative(\"../CollectionFactoryTests.class\");\r\n    assertThat(relative3.getFilename()).isEqualTo(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.getURL().getFile()).endsWith(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.exists()).isTrue();\r\n    assertThat(relative3.isReadable()).isTrue();\r\n    assertThat(relative3.contentLength()).isGreaterThan(0);\r\n    assertThat(relative3.lastModified()).isGreaterThan(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resourceCreateRelativeUnknown(Resource)",
    "entityType": "method",
    "code": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeUnknown(Resource resource) throws Exception {\r\n    Resource relative4 = resource.createRelative(\"X.class\");\r\n    assertThat(relative4.exists()).isFalse();\r\n    assertThat(relative4.isReadable()).isFalse();\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::contentLength);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::lastModified);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getInputStream);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::readableChannel);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getContentAsByteArray);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(() -> relative4.getContentAsString(UTF_8));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ResourceTests#resource()",
    "entityType": "method",
    "code": "private static Stream<Arguments> resource() throws URISyntaxException {\r\n    URL resourceClass = ResourceTests.class.getResource(\"ResourceTests.class\");\r\n    Path resourceClassFilePath = Paths.get(resourceClass.toURI());\r\n    return Stream.of(argumentSet(\"ClassPathResource\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\")), argumentSet(\"ClassPathResource with ClassLoader\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\", ResourceTests.class.getClassLoader())), argumentSet(\"ClassPathResource with Class\", new ClassPathResource(\"ResourceTests.class\", ResourceTests.class)), argumentSet(\"FileSystemResource\", new FileSystemResource(resourceClass.getFile())), argumentSet(\"FileSystemResource with File\", new FileSystemResource(new File(resourceClass.getFile()))), argumentSet(\"FileSystemResource with File path\", new FileSystemResource(resourceClassFilePath)), argumentSet(\"UrlResource\", new UrlResource(resourceClass)));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ByteArrayResourceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid hasContent() throws Exception {\r\n    String testString = \"testString\";\r\n    byte[] testBytes = testString.getBytes();\r\n    Resource resource = new ByteArrayResource(testBytes);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n    byte[] contentBytes = resource.getContentAsByteArray();\r\n    assertThat(contentBytes).containsExactly(testBytes);\r\n    String contentString = resource.getContentAsString(StandardCharsets.US_ASCII);\r\n    assertThat(contentString).isEqualTo(testString);\r\n    contentString = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()));\r\n    assertThat(contentString).isEqualTo(testString);\r\n    assertThat(new ByteArrayResource(testBytes)).isEqualTo(resource);\r\n}\n@Test\r\nvoid isNotOpen() {\r\n    Resource resource = new ByteArrayResource(\"testString\".getBytes());\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n}\n@Test\r\nvoid hasDescription() {\r\n    Resource resource = new ByteArrayResource(\"testString\".getBytes(), \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ByteArrayResourceTests#hasContent()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasContent() throws Exception {\r\n    String testString = \"testString\";\r\n    byte[] testBytes = testString.getBytes();\r\n    Resource resource = new ByteArrayResource(testBytes);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n    byte[] contentBytes = resource.getContentAsByteArray();\r\n    assertThat(contentBytes).containsExactly(testBytes);\r\n    String contentString = resource.getContentAsString(StandardCharsets.US_ASCII);\r\n    assertThat(contentString).isEqualTo(testString);\r\n    contentString = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()));\r\n    assertThat(contentString).isEqualTo(testString);\r\n    assertThat(new ByteArrayResource(testBytes)).isEqualTo(resource);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ByteArrayResourceTests#isNotOpen()",
    "entityType": "method",
    "code": "@Test\r\nvoid isNotOpen() {\r\n    Resource resource = new ByteArrayResource(\"testString\".getBytes());\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.ByteArrayResourceTests#hasDescription()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasDescription() {\r\n    Resource resource = new ByteArrayResource(\"testString\".getBytes(), \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.InputStreamResourceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid hasContent() throws Exception {\r\n    String testString = \"testString\";\r\n    byte[] testBytes = testString.getBytes();\r\n    InputStream is = new ByteArrayInputStream(testBytes);\r\n    Resource resource1 = new InputStreamResource(is);\r\n    String content = FileCopyUtils.copyToString(new InputStreamReader(resource1.getInputStream()));\r\n    assertThat(content).isEqualTo(testString);\r\n    assertThat(new InputStreamResource(is)).isEqualTo(resource1);\r\n    assertThat(new InputStreamResource(() -> is)).isNotEqualTo(resource1);\r\n    assertThatIllegalStateException().isThrownBy(resource1::getInputStream);\r\n    Resource resource2 = new InputStreamResource(new ByteArrayInputStream(testBytes));\r\n    assertThat(resource2.getContentAsByteArray()).containsExactly(testBytes);\r\n    assertThatIllegalStateException().isThrownBy(resource2::getContentAsByteArray);\r\n    AtomicBoolean obtained = new AtomicBoolean();\r\n    Resource resource3 = new InputStreamResource(() -> {\r\n        obtained.set(true);\r\n        return new ByteArrayInputStream(testBytes);\r\n    });\r\n    assertThat(obtained).isFalse();\r\n    assertThat(resource3.getContentAsString(StandardCharsets.US_ASCII)).isEqualTo(testString);\r\n    assertThat(obtained).isTrue();\r\n    assertThatIllegalStateException().isThrownBy(() -> resource3.getContentAsString(StandardCharsets.US_ASCII));\r\n}\n@Test\r\nvoid isOpen() {\r\n    InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n    Resource resource = new InputStreamResource(is);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isTrue();\r\n    resource = new InputStreamResource(() -> is);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isTrue();\r\n}\n@Test\r\nvoid hasDescription() {\r\n    InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n    Resource resource = new InputStreamResource(is, \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n    resource = new InputStreamResource(() -> is, \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.InputStreamResourceTests#hasContent()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasContent() throws Exception {\r\n    String testString = \"testString\";\r\n    byte[] testBytes = testString.getBytes();\r\n    InputStream is = new ByteArrayInputStream(testBytes);\r\n    Resource resource1 = new InputStreamResource(is);\r\n    String content = FileCopyUtils.copyToString(new InputStreamReader(resource1.getInputStream()));\r\n    assertThat(content).isEqualTo(testString);\r\n    assertThat(new InputStreamResource(is)).isEqualTo(resource1);\r\n    assertThat(new InputStreamResource(() -> is)).isNotEqualTo(resource1);\r\n    assertThatIllegalStateException().isThrownBy(resource1::getInputStream);\r\n    Resource resource2 = new InputStreamResource(new ByteArrayInputStream(testBytes));\r\n    assertThat(resource2.getContentAsByteArray()).containsExactly(testBytes);\r\n    assertThatIllegalStateException().isThrownBy(resource2::getContentAsByteArray);\r\n    AtomicBoolean obtained = new AtomicBoolean();\r\n    Resource resource3 = new InputStreamResource(() -> {\r\n        obtained.set(true);\r\n        return new ByteArrayInputStream(testBytes);\r\n    });\r\n    assertThat(obtained).isFalse();\r\n    assertThat(resource3.getContentAsString(StandardCharsets.US_ASCII)).isEqualTo(testString);\r\n    assertThat(obtained).isTrue();\r\n    assertThatIllegalStateException().isThrownBy(() -> resource3.getContentAsString(StandardCharsets.US_ASCII));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.InputStreamResourceTests#isOpen()",
    "entityType": "method",
    "code": "@Test\r\nvoid isOpen() {\r\n    InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n    Resource resource = new InputStreamResource(is);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isTrue();\r\n    resource = new InputStreamResource(() -> is);\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isOpen()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.InputStreamResourceTests#hasDescription()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasDescription() {\r\n    InputStream is = new ByteArrayInputStream(\"testString\".getBytes());\r\n    Resource resource = new InputStreamResource(is, \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n    resource = new InputStreamResource(() -> is, \"my description\");\r\n    assertThat(resource.getDescription()).contains(\"my description\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid sameResourceIsEqual() {\r\n    String file = getClass().getResource(\"ResourceTests.class\").getFile();\r\n    Resource resource = new FileSystemResource(file);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n}\n@Test\r\nvoid sameResourceFromFileIsEqual() {\r\n    File file = new File(getClass().getResource(\"ResourceTests.class\").getFile());\r\n    Resource resource = new FileSystemResource(file);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n}\n@Test\r\nvoid sameResourceFromFilePathIsEqual() throws Exception {\r\n    Path filePath = Paths.get(getClass().getResource(\"ResourceTests.class\").toURI());\r\n    Resource resource = new FileSystemResource(filePath);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(filePath));\r\n}\n@Test\r\nvoid sameResourceFromDotPathIsEqual() {\r\n    Resource resource = new FileSystemResource(\"core/io/ResourceTests.class\");\r\n    assertThat(new FileSystemResource(\"core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n}\n@Test\r\nvoid relativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new FileSystemResource(\"dir/\");\r\n    Resource relative = resource.createRelative(\"subdir\");\r\n    assertThat(relative).isEqualTo(new FileSystemResource(\"dir/subdir\"));\r\n}\n@Test\r\nvoid readableChannelProvidesContent() throws Exception {\r\n    Resource resource = new FileSystemResource(getClass().getResource(\"ResourceTests.class\").getFile());\r\n    try (ReadableByteChannel channel = resource.readableChannel()) {\r\n        ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n        channel.read(buffer);\r\n        buffer.rewind();\r\n        assertThat(buffer.limit()).isGreaterThan(0);\r\n    }\r\n}\n@Test\r\nvoid urlAndUriAreNormalizedWhenCreatedFromFile() throws Exception {\r\n    Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n    assertUrlAndUriBehavior(new FileSystemResource(path.toFile()));\r\n}\n@Test\r\nvoid urlAndUriAreNormalizedWhenCreatedFromPath() throws Exception {\r\n    Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n    assertUrlAndUriBehavior(new FileSystemResource(path));\r\n}\n/**\r\n * The following assertions serve as regression tests for the lack of the\r\n * \"authority component\" (//) in the returned URI/URL. For example, we are\r\n * expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\r\n */\r\nprivate void assertUrlAndUriBehavior(Resource resource) throws IOException {\r\n    assertThat(resource.getURL().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n    assertThat(resource.getURI().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#sameResourceIsEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid sameResourceIsEqual() {\r\n    String file = getClass().getResource(\"ResourceTests.class\").getFile();\r\n    Resource resource = new FileSystemResource(file);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#sameResourceFromFileIsEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid sameResourceFromFileIsEqual() {\r\n    File file = new File(getClass().getResource(\"ResourceTests.class\").getFile());\r\n    Resource resource = new FileSystemResource(file);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(file));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#sameResourceFromFilePathIsEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid sameResourceFromFilePathIsEqual() throws Exception {\r\n    Path filePath = Paths.get(getClass().getResource(\"ResourceTests.class\").toURI());\r\n    Resource resource = new FileSystemResource(filePath);\r\n    assertThat(resource).isEqualTo(new FileSystemResource(filePath));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#sameResourceFromDotPathIsEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid sameResourceFromDotPathIsEqual() {\r\n    Resource resource = new FileSystemResource(\"core/io/ResourceTests.class\");\r\n    assertThat(new FileSystemResource(\"core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#relativeResourcesAreEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid relativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new FileSystemResource(\"dir/\");\r\n    Resource relative = resource.createRelative(\"subdir\");\r\n    assertThat(relative).isEqualTo(new FileSystemResource(\"dir/subdir\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#readableChannelProvidesContent()",
    "entityType": "method",
    "code": "@Test\r\nvoid readableChannelProvidesContent() throws Exception {\r\n    Resource resource = new FileSystemResource(getClass().getResource(\"ResourceTests.class\").getFile());\r\n    try (ReadableByteChannel channel = resource.readableChannel()) {\r\n        ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n        channel.read(buffer);\r\n        buffer.rewind();\r\n        assertThat(buffer.limit()).isGreaterThan(0);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#urlAndUriAreNormalizedWhenCreatedFromFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid urlAndUriAreNormalizedWhenCreatedFromFile() throws Exception {\r\n    Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n    assertUrlAndUriBehavior(new FileSystemResource(path.toFile()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#urlAndUriAreNormalizedWhenCreatedFromPath()",
    "entityType": "method",
    "code": "@Test\r\nvoid urlAndUriAreNormalizedWhenCreatedFromPath() throws Exception {\r\n    Path path = Path.of(\"src/test/resources/scanned-resources/resource#test1.txt\").toAbsolutePath();\r\n    assertUrlAndUriBehavior(new FileSystemResource(path));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.FileSystemResourceTests#assertUrlAndUriBehavior(Resource)",
    "entityType": "method",
    "code": "/**\r\n * The following assertions serve as regression tests for the lack of the\r\n * \"authority component\" (//) in the returned URI/URL. For example, we are\r\n * expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\r\n */\r\nprivate void assertUrlAndUriBehavior(Resource resource) throws IOException {\r\n    assertThat(resource.getURL().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n    assertThat(resource.getURI().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n}",
    "comment": "\n\t\t * The following assertions serve as regression tests for the lack of the\n\t\t * \"authority component\" (//) in the returned URI/URL. For example, we are\n\t\t * expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\n\t\t "
  },
  {
    "entityId": "org.springframework.core.io.UrlResourceTests",
    "entityType": "class",
    "code": "private static final String LAST_MODIFIED = \"Wed, 09 Apr 2014 09:57:42 GMT\";\nprivate final MockWebServer server = new MockWebServer();\n@Test\r\nvoid sameResourceWithRelativePathIsEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n    assertThat(new UrlResource(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n}\n@Test\r\nvoid filenameIsExtractedFromFilePath() throws Exception {\r\n    assertThat(new UrlResource(\"file:test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/dir/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n}\n@Test\r\nvoid filenameIsExtractedFromURL() throws Exception {\r\n    assertThat(new UrlResource(new URL(\"file:test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir\\\\test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n}\n@Test\r\nvoid filenameContainingHashTagIsExtractedFromFilePathUnencoded() throws Exception {\r\n    String unencodedPath = \"/dir/test#1.txt\";\r\n    String encodedPath = \"/dir/test%231.txt\";\r\n    URI uri = new URI(\"file\", unencodedPath, null);\r\n    URL url = uri.toURL();\r\n    assertThat(uri.getPath()).isEqualTo(unencodedPath);\r\n    assertThat(uri.getRawPath()).isEqualTo(encodedPath);\r\n    assertThat(url.getPath()).isEqualTo(encodedPath);\r\n    UrlResource urlResource = new UrlResource(url);\r\n    assertThat(urlResource.getURI().getPath()).isEqualTo(unencodedPath);\r\n    assertThat(urlResource.getFilename()).isEqualTo(\"test#1.txt\");\r\n}\n@Test\r\nvoid factoryMethodsProduceEqualResources() throws Exception {\r\n    Resource resource1 = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n    Resource resource2 = UrlResource.from(\"file:core/io/ResourceTests.class\");\r\n    Resource resource3 = UrlResource.from(resource1.getURI());\r\n    assertThat(resource2.getURL()).isEqualTo(resource1.getURL());\r\n    assertThat(resource3.getURL()).isEqualTo(resource1.getURL());\r\n    assertThat(UrlResource.from(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource1);\r\n    assertThat(UrlResource.from(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(UrlResource.from(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(UrlResource.from(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n}\n@Test\r\nvoid relativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:dir/\");\r\n    Resource relative = resource.createRelative(\"subdir\");\r\n    assertThat(relative).isEqualTo(new UrlResource(\"file:dir/subdir\"));\r\n}\n@Test\r\nvoid unusualRelativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:dir/\");\r\n    Resource relative = resource.createRelative(\"https://spring.io\");\r\n    assertThat(relative).isEqualTo(new UrlResource(\"file:dir/https://spring.io\"));\r\n}\n@Test\r\nvoid missingRemoteResourceDoesNotExist() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/missing\");\r\n    assertThat(resource.exists()).isFalse();\r\n}\n@Test\r\nvoid remoteResourceExists() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isEqualTo(6);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n}\n@Test\r\nvoid remoteResourceExistsFallback() throws Exception {\r\n    String baseUrl = startServer(false);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isEqualTo(6);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n}\n@Test\r\nvoid canCustomizeHttpUrlConnectionForExists() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}\n@Test\r\nvoid canCustomizeHttpUrlConnectionForExistsFallback() throws Exception {\r\n    String baseUrl = startServer(false);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}\n@Test\r\nvoid canCustomizeHttpUrlConnectionForRead() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"GET\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}\n@Test\r\nvoid useUserInfoToSetBasicAuth() throws Exception {\r\n    startServer(true);\r\n    UrlResource resource = new UrlResource(\"http://alice:secret@localhost:\" + this.server.getPort() + \"/resource\");\r\n    assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n    RecordedRequest request = this.server.takeRequest();\r\n    String authorization = request.getHeader(\"Authorization\");\r\n    assertThat(authorization).isNotNull().startsWith(\"Basic \");\r\n    assertThat(new String(Base64.getDecoder().decode(authorization.substring(6)), StandardCharsets.ISO_8859_1)).isEqualTo(\"alice:secret\");\r\n}\n@AfterEach\r\nvoid shutdown() throws Exception {\r\n    this.server.shutdown();\r\n}\nprivate String startServer(boolean withHeadSupport) throws Exception {\r\n    this.server.setDispatcher(new ResourceDispatcher(withHeadSupport));\r\n    this.server.start();\r\n    return \"http://localhost:\" + this.server.getPort();\r\n}\nclass CustomResource extends UrlResource {\r\n\r\n    public CustomResource(String path) throws MalformedURLException {\r\n        super(path);\r\n    }\r\n\r\n    @Override\r\n    protected void customizeConnection(HttpURLConnection con) {\r\n        con.setRequestProperty(\"Framework-Name\", \"Spring\");\r\n    }\r\n}\nclass ResourceDispatcher extends Dispatcher {\r\n\r\n    boolean withHeadSupport;\r\n\r\n    public ResourceDispatcher(boolean withHeadSupport) {\r\n        this.withHeadSupport = withHeadSupport;\r\n    }\r\n\r\n    @Override\r\n    public MockResponse dispatch(RecordedRequest request) {\r\n        if (request.getPath().equals(\"/resource\")) {\r\n            return switch(request.getMethod()) {\r\n                case \"HEAD\" ->\r\n                    (this.withHeadSupport ? new MockResponse().addHeader(\"Content-Type\", \"text/plain\").addHeader(\"Content-Length\", \"6\").addHeader(\"Last-Modified\", LAST_MODIFIED) : new MockResponse().setResponseCode(405));\r\n                case \"GET\" ->\r\n                    new MockResponse().addHeader(\"Content-Type\", \"text/plain\").addHeader(\"Content-Length\", \"6\").addHeader(\"Last-Modified\", LAST_MODIFIED).setBody(\"Spring\");\r\n                default ->\r\n                    new MockResponse().setResponseCode(404);\r\n            };\r\n        }\r\n        return new MockResponse().setResponseCode(404);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.UrlResourceTests#sameResourceWithRelativePathIsEqual()",
    "entityType": "method",
    "code": "@Test\r\nvoid sameResourceWithRelativePathIsEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n    assertThat(new UrlResource(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromFilePath()",
    "entityType": "method",
    "code": "@Test\r\nvoid filenameIsExtractedFromFilePath() throws Exception {\r\n    assertThat(new UrlResource(\"file:test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/dir/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromURL()",
    "entityType": "method",
    "code": "@Test\r\nvoid filenameIsExtractedFromURL() throws Exception {\r\n    assertThat(new UrlResource(new URL(\"file:test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir\\\\test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.io.UrlResourceTests#filenameContainingHashTagIsExtractedFromFilePathUnencoded()",
    "entityType": "method",
    "code": "@Test\r\nvoid filenameContainingHashTagIsExtractedFromFilePathUnencoded() throws Exception {\r\n    String unencodedPath = \"/dir/test#1.txt\";\r\n    String encodedPath = \"/dir/test%231.txt\";\r\n    URI uri = new URI(\"file\", unencodedPath, null);\r\n    URL url = uri.toURL();\r\n    assertThat(uri.getPath()).isEqualTo(unencodedPath);\r\n    assertThat(uri.getRawPath()).isEqualTo(encodedPath);\r\n    assertThat(url.getPath()).isEqualTo(encodedPath);\r\n    UrlResource urlResource = new UrlResource(url);\r\n    assertThat(urlResource.getURI().getPath()).isEqualTo(unencodedPath);\r\n    assertThat(urlResource.getFilename()).isEqualTo(\"test#1.txt\");\r\n}",
    "comment": ""
  }
]