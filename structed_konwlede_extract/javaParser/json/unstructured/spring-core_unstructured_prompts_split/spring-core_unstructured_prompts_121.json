[
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#methodWithLocalAnnotation()",
    "entityType": "method",
    "code": "@MethodAnnotation1\r\npublic void methodWithLocalAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#methodWithComposedAnnotation()",
    "entityType": "method",
    "code": "@ComposedMethodAnnotation1\r\npublic void methodWithComposedAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#methodWithComposedComposedAnnotation()",
    "entityType": "method",
    "code": "@ComposedComposedMethodAnnotation1\r\npublic void methodWithComposedComposedAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#setComplexProperty(Map<String,List<List<Integer>>>)",
    "entityType": "method",
    "code": "public void setComplexProperty(Map<String, List<List<Integer>>> complexProperty) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#testAnnotatedMethod(String)",
    "entityType": "method",
    "code": "public void testAnnotatedMethod(@ParameterAnnotation(123) String parameter) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.TypeDescriptorTests#testAnnotatedMethodDifferentAnnotationValue(String)",
    "entityType": "method",
    "code": "public void testAnnotatedMethodDifferentAnnotationValue(@ParameterAnnotation(567) String parameter) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.CustomSet",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.CustomMap",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.PassDownGeneric",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericClass",
    "entityType": "class",
    "code": "public T getProperty() {\r\n    return null;\r\n}\npublic void setProperty(T t) ;\n@MethodAnnotation1\r\npublic List<T> getListProperty() {\r\n    return null;\r\n}\npublic void setListProperty(List<T> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericClass#getProperty()",
    "entityType": "method",
    "code": "public T getProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericClass#setProperty(T)",
    "entityType": "method",
    "code": "public void setProperty(T t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericClass#getListProperty()",
    "entityType": "method",
    "code": "@MethodAnnotation1\r\npublic List<T> getListProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericClass#setListProperty(List<T>)",
    "entityType": "method",
    "code": "public void setListProperty(List<T> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericType",
    "entityType": "class",
    "code": "T getProperty();\nvoid setProperty(T t);\nList<T> getListProperty();\nvoid setListProperty(List<T> t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericType#getProperty()",
    "entityType": "method",
    "code": "T getProperty();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericType#setProperty(T)",
    "entityType": "method",
    "code": "void setProperty(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericType#getListProperty()",
    "entityType": "method",
    "code": "List<T> getListProperty();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.GenericType#setListProperty(List<T>)",
    "entityType": "method",
    "code": "void setListProperty(List<T> t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerType",
    "entityType": "class",
    "code": "@Override\r\npublic Integer getProperty() {\r\n    return null;\r\n}\n@Override\r\npublic void setProperty(Integer t) ;\n@Override\r\npublic List<Integer> getListProperty() {\r\n    return null;\r\n}\n@Override\r\npublic void setListProperty(List<Integer> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerType#getProperty()",
    "entityType": "method",
    "code": "@Override\r\npublic Integer getProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerType#setProperty(Integer)",
    "entityType": "method",
    "code": "@Override\r\npublic void setProperty(Integer t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerType#getListProperty()",
    "entityType": "method",
    "code": "@Override\r\npublic List<Integer> getListProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.IntegerType#setListProperty(List<Integer>)",
    "entityType": "method",
    "code": "@Override\r\npublic void setListProperty(List<Integer> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.NumberType",
    "entityType": "class",
    "code": "@Override\r\npublic Integer getProperty() {\r\n    return null;\r\n}\n@Override\r\npublic void setProperty(Number t) ;\n@Override\r\npublic List<Number> getListProperty() {\r\n    return null;\r\n}\n@Override\r\npublic void setListProperty(List<Number> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.NumberType#getProperty()",
    "entityType": "method",
    "code": "@Override\r\npublic Integer getProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.NumberType#setProperty(Number)",
    "entityType": "method",
    "code": "@Override\r\npublic void setProperty(Number t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.NumberType#getListProperty()",
    "entityType": "method",
    "code": "@Override\r\npublic List<Number> getListProperty() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.NumberType#setListProperty(List<Number>)",
    "entityType": "method",
    "code": "@Override\r\npublic void setListProperty(List<Number> t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.RecursiveMap",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.RecursiveMapWithInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CompositePropertySourceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid addFirst() {\r\n    PropertySource<?> p1 = new MapPropertySource(\"p1\", Map.of());\r\n    PropertySource<?> p2 = new MapPropertySource(\"p2\", Map.of());\r\n    PropertySource<?> p3 = new MapPropertySource(\"p3\", Map.of());\r\n    CompositePropertySource composite = new CompositePropertySource(\"c\");\r\n    composite.addPropertySource(p2);\r\n    composite.addPropertySource(p3);\r\n    composite.addPropertySource(p1);\r\n    composite.addFirstPropertySource(p1);\r\n    assertThat(composite.getPropertySources()).extracting(PropertySource::getName).containsExactly(\"p1\", \"p2\", \"p3\");\r\n    assertThat(composite).asString().containsSubsequence(\"name='p1'\", \"name='p2'\", \"name='p3'\");\r\n}\n@Test\r\nvoid getPropertyNamesRemovesDuplicates() {\r\n    CompositePropertySource composite = new CompositePropertySource(\"c\");\r\n    composite.addPropertySource(new MapPropertySource(\"p1\", Map.of(\"p1.property\", \"value\")));\r\n    composite.addPropertySource(new MapPropertySource(\"p2\", Map.of(\"p2.property1\", \"value\", \"p1.property\", \"value\", \"p2.property2\", \"value\")));\r\n    assertThat(composite.getPropertyNames()).containsOnly(\"p1.property\", \"p2.property1\", \"p2.property2\");\r\n}",
    "comment": "\n * Tests for {@link CompositePropertySource}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n "
  },
  {
    "entityId": "org.springframework.core.env.CompositePropertySourceTests#addFirst()",
    "entityType": "method",
    "code": "@Test\r\nvoid addFirst() {\r\n    PropertySource<?> p1 = new MapPropertySource(\"p1\", Map.of());\r\n    PropertySource<?> p2 = new MapPropertySource(\"p2\", Map.of());\r\n    PropertySource<?> p3 = new MapPropertySource(\"p3\", Map.of());\r\n    CompositePropertySource composite = new CompositePropertySource(\"c\");\r\n    composite.addPropertySource(p2);\r\n    composite.addPropertySource(p3);\r\n    composite.addPropertySource(p1);\r\n    composite.addFirstPropertySource(p1);\r\n    assertThat(composite.getPropertySources()).extracting(PropertySource::getName).containsExactly(\"p1\", \"p2\", \"p3\");\r\n    assertThat(composite).asString().containsSubsequence(\"name='p1'\", \"name='p2'\", \"name='p3'\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CompositePropertySourceTests#getPropertyNamesRemovesDuplicates()",
    "entityType": "method",
    "code": "@Test\r\nvoid getPropertyNamesRemovesDuplicates() {\r\n    CompositePropertySource composite = new CompositePropertySource(\"c\");\r\n    composite.addPropertySource(new MapPropertySource(\"p1\", Map.of(\"p1.property\", \"value\")));\r\n    composite.addPropertySource(new MapPropertySource(\"p2\", Map.of(\"p2.property1\", \"value\", \"p1.property\", \"value\", \"p2.property2\", \"value\")));\r\n    assertThat(composite.getPropertyNames()).containsOnly(\"p1.property\", \"p2.property1\", \"p2.property2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests",
    "entityType": "class",
    "code": "private static final String DEFAULT_PROFILE = AbstractEnvironment.RESERVED_DEFAULT_PROFILE_NAME;\n@Test\r\nvoid control() {\r\n    Environment env = new AbstractEnvironment() ;;\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isTrue();\r\n}\n@Test\r\nvoid withNoReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of();\r\n        }\r\n    }\r\n    Environment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n}\n@Test\r\nvoid withSingleCustomReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of(\"rd1\");\r\n        }\r\n    }\r\n    Environment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1\")).isTrue();\r\n}\n@Test\r\nvoid withMultiCustomReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of(\"rd1\", \"rd2\");\r\n        }\r\n    }\r\n    ConfigurableEnvironment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isTrue();\r\n    // finally, issue additional assertions to cover all combinations of calling these\r\n    // methods, however unlikely.\r\n    env.setDefaultProfiles(\"d1\");\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"d1\")).isTrue();\r\n    env.setActiveProfiles(\"a1\", \"a2\");\r\n    assertThat(env.matchesProfiles(\"d1\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isTrue();\r\n    env.setActiveProfiles();\r\n    assertThat(env.matchesProfiles(\"d1\")).isTrue();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isFalse();\r\n    env.setDefaultProfiles();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"d1\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isFalse();\r\n}\n@Test\r\nvoid withNoProfileProperties() {\r\n    ConfigurableEnvironment env = new AbstractEnvironment() {\r\n\r\n        @Override\r\n        @Nullable\r\n        protected String doGetActiveProfilesProperty() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        protected String doGetDefaultProfilesProperty() {\r\n            return null;\r\n        }\r\n    };\r\n    Map<String, Object> values = new LinkedHashMap<>();\r\n    values.put(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME, \"a,b,c\");\r\n    values.put(AbstractEnvironment.DEFAULT_PROFILES_PROPERTY_NAME, \"d,e,f\");\r\n    PropertySource<?> propertySource = new MapPropertySource(\"test\", values);\r\n    env.getPropertySources().addFirst(propertySource);\r\n    assertThat(env.getActiveProfiles()).isEmpty();\r\n    assertThat(env.getDefaultProfiles()).containsExactly(DEFAULT_PROFILE);\r\n}\n@Test\r\nvoid withCustomMutablePropertySources() {\r\n    class CustomMutablePropertySources extends MutablePropertySources ;\r\n    MutablePropertySources propertySources = new CustomMutablePropertySources();\r\n    ConfigurableEnvironment env = new AbstractEnvironment(propertySources) ;;\r\n    assertThat(env.getPropertySources()).isInstanceOf(CustomMutablePropertySources.class);\r\n}\n@Test\r\nvoid withCustomPropertyResolver() {\r\n    class CustomPropertySourcesPropertyResolver extends PropertySourcesPropertyResolver {\r\n\r\n        public CustomPropertySourcesPropertyResolver(PropertySources propertySources) {\r\n            super(propertySources);\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        public String getProperty(String key) {\r\n            return super.getProperty(key) + \"-test\";\r\n        }\r\n    }\r\n    ConfigurableEnvironment env = new AbstractEnvironment() {\r\n\r\n        @Override\r\n        protected ConfigurablePropertyResolver createPropertyResolver(MutablePropertySources propertySources) {\r\n            return new CustomPropertySourcesPropertyResolver(propertySources);\r\n        }\r\n    };\r\n    Map<String, Object> values = new LinkedHashMap<>();\r\n    values.put(\"spring\", \"framework\");\r\n    PropertySource<?> propertySource = new MapPropertySource(\"test\", values);\r\n    env.getPropertySources().addFirst(propertySource);\r\n    assertThat(env.getProperty(\"spring\")).isEqualTo(\"framework-test\");\r\n}",
    "comment": "\n * Unit tests covering the extensibility of {@link AbstractEnvironment}.\n *\n * @author Chris Beams\n * @author Sam Brannen\n * @since 3.1\n "
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#control()",
    "entityType": "method",
    "code": "@Test\r\nvoid control() {\r\n    Environment env = new AbstractEnvironment() ;;\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withNoReservedDefaultProfile()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNoReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of();\r\n        }\r\n    }\r\n    Environment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withSingleCustomReservedDefaultProfile()",
    "entityType": "method",
    "code": "@Test\r\nvoid withSingleCustomReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of(\"rd1\");\r\n        }\r\n    }\r\n    Environment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1\")).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withMultiCustomReservedDefaultProfile()",
    "entityType": "method",
    "code": "@Test\r\nvoid withMultiCustomReservedDefaultProfile() {\r\n    class CustomEnvironment extends AbstractEnvironment {\r\n\r\n        @Override\r\n        protected Set<String> getReservedDefaultProfiles() {\r\n            return Set.of(\"rd1\", \"rd2\");\r\n        }\r\n    }\r\n    ConfigurableEnvironment env = new CustomEnvironment();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isTrue();\r\n    // finally, issue additional assertions to cover all combinations of calling these\r\n    // methods, however unlikely.\r\n    env.setDefaultProfiles(\"d1\");\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"d1\")).isTrue();\r\n    env.setActiveProfiles(\"a1\", \"a2\");\r\n    assertThat(env.matchesProfiles(\"d1\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isTrue();\r\n    env.setActiveProfiles();\r\n    assertThat(env.matchesProfiles(\"d1\")).isTrue();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isFalse();\r\n    env.setDefaultProfiles();\r\n    assertThat(env.matchesProfiles(DEFAULT_PROFILE)).isFalse();\r\n    assertThat(env.matchesProfiles(\"rd1 | rd2\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"d1\")).isFalse();\r\n    assertThat(env.matchesProfiles(\"a1 | a2\")).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withNoProfileProperties()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNoProfileProperties() {\r\n    ConfigurableEnvironment env = new AbstractEnvironment() {\r\n\r\n        @Override\r\n        @Nullable\r\n        protected String doGetActiveProfilesProperty() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        protected String doGetDefaultProfilesProperty() {\r\n            return null;\r\n        }\r\n    };\r\n    Map<String, Object> values = new LinkedHashMap<>();\r\n    values.put(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME, \"a,b,c\");\r\n    values.put(AbstractEnvironment.DEFAULT_PROFILES_PROPERTY_NAME, \"d,e,f\");\r\n    PropertySource<?> propertySource = new MapPropertySource(\"test\", values);\r\n    env.getPropertySources().addFirst(propertySource);\r\n    assertThat(env.getActiveProfiles()).isEmpty();\r\n    assertThat(env.getDefaultProfiles()).containsExactly(DEFAULT_PROFILE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withCustomMutablePropertySources()",
    "entityType": "method",
    "code": "@Test\r\nvoid withCustomMutablePropertySources() {\r\n    class CustomMutablePropertySources extends MutablePropertySources ;\r\n    MutablePropertySources propertySources = new CustomMutablePropertySources();\r\n    ConfigurableEnvironment env = new AbstractEnvironment(propertySources) ;;\r\n    assertThat(env.getPropertySources()).isInstanceOf(CustomMutablePropertySources.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironmentTests#withCustomPropertyResolver()",
    "entityType": "method",
    "code": "@Test\r\nvoid withCustomPropertyResolver() {\r\n    class CustomPropertySourcesPropertyResolver extends PropertySourcesPropertyResolver {\r\n\r\n        public CustomPropertySourcesPropertyResolver(PropertySources propertySources) {\r\n            super(propertySources);\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        public String getProperty(String key) {\r\n            return super.getProperty(key) + \"-test\";\r\n        }\r\n    }\r\n    ConfigurableEnvironment env = new AbstractEnvironment() {\r\n\r\n        @Override\r\n        protected ConfigurablePropertyResolver createPropertyResolver(MutablePropertySources propertySources) {\r\n            return new CustomPropertySourcesPropertyResolver(propertySources);\r\n        }\r\n    };\r\n    Map<String, Object> values = new LinkedHashMap<>();\r\n    values.put(\"spring\", \"framework\");\r\n    PropertySource<?> propertySource = new MapPropertySource(\"test\", values);\r\n    env.getPropertySources().addFirst(propertySource);\r\n    assertThat(env.getProperty(\"spring\")).isEqualTo(\"framework-test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment",
    "entityType": "class",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment#getReservedDefaultProfiles()",
    "entityType": "method",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment",
    "entityType": "class",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of(\"rd1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment#getReservedDefaultProfiles()",
    "entityType": "method",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of(\"rd1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment",
    "entityType": "class",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of(\"rd1\", \"rd2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomEnvironment#getReservedDefaultProfiles()",
    "entityType": "method",
    "code": "@Override\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Set.of(\"rd1\", \"rd2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomMutablePropertySources",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomPropertySourcesPropertyResolver",
    "entityType": "class",
    "code": "public CustomPropertySourcesPropertyResolver(PropertySources propertySources) {\r\n    super(propertySources);\r\n}\n@Override\r\n@Nullable\r\npublic String getProperty(String key) {\r\n    return super.getProperty(key) + \"-test\";\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.CustomPropertySourcesPropertyResolver#getProperty(String)",
    "entityType": "method",
    "code": "@Override\r\n@Nullable\r\npublic String getProperty(String key) {\r\n    return super.getProperty(key) + \"-test\";\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid withRequiredArg_andArgIsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg();\r\n    OptionSet options = parser.parse(\"--foo=bar\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n}\n@Test\r\nvoid withOptionalArg_andArgIsMissing() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withOptionalArg();\r\n    OptionSet options = parser.parse(\"--foo\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"foo\")).isTrue();\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\r\n}\n// gh-24464\r\n@Test\r\nvoid withOptionalArg_andArgIsEmpty() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withOptionalArg();\r\n    OptionSet options = parser.parse(\"--foo=\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"foo\")).isTrue();\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\r\n}\n@Test\r\nvoid withNoArg() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\");\r\n    parser.accepts(\"o2\");\r\n    OptionSet options = parser.parse(\"--o1\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isFalse();\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"\");\r\n    assertThat(ps.getProperty(\"o2\")).isNull();\r\n}\n@Test\r\nvoid withRequiredArg_andMultipleArgsPresent_usingDelimiter() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    OptionSet options = parser.parse(\"--foo=bar,baz,biz\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getOptionValues(\"foo\")).containsExactly(\"bar\", \"baz\", \"biz\");\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar,baz,biz\");\r\n}\n@Test\r\nvoid withRequiredArg_andMultipleArgsPresent_usingRepeatedOption() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    OptionSet options = parser.parse(\"--foo=bar\", \"--foo=baz\", \"--foo=biz\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getOptionValues(\"foo\")).containsExactly(\"bar\", \"baz\", \"biz\");\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar,baz,biz\");\r\n}\n@Test\r\nvoid withMissingOption() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    // <-- no options whatsoever\r\n    OptionSet options = parser.parse();\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"foo\")).isNull();\r\n}\n@Test\r\nvoid withDottedOptionName() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"spring.profiles.active\").withRequiredArg();\r\n    OptionSet options = parser.parse(\"--spring.profiles.active=p1\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"spring.profiles.active\")).isEqualTo(\"p1\");\r\n}\n@Test\r\nvoid withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.acceptsAll(Arrays.asList(\"o1\", \"option1\")).withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"--o2\");\r\n    EnumerablePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isNull();\r\n    assertThat(ps.getPropertyNames()).hasSize(2);\r\n}\n@Test\r\nvoid withDefaultNonOptionArgsNameAndNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isEqualTo(\"noa1,noa2\");\r\n}\n@Test\r\nvoid withCustomNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    ps.setNonOptionArgsPropertyName(\"NOA\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"NOA\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    String nonOptionArgs = ps.getProperty(\"NOA\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n}\n@Test\r\nvoid withRequiredArg_ofTypeEnum() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg().ofType(OptionEnum.class);\r\n    OptionSet options = parser.parse(\"--o1=VAL_1\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"VAL_1\");\r\n}\npublic enum OptionEnum {\r\n\r\n    VAL_1\r\n}",
    "comment": "\n * Tests for {@link JOptCommandLinePropertySource}.\n *\n * @author Chris Beams\n * @author Sam Brannen\n * @since 3.1\n "
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_andArgIsPresent()",
    "entityType": "method",
    "code": "@Test\r\nvoid withRequiredArg_andArgIsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg();\r\n    OptionSet options = parser.parse(\"--foo=bar\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withOptionalArg_andArgIsMissing()",
    "entityType": "method",
    "code": "@Test\r\nvoid withOptionalArg_andArgIsMissing() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withOptionalArg();\r\n    OptionSet options = parser.parse(\"--foo\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"foo\")).isTrue();\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withOptionalArg_andArgIsEmpty()",
    "entityType": "method",
    "code": "// gh-24464\r\n@Test\r\nvoid withOptionalArg_andArgIsEmpty() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withOptionalArg();\r\n    OptionSet options = parser.parse(\"--foo=\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"foo\")).isTrue();\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withNoArg()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNoArg() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\");\r\n    parser.accepts(\"o2\");\r\n    OptionSet options = parser.parse(\"--o1\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isFalse();\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"\");\r\n    assertThat(ps.getProperty(\"o2\")).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_andMultipleArgsPresent_usingDelimiter()",
    "entityType": "method",
    "code": "@Test\r\nvoid withRequiredArg_andMultipleArgsPresent_usingDelimiter() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    OptionSet options = parser.parse(\"--foo=bar,baz,biz\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getOptionValues(\"foo\")).containsExactly(\"bar\", \"baz\", \"biz\");\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar,baz,biz\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_andMultipleArgsPresent_usingRepeatedOption()",
    "entityType": "method",
    "code": "@Test\r\nvoid withRequiredArg_andMultipleArgsPresent_usingRepeatedOption() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    OptionSet options = parser.parse(\"--foo=bar\", \"--foo=baz\", \"--foo=biz\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getOptionValues(\"foo\")).containsExactly(\"bar\", \"baz\", \"biz\");\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar,baz,biz\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withMissingOption()",
    "entityType": "method",
    "code": "@Test\r\nvoid withMissingOption() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"foo\").withRequiredArg().withValuesSeparatedBy(',');\r\n    // <-- no options whatsoever\r\n    OptionSet options = parser.parse();\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"foo\")).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDottedOptionName()",
    "entityType": "method",
    "code": "@Test\r\nvoid withDottedOptionName() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"spring.profiles.active\").withRequiredArg();\r\n    OptionSet options = parser.parse(\"--spring.profiles.active=p1\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"spring.profiles.active\")).isEqualTo(\"p1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "entityType": "method",
    "code": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.acceptsAll(Arrays.asList(\"o1\", \"option1\")).withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"--o2\");\r\n    EnumerablePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isNull();\r\n    assertThat(ps.getPropertyNames()).hasSize(2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "entityType": "method",
    "code": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isEqualTo(\"noa1,noa2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "entityType": "method",
    "code": "@Test\r\nvoid withCustomNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    ps.setNonOptionArgsPropertyName(\"NOA\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"NOA\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    String nonOptionArgs = ps.getProperty(\"NOA\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_ofTypeEnum()",
    "entityType": "method",
    "code": "@Test\r\nvoid withRequiredArg_ofTypeEnum() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg().ofType(OptionEnum.class);\r\n    OptionSet options = parser.parse(\"--o1=VAL_1\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"VAL_1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests",
    "entityType": "class",
    "code": "@Test\r\nvoid test() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"b\").withProperty(\"p1\", \"bValue\"));\r\n    sources.addLast(new MockPropertySource(\"d\").withProperty(\"p1\", \"dValue\"));\r\n    sources.addLast(new MockPropertySource(\"f\").withProperty(\"p1\", \"fValue\"));\r\n    assertThat(sources).hasSize(3);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.contains(\"b\")).isTrue();\r\n    assertThat(sources.contains(\"c\")).isFalse();\r\n    assertThat(sources.contains(\"d\")).isTrue();\r\n    assertThat(sources.contains(\"e\")).isFalse();\r\n    assertThat(sources.contains(\"f\")).isTrue();\r\n    assertThat(sources.contains(\"g\")).isFalse();\r\n    assertThat(sources.get(\"b\")).isNotNull();\r\n    assertThat(sources.get(\"b\").getProperty(\"p1\")).isEqualTo(\"bValue\");\r\n    assertThat(sources.get(\"d\")).isNotNull();\r\n    assertThat(sources.get(\"d\").getProperty(\"p1\")).isEqualTo(\"dValue\");\r\n    sources.addBefore(\"b\", new MockPropertySource(\"a\"));\r\n    sources.addAfter(\"b\", new MockPropertySource(\"c\"));\r\n    assertThat(sources).hasSize(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    sources.addBefore(\"f\", new MockPropertySource(\"e\"));\r\n    sources.addAfter(\"f\", new MockPropertySource(\"g\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    sources.addLast(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(6);\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    assertThat(PropertySource.named(\"a\")).isEqualTo(sources.remove(\"a\"));\r\n    assertThat(sources).hasSize(6);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.remove(\"a\")).isNull();\r\n    assertThat(sources).hasSize(6);\r\n    String bogusPS = \"bogus\";\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(bogusPS, new MockPropertySource(\"h\"))).withMessageContaining(\"does not exist\");\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a\", new MockPropertySource(\"a-replaced\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a-replaced\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a-replaced\", new MockPropertySource(\"a\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.replace(bogusPS, new MockPropertySource(\"bogus-replaced\"))).withMessageContaining(\"does not exist\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addBefore(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n}\n@Test\r\nvoid getNonExistentPropertySourceReturnsNull() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.get(\"bogus\")).isNull();\r\n}\n@Test\r\nvoid iteratorContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isTrue();\r\n    assertThat(it.next().getName()).isEqualTo(\"test\");\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(it::remove);\r\n    assertThat(it.hasNext()).isFalse();\r\n}\n@Test\r\nvoid iteratorIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isFalse();\r\n}\n@Test\r\nvoid streamContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(1L);\r\n    assertThat(sources.stream().anyMatch(source -> \"test\".equals(source.getName()))).isTrue();\r\n    assertThat(sources.stream().anyMatch(source -> \"bogus\".equals(source.getName()))).isFalse();\r\n}\n@Test\r\nvoid streamIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(0L);\r\n}",
    "comment": "\n * @author Chris Beams\n * @author Juergen Hoeller\n "
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#test()",
    "entityType": "method",
    "code": "@Test\r\nvoid test() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"b\").withProperty(\"p1\", \"bValue\"));\r\n    sources.addLast(new MockPropertySource(\"d\").withProperty(\"p1\", \"dValue\"));\r\n    sources.addLast(new MockPropertySource(\"f\").withProperty(\"p1\", \"fValue\"));\r\n    assertThat(sources).hasSize(3);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.contains(\"b\")).isTrue();\r\n    assertThat(sources.contains(\"c\")).isFalse();\r\n    assertThat(sources.contains(\"d\")).isTrue();\r\n    assertThat(sources.contains(\"e\")).isFalse();\r\n    assertThat(sources.contains(\"f\")).isTrue();\r\n    assertThat(sources.contains(\"g\")).isFalse();\r\n    assertThat(sources.get(\"b\")).isNotNull();\r\n    assertThat(sources.get(\"b\").getProperty(\"p1\")).isEqualTo(\"bValue\");\r\n    assertThat(sources.get(\"d\")).isNotNull();\r\n    assertThat(sources.get(\"d\").getProperty(\"p1\")).isEqualTo(\"dValue\");\r\n    sources.addBefore(\"b\", new MockPropertySource(\"a\"));\r\n    sources.addAfter(\"b\", new MockPropertySource(\"c\"));\r\n    assertThat(sources).hasSize(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    sources.addBefore(\"f\", new MockPropertySource(\"e\"));\r\n    sources.addAfter(\"f\", new MockPropertySource(\"g\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    sources.addLast(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(6);\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\r\n    assertThat(PropertySource.named(\"a\")).isEqualTo(sources.remove(\"a\"));\r\n    assertThat(sources).hasSize(6);\r\n    assertThat(sources.contains(\"a\")).isFalse();\r\n    assertThat(sources.remove(\"a\")).isNull();\r\n    assertThat(sources).hasSize(6);\r\n    String bogusPS = \"bogus\";\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(bogusPS, new MockPropertySource(\"h\"))).withMessageContaining(\"does not exist\");\r\n    sources.addFirst(new MockPropertySource(\"a\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a\", new MockPropertySource(\"a-replaced\"));\r\n    assertThat(sources).hasSize(7);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"a-replaced\"))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\r\n    assertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\r\n    sources.replace(\"a-replaced\", new MockPropertySource(\"a\"));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.replace(bogusPS, new MockPropertySource(\"bogus-replaced\"))).withMessageContaining(\"does not exist\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addBefore(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> sources.addAfter(\"b\", new MockPropertySource(\"b\"))).withMessageContaining(\"cannot be added relative to itself\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#getNonExistentPropertySourceReturnsNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid getNonExistentPropertySourceReturnsNull() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.get(\"bogus\")).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#iteratorContainsPropertySource()",
    "entityType": "method",
    "code": "@Test\r\nvoid iteratorContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isTrue();\r\n    assertThat(it.next().getName()).isEqualTo(\"test\");\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(it::remove);\r\n    assertThat(it.hasNext()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#iteratorIsEmptyForEmptySources()",
    "entityType": "method",
    "code": "@Test\r\nvoid iteratorIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    Iterator<PropertySource<?>> it = sources.iterator();\r\n    assertThat(it.hasNext()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#streamContainsPropertySource()",
    "entityType": "method",
    "code": "@Test\r\nvoid streamContainsPropertySource() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    sources.addLast(new MockPropertySource(\"test\"));\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(1L);\r\n    assertThat(sources.stream().anyMatch(source -> \"test\".equals(source.getName()))).isTrue();\r\n    assertThat(sources.stream().anyMatch(source -> \"bogus\".equals(source.getName()))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.MutablePropertySourcesTests#streamIsEmptyForEmptySources()",
    "entityType": "method",
    "code": "@Test\r\nvoid streamIsEmptyForEmptySources() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    assertThat(sources.stream()).isNotNull();\r\n    assertThat(sources.stream().count()).isEqualTo(0L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests",
    "entityType": "class",
    "code": "@Test\r\nvoid ofWhenNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of((String[]) null)).withMessage(\"Must specify at least one profile expression\");\r\n}\n@Test\r\nvoid ofWhenEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(Profiles::of).withMessage(\"Must specify at least one profile expression\");\r\n}\n@Test\r\nvoid ofNullElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of((String) null)).withMessage(\"Invalid profile expression [null]: must contain text\");\r\n}\n@Test\r\nvoid ofEmptyElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of(\"  \")).withMessage(\"Invalid profile expression [  ]: must contain text\");\r\n}\n@Test\r\nvoid ofSingleElement() {\r\n    Profiles profiles = Profiles.of(\"spring\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n}\n@Test\r\nvoid ofSingleInvertedElement() {\r\n    Profiles profiles = Profiles.of(\"!spring\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}\n@Test\r\nvoid ofMultipleElements() {\r\n    Profiles profiles = Profiles.of(\"spring\", \"framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}\n@Test\r\nvoid ofMultipleElementsWithInverted() {\r\n    Profiles profiles = Profiles.of(\"!spring\", \"framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}\n@Test\r\nvoid ofMultipleElementsAllInverted() {\r\n    Profiles profiles = Profiles.of(\"!spring\", \"!framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\", \"java\"))).isFalse();\r\n}\n@Test\r\nvoid ofSingleExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n}\n@Test\r\nvoid ofSingleExpressionInverted() {\r\n    Profiles profiles = Profiles.of(\"!(spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}\n@Test\r\nvoid ofSingleInvertedExpression() {\r\n    Profiles profiles = Profiles.of(\"(!spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}\n@Test\r\nvoid ofOrExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring | framework)\");\r\n    assertOrExpression(profiles);\r\n}\n@Test\r\nvoid ofOrExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"(spring|framework)\");\r\n    assertOrExpression(profiles);\r\n}\nprivate void assertOrExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}\n@Test\r\nvoid ofAndExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring & framework)\");\r\n    assertAndExpression(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"spring&framework)\");\r\n    assertAndExpression(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithoutParentheses() {\r\n    Profiles profiles = Profiles.of(\"spring & framework\");\r\n    assertAndExpression(profiles);\r\n}\nprivate void assertAndExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}\n@Test\r\nvoid ofNotAndExpression() {\r\n    Profiles profiles = Profiles.of(\"!(spring & framework)\");\r\n    assertOfNotAndExpression(profiles);\r\n}\n@Test\r\nvoid ofNotAndExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring&framework)\");\r\n    assertOfNotAndExpression(profiles);\r\n}\nprivate void assertOfNotAndExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}\n@Test\r\nvoid ofAndExpressionWithInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"!spring & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithInBracketsInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"(!spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBrackets() {\r\n    Profiles profiles = Profiles.of(\"! (spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring)&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}\n@Test\r\nvoid ofAndExpressionWithInvertedSingleElementWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!spring&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}\nprivate void assertOfAndExpressionWithInvertedSingleElement(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n}\n@Test\r\nvoid ofOrExpressionWithInvertedSingleElementWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!spring|framework\");\r\n    assertOfOrExpressionWithInvertedSingleElement(profiles);\r\n}\nprivate void assertOfOrExpressionWithInvertedSingleElement(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n}\n@Test\r\nvoid ofNotOrExpression() {\r\n    Profiles profiles = Profiles.of(\"!(spring | framework)\");\r\n    assertOfNotOrExpression(profiles);\r\n}\n@Test\r\nvoid ofNotOrExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring|framework)\");\r\n    assertOfNotOrExpression(profiles);\r\n}\nprivate void assertOfNotOrExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}\n@Test\r\nvoid ofComplexExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring & framework) | (spring & java)\");\r\n    assertComplexExpression(profiles);\r\n}\n@Test\r\nvoid ofComplexExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"(spring&framework)|(spring&java)\");\r\n    assertComplexExpression(profiles);\r\n}\n@Test\r\nvoid ofComplexExpressionEnclosedInParentheses() {\r\n    Profiles profiles = Profiles.of(\"((spring & framework) | (spring & java))\");\r\n    assertComplexExpression(profiles);\r\n}\nprivate void assertComplexExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\", \"framework\"))).isFalse();\r\n}\n@Test\r\nvoid malformedExpressions() {\r\n    assertMalformed(() -> Profiles.of(\"(\"));\r\n    assertMalformed(() -> Profiles.of(\")\"));\r\n    assertMalformed(() -> Profiles.of(\"a & b | c\"));\r\n}\n@Test\r\nvoid sensibleToString() {\r\n    assertThat(Profiles.of(\"spring\")).hasToString(\"spring\");\r\n    assertThat(Profiles.of(\"(spring & framework) | (spring & java)\")).hasToString(\"(spring & framework) | (spring & java)\");\r\n    assertThat(Profiles.of(\"(spring&framework)|(spring&java)\")).hasToString(\"(spring&framework)|(spring&java)\");\r\n    assertThat(Profiles.of(\"spring & framework\", \"java | kotlin\")).hasToString(\"(spring & framework) | (java | kotlin)\");\r\n    assertThat(Profiles.of(\"java | kotlin\", \"spring & framework\")).hasToString(\"(java | kotlin) | (spring & framework)\");\r\n    assertThat(Profiles.of(\"java | kotlin\", \"spring & framework\", \"cat | dog\")).hasToString(\"(java | kotlin) | (spring & framework) | (cat | dog)\");\r\n}\n@Test\r\nvoid toStringGeneratesValidCompositeProfileExpression() {\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"(spring & kotlin) | (spring & java)\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring & kotlin\", \"spring & java\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring & kotlin\", \"spring & java\", \"cat | dog\");\r\n}\nprivate static void assertThatToStringGeneratesValidCompositeProfileExpression(String... profileExpressions) {\r\n    Profiles profiles = Profiles.of(profileExpressions);\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"kotlin\"))).isFalse();\r\n    Profiles compositeProfiles = Profiles.of(profiles.toString());\r\n    assertThat(compositeProfiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(compositeProfiles.matches(activeProfiles(\"kotlin\"))).isFalse();\r\n}\n@Test\r\nvoid sensibleEquals() {\r\n    assertEqual(\"(spring & framework) | (spring & java)\");\r\n    assertEqual(\"(spring&framework)|(spring&java)\");\r\n    assertEqual(\"spring & framework\", \"java | kotlin\");\r\n    // Ensure order of individual expressions does not affect equals().\r\n    String expression1 = \"A | B\";\r\n    String expression2 = \"C & (D | E)\";\r\n    Profiles profiles1 = Profiles.of(expression1, expression2);\r\n    Profiles profiles2 = Profiles.of(expression2, expression1);\r\n    assertThat(profiles1).isEqualTo(profiles2);\r\n    assertThat(profiles2).isEqualTo(profiles1);\r\n}\nprivate void assertEqual(String... expressions) {\r\n    Profiles profiles1 = Profiles.of(expressions);\r\n    Profiles profiles2 = Profiles.of(expressions);\r\n    assertThat(profiles1).isEqualTo(profiles2);\r\n    assertThat(profiles2).isEqualTo(profiles1);\r\n}\n@Test\r\nvoid sensibleHashCode() {\r\n    assertHashCode(\"(spring & framework) | (spring & java)\");\r\n    assertHashCode(\"(spring&framework)|(spring&java)\");\r\n    assertHashCode(\"spring & framework\", \"java | kotlin\");\r\n    // Ensure order of individual expressions does not affect hashCode().\r\n    String expression1 = \"A | B\";\r\n    String expression2 = \"C & (D | E)\";\r\n    Profiles profiles1 = Profiles.of(expression1, expression2);\r\n    Profiles profiles2 = Profiles.of(expression2, expression1);\r\n    assertThat(profiles1).hasSameHashCodeAs(profiles2);\r\n}\nprivate void assertHashCode(String... expressions) {\r\n    Profiles profiles1 = Profiles.of(expressions);\r\n    Profiles profiles2 = Profiles.of(expressions);\r\n    assertThat(profiles1).hasSameHashCodeAs(profiles2);\r\n}\n@Test\r\nvoid equalsAndHashCodeAreNotBasedOnLogicalStructureOfNodesWithinExpressionTree() {\r\n    Profiles profiles1 = Profiles.of(\"A | B\");\r\n    Profiles profiles2 = Profiles.of(\"B | A\");\r\n    assertThat(profiles1.matches(activeProfiles(\"A\"))).isTrue();\r\n    assertThat(profiles1.matches(activeProfiles(\"B\"))).isTrue();\r\n    assertThat(profiles2.matches(activeProfiles(\"A\"))).isTrue();\r\n    assertThat(profiles2.matches(activeProfiles(\"B\"))).isTrue();\r\n    assertThat(profiles1).isNotEqualTo(profiles2);\r\n    assertThat(profiles2).isNotEqualTo(profiles1);\r\n    assertThat(profiles1.hashCode()).isNotEqualTo(profiles2.hashCode());\r\n}\nprivate static void assertMalformed(Supplier<Profiles> supplier) {\r\n    assertThatIllegalArgumentException().isThrownBy(supplier::get).withMessageStartingWith(\"Malformed profile expression\");\r\n}\nprivate static Predicate<String> activeProfiles(String... profiles) {\r\n    return new MockActiveProfiles(profiles);\r\n}\nprivate static class MockActiveProfiles implements Predicate<String> {\r\n\r\n    private final List<String> activeProfiles;\r\n\r\n    MockActiveProfiles(String[] activeProfiles) {\r\n        this.activeProfiles = Arrays.asList(activeProfiles);\r\n    }\r\n\r\n    @Override\r\n    public boolean test(String profile) {\r\n        // The following if-condition (which basically mimics\r\n        // AbstractEnvironment#validateProfile(String)) is necessary in order\r\n        // to ensure that the Profiles implementation returned by Profiles.of()\r\n        // never passes an invalid (parsed) profile name to the active profiles\r\n        // predicate supplied to Profiles#matches(Predicate<String>).\r\n        if (!StringUtils.hasText(profile) || profile.charAt(0) == '!') {\r\n            throw new IllegalArgumentException(\"Invalid profile [\" + profile + \"]\");\r\n        }\r\n        return this.activeProfiles.contains(profile);\r\n    }\r\n}",
    "comment": "\n * Tests for {@link Profiles}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 5.1\n "
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofWhenNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofWhenNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of((String[]) null)).withMessage(\"Must specify at least one profile expression\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofWhenEmptyThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofWhenEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(Profiles::of).withMessage(\"Must specify at least one profile expression\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofNullElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofNullElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of((String) null)).withMessage(\"Invalid profile expression [null]: must contain text\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofEmptyElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofEmptyElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Profiles.of(\"  \")).withMessage(\"Invalid profile expression [  ]: must contain text\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofSingleElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofSingleElement() {\r\n    Profiles profiles = Profiles.of(\"spring\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofSingleInvertedElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofSingleInvertedElement() {\r\n    Profiles profiles = Profiles.of(\"!spring\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofMultipleElements()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofMultipleElements() {\r\n    Profiles profiles = Profiles.of(\"spring\", \"framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofMultipleElementsWithInverted()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofMultipleElementsWithInverted() {\r\n    Profiles profiles = Profiles.of(\"!spring\", \"framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofMultipleElementsAllInverted()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofMultipleElementsAllInverted() {\r\n    Profiles profiles = Profiles.of(\"!spring\", \"!framework\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\", \"java\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofSingleExpression()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofSingleExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofSingleExpressionInverted()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofSingleExpressionInverted() {\r\n    Profiles profiles = Profiles.of(\"!(spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofSingleInvertedExpression()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofSingleInvertedExpression() {\r\n    Profiles profiles = Profiles.of(\"(!spring)\");\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofOrExpression()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofOrExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring | framework)\");\r\n    assertOrExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofOrExpressionWithoutSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofOrExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"(spring|framework)\");\r\n    assertOrExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#assertOrExpression(Profiles)",
    "entityType": "method",
    "code": "private void assertOrExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpression()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpression() {\r\n    Profiles profiles = Profiles.of(\"(spring & framework)\");\r\n    assertAndExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithoutSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"spring&framework)\");\r\n    assertAndExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithoutParentheses()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithoutParentheses() {\r\n    Profiles profiles = Profiles.of(\"spring & framework\");\r\n    assertAndExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#assertAndExpression(Profiles)",
    "entityType": "method",
    "code": "private void assertAndExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofNotAndExpression()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofNotAndExpression() {\r\n    Profiles profiles = Profiles.of(\"!(spring & framework)\");\r\n    assertOfNotAndExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofNotAndExpressionWithoutSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofNotAndExpressionWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring&framework)\");\r\n    assertOfNotAndExpression(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#assertOfNotAndExpression(Profiles)",
    "entityType": "method",
    "code": "private void assertOfNotAndExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"!spring & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInBracketsInvertedSingleElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithInBracketsInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"(!spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBrackets()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBrackets() {\r\n    Profiles profiles = Profiles.of(\"! (spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring)&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementWithoutSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!spring&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "comment": ""
  }
]