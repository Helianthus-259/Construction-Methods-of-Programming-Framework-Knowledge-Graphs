[
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    target.visitAttribute(attr);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\r\n    target.visitInnerClass(name, outerName, innerName, access);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\r\n    return target.visitField(access, name, desc, signature, value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
    "entityType": "method",
    "code": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return target.visitMethod(access, name, desc, signature, exceptions);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnd() {\r\n    target.visitEnd();\r\n    // just to be safe\r\n    target = null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader",
    "entityType": "class",
    "code": "private ClassFilter filter;\nprivate ClassLoader classPath;\nprivate static java.security.ProtectionDomain DOMAIN;\nstatic {\r\n    DOMAIN = AbstractClassLoader.class.getProtectionDomain();\r\n}\nprotected AbstractClassLoader(ClassLoader parent, ClassLoader classPath, ClassFilter filter) {\r\n    super(parent);\r\n    this.filter = filter;\r\n    this.classPath = classPath;\r\n}\n@Override\r\npublic Class loadClass(String name) throws ClassNotFoundException {\r\n    Class loaded = findLoadedClass(name);\r\n    if (loaded != null) {\r\n        if (loaded.getClassLoader() == this) {\r\n            return loaded;\r\n        }\r\n        //else reload with this class loader\r\n    }\r\n    if (!filter.accept(name)) {\r\n        return super.loadClass(name);\r\n    }\r\n    ClassReader r;\r\n    try {\r\n        java.io.InputStream is = classPath.getResourceAsStream(name.replace('.', '/') + \".class\");\r\n        if (is == null) {\r\n            throw new ClassNotFoundException(name);\r\n        }\r\n        try {\r\n            r = new ClassReader(is);\r\n        } finally {\r\n            is.close();\r\n        }\r\n    } catch (IOException e) {\r\n        throw new ClassNotFoundException(name + \":\" + e.getMessage());\r\n    }\r\n    try {\r\n        DebuggingClassWriter w = new DebuggingClassWriter(ClassWriter.COMPUTE_FRAMES);\r\n        getGenerator(r).generateClass(w);\r\n        byte[] b = w.toByteArray();\r\n        Class c = super.defineClass(name, b, 0, b.length, DOMAIN);\r\n        postProcess(c);\r\n        return c;\r\n    } catch (RuntimeException | Error e) {\r\n        throw e;\r\n    } catch (Exception e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}\nprotected ClassGenerator getGenerator(ClassReader r) {\r\n    return new ClassReaderGenerator(r, attributes(), getFlags());\r\n}\nprotected int getFlags() {\r\n    return 0;\r\n}\nprotected Attribute[] attributes() {\r\n    return null;\r\n}\nprotected void postProcess(Class c) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
    "entityType": "method",
    "code": "@Override\r\npublic Class loadClass(String name) throws ClassNotFoundException {\r\n    Class loaded = findLoadedClass(name);\r\n    if (loaded != null) {\r\n        if (loaded.getClassLoader() == this) {\r\n            return loaded;\r\n        }\r\n        //else reload with this class loader\r\n    }\r\n    if (!filter.accept(name)) {\r\n        return super.loadClass(name);\r\n    }\r\n    ClassReader r;\r\n    try {\r\n        java.io.InputStream is = classPath.getResourceAsStream(name.replace('.', '/') + \".class\");\r\n        if (is == null) {\r\n            throw new ClassNotFoundException(name);\r\n        }\r\n        try {\r\n            r = new ClassReader(is);\r\n        } finally {\r\n            is.close();\r\n        }\r\n    } catch (IOException e) {\r\n        throw new ClassNotFoundException(name + \":\" + e.getMessage());\r\n    }\r\n    try {\r\n        DebuggingClassWriter w = new DebuggingClassWriter(ClassWriter.COMPUTE_FRAMES);\r\n        getGenerator(r).generateClass(w);\r\n        byte[] b = w.toByteArray();\r\n        Class c = super.defineClass(name, b, 0, b.length, DOMAIN);\r\n        postProcess(c);\r\n        return c;\r\n    } catch (RuntimeException | Error e) {\r\n        throw e;\r\n    } catch (Exception e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
    "entityType": "method",
    "code": "protected ClassGenerator getGenerator(ClassReader r) {\r\n    return new ClassReaderGenerator(r, attributes(), getFlags());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader#getFlags()",
    "entityType": "method",
    "code": "protected int getFlags() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
    "entityType": "method",
    "code": "protected Attribute[] attributes() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
    "entityType": "method",
    "code": "protected void postProcess(Class c) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassTransformer",
    "entityType": "class",
    "code": "protected AbstractClassTransformer() {\r\n    super(Constants.ASM_API);\r\n}\n@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = target;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AbstractClassTransformer#setTarget(ClassVisitor)",
    "entityType": "method",
    "code": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = target;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee",
    "entityType": "class",
    "code": "private AnnotationVisitor av1, av2;\npublic static AnnotationVisitor getInstance(AnnotationVisitor av1, AnnotationVisitor av2) {\r\n    if (av1 == null) {\r\n        return av2;\r\n    }\r\n    if (av2 == null) {\r\n        return av1;\r\n    }\r\n    return new AnnotationVisitorTee(av1, av2);\r\n}\npublic AnnotationVisitorTee(AnnotationVisitor av1, AnnotationVisitor av2) {\r\n    super(Constants.ASM_API);\r\n    this.av1 = av1;\r\n    this.av2 = av2;\r\n}\n@Override\r\npublic void visit(String name, Object value) {\r\n    av2.visit(name, value);\r\n    av2.visit(name, value);\r\n}\n@Override\r\npublic void visitEnum(String name, String desc, String value) {\r\n    av1.visitEnum(name, desc, value);\r\n    av2.visitEnum(name, desc, value);\r\n}\n@Override\r\npublic AnnotationVisitor visitAnnotation(String name, String desc) {\r\n    return getInstance(av1.visitAnnotation(name, desc), av2.visitAnnotation(name, desc));\r\n}\n@Override\r\npublic AnnotationVisitor visitArray(String name) {\r\n    return getInstance(av1.visitArray(name), av2.visitArray(name));\r\n}\n@Override\r\npublic void visitEnd() {\r\n    av1.visitEnd();\r\n    av2.visitEnd();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#getInstance(AnnotationVisitor,AnnotationVisitor)",
    "entityType": "method",
    "code": "public static AnnotationVisitor getInstance(AnnotationVisitor av1, AnnotationVisitor av2) {\r\n    if (av1 == null) {\r\n        return av2;\r\n    }\r\n    if (av2 == null) {\r\n        return av1;\r\n    }\r\n    return new AnnotationVisitorTee(av1, av2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#visit(String,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic void visit(String name, Object value) {\r\n    av2.visit(name, value);\r\n    av2.visit(name, value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnum(String,String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnum(String name, String desc, String value) {\r\n    av1.visitEnum(name, desc, value);\r\n    av2.visitEnum(name, desc, value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#visitAnnotation(String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitAnnotation(String name, String desc) {\r\n    return getInstance(av1.visitAnnotation(name, desc), av2.visitAnnotation(name, desc));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#visitArray(String)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitArray(String name) {\r\n    return getInstance(av1.visitArray(name), av2.visitArray(name));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.AnnotationVisitorTee#visitEnd()",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnd() {\r\n    av1.visitEnd();\r\n    av2.visitEnd();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassEmitterTransformer",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassFilter",
    "entityType": "class",
    "code": "boolean accept(String className);",
    "comment": "\n *\n * @author  baliuka\n "
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassFilter#accept(String)",
    "entityType": "method",
    "code": "boolean accept(String className);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassFilterTransformer",
    "entityType": "class",
    "code": "private ClassFilter filter;\npublic ClassFilterTransformer(ClassFilter filter, ClassTransformer pass) {\r\n    super(pass);\r\n    this.filter = filter;\r\n}\n@Override\r\nprotected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    return filter.accept(name.replace('/', '.'));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "entityType": "method",
    "code": "@Override\r\nprotected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    return filter.accept(name.replace('/', '.'));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassReaderGenerator",
    "entityType": "class",
    "code": "private final ClassReader r;\nprivate final Attribute[] attrs;\nprivate final int flags;\npublic ClassReaderGenerator(ClassReader r, int flags) {\r\n    this(r, null, flags);\r\n}\npublic ClassReaderGenerator(ClassReader r, Attribute[] attrs, int flags) {\r\n    this.r = r;\r\n    this.attrs = (attrs != null) ? attrs : new Attribute[0];\r\n    this.flags = flags;\r\n}\n@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    r.accept(v, attrs, flags);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
    "entityType": "method",
    "code": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    r.accept(v, attrs, flags);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerChain",
    "entityType": "class",
    "code": "private ClassTransformer[] chain;\npublic ClassTransformerChain(ClassTransformer[] chain) {\r\n    this.chain = chain.clone();\r\n}\n@Override\r\npublic void setTarget(ClassVisitor v) {\r\n    super.setTarget(chain[0]);\r\n    ClassVisitor next = v;\r\n    for (int i = chain.length - 1; i >= 0; i--) {\r\n        chain[i].setTarget(next);\r\n        next = chain[i];\r\n    }\r\n}\n@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return cv.visitMethod(access, name, desc, signature, exceptions);\r\n}\n@Override\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ClassTransformerChain{\");\r\n    for (int i = 0; i < chain.length; i++) {\r\n        if (i > 0) {\r\n            sb.append(\", \");\r\n        }\r\n        sb.append(chain[i].toString());\r\n    }\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
    "entityType": "method",
    "code": "@Override\r\npublic void setTarget(ClassVisitor v) {\r\n    super.setTarget(chain[0]);\r\n    ClassVisitor next = v;\r\n    for (int i = chain.length - 1; i >= 0; i--) {\r\n        chain[i].setTarget(next);\r\n        next = chain[i];\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
    "entityType": "method",
    "code": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return cv.visitMethod(access, name, desc, signature, exceptions);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ClassTransformerChain{\");\r\n    for (int i = 0; i < chain.length; i++) {\r\n        if (i > 0) {\r\n            sb.append(\", \");\r\n        }\r\n        sb.append(chain[i].toString());\r\n    }\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerFactory",
    "entityType": "class",
    "code": "ClassTransformer newInstance();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
    "entityType": "method",
    "code": "ClassTransformer newInstance();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerTee",
    "entityType": "class",
    "code": "private ClassVisitor branch;\npublic ClassTransformerTee(ClassVisitor branch) {\r\n    super(Constants.ASM_API);\r\n    this.branch = branch;\r\n}\n@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = new ClassVisitorTee(branch, target);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
    "entityType": "method",
    "code": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = new ClassVisitorTee(branch, target);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee",
    "entityType": "class",
    "code": "private ClassVisitor cv1, cv2;\npublic ClassVisitorTee(ClassVisitor cv1, ClassVisitor cv2) {\r\n    super(Constants.ASM_API);\r\n    this.cv1 = cv1;\r\n    this.cv2 = cv2;\r\n}\n@Override\r\npublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    cv1.visit(version, access, name, signature, superName, interfaces);\r\n    cv2.visit(version, access, name, signature, superName, interfaces);\r\n}\n@Override\r\npublic void visitEnd() {\r\n    cv1.visitEnd();\r\n    cv2.visitEnd();\r\n    cv1 = cv2 = null;\r\n}\n@Override\r\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\r\n    cv1.visitInnerClass(name, outerName, innerName, access);\r\n    cv2.visitInnerClass(name, outerName, innerName, access);\r\n}\n@Override\r\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\r\n    FieldVisitor fv1 = cv1.visitField(access, name, desc, signature, value);\r\n    FieldVisitor fv2 = cv2.visitField(access, name, desc, signature, value);\r\n    if (fv1 == null) {\r\n        return fv2;\r\n    }\r\n    if (fv2 == null) {\r\n        return fv1;\r\n    }\r\n    return new FieldVisitorTee(fv1, fv2);\r\n}\n@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    MethodVisitor mv1 = cv1.visitMethod(access, name, desc, signature, exceptions);\r\n    MethodVisitor mv2 = cv2.visitMethod(access, name, desc, signature, exceptions);\r\n    if (mv1 == null) {\r\n        return mv2;\r\n    }\r\n    if (mv2 == null) {\r\n        return mv1;\r\n    }\r\n    return new MethodVisitorTee(mv1, mv2);\r\n}\n@Override\r\npublic void visitSource(String source, String debug) {\r\n    cv1.visitSource(source, debug);\r\n    cv2.visitSource(source, debug);\r\n}\n@Override\r\npublic void visitOuterClass(String owner, String name, String desc) {\r\n    cv1.visitOuterClass(owner, name, desc);\r\n    cv2.visitOuterClass(owner, name, desc);\r\n}\n@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitAnnotation(desc, visible), cv2.visitAnnotation(desc, visible));\r\n}\n@Override\r\npublic void visitAttribute(Attribute attrs) {\r\n    cv1.visitAttribute(attrs);\r\n    cv2.visitAttribute(attrs);\r\n}\n@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitTypeAnnotation(typeRef, typePath, desc, visible), cv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
    "entityType": "method",
    "code": "@Override\r\npublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    cv1.visit(version, access, name, signature, superName, interfaces);\r\n    cv2.visit(version, access, name, signature, superName, interfaces);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnd() {\r\n    cv1.visitEnd();\r\n    cv2.visitEnd();\r\n    cv1 = cv2 = null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\r\n    cv1.visitInnerClass(name, outerName, innerName, access);\r\n    cv2.visitInnerClass(name, outerName, innerName, access);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\r\n    FieldVisitor fv1 = cv1.visitField(access, name, desc, signature, value);\r\n    FieldVisitor fv2 = cv2.visitField(access, name, desc, signature, value);\r\n    if (fv1 == null) {\r\n        return fv2;\r\n    }\r\n    if (fv2 == null) {\r\n        return fv1;\r\n    }\r\n    return new FieldVisitorTee(fv1, fv2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
    "entityType": "method",
    "code": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    MethodVisitor mv1 = cv1.visitMethod(access, name, desc, signature, exceptions);\r\n    MethodVisitor mv2 = cv2.visitMethod(access, name, desc, signature, exceptions);\r\n    if (mv1 == null) {\r\n        return mv2;\r\n    }\r\n    if (mv2 == null) {\r\n        return mv1;\r\n    }\r\n    return new MethodVisitorTee(mv1, mv2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitSource(String source, String debug) {\r\n    cv1.visitSource(source, debug);\r\n    cv2.visitSource(source, debug);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitOuterClass(String owner, String name, String desc) {\r\n    cv1.visitOuterClass(owner, name, desc);\r\n    cv2.visitOuterClass(owner, name, desc);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitAnnotation(desc, visible), cv2.visitAnnotation(desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitAttribute(Attribute attrs) {\r\n    cv1.visitAttribute(attrs);\r\n    cv2.visitAttribute(attrs);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitTypeAnnotation(typeRef, typePath, desc, visible), cv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.FieldVisitorTee",
    "entityType": "class",
    "code": "private FieldVisitor fv1, fv2;\npublic FieldVisitorTee(FieldVisitor fv1, FieldVisitor fv2) {\r\n    super(Constants.ASM_API);\r\n    this.fv1 = fv1;\r\n    this.fv2 = fv2;\r\n}\n@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitAnnotation(desc, visible), fv2.visitAnnotation(desc, visible));\r\n}\n@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    fv1.visitAttribute(attr);\r\n    fv2.visitAttribute(attr);\r\n}\n@Override\r\npublic void visitEnd() {\r\n    fv1.visitEnd();\r\n    fv2.visitEnd();\r\n}\n@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitTypeAnnotation(typeRef, typePath, desc, visible), fv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitAnnotation(desc, visible), fv2.visitAnnotation(desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
    "entityType": "method",
    "code": "@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    fv1.visitAttribute(attr);\r\n    fv2.visitAttribute(attr);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
    "entityType": "method",
    "code": "@Override\r\npublic void visitEnd() {\r\n    fv1.visitEnd();\r\n    fv2.visitEnd();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitTypeAnnotation(typeRef, typePath, desc, visible), fv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "entityType": "class",
    "code": "@Override\r\npublic int writeInt(Object obj, String name, int oldValue, int newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic char writeChar(Object obj, String name, char oldValue, char newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic byte writeByte(Object obj, String name, byte oldValue, byte newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic short writeShort(Object obj, String name, short oldValue, short newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic float writeFloat(Object obj, String name, float oldValue, float newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic double writeDouble(Object obj, String name, double oldValue, double newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic long writeLong(Object obj, String name, long oldValue, long newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic Object writeObject(Object obj, String name, Object oldValue, Object newValue) {\r\n    return newValue;\r\n}\n@Override\r\npublic int readInt(Object obj, String name, int oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic char readChar(Object obj, String name, char oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic byte readByte(Object obj, String name, byte oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic boolean readBoolean(Object obj, String name, boolean oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic short readShort(Object obj, String name, short oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic float readFloat(Object obj, String name, float oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic double readDouble(Object obj, String name, double oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic long readLong(Object obj, String name, long oldValue) {\r\n    return oldValue;\r\n}\n@Override\r\npublic Object readObject(Object obj, String name, Object oldValue) {\r\n    return oldValue;\r\n}",
    "comment": "\n * @author Chris Nokleberg\n "
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
    "entityType": "method",
    "code": "@Override\r\npublic int writeInt(Object obj, String name, int oldValue, int newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
    "entityType": "method",
    "code": "@Override\r\npublic char writeChar(Object obj, String name, char oldValue, char newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "entityType": "method",
    "code": "@Override\r\npublic byte writeByte(Object obj, String name, byte oldValue, byte newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeShort(Object,String,short,short)",
    "entityType": "method",
    "code": "@Override\r\npublic short writeShort(Object obj, String name, short oldValue, short newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeFloat(Object,String,float,float)",
    "entityType": "method",
    "code": "@Override\r\npublic float writeFloat(Object obj, String name, float oldValue, float newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeDouble(Object,String,double,double)",
    "entityType": "method",
    "code": "@Override\r\npublic double writeDouble(Object obj, String name, double oldValue, double newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeLong(Object,String,long,long)",
    "entityType": "method",
    "code": "@Override\r\npublic long writeLong(Object obj, String name, long oldValue, long newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeObject(Object,String,Object,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic Object writeObject(Object obj, String name, Object oldValue, Object newValue) {\r\n    return newValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readInt(Object,String,int)",
    "entityType": "method",
    "code": "@Override\r\npublic int readInt(Object obj, String name, int oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readChar(Object,String,char)",
    "entityType": "method",
    "code": "@Override\r\npublic char readChar(Object obj, String name, char oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readByte(Object,String,byte)",
    "entityType": "method",
    "code": "@Override\r\npublic byte readByte(Object obj, String name, byte oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readBoolean(Object,String,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean readBoolean(Object obj, String name, boolean oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readShort(Object,String,short)",
    "entityType": "method",
    "code": "@Override\r\npublic short readShort(Object obj, String name, short oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readFloat(Object,String,float)",
    "entityType": "method",
    "code": "@Override\r\npublic float readFloat(Object obj, String name, float oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readDouble(Object,String,double)",
    "entityType": "method",
    "code": "@Override\r\npublic double readDouble(Object obj, String name, double oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readLong(Object,String,long)",
    "entityType": "method",
    "code": "@Override\r\npublic long readLong(Object obj, String name, long oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#readObject(Object,String,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic Object readObject(Object obj, String name, Object oldValue) {\r\n    return oldValue;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AccessFieldTransformer",
    "entityType": "class",
    "code": "private Callback callback;\npublic AccessFieldTransformer(Callback callback) {\r\n    this.callback = callback;\r\n}\npublic interface Callback {\r\n\r\n    String getPropertyName(Type owner, String fieldName);\r\n}\n@Override\r\npublic void declare_field(int access, final String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    String property = TypeUtils.upperFirst(callback.getPropertyName(getClassType(), name));\r\n    if (property != null) {\r\n        CodeEmitter e;\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"get\" + property, type, Constants.TYPES_EMPTY), null);\r\n        e.load_this();\r\n        e.getfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"set\" + property, Type.VOID_TYPE, new Type[] { type }), null);\r\n        e.load_this();\r\n        e.load_arg(0);\r\n        e.putfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AccessFieldTransformer#declare_field(int,String,Type,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic void declare_field(int access, final String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    String property = TypeUtils.upperFirst(callback.getPropertyName(getClassType(), name));\r\n    if (property != null) {\r\n        CodeEmitter e;\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"get\" + property, type, Constants.TYPES_EMPTY), null);\r\n        e.load_this();\r\n        e.getfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n        e = begin_method(Constants.ACC_PUBLIC, new Signature(\"set\" + property, Type.VOID_TYPE, new Type[] { type }), null);\r\n        e.load_this();\r\n        e.load_arg(0);\r\n        e.putfield(name);\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.Callback",
    "entityType": "class",
    "code": "String getPropertyName(Type owner, String fieldName);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.Callback#getPropertyName(Type,String)",
    "entityType": "method",
    "code": "String getPropertyName(Type owner, String fieldName);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "entityType": "class",
    "code": "private static final String DELEGATE = \"$CGLIB_DELEGATE\";\nprivate static final Signature CSTRUCT_OBJECT = TypeUtils.parseSignature(\"void <init>(Object)\");\nprivate Class[] delegateIf;\nprivate Class delegateImpl;\nprivate Type delegateType;\n/**\r\n * Creates a new instance of AddDelegateTransformer\r\n */\r\npublic AddDelegateTransformer(Class[] delegateIf, Class delegateImpl) {\r\n    try {\r\n        delegateImpl.getConstructor(new Class[] { Object.class });\r\n        this.delegateIf = delegateIf;\r\n        this.delegateImpl = delegateImpl;\r\n        delegateType = Type.getType(delegateImpl);\r\n    } catch (NoSuchMethodException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}\n@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        Type[] all = TypeUtils.add(interfaces, TypeUtils.getTypes(delegateIf));\r\n        super.begin_class(version, access, className, superType, all, sourceFile);\r\n        declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null);\r\n        for (Class element : delegateIf) {\r\n            Method[] methods = element.getMethods();\r\n            for (Method method : methods) {\r\n                if (Modifier.isAbstract(method.getModifiers())) {\r\n                    addDelegate(method);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n    }\r\n}\n@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter e = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(e) {\r\n\r\n            private boolean transformInit = true;\r\n\r\n            @Override\r\n            public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\r\n                super.visitMethodInsn(opcode, owner, name, desc, itf);\r\n                if (transformInit && opcode == Constants.INVOKESPECIAL) {\r\n                    load_this();\r\n                    new_instance(delegateType);\r\n                    dup();\r\n                    load_this();\r\n                    invoke_constructor(delegateType, CSTRUCT_OBJECT);\r\n                    putfield(DELEGATE);\r\n                    transformInit = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    return e;\r\n}\nprivate void addDelegate(Method m) {\r\n    Method delegate;\r\n    try {\r\n        delegate = delegateImpl.getMethod(m.getName(), m.getParameterTypes());\r\n        if (!delegate.getReturnType().getName().equals(m.getReturnType().getName())) {\r\n            throw new IllegalArgumentException(\"Invalid delegate signature \" + delegate);\r\n        }\r\n    } catch (NoSuchMethodException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n    final Signature sig = ReflectUtils.getSignature(m);\r\n    Type[] exceptions = TypeUtils.getTypes(m.getExceptionTypes());\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, sig, exceptions);\r\n    e.load_this();\r\n    e.getfield(DELEGATE);\r\n    e.load_args();\r\n    e.invoke_virtual(delegateType, sig);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "comment": "\n * @author Juozas Baliuka\n "
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
    "entityType": "method",
    "code": "@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        Type[] all = TypeUtils.add(interfaces, TypeUtils.getTypes(delegateIf));\r\n        super.begin_class(version, access, className, superType, all, sourceFile);\r\n        declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null);\r\n        for (Class element : delegateIf) {\r\n            Method[] methods = element.getMethods();\r\n            for (Method method : methods) {\r\n                if (Modifier.isAbstract(method.getModifiers())) {\r\n                    addDelegate(method);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
    "entityType": "method",
    "code": "@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter e = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(e) {\r\n\r\n            private boolean transformInit = true;\r\n\r\n            @Override\r\n            public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\r\n                super.visitMethodInsn(opcode, owner, name, desc, itf);\r\n                if (transformInit && opcode == Constants.INVOKESPECIAL) {\r\n                    load_this();\r\n                    new_instance(delegateType);\r\n                    dup();\r\n                    load_this();\r\n                    invoke_constructor(delegateType, CSTRUCT_OBJECT);\r\n                    putfield(DELEGATE);\r\n                    transformInit = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    return e;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
    "entityType": "method",
    "code": "private void addDelegate(Method m) {\r\n    Method delegate;\r\n    try {\r\n        delegate = delegateImpl.getMethod(m.getName(), m.getParameterTypes());\r\n        if (!delegate.getReturnType().getName().equals(m.getReturnType().getName())) {\r\n            throw new IllegalArgumentException(\"Invalid delegate signature \" + delegate);\r\n        }\r\n    } catch (NoSuchMethodException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n    final Signature sig = ReflectUtils.getSignature(m);\r\n    Type[] exceptions = TypeUtils.getTypes(m.getExceptionTypes());\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, sig, exceptions);\r\n    e.load_this();\r\n    e.getfield(DELEGATE);\r\n    e.load_args();\r\n    e.invoke_virtual(delegateType, sig);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddInitTransformer",
    "entityType": "class",
    "code": "private MethodInfo info;\npublic AddInitTransformer(Method method) {\r\n    info = ReflectUtils.getMethodInfo(method);\r\n    Type[] types = info.getSignature().getArgumentTypes();\r\n    if (types.length != 1 || !types[0].equals(Constants.TYPE_OBJECT) || !info.getSignature().getReturnType().equals(Type.VOID_TYPE)) {\r\n        throw new IllegalArgumentException(method + \" illegal signature\");\r\n    }\r\n}\n@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter emitter = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(emitter) {\r\n\r\n            @Override\r\n            public void visitInsn(int opcode) {\r\n                if (opcode == Constants.RETURN) {\r\n                    load_this();\r\n                    invoke(info);\r\n                }\r\n                super.visitInsn(opcode);\r\n            }\r\n        };\r\n    }\r\n    return emitter;\r\n}",
    "comment": "\n * @author Mark Hobson\n "
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddInitTransformer#begin_method(int,Signature,Type[])",
    "entityType": "method",
    "code": "@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter emitter = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(emitter) {\r\n\r\n            @Override\r\n            public void visitInsn(int opcode) {\r\n                if (opcode == Constants.RETURN) {\r\n                    load_this();\r\n                    invoke(info);\r\n                }\r\n                super.visitInsn(opcode);\r\n            }\r\n        };\r\n    }\r\n    return emitter;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddPropertyTransformer",
    "entityType": "class",
    "code": "private final String[] names;\nprivate final Type[] types;\npublic AddPropertyTransformer(Map props) {\r\n    int size = props.size();\r\n    names = (String[]) props.keySet().toArray(new String[size]);\r\n    types = new Type[size];\r\n    for (int i = 0; i < size; i++) {\r\n        types[i] = (Type) props.get(names[i]);\r\n    }\r\n}\npublic AddPropertyTransformer(String[] names, Type[] types) {\r\n    this.names = names;\r\n    this.types = types;\r\n}\n@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isAbstract(getAccess())) {\r\n        EmitUtils.add_properties(this, names, types);\r\n    }\r\n    super.end_class();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddPropertyTransformer#end_class()",
    "entityType": "method",
    "code": "@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isAbstract(getAccess())) {\r\n        EmitUtils.add_properties(this, names, types);\r\n    }\r\n    super.end_class();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "entityType": "class",
    "code": "private MethodInfo info;\npublic AddStaticInitTransformer(Method classInit) {\r\n    info = ReflectUtils.getMethodInfo(classInit);\r\n    if (!TypeUtils.isStatic(info.getModifiers())) {\r\n        throw new IllegalArgumentException(classInit + \" is not static\");\r\n    }\r\n    Type[] types = info.getSignature().getArgumentTypes();\r\n    if (types.length != 1 || !types[0].equals(Constants.TYPE_CLASS) || !info.getSignature().getReturnType().equals(Type.VOID_TYPE)) {\r\n        throw new IllegalArgumentException(classInit + \" illegal signature\");\r\n    }\r\n}\n@Override\r\nprotected void init() {\r\n    if (!TypeUtils.isInterface(getAccess())) {\r\n        CodeEmitter e = getStaticHook();\r\n        EmitUtils.load_class_this(e);\r\n        e.invoke(info);\r\n    }\r\n}",
    "comment": "\n * @author Juozas Baliuka, Chris Nokleberg\n "
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
    "entityType": "method",
    "code": "@Override\r\nprotected void init() {\r\n    if (!TypeUtils.isInterface(getAccess())) {\r\n        CodeEmitter e = getStaticHook();\r\n        EmitUtils.load_class_this(e);\r\n        e.invoke(info);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider",
    "entityType": "class",
    "code": "String[] getFieldNames();\nClass[] getFieldTypes();\nvoid setField(int index, Object value);\nObject getField(int index);\nvoid setField(String name, Object value);\nObject getField(String name);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
    "entityType": "method",
    "code": "String[] getFieldNames();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#getFieldTypes()",
    "entityType": "method",
    "code": "Class[] getFieldTypes();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#setField(int,Object)",
    "entityType": "method",
    "code": "void setField(int index, Object value);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#getField(int)",
    "entityType": "method",
    "code": "Object getField(int index);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#setField(String,Object)",
    "entityType": "method",
    "code": "void setField(String name, Object value);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProvider#getField(String)",
    "entityType": "method",
    "code": "Object getField(String name);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "entityType": "class",
    "code": "private static final String FIELD_NAMES = \"CGLIB$FIELD_NAMES\";\nprivate static final String FIELD_TYPES = \"CGLIB$FIELD_TYPES\";\nprivate static final Type FIELD_PROVIDER = TypeUtils.parseType(\"org.springframework.cglib.transform.impl.FieldProvider\");\nprivate static final Type ILLEGAL_ARGUMENT_EXCEPTION = TypeUtils.parseType(\"IllegalArgumentException\");\nprivate static final Signature PROVIDER_GET = TypeUtils.parseSignature(\"Object getField(String)\");\nprivate static final Signature PROVIDER_SET = TypeUtils.parseSignature(\"void setField(String, Object)\");\nprivate static final Signature PROVIDER_SET_BY_INDEX = TypeUtils.parseSignature(\"void setField(int, Object)\");\nprivate static final Signature PROVIDER_GET_BY_INDEX = TypeUtils.parseSignature(\"Object getField(int)\");\nprivate static final Signature PROVIDER_GET_TYPES = TypeUtils.parseSignature(\"Class[] getFieldTypes()\");\nprivate static final Signature PROVIDER_GET_NAMES = TypeUtils.parseSignature(\"String[] getFieldNames()\");\nprivate int access;\nprivate Map fields;\n@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isAbstract(access)) {\r\n        interfaces = TypeUtils.add(interfaces, FIELD_PROVIDER);\r\n    }\r\n    this.access = access;\r\n    fields = new HashMap();\r\n    super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n}\n@Override\r\npublic void declare_field(int access, String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    if (!TypeUtils.isStatic(access)) {\r\n        fields.put(name, type);\r\n    }\r\n}\n@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        try {\r\n            generate();\r\n        } catch (RuntimeException e) {\r\n            throw e;\r\n        } catch (Exception e) {\r\n            throw new CodeGenerationException(e);\r\n        }\r\n    }\r\n    super.end_class();\r\n}\nprivate void generate() throws Exception {\r\n    final String[] names = (String[]) fields.keySet().toArray(new String[fields.size()]);\r\n    int[] indexes = new int[names.length];\r\n    for (int i = 0; i < indexes.length; i++) {\r\n        indexes[i] = i;\r\n    }\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_NAMES, Constants.TYPE_STRING_ARRAY, null);\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_TYPES, Constants.TYPE_CLASS_ARRAY, null);\r\n    // use separate methods here because each process switch inner class needs a final CodeEmitter\r\n    initFieldProvider(names);\r\n    getNames();\r\n    getTypes();\r\n    getField(names);\r\n    setField(names);\r\n    setByIndex(names, indexes);\r\n    getByIndex(names, indexes);\r\n}\nprivate void initFieldProvider(String[] names) {\r\n    CodeEmitter e = getStaticHook();\r\n    EmitUtils.push_object(e, names);\r\n    e.putstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.push(names.length);\r\n    e.newarray(Constants.TYPE_CLASS);\r\n    e.dup();\r\n    for (int i = 0; i < names.length; i++) {\r\n        e.dup();\r\n        e.push(i);\r\n        Type type = (Type) fields.get(names[i]);\r\n        EmitUtils.load_class(e, type);\r\n        e.aastore();\r\n    }\r\n    e.putstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n}\nprivate void getNames() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_NAMES, null);\r\n    e.getstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}\nprivate void getTypes() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_TYPES, null);\r\n    e.getstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}\nprivate void setByIndex(final String[] names, final int[] indexes) throws Exception {\r\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_SET_BY_INDEX, null);\r\n    e.load_this();\r\n    e.load_arg(1);\r\n    e.load_arg(0);\r\n    e.process_switch(indexes, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) throws Exception {\r\n            Type type = (Type) fields.get(names[key]);\r\n            e.unbox(type);\r\n            e.putfield(names[key]);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}\nprivate void getByIndex(final String[] names, final int[] indexes) throws Exception {\r\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_BY_INDEX, null);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    e.process_switch(indexes, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) throws Exception {\r\n            Type type = (Type) fields.get(names[key]);\r\n            e.getfield(names[key]);\r\n            e.box(type);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}\n// TODO: if this is used to enhance class files SWITCH_STYLE_TRIE should be used\r\n// to avoid JVM hashcode implementation incompatibilities\r\nprivate void getField(String[] names) throws Exception {\r\n    final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null);\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            Type type = (Type) fields.get(key);\r\n            e.getfield((String) key);\r\n            e.box(type);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}\nprivate void setField(String[] names) throws Exception {\r\n    final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_SET, null);\r\n    e.load_this();\r\n    e.load_arg(1);\r\n    e.load_arg(0);\r\n    EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            Type type = (Type) fields.get(key);\r\n            e.unbox(type);\r\n            e.putfield((String) key);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
    "entityType": "method",
    "code": "@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isAbstract(access)) {\r\n        interfaces = TypeUtils.add(interfaces, FIELD_PROVIDER);\r\n    }\r\n    this.access = access;\r\n    fields = new HashMap();\r\n    super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic void declare_field(int access, String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    if (!TypeUtils.isStatic(access)) {\r\n        fields.put(name, type);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
    "entityType": "method",
    "code": "@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        try {\r\n            generate();\r\n        } catch (RuntimeException e) {\r\n            throw e;\r\n        } catch (Exception e) {\r\n            throw new CodeGenerationException(e);\r\n        }\r\n    }\r\n    super.end_class();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#generate()",
    "entityType": "method",
    "code": "private void generate() throws Exception {\r\n    final String[] names = (String[]) fields.keySet().toArray(new String[fields.size()]);\r\n    int[] indexes = new int[names.length];\r\n    for (int i = 0; i < indexes.length; i++) {\r\n        indexes[i] = i;\r\n    }\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_NAMES, Constants.TYPE_STRING_ARRAY, null);\r\n    super.declare_field(Constants.PRIVATE_FINAL_STATIC, FIELD_TYPES, Constants.TYPE_CLASS_ARRAY, null);\r\n    // use separate methods here because each process switch inner class needs a final CodeEmitter\r\n    initFieldProvider(names);\r\n    getNames();\r\n    getTypes();\r\n    getField(names);\r\n    setField(names);\r\n    setByIndex(names, indexes);\r\n    getByIndex(names, indexes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#initFieldProvider(String[])",
    "entityType": "method",
    "code": "private void initFieldProvider(String[] names) {\r\n    CodeEmitter e = getStaticHook();\r\n    EmitUtils.push_object(e, names);\r\n    e.putstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.push(names.length);\r\n    e.newarray(Constants.TYPE_CLASS);\r\n    e.dup();\r\n    for (int i = 0; i < names.length; i++) {\r\n        e.dup();\r\n        e.push(i);\r\n        Type type = (Type) fields.get(names[i]);\r\n        EmitUtils.load_class(e, type);\r\n        e.aastore();\r\n    }\r\n    e.putstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getNames()",
    "entityType": "method",
    "code": "private void getNames() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_NAMES, null);\r\n    e.getstatic(getClassType(), FIELD_NAMES, Constants.TYPE_STRING_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#getTypes()",
    "entityType": "method",
    "code": "private void getTypes() {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_GET_TYPES, null);\r\n    e.getstatic(getClassType(), FIELD_TYPES, Constants.TYPE_CLASS_ARRAY);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.cglib.transform.impl.FieldProviderTransformer#setByIndex(String[],int[])",
    "entityType": "method",
    "code": "private void setByIndex(final String[] names, final int[] indexes) throws Exception {\r\n    final CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, PROVIDER_SET_BY_INDEX, null);\r\n    e.load_this();\r\n    e.load_arg(1);\r\n    e.load_arg(0);\r\n    e.process_switch(indexes, new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label end) throws Exception {\r\n            Type type = (Type) fields.get(names[key]);\r\n            e.unbox(type);\r\n            e.putfield(names[key]);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() throws Exception {\r\n            e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field index\");\r\n        }\r\n    });\r\n    e.end_method();\r\n}",
    "comment": ""
  }
]