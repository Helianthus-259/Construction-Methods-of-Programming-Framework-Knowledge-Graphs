[
  {
    "entityId": "org.springframework.util.unit.DataSize#ofMegabytes(long)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing the specified number of megabytes.\r\n * @param megabytes the number of megabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofMegabytes(long megabytes) {\r\n    return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing the specified number of megabytes.\n\t * @param megabytes the number of megabytes, positive or negative\n\t * @return a {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#ofGigabytes(long)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing the specified number of gigabytes.\r\n * @param gigabytes the number of gigabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofGigabytes(long gigabytes) {\r\n    return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing the specified number of gigabytes.\n\t * @param gigabytes the number of gigabytes, positive or negative\n\t * @return a {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#ofTerabytes(long)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing the specified number of terabytes.\r\n * @param terabytes the number of terabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofTerabytes(long terabytes) {\r\n    return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing the specified number of terabytes.\n\t * @param terabytes the number of terabytes, positive or negative\n\t * @return a {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#of(long,DataUnit)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.\r\n * @param amount the amount of the size, measured in terms of the unit,\r\n * positive or negative\r\n * @return a corresponding {@code DataSize}\r\n */\r\npublic static DataSize of(long amount, DataUnit unit) {\r\n    Assert.notNull(unit, \"Unit must not be null\");\r\n    return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.\n\t * @param amount the amount of the size, measured in terms of the unit,\n\t * positive or negative\n\t * @return a corresponding {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#parse(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * {@link DataUnit#BYTES} if no unit is specified.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 bytes\"\r\n * </pre>\r\n * @param text the text to parse\r\n * @return the parsed {@code DataSize}\r\n * @see #parse(CharSequence, DataUnit)\r\n */\r\npublic static DataSize parse(CharSequence text) {\r\n    return parse(text, null);\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\n\t * {@link DataUnit#BYTES} if no unit is specified.\n\t * <p>Examples:\n\t * <pre>\n\t * \"12KB\" -- parses as \"12 kilobytes\"\n\t * \"5MB\"  -- parses as \"5 megabytes\"\n\t * \"20\"   -- parses as \"20 bytes\"\n\t * </pre>\n\t * @param text the text to parse\n\t * @return the parsed {@code DataSize}\n\t * @see #parse(CharSequence, DataUnit)\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#parse(CharSequence,DataUnit)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * the specified default {@link DataUnit} if no unit is specified.\r\n * <p>The string starts with a number followed optionally by a unit matching\r\n * one of the supported {@linkplain DataUnit suffixes}.\r\n * <p>If neither a unit nor a default {@code DataUnit} is specified,\r\n * {@link DataUnit#BYTES} will be inferred.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 kilobytes\" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})\r\n * \"20\"   -- parses as \"20 bytes\" (if the {@code defaultUnit} is {@code null})\r\n * </pre>\r\n * @param text the text to parse\r\n * @param defaultUnit the default {@code DataUnit} to use\r\n * @return the parsed {@code DataSize}\r\n */\r\npublic static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {\r\n    Assert.notNull(text, \"Text must not be null\");\r\n    try {\r\n        CharSequence trimmedText = StringUtils.trimAllWhitespace(text);\r\n        Matcher matcher = DataSizeUtils.PATTERN.matcher(trimmedText);\r\n        Assert.state(matcher.matches(), () -> \"'\" + text + \"' does not match data size pattern\");\r\n        DataUnit unit = DataSizeUtils.determineDataUnit(matcher.group(2), defaultUnit);\r\n        long amount = Long.parseLong(trimmedText, matcher.start(1), matcher.end(1), 10);\r\n        return DataSize.of(amount, unit);\r\n    } catch (Exception ex) {\r\n        throw new IllegalArgumentException(\"'\" + text + \"' is not a valid data size\", ex);\r\n    }\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\n\t * the specified default {@link DataUnit} if no unit is specified.\n\t * <p>The string starts with a number followed optionally by a unit matching\n\t * one of the supported {@linkplain DataUnit suffixes}.\n\t * <p>If neither a unit nor a default {@code DataUnit} is specified,\n\t * {@link DataUnit#BYTES} will be inferred.\n\t * <p>Examples:\n\t * <pre>\n\t * \"12KB\" -- parses as \"12 kilobytes\"\n\t * \"5MB\"  -- parses as \"5 megabytes\"\n\t * \"20\"   -- parses as \"20 kilobytes\" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})\n\t * \"20\"   -- parses as \"20 bytes\" (if the {@code defaultUnit} is {@code null})\n\t * </pre>\n\t * @param text the text to parse\n\t * @param defaultUnit the default {@code DataUnit} to use\n\t * @return the parsed {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#isNegative()",
    "entityType": "method",
    "code": "/**\r\n * Checks if this size is negative, excluding zero.\r\n * @return true if this size has a size less than zero bytes\r\n */\r\npublic boolean isNegative() {\r\n    return this.bytes < 0;\r\n}",
    "comment": "\n\t * Checks if this size is negative, excluding zero.\n\t * @return true if this size has a size less than zero bytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toBytes()",
    "entityType": "method",
    "code": "/**\r\n * Return the number of bytes in this instance.\r\n * @return the number of bytes\r\n */\r\npublic long toBytes() {\r\n    return this.bytes;\r\n}",
    "comment": "\n\t * Return the number of bytes in this instance.\n\t * @return the number of bytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toKilobytes()",
    "entityType": "method",
    "code": "/**\r\n * Return the number of kilobytes in this instance.\r\n * @return the number of kilobytes\r\n */\r\npublic long toKilobytes() {\r\n    return this.bytes / BYTES_PER_KB;\r\n}",
    "comment": "\n\t * Return the number of kilobytes in this instance.\n\t * @return the number of kilobytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toMegabytes()",
    "entityType": "method",
    "code": "/**\r\n * Return the number of megabytes in this instance.\r\n * @return the number of megabytes\r\n */\r\npublic long toMegabytes() {\r\n    return this.bytes / BYTES_PER_MB;\r\n}",
    "comment": "\n\t * Return the number of megabytes in this instance.\n\t * @return the number of megabytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toGigabytes()",
    "entityType": "method",
    "code": "/**\r\n * Return the number of gigabytes in this instance.\r\n * @return the number of gigabytes\r\n */\r\npublic long toGigabytes() {\r\n    return this.bytes / BYTES_PER_GB;\r\n}",
    "comment": "\n\t * Return the number of gigabytes in this instance.\n\t * @return the number of gigabytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toTerabytes()",
    "entityType": "method",
    "code": "/**\r\n * Return the number of terabytes in this instance.\r\n * @return the number of terabytes\r\n */\r\npublic long toTerabytes() {\r\n    return this.bytes / BYTES_PER_TB;\r\n}",
    "comment": "\n\t * Return the number of terabytes in this instance.\n\t * @return the number of terabytes\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#compareTo(DataSize)",
    "entityType": "method",
    "code": "@Override\r\npublic int compareTo(DataSize other) {\r\n    return Long.compare(this.bytes, other.bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    return String.format(\"%dB\", this.bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || getClass() != other.getClass()) {\r\n        return false;\r\n    }\r\n    DataSize that = (DataSize) other;\r\n    return (this.bytes == that.bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return Long.hashCode(this.bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.unit.DataSizeUtils",
    "entityType": "class",
    "code": "/**\r\n * The pattern for parsing.\r\n */\r\nprivate static final Pattern PATTERN = Pattern.compile(\"^([+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\");\nprivate static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {\r\n    DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);\r\n    return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);\r\n}",
    "comment": "\n\t * Static nested class to support lazy loading of the {@link #PATTERN}.\n\t * @since 5.3.21\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSizeUtils#determineDataUnit(String,DataUnit)",
    "entityType": "method",
    "code": "private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {\r\n    DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);\r\n    return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap",
    "entityType": "class",
    "code": "private static final long serialVersionUID = -8697084563854098920L;\n@SuppressWarnings(\"serial\")\r\nprivate final MultiValueMap<K, V> delegate;\n@Nullable\r\nprivate transient Set<K> keySet;\n@Nullable\r\nprivate transient Set<Entry<K, List<V>>> entrySet;\n@Nullable\r\nprivate transient Collection<List<V>> values;\n@SuppressWarnings(\"unchecked\")\r\npublic UnmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> delegate) {\r\n    Assert.notNull(delegate, \"Delegate must not be null\");\r\n    this.delegate = (MultiValueMap<K, V>) delegate;\r\n}\n// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}\n@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}\n@Override\r\npublic boolean containsKey(Object key) {\r\n    return this.delegate.containsKey(key);\r\n}\n@Override\r\npublic boolean containsValue(Object value) {\r\n    return this.delegate.containsValue(value);\r\n}\n@Override\r\n@Nullable\r\npublic List<V> get(Object key) {\r\n    List<V> result = this.delegate.get(key);\r\n    return (result != null ? Collections.unmodifiableList(result) : null);\r\n}\n@Override\r\n@Nullable\r\npublic V getFirst(K key) {\r\n    return this.delegate.getFirst(key);\r\n}\n@Override\r\npublic List<V> getOrDefault(Object key, List<V> defaultValue) {\r\n    List<V> result = this.delegate.getOrDefault(key, defaultValue);\r\n    if (result != defaultValue) {\r\n        result = Collections.unmodifiableList(result);\r\n    }\r\n    return result;\r\n}\n@Override\r\npublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\r\n    this.delegate.forEach((k, vs) -> action.accept(k, Collections.unmodifiableList(vs)));\r\n}\n@Override\r\npublic Map<K, V> toSingleValueMap() {\r\n    return this.delegate.toSingleValueMap();\r\n}\n@Override\r\npublic Map<K, V> asSingleValueMap() {\r\n    return this.delegate.asSingleValueMap();\r\n}\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || this.delegate.equals(other));\r\n}\n@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}\n// lazy init\r\n@Override\r\npublic Set<K> keySet() {\r\n    if (this.keySet == null) {\r\n        this.keySet = Collections.unmodifiableSet(this.delegate.keySet());\r\n    }\r\n    return this.keySet;\r\n}\n@Override\r\npublic Set<Entry<K, List<V>>> entrySet() {\r\n    if (this.entrySet == null) {\r\n        this.entrySet = new UnmodifiableEntrySet<>(this.delegate.entrySet());\r\n    }\r\n    return this.entrySet;\r\n}\n@Override\r\npublic Collection<List<V>> values() {\r\n    if (this.values == null) {\r\n        this.values = new UnmodifiableValueCollection<>(this.delegate.values());\r\n    }\r\n    return this.values;\r\n}\n// unsupported\r\n@Override\r\n@Nullable\r\npublic List<V> put(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> putIfAbsent(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void putAll(Map<? extends K, ? extends List<V>> m) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> remove(Object key) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void add(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void addAll(K key, List<? extends V> values) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void addAll(MultiValueMap<K, V> values) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void addIfAbsent(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void set(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void setAll(Map<K, V> values) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void replaceAll(BiFunction<? super K, ? super List<V>, ? extends List<V>> function) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean remove(Object key, Object value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean replace(K key, List<V> oldValue, List<V> newValue) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> replace(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> computeIfAbsent(K key, Function<? super K, ? extends List<V>> mappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> computeIfPresent(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> compute(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic List<V> merge(K key, List<V> value, BiFunction<? super List<V>, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void clear() {\r\n    throw new UnsupportedOperationException();\r\n}\nprivate static class UnmodifiableEntrySet<K, V> implements Set<Map.Entry<K, List<V>>>, Serializable {\r\n\r\n    private static final long serialVersionUID = 2407578793783925203L;\r\n\r\n    @SuppressWarnings(\"serial\")\r\n    private final Set<Entry<K, List<V>>> delegate;\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public UnmodifiableEntrySet(Set<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\r\n        this.delegate = (Set<Entry<K, List<V>>>) delegate;\r\n    }\r\n\r\n    // delegation\r\n    @Override\r\n    public int size() {\r\n        return this.delegate.size();\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return this.delegate.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public boolean contains(Object o) {\r\n        return this.delegate.contains(o);\r\n    }\r\n\r\n    @Override\r\n    public boolean containsAll(Collection<?> c) {\r\n        return this.delegate.containsAll(c);\r\n    }\r\n\r\n    @Override\r\n    public Iterator<Entry<K, List<V>>> iterator() {\r\n        Iterator<? extends Entry<? extends K, ? extends List<? extends V>>> iterator = this.delegate.iterator();\r\n        return new Iterator<>() {\r\n\r\n            @Override\r\n            public boolean hasNext() {\r\n                return iterator.hasNext();\r\n            }\r\n\r\n            @Override\r\n            public Entry<K, List<V>> next() {\r\n                return new UnmodifiableEntry<>(iterator.next());\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public Object[] toArray() {\r\n        Object[] result = this.delegate.toArray();\r\n        filterArray(result);\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public <T> T[] toArray(T[] a) {\r\n        T[] result = this.delegate.toArray(a);\r\n        filterArray(result);\r\n        return result;\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private void filterArray(Object[] result) {\r\n        for (int i = 0; i < result.length; i++) {\r\n            if (result[i] instanceof Map.Entry<?, ?> entry) {\r\n                result[i] = new UnmodifiableEntry<>((Entry<K, List<V>>) entry);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void forEach(Consumer<? super Entry<K, List<V>>> action) {\r\n        this.delegate.forEach(e -> action.accept(new UnmodifiableEntry<>(e)));\r\n    }\r\n\r\n    @Override\r\n    public Stream<Entry<K, List<V>>> stream() {\r\n        return StreamSupport.stream(spliterator(), false);\r\n    }\r\n\r\n    @Override\r\n    public Stream<Entry<K, List<V>>> parallelStream() {\r\n        return StreamSupport.stream(spliterator(), true);\r\n    }\r\n\r\n    @Override\r\n    public Spliterator<Entry<K, List<V>>> spliterator() {\r\n        return new UnmodifiableEntrySpliterator<>(this.delegate.spliterator());\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(@Nullable Object other) {\r\n        return (this == other || other instanceof Set<?> that && size() == that.size() && containsAll(that));\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return this.delegate.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return this.delegate.toString();\r\n    }\r\n\r\n    // unsupported\r\n    @Override\r\n    public boolean add(Entry<K, List<V>> kListEntry) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean remove(Object o) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean removeIf(Predicate<? super Entry<K, List<V>>> filter) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean addAll(Collection<? extends Entry<K, List<V>>> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean retainAll(Collection<?> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean removeAll(Collection<?> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public void clear() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    private static class UnmodifiableEntrySpliterator<K, V> implements Spliterator<Entry<K, List<V>>> {\r\n\r\n        private final Spliterator<Entry<K, List<V>>> delegate;\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public UnmodifiableEntrySpliterator(Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\r\n            this.delegate = (Spliterator<Entry<K, List<V>>>) delegate;\r\n        }\r\n\r\n        @Override\r\n        public boolean tryAdvance(Consumer<? super Entry<K, List<V>>> action) {\r\n            return this.delegate.tryAdvance(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n        }\r\n\r\n        @Override\r\n        public void forEachRemaining(Consumer<? super Entry<K, List<V>>> action) {\r\n            this.delegate.forEachRemaining(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        public Spliterator<Entry<K, List<V>>> trySplit() {\r\n            Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> split = this.delegate.trySplit();\r\n            if (split != null) {\r\n                return new UnmodifiableEntrySpliterator<>(split);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public long estimateSize() {\r\n            return this.delegate.estimateSize();\r\n        }\r\n\r\n        @Override\r\n        public long getExactSizeIfKnown() {\r\n            return this.delegate.getExactSizeIfKnown();\r\n        }\r\n\r\n        @Override\r\n        public int characteristics() {\r\n            return this.delegate.characteristics();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasCharacteristics(int characteristics) {\r\n            return this.delegate.hasCharacteristics(characteristics);\r\n        }\r\n\r\n        @Override\r\n        public Comparator<? super Entry<K, List<V>>> getComparator() {\r\n            return this.delegate.getComparator();\r\n        }\r\n    }\r\n\r\n    private static class UnmodifiableEntry<K, V> implements Map.Entry<K, List<V>> {\r\n\r\n        private final Entry<K, List<V>> delegate;\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public UnmodifiableEntry(Entry<? extends K, ? extends List<? extends V>> delegate) {\r\n            Assert.notNull(delegate, \"Delegate must not be null\");\r\n            this.delegate = (Entry<K, List<V>>) delegate;\r\n        }\r\n\r\n        @Override\r\n        public K getKey() {\r\n            return this.delegate.getKey();\r\n        }\r\n\r\n        @Override\r\n        public List<V> getValue() {\r\n            return Collections.unmodifiableList(this.delegate.getValue());\r\n        }\r\n\r\n        @Override\r\n        public List<V> setValue(List<V> value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(@Nullable Object other) {\r\n            return (this == other || (other instanceof Map.Entry<?, ?> that && getKey().equals(that.getKey()) && getValue().equals(that.getValue())));\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return this.delegate.hashCode();\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return this.delegate.toString();\r\n        }\r\n    }\r\n}\nprivate static class UnmodifiableValueCollection<V> implements Collection<List<V>>, Serializable {\r\n\r\n    private static final long serialVersionUID = 5518377583904339588L;\r\n\r\n    @SuppressWarnings(\"serial\")\r\n    private final Collection<List<V>> delegate;\r\n\r\n    public UnmodifiableValueCollection(Collection<List<V>> delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n\r\n    // delegation\r\n    @Override\r\n    public int size() {\r\n        return this.delegate.size();\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {\r\n        return this.delegate.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    public boolean contains(Object o) {\r\n        return this.delegate.contains(o);\r\n    }\r\n\r\n    @Override\r\n    public boolean containsAll(Collection<?> c) {\r\n        return this.delegate.containsAll(c);\r\n    }\r\n\r\n    @Override\r\n    public Object[] toArray() {\r\n        Object[] result = this.delegate.toArray();\r\n        filterArray(result);\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public <T> T[] toArray(T[] a) {\r\n        T[] result = this.delegate.toArray(a);\r\n        filterArray(result);\r\n        return result;\r\n    }\r\n\r\n    private void filterArray(Object[] array) {\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (array[i] instanceof List<?> list) {\r\n                array[i] = Collections.unmodifiableList(list);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Iterator<List<V>> iterator() {\r\n        Iterator<List<V>> iterator = this.delegate.iterator();\r\n        return new Iterator<>() {\r\n\r\n            @Override\r\n            public boolean hasNext() {\r\n                return iterator.hasNext();\r\n            }\r\n\r\n            @Override\r\n            public List<V> next() {\r\n                return Collections.unmodifiableList(iterator.next());\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void forEach(Consumer<? super List<V>> action) {\r\n        this.delegate.forEach(list -> action.accept(Collections.unmodifiableList(list)));\r\n    }\r\n\r\n    @Override\r\n    public Spliterator<List<V>> spliterator() {\r\n        return new UnmodifiableValueSpliterator<>(this.delegate.spliterator());\r\n    }\r\n\r\n    @Override\r\n    public Stream<List<V>> stream() {\r\n        return StreamSupport.stream(spliterator(), false);\r\n    }\r\n\r\n    @Override\r\n    public Stream<List<V>> parallelStream() {\r\n        return StreamSupport.stream(spliterator(), true);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(@Nullable Object other) {\r\n        return (this == other || this.delegate.equals(other));\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return this.delegate.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return this.delegate.toString();\r\n    }\r\n\r\n    // unsupported\r\n    @Override\r\n    public boolean add(List<V> ts) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean remove(Object o) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean addAll(Collection<? extends List<V>> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean removeAll(Collection<?> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean retainAll(Collection<?> c) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean removeIf(Predicate<? super List<V>> filter) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public void clear() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    private static class UnmodifiableValueSpliterator<T> implements Spliterator<List<T>> {\r\n\r\n        private final Spliterator<List<T>> delegate;\r\n\r\n        public UnmodifiableValueSpliterator(Spliterator<List<T>> delegate) {\r\n            this.delegate = delegate;\r\n        }\r\n\r\n        @Override\r\n        public boolean tryAdvance(Consumer<? super List<T>> action) {\r\n            return this.delegate.tryAdvance(l -> action.accept(Collections.unmodifiableList(l)));\r\n        }\r\n\r\n        @Override\r\n        public void forEachRemaining(Consumer<? super List<T>> action) {\r\n            this.delegate.forEachRemaining(l -> action.accept(Collections.unmodifiableList(l)));\r\n        }\r\n\r\n        @Override\r\n        @Nullable\r\n        public Spliterator<List<T>> trySplit() {\r\n            Spliterator<List<T>> split = this.delegate.trySplit();\r\n            if (split != null) {\r\n                return new UnmodifiableValueSpliterator<>(split);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public long estimateSize() {\r\n            return this.delegate.estimateSize();\r\n        }\r\n\r\n        @Override\r\n        public long getExactSizeIfKnown() {\r\n            return this.delegate.getExactSizeIfKnown();\r\n        }\r\n\r\n        @Override\r\n        public int characteristics() {\r\n            return this.delegate.characteristics();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasCharacteristics(int characteristics) {\r\n            return this.delegate.hasCharacteristics(characteristics);\r\n        }\r\n\r\n        @Override\r\n        public Comparator<? super List<T>> getComparator() {\r\n            return this.delegate.getComparator();\r\n        }\r\n    }\r\n}",
    "comment": "\n * Unmodifiable wrapper for {@link MultiValueMap}.\n *\n * @author Arjen Poutsma\n * @since 6.0\n * @param <K> the key type\n * @param <V> the value element type\n "
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#size()",
    "entityType": "method",
    "code": "// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#isEmpty()",
    "entityType": "method",
    "code": "@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#containsKey(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean containsKey(Object key) {\r\n    return this.delegate.containsKey(key);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#containsValue(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean containsValue(Object value) {\r\n    return this.delegate.containsValue(value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#get(Object)",
    "entityType": "method",
    "code": "@Override\r\n@Nullable\r\npublic List<V> get(Object key) {\r\n    List<V> result = this.delegate.get(key);\r\n    return (result != null ? Collections.unmodifiableList(result) : null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#getFirst(K)",
    "entityType": "method",
    "code": "@Override\r\n@Nullable\r\npublic V getFirst(K key) {\r\n    return this.delegate.getFirst(key);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#getOrDefault(Object,List<V>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> getOrDefault(Object key, List<V> defaultValue) {\r\n    List<V> result = this.delegate.getOrDefault(key, defaultValue);\r\n    if (result != defaultValue) {\r\n        result = Collections.unmodifiableList(result);\r\n    }\r\n    return result;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#forEach(BiConsumer<? super K,? super List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\r\n    this.delegate.forEach((k, vs) -> action.accept(k, Collections.unmodifiableList(vs)));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#toSingleValueMap()",
    "entityType": "method",
    "code": "@Override\r\npublic Map<K, V> toSingleValueMap() {\r\n    return this.delegate.toSingleValueMap();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#asSingleValueMap()",
    "entityType": "method",
    "code": "@Override\r\npublic Map<K, V> asSingleValueMap() {\r\n    return this.delegate.asSingleValueMap();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || this.delegate.equals(other));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#keySet()",
    "entityType": "method",
    "code": "// lazy init\r\n@Override\r\npublic Set<K> keySet() {\r\n    if (this.keySet == null) {\r\n        this.keySet = Collections.unmodifiableSet(this.delegate.keySet());\r\n    }\r\n    return this.keySet;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#entrySet()",
    "entityType": "method",
    "code": "@Override\r\npublic Set<Entry<K, List<V>>> entrySet() {\r\n    if (this.entrySet == null) {\r\n        this.entrySet = new UnmodifiableEntrySet<>(this.delegate.entrySet());\r\n    }\r\n    return this.entrySet;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#values()",
    "entityType": "method",
    "code": "@Override\r\npublic Collection<List<V>> values() {\r\n    if (this.values == null) {\r\n        this.values = new UnmodifiableValueCollection<>(this.delegate.values());\r\n    }\r\n    return this.values;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#put(K,List<V>)",
    "entityType": "method",
    "code": "// unsupported\r\n@Override\r\n@Nullable\r\npublic List<V> put(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#putIfAbsent(K,List<V>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> putIfAbsent(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#putAll(Map<? extends K,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic void putAll(Map<? extends K, ? extends List<V>> m) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#remove(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> remove(Object key) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#add(K,V)",
    "entityType": "method",
    "code": "@Override\r\npublic void add(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#addAll(K,List<? extends V>)",
    "entityType": "method",
    "code": "@Override\r\npublic void addAll(K key, List<? extends V> values) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#addAll(MultiValueMap<K,V>)",
    "entityType": "method",
    "code": "@Override\r\npublic void addAll(MultiValueMap<K, V> values) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#addIfAbsent(K,V)",
    "entityType": "method",
    "code": "@Override\r\npublic void addIfAbsent(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#set(K,V)",
    "entityType": "method",
    "code": "@Override\r\npublic void set(K key, @Nullable V value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#setAll(Map<K,V>)",
    "entityType": "method",
    "code": "@Override\r\npublic void setAll(Map<K, V> values) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#replaceAll(BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic void replaceAll(BiFunction<? super K, ? super List<V>, ? extends List<V>> function) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#remove(Object,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean remove(Object key, Object value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>,List<V>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean replace(K key, List<V> oldValue, List<V> newValue) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> replace(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#computeIfAbsent(K,Function<? super K,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> computeIfAbsent(K key, Function<? super K, ? extends List<V>> mappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#computeIfPresent(K,BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> computeIfPresent(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#compute(K,BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> compute(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#merge(K,List<V>,BiFunction<? super List<V>,? super List<V>,? extends List<V>>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> merge(K key, List<V> value, BiFunction<? super List<V>, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableMultiValueMap#clear()",
    "entityType": "method",
    "code": "@Override\r\npublic void clear() {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet",
    "entityType": "class",
    "code": "private static final long serialVersionUID = 2407578793783925203L;\n@SuppressWarnings(\"serial\")\r\nprivate final Set<Entry<K, List<V>>> delegate;\n@SuppressWarnings(\"unchecked\")\r\npublic UnmodifiableEntrySet(Set<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\r\n    this.delegate = (Set<Entry<K, List<V>>>) delegate;\r\n}\n// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}\n@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}\n@Override\r\npublic boolean contains(Object o) {\r\n    return this.delegate.contains(o);\r\n}\n@Override\r\npublic boolean containsAll(Collection<?> c) {\r\n    return this.delegate.containsAll(c);\r\n}\n@Override\r\npublic Iterator<Entry<K, List<V>>> iterator() {\r\n    Iterator<? extends Entry<? extends K, ? extends List<? extends V>>> iterator = this.delegate.iterator();\r\n    return new Iterator<>() {\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iterator.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public Entry<K, List<V>> next() {\r\n            return new UnmodifiableEntry<>(iterator.next());\r\n        }\r\n    };\r\n}\n@Override\r\npublic Object[] toArray() {\r\n    Object[] result = this.delegate.toArray();\r\n    filterArray(result);\r\n    return result;\r\n}\n@Override\r\npublic <T> T[] toArray(T[] a) {\r\n    T[] result = this.delegate.toArray(a);\r\n    filterArray(result);\r\n    return result;\r\n}\n@SuppressWarnings(\"unchecked\")\r\nprivate void filterArray(Object[] result) {\r\n    for (int i = 0; i < result.length; i++) {\r\n        if (result[i] instanceof Map.Entry<?, ?> entry) {\r\n            result[i] = new UnmodifiableEntry<>((Entry<K, List<V>>) entry);\r\n        }\r\n    }\r\n}\n@Override\r\npublic void forEach(Consumer<? super Entry<K, List<V>>> action) {\r\n    this.delegate.forEach(e -> action.accept(new UnmodifiableEntry<>(e)));\r\n}\n@Override\r\npublic Stream<Entry<K, List<V>>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}\n@Override\r\npublic Stream<Entry<K, List<V>>> parallelStream() {\r\n    return StreamSupport.stream(spliterator(), true);\r\n}\n@Override\r\npublic Spliterator<Entry<K, List<V>>> spliterator() {\r\n    return new UnmodifiableEntrySpliterator<>(this.delegate.spliterator());\r\n}\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || other instanceof Set<?> that && size() == that.size() && containsAll(that));\r\n}\n@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}\n// unsupported\r\n@Override\r\npublic boolean add(Entry<K, List<V>> kListEntry) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean remove(Object o) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean removeIf(Predicate<? super Entry<K, List<V>>> filter) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean addAll(Collection<? extends Entry<K, List<V>>> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean retainAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean removeAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void clear() {\r\n    throw new UnsupportedOperationException();\r\n}\nprivate static class UnmodifiableEntrySpliterator<K, V> implements Spliterator<Entry<K, List<V>>> {\r\n\r\n    private final Spliterator<Entry<K, List<V>>> delegate;\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public UnmodifiableEntrySpliterator(Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\r\n        this.delegate = (Spliterator<Entry<K, List<V>>>) delegate;\r\n    }\r\n\r\n    @Override\r\n    public boolean tryAdvance(Consumer<? super Entry<K, List<V>>> action) {\r\n        return this.delegate.tryAdvance(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n    }\r\n\r\n    @Override\r\n    public void forEachRemaining(Consumer<? super Entry<K, List<V>>> action) {\r\n        this.delegate.forEachRemaining(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n    }\r\n\r\n    @Override\r\n    @Nullable\r\n    public Spliterator<Entry<K, List<V>>> trySplit() {\r\n        Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> split = this.delegate.trySplit();\r\n        if (split != null) {\r\n            return new UnmodifiableEntrySpliterator<>(split);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public long estimateSize() {\r\n        return this.delegate.estimateSize();\r\n    }\r\n\r\n    @Override\r\n    public long getExactSizeIfKnown() {\r\n        return this.delegate.getExactSizeIfKnown();\r\n    }\r\n\r\n    @Override\r\n    public int characteristics() {\r\n        return this.delegate.characteristics();\r\n    }\r\n\r\n    @Override\r\n    public boolean hasCharacteristics(int characteristics) {\r\n        return this.delegate.hasCharacteristics(characteristics);\r\n    }\r\n\r\n    @Override\r\n    public Comparator<? super Entry<K, List<V>>> getComparator() {\r\n        return this.delegate.getComparator();\r\n    }\r\n}\nprivate static class UnmodifiableEntry<K, V> implements Map.Entry<K, List<V>> {\r\n\r\n    private final Entry<K, List<V>> delegate;\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public UnmodifiableEntry(Entry<? extends K, ? extends List<? extends V>> delegate) {\r\n        Assert.notNull(delegate, \"Delegate must not be null\");\r\n        this.delegate = (Entry<K, List<V>>) delegate;\r\n    }\r\n\r\n    @Override\r\n    public K getKey() {\r\n        return this.delegate.getKey();\r\n    }\r\n\r\n    @Override\r\n    public List<V> getValue() {\r\n        return Collections.unmodifiableList(this.delegate.getValue());\r\n    }\r\n\r\n    @Override\r\n    public List<V> setValue(List<V> value) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(@Nullable Object other) {\r\n        return (this == other || (other instanceof Map.Entry<?, ?> that && getKey().equals(that.getKey()) && getValue().equals(that.getValue())));\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return this.delegate.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return this.delegate.toString();\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#size()",
    "entityType": "method",
    "code": "// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#isEmpty()",
    "entityType": "method",
    "code": "@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#contains(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean contains(Object o) {\r\n    return this.delegate.contains(o);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#containsAll(Collection<?>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean containsAll(Collection<?> c) {\r\n    return this.delegate.containsAll(c);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#iterator()",
    "entityType": "method",
    "code": "@Override\r\npublic Iterator<Entry<K, List<V>>> iterator() {\r\n    Iterator<? extends Entry<? extends K, ? extends List<? extends V>>> iterator = this.delegate.iterator();\r\n    return new Iterator<>() {\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iterator.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public Entry<K, List<V>> next() {\r\n            return new UnmodifiableEntry<>(iterator.next());\r\n        }\r\n    };\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#toArray()",
    "entityType": "method",
    "code": "@Override\r\npublic Object[] toArray() {\r\n    Object[] result = this.delegate.toArray();\r\n    filterArray(result);\r\n    return result;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#toArray(T[])",
    "entityType": "method",
    "code": "@Override\r\npublic <T> T[] toArray(T[] a) {\r\n    T[] result = this.delegate.toArray(a);\r\n    filterArray(result);\r\n    return result;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#filterArray(Object[])",
    "entityType": "method",
    "code": "@SuppressWarnings(\"unchecked\")\r\nprivate void filterArray(Object[] result) {\r\n    for (int i = 0; i < result.length; i++) {\r\n        if (result[i] instanceof Map.Entry<?, ?> entry) {\r\n            result[i] = new UnmodifiableEntry<>((Entry<K, List<V>>) entry);\r\n        }\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#forEach(Consumer<? super Entry<K,List<V>>>)",
    "entityType": "method",
    "code": "@Override\r\npublic void forEach(Consumer<? super Entry<K, List<V>>> action) {\r\n    this.delegate.forEach(e -> action.accept(new UnmodifiableEntry<>(e)));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#stream()",
    "entityType": "method",
    "code": "@Override\r\npublic Stream<Entry<K, List<V>>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#parallelStream()",
    "entityType": "method",
    "code": "@Override\r\npublic Stream<Entry<K, List<V>>> parallelStream() {\r\n    return StreamSupport.stream(spliterator(), true);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#spliterator()",
    "entityType": "method",
    "code": "@Override\r\npublic Spliterator<Entry<K, List<V>>> spliterator() {\r\n    return new UnmodifiableEntrySpliterator<>(this.delegate.spliterator());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || other instanceof Set<?> that && size() == that.size() && containsAll(that));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#add(Entry<K,List<V>>)",
    "entityType": "method",
    "code": "// unsupported\r\n@Override\r\npublic boolean add(Entry<K, List<V>> kListEntry) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#remove(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean remove(Object o) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#removeIf(Predicate<? super Entry<K,List<V>>>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean removeIf(Predicate<? super Entry<K, List<V>>> filter) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#addAll(Collection<? extends Entry<K,List<V>>>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean addAll(Collection<? extends Entry<K, List<V>>> c) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#retainAll(Collection<?>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean retainAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#removeAll(Collection<?>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean removeAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySet#clear()",
    "entityType": "method",
    "code": "@Override\r\npublic void clear() {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator",
    "entityType": "class",
    "code": "private final Spliterator<Entry<K, List<V>>> delegate;\n@SuppressWarnings(\"unchecked\")\r\npublic UnmodifiableEntrySpliterator(Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\r\n    this.delegate = (Spliterator<Entry<K, List<V>>>) delegate;\r\n}\n@Override\r\npublic boolean tryAdvance(Consumer<? super Entry<K, List<V>>> action) {\r\n    return this.delegate.tryAdvance(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n}\n@Override\r\npublic void forEachRemaining(Consumer<? super Entry<K, List<V>>> action) {\r\n    this.delegate.forEachRemaining(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n}\n@Override\r\n@Nullable\r\npublic Spliterator<Entry<K, List<V>>> trySplit() {\r\n    Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> split = this.delegate.trySplit();\r\n    if (split != null) {\r\n        return new UnmodifiableEntrySpliterator<>(split);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n@Override\r\npublic long estimateSize() {\r\n    return this.delegate.estimateSize();\r\n}\n@Override\r\npublic long getExactSizeIfKnown() {\r\n    return this.delegate.getExactSizeIfKnown();\r\n}\n@Override\r\npublic int characteristics() {\r\n    return this.delegate.characteristics();\r\n}\n@Override\r\npublic boolean hasCharacteristics(int characteristics) {\r\n    return this.delegate.hasCharacteristics(characteristics);\r\n}\n@Override\r\npublic Comparator<? super Entry<K, List<V>>> getComparator() {\r\n    return this.delegate.getComparator();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#tryAdvance(Consumer<? super Entry<K,List<V>>>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean tryAdvance(Consumer<? super Entry<K, List<V>>> action) {\r\n    return this.delegate.tryAdvance(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#forEachRemaining(Consumer<? super Entry<K,List<V>>>)",
    "entityType": "method",
    "code": "@Override\r\npublic void forEachRemaining(Consumer<? super Entry<K, List<V>>> action) {\r\n    this.delegate.forEachRemaining(entry -> action.accept(new UnmodifiableEntry<>(entry)));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#trySplit()",
    "entityType": "method",
    "code": "@Override\r\n@Nullable\r\npublic Spliterator<Entry<K, List<V>>> trySplit() {\r\n    Spliterator<? extends Entry<? extends K, ? extends List<? extends V>>> split = this.delegate.trySplit();\r\n    if (split != null) {\r\n        return new UnmodifiableEntrySpliterator<>(split);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#estimateSize()",
    "entityType": "method",
    "code": "@Override\r\npublic long estimateSize() {\r\n    return this.delegate.estimateSize();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#getExactSizeIfKnown()",
    "entityType": "method",
    "code": "@Override\r\npublic long getExactSizeIfKnown() {\r\n    return this.delegate.getExactSizeIfKnown();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#characteristics()",
    "entityType": "method",
    "code": "@Override\r\npublic int characteristics() {\r\n    return this.delegate.characteristics();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#hasCharacteristics(int)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean hasCharacteristics(int characteristics) {\r\n    return this.delegate.hasCharacteristics(characteristics);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntrySpliterator#getComparator()",
    "entityType": "method",
    "code": "@Override\r\npublic Comparator<? super Entry<K, List<V>>> getComparator() {\r\n    return this.delegate.getComparator();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry",
    "entityType": "class",
    "code": "private final Entry<K, List<V>> delegate;\n@SuppressWarnings(\"unchecked\")\r\npublic UnmodifiableEntry(Entry<? extends K, ? extends List<? extends V>> delegate) {\r\n    Assert.notNull(delegate, \"Delegate must not be null\");\r\n    this.delegate = (Entry<K, List<V>>) delegate;\r\n}\n@Override\r\npublic K getKey() {\r\n    return this.delegate.getKey();\r\n}\n@Override\r\npublic List<V> getValue() {\r\n    return Collections.unmodifiableList(this.delegate.getValue());\r\n}\n@Override\r\npublic List<V> setValue(List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof Map.Entry<?, ?> that && getKey().equals(that.getKey()) && getValue().equals(that.getValue())));\r\n}\n@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#getKey()",
    "entityType": "method",
    "code": "@Override\r\npublic K getKey() {\r\n    return this.delegate.getKey();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#getValue()",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> getValue() {\r\n    return Collections.unmodifiableList(this.delegate.getValue());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#setValue(List<V>)",
    "entityType": "method",
    "code": "@Override\r\npublic List<V> setValue(List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof Map.Entry<?, ?> that && getKey().equals(that.getKey()) && getValue().equals(that.getValue())));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableEntry#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection",
    "entityType": "class",
    "code": "private static final long serialVersionUID = 5518377583904339588L;\n@SuppressWarnings(\"serial\")\r\nprivate final Collection<List<V>> delegate;\npublic UnmodifiableValueCollection(Collection<List<V>> delegate) {\r\n    this.delegate = delegate;\r\n}\n// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}\n@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}\n@Override\r\npublic boolean contains(Object o) {\r\n    return this.delegate.contains(o);\r\n}\n@Override\r\npublic boolean containsAll(Collection<?> c) {\r\n    return this.delegate.containsAll(c);\r\n}\n@Override\r\npublic Object[] toArray() {\r\n    Object[] result = this.delegate.toArray();\r\n    filterArray(result);\r\n    return result;\r\n}\n@Override\r\npublic <T> T[] toArray(T[] a) {\r\n    T[] result = this.delegate.toArray(a);\r\n    filterArray(result);\r\n    return result;\r\n}\nprivate void filterArray(Object[] array) {\r\n    for (int i = 0; i < array.length; i++) {\r\n        if (array[i] instanceof List<?> list) {\r\n            array[i] = Collections.unmodifiableList(list);\r\n        }\r\n    }\r\n}\n@Override\r\npublic Iterator<List<V>> iterator() {\r\n    Iterator<List<V>> iterator = this.delegate.iterator();\r\n    return new Iterator<>() {\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iterator.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public List<V> next() {\r\n            return Collections.unmodifiableList(iterator.next());\r\n        }\r\n    };\r\n}\n@Override\r\npublic void forEach(Consumer<? super List<V>> action) {\r\n    this.delegate.forEach(list -> action.accept(Collections.unmodifiableList(list)));\r\n}\n@Override\r\npublic Spliterator<List<V>> spliterator() {\r\n    return new UnmodifiableValueSpliterator<>(this.delegate.spliterator());\r\n}\n@Override\r\npublic Stream<List<V>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}\n@Override\r\npublic Stream<List<V>> parallelStream() {\r\n    return StreamSupport.stream(spliterator(), true);\r\n}\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || this.delegate.equals(other));\r\n}\n@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    return this.delegate.toString();\r\n}\n// unsupported\r\n@Override\r\npublic boolean add(List<V> ts) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean remove(Object o) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean addAll(Collection<? extends List<V>> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean removeAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean retainAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic boolean removeIf(Predicate<? super List<V>> filter) {\r\n    throw new UnsupportedOperationException();\r\n}\n@Override\r\npublic void clear() {\r\n    throw new UnsupportedOperationException();\r\n}\nprivate static class UnmodifiableValueSpliterator<T> implements Spliterator<List<T>> {\r\n\r\n    private final Spliterator<List<T>> delegate;\r\n\r\n    public UnmodifiableValueSpliterator(Spliterator<List<T>> delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n\r\n    @Override\r\n    public boolean tryAdvance(Consumer<? super List<T>> action) {\r\n        return this.delegate.tryAdvance(l -> action.accept(Collections.unmodifiableList(l)));\r\n    }\r\n\r\n    @Override\r\n    public void forEachRemaining(Consumer<? super List<T>> action) {\r\n        this.delegate.forEachRemaining(l -> action.accept(Collections.unmodifiableList(l)));\r\n    }\r\n\r\n    @Override\r\n    @Nullable\r\n    public Spliterator<List<T>> trySplit() {\r\n        Spliterator<List<T>> split = this.delegate.trySplit();\r\n        if (split != null) {\r\n            return new UnmodifiableValueSpliterator<>(split);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public long estimateSize() {\r\n        return this.delegate.estimateSize();\r\n    }\r\n\r\n    @Override\r\n    public long getExactSizeIfKnown() {\r\n        return this.delegate.getExactSizeIfKnown();\r\n    }\r\n\r\n    @Override\r\n    public int characteristics() {\r\n        return this.delegate.characteristics();\r\n    }\r\n\r\n    @Override\r\n    public boolean hasCharacteristics(int characteristics) {\r\n        return this.delegate.hasCharacteristics(characteristics);\r\n    }\r\n\r\n    @Override\r\n    public Comparator<? super List<T>> getComparator() {\r\n        return this.delegate.getComparator();\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#size()",
    "entityType": "method",
    "code": "// delegation\r\n@Override\r\npublic int size() {\r\n    return this.delegate.size();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#isEmpty()",
    "entityType": "method",
    "code": "@Override\r\npublic boolean isEmpty() {\r\n    return this.delegate.isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#contains(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean contains(Object o) {\r\n    return this.delegate.contains(o);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#containsAll(Collection<?>)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean containsAll(Collection<?> c) {\r\n    return this.delegate.containsAll(c);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#toArray()",
    "entityType": "method",
    "code": "@Override\r\npublic Object[] toArray() {\r\n    Object[] result = this.delegate.toArray();\r\n    filterArray(result);\r\n    return result;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.UnmodifiableValueCollection#toArray(T[])",
    "entityType": "method",
    "code": "@Override\r\npublic <T> T[] toArray(T[] a) {\r\n    T[] result = this.delegate.toArray(a);\r\n    filterArray(result);\r\n    return result;\r\n}",
    "comment": ""
  }
]