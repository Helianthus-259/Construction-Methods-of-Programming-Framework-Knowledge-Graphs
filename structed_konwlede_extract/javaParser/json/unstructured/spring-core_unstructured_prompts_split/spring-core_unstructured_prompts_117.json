[
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToObjectAssignableTargetType()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertArrayToObjectAssignableTargetType() {\r\n    Long[] array = new Long[] { 3L };\r\n    Long[] result = (Long[]) conversionService.convert(array, Object.class);\r\n    assertThat(result).isEqualTo(array);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToArray() {\r\n    Object[] result = conversionService.convert(3L, Object[].class);\r\n    assertThat(result).containsExactly(3L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToArrayWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToArrayWithElementConversion() {\r\n    Integer[] result = conversionService.convert(3L, Integer[].class);\r\n    assertThat(result).containsExactly(3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToArray() {\r\n    List<String> list = List.of(\"1\", \"2\", \"3\");\r\n    String[] result = conversionService.convert(list, String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToArrayWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToArrayWithElementConversion() {\r\n    List<String> list = List.of(\"1\", \"2\", \"3\");\r\n    Integer[] result = conversionService.convert(list, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToString() {\r\n    List<String> list = List.of(\"foo\", \"bar\");\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"foo,bar\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToStringWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToStringWithElementConversion() throws Exception {\r\n    List<Integer> list = List.of(3, 5);\r\n    String result = (String) conversionService.convert(list, new TypeDescriptor(getClass().getField(\"genericList\")), TypeDescriptor.valueOf(String.class));\r\n    assertThat(result).isEqualTo(\"3,5\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToCollection() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> result = conversionService.convert(\"1,2,3\", List.class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToCollectionWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToCollectionWithElementConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertEmptyStringToCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertEmptyStringToCollection() {\r\n    Collection<?> result = conversionService.convert(\"\", Collection.class);\r\n    assertThat(result).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToObject()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToObject() {\r\n    List<Long> list = Collections.singletonList(3L);\r\n    Long result = conversionService.convert(list, Long.class);\r\n    assertThat(result).isEqualTo(3L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToObjectWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToObjectWithElementConversion() {\r\n    List<String> list = Collections.singletonList(\"3\");\r\n    Integer result = conversionService.convert(list, Integer.class);\r\n    assertThat(result).isEqualTo(3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToObjectAssignableTarget()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToObjectAssignableTarget() throws Exception {\r\n    Collection<String> source = List.of(\"foo\");\r\n    Object result = conversionService.convert(source, new TypeDescriptor(getClass().getField(\"assignableTarget\")));\r\n    assertThat(result).isSameAs(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToObjectWithCustomConverter()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToObjectWithCustomConverter() {\r\n    List<String> source = List.of(\"A\", \"B\");\r\n    conversionService.addConverter(List.class, ListWrapper.class, ListWrapper::new);\r\n    ListWrapper result = conversionService.convert(source, ListWrapper.class);\r\n    assertThat(result.getList()).isSameAs(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToCollection() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Long> result = conversionService.convert(3L, List.class);\r\n    assertThat(result).containsExactly(3L);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToCollectionWithElementConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToCollectionWithElementConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(result).containsExactly(3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringArrayToIntegerArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringArrayToIntArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringArrayToIntArray() {\r\n    int[] result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToStringArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntArrayToStringArray() {\r\n    String[] result = conversionService.convert(new int[] { 1, 2, 3 }, String[].class);\r\n    assertThat(result).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntegerArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntegerArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntegerArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntegerArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new int[] { 1, 2 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntegerArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new Object[] { 1, 2, 3 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Object[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToObjectArray()",
    "entityType": "method",
    "code": "// gh-33212\r\n@Test\r\nvoid convertIntArrayToObjectArray() {\r\n    Object[] result = conversionService.convert(new int[] { 1, 2 }, Object[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToFloatArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntArrayToFloatArray() {\r\n    Float[] result = conversionService.convert(new int[] { 1, 2 }, Float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToPrimitiveFloatArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertIntArrayToPrimitiveFloatArray() {\r\n    float[] result = conversionService.convert(new int[] { 1, 2 }, float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToByteWrapperArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertPrimitiveByteArrayToByteWrapperArray() {\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    Byte[] converted = conversionService.convert(byteArray, Byte[].class);\r\n    assertThat(converted).isEqualTo(new Byte[] { 1, 2, 3 });\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToPrimitiveByteArray()",
    "entityType": "method",
    "code": "// gh-14200, SPR-9566\r\n@Test\r\nvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\r\n    byte[] byteArray = new byte[] { 1, 2, 3 };\r\n    byte[] result = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(result).isSameAs(byteArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntArray()",
    "entityType": "method",
    "code": "// gh-14200, SPR-9566\r\n@Test\r\nvoid convertIntArrayToIntArray() {\r\n    int[] intArray = new int[] { 1, 2, 3 };\r\n    int[] result = conversionService.convert(intArray, int[].class);\r\n    assertThat(result).isSameAs(intArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfNonStringifiable()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertListOfNonStringifiable() {\r\n    List<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    try {\r\n        conversionService.convert(list, String.class);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getMessage()).contains(list.getClass().getName());\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n        assertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfStringToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertListOfStringToString() {\r\n    List<String> list = List.of(\"Foo\", \"Bar\");\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfListToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertListOfListToString() {\r\n    List<String> list1 = List.of(\"Foo\", \"Bar\");\r\n    List<String> list2 = List.of(\"Baz\", \"Boop\");\r\n    List<List<String>> list = List.of(list1, list2);\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToCollection() throws Exception {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(foo, new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCollectionToCollectionNull() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(null, TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNotGeneric()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\nvoid convertCollectionToCollectionNotGeneric() {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\r\n    assertThat(bar).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionSpecialCaseSourceImpl()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\r\n    Map map = new LinkedHashMap();\r\n    map.put(\"1\", \"1\");\r\n    map.put(\"2\", \"2\");\r\n    map.put(\"3\", \"3\");\r\n    Collection values = map.values();\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(values, TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#collection()",
    "entityType": "method",
    "code": "@Test\r\nvoid collection() {\r\n    List<String> strings = List.of(\"3\", \"9\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> integers = (List<Integer>) conversionService.convert(strings, TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).containsExactly(3, 9);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertMapToMap()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertMapToMap() throws Exception {\r\n    Map<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\r\n    assertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertHashMapValuesToList()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertHashMapValuesToList() {\r\n    Map<String, Integer> hashMap = new LinkedHashMap<>();\r\n    hashMap.put(\"1\", 1);\r\n    hashMap.put(\"2\", 2);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> converted = conversionService.convert(hashMap.values(), List.class);\r\n    assertThat(converted).containsExactly(1, 2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#map()",
    "entityType": "method",
    "code": "@Test\r\nvoid map() {\r\n    Map<String, String> strings = new HashMap<>();\r\n    strings.put(\"3\", \"9\");\r\n    strings.put(\"6\", \"31\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).contains(entry(3, 9), entry(6, 31));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPropertiesToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertPropertiesToString() {\r\n    Properties foo = new Properties();\r\n    foo.setProperty(\"1\", \"BAR\");\r\n    foo.setProperty(\"2\", \"BAZ\");\r\n    String result = conversionService.convert(foo, String.class);\r\n    assertThat(result).contains(\"1=BAR\", \"2=BAZ\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToProperties()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToProperties() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        a=b\r\n        c=2\r\n        d=\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"a\", \"b\"), entry(\"c\", \"2\"), entry(\"d\", \"\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToPropertiesWithLeadingSpaces()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToPropertiesWithLeadingSpaces() {\r\n    Properties result = conversionService.convert(\"\"\"\r\n        \\s  foo=bar\r\n        \\s   bar=baz\r\n        \\s    baz=boo\"\"\", Properties.class);\r\n    assertThat(result).contains(entry(\"foo\", \"bar\"), entry(\"bar\", \"baz\"), entry(\"baz\", \"boo\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringWithValueOfMethodPresentUsingToString()",
    "entityType": "method",
    "code": "// generic object conversion\r\n@Test\r\nvoid convertObjectToStringWithValueOfMethodPresentUsingToString() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(new ISBN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(0);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()",
    "entityType": "method",
    "code": "/**\r\n * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\r\n */\r\n@Test\r\nvoid convertObjectToObjectUsingValueOfMethod() {\r\n    ISBN.reset();\r\n    assertThat(conversionService.convert(\"123456789\", ISBN.class)).isEqualTo(new ISBN(\"123456789\"));\r\n    assertThat(ISBN.valueOfCount).as(\"valueOf() invocations\").isEqualTo(1);\r\n    // valueOf() invokes the constructor\r\n    assertThat(ISBN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\r\n    assertThat(ISBN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\r\n}",
    "comment": "\n\t * @see org.springframework.core.convert.support.ObjectToObjectConverterTests\n\t "
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringUsingToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToStringUsingToString() {\r\n    SSN.reset();\r\n    assertThat(conversionService.convert(new SSN(\"123456789\"), String.class)).isEqualTo(\"123456789\");\r\n    assertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(1);\r\n    assertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingObjectConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectUsingObjectConstructor() {\r\n    SSN.reset();\r\n    assertThat(conversionService.convert(\"123456789\", SSN.class)).isEqualTo(new SSN(\"123456789\"));\r\n    assertThat(SSN.constructorCount).as(\"constructor invocations\").isEqualTo(2);\r\n    assertThat(SSN.toStringCount).as(\"toString() invocations\").isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToTimezone()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToTimezone() {\r\n    assertThat(conversionService.convert(\"GMT+2\", TimeZone.class).getID()).isEqualTo(\"GMT+02:00\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringWithJavaTimeOfMethodPresent()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToStringWithJavaTimeOfMethodPresent() {\r\n    assertThat(conversionService.convert(ZoneId.of(\"GMT+1\"), String.class)).startsWith(\"GMT+\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToStringNotSupported()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToStringNotSupported() {\r\n    assertThat(conversionService.canConvert(TestEntity.class, String.class)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectWithJavaTimeOfMethod()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectWithJavaTimeOfMethod() {\r\n    assertThat(conversionService.convert(\"GMT+1\", ZoneId.class)).isEqualTo(ZoneId.of(\"GMT+1\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectNoValueOfMethodOrConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectNoValueOfMethodOrConstructor() {\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(3L, SSN.class));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectFinderMethod()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectFinderMethod() {\r\n    TestEntity e = conversionService.convert(1L, TestEntity.class);\r\n    assertThat(e.getId()).isEqualTo(Long.valueOf(1));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectFinderMethodWithNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectFinderMethodWithNull() {\r\n    TestEntity entity = (TestEntity) conversionService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(TestEntity.class));\r\n    assertThat(entity).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectFinderMethodWithIdConversion()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToObjectFinderMethodWithIdConversion() {\r\n    TestEntity entity = conversionService.convert(\"1\", TestEntity.class);\r\n    assertThat(entity.getId()).isEqualTo(Long.valueOf(1));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCharArrayToString()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCharArrayToString() {\r\n    String converted = conversionService.convert(new char[] { 'a', 'b', 'c' }, String.class);\r\n    assertThat(converted).isEqualTo(\"a,b,c\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToCharArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToCharArray() {\r\n    char[] converted = conversionService.convert(\"a,b,c\", char[].class);\r\n    assertThat(converted).containsExactly('a', 'b', 'c');\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertStringToCustomCharArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertStringToCustomCharArray() {\r\n    conversionService.addConverter(String.class, char[].class, String::toCharArray);\r\n    char[] converted = conversionService.convert(\"abc\", char[].class);\r\n    assertThat(converted).containsExactly('a', 'b', 'c');\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#multidimensionalArrayToListConversionShouldConvertEntriesCorrectly()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid multidimensionalArrayToListConversionShouldConvertEntriesCorrectly() {\r\n    String[][] grid = new String[][] { { \"1\", \"2\", \"3\", \"4\" }, { \"5\", \"6\", \"7\", \"8\" }, { \"9\", \"10\", \"11\", \"12\" } };\r\n    List<String[]> converted = conversionService.convert(grid, List.class);\r\n    String[][] convertedBack = conversionService.convert(converted, String[][].class);\r\n    assertThat(convertedBack).isEqualTo(grid);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCannotOptimizeArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertCannotOptimizeArray() {\r\n    conversionService.addConverter(Byte.class, Byte.class, source -> (byte) (source + 1));\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    byte[] converted = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(converted).isNotSameAs(byteArray);\r\n    assertThat(converted).containsExactly(2, 3, 4);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptional()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid convertObjectToOptional() {\r\n    Method method = ClassUtils.getMethod(TestEntity.class, \"handleOptionalValue\", Optional.class);\r\n    MethodParameter parameter = new MethodParameter(method, 0);\r\n    TypeDescriptor descriptor = new TypeDescriptor(parameter);\r\n    Object actual = conversionService.convert(\"1,2,3\", TypeDescriptor.valueOf(String.class), descriptor);\r\n    assertThat(actual.getClass()).isEqualTo(Optional.class);\r\n    assertThat(((Optional<List<Integer>>) actual)).contains(List.of(1, 2, 3));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToOptionalNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertObjectToOptionalNull() {\r\n    assertThat(conversionService.convert(null, TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(null, Optional.class)).isSameAs(Optional.empty());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertExistingOptional()",
    "entityType": "method",
    "code": "@Test\r\nvoid convertExistingOptional() {\r\n    assertThat(conversionService.convert(Optional.empty(), TypeDescriptor.valueOf(Object.class), TypeDescriptor.valueOf(Optional.class))).isSameAs(Optional.empty());\r\n    assertThat((Object) conversionService.convert(Optional.empty(), Optional.class)).isSameAs(Optional.empty());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.DefaultConversionServiceTests#handlerMethod(List<Color>)",
    "entityType": "method",
    "code": "public void handlerMethod(List<Color> color) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ColorConverter",
    "entityType": "class",
    "code": "@Override\r\npublic Color convert(String source) {\r\n    if (!source.startsWith(\"#\")) {\r\n        source = \"#\" + source;\r\n    }\r\n    return Color.decode(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ColorConverter#convert(String)",
    "entityType": "method",
    "code": "@Override\r\npublic Color convert(String source) {\r\n    if (!source.startsWith(\"#\")) {\r\n        source = \"#\" + source;\r\n    }\r\n    return Color.decode(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.CustomNumber",
    "entityType": "class",
    "code": "@Override\r\npublic double doubleValue() {\r\n    return 0;\r\n}\n@Override\r\npublic float floatValue() {\r\n    return 0;\r\n}\n@Override\r\npublic int intValue() {\r\n    return 0;\r\n}\n@Override\r\npublic long longValue() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.CustomNumber#doubleValue()",
    "entityType": "method",
    "code": "@Override\r\npublic double doubleValue() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.CustomNumber#floatValue()",
    "entityType": "method",
    "code": "@Override\r\npublic float floatValue() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.CustomNumber#intValue()",
    "entityType": "method",
    "code": "@Override\r\npublic int intValue() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.CustomNumber#longValue()",
    "entityType": "method",
    "code": "@Override\r\npublic long longValue() {\r\n    return 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestEntity",
    "entityType": "class",
    "code": "private Long id;\npublic TestEntity(Long id) {\r\n    this.id = id;\r\n}\npublic Long getId() {\r\n    return id;\r\n}\npublic static TestEntity findTestEntity(Long id) {\r\n    return new TestEntity(id);\r\n}\npublic void handleOptionalValue(Optional<List<Integer>> value) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestEntity#getId()",
    "entityType": "method",
    "code": "public Long getId() {\r\n    return id;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestEntity#findTestEntity(Long)",
    "entityType": "method",
    "code": "public static TestEntity findTestEntity(Long id) {\r\n    return new TestEntity(id);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.TestEntity#handleOptionalValue(Optional<List<Integer>>)",
    "entityType": "method",
    "code": "public void handleOptionalValue(Optional<List<Integer>> value) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ListWrapper",
    "entityType": "class",
    "code": "private List<?> list;\npublic ListWrapper(List<?> list) {\r\n    this.list = list;\r\n}\npublic List<?> getList() {\r\n    return list;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ListWrapper#getList()",
    "entityType": "method",
    "code": "public List<?> getList() {\r\n    return list;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.SSN",
    "entityType": "class",
    "code": "static int constructorCount = 0;\nstatic int toStringCount = 0;\nstatic void reset() {\r\n    constructorCount = 0;\r\n    toStringCount = 0;\r\n}\nprivate final String value;\npublic SSN(String value) {\r\n    constructorCount++;\r\n    this.value = value;\r\n}\n@Override\r\npublic boolean equals(@Nullable Object o) {\r\n    if (!(o instanceof SSN ssn)) {\r\n        return false;\r\n    }\r\n    return this.value.equals(ssn.value);\r\n}\n@Override\r\npublic int hashCode() {\r\n    return value.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    toStringCount++;\r\n    return value;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.SSN#reset()",
    "entityType": "method",
    "code": "static void reset() {\r\n    constructorCount = 0;\r\n    toStringCount = 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.SSN#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object o) {\r\n    if (!(o instanceof SSN ssn)) {\r\n        return false;\r\n    }\r\n    return this.value.equals(ssn.value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.SSN#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return value.hashCode();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.SSN#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    toStringCount++;\r\n    return value;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN",
    "entityType": "class",
    "code": "static int constructorCount = 0;\nstatic int toStringCount = 0;\nstatic int valueOfCount = 0;\nstatic void reset() {\r\n    constructorCount = 0;\r\n    toStringCount = 0;\r\n    valueOfCount = 0;\r\n}\nprivate final String value;\npublic ISBN(String value) {\r\n    constructorCount++;\r\n    this.value = value;\r\n}\n@Override\r\npublic boolean equals(@Nullable Object o) {\r\n    if (!(o instanceof ISBN isbn)) {\r\n        return false;\r\n    }\r\n    return this.value.equals(isbn.value);\r\n}\n@Override\r\npublic int hashCode() {\r\n    return value.hashCode();\r\n}\n@Override\r\npublic String toString() {\r\n    toStringCount++;\r\n    return value;\r\n}\n@SuppressWarnings(\"unused\")\r\npublic static ISBN valueOf(String value) {\r\n    valueOfCount++;\r\n    return new ISBN(value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN#reset()",
    "entityType": "method",
    "code": "static void reset() {\r\n    constructorCount = 0;\r\n    toStringCount = 0;\r\n    valueOfCount = 0;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN#equals(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic boolean equals(@Nullable Object o) {\r\n    if (!(o instanceof ISBN isbn)) {\r\n        return false;\r\n    }\r\n    return this.value.equals(isbn.value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN#hashCode()",
    "entityType": "method",
    "code": "@Override\r\npublic int hashCode() {\r\n    return value.hashCode();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN#toString()",
    "entityType": "method",
    "code": "@Override\r\npublic String toString() {\r\n    toStringCount++;\r\n    return value;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.converter.ISBN#valueOf(String)",
    "entityType": "method",
    "code": "@SuppressWarnings(\"unused\")\r\npublic static ISBN valueOf(String value) {\r\n    valueOfCount++;\r\n    return new ISBN(value);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "entityType": "class",
    "code": "private final GenericConversionService conversionService = new DefaultConversionService();\n@BeforeEach\r\nvoid setup() {\r\n    conversionService.addConverter(new ByteArrayToOtherTypeConverter());\r\n    conversionService.addConverter(new OtherTypeToByteArrayConverter());\r\n}\n@Test\r\nvoid byteArrayToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer convert = conversionService.convert(bytes, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}\n@Test\r\nvoid byteBufferToByteArray() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    byte[] convert = conversionService.convert(byteBuffer, byte[].class);\r\n    assertThat(convert).isNotSameAs(bytes);\r\n    assertThat(convert).isEqualTo(bytes);\r\n}\n@Test\r\nvoid byteBufferToOtherType() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    OtherType convert = conversionService.convert(byteBuffer, OtherType.class);\r\n    assertThat(convert.bytes).isNotSameAs(bytes);\r\n    assertThat(convert.bytes).isEqualTo(bytes);\r\n}\n@Test\r\nvoid otherTypeToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    OtherType otherType = new OtherType(bytes);\r\n    ByteBuffer convert = conversionService.convert(otherType, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}\n@Test\r\nvoid byteBufferToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    ByteBuffer convert = conversionService.convert(byteBuffer, ByteBuffer.class);\r\n    assertThat(convert).isNotSameAs(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(ByteBuffer.wrap(bytes));\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}\nprivate static class OtherType {\r\n\r\n    private byte[] bytes;\r\n\r\n    public OtherType(byte[] bytes) {\r\n        this.bytes = bytes;\r\n    }\r\n}\nprivate static class ByteArrayToOtherTypeConverter implements Converter<byte[], OtherType> {\r\n\r\n    @Override\r\n    public OtherType convert(byte[] source) {\r\n        return new OtherType(source);\r\n    }\r\n}\nprivate static class OtherTypeToByteArrayConverter implements Converter<OtherType, byte[]> {\r\n\r\n    @Override\r\n    public byte[] convert(OtherType source) {\r\n        return source.bytes;\r\n    }\r\n}",
    "comment": "\n * Tests for {@link ByteBufferConverter}.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n "
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#setup()",
    "entityType": "method",
    "code": "@BeforeEach\r\nvoid setup() {\r\n    conversionService.addConverter(new ByteArrayToOtherTypeConverter());\r\n    conversionService.addConverter(new OtherTypeToByteArrayConverter());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#byteArrayToByteBuffer()",
    "entityType": "method",
    "code": "@Test\r\nvoid byteArrayToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer convert = conversionService.convert(bytes, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid byteBufferToByteArray() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    byte[] convert = conversionService.convert(byteBuffer, byte[].class);\r\n    assertThat(convert).isNotSameAs(bytes);\r\n    assertThat(convert).isEqualTo(bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToOtherType()",
    "entityType": "method",
    "code": "@Test\r\nvoid byteBufferToOtherType() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    OtherType convert = conversionService.convert(byteBuffer, OtherType.class);\r\n    assertThat(convert.bytes).isNotSameAs(bytes);\r\n    assertThat(convert.bytes).isEqualTo(bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#otherTypeToByteBuffer()",
    "entityType": "method",
    "code": "@Test\r\nvoid otherTypeToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    OtherType otherType = new OtherType(bytes);\r\n    ByteBuffer convert = conversionService.convert(otherType, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteBuffer()",
    "entityType": "method",
    "code": "@Test\r\nvoid byteBufferToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    ByteBuffer convert = conversionService.convert(byteBuffer, ByteBuffer.class);\r\n    assertThat(convert).isNotSameAs(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(ByteBuffer.wrap(bytes));\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.OtherType",
    "entityType": "class",
    "code": "private byte[] bytes;\npublic OtherType(byte[] bytes) {\r\n    this.bytes = bytes;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteArrayToOtherTypeConverter",
    "entityType": "class",
    "code": "@Override\r\npublic OtherType convert(byte[] source) {\r\n    return new OtherType(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.ByteArrayToOtherTypeConverter#convert(byte[])",
    "entityType": "method",
    "code": "@Override\r\npublic OtherType convert(byte[] source) {\r\n    return new OtherType(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.convert.support.OtherTypeToByteArrayConverter",
    "entityType": "class",
    "code": "@Override\r\npublic byte[] convert(OtherType source) {\r\n    return source.bytes;\r\n}",
    "comment": ""
  }
]