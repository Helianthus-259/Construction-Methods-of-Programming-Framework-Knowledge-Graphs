[
  {
    "entityId": "org.springframework.core.TypedFields",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods",
    "entityType": "class",
    "code": "List<CharSequence> charSequenceReturn();\nvoid charSequenceParameter(List<CharSequence> cs);\n<R extends CharSequence & Serializable> R boundedTypeVariableResult();\nMap<String, ? extends List<? extends CharSequence>> boundedTypeVariableWildcardResult();\nvoid nested(Map<Map<String, Integer>, Map<Byte, Long>> p);\nvoid typedParameter(T p);\nT typedReturn();\nSet<?> wildcardSet();\nList<String> list1();\nList<String> list2();\nSomeRepository<?> someRepository();\nSubRepository<?> subRepository();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#charSequenceReturn()",
    "entityType": "method",
    "code": "List<CharSequence> charSequenceReturn();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#charSequenceParameter(List<CharSequence>)",
    "entityType": "method",
    "code": "void charSequenceParameter(List<CharSequence> cs);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#boundedTypeVariableResult()",
    "entityType": "method",
    "code": "<R extends CharSequence & Serializable> R boundedTypeVariableResult();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#boundedTypeVariableWildcardResult()",
    "entityType": "method",
    "code": "Map<String, ? extends List<? extends CharSequence>> boundedTypeVariableWildcardResult();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#nested(Map<Map<String,Integer>,Map<Byte,Long>>)",
    "entityType": "method",
    "code": "void nested(Map<Map<String, Integer>, Map<Byte, Long>> p);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#typedParameter(T)",
    "entityType": "method",
    "code": "void typedParameter(T p);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#typedReturn()",
    "entityType": "method",
    "code": "T typedReturn();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#wildcardSet()",
    "entityType": "method",
    "code": "Set<?> wildcardSet();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#list1()",
    "entityType": "method",
    "code": "List<String> list1();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#list2()",
    "entityType": "method",
    "code": "List<String> list2();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#someRepository()",
    "entityType": "method",
    "code": "SomeRepository<?> someRepository();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#subRepository()",
    "entityType": "method",
    "code": "SubRepository<?> subRepository();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TypedMethods",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AssignmentBase",
    "entityType": "class",
    "code": "public O o;\npublic C c;\npublic S s;\npublic List<O> listo;\npublic List<C> listc;\npublic List<S> lists;\npublic List<?> listAnon;\npublic List<? extends O> listxo;\npublic List<? extends C> listxc;\npublic List<? extends S> listxs;\npublic List<? super O> listso;\npublic List<? super C> listsc;\npublic List<? super S> listss;\npublic O[] oarray;\npublic C[] carray;\npublic S[] sarray;\npublic Collection<C> collectionc;\npublic Collection<? extends C> collectionxc;\npublic Map<? super Integer, List<String>> complexWildcard1;\npublic MultiValueMap<Number, String> complexWildcard2;\npublic Collection<? extends Collection<? extends CharSequence>> complexWildcard3;\npublic List<List<String>> complexWildcard4;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Assignment",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ClassArguments",
    "entityType": "class",
    "code": "<T> T typedArgumentFirst(Class<T> arg0, Class<?> arg1, Class<Object> arg2);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ClassArguments#typedArgumentFirst(Class<T>,Class<?>,Class<Object>)",
    "entityType": "method",
    "code": "<T> T typedArgumentFirst(Class<T> arg0, Class<?> arg1, Class<Object> arg2);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Constructors",
    "entityType": "class",
    "code": "public Constructors(List<CharSequence> p) {\r\n}\npublic Constructors(Map<T, Long> p) {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TypedConstructors",
    "entityType": "class",
    "code": "public TypedConstructors(List<CharSequence> p) {\r\n    super(p);\r\n}\npublic TypedConstructors(Map<String, Long> p) {\r\n    super(p);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyInterfaceType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyGenericInterfaceType",
    "entityType": "class",
    "code": "private final Class<T> type;\npublic MyGenericInterfaceType(Class<T> type) {\r\n    this.type = type;\r\n}\n@Override\r\npublic ResolvableType getResolvableType() {\r\n    if (this.type == null) {\r\n        return null;\r\n    }\r\n    return ResolvableType.forClassWithGenerics(getClass(), this.type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyGenericInterfaceType#getResolvableType()",
    "entityType": "method",
    "code": "@Override\r\npublic ResolvableType getResolvableType() {\r\n    if (this.type == null) {\r\n        return null;\r\n    }\r\n    return ResolvableType.forClassWithGenerics(getClass(), this.type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MySimpleInterfaceType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MySimpleInterfaceTypeWithImplementsRaw",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ExtendsMySimpleInterfaceTypeWithImplementsRaw",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyCollectionInterfaceType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MySuperclassType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MySimpleSuperclassType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyCollectionSuperclassType",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Consumer",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SubConsumer",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Wildcard",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.WildcardFixed",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.WildcardConsumer",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.DoubleWildcard",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.DoubleWildcardFixed",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.DoubleWildcardConsumer",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.VariableNameSwitch",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ListOfGenericArray",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ListOfListSupplier",
    "entityType": "class",
    "code": "List<List<T>> get();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ListOfListSupplier#get()",
    "entityType": "method",
    "code": "List<List<T>> get();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Foo",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Bar",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.EnclosedInParameterizedType",
    "entityType": "class",
    "code": "static class InnerRaw {\r\n}\nclass InnerTyped<Y> {\r\n\r\n    public T field;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.InnerRaw",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.InnerTyped",
    "entityType": "class",
    "code": "public T field;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TypedEnclosedInParameterizedType",
    "entityType": "class",
    "code": "class TypedInnerTyped extends InnerTyped<Long> {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TypedInnerTyped",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.IProvider",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.IBase",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AbstractBase",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BaseImplementation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BaseProvider",
    "entityType": "class",
    "code": "public Collection<IBase<BT>> stuff;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UnresolvedWithGenerics",
    "entityType": "class",
    "code": "Set<Integer> set;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.A",
    "entityType": "class",
    "code": "void doA();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.A#doA()",
    "entityType": "method",
    "code": "void doA();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.B",
    "entityType": "class",
    "code": "void doB();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.B#doB()",
    "entityType": "method",
    "code": "void doB();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ABClient",
    "entityType": "class",
    "code": "public T field;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AwithB",
    "entityType": "class",
    "code": "@Override\r\npublic void doA() ;\n@Override\r\npublic void doB() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AwithB#doA()",
    "entityType": "method",
    "code": "@Override\r\npublic void doA() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AwithB#doB()",
    "entityType": "method",
    "code": "@Override\r\npublic void doB() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AwithoutB",
    "entityType": "class",
    "code": "@Override\r\npublic void doA() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AwithoutB#doA()",
    "entityType": "method",
    "code": "@Override\r\npublic void doA() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.RecursiveMap",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.RecursiveMapWithInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ResolvableTypeAssert",
    "entityType": "class",
    "code": "public ResolvableTypeAssert(ResolvableType actual) {\r\n    super(actual, ResolvableTypeAssert.class);\r\n}\npublic ResolvableTypeAssert isAssignableFrom(ResolvableType... types) {\r\n    for (ResolvableType type : types) {\r\n        if (!actual.isAssignableFrom(type)) {\r\n            throw new AssertionError(\"Expecting \" + describe(actual) + \" to be assignable from \" + describe(type));\r\n        }\r\n    }\r\n    return this;\r\n}\npublic ResolvableTypeAssert isNotAssignableFrom(ResolvableType... types) {\r\n    for (ResolvableType type : types) {\r\n        if (actual.isAssignableFrom(type)) {\r\n            throw new AssertionError(\"Expecting \" + describe(actual) + \" to not be assignable from \" + describe(type));\r\n        }\r\n    }\r\n    return this;\r\n}\nprivate String describe(ResolvableType type) {\r\n    if (type == ResolvableType.NONE) {\r\n        return \"NONE\";\r\n    }\r\n    if (type.getType().getClass().equals(Class.class)) {\r\n        return type.toString();\r\n    }\r\n    return type.getType() + \":\" + type;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ResolvableTypeAssert#isAssignableFrom(ResolvableType)",
    "entityType": "method",
    "code": "public ResolvableTypeAssert isAssignableFrom(ResolvableType... types) {\r\n    for (ResolvableType type : types) {\r\n        if (!actual.isAssignableFrom(type)) {\r\n            throw new AssertionError(\"Expecting \" + describe(actual) + \" to be assignable from \" + describe(type));\r\n        }\r\n    }\r\n    return this;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ResolvableTypeAssert#isNotAssignableFrom(ResolvableType)",
    "entityType": "method",
    "code": "public ResolvableTypeAssert isNotAssignableFrom(ResolvableType... types) {\r\n    for (ResolvableType type : types) {\r\n        if (actual.isAssignableFrom(type)) {\r\n            throw new AssertionError(\"Expecting \" + describe(actual) + \" to not be assignable from \" + describe(type));\r\n        }\r\n    }\r\n    return this;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ResolvableTypeAssert#describe(ResolvableType)",
    "entityType": "method",
    "code": "private String describe(ResolvableType type) {\r\n    if (type == ResolvableType.NONE) {\r\n        return \"NONE\";\r\n    }\r\n    if (type.getType().getClass().equals(Class.class)) {\r\n        return type.toString();\r\n    }\r\n    return type.getType() + \":\" + type;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests",
    "entityType": "class",
    "code": "@Test\r\nvoid forField() throws Exception {\r\n    Type type = SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n}\n@Test\r\nvoid forMethodParameter() throws Exception {\r\n    Method method = Methods.class.getDeclaredMethod(\"method\", Class.class, Object.class);\r\n    Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(method, 0));\r\n    assertThat(type.toString()).isEqualTo(\"java.lang.Class<T>\");\r\n    assertSerializable(type);\r\n}\n@Test\r\nvoid forConstructor() throws Exception {\r\n    Constructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class);\r\n    Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(constructor, 0));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n}\n@Test\r\nvoid classType() throws Exception {\r\n    Type type = SerializableTypeWrapper.forField(Fields.class.getField(\"classType\"));\r\n    assertThat(type.toString()).isEqualTo(\"class java.lang.String\");\r\n    assertSerializable(type);\r\n}\n@Test\r\nvoid genericArrayType() throws Exception {\r\n    GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField(\"genericArrayType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>[]\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getGenericComponentType());\r\n}\n@Test\r\nvoid parameterizedType() throws Exception {\r\n    ParameterizedType type = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getOwnerType());\r\n    assertSerializable(type.getRawType());\r\n    assertSerializable(type.getActualTypeArguments());\r\n    assertSerializable(type.getActualTypeArguments()[0]);\r\n}\n@Test\r\nvoid typeVariableType() throws Exception {\r\n    TypeVariable<?> type = (TypeVariable<?>) SerializableTypeWrapper.forField(Fields.class.getField(\"typeVariableType\"));\r\n    assertThat(type.toString()).isEqualTo(\"T\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getBounds());\r\n}\n@Test\r\nvoid wildcardType() throws Exception {\r\n    ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"wildcardType\"));\r\n    WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0];\r\n    assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getLowerBounds());\r\n    assertSerializable(type.getUpperBounds());\r\n}\nprivate void assertSerializable(Object source) throws Exception {\r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n    ObjectOutputStream oos = new ObjectOutputStream(bos);\r\n    oos.writeObject(source);\r\n    oos.close();\r\n    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\r\n    assertThat(ois.readObject()).isEqualTo(source);\r\n}\nstatic class Fields<T> {\r\n\r\n    public String classType;\r\n\r\n    public List<String>[] genericArrayType;\r\n\r\n    public List<String> parameterizedType;\r\n\r\n    public T typeVariableType;\r\n\r\n    public List<? extends CharSequence> wildcardType;\r\n}\ninterface Methods {\r\n\r\n    <T> List<T> method(Class<T> p1, T p2);\r\n}\nstatic class Constructors {\r\n\r\n    public Constructors(List<String> p) {\r\n    }\r\n}",
    "comment": "\n * Tests for {@link SerializableTypeWrapper}.\n *\n * @author Phillip Webb\n "
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#forField()",
    "entityType": "method",
    "code": "@Test\r\nvoid forField() throws Exception {\r\n    Type type = SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#forMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid forMethodParameter() throws Exception {\r\n    Method method = Methods.class.getDeclaredMethod(\"method\", Class.class, Object.class);\r\n    Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(method, 0));\r\n    assertThat(type.toString()).isEqualTo(\"java.lang.Class<T>\");\r\n    assertSerializable(type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#forConstructor()",
    "entityType": "method",
    "code": "@Test\r\nvoid forConstructor() throws Exception {\r\n    Constructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class);\r\n    Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(constructor, 0));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#classType()",
    "entityType": "method",
    "code": "@Test\r\nvoid classType() throws Exception {\r\n    Type type = SerializableTypeWrapper.forField(Fields.class.getField(\"classType\"));\r\n    assertThat(type.toString()).isEqualTo(\"class java.lang.String\");\r\n    assertSerializable(type);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#genericArrayType()",
    "entityType": "method",
    "code": "@Test\r\nvoid genericArrayType() throws Exception {\r\n    GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField(\"genericArrayType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>[]\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getGenericComponentType());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#parameterizedType()",
    "entityType": "method",
    "code": "@Test\r\nvoid parameterizedType() throws Exception {\r\n    ParameterizedType type = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getOwnerType());\r\n    assertSerializable(type.getRawType());\r\n    assertSerializable(type.getActualTypeArguments());\r\n    assertSerializable(type.getActualTypeArguments()[0]);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#typeVariableType()",
    "entityType": "method",
    "code": "@Test\r\nvoid typeVariableType() throws Exception {\r\n    TypeVariable<?> type = (TypeVariable<?>) SerializableTypeWrapper.forField(Fields.class.getField(\"typeVariableType\"));\r\n    assertThat(type.toString()).isEqualTo(\"T\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getBounds());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#wildcardType()",
    "entityType": "method",
    "code": "@Test\r\nvoid wildcardType() throws Exception {\r\n    ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"wildcardType\"));\r\n    WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0];\r\n    assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getLowerBounds());\r\n    assertSerializable(type.getUpperBounds());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SerializableTypeWrapperTests#assertSerializable(Object)",
    "entityType": "method",
    "code": "private void assertSerializable(Object source) throws Exception {\r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n    ObjectOutputStream oos = new ObjectOutputStream(bos);\r\n    oos.writeObject(source);\r\n    oos.close();\r\n    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\r\n    assertThat(ois.readObject()).isEqualTo(source);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Fields",
    "entityType": "class",
    "code": "public String classType;\npublic List<String>[] genericArrayType;\npublic List<String> parameterizedType;\npublic T typeVariableType;\npublic List<? extends CharSequence> wildcardType;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods",
    "entityType": "class",
    "code": "<T> List<T> method(Class<T> p1, T p2);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Methods#method(Class<T>,T)",
    "entityType": "method",
    "code": "<T> List<T> method(Class<T> p1, T p2);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Constructors",
    "entityType": "class",
    "code": "public Constructors(List<String> p) {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests",
    "entityType": "class",
    "code": "@Test\r\nvoid serializeAndDeserializeStringWithDefaultSerializer() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    byte[] bytes = toBytes.convert(\"Testing\");\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\r\n}\n@Test\r\nvoid serializeAndDeserializeStringWithExplicitSerializer() {\r\n    SerializingConverter toBytes = new SerializingConverter(new DefaultSerializer());\r\n    byte[] bytes = toBytes.convert(\"Testing\");\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\r\n}\n@Test\r\nvoid nonSerializableObject() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> toBytes.convert(new Object())).havingCause().isInstanceOf(IllegalArgumentException.class).withMessageContaining(\"requires a Serializable payload\");\r\n}\n@Test\r\nvoid nonSerializableField() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> toBytes.convert(new UnSerializable())).withCauseInstanceOf(NotSerializableException.class);\r\n}\n@Test\r\nvoid deserializationFailure() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> fromBytes.convert(\"Junk\".getBytes()));\r\n}\n@Test\r\nvoid deserializationWithExplicitClassLoader() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(getClass().getClassLoader());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}\n@Test\r\nvoid deserializationWithExplicitDeserializer() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(new DefaultDeserializer());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}\n@Test\r\nvoid deserializationIOException() {\r\n    ClassNotFoundException classNotFoundException = new ClassNotFoundException();\r\n    try (MockedConstruction<ConfigurableObjectInputStream> mocked = Mockito.mockConstruction(ConfigurableObjectInputStream.class, (mock, context) -> given(mock.readObject()).willThrow(classNotFoundException))) {\r\n        DefaultDeserializer defaultSerializer = new DefaultDeserializer(getClass().getClassLoader());\r\n        assertThat(mocked).isNotNull();\r\n        assertThatIOException().isThrownBy(() -> defaultSerializer.deserialize(new ByteArrayInputStream(\"test\".getBytes()))).withMessage(\"Failed to deserialize object type\").havingCause().isSameAs(classNotFoundException);\r\n    }\r\n}\nstatic class UnSerializable implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    @SuppressWarnings({ \"unused\", \"serial\" })\r\n    private Object object = new Object();\r\n}",
    "comment": "\n * Tests for {@link SerializingConverter} and {@link DeserializingConverter}.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @since 3.0.5\n "
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#serializeAndDeserializeStringWithDefaultSerializer()",
    "entityType": "method",
    "code": "@Test\r\nvoid serializeAndDeserializeStringWithDefaultSerializer() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    byte[] bytes = toBytes.convert(\"Testing\");\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#serializeAndDeserializeStringWithExplicitSerializer()",
    "entityType": "method",
    "code": "@Test\r\nvoid serializeAndDeserializeStringWithExplicitSerializer() {\r\n    SerializingConverter toBytes = new SerializingConverter(new DefaultSerializer());\r\n    byte[] bytes = toBytes.convert(\"Testing\");\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThat(fromBytes.convert(bytes)).isEqualTo(\"Testing\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#nonSerializableObject()",
    "entityType": "method",
    "code": "@Test\r\nvoid nonSerializableObject() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> toBytes.convert(new Object())).havingCause().isInstanceOf(IllegalArgumentException.class).withMessageContaining(\"requires a Serializable payload\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#nonSerializableField()",
    "entityType": "method",
    "code": "@Test\r\nvoid nonSerializableField() {\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> toBytes.convert(new UnSerializable())).withCauseInstanceOf(NotSerializableException.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#deserializationFailure()",
    "entityType": "method",
    "code": "@Test\r\nvoid deserializationFailure() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter();\r\n    assertThatExceptionOfType(SerializationFailedException.class).isThrownBy(() -> fromBytes.convert(\"Junk\".getBytes()));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitClassLoader()",
    "entityType": "method",
    "code": "@Test\r\nvoid deserializationWithExplicitClassLoader() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(getClass().getClassLoader());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#deserializationWithExplicitDeserializer()",
    "entityType": "method",
    "code": "@Test\r\nvoid deserializationWithExplicitDeserializer() {\r\n    DeserializingConverter fromBytes = new DeserializingConverter(new DefaultDeserializer());\r\n    SerializingConverter toBytes = new SerializingConverter();\r\n    String expected = \"SPRING FRAMEWORK\";\r\n    assertThat(fromBytes.convert(toBytes.convert(expected))).isEqualTo(expected);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializationConverterTests#deserializationIOException()",
    "entityType": "method",
    "code": "@Test\r\nvoid deserializationIOException() {\r\n    ClassNotFoundException classNotFoundException = new ClassNotFoundException();\r\n    try (MockedConstruction<ConfigurableObjectInputStream> mocked = Mockito.mockConstruction(ConfigurableObjectInputStream.class, (mock, context) -> given(mock.readObject()).willThrow(classNotFoundException))) {\r\n        DefaultDeserializer defaultSerializer = new DefaultDeserializer(getClass().getClassLoader());\r\n        assertThat(mocked).isNotNull();\r\n        assertThatIOException().isThrownBy(() -> defaultSerializer.deserialize(new ByteArrayInputStream(\"test\".getBytes()))).withMessage(\"Failed to deserialize object type\").havingCause().isSameAs(classNotFoundException);\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.UnSerializable",
    "entityType": "class",
    "code": "private static final long serialVersionUID = 1L;\n@SuppressWarnings({ \"unused\", \"serial\" })\r\nprivate Object object = new Object();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializerTests",
    "entityType": "class",
    "code": "private static final String SPRING_FRAMEWORK = \"Spring Framework\";\n@Test\r\nvoid serializeToByteArray() throws IOException {\r\n    class SpyStringSerializer implements Serializer<String> {\r\n\r\n        String expectedObject;\r\n\r\n        OutputStream expectedOutputStream;\r\n\r\n        @Override\r\n        public void serialize(String object, OutputStream outputStream) {\r\n            this.expectedObject = object;\r\n            this.expectedOutputStream = outputStream;\r\n        }\r\n    }\r\n    SpyStringSerializer serializer = new SpyStringSerializer();\r\n    serializer.serializeToByteArray(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedObject).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedOutputStream).isNotNull();\r\n}\n@Test\r\nvoid deserializeToByteArray() throws IOException {\r\n    class SpyStringDeserializer implements Deserializer<String> {\r\n\r\n        InputStream expectedInputStream;\r\n\r\n        @Override\r\n        public String deserialize(InputStream inputStream) {\r\n            this.expectedInputStream = inputStream;\r\n            return SPRING_FRAMEWORK;\r\n        }\r\n    }\r\n    SpyStringDeserializer deserializer = new SpyStringDeserializer();\r\n    Object deserializedObj = deserializer.deserializeFromByteArray(SPRING_FRAMEWORK.getBytes());\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(deserializer.expectedInputStream).isNotNull();\r\n}\n@Test\r\nvoid serializationDelegateWithExplicitSerializerAndDeserializer() throws IOException {\r\n    SerializationDelegate delegate = new SerializationDelegate(new DefaultSerializer(), new DefaultDeserializer());\r\n    byte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\r\n    Object deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n}\n@Test\r\nvoid serializationDelegateWithExplicitClassLoader() throws IOException {\r\n    SerializationDelegate delegate = new SerializationDelegate(getClass().getClassLoader());\r\n    byte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\r\n    Object deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n}",
    "comment": "\n * Tests for {@link Serializer}, {@link Deserializer}, and {@link SerializationDelegate}.\n *\n * @since 6.1\n "
  },
  {
    "entityId": "org.springframework.core.serializer.SerializerTests#serializeToByteArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid serializeToByteArray() throws IOException {\r\n    class SpyStringSerializer implements Serializer<String> {\r\n\r\n        String expectedObject;\r\n\r\n        OutputStream expectedOutputStream;\r\n\r\n        @Override\r\n        public void serialize(String object, OutputStream outputStream) {\r\n            this.expectedObject = object;\r\n            this.expectedOutputStream = outputStream;\r\n        }\r\n    }\r\n    SpyStringSerializer serializer = new SpyStringSerializer();\r\n    serializer.serializeToByteArray(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedObject).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(serializer.expectedOutputStream).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializerTests#deserializeToByteArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid deserializeToByteArray() throws IOException {\r\n    class SpyStringDeserializer implements Deserializer<String> {\r\n\r\n        InputStream expectedInputStream;\r\n\r\n        @Override\r\n        public String deserialize(InputStream inputStream) {\r\n            this.expectedInputStream = inputStream;\r\n            return SPRING_FRAMEWORK;\r\n        }\r\n    }\r\n    SpyStringDeserializer deserializer = new SpyStringDeserializer();\r\n    Object deserializedObj = deserializer.deserializeFromByteArray(SPRING_FRAMEWORK.getBytes());\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n    assertThat(deserializer.expectedInputStream).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.serializer.SerializerTests#serializationDelegateWithExplicitSerializerAndDeserializer()",
    "entityType": "method",
    "code": "@Test\r\nvoid serializationDelegateWithExplicitSerializerAndDeserializer() throws IOException {\r\n    SerializationDelegate delegate = new SerializationDelegate(new DefaultSerializer(), new DefaultDeserializer());\r\n    byte[] serializedObj = delegate.serializeToByteArray(SPRING_FRAMEWORK);\r\n    Object deserializedObj = delegate.deserialize(new ByteArrayInputStream(serializedObj));\r\n    assertThat(deserializedObj).isEqualTo(SPRING_FRAMEWORK);\r\n}",
    "comment": ""
  }
]