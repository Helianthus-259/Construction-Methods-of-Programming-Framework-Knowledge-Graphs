[
  {
    "entityId": "org.springframework.core.annotation.SimpleGeneric#something(T)",
    "entityType": "method",
    "code": "@Order(1)\r\npublic abstract void something(T arg);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalStringGeneric",
    "entityType": "class",
    "code": "@Override\r\n@Transactional\r\npublic void something(final String arg) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalStringGeneric#something(String)",
    "entityType": "method",
    "code": "@Override\r\n@Transactional\r\npublic void something(final String arg) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.NonInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubNonInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalAndOrderedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Order\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nvoid foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
    "entityType": "method",
    "code": "@Order\r\nvoid foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nabstract void foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
    "entityType": "method",
    "code": "@Order\r\nabstract void foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithRepeated",
    "entityType": "class",
    "code": "@MyRepeatable(\"A\")\r\n@MyRepeatableContainer({ @MyRepeatable(\"B\"), @MyRepeatable(\"C\") })\r\n@MyRepeatableMeta1\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithRepeated#foo()",
    "entityType": "method",
    "code": "@MyRepeatable(\"A\")\r\n@MyRepeatableContainer({ @MyRepeatable(\"B\"), @MyRepeatable(\"C\") })\r\n@MyRepeatableMeta1\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MyRepeatableClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubMyRepeatableClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController",
    "entityType": "class",
    "code": "@RequestMapping(value = \"/test\", name = \"foo\")\r\npublic void handleMappedWithValueAttribute() ;\n@RequestMapping(path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithPathAttribute() ;\n@GetMapping(\"/test\")\r\npublic void getMappedWithValueAttribute() ;\n@GetMapping(path = \"/test\")\r\npublic void getMappedWithPathAttribute() ;\n@PostMapping(path = \"/test\")\r\npublic void postMappedWithPathAttribute() ;\n@RequestMapping(value = \"/test\", path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithSamePathAndValueAttributes() ;\n@RequestMapping(value = \"/enigma\", path = \"/test\", name = \"baz\")\r\npublic void handleMappedWithDifferentPathAndValueAttributes() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithValueAttribute()",
    "entityType": "method",
    "code": "@RequestMapping(value = \"/test\", name = \"foo\")\r\npublic void handleMappedWithValueAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@RequestMapping(path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#getMappedWithValueAttribute()",
    "entityType": "method",
    "code": "@GetMapping(\"/test\")\r\npublic void getMappedWithValueAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#getMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@GetMapping(path = \"/test\")\r\npublic void getMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@PostMapping(path = \"/test\")\r\npublic void postMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithSamePathAndValueAttributes()",
    "entityType": "method",
    "code": "@RequestMapping(value = \"/test\", path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithSamePathAndValueAttributes() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithDifferentPathAndValueAttributes()",
    "entityType": "method",
    "code": "@RequestMapping(value = \"/enigma\", path = \"/test\", name = \"baz\")\r\npublic void handleMappedWithDifferentPathAndValueAttributes() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SecurityConfig",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.DomainType",
    "entityType": "class",
    "code": "@RootAnnotation\r\nObject directlyAnnotated;\n@ComposedRootAnnotation\r\nObject metaAnnotated;\n@DoublyComposedRootAnnotation\r\nObject metaMetaAnnotated;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.HierarchyClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.GroupOfCharsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithDuplicateAttributeDeclarationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithoutMirroredAliasForClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMirroredAliasForWrongAttributeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForAttributeOfDifferentTypeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForAttributeWithDifferentDefaultValueClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasedComposedTestConfigurationNotMetaPresentClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.GroovyImplicitAliasesSimpleTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.XmlImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ValueImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Location1ImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Location2ImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Location3ImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ValueImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.LocationsImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.XmlFilesImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplicitAliasesWithMissingDefaultValuesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplicitAliasesWithDifferentDefaultValuesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplicitAliasesWithDuplicateValuesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplicitAliasesForAliasPairTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransitiveImplicitAliasesTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransitiveImplicitAliasesForAliasPairTestConfigurationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ComponentScanClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ComponentScanSingleFilterClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TestConfigurationMismatch",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.DefaultOverrideClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.DefaultOverrideImplicitAliasMetaClass1",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.DefaultOverrideImplicitAliasMetaClass2",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.DefaultOverrideExplicitAliasRootMetaMetaClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ValueAttributeMetaMetaClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests",
    "entityType": "class",
    "code": "private final MergedAnnotation<?> missing = MissingMergedAnnotation.getInstance();\n@Test\r\nvoid getTypeThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(this.missing::getType);\r\n}\n@Test\r\nvoid metaTypesReturnsEmptyList() {\r\n    assertThat(this.missing.getMetaTypes()).isEmpty();\r\n}\n@Test\r\nvoid isPresentReturnsFalse() {\r\n    assertThat(this.missing.isPresent()).isFalse();\r\n}\n@Test\r\nvoid isDirectlyPresentReturnsFalse() {\r\n    assertThat(this.missing.isDirectlyPresent()).isFalse();\r\n}\n@Test\r\nvoid isMetaPresentReturnsFalse() {\r\n    assertThat(this.missing.isMetaPresent()).isFalse();\r\n}\n@Test\r\nvoid getDistanceReturnsMinusOne() {\r\n    assertThat(this.missing.getDistance()).isEqualTo(-1);\r\n}\n@Test\r\nvoid getAggregateIndexReturnsMinusOne() {\r\n    assertThat(this.missing.getAggregateIndex()).isEqualTo(-1);\r\n}\n@Test\r\nvoid getSourceReturnsNull() {\r\n    assertThat(this.missing.getSource()).isNull();\r\n}\n@Test\r\nvoid getMetaSourceReturnsNull() {\r\n    assertThat(this.missing.getMetaSource()).isNull();\r\n}\n@Test\r\nvoid getRootReturnsEmptyAnnotation() {\r\n    assertThat(this.missing.getRoot()).isSameAs(this.missing);\r\n}\n@Test\r\nvoid hasNonDefaultValueThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.hasNonDefaultValue(\"value\"));\r\n}\n@Test\r\nvoid hasDefaultValueThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.hasDefaultValue(\"value\"));\r\n}\n@Test\r\nvoid getByteThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getByte(\"value\"));\r\n}\n@Test\r\nvoid getByteArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getByteArray(\"value\"));\r\n}\n@Test\r\nvoid getBooleanThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getBoolean(\"value\"));\r\n}\n@Test\r\nvoid getBooleanArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getBooleanArray(\"value\"));\r\n}\n@Test\r\nvoid getCharThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getChar(\"value\"));\r\n}\n@Test\r\nvoid getCharArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getCharArray(\"value\"));\r\n}\n@Test\r\nvoid getShortThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getShort(\"value\"));\r\n}\n@Test\r\nvoid getShortArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getShortArray(\"value\"));\r\n}\n@Test\r\nvoid getIntThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getInt(\"value\"));\r\n}\n@Test\r\nvoid getIntArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getIntArray(\"value\"));\r\n}\n@Test\r\nvoid getLongThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getLong(\"value\"));\r\n}\n@Test\r\nvoid getLongArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getLongArray(\"value\"));\r\n}\n@Test\r\nvoid getDoubleThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getDouble(\"value\"));\r\n}\n@Test\r\nvoid getDoubleArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getDoubleArray(\"value\"));\r\n}\n@Test\r\nvoid getFloatThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getFloat(\"value\"));\r\n}\n@Test\r\nvoid getFloatArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getFloatArray(\"value\"));\r\n}\n@Test\r\nvoid getStringThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getString(\"value\"));\r\n}\n@Test\r\nvoid getStringArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getStringArray(\"value\"));\r\n}\n@Test\r\nvoid getClassThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getClass(\"value\"));\r\n}\n@Test\r\nvoid getClassArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getClassArray(\"value\"));\r\n}\n@Test\r\nvoid getEnumThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getEnum(\"value\", TestEnum.class));\r\n}\n@Test\r\nvoid getEnumArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getEnumArray(\"value\", TestEnum.class));\r\n}\n@Test\r\nvoid getAnnotationThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getAnnotation(\"value\", TestAnnotation.class));\r\n}\n@Test\r\nvoid getAnnotationArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getAnnotationArray(\"value\", TestAnnotation.class));\r\n}\n@Test\r\nvoid getValueReturnsEmpty() {\r\n    assertThat(this.missing.getValue(\"value\", Integer.class)).isEmpty();\r\n}\n@Test\r\nvoid getDefaultValueReturnsEmpty() {\r\n    assertThat(this.missing.getDefaultValue(\"value\", Integer.class)).isEmpty();\r\n}\n@Test\r\nvoid synthesizeThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(this.missing::synthesize);\r\n}\n@Test\r\nvoid synthesizeWithPredicateWhenPredicateMatchesThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.synthesize(annotation -> true));\r\n}\n@Test\r\nvoid synthesizeWithPredicateWhenPredicateDoesNotMatchReturnsEmpty() {\r\n    assertThat(this.missing.synthesize(annotation -> false)).isEmpty();\r\n}\n@Test\r\nvoid toStringReturnsString() {\r\n    assertThat(this.missing.toString()).isEqualTo(\"(missing)\");\r\n}\n@Test\r\nvoid asAnnotationAttributesReturnsNewAnnotationAttributes() {\r\n    AnnotationAttributes attributes = this.missing.asAnnotationAttributes();\r\n    assertThat(attributes).isEmpty();\r\n    assertThat(this.missing.asAnnotationAttributes()).isNotSameAs(attributes);\r\n}\n@Test\r\nvoid asMapReturnsEmptyMap() {\r\n    Map<String, Object> map = this.missing.asMap();\r\n    assertThat(map).isSameAs(Collections.EMPTY_MAP);\r\n}\n@Test\r\nvoid asMapWithFactoryReturnsNewMapFromFactory() {\r\n    Map<String, Object> map = this.missing.asMap(annotation -> new ConcurrentReferenceHashMap<>());\r\n    assertThat(map).isInstanceOf(ConcurrentReferenceHashMap.class);\r\n}\nprivate static ThrowableTypeAssert<NoSuchElementException> assertThatNoSuchElementException() {\r\n    return assertThatExceptionOfType(NoSuchElementException.class);\r\n}\nprivate enum TestEnum {\r\n\r\n    ONE, TWO, THREE\r\n}\n@Retention(RetentionPolicy.RUNTIME)\r\nprivate @interface TestAnnotation {\r\n}",
    "comment": "\n * Tests for {@link MissingMergedAnnotation}.\n *\n * @author Phillip Webb\n "
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getTypeThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getTypeThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(this.missing::getType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#metaTypesReturnsEmptyList()",
    "entityType": "method",
    "code": "@Test\r\nvoid metaTypesReturnsEmptyList() {\r\n    assertThat(this.missing.getMetaTypes()).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#isPresentReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid isPresentReturnsFalse() {\r\n    assertThat(this.missing.isPresent()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#isDirectlyPresentReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid isDirectlyPresentReturnsFalse() {\r\n    assertThat(this.missing.isDirectlyPresent()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#isMetaPresentReturnsFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid isMetaPresentReturnsFalse() {\r\n    assertThat(this.missing.isMetaPresent()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getDistanceReturnsMinusOne()",
    "entityType": "method",
    "code": "@Test\r\nvoid getDistanceReturnsMinusOne() {\r\n    assertThat(this.missing.getDistance()).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getAggregateIndexReturnsMinusOne()",
    "entityType": "method",
    "code": "@Test\r\nvoid getAggregateIndexReturnsMinusOne() {\r\n    assertThat(this.missing.getAggregateIndex()).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getSourceReturnsNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid getSourceReturnsNull() {\r\n    assertThat(this.missing.getSource()).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getMetaSourceReturnsNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid getMetaSourceReturnsNull() {\r\n    assertThat(this.missing.getMetaSource()).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getRootReturnsEmptyAnnotation()",
    "entityType": "method",
    "code": "@Test\r\nvoid getRootReturnsEmptyAnnotation() {\r\n    assertThat(this.missing.getRoot()).isSameAs(this.missing);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#hasNonDefaultValueThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasNonDefaultValueThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.hasNonDefaultValue(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#hasDefaultValueThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasDefaultValueThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.hasDefaultValue(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getByteThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getByteThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getByte(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getByteArrayThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getByteArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getByteArray(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getBooleanThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getBooleanThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getBoolean(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getBooleanArrayThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getBooleanArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getBooleanArray(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getCharThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getCharThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getChar(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getCharArrayThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getCharArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getCharArray(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getShortThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getShortThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getShort(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getShortArrayThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getShortArrayThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getShortArray(\"value\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MissingMergedAnnotationTests#getIntThrowsNoSuchElementException()",
    "entityType": "method",
    "code": "@Test\r\nvoid getIntThrowsNoSuchElementException() {\r\n    assertThatNoSuchElementException().isThrownBy(() -> this.missing.getInt(\"value\"));\r\n}",
    "comment": ""
  }
]