[
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#combine()",
    "entityType": "method",
    "code": "@Test\r\nvoid combine() {\r\n    assertThat(pathMatcher.combine(null, null)).isEmpty();\r\n    assertThat(pathMatcher.combine(\"/hotels\", null)).isEqualTo(\"/hotels\");\r\n    assertThat(pathMatcher.combine(null, \"/hotels\")).isEqualTo(\"/hotels\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"/booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"booking\")).isEqualTo(\"/hotels/**/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"/booking\")).isEqualTo(\"/hotels/**/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"/booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"{hotel}\")).isEqualTo(\"/hotels/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"{hotel}\")).isEqualTo(\"/hotels/**/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"{hotel}\")).isEqualTo(\"/hotels/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"{hotel}.*\")).isEqualTo(\"/hotels/{hotel}.*\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*/booking\", \"{booking}\")).isEqualTo(\"/hotels/*/booking/{booking}\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel.html\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel.*\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/**\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    assertThat(pathMatcher.combine(\"/*\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    assertThat(pathMatcher.combine(\"/*.*\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    // SPR-8858\r\n    assertThat(pathMatcher.combine(\"/{foo}\", \"/bar\")).isEqualTo(\"/{foo}/bar\");\r\n    // SPR-7970\r\n    assertThat(pathMatcher.combine(\"/user\", \"/user\")).isEqualTo(\"/user/user\");\r\n    // SPR-10062\r\n    assertThat(pathMatcher.combine(\"/{foo:.*[^0-9].*}\", \"/edit/\")).isEqualTo(\"/{foo:.*[^0-9].*}/edit/\");\r\n    // SPR-10554\r\n    assertThat(pathMatcher.combine(\"/1.0\", \"/foo/test\")).isEqualTo(\"/1.0/foo/test\");\r\n    // SPR-12975\r\n    assertThat(pathMatcher.combine(\"/\", \"/hotel\")).isEqualTo(\"/hotel\");\r\n    // SPR-12975\r\n    assertThat(pathMatcher.combine(\"/hotel/\", \"/booking\")).isEqualTo(\"/hotel/booking\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#combineWithTwoFileExtensionPatterns()",
    "entityType": "method",
    "code": "@Test\r\nvoid combineWithTwoFileExtensionPatterns() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> pathMatcher.combine(\"/*.html\", \"/*.txt\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#patternComparator()",
    "entityType": "method",
    "code": "@Test\r\nvoid patternComparator() {\r\n    Comparator<String> comparator = pathMatcher.getPatternComparator(\"/hotels/new\");\r\n    assertThat(comparator.compare(null, null)).isEqualTo(0);\r\n    assertThat(comparator.compare(null, \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/new\", null)).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/new\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/*\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/{hotel}\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/{hotel}\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/booking\", \"/hotels/{hotel}/bookings/{booking}\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}\", \"/hotels/{hotel}/booking\")).isEqualTo(1);\r\n    // SPR-10550\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\", \"/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/**\", \"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/**\", \"/**\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/*/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*/**\", \"/hotels/*\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/new.*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/{hotel}.*\")).isEqualTo(2);\r\n    // SPR-6741\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\", \"/hotels/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/**\", \"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/foo/bar/**\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/foo/bar/**\")).isEqualTo(-1);\r\n    // gh-23125\r\n    assertThat(comparator.compare(\"/hotels/*/bookings/**\", \"/hotels/**\")).isEqualTo(-11);\r\n    // SPR-8683\r\n    assertThat(comparator.compare(\"/**\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    // longer is better\r\n    assertThat(comparator.compare(\"/hotels\", \"/hotels2\")).isEqualTo(1);\r\n    // SPR-13139\r\n    assertThat(comparator.compare(\"*\", \"*/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"*/**\", \"*\")).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#patternComparatorWithDotSeparator()",
    "entityType": "method",
    "code": "@Test\r\nvoid patternComparatorWithDotSeparator() {\r\n    Comparator<String> comparator = dotSeparatedPathMatcher.getPatternComparator(\"price.stock.spring\");\r\n    assertThat(comparator.compare(null, null)).isEqualTo(0);\r\n    assertThat(comparator.compare(\"price.stock.ticker/symbol\", \"price.stock.ticker/symbol\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"price.stock.**\", \"price.stock.ticker\")).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#patternComparatorSort()",
    "entityType": "method",
    "code": "@Test\r\nvoid patternComparatorSort() {\r\n    Comparator<String> comparator = pathMatcher.getPatternComparator(\"/hotels/new\");\r\n    List<String> paths = new ArrayList<>(3);\r\n    paths.add(null);\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", null);\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(null);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", null);\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(\"/hotels/*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/**\");\r\n    paths.add(\"/hotels/*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/*\", \"/hotels/**\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/**\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/*\", \"/hotels/**\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/ne*\");\r\n    paths.add(\"/hotels/n*\");\r\n    Collections.shuffle(paths);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/ne*\", \"/hotels/n*\");\r\n    paths.clear();\r\n    comparator = pathMatcher.getPatternComparator(\"/hotels/new.html\");\r\n    paths.add(\"/hotels/new.*\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    Collections.shuffle(paths);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new.*\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    comparator = pathMatcher.getPatternComparator(\"/web/endUser/action/login.html\");\r\n    paths.add(\"/**/login.*\");\r\n    paths.add(\"/**/endUser/action/login.*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/**/endUser/action/login.*\", \"/**/login.*\");\r\n    paths.clear();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#trimTokensOff()",
    "entityType": "method",
    "code": "// SPR-8687\r\n@Test\r\nvoid trimTokensOff() {\r\n    pathMatcher.setTrimTokens(false);\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/  sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/Group/  Sales/Members\")).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#caseInsensitive()",
    "entityType": "method",
    "code": "// SPR-13286\r\n@Test\r\nvoid caseInsensitive() {\r\n    pathMatcher.setCaseSensitive(false);\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/Group/Sales/Members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/Group/{groupName}/Members\", \"/group/Sales/members\")).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#defaultCacheSetting()",
    "entityType": "method",
    "code": "@Test\r\nvoid defaultCacheSetting() {\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(20);\r\n    for (int i = 0; i < 65536; i++) {\r\n        pathMatcher.match(\"test\" + i, \"test\");\r\n    }\r\n    // Cache turned off because it went beyond the threshold\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToTrue()",
    "entityType": "method",
    "code": "@Test\r\nvoid cachePatternsSetToTrue() {\r\n    pathMatcher.setCachePatterns(true);\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(20);\r\n    for (int i = 0; i < 65536; i++) {\r\n        pathMatcher.match(\"test\" + i, \"test\" + i);\r\n    }\r\n    // Cache keeps being alive due to the explicit cache setting\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(65536);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix()",
    "entityType": "method",
    "code": "@Test\r\nvoid preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix() {\r\n    pathMatcher.setCachePatterns(true);\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n    pathMatcher.match(\"test?\", \"test\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(1);\r\n    pathMatcher.match(\"test?\", \"best\");\r\n    pathMatcher.match(\"test/*\", \"view/test.jpg\");\r\n    pathMatcher.match(\"test/**/test.jpg\", \"view/test.jpg\");\r\n    pathMatcher.match(\"test/{name}.jpg\", \"view/test.jpg\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch()",
    "entityType": "method",
    "code": "@Test\r\nvoid creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch() {\r\n    pathMatcher.setCachePatterns(true);\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n    pathMatcher.match(\"test\", \"testian\");\r\n    pathMatcher.match(\"test?\", \"testFf\");\r\n    pathMatcher.match(\"test/*\", \"test/dir/name.jpg\");\r\n    pathMatcher.match(\"test/{name}.jpg\", \"test/lorem.jpg\");\r\n    pathMatcher.match(\"bla/**/test.jpg\", \"bla/test.jpg\");\r\n    pathMatcher.match(\"**/{name}.jpg\", \"test/lorem.jpg\");\r\n    pathMatcher.match(\"/**/{name}.jpg\", \"/test/lorem.jpg\");\r\n    pathMatcher.match(\"/*/dir/{name}.jpg\", \"/*/dir/lorem.jpg\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(7);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid cachePatternsSetToFalse() {\r\n    pathMatcher.setCachePatterns(false);\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint",
    "entityType": "class",
    "code": "private final List<TypeReference> parameterTypes;\nprivate final ExecutableMode mode;\nprivate ExecutableHint(Builder builder) {\r\n    super(builder.name);\r\n    this.parameterTypes = List.copyOf(builder.parameterTypes);\r\n    this.mode = (builder.mode != null ? builder.mode : ExecutableMode.INVOKE);\r\n}\n/**\r\n * Initialize a builder with the parameter types of a constructor.\r\n * @param parameterTypes the parameter types of the constructor\r\n * @return a builder\r\n */\r\nstatic Builder ofConstructor(List<TypeReference> parameterTypes) {\r\n    return new Builder(\"<init>\", parameterTypes);\r\n}\n/**\r\n * Initialize a builder with the name and parameter types of a method.\r\n * @param name the name of the method\r\n * @param parameterTypes the parameter types of the method\r\n * @return a builder\r\n */\r\nstatic Builder ofMethod(String name, List<TypeReference> parameterTypes) {\r\n    return new Builder(name, parameterTypes);\r\n}\n/**\r\n * Return the parameter types of the executable.\r\n * @return the parameter types\r\n * @see Executable#getParameterTypes()\r\n */\r\npublic List<TypeReference> getParameterTypes() {\r\n    return this.parameterTypes;\r\n}\n/**\r\n * Return the {@linkplain ExecutableMode mode} that applies to this hint.\r\n * @return the mode\r\n */\r\npublic ExecutableMode getMode() {\r\n    return this.mode;\r\n}\n/**\r\n * Return a {@link Consumer} that applies the given {@link ExecutableMode}\r\n * to the accepted {@link Builder}.\r\n * @param mode the mode to apply\r\n * @return a consumer to apply the mode\r\n */\r\npublic static Consumer<Builder> builtWith(ExecutableMode mode) {\r\n    return builder -> builder.withMode(mode);\r\n}\n@Override\r\npublic int compareTo(ExecutableHint other) {\r\n    return Comparator.comparing(ExecutableHint::getName, String::compareToIgnoreCase).thenComparing(ExecutableHint::getParameterTypes, Comparator.comparingInt(List::size)).thenComparing(ExecutableHint::getParameterTypes, (params1, params2) -> {\r\n        String left = params1.stream().map(TypeReference::getCanonicalName).collect(Collectors.joining(\",\"));\r\n        String right = params2.stream().map(TypeReference::getCanonicalName).collect(Collectors.joining(\",\"));\r\n        return left.compareTo(right);\r\n    }).compare(this, other);\r\n}\n/**\r\n * Builder for {@link ExecutableHint}.\r\n */\r\npublic static class Builder {\r\n\r\n    private final String name;\r\n\r\n    private final List<TypeReference> parameterTypes;\r\n\r\n    @Nullable\r\n    private ExecutableMode mode;\r\n\r\n    Builder(String name, List<TypeReference> parameterTypes) {\r\n        this.name = name;\r\n        this.parameterTypes = parameterTypes;\r\n    }\r\n\r\n    /**\r\n     * Specify that the {@linkplain ExecutableMode mode} is required.\r\n     * @param mode the required mode\r\n     * @return {@code this}, to facilitate method chaining\r\n     */\r\n    public Builder withMode(ExecutableMode mode) {\r\n        Assert.notNull(mode, \"'mode' must not be null\");\r\n        if ((this.mode == null) || !this.mode.includes(mode)) {\r\n            this.mode = mode;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Create an {@link ExecutableHint} based on the state of this builder.\r\n     * @return an executable hint\r\n     */\r\n    ExecutableHint build() {\r\n        return new ExecutableHint(this);\r\n    }\r\n}",
    "comment": "\n * A hint that describes the need for reflection on a {@link Method} or\n * {@link Constructor}.\n *\n * @author Stephane Nicoll\n * @since 6.0\n "
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#extensionMappingWithDotPathSeparator()",
    "entityType": "method",
    "code": "@Test\r\nvoid extensionMappingWithDotPathSeparator() {\r\n    pathMatcher.setPathSeparator(\".\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"hotel.*\")).as(\"Extension mapping should be disabled with \\\".\\\" as path separator\").isEqualTo(\"/*.html.hotel.*\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#ofConstructor(List<TypeReference>)",
    "entityType": "method",
    "code": "/**\r\n * Initialize a builder with the parameter types of a constructor.\r\n * @param parameterTypes the parameter types of the constructor\r\n * @return a builder\r\n */\r\nstatic Builder ofConstructor(List<TypeReference> parameterTypes) {\r\n    return new Builder(\"<init>\", parameterTypes);\r\n}",
    "comment": "\n\t * Initialize a builder with the parameter types of a constructor.\n\t * @param parameterTypes the parameter types of the constructor\n\t * @return a builder\n\t "
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#isPattern()",
    "entityType": "method",
    "code": "// gh-22959\r\n@Test\r\nvoid isPattern() {\r\n    assertThat(pathMatcher.isPattern(\"/test/*\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/**/name\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test?\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/{name}\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/name\")).isFalse();\r\n    assertThat(pathMatcher.isPattern(\"/test/foo{bar\")).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#isPatternWithNullPath()",
    "entityType": "method",
    "code": "// gh-23297\r\n@Test\r\nvoid isPatternWithNullPath() {\r\n    assertThat(pathMatcher.isPattern(null)).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#ofMethod(String,List<TypeReference>)",
    "entityType": "method",
    "code": "/**\r\n * Initialize a builder with the name and parameter types of a method.\r\n * @param name the name of the method\r\n * @param parameterTypes the parameter types of the method\r\n * @return a builder\r\n */\r\nstatic Builder ofMethod(String name, List<TypeReference> parameterTypes) {\r\n    return new Builder(name, parameterTypes);\r\n}",
    "comment": "\n\t * Initialize a builder with the name and parameter types of a method.\n\t * @param name the name of the method\n\t * @param parameterTypes the parameter types of the method\n\t * @return a builder\n\t "
  },
  {
    "entityId": "org.springframework.util.AntPathMatcherTests#consistentMatchWithWildcardsAndTrailingSlash()",
    "entityType": "method",
    "code": "// gh-27506\r\n@Test\r\nvoid consistentMatchWithWildcardsAndTrailingSlash() {\r\n    assertThat(pathMatcher.match(\"/*/foo\", \"/en/foo\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*/foo\", \"/en/foo/\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/**/foo\", \"/en/foo\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/**/foo\", \"/en/foo/\")).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#getParameterTypes()",
    "entityType": "method",
    "code": "/**\r\n * Return the parameter types of the executable.\r\n * @return the parameter types\r\n * @see Executable#getParameterTypes()\r\n */\r\npublic List<TypeReference> getParameterTypes() {\r\n    return this.parameterTypes;\r\n}",
    "comment": "\n\t * Return the parameter types of the executable.\n\t * @return the parameter types\n\t * @see Executable#getParameterTypes()\n\t "
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#getMode()",
    "entityType": "method",
    "code": "/**\r\n * Return the {@linkplain ExecutableMode mode} that applies to this hint.\r\n * @return the mode\r\n */\r\npublic ExecutableMode getMode() {\r\n    return this.mode;\r\n}",
    "comment": "\n\t * Return the {@linkplain ExecutableMode mode} that applies to this hint.\n\t * @return the mode\n\t "
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#builtWith(ExecutableMode)",
    "entityType": "method",
    "code": "/**\r\n * Return a {@link Consumer} that applies the given {@link ExecutableMode}\r\n * to the accepted {@link Builder}.\r\n * @param mode the mode to apply\r\n * @return a consumer to apply the mode\r\n */\r\npublic static Consumer<Builder> builtWith(ExecutableMode mode) {\r\n    return builder -> builder.withMode(mode);\r\n}",
    "comment": "\n\t * Return a {@link Consumer} that applies the given {@link ExecutableMode}\n\t * to the accepted {@link Builder}.\n\t * @param mode the mode to apply\n\t * @return a consumer to apply the mode\n\t "
  },
  {
    "entityId": "org.springframework.aot.hint.ExecutableHint#compareTo(ExecutableHint)",
    "entityType": "method",
    "code": "@Override\r\npublic int compareTo(ExecutableHint other) {\r\n    return Comparator.comparing(ExecutableHint::getName, String::compareToIgnoreCase).thenComparing(ExecutableHint::getParameterTypes, Comparator.comparingInt(List::size)).thenComparing(ExecutableHint::getParameterTypes, (params1, params2) -> {\r\n        String left = params1.stream().map(TypeReference::getCanonicalName).collect(Collectors.joining(\",\"));\r\n        String right = params2.stream().map(TypeReference::getCanonicalName).collect(Collectors.joining(\",\"));\r\n        return left.compareTo(right);\r\n    }).compare(this, other);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.hint.Builder",
    "entityType": "class",
    "code": "private final String name;\nprivate final List<TypeReference> parameterTypes;\n@Nullable\r\nprivate ExecutableMode mode;\nBuilder(String name, List<TypeReference> parameterTypes) {\r\n    this.name = name;\r\n    this.parameterTypes = parameterTypes;\r\n}\n/**\r\n * Specify that the {@linkplain ExecutableMode mode} is required.\r\n * @param mode the required mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder withMode(ExecutableMode mode) {\r\n    Assert.notNull(mode, \"'mode' must not be null\");\r\n    if ((this.mode == null) || !this.mode.includes(mode)) {\r\n        this.mode = mode;\r\n    }\r\n    return this;\r\n}\n/**\r\n * Create an {@link ExecutableHint} based on the state of this builder.\r\n * @return an executable hint\r\n */\r\nExecutableHint build() {\r\n    return new ExecutableHint(this);\r\n}",
    "comment": "\n\t * Builder for {@link ExecutableHint}.\n\t "
  },
  {
    "entityId": "org.springframework.aot.hint.Builder#withMode(ExecutableMode)",
    "entityType": "method",
    "code": "/**\r\n * Specify that the {@linkplain ExecutableMode mode} is required.\r\n * @param mode the required mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder withMode(ExecutableMode mode) {\r\n    Assert.notNull(mode, \"'mode' must not be null\");\r\n    if ((this.mode == null) || !this.mode.includes(mode)) {\r\n        this.mode = mode;\r\n    }\r\n    return this;\r\n}",
    "comment": "\n\t\t * Specify that the {@linkplain ExecutableMode mode} is required.\n\t\t * @param mode the required mode\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t "
  },
  {
    "entityId": "org.springframework.aot.hint.Builder#build()",
    "entityType": "method",
    "code": "/**\r\n * Create an {@link ExecutableHint} based on the state of this builder.\r\n * @return an executable hint\r\n */\r\nExecutableHint build() {\r\n    return new ExecutableHint(this);\r\n}",
    "comment": "\n\t\t * Create an {@link ExecutableHint} based on the state of this builder.\n\t\t * @return an executable hint\n\t\t "
  },
  {
    "entityId": "org.springframework.aot.hint.FieldHint",
    "entityType": "class",
    "code": "FieldHint(String name) {\r\n    super(name);\r\n}",
    "comment": "\n * A hint that describes the need for reflection on a {@link Field}.\n *\n * @author Stephane Nicoll\n * @since 6.0\n "
  },
  {
    "entityId": "org.springframework.util.AssertTests",
    "entityType": "class",
    "code": "@Test\r\nvoid stateWithMessage() {\r\n    Assert.state(true, \"enigma\");\r\n}\n@Test\r\nvoid stateWithFalseExpressionAndMessage() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid stateWithMessageSupplier() {\r\n    Assert.state(true, () -> \"enigma\");\r\n}\n@Test\r\nvoid stateWithFalseExpressionAndMessageSupplier() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid stateWithFalseExpressionAndNullMessageSupplier() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid isTrueWithMessage() {\r\n    Assert.isTrue(true, \"enigma\");\r\n}\n@Test\r\nvoid isTrueWithFalse() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid isTrueWithMessageSupplier() {\r\n    Assert.isTrue(true, () -> \"enigma\");\r\n}\n@Test\r\nvoid isTrueWithFalseAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid isTrueWithFalseAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid isNullWithMessage() {\r\n    Assert.isNull(null, \"Bla\");\r\n}\n@Test\r\nvoid isNullWithMessageSupplier() {\r\n    Assert.isNull(null, () -> \"enigma\");\r\n}\n@Test\r\nvoid isNullWithNonNullObjectAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isNull(\"foo\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid isNullWithNonNullObjectAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isNull(\"foo\", (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid notNullWithMessage() {\r\n    Assert.notNull(\"foo\", \"enigma\");\r\n}\n@Test\r\nvoid notNullWithMessageSupplier() {\r\n    Assert.notNull(\"foo\", () -> \"enigma\");\r\n}\n@Test\r\nvoid notNullWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notNull(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notNullWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notNull(null, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid hasLength() {\r\n    Assert.hasLength(\"I Heart ...\", \"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithWhitespaceOnly() {\r\n    Assert.hasLength(\"\\t  \", \"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithMessageSupplier() {\r\n    Assert.hasLength(\"foo\", () -> \"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithWhitespaceOnlyAndMessageSupplier() {\r\n    Assert.hasLength(\"\\t\", () -> \"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasLengthWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid hasText() {\r\n    Assert.hasText(\"foo\", \"enigma\");\r\n}\n@Test\r\nvoid hasTextWithWhitespaceOnly() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithMessageSupplier() {\r\n    Assert.hasText(\"foo\", () -> \"enigma\");\r\n}\n@Test\r\nvoid hasTextWithWhitespaceOnlyAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid hasTextWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid doesNotContainWithNullSearchString() {\r\n    Assert.doesNotContain(null, \"rod\", \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullSubstring() {\r\n    Assert.doesNotContain(\"A cool chick's name is Brod.\", null, \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithEmptySubstring() {\r\n    Assert.doesNotContain(\"A cool chick's name is Brod.\", \"\", \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullSearchStringAndNullSubstring() {\r\n    Assert.doesNotContain(null, null, \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithMessageSupplier() {\r\n    Assert.doesNotContain(\"foo\", \"bar\", () -> \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullSearchStringAndMessageSupplier() {\r\n    Assert.doesNotContain(null, \"bar\", () -> \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullSubstringAndMessageSupplier() {\r\n    Assert.doesNotContain(\"foo\", null, () -> \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullSearchStringAndNullSubstringAndMessageSupplier() {\r\n    Assert.doesNotContain(null, null, () -> \"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithSubstringPresentInSearchStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.doesNotContain(\"1234\", \"23\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid doesNotContainWithNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.doesNotContain(\"1234\", \"23\", (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid notEmptyArray() {\r\n    Assert.notEmpty(new String[] { \"1234\" }, \"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithEmptyArray() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithNullArray() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Object[]) null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithMessageSupplier() {\r\n    Assert.notEmpty(new String[] { \"1234\" }, () -> \"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithEmptyArrayAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithNullArrayAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Object[]) null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyArrayWithEmptyArrayAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid noNullElements() {\r\n    Assert.noNullElements(new String[] { \"1234\" }, \"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithEmptyArray() {\r\n    Assert.noNullElements(new String[] ;, \"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithMessageSupplier() {\r\n    Assert.noNullElements(new String[] { \"1234\" }, () -> \"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithEmptyArrayAndMessageSupplier() {\r\n    Assert.noNullElements(new String[] ;, () -> \"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithNullArrayAndMessageSupplier() {\r\n    Assert.noNullElements((Object[]) null, () -> \"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithNullElementsAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(new String[] { \"foo\", null, \"bar\" }, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithNullElementsAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(new String[] { \"foo\", null, \"bar\" }, (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid noNullElementsWithCollection() {\r\n    assertThatCode(() -> Assert.noNullElements(asList(\"foo\", \"bar\"), \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithEmptyCollection() {\r\n    assertThatCode(() -> Assert.noNullElements(emptyList(), \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithNullCollection() {\r\n    assertThatCode(() -> Assert.noNullElements((Collection<Object>) null, \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithCollectionAndNullElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements(asList(\"foo\", \"bar\"), () -> \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithEmptyCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements(emptyList(), \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithNullCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements((Collection<Object>) null, () -> \"enigma\")).doesNotThrowAnyException();\r\n}\n@Test\r\nvoid noNullElementsWithCollectionAndNullElementAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid noNullElementsWithCollectionAndNullElementAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid notEmptyCollection() {\r\n    Assert.notEmpty(singletonList(\"foo\"), \"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithEmptyCollection() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyList(), \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithNullCollection() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Collection<?>) null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithMessageSupplier() {\r\n    Assert.notEmpty(singletonList(\"foo\"), () -> \"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithEmptyCollectionAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyList(), () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithNullCollectionAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Collection<?>) null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyCollectionWithEmptyCollectionAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyList(), (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid notEmptyMap() {\r\n    Assert.notEmpty(singletonMap(\"foo\", \"bar\"), \"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithNullMap() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Map<?, ?>) null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithEmptyMap() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyMap(), \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithMessageSupplier() {\r\n    Assert.notEmpty(singletonMap(\"foo\", \"bar\"), () -> \"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithEmptyMapAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyMap(), () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithNullMapAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Map<?, ?>) null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}\n@Test\r\nvoid notEmptyMapWithEmptyMapAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyMap(), (Supplier<String>) null)).withMessage(null);\r\n}\n@Test\r\nvoid isInstanceOf() {\r\n    Assert.isInstanceOf(String.class, \"foo\", \"enigma\");\r\n}\n@Test\r\nvoid isInstanceOfWithNullType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(null, \"foo\", \"enigma\")).withMessageContaining(\"Type to check against must not be null\");\r\n}\n@Test\r\nvoid isInstanceOfWithNullInstance() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, null, \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndNullMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, (String) null)).withMessageContaining(\"Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message\")).withMessageContaining(\"Custom message: java.lang.Long\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message:\")).withMessageContaining(\"Custom message: Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessageWithSpace() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message for \")).withMessageContaining(\"Custom message for java.lang.Long\");\r\n}\n@Test\r\nvoid isInstanceOfWithMessageSupplier() {\r\n    Assert.isInstanceOf(String.class, \"foo\", () -> \"enigma\");\r\n}\n@Test\r\nvoid isInstanceOfWithNullTypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(null, \"foo\", () -> \"enigma\")).withMessageContaining(\"Type to check against must not be null\");\r\n}\n@Test\r\nvoid isInstanceOfWithNullInstanceAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, null, () -> \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, (Supplier<String>) null)).withMessageContaining(\"Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}\n@Test\r\nvoid isInstanceOfWithTypeMismatchAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, () -> \"enigma\")).withMessageContaining(\"enigma: java.lang.Long\");\r\n}\n@Test\r\nvoid isAssignable() {\r\n    Assert.isAssignable(Number.class, Integer.class, \"enigma\");\r\n}\n@Test\r\nvoid isAssignableWithNullSupertype() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(null, Integer.class, \"enigma\")).withMessageContaining(\"Supertype to check against must not be null\");\r\n}\n@Test\r\nvoid isAssignableWithNullSubtype() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(Integer.class, null, \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndNullMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, (String) null)).withMessageContaining(\"class java.lang.Integer is not assignable to class java.lang.String\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message\")).withMessageContaining(\"Custom message: class java.lang.Integer\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessageWithSeparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message:\")).withMessageContaining(\"Custom message: class java.lang.Integer is not assignable to class java.lang.String\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessageWithSpace() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message for \")).withMessageContaining(\"Custom message for class java.lang.Integer\");\r\n}\n@Test\r\nvoid isAssignableWithMessageSupplier() {\r\n    Assert.isAssignable(Number.class, Integer.class, () -> \"enigma\");\r\n}\n@Test\r\nvoid isAssignableWithNullSupertypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(null, Integer.class, () -> \"enigma\")).withMessageContaining(\"Supertype to check against must not be null\");\r\n}\n@Test\r\nvoid isAssignableWithNullSubtypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(Integer.class, null, () -> \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, (Supplier<String>) null)).withMessageContaining(\"class java.lang.Integer is not assignable to class java.lang.String\");\r\n}\n@Test\r\nvoid isAssignableWithTypeMismatchAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, () -> \"enigma\")).withMessageContaining(\"enigma: class java.lang.Integer\");\r\n}\n@Test\r\nvoid state() {\r\n    Assert.state(true, \"enigma\");\r\n}\n@Test\r\nvoid stateWithFalseExpression() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": "\n * Tests for {@link Assert}.\n *\n * @author Keith Donald\n * @author Erwin Vervaet\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Juergen Hoeller\n "
  },
  {
    "entityId": "org.springframework.util.AssertTests#stateWithMessage()",
    "entityType": "method",
    "code": "@Test\r\nvoid stateWithMessage() {\r\n    Assert.state(true, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#stateWithFalseExpressionAndMessage()",
    "entityType": "method",
    "code": "@Test\r\nvoid stateWithFalseExpressionAndMessage() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#stateWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid stateWithMessageSupplier() {\r\n    Assert.state(true, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#stateWithFalseExpressionAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid stateWithFalseExpressionAndMessageSupplier() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#stateWithFalseExpressionAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid stateWithFalseExpressionAndNullMessageSupplier() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isTrueWithMessage()",
    "entityType": "method",
    "code": "@Test\r\nvoid isTrueWithMessage() {\r\n    Assert.isTrue(true, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isTrueWithFalse()",
    "entityType": "method",
    "code": "@Test\r\nvoid isTrueWithFalse() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isTrueWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isTrueWithMessageSupplier() {\r\n    Assert.isTrue(true, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isTrueWithFalseAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isTrueWithFalseAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isTrueWithFalseAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isTrueWithFalseAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isTrue(false, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isNullWithMessage()",
    "entityType": "method",
    "code": "@Test\r\nvoid isNullWithMessage() {\r\n    Assert.isNull(null, \"Bla\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isNullWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isNullWithMessageSupplier() {\r\n    Assert.isNull(null, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isNullWithNonNullObjectAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isNullWithNonNullObjectAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isNull(\"foo\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#isNullWithNonNullObjectAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid isNullWithNonNullObjectAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isNull(\"foo\", (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notNullWithMessage()",
    "entityType": "method",
    "code": "@Test\r\nvoid notNullWithMessage() {\r\n    Assert.notNull(\"foo\", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notNullWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notNullWithMessageSupplier() {\r\n    Assert.notNull(\"foo\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notNullWithNullAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notNullWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notNull(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notNullWithNullAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notNullWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notNull(null, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLength()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLength() {\r\n    Assert.hasLength(\"I Heart ...\", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithWhitespaceOnly()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithWhitespaceOnly() {\r\n    Assert.hasLength(\"\\t  \", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithMessageSupplier() {\r\n    Assert.hasLength(\"foo\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithWhitespaceOnlyAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithWhitespaceOnlyAndMessageSupplier() {\r\n    Assert.hasLength(\"\\t\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithEmptyStringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithNullAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasLengthWithNullAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasLengthWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasLength(null, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasText()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasText() {\r\n    Assert.hasText(\"foo\", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnly()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithWhitespaceOnly() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithEmptyString()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithMessageSupplier() {\r\n    Assert.hasText(\"foo\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnlyAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithWhitespaceOnlyAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithEmptyStringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithNullAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithNullAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#hasTextWithNullAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid hasTextWithNullAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSearchString()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSearchString() {\r\n    Assert.doesNotContain(null, \"rod\", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSubstring()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSubstring() {\r\n    Assert.doesNotContain(\"A cool chick's name is Brod.\", null, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithEmptySubstring()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithEmptySubstring() {\r\n    Assert.doesNotContain(\"A cool chick's name is Brod.\", \"\", \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSearchStringAndNullSubstring()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSearchStringAndNullSubstring() {\r\n    Assert.doesNotContain(null, null, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithMessageSupplier() {\r\n    Assert.doesNotContain(\"foo\", \"bar\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSearchStringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSearchStringAndMessageSupplier() {\r\n    Assert.doesNotContain(null, \"bar\", () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSubstringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSubstringAndMessageSupplier() {\r\n    Assert.doesNotContain(\"foo\", null, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullSearchStringAndNullSubstringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullSearchStringAndNullSubstringAndMessageSupplier() {\r\n    Assert.doesNotContain(null, null, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithSubstringPresentInSearchStringAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithSubstringPresentInSearchStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.doesNotContain(\"1234\", \"23\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#doesNotContainWithNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid doesNotContainWithNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.doesNotContain(\"1234\", \"23\", (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArray() {\r\n    Assert.notEmpty(new String[] { \"1234\" }, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithEmptyArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithEmptyArray() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithNullArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithNullArray() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Object[]) null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithMessageSupplier() {\r\n    Assert.notEmpty(new String[] { \"1234\" }, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithEmptyArrayAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithEmptyArrayAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithNullArrayAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithNullArrayAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Object[]) null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyArrayWithEmptyArrayAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyArrayWithEmptyArrayAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(new String[] ;, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElements()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElements() {\r\n    Assert.noNullElements(new String[] { \"1234\" }, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithEmptyArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithEmptyArray() {\r\n    Assert.noNullElements(new String[] ;, \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithMessageSupplier() {\r\n    Assert.noNullElements(new String[] { \"1234\" }, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithEmptyArrayAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithEmptyArrayAndMessageSupplier() {\r\n    Assert.noNullElements(new String[] ;, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithNullArrayAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithNullArrayAndMessageSupplier() {\r\n    Assert.noNullElements((Object[]) null, () -> \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithNullElementsAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithNullElementsAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(new String[] { \"foo\", null, \"bar\" }, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithNullElementsAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithNullElementsAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(new String[] { \"foo\", null, \"bar\" }, (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithCollection() {\r\n    assertThatCode(() -> Assert.noNullElements(asList(\"foo\", \"bar\"), \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithEmptyCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithEmptyCollection() {\r\n    assertThatCode(() -> Assert.noNullElements(emptyList(), \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithNullCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithNullCollection() {\r\n    assertThatCode(() -> Assert.noNullElements((Collection<Object>) null, \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithCollectionAndNullElement()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithCollectionAndNullElement() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithCollectionAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements(asList(\"foo\", \"bar\"), () -> \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithEmptyCollectionAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithEmptyCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements(emptyList(), \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithNullCollectionAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithNullCollectionAndMessageSupplier() {\r\n    assertThatCode(() -> Assert.noNullElements((Collection<Object>) null, () -> \"enigma\")).doesNotThrowAnyException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithCollectionAndNullElementAndMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithCollectionAndNullElementAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#noNullElementsWithCollectionAndNullElementAndNullMessageSupplier()",
    "entityType": "method",
    "code": "@Test\r\nvoid noNullElementsWithCollectionAndNullElementAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(asList(\"foo\", null, \"bar\"), (Supplier<String>) null)).withMessage(null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyCollection() {\r\n    Assert.notEmpty(singletonList(\"foo\"), \"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyCollectionWithEmptyCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyCollectionWithEmptyCollection() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyList(), \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.AssertTests#notEmptyCollectionWithNullCollection()",
    "entityType": "method",
    "code": "@Test\r\nvoid notEmptyCollectionWithNullCollection() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Collection<?>) null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "comment": ""
  }
]