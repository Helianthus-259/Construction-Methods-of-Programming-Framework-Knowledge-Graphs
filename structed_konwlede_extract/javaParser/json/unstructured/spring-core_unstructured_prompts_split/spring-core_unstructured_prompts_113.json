[
  {
    "entityId": "org.springframework.core.Channel#unsubscribe(Receiver<E>,Class<E>)",
    "entityType": "method",
    "code": "void unsubscribe(final Receiver<E> receiver, Class<E> event);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Broadcaster",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.EventBroadcaster",
    "entityType": "class",
    "code": "void subscribe();\nvoid unsubscribe();\nvoid setChannel(Channel<?> channel);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.EventBroadcaster#subscribe()",
    "entityType": "method",
    "code": "void subscribe();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.EventBroadcaster#unsubscribe()",
    "entityType": "method",
    "code": "void unsubscribe();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.EventBroadcaster#setChannel(Channel<?>)",
    "entityType": "method",
    "code": "void setChannel(Channel<?> channel);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericBroadcasterImpl",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl",
    "entityType": "class",
    "code": "private Class<T>[] subscribingEvents;\nprivate Channel<T> channel;\n/**\r\n * Abstract method to retrieve instance of subclass\r\n *\r\n * @return receiver instance\r\n */\r\npublic abstract Receiver<T> getInstance();\n@Override\r\npublic void setChannel(Channel channel) {\r\n    this.channel = channel;\r\n}\nprivate String beanName;\npublic void setBeanName(String name) {\r\n    this.beanName = name;\r\n}\n@Override\r\npublic void subscribe() ;\n@Override\r\npublic void unsubscribe() ;\npublic GenericEventBroadcasterImpl(Class<? extends T>... events) {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl#getInstance()",
    "entityType": "method",
    "code": "/**\r\n * Abstract method to retrieve instance of subclass\r\n *\r\n * @return receiver instance\r\n */\r\npublic abstract Receiver<T> getInstance();",
    "comment": "\n\t\t * Abstract method to retrieve instance of subclass\n\t\t *\n\t\t * @return receiver instance\n\t\t "
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl#setChannel(Channel)",
    "entityType": "method",
    "code": "@Override\r\npublic void setChannel(Channel channel) {\r\n    this.channel = channel;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl#setBeanName(String)",
    "entityType": "method",
    "code": "public void setBeanName(String name) {\r\n    this.beanName = name;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl#subscribe()",
    "entityType": "method",
    "code": "@Override\r\npublic void subscribe() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericEventBroadcasterImpl#unsubscribe()",
    "entityType": "method",
    "code": "@Override\r\npublic void unsubscribe() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Receiver",
    "entityType": "class",
    "code": "void receive(E event);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Receiver#receive(E)",
    "entityType": "method",
    "code": "void receive(E event);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcaster",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.RemovedMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NewMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ModifiedMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl",
    "entityType": "class",
    "code": "public MessageBroadcasterImpl() {\r\n    super(NewMessageEvent.class);\r\n}\n@Override\r\npublic void receive(MessageEvent event) {\r\n    throw new UnsupportedOperationException(\"should not be called, use subclassed events\");\r\n}\npublic void receive(NewMessageEvent event) ;\n@Override\r\npublic Receiver<MessageEvent> getInstance() {\r\n    return null;\r\n}\npublic void receive(RemovedMessageEvent event) ;\npublic void receive(ModifiedMessageEvent event) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl#receive(MessageEvent)",
    "entityType": "method",
    "code": "@Override\r\npublic void receive(MessageEvent event) {\r\n    throw new UnsupportedOperationException(\"should not be called, use subclassed events\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl#receive(NewMessageEvent)",
    "entityType": "method",
    "code": "public void receive(NewMessageEvent event) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl#getInstance()",
    "entityType": "method",
    "code": "@Override\r\npublic Receiver<MessageEvent> getInstance() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl#receive(RemovedMessageEvent)",
    "entityType": "method",
    "code": "public void receive(RemovedMessageEvent event) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MessageBroadcasterImpl#receive(ModifiedMessageEvent)",
    "entityType": "method",
    "code": "public void receive(ModifiedMessageEvent event) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository",
    "entityType": "class",
    "code": "Class<T> getPersistentClass();\nList<T> findByQuery();\nList<T> findAll();\nT refresh(T entity);\nT saveOrUpdate(T entity);\nvoid delete(Collection<T> entities);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#getPersistentClass()",
    "entityType": "method",
    "code": "Class<T> getPersistentClass();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#findByQuery()",
    "entityType": "method",
    "code": "List<T> findByQuery();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#findAll()",
    "entityType": "method",
    "code": "List<T> findAll();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#refresh(T)",
    "entityType": "method",
    "code": "T refresh(T entity);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#saveOrUpdate(T)",
    "entityType": "method",
    "code": "T saveOrUpdate(T entity);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SimpleGenericRepository#delete(Collection<T>)",
    "entityType": "method",
    "code": "void delete(Collection<T> entities);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.RepositoryRegistry",
    "entityType": "class",
    "code": "<T> SimpleGenericRepository<T> getFor(Class<T> entityType);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.RepositoryRegistry#getFor(Class<T>)",
    "entityType": "method",
    "code": "<T> SimpleGenericRepository<T> getFor(Class<T> entityType);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry",
    "entityType": "class",
    "code": "protected void injectInto(R rep) ;\npublic void register(R rep) ;\npublic void register(R... reps) ;\npublic void setRepos(R... reps) ;\n@Override\r\npublic <T> SimpleGenericRepository<T> getFor(Class<T> entityType) {\r\n    return null;\r\n}\npublic void afterPropertiesSet() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#injectInto(R)",
    "entityType": "method",
    "code": "protected void injectInto(R rep) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#register(R)",
    "entityType": "method",
    "code": "public void register(R rep) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#register(R)",
    "entityType": "method",
    "code": "public void register(R... reps) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#setRepos(R)",
    "entityType": "method",
    "code": "public void setRepos(R... reps) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#getFor(Class<T>)",
    "entityType": "method",
    "code": "@Override\r\npublic <T> SimpleGenericRepository<T> getFor(Class<T> entityType) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.SettableRepositoryRegistry#afterPropertiesSet()",
    "entityType": "method",
    "code": "public void afterPropertiesSet() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenientGenericRepository",
    "entityType": "class",
    "code": "T findById(ID id, boolean lock);\nList<T> findByExample(T exampleInstance);\nvoid delete(ID id);\nvoid delete(T entity);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenientGenericRepository#findById(ID,boolean)",
    "entityType": "method",
    "code": "T findById(ID id, boolean lock);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenientGenericRepository#findByExample(T)",
    "entityType": "method",
    "code": "List<T> findByExample(T exampleInstance);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenientGenericRepository#delete(ID)",
    "entityType": "method",
    "code": "void delete(ID id);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenientGenericRepository#delete(T)",
    "entityType": "method",
    "code": "void delete(T entity);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository",
    "entityType": "class",
    "code": "/**\r\n * @param c Mandatory. The domain class this repository is responsible for.\r\n */\r\n// Since it is impossible to determine the actual type of a type\r\n// parameter (!), we resort to requiring the caller to provide the\r\n// actual type as parameter, too.\r\n// Not set in a constructor to enable easy CGLIB-proxying (passing\r\n// constructor arguments to Spring AOP proxies is quite cumbersome).\r\npublic void setPersistentClass(Class<T> c) ;\n@Override\r\npublic Class<T> getPersistentClass() {\r\n    return null;\r\n}\n@Override\r\npublic T findById(ID id, boolean lock) {\r\n    return null;\r\n}\n@Override\r\npublic List<T> findAll() {\r\n    return null;\r\n}\n@Override\r\npublic List<T> findByExample(T exampleInstance) {\r\n    return null;\r\n}\n@Override\r\npublic List<T> findByQuery() {\r\n    return null;\r\n}\n@Override\r\npublic T saveOrUpdate(T entity) {\r\n    return null;\r\n}\n@Override\r\npublic void delete(T entity) ;\n@Override\r\npublic T refresh(T entity) {\r\n    return null;\r\n}\n@Override\r\npublic void delete(ID id) ;\n@Override\r\npublic void delete(Collection<T> entities) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#setPersistentClass(Class<T>)",
    "entityType": "method",
    "code": "/**\r\n * @param c Mandatory. The domain class this repository is responsible for.\r\n */\r\n// Since it is impossible to determine the actual type of a type\r\n// parameter (!), we resort to requiring the caller to provide the\r\n// actual type as parameter, too.\r\n// Not set in a constructor to enable easy CGLIB-proxying (passing\r\n// constructor arguments to Spring AOP proxies is quite cumbersome).\r\npublic void setPersistentClass(Class<T> c) ;",
    "comment": " constructor arguments to Spring AOP proxies is quite cumbersome)."
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#getPersistentClass()",
    "entityType": "method",
    "code": "@Override\r\npublic Class<T> getPersistentClass() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#findById(ID,boolean)",
    "entityType": "method",
    "code": "@Override\r\npublic T findById(ID id, boolean lock) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#findAll()",
    "entityType": "method",
    "code": "@Override\r\npublic List<T> findAll() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#findByExample(T)",
    "entityType": "method",
    "code": "@Override\r\npublic List<T> findByExample(T exampleInstance) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#findByQuery()",
    "entityType": "method",
    "code": "@Override\r\npublic List<T> findByQuery() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#saveOrUpdate(T)",
    "entityType": "method",
    "code": "@Override\r\npublic T saveOrUpdate(T entity) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#delete(T)",
    "entityType": "method",
    "code": "@Override\r\npublic void delete(T entity) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#refresh(T)",
    "entityType": "method",
    "code": "@Override\r\npublic T refresh(T entity) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#delete(ID)",
    "entityType": "method",
    "code": "@Override\r\npublic void delete(ID id) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericHibernateRepository#delete(Collection<T>)",
    "entityType": "method",
    "code": "@Override\r\npublic void delete(Collection<T> entities) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.HibernateRepositoryRegistry",
    "entityType": "class",
    "code": "@Override\r\npublic void injectInto(GenericHibernateRepository<?, ?> rep) ;\n@Override\r\npublic <T> GenericHibernateRepository<T, ?> getFor(Class<T> entityType) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.HibernateRepositoryRegistry#injectInto(GenericHibernateRepository<?,?>)",
    "entityType": "method",
    "code": "@Override\r\npublic void injectInto(GenericHibernateRepository<?, ?> rep) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.HibernateRepositoryRegistry#getFor(Class<T>)",
    "entityType": "method",
    "code": "@Override\r\npublic <T> GenericHibernateRepository<T, ?> getFor(Class<T> entityType) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Homer",
    "entityType": "class",
    "code": "void foo(E e);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Homer#foo(E)",
    "entityType": "method",
    "code": "void foo(E e);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyHomer",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(L t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MyHomer#foo(L)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(L t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.YourHomer",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(L t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.YourHomer#foo(L)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(L t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericDao",
    "entityType": "class",
    "code": "void saveOrUpdate(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericDao#saveOrUpdate(T)",
    "entityType": "method",
    "code": "void saveOrUpdate(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ConvenienceGenericDao",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericSqlMapDao",
    "entityType": "class",
    "code": "@Override\r\npublic void saveOrUpdate(T t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericSqlMapDao#saveOrUpdate(T)",
    "entityType": "method",
    "code": "@Override\r\npublic void saveOrUpdate(T t) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericSqlMapIntegerDao",
    "entityType": "class",
    "code": "@Override\r\npublic void saveOrUpdate(T t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.GenericSqlMapIntegerDao#saveOrUpdate(T)",
    "entityType": "method",
    "code": "@Override\r\npublic void saveOrUpdate(T t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Permission",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.User",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UserDao",
    "entityType": "class",
    "code": "// @Transactional\r\nvoid save(User user);\n// @Transactional\r\nvoid save(Permission perm);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UserDao#save(User)",
    "entityType": "method",
    "code": "// @Transactional\r\nvoid save(User user);",
    "comment": " @Transactional"
  },
  {
    "entityId": "org.springframework.core.UserDao#save(Permission)",
    "entityType": "method",
    "code": "// @Transactional\r\nvoid save(Permission perm);",
    "comment": " @Transactional"
  },
  {
    "entityId": "org.springframework.core.AbstractDao",
    "entityType": "class",
    "code": "public void save(T t) ;\npublic void saveVararg(T t, Object... args) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AbstractDao#save(T)",
    "entityType": "method",
    "code": "public void save(T t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.AbstractDao#saveVararg(T,Object)",
    "entityType": "method",
    "code": "public void saveVararg(T t, Object... args) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UserDaoImpl",
    "entityType": "class",
    "code": "@Override\r\npublic void save(Permission perm) ;\n@Override\r\npublic void saveVararg(User user, Object... args) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UserDaoImpl#save(Permission)",
    "entityType": "method",
    "code": "@Override\r\npublic void save(Permission perm) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.UserDaoImpl#saveVararg(User,Object)",
    "entityType": "method",
    "code": "@Override\r\npublic void saveVararg(User user, Object... args) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.DaoInterface",
    "entityType": "class",
    "code": "T get(P id);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.DaoInterface#get(P)",
    "entityType": "method",
    "code": "T get(P id);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessGenericDao",
    "entityType": "class",
    "code": "public void save(T object) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessGenericDao#save(T)",
    "entityType": "method",
    "code": "public void save(T object) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.Business",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessDao",
    "entityType": "class",
    "code": "@Override\r\npublic void save(Business<?> business) ;\n@Override\r\npublic Business<?> get(Long id) {\r\n    return null;\r\n}\npublic Business<?> get(String code) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessDao#save(Business<?>)",
    "entityType": "method",
    "code": "@Override\r\npublic void save(Business<?> business) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessDao#get(Long)",
    "entityType": "method",
    "code": "@Override\r\npublic Business<?> get(Long id) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.BusinessDao#get(String)",
    "entityType": "method",
    "code": "public Business<?> get(String code) {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MegaEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MegaMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NewMegaMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ModifiedMegaMessageEvent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MegaReceiver",
    "entityType": "class",
    "code": "void receive(E event);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MegaReceiver#receive(E)",
    "entityType": "method",
    "code": "void receive(E event);",
    "comment": ""
  }
]