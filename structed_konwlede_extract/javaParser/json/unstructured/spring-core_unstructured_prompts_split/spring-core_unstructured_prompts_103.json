[
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNullAttributeValue()",
    "entityType": "method",
    "code": "@Test\r\nvoid synthesizeAnnotationFromMapWithNullAttributeValue() {\r\n    Map<String, Object> map = Collections.singletonMap(\"text\", null);\r\n    assertThat(map.containsKey(\"text\")).isTrue();\r\n    assertMissingTextAttribute(map);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
    "entityType": "method",
    "code": "private void assertMissingTextAttribute(Map<String, Object> attributes) {\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> synthesizeAnnotation(attributes, AnnotationWithoutDefaults.class, null).text()).withMessageContaining(\"No value found for attribute named 'text' in merged annotation\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeOfIncorrectType()",
    "entityType": "method",
    "code": "@Test\r\nvoid synthesizeAnnotationFromMapWithAttributeOfIncorrectType() {\r\n    Map<String, Object> map = Collections.singletonMap(VALUE, 42L);\r\n    assertThatIllegalStateException().isThrownBy(() -> synthesizeAnnotation(map, Component.class, null).value()).withMessageContaining(\"Attribute 'value' in annotation org.springframework.core.testfixture.stereotype.Component \" + \"should be compatible with java.lang.String but a java.lang.Long value was returned\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
    "entityType": "method",
    "code": "@Test\r\nvoid synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases() {\r\n    // 1) Get an annotation\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    // 2) Convert the annotation into AnnotationAttributes\r\n    AnnotationAttributes attributes = getAnnotationAttributes(WebController.class, component);\r\n    assertThat(attributes).isNotNull();\r\n    // 3) Synthesize the AnnotationAttributes back into an annotation\r\n    Component synthesizedComponent = synthesizeAnnotation(attributes, Component.class, WebController.class);\r\n    assertThat(synthesizedComponent).isNotNull();\r\n    // 4) Verify that the original and synthesized annotations are equivalent\r\n    assertThat(synthesizedComponent).isNotSameAs(component);\r\n    assertThat(synthesizedComponent).isEqualTo(component);\r\n    assertThat(component.value()).as(\"value from component: \").isEqualTo(\"webController\");\r\n    assertThat(synthesizedComponent.value()).as(\"value from synthesized component: \").isEqualTo(\"webController\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
    "entityType": "method",
    "code": "// gh-22702\r\n@Test\r\nvoid findAnnotationWithRepeatablesElements() {\r\n    assertThat(AnnotationUtils.findAnnotation(TestRepeatablesClass.class, TestRepeatable.class)).isNull();\r\n    assertThat(AnnotationUtils.findAnnotation(TestRepeatablesClass.class, TestRepeatableContainer.class)).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "entityType": "method",
    "code": "// gh-23856\r\n@Test\r\nvoid findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations() {\r\n    MyRepeatableContainer annotation = AnnotationUtils.findAnnotation(MyRepeatableMeta1And2.class, MyRepeatableContainer.class);\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.value()).extracting(MyRepeatable::value).containsExactly(\"meta1\", \"meta2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
    "entityType": "method",
    "code": "// gh-23856\r\n@Test\r\nvoid findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod() throws Exception {\r\n    Method method = getClass().getDeclaredMethod(\"methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations\");\r\n    MyRepeatableContainer annotation = AnnotationUtils.findAnnotation(method, MyRepeatableContainer.class);\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.value()).extracting(MyRepeatable::value).containsExactly(\"meta1\", \"meta2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
    "entityType": "method",
    "code": "// gh-23929\r\n@Test\r\nvoid findDeprecatedAnnotation() {\r\n    assertThat(getAnnotation(DeprecatedClass.class, Deprecated.class)).isNotNull();\r\n    assertThat(getAnnotation(SubclassOfDeprecatedClass.class, Deprecated.class)).isNull();\r\n    assertThat(findAnnotation(DeprecatedClass.class, Deprecated.class)).isNotNull();\r\n    assertThat(findAnnotation(SubclassOfDeprecatedClass.class, Deprecated.class)).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
    "entityType": "method",
    "code": "@SafeVarargs\r\nstatic <T> T[] asArray(T... arr) {\r\n    return arr;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "entityType": "method",
    "code": "@MyRepeatableMeta1And2\r\nvoid methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ClassWithInheritedMetaAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubClassWithInheritedMetaAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubClassWithInheritedMetaAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ClassWithInheritedAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubClassWithInheritedAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubClassWithInheritedAnnotation",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MetaMetaAnnotatedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MetaMetaMetaAnnotatedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MetaCycleAnnotatedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotatedInterface",
    "entityType": "class",
    "code": "@Order(0)\r\nvoid fromInterfaceImplementedByRoot();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AnnotatedInterface#fromInterfaceImplementedByRoot()",
    "entityType": "method",
    "code": "@Order(0)\r\nvoid fromInterfaceImplementedByRoot();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root",
    "entityType": "class",
    "code": "@Order(27)\r\npublic void annotatedOnRoot() ;\n@Meta1\r\npublic void metaAnnotatedOnRoot() ;\npublic void overrideToAnnotate() ;\n@Order(27)\r\npublic void overrideWithoutNewAnnotation() ;\npublic void notAnnotated() ;\n@Override\r\npublic void fromInterfaceImplementedByRoot() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#annotatedOnRoot()",
    "entityType": "method",
    "code": "@Order(27)\r\npublic void annotatedOnRoot() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#metaAnnotatedOnRoot()",
    "entityType": "method",
    "code": "@Meta1\r\npublic void metaAnnotatedOnRoot() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#overrideToAnnotate()",
    "entityType": "method",
    "code": "public void overrideToAnnotate() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#overrideWithoutNewAnnotation()",
    "entityType": "method",
    "code": "@Order(27)\r\npublic void overrideWithoutNewAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#notAnnotated()",
    "entityType": "method",
    "code": "public void notAnnotated() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Root#fromInterfaceImplementedByRoot()",
    "entityType": "method",
    "code": "@Override\r\npublic void fromInterfaceImplementedByRoot() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf",
    "entityType": "class",
    "code": "@Order(25)\r\npublic void annotatedOnLeaf() ;\n@Meta1\r\npublic void metaAnnotatedOnLeaf() ;\n@MetaMeta\r\npublic void metaMetaAnnotatedOnLeaf() ;\n@Override\r\n@Order(1)\r\npublic void overrideToAnnotate() ;\n@Override\r\npublic void overrideWithoutNewAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf#annotatedOnLeaf()",
    "entityType": "method",
    "code": "@Order(25)\r\npublic void annotatedOnLeaf() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf#metaAnnotatedOnLeaf()",
    "entityType": "method",
    "code": "@Meta1\r\npublic void metaAnnotatedOnLeaf() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf#metaMetaAnnotatedOnLeaf()",
    "entityType": "method",
    "code": "@MetaMeta\r\npublic void metaMetaAnnotatedOnLeaf() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf#overrideToAnnotate()",
    "entityType": "method",
    "code": "@Override\r\n@Order(1)\r\npublic void overrideToAnnotate() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Leaf#overrideWithoutNewAnnotation()",
    "entityType": "method",
    "code": "@Override\r\npublic void overrideWithoutNewAnnotation() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Foo",
    "entityType": "class",
    "code": "@Order(1)\r\npublic abstract void something(T arg);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.Foo#something(T)",
    "entityType": "method",
    "code": "@Order(1)\r\npublic abstract void something(T arg);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SimpleFoo",
    "entityType": "class",
    "code": "@Override\r\n@Transactional\r\npublic void something(final String arg) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SimpleFoo#something(String)",
    "entityType": "method",
    "code": "@Override\r\n@Transactional\r\npublic void something(final String arg) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubInheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubInheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.NonInheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubNonInheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubNonInheritedAnnotationInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.NonAnnotatedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.NonAnnotatedInterface",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.NonInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubNonInheritedAnnotationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.TransactionalAndOrderedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubTransactionalAndOrderedClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Order\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AbstractDoesNotImplementInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubOfAbstractImplementsInterfaceWithAnnotatedMethod#foo()",
    "entityType": "method",
    "code": "@Override\r\npublic void foo() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nvoid foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithGenericAnnotatedMethod#foo(T)",
    "entityType": "method",
    "code": "@Order\r\nvoid foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ImplementsInterfaceWithGenericAnnotatedMethod#foo(String)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Order\r\nabstract void foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.BaseClassWithGenericAnnotatedMethod#foo(T)",
    "entityType": "method",
    "code": "@Order\r\nabstract void foo(T t);",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod",
    "entityType": "class",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ExtendsBaseClassWithGenericAnnotatedMethod#foo(String)",
    "entityType": "method",
    "code": "@Override\r\npublic void foo(String t) ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithRepeated",
    "entityType": "class",
    "code": "@MyRepeatable(\"A\")\r\n@MyRepeatableContainer({ @MyRepeatable(\"B\"), @MyRepeatable(\"C\") })\r\n@MyRepeatableMeta1\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.InterfaceWithRepeated#foo()",
    "entityType": "method",
    "code": "@MyRepeatable(\"A\")\r\n@MyRepeatableContainer({ @MyRepeatable(\"B\"), @MyRepeatable(\"C\") })\r\n@MyRepeatableMeta1\r\nvoid foo();",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.MyRepeatableClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubMyRepeatableClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubMyRepeatableWithAdditionalLocalDeclarationsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SubSubMyRepeatableWithAdditionalLocalDeclarationsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController",
    "entityType": "class",
    "code": "@WebMapping(value = \"/test\", name = \"foo\")\r\npublic void handleMappedWithValueAttribute() ;\n@WebMapping(path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithPathAttribute() ;\n@Get(\"/test\")\r\npublic void getMappedWithValueAttribute() ;\n@Get(path = \"/test\")\r\npublic void getMappedWithPathAttribute() ;\n@Post(path = \"/test\")\r\npublic void postMappedWithPathAttribute() ;\n/**\r\n * mapping is logically \"equal\" to handleMappedWithPathAttribute().\r\n */\r\n@WebMapping(value = \"/test\", path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithSamePathAndValueAttributes() ;\n@WebMapping(value = \"/enigma\", path = \"/test\", name = \"baz\")\r\npublic void handleMappedWithDifferentPathAndValueAttributes() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithValueAttribute()",
    "entityType": "method",
    "code": "@WebMapping(value = \"/test\", name = \"foo\")\r\npublic void handleMappedWithValueAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@WebMapping(path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#getMappedWithValueAttribute()",
    "entityType": "method",
    "code": "@Get(\"/test\")\r\npublic void getMappedWithValueAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#getMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@Get(path = \"/test\")\r\npublic void getMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#postMappedWithPathAttribute()",
    "entityType": "method",
    "code": "@Post(path = \"/test\")\r\npublic void postMappedWithPathAttribute() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithSamePathAndValueAttributes()",
    "entityType": "method",
    "code": "/**\r\n * mapping is logically \"equal\" to handleMappedWithPathAttribute().\r\n */\r\n@WebMapping(value = \"/test\", path = \"/test\", name = \"bar\", method = { RequestMethod.GET, RequestMethod.POST })\r\npublic void handleMappedWithSamePathAndValueAttributes() ;",
    "comment": "\n\t\t * mapping is logically \"equal\" to handleMappedWithPathAttribute().\n\t\t "
  },
  {
    "entityId": "org.springframework.core.annotation.WebController#handleMappedWithDifferentPathAndValueAttributes()",
    "entityType": "method",
    "code": "@WebMapping(value = \"/enigma\", path = \"/test\", name = \"baz\")\r\npublic void handleMappedWithDifferentPathAndValueAttributes() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.ConfigHierarchyTestCase",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.SimpleConfigTestCase",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.GroupOfCharsClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMissingAttributeDeclarationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithDuplicateAttributeDeclarationClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForNonexistentAttributeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithoutMirroredAliasForClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMirroredAliasForWrongAttributeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForAttributeOfDifferentTypeClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForWithMissingDefaultValuesClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasForAttributeWithDifferentDefaultValueClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.AliasedComposedContextConfigNotMetaPresentClass",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.annotation.GroovyImplicitAliasesContextConfigClass",
    "entityType": "class",
    "code": "",
    "comment": " Attribute value intentionally matches attribute name:"
  },
  {
    "entityId": "org.springframework.core.annotation.XmlImplicitAliasesContextConfigClass",
    "entityType": "class",
    "code": "",
    "comment": " Attribute value intentionally matches attribute name:"
  }
]