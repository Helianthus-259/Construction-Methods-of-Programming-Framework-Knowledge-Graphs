[
  {
    "entityId": "org.springframework.core.MethodParameterTests#multipleResolveParameterTypeCalls()",
    "entityType": "method",
    "code": "@Test\r\n@Deprecated\r\nvoid multipleResolveParameterTypeCalls() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, -1);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Object.class);\r\n    GenericTypeResolver.resolveParameterType(methodParameter, StringList.class);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(String.class);\r\n    GenericTypeResolver.resolveParameterType(methodParameter, IntegerList.class);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Integer.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersContainingClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid equalsAndHashCodeConsidersContainingClass() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m3 = MethodParameter.forExecutable(method, -1).nested();\r\n    assertThat(m1).isEqualTo(m2).isNotEqualTo(m3);\r\n    assertThat(m1.hashCode()).isEqualTo(m2.hashCode());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#equalsAndHashCodeConsidersNesting()",
    "entityType": "method",
    "code": "@Test\r\nvoid equalsAndHashCodeConsidersNesting() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1).withContainingClass(StringList.class);\r\n    MethodParameter m2 = MethodParameter.forExecutable(method, -1).withContainingClass(StringList.class);\r\n    MethodParameter m3 = MethodParameter.forExecutable(method, -1).withContainingClass(IntegerList.class);\r\n    MethodParameter m4 = MethodParameter.forExecutable(method, -1);\r\n    assertThat(m1).isEqualTo(m2).isNotEqualTo(m3).isNotEqualTo(m4);\r\n    assertThat(m1.hashCode()).isEqualTo(m2.hashCode());\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#withContainingClassReturnsNewInstance()",
    "entityType": "method",
    "code": "@Test\r\nvoid withContainingClassReturnsNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withContainingClass(StringList.class);\r\n    MethodParameter m3 = m1.withContainingClass(IntegerList.class);\r\n    assertThat(m1).isNotSameAs(m2).isNotSameAs(m3);\r\n    assertThat(m1.getParameterType()).isEqualTo(Object.class);\r\n    assertThat(m2.getParameterType()).isEqualTo(String.class);\r\n    assertThat(m3.getParameterType()).isEqualTo(Integer.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#withTypeIndexReturnsNewInstance()",
    "entityType": "method",
    "code": "@Test\r\nvoid withTypeIndexReturnsNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withTypeIndex(2);\r\n    MethodParameter m3 = m1.withTypeIndex(3);\r\n    assertThat(m1).isNotSameAs(m2).isNotSameAs(m3);\r\n    assertThat(m1.getTypeIndexForCurrentLevel()).isNull();\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isEqualTo(2);\r\n    assertThat(m3.getTypeIndexForCurrentLevel()).isEqualTo(3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#mutatingNestingLevelShouldNotChangeNewInstance()",
    "entityType": "method",
    "code": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid mutatingNestingLevelShouldNotChangeNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.withTypeIndex(2);\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isEqualTo(2);\r\n    m1.setTypeIndexForCurrentLevel(1);\r\n    m2.decreaseNestingLevel();\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#nestedWithTypeIndexReturnsNewInstance()",
    "entityType": "method",
    "code": "@Test\r\nvoid nestedWithTypeIndexReturnsNewInstance() throws Exception {\r\n    Method method = ArrayList.class.getMethod(\"get\", int.class);\r\n    MethodParameter m1 = MethodParameter.forExecutable(method, -1);\r\n    MethodParameter m2 = m1.nested(2);\r\n    MethodParameter m3 = m1.nested(3);\r\n    assertThat(m1).isNotSameAs(m2).isNotSameAs(m3);\r\n    assertThat(m1.getTypeIndexForCurrentLevel()).isNull();\r\n    assertThat(m2.getTypeIndexForCurrentLevel()).isEqualTo(2);\r\n    assertThat(m3.getTypeIndexForCurrentLevel()).isEqualTo(3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#jspecifyNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableParameter() {\r\n    assertThat(jspecifyNullableParameter.isOptional()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#jspecifyNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullParameter() {\r\n    assertThat(jspecifyNonNullParameter.isOptional()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#springNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid springNullableParameter() {\r\n    assertThat(springNullableParameter.isOptional()).isTrue();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#springNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid springNonNullParameter() {\r\n    assertThat(springNonNullParameter.isOptional()).isFalse();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#method(String,long)",
    "entityType": "method",
    "code": "public int method(String p1, long p2) {\r\n    return 42;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#jspecifyNullableMethod(String,String)",
    "entityType": "method",
    "code": "@org.jspecify.annotations.Nullable\r\npublic String jspecifyNullableMethod(@org.jspecify.annotations.Nullable String nullableParameter, String nonNullParameter) {\r\n    return nullableParameter;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.MethodParameterTests#springNullableMethod(String,String)",
    "entityType": "method",
    "code": "@SuppressWarnings(\"deprecation\")\r\n@org.springframework.lang.Nullable\r\npublic String springNullableMethod(@org.springframework.lang.Nullable String nullableParameter, String nonNullParameter) {\r\n    return nullableParameter;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NestedClass",
    "entityType": "class",
    "code": "NestedClass(@Param String s) {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.InnerClass",
    "entityType": "class",
    "code": "public InnerClass(@Param String s, Callable<Integer> i) {\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.StringList",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.IntegerList",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests",
    "entityType": "class",
    "code": "// JSpecify without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyNullableReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyNonNullReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyNullableParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyNonNullParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with MethodParameter without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyNullableReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyNonNullReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyUnspecifiedParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 0);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyNullableParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyNonNullParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 2);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with Field without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"unannotatedField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyNullableWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"jspecifyNullableField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyNonNullWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"jspecifyNonNullField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with method-level @NullMarked\r\n@Test\r\nvoid jspecifyMethodMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyMethodMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableMarkedProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyMethodMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullMarkedProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyMethodMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyMethodMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyMethodMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with class-level @NullMarked\r\n@Test\r\nvoid jspecifyClassMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyClassMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyClassMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyClassMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyClassMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyClassMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with package-level @NullMarked\r\n@Test\r\nvoid jspecifyPackageMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyPackageMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyPackageMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyPackageMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyPackageMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyPackageMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// JSpecify with package-level @NullUnmarked\r\n@Test\r\nvoid jspecifyPackageUnmarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyPackageUnmarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyPackageUnmarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid jspecifyPackageUnmarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}\n@Test\r\nvoid jspecifyPackageUnmarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid jspecifyPackageUnmarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n// Custom @Nullable\r\n@Test\r\nvoid customNullableReturnType() throws NoSuchMethodException {\r\n    var method = CustomNullableProcessor.class.getMethod(\"process\", String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid customNullableParameter() throws NoSuchMethodException {\r\n    var method = CustomNullableProcessor.class.getMethod(\"process\", String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n@Test\r\nvoid customNullableField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"customNullableField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}\n// Primitive types\r\n@Test\r\nvoid primitiveField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"primitiveField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}\n@Test\r\nvoid voidMethod() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"voidProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": "\n * Tests for {@link Nullness}.\n *\n * @author Sebastien Deleuze\n "
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyUnspecifiedReturnType()",
    "entityType": "method",
    "code": "// JSpecify without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNullableReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNonNullReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyUnspecifiedReturnTypeWithMethodParameter()",
    "entityType": "method",
    "code": "// JSpecify with MethodParameter without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNullableReturnTypeWithMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNonNullReturnTypeWithMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullReturnTypeWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var methodParameter = MethodParameter.forExecutable(method, -1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyUnspecifiedParameterWithMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyUnspecifiedParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 0);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNullableParameterWithMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 1);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNonNullParameterWithMethodParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullParameterWithMethodParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var methodParameter = MethodParameter.forExecutable(method, 2);\r\n    var nullness = Nullness.forMethodParameter(methodParameter);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyUnspecifiedWithField()",
    "entityType": "method",
    "code": "// JSpecify with Field without @NullMarked and @NullUnmarked\r\n@Test\r\nvoid jspecifyUnspecifiedWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"unannotatedField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNullableWithField()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNullableWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"jspecifyNullableField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyNonNullWithField()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyNonNullWithField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"jspecifyNonNullField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedUnspecifiedReturnType()",
    "entityType": "method",
    "code": "// JSpecify with method-level @NullMarked\r\n@Test\r\nvoid jspecifyMethodMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedNullableReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyMethodMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nullableMarkedProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedNonNullReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyMethodMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"nonNullMarkedProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyMethodMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyMethodMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyMethodMarkedNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyMethodMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"markedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedUnspecifiedReturnType()",
    "entityType": "method",
    "code": "// JSpecify with class-level @NullMarked\r\n@Test\r\nvoid jspecifyClassMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedNullableReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedNonNullReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedMethodUnmarkedUnspecifiedReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedMethodUnmarkedUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedMethodUnmarkedNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyClassMarkedMethodUnmarkedNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyClassMarkedMethodUnmarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = ClassMarkedJSpecifyProcessor.class.getMethod(\"unmarkedProcess\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedUnspecifiedReturnType()",
    "entityType": "method",
    "code": "// JSpecify with package-level @NullMarked\r\n@Test\r\nvoid jspecifyPackageMarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedNullableReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageMarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedNonNullReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageMarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageMarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageMarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageMarkedNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageMarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = PackageMarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedUnspecifiedReturnType()",
    "entityType": "method",
    "code": "// JSpecify with package-level @NullUnmarked\r\n@Test\r\nvoid jspecifyPackageUnmarkedUnspecifiedReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedNullableReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageUnmarkedNullableReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"nullableProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedNonNullReturnType()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageUnmarkedNonNullReturnType() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"nonNullProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedUnspecifiedParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageUnmarkedUnspecifiedParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageUnmarkedNullableParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[1]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#jspecifyPackageUnmarkedNonNullParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid jspecifyPackageUnmarkedNonNullParameter() throws NoSuchMethodException {\r\n    var method = PackageUnmarkedJSpecifyProcessor.class.getMethod(\"process\", String.class, String.class, String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[2]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#customNullableReturnType()",
    "entityType": "method",
    "code": "// Custom @Nullable\r\n@Test\r\nvoid customNullableReturnType() throws NoSuchMethodException {\r\n    var method = CustomNullableProcessor.class.getMethod(\"process\", String.class);\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#customNullableParameter()",
    "entityType": "method",
    "code": "@Test\r\nvoid customNullableParameter() throws NoSuchMethodException {\r\n    var method = CustomNullableProcessor.class.getMethod(\"process\", String.class);\r\n    var nullness = Nullness.forParameter(method.getParameters()[0]);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#customNullableField()",
    "entityType": "method",
    "code": "@Test\r\nvoid customNullableField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"customNullableField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NULLABLE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#primitiveField()",
    "entityType": "method",
    "code": "// Primitive types\r\n@Test\r\nvoid primitiveField() throws NoSuchFieldException {\r\n    var field = NullnessFields.class.getDeclaredField(\"primitiveField\");\r\n    var nullness = Nullness.forField(field);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.NON_NULL);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.NullnessTests#voidMethod()",
    "entityType": "method",
    "code": "@Test\r\nvoid voidMethod() throws NoSuchMethodException {\r\n    var method = JSpecifyProcessor.class.getMethod(\"voidProcess\");\r\n    var nullness = Nullness.forMethodReturnType(method);\r\n    Assertions.assertThat(nullness).isEqualTo(Nullness.UNSPECIFIED);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests",
    "entityType": "class",
    "code": "private final OrderComparator comparator = new OrderComparator();\n@Test\r\nvoid compareOrderedInstancesBefore() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(2000))).isEqualTo(-1);\r\n}\n@Test\r\nvoid compareOrderedInstancesSame() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(100))).isEqualTo(0);\r\n}\n@Test\r\nvoid compareOrderedInstancesAfter() {\r\n    assertThat(this.comparator.compare(new StubOrdered(982300), new StubOrdered(100))).isEqualTo(1);\r\n}\n@Test\r\nvoid compareOrderedInstancesNullFirst() {\r\n    assertThat(this.comparator.compare(null, new StubOrdered(100))).isEqualTo(1);\r\n}\n@Test\r\nvoid compareOrderedInstancesNullLast() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), null)).isEqualTo(-1);\r\n}\n@Test\r\nvoid compareOrderedInstancesDoubleNull() {\r\n    assertThat(this.comparator.compare(null, null)).isEqualTo(0);\r\n}\n@Test\r\nvoid compareTwoNonOrderedInstancesEndsUpAsSame() {\r\n    assertThat(this.comparator.compare(new Object(), new Object())).isEqualTo(0);\r\n}\n@Test\r\nvoid comparePriorityOrderedInstancesBefore() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(2000))).isEqualTo(-1);\r\n}\n@Test\r\nvoid comparePriorityOrderedInstancesSame() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(100))).isEqualTo(0);\r\n}\n@Test\r\nvoid comparePriorityOrderedInstancesAfter() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(982300), new StubPriorityOrdered(100))).isEqualTo(1);\r\n}\n@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(200), new StubOrdered(100));\r\n}\n@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(100));\r\n}\n@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(200));\r\n}\nprivate void assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered priority, StubOrdered standard) {\r\n    assertThat(this.comparator.compare(priority, standard)).isEqualTo(-1);\r\n    assertThat(this.comparator.compare(standard, priority)).isEqualTo(1);\r\n}\n@Test\r\nvoid compareWithSimpleSourceProvider() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new StubOrdered(25)));\r\n    assertThat(customComparator.compare(new StubOrdered(10), 5L)).isEqualTo(-1);\r\n}\n@Test\r\nvoid compareWithSourceProviderArray() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new Object[] { new StubOrdered(10), new StubOrdered(-25) }));\r\n    assertThat(customComparator.compare(5L, new Object())).isEqualTo(-1);\r\n}\n@Test\r\nvoid compareWithSourceProviderArrayNoMatch() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new Object[] { new Object(), new Object() }));\r\n    assertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\r\n}\n@Test\r\nvoid compareWithSourceProviderEmpty() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(50L, new Object()));\r\n    assertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\r\n}\nprivate static class StubOrdered implements Ordered {\r\n\r\n    private final int order;\r\n\r\n    StubOrdered(int order) {\r\n        this.order = order;\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return this.order;\r\n    }\r\n}\nprivate static class StubPriorityOrdered implements PriorityOrdered {\r\n\r\n    private final int order;\r\n\r\n    StubPriorityOrdered(int order) {\r\n        this.order = order;\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return this.order;\r\n    }\r\n}\nprivate static class TestSourceProvider implements OrderComparator.OrderSourceProvider {\r\n\r\n    private final Object target;\r\n\r\n    private final Object orderSource;\r\n\r\n    TestSourceProvider(Object target, Object orderSource) {\r\n        this.target = target;\r\n        this.orderSource = orderSource;\r\n    }\r\n\r\n    @Override\r\n    public Object getOrderSource(Object obj) {\r\n        if (target.equals(obj)) {\r\n            return orderSource;\r\n        }\r\n        return null;\r\n    }\r\n}",
    "comment": "\n * Tests for {@link OrderComparator}.\n *\n * @author Rick Evans\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @author Sam Brannen\n "
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesBefore()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesBefore() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(2000))).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesSame()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesSame() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(100))).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesAfter()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesAfter() {\r\n    assertThat(this.comparator.compare(new StubOrdered(982300), new StubOrdered(100))).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesNullFirst()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesNullFirst() {\r\n    assertThat(this.comparator.compare(null, new StubOrdered(100))).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesNullLast()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesNullLast() {\r\n    assertThat(this.comparator.compare(new StubOrdered(100), null)).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareOrderedInstancesDoubleNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareOrderedInstancesDoubleNull() {\r\n    assertThat(this.comparator.compare(null, null)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareTwoNonOrderedInstancesEndsUpAsSame()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareTwoNonOrderedInstancesEndsUpAsSame() {\r\n    assertThat(this.comparator.compare(new Object(), new Object())).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstancesBefore()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstancesBefore() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(2000))).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstancesSame()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstancesSame() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(100))).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstancesAfter()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstancesAfter() {\r\n    assertThat(this.comparator.compare(new StubPriorityOrdered(982300), new StubPriorityOrdered(100))).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(200), new StubOrdered(100));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(100));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority()",
    "entityType": "method",
    "code": "@Test\r\nvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority() {\r\n    assertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(200));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered,StubOrdered)",
    "entityType": "method",
    "code": "private void assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered priority, StubOrdered standard) {\r\n    assertThat(this.comparator.compare(priority, standard)).isEqualTo(-1);\r\n    assertThat(this.comparator.compare(standard, priority)).isEqualTo(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareWithSimpleSourceProvider()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareWithSimpleSourceProvider() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new StubOrdered(25)));\r\n    assertThat(customComparator.compare(new StubOrdered(10), 5L)).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderArray()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareWithSourceProviderArray() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new Object[] { new StubOrdered(10), new StubOrdered(-25) }));\r\n    assertThat(customComparator.compare(5L, new Object())).isEqualTo(-1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderArrayNoMatch()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareWithSourceProviderArrayNoMatch() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(5L, new Object[] { new Object(), new Object() }));\r\n    assertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderEmpty()",
    "entityType": "method",
    "code": "@Test\r\nvoid compareWithSourceProviderEmpty() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(50L, new Object()));\r\n    assertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.StubOrdered",
    "entityType": "class",
    "code": "private final int order;\nStubOrdered(int order) {\r\n    this.order = order;\r\n}\n@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.StubOrdered#getOrder()",
    "entityType": "method",
    "code": "@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.StubPriorityOrdered",
    "entityType": "class",
    "code": "private final int order;\nStubPriorityOrdered(int order) {\r\n    this.order = order;\r\n}\n@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.StubPriorityOrdered#getOrder()",
    "entityType": "method",
    "code": "@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestSourceProvider",
    "entityType": "class",
    "code": "private final Object target;\nprivate final Object orderSource;\nTestSourceProvider(Object target, Object orderSource) {\r\n    this.target = target;\r\n    this.orderSource = orderSource;\r\n}\n@Override\r\npublic Object getOrderSource(Object obj) {\r\n    if (target.equals(obj)) {\r\n        return orderSource;\r\n    }\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.TestSourceProvider#getOrderSource(Object)",
    "entityType": "method",
    "code": "@Override\r\npublic Object getOrderSource(Object obj) {\r\n    if (target.equals(obj)) {\r\n        return orderSource;\r\n    }\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests",
    "entityType": "class",
    "code": "@Test\r\nvoid stringTypeReference() {\r\n    ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(String.class);\r\n}\n@Test\r\nvoid mapTypeReference() throws Exception {\r\n    Type mapType = getClass().getMethod(\"mapMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<Map<Object, String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(mapType);\r\n}\n@Test\r\nvoid listTypeReference() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}\n@Test\r\nvoid reflectiveTypeReferenceWithSpecificDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}\n@Test\r\nvoid reflectiveTypeReferenceWithGenericDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<?> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}\npublic static Map<Object, String> mapMethod() {\r\n    return null;\r\n}\npublic static List<String> listMethod() {\r\n    return null;\r\n}",
    "comment": "\n * Test fixture for {@link ParameterizedTypeReference}.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n "
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#stringTypeReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid stringTypeReference() {\r\n    ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(String.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#mapTypeReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid mapTypeReference() throws Exception {\r\n    Type mapType = getClass().getMethod(\"mapMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<Map<Object, String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(mapType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#listTypeReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid listTypeReference() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithSpecificDeclaration()",
    "entityType": "method",
    "code": "@Test\r\nvoid reflectiveTypeReferenceWithSpecificDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithGenericDeclaration()",
    "entityType": "method",
    "code": "@Test\r\nvoid reflectiveTypeReferenceWithGenericDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<?> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#mapMethod()",
    "entityType": "method",
    "code": "public static Map<Object, String> mapMethod() {\r\n    return null;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.ParameterizedTypeReferenceTests#listMethod()",
    "entityType": "method",
    "code": "public static List<String> listMethod() {\r\n    return null;\r\n}",
    "comment": ""
  }
]