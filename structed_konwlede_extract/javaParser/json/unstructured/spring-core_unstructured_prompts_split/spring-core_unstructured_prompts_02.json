[
  {
    "entityId": "org.springframework.util.C#m02()",
    "entityType": "method",
    "code": "void m02() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m03()",
    "entityType": "method",
    "code": "void m03() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m04()",
    "entityType": "method",
    "code": "void m04() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m05()",
    "entityType": "method",
    "code": "void m05() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m06()",
    "entityType": "method",
    "code": "void m06() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m07()",
    "entityType": "method",
    "code": "void m07() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m08()",
    "entityType": "method",
    "code": "void m08() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m09()",
    "entityType": "method",
    "code": "void m09() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m10()",
    "entityType": "method",
    "code": "void m10() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m11()",
    "entityType": "method",
    "code": "void m11() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m12()",
    "entityType": "method",
    "code": "void m12() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m13()",
    "entityType": "method",
    "code": "void m13() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m14()",
    "entityType": "method",
    "code": "void m14() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m15()",
    "entityType": "method",
    "code": "void m15() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m16()",
    "entityType": "method",
    "code": "void m16() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m17()",
    "entityType": "method",
    "code": "void m17() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m18()",
    "entityType": "method",
    "code": "void m18() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m19()",
    "entityType": "method",
    "code": "void m19() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m20()",
    "entityType": "method",
    "code": "void m20() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m21()",
    "entityType": "method",
    "code": "void m21() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m22()",
    "entityType": "method",
    "code": "void m22() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m23()",
    "entityType": "method",
    "code": "void m23() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m24()",
    "entityType": "method",
    "code": "void m24() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m25()",
    "entityType": "method",
    "code": "void m25() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m26()",
    "entityType": "method",
    "code": "void m26() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m27()",
    "entityType": "method",
    "code": "void m27() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m28()",
    "entityType": "method",
    "code": "void m28() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m29()",
    "entityType": "method",
    "code": "void m29() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m30()",
    "entityType": "method",
    "code": "void m30() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m31()",
    "entityType": "method",
    "code": "void m31() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m32()",
    "entityType": "method",
    "code": "void m32() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m33()",
    "entityType": "method",
    "code": "void m33() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m34()",
    "entityType": "method",
    "code": "void m34() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m35()",
    "entityType": "method",
    "code": "void m35() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m36()",
    "entityType": "method",
    "code": "void m36() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m37()",
    "entityType": "method",
    "code": "void m37() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m38()",
    "entityType": "method",
    "code": "void m38() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m39()",
    "entityType": "method",
    "code": "void m39() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m40()",
    "entityType": "method",
    "code": "void m40() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m41()",
    "entityType": "method",
    "code": "void m41() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m42()",
    "entityType": "method",
    "code": "void m42() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m43()",
    "entityType": "method",
    "code": "void m43() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m44()",
    "entityType": "method",
    "code": "void m44() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m45()",
    "entityType": "method",
    "code": "void m45() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m46()",
    "entityType": "method",
    "code": "void m46() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m47()",
    "entityType": "method",
    "code": "void m47() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m48()",
    "entityType": "method",
    "code": "void m48() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m49()",
    "entityType": "method",
    "code": "void m49() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m50()",
    "entityType": "method",
    "code": "void m50() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m51()",
    "entityType": "method",
    "code": "void m51() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m52()",
    "entityType": "method",
    "code": "void m52() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m53()",
    "entityType": "method",
    "code": "void m53() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m54()",
    "entityType": "method",
    "code": "void m54() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m55()",
    "entityType": "method",
    "code": "void m55() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m56()",
    "entityType": "method",
    "code": "void m56() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m57()",
    "entityType": "method",
    "code": "void m57() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m58()",
    "entityType": "method",
    "code": "void m58() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m59()",
    "entityType": "method",
    "code": "void m59() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m60()",
    "entityType": "method",
    "code": "void m60() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m61()",
    "entityType": "method",
    "code": "void m61() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m62()",
    "entityType": "method",
    "code": "void m62() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m63()",
    "entityType": "method",
    "code": "void m63() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m64()",
    "entityType": "method",
    "code": "void m64() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m65()",
    "entityType": "method",
    "code": "void m65() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m66()",
    "entityType": "method",
    "code": "void m66() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m67()",
    "entityType": "method",
    "code": "void m67() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m68()",
    "entityType": "method",
    "code": "void m68() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m69()",
    "entityType": "method",
    "code": "void m69() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m70()",
    "entityType": "method",
    "code": "void m70() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m71()",
    "entityType": "method",
    "code": "void m71() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m72()",
    "entityType": "method",
    "code": "void m72() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m73()",
    "entityType": "method",
    "code": "void m73() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m74()",
    "entityType": "method",
    "code": "void m74() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m75()",
    "entityType": "method",
    "code": "void m75() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m76()",
    "entityType": "method",
    "code": "void m76() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m77()",
    "entityType": "method",
    "code": "void m77() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m78()",
    "entityType": "method",
    "code": "void m78() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m79()",
    "entityType": "method",
    "code": "void m79() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m80()",
    "entityType": "method",
    "code": "void m80() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m81()",
    "entityType": "method",
    "code": "void m81() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m82()",
    "entityType": "method",
    "code": "void m82() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m83()",
    "entityType": "method",
    "code": "void m83() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m84()",
    "entityType": "method",
    "code": "void m84() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m85()",
    "entityType": "method",
    "code": "void m85() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m86()",
    "entityType": "method",
    "code": "void m86() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m87()",
    "entityType": "method",
    "code": "void m87() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m88()",
    "entityType": "method",
    "code": "void m88() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m89()",
    "entityType": "method",
    "code": "void m89() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m90()",
    "entityType": "method",
    "code": "void m90() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m91()",
    "entityType": "method",
    "code": "void m91() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m92()",
    "entityType": "method",
    "code": "void m92() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m93()",
    "entityType": "method",
    "code": "void m93() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m94()",
    "entityType": "method",
    "code": "void m94() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m95()",
    "entityType": "method",
    "code": "void m95() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m96()",
    "entityType": "method",
    "code": "void m96() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m97()",
    "entityType": "method",
    "code": "void m97() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m98()",
    "entityType": "method",
    "code": "void m98() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.C#m99()",
    "entityType": "method",
    "code": "void m99() ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.core.style.SimpleValueStylerTests",
    "entityType": "class",
    "code": "@Nested\r\nclass CommonStyling {\r\n\r\n    private final SimpleValueStyler styler = new SimpleValueStyler();\r\n\r\n    @Test\r\n    void styleBasics() {\r\n        assertThat(styler.style(null)).isEqualTo(\"null\");\r\n        assertThat(styler.style(true)).isEqualTo(\"true\");\r\n        assertThat(styler.style(99.9)).isEqualTo(\"99.9\");\r\n        assertThat(styler.style(\"str\")).isEqualTo(\"\\\"str\\\"\");\r\n    }\r\n\r\n    @Test\r\n    void stylePlainObject() {\r\n        Object obj = new Object();\r\n        assertThat(styler.style(obj)).isEqualTo(String.valueOf(obj));\r\n    }\r\n\r\n    @Test\r\n    void styleMaps() {\r\n        assertThat(styler.style(Map.of())).isEqualTo(\"{}\");\r\n        assertThat(styler.style(Map.of(\"key\", 1))).isEqualTo(\"{\\\"key\\\" -> 1}\");\r\n        Map<String, Integer> map = new LinkedHashMap<>() {\r\n\r\n            {\r\n                put(\"key1\", 1);\r\n                put(\"key2\", 2);\r\n            }\r\n        };\r\n        assertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> 1, \\\"key2\\\" -> 2}\");\r\n    }\r\n\r\n    @Test\r\n    void styleMapEntries() {\r\n        Map<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2);\r\n        assertThat(map.entrySet()).map(styler::style).containsExactlyInAnyOrder(\"\\\"key1\\\" -> 1\", \"\\\"key2\\\" -> 2\");\r\n    }\r\n\r\n    @Test\r\n    void styleLists() {\r\n        assertThat(styler.style(List.of())).isEqualTo(\"[]\");\r\n        assertThat(styler.style(List.of(1))).isEqualTo(\"[1]\");\r\n        assertThat(styler.style(List.of(1, 2))).isEqualTo(\"[1, 2]\");\r\n    }\r\n\r\n    @Test\r\n    void stylePrimitiveArrays() {\r\n        int[] array = new int[0];\r\n        assertThat(styler.style(array)).isEqualTo(\"[]\");\r\n        array = new int[] { 1 };\r\n        assertThat(styler.style(array)).isEqualTo(\"[1]\");\r\n        array = new int[] { 1, 2 };\r\n        assertThat(styler.style(array)).isEqualTo(\"[1, 2]\");\r\n    }\r\n\r\n    @Test\r\n    void styleObjectArrays() {\r\n        String[] array = new String[0];\r\n        assertThat(styler.style(array)).isEqualTo(\"[]\");\r\n        array = new String[] { \"str1\" };\r\n        assertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\"]\");\r\n        array = new String[] { \"str1\", \"str2\" };\r\n        assertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\", \\\"str2\\\"]\");\r\n    }\r\n}\n@Nested\r\nclass DefaultClassAndMethodStylers {\r\n\r\n    private final SimpleValueStyler styler = new SimpleValueStyler();\r\n\r\n    @Test\r\n    void styleClass() {\r\n        assertThat(styler.style(String.class)).isEqualTo(\"java.lang.String\");\r\n        assertThat(styler.style(getClass())).isEqualTo(getClass().getCanonicalName());\r\n        assertThat(styler.style(String[].class)).isEqualTo(\"java.lang.String[]\");\r\n        assertThat(styler.style(int[][].class)).isEqualTo(\"int[][]\");\r\n    }\r\n\r\n    @Test\r\n    void styleMethod() throws NoSuchMethodException {\r\n        assertThat(styler.style(String.class.getMethod(\"toString\"))).isEqualTo(\"toString()\");\r\n        assertThat(styler.style(String.class.getMethod(\"getBytes\", Charset.class))).isEqualTo(\"getBytes(Charset)\");\r\n    }\r\n\r\n    @Test\r\n    void styleClassMap() {\r\n        Map<String, Class<?>> map = new LinkedHashMap<>() {\r\n\r\n            {\r\n                put(\"key1\", Integer.class);\r\n                put(\"key2\", DefaultClassAndMethodStylers.class);\r\n            }\r\n        };\r\n        assertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> java.lang.Integer, \\\"key2\\\" -> %s}\", DefaultClassAndMethodStylers.class.getCanonicalName());\r\n    }\r\n\r\n    @Test\r\n    void styleClassList() {\r\n        assertThat(styler.style(List.of(Integer.class, String.class))).isEqualTo(\"[java.lang.Integer, java.lang.String]\");\r\n    }\r\n\r\n    @Test\r\n    void styleClassArray() {\r\n        Class<?>[] array = new Class<?>[] { Integer.class, getClass() };\r\n        assertThat(styler.style(array)).isEqualTo(\"[%s, %s]\", Integer.class.getCanonicalName(), getClass().getCanonicalName());\r\n    }\r\n}\n@Nested\r\nclass CustomClassAndMethodStylers {\r\n\r\n    private final SimpleValueStyler styler = new SimpleValueStyler(Class::getSimpleName, Method::toGenericString);\r\n\r\n    @Test\r\n    void styleClass() {\r\n        assertThat(styler.style(String.class)).isEqualTo(\"String\");\r\n        assertThat(styler.style(getClass())).isEqualTo(getClass().getSimpleName());\r\n        assertThat(styler.style(String[].class)).isEqualTo(\"String[]\");\r\n        assertThat(styler.style(int[][].class)).isEqualTo(\"int[][]\");\r\n    }\r\n\r\n    @Test\r\n    void styleMethod() throws NoSuchMethodException {\r\n        Method method = String.class.getMethod(\"toString\");\r\n        assertThat(styler.style(method)).isEqualTo(method.toGenericString());\r\n    }\r\n\r\n    @Test\r\n    void styleClassMap() {\r\n        Map<String, Class<?>> map = new LinkedHashMap<>() {\r\n\r\n            {\r\n                put(\"key1\", Integer.class);\r\n                put(\"key2\", CustomClassAndMethodStylers.class);\r\n            }\r\n        };\r\n        assertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> %s, \\\"key2\\\" -> %s}\", Integer.class.getSimpleName(), CustomClassAndMethodStylers.class.getSimpleName());\r\n    }\r\n\r\n    @Test\r\n    void styleClassList() {\r\n        assertThat(styler.style(List.of(Integer.class, String.class))).isEqualTo(\"[Integer, String]\");\r\n    }\r\n\r\n    @Test\r\n    void styleClassArray() {\r\n        Class<?>[] array = new Class<?>[] { Integer.class, getClass() };\r\n        assertThat(styler.style(array)).isEqualTo(\"[%s, %s]\", Integer.class.getSimpleName(), getClass().getSimpleName());\r\n    }\r\n}",
    "comment": "\n * Tests for {@link SimpleValueStyler}.\n *\n * @author Sam Brannen\n * @since 6.0\n "
  },
  {
    "entityId": "org.springframework.core.style.CommonStyling",
    "entityType": "class",
    "code": "private final SimpleValueStyler styler = new SimpleValueStyler();\n@Test\r\nvoid styleBasics() {\r\n    assertThat(styler.style(null)).isEqualTo(\"null\");\r\n    assertThat(styler.style(true)).isEqualTo(\"true\");\r\n    assertThat(styler.style(99.9)).isEqualTo(\"99.9\");\r\n    assertThat(styler.style(\"str\")).isEqualTo(\"\\\"str\\\"\");\r\n}\n@Test\r\nvoid stylePlainObject() {\r\n    Object obj = new Object();\r\n    assertThat(styler.style(obj)).isEqualTo(String.valueOf(obj));\r\n}\n@Test\r\nvoid styleMaps() {\r\n    assertThat(styler.style(Map.of())).isEqualTo(\";\");\r\n    assertThat(styler.style(Map.of(\"key\", 1))).isEqualTo(\"{\\\"key\\\" -> 1}\");\r\n    Map<String, Integer> map = new LinkedHashMap<>() {\r\n\r\n        {\r\n            put(\"key1\", 1);\r\n            put(\"key2\", 2);\r\n        }\r\n    };\r\n    assertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> 1, \\\"key2\\\" -> 2}\");\r\n}\n@Test\r\nvoid styleMapEntries() {\r\n    Map<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2);\r\n    assertThat(map.entrySet()).map(styler::style).containsExactlyInAnyOrder(\"\\\"key1\\\" -> 1\", \"\\\"key2\\\" -> 2\");\r\n}\n@Test\r\nvoid styleLists() {\r\n    assertThat(styler.style(List.of())).isEqualTo(\"[]\");\r\n    assertThat(styler.style(List.of(1))).isEqualTo(\"[1]\");\r\n    assertThat(styler.style(List.of(1, 2))).isEqualTo(\"[1, 2]\");\r\n}\n@Test\r\nvoid stylePrimitiveArrays() {\r\n    int[] array = new int[0];\r\n    assertThat(styler.style(array)).isEqualTo(\"[]\");\r\n    array = new int[] { 1 };\r\n    assertThat(styler.style(array)).isEqualTo(\"[1]\");\r\n    array = new int[] { 1, 2 };\r\n    assertThat(styler.style(array)).isEqualTo(\"[1, 2]\");\r\n}\n@Test\r\nvoid styleObjectArrays() {\r\n    String[] array = new String[0];\r\n    assertThat(styler.style(array)).isEqualTo(\"[]\");\r\n    array = new String[] { \"str1\" };\r\n    assertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\"]\");\r\n    array = new String[] { \"str1\", \"str2\" };\r\n    assertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\", \\\"str2\\\"]\");\r\n}",
    "comment": ""
  }
]