[
  {
    "entityId": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenPackagePrivateGeneric()",
    "entityType": "method",
    "code": "@Test\r\nvoid forResolvableTypeWhenPackagePrivateGeneric() {\r\n    ResolvableType resolvableType = PublicFactoryBean.resolveToProtectedGenericParameter();\r\n    AccessControl accessControl = AccessControl.forResolvableType(resolvableType);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenRecursiveType()",
    "entityType": "method",
    "code": "@Test\r\nvoid forResolvableTypeWhenRecursiveType() {\r\n    ResolvableType resolvableType = ResolvableType.forClassWithGenerics(SelfReference.class, SelfReference.class);\r\n    AccessControl accessControl = AccessControl.forResolvableType(resolvableType);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.AccessControlTests#method(Class<?>,String,Class<?>)",
    "entityType": "method",
    "code": "private static Method method(Class<?> type, String name, Class<?>... parameterTypes) {\r\n    Method method = ReflectionUtils.findMethod(type, name, parameterTypes);\r\n    assertThat(method).isNotNull();\r\n    return method;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.AccessControlTests#field(Class<?>,String)",
    "entityType": "method",
    "code": "private static Field field(Class<?> type, String name) {\r\n    Field field = ReflectionUtils.findField(type, name);\r\n    assertThat(field).isNotNull();\r\n    return field;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.SelfReference",
    "entityType": "class",
    "code": "@SuppressWarnings({ \"unchecked\", \"unused\" })\r\nT getThis() {\r\n    return (T) this;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.SelfReference#getThis()",
    "entityType": "method",
    "code": "@SuppressWarnings({ \"unchecked\", \"unused\" })\r\nT getThis() {\r\n    return (T) this;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "entityType": "class",
    "code": "private static final ClassName TEST_TARGET = ClassName.get(\"com.example\", \"Test\");\nprivate final ClassNameGenerator generator = new ClassNameGenerator(TEST_TARGET);\n@Test\r\nvoid generateClassNameWhenTargetClassIsNullUsesMainTarget() {\r\n    ClassName generated = this.generator.generateClassName(\"test\", null);\r\n    assertThat(generated).hasToString(\"com.example.Test__Test\");\r\n}\n@Test\r\nvoid generateClassNameUseFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"One\").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__OneTest\");\r\n}\n@Test\r\nvoid generateClassNameWithNoTextFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"  \").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Test\");\r\n}\n@Test\r\nvoid generatedClassNameWhenFeatureIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generator.generateClassName(\"\", ClassName.get(InputStream.class))).withMessage(\"'featureName' must not be empty\");\r\n}\n@Test\r\nvoid generatedClassNameWhenFeatureIsNotAllLettersThrowsException() {\r\n    assertThat(this.generator.generateClassName(\"name!\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__Name\");\r\n    assertThat(this.generator.generateClassName(\"1NameHere\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__NameHere\");\r\n    assertThat(this.generator.generateClassName(\"Y0pe\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__YPe\");\r\n}\n@Test\r\nvoid generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName() {\r\n    ClassName generated = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Bytes\");\r\n}\n@Test\r\nvoid generateClassNameWithClassWhenInnerClassGeneratesName() {\r\n    ClassName innerBean = ClassName.get(\"com.example\", \"Test\", \"InnerBean\");\r\n    ClassName generated = this.generator.generateClassName(\"EventListener\", innerBean);\r\n    assertThat(generated).hasToString(\"com.example.Test_InnerBean__EventListener\");\r\n}\n@Test\r\nvoid generateClassWithClassWhenMultipleCallsGeneratesSequencedName() {\r\n    ClassName generated1 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated2 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated3 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated1).hasToString(\"java.io.InputStream__Bytes\");\r\n    assertThat(generated2).hasToString(\"java.io.InputStream__Bytes1\");\r\n    assertThat(generated3).hasToString(\"java.io.InputStream__Bytes2\");\r\n}",
    "comment": "\n * Tests for {@link ClassNameGenerator}.\n *\n * @author Phillip Webb\n "
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWhenTargetClassIsNullUsesMainTarget()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassNameWhenTargetClassIsNullUsesMainTarget() {\r\n    ClassName generated = this.generator.generateClassName(\"test\", null);\r\n    assertThat(generated).hasToString(\"com.example.Test__Test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameUseFeatureNamePrefix()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassNameUseFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"One\").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__OneTest\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithNoTextFeatureNamePrefix()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassNameWithNoTextFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"  \").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsEmptyThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid generatedClassNameWhenFeatureIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generator.generateClassName(\"\", ClassName.get(InputStream.class))).withMessage(\"'featureName' must not be empty\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsNotAllLettersThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid generatedClassNameWhenFeatureIsNotAllLettersThrowsException() {\r\n    assertThat(this.generator.generateClassName(\"name!\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__Name\");\r\n    assertThat(this.generator.generateClassName(\"1NameHere\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__NameHere\");\r\n    assertThat(this.generator.generateClassName(\"Y0pe\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__YPe\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName() {\r\n    ClassName generated = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Bytes\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenInnerClassGeneratesName()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassNameWithClassWhenInnerClassGeneratesName() {\r\n    ClassName innerBean = ClassName.get(\"com.example\", \"Test\", \"InnerBean\");\r\n    ClassName generated = this.generator.generateClassName(\"EventListener\", innerBean);\r\n    assertThat(generated).hasToString(\"com.example.Test_InnerBean__EventListener\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassWithClassWhenMultipleCallsGeneratesSequencedName()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateClassWithClassWhenMultipleCallsGeneratesSequencedName() {\r\n    ClassName generated1 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated2 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated3 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated1).hasToString(\"java.io.InputStream__Bytes\");\r\n    assertThat(generated2).hasToString(\"java.io.InputStream__Bytes1\");\r\n    assertThat(generated3).hasToString(\"java.io.InputStream__Bytes2\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "entityType": "class",
    "code": "private static final ClassName SAMPLE_TARGET = ClassName.get(\"com.example\", \"SampleTarget\");\nprivate static final Consumer<TypeSpec.Builder> typeSpecCustomizer = type -> {\r\n};\nprivate final GeneratedClasses generatedClasses = new GeneratedClasses(new ClassNameGenerator(SAMPLE_TARGET));\nprivate final InMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\nprivate final RuntimeHints runtimeHints = new RuntimeHints();\n@Test\r\nvoid createWithOnlyGeneratedFilesCreatesContext() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    assertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\r\n    assertThat(context.getRuntimeHints()).isInstanceOf(RuntimeHints.class);\r\n}\n@Test\r\nvoid createCreatesContext() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedFiles()).isNotNull();\r\n    assertThat(context.getRuntimeHints()).isNotNull();\r\n}\n@Test\r\nvoid createWhenGeneratedClassesIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext((GeneratedClasses) null, this.generatedFiles, this.runtimeHints)).withMessage(\"'generatedClasses' must not be null\");\r\n}\n@Test\r\nvoid createWhenGeneratedFilesIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses, null, this.runtimeHints)).withMessage(\"'generatedFiles' must not be null\");\r\n}\n@Test\r\nvoid createWhenRuntimeHintsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, null)).withMessage(\"'runtimeHints' must not be null\");\r\n}\n@Test\r\nvoid getGeneratedClassesReturnsClassNameGenerator() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedClasses()).isSameAs(this.generatedClasses);\r\n}\n@Test\r\nvoid getGeneratedFilesReturnsGeneratedFiles() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\r\n}\n@Test\r\nvoid getRuntimeHintsReturnsRuntimeHints() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getRuntimeHints()).isSameAs(this.runtimeHints);\r\n}\n@Test\r\nvoid withNameUpdateNamingConvention() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    GeneratedClass generatedClass = anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    assertThat(generatedClass.getName().simpleName()).endsWith(\"__AnotherTest\");\r\n}\n@Test\r\nvoid withNameKeepsTrackOfAllGeneratedFiles() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    assertThat(anotherContext.getGeneratedClasses()).isNotSameAs(context.getGeneratedClasses());\r\n    assertThat(anotherContext.getGeneratedFiles()).isSameAs(context.getGeneratedFiles());\r\n    assertThat(anotherContext.getRuntimeHints()).isSameAs(context.getRuntimeHints());\r\n    anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(2);\r\n}\n@Test\r\nvoid withNameGeneratesUniqueName() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).containsOnlyKeys(\"com/example/SampleTarget__TestFeature.java\", \"com/example/SampleTarget__Test1Feature.java\", \"com/example/SampleTarget__Test2Feature.java\");\r\n}",
    "comment": "\n * Tests for {@link DefaultGenerationContext}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#createWithOnlyGeneratedFilesCreatesContext()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWithOnlyGeneratedFilesCreatesContext() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    assertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\r\n    assertThat(context.getRuntimeHints()).isInstanceOf(RuntimeHints.class);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#createCreatesContext()",
    "entityType": "method",
    "code": "@Test\r\nvoid createCreatesContext() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedFiles()).isNotNull();\r\n    assertThat(context.getRuntimeHints()).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#createWhenGeneratedClassesIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenGeneratedClassesIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext((GeneratedClasses) null, this.generatedFiles, this.runtimeHints)).withMessage(\"'generatedClasses' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#createWhenGeneratedFilesIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenGeneratedFilesIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses, null, this.runtimeHints)).withMessage(\"'generatedFiles' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#createWhenRuntimeHintsIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenRuntimeHintsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, null)).withMessage(\"'runtimeHints' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#getGeneratedClassesReturnsClassNameGenerator()",
    "entityType": "method",
    "code": "@Test\r\nvoid getGeneratedClassesReturnsClassNameGenerator() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedClasses()).isSameAs(this.generatedClasses);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#getGeneratedFilesReturnsGeneratedFiles()",
    "entityType": "method",
    "code": "@Test\r\nvoid getGeneratedFilesReturnsGeneratedFiles() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#getRuntimeHintsReturnsRuntimeHints()",
    "entityType": "method",
    "code": "@Test\r\nvoid getRuntimeHintsReturnsRuntimeHints() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(this.generatedClasses, this.generatedFiles, this.runtimeHints);\r\n    assertThat(context.getRuntimeHints()).isSameAs(this.runtimeHints);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameUpdateNamingConvention()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNameUpdateNamingConvention() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    GeneratedClass generatedClass = anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    assertThat(generatedClass.getName().simpleName()).endsWith(\"__AnotherTest\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameKeepsTrackOfAllGeneratedFiles()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNameKeepsTrackOfAllGeneratedFiles() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    assertThat(anotherContext.getGeneratedClasses()).isNotSameAs(context.getGeneratedClasses());\r\n    assertThat(anotherContext.getGeneratedFiles()).isSameAs(context.getGeneratedFiles());\r\n    assertThat(anotherContext.getRuntimeHints()).isSameAs(context.getRuntimeHints());\r\n    anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(2);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameGeneratesUniqueName()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNameGeneratesUniqueName() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).containsOnlyKeys(\"com/example/SampleTarget__TestFeature.java\", \"com/example/SampleTarget__Test1Feature.java\", \"com/example/SampleTarget__Test2Feature.java\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "entityType": "class",
    "code": "private static final String EXPECTED_STATIC = \"org.springframework.aot.generate.DefaultMethodReferenceTests::someMethod\";\nprivate static final String EXPECTED_ANONYMOUS_INSTANCE = \"<instance>::someMethod\";\nprivate static final String EXPECTED_DECLARED_INSTANCE = \"<org.springframework.aot.generate.DefaultMethodReferenceTests>::someMethod\";\nprivate static final ClassName TEST_CLASS_NAME = ClassName.get(\"com.example\", \"Test\");\nprivate static final ClassName INITIALIZER_CLASS_NAME = ClassName.get(\"com.example\", \"Initializer\");\n@Test\r\nvoid createWithStringCreatesMethodReference() {\r\n    MethodSpec method = createTestMethod(\"someMethod\", new TypeName[0]);\r\n    MethodReference reference = new DefaultMethodReference(method, null);\r\n    assertThat(reference).hasToString(EXPECTED_ANONYMOUS_INSTANCE);\r\n}\n@Test\r\nvoid createWithClassNameAndStringCreateMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createMethodReference(\"someMethod\", new TypeName[0], declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_DECLARED_INSTANCE);\r\n}\n@Test\r\nvoid createWithStaticAndClassAndStringCreatesMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createStaticMethodReference(\"someMethod\", declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_STATIC);\r\n}\n@Test\r\nvoid toCodeBlock() {\r\n    assertThat(createLocalMethodReference(\"methodName\").toCodeBlock()).isEqualTo(CodeBlock.of(\"this::methodName\"));\r\n}\n@Test\r\nvoid toCodeBlockWithStaticMethod() {\r\n    assertThat(createStaticMethodReference(\"methodName\", TEST_CLASS_NAME).toCodeBlock()).isEqualTo(CodeBlock.of(\"com.example.Test::methodName\"));\r\n}\n@Test\r\nvoid toCodeBlockWithStaticMethodRequiresDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0], Modifier.STATIC);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThatIllegalStateException().isThrownBy(methodReference::toCodeBlock).withMessage(\"Static method reference must define a declaring class\");\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithMatchingTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    CodeBlock invocation = methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME);\r\n    // Assume com.example.Test is in a `test` variable.\r\n    assertThat(CodeBlock.of(\"$L.$L\", \"test\", invocation)).isEqualTo(CodeBlock.of(\"test.methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithNonMatchingDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(stringArg)\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithMatchingArgs() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\").and(Integer.class, \"integerArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(integerArg, stringArg)\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithNonMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(Integer.class, \"integerArg\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> methodReference.toInvokeCodeBlock(argCodeGenerator)).withMessageContaining(\"parameter 1 of type java.lang.String is not supported\");\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}\n@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"com.example.Test.methodName()\"));\r\n}\nprivate MethodReference createLocalMethodReference(String name, TypeName... argumentTypes) {\r\n    return createMethodReference(name, argumentTypes, null);\r\n}\nprivate MethodReference createMethodReference(String name, TypeName[] argumentTypes, @Nullable ClassName declaringClass) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}\nprivate MethodReference createStaticMethodReference(String name, ClassName declaringClass, TypeName... argumentTypes) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes, Modifier.STATIC);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}\nprivate MethodSpec createTestMethod(String name, TypeName[] argumentTypes, Modifier... modifiers) {\r\n    Builder method = MethodSpec.methodBuilder(name);\r\n    for (int i = 0; i < argumentTypes.length; i++) {\r\n        method.addParameter(argumentTypes[i], \"args\" + i);\r\n    }\r\n    method.addModifiers(modifiers);\r\n    return method.build();\r\n}",
    "comment": "\n * Tests for {@link DefaultMethodReference}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStringCreatesMethodReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWithStringCreatesMethodReference() {\r\n    MethodSpec method = createTestMethod(\"someMethod\", new TypeName[0]);\r\n    MethodReference reference = new DefaultMethodReference(method, null);\r\n    assertThat(reference).hasToString(EXPECTED_ANONYMOUS_INSTANCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithClassNameAndStringCreateMethodReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWithClassNameAndStringCreateMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createMethodReference(\"someMethod\", new TypeName[0], declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_DECLARED_INSTANCE);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createWithStaticAndClassAndStringCreatesMethodReference()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWithStaticAndClassAndStringCreatesMethodReference() {\r\n    ClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\r\n    MethodReference reference = createStaticMethodReference(\"someMethod\", declaringClass);\r\n    assertThat(reference).hasToString(EXPECTED_STATIC);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlock()",
    "entityType": "method",
    "code": "@Test\r\nvoid toCodeBlock() {\r\n    assertThat(createLocalMethodReference(\"methodName\").toCodeBlock()).isEqualTo(CodeBlock.of(\"this::methodName\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethod()",
    "entityType": "method",
    "code": "@Test\r\nvoid toCodeBlockWithStaticMethod() {\r\n    assertThat(createStaticMethodReference(\"methodName\", TEST_CLASS_NAME).toCodeBlock()).isEqualTo(CodeBlock.of(\"com.example.Test::methodName\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toCodeBlockWithStaticMethodRequiresDeclaringClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toCodeBlockWithStaticMethodRequiresDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0], Modifier.STATIC);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThatIllegalStateException().isThrownBy(methodReference::toCodeBlock).withMessage(\"Static method reference must define a declaring class\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndTargetClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, null);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithDeclaringClassAndNullTargetClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithDeclaringClassAndNullTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none())).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingTargetClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithMatchingTargetClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    CodeBlock invocation = methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME);\r\n    // Assume com.example.Test is in a `test` variable.\r\n    assertThat(CodeBlock.of(\"$L.$L\", \"test\", invocation)).isEqualTo(CodeBlock.of(\"test.methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingDeclaringClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithNonMatchingDeclaringClass() {\r\n    MethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\r\n    MethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArg()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(stringArg)\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArgs()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithMatchingArgs() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\").and(Integer.class, \"integerArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(integerArg, stringArg)\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingArg()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithNonMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(Integer.class, \"integerArg\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> methodReference.toInvokeCodeBlock(argCodeGenerator)).withMessageContaining(\"parameter 1 of type java.lang.String is not supported\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"com.example.Test.methodName()\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createLocalMethodReference(String,TypeName)",
    "entityType": "method",
    "code": "private MethodReference createLocalMethodReference(String name, TypeName... argumentTypes) {\r\n    return createMethodReference(name, argumentTypes, null);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createMethodReference(String,TypeName[],ClassName)",
    "entityType": "method",
    "code": "private MethodReference createMethodReference(String name, TypeName[] argumentTypes, @Nullable ClassName declaringClass) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createStaticMethodReference(String,ClassName,TypeName)",
    "entityType": "method",
    "code": "private MethodReference createStaticMethodReference(String name, ClassName declaringClass, TypeName... argumentTypes) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes, Modifier.STATIC);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.DefaultMethodReferenceTests#createTestMethod(String,TypeName[],Modifier)",
    "entityType": "method",
    "code": "private MethodSpec createTestMethod(String name, TypeName[] argumentTypes, Modifier... modifiers) {\r\n    Builder method = MethodSpec.methodBuilder(name);\r\n    for (int i = 0; i < argumentTypes.length; i++) {\r\n        method.addParameter(argumentTypes[i], \"args\" + i);\r\n    }\r\n    method.addModifiers(modifiers);\r\n    return method.build();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "entityType": "class",
    "code": "@TempDir\r\nPath root;\n@Test\r\nvoid addFilesCopiesToFileSystem() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addSourceFile(\"com.example.Test\", \";\");\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.addClassFile(\"com/example/TestProxy.class\", new ByteArrayResource(\"!\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThat(this.root.resolve(\"sources/com/example/Test.java\")).content().isEqualTo(\";\");\r\n    assertThat(this.root.resolve(\"resources/META-INF/test\")).content().isEqualTo(\"test\");\r\n    assertThat(this.root.resolve(\"classes/com/example/TestProxy.class\")).content().isEqualTo(\"!\");\r\n}\n@Test\r\nvoid addFilesWithCustomRootsCopiesToFileSystem() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(kind -> this.root.resolve(\"the-\" + kind));\r\n    generatedFiles.addSourceFile(\"com.example.Test\", \";\");\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.addClassFile(\"com/example/TestProxy.class\", new ByteArrayResource(\"!\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThat(this.root.resolve(\"the-SOURCE/com/example/Test.java\")).content().isEqualTo(\";\");\r\n    assertThat(this.root.resolve(\"the-RESOURCE/META-INF/test\")).content().isEqualTo(\"test\");\r\n    assertThat(this.root.resolve(\"the-CLASS/com/example/TestProxy.class\")).content().isEqualTo(\"!\");\r\n}\n@Test\r\nvoid createWhenRootIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles((Path) null)).withMessage(\"'root' must not be null\");\r\n}\n@Test\r\nvoid createWhenRootsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles((Function<Kind, Path>) null)).withMessage(\"'roots' must not be null\");\r\n}\n@Test\r\nvoid createWhenRootsResultsInNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles(kind -> (kind != Kind.CLASS) ? this.root.resolve(kind.toString()) : null)).withMessage(\"'roots' must return a value for all file kinds\");\r\n}\n@Test\r\nvoid addFileWhenPathIsOutsideOfRootThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    assertPathMustBeRelative(generatedFiles, \"/test\");\r\n    assertPathMustBeRelative(generatedFiles, \"../test\");\r\n    assertPathMustBeRelative(generatedFiles, \"test/../../test\");\r\n}\n@Test\r\nvoid addFileWhenFileAlreadyAddedThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\")).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}\n@Test\r\nvoid handleFileWhenFileExistsProvidesFileHandler() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        assertThat(handler.exists()).isTrue();\r\n        assertThat(handler.getContent()).isNotNull();\r\n        assertThat(handler.getContent().getInputStream()).hasContent(\"test\");\r\n    });\r\n    assertThat(this.root.resolve(\"resources/META-INF/test\")).content().isEqualTo(\"test\");\r\n}\n@Test\r\nvoid handleFileWhenFileExistsFailsToCreate() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    ThrowingConsumer<FileHandler> consumer = handler -> handler.create(new ByteArrayResource(\"should fail\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", consumer)).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}\n@Test\r\nvoid handleFileWhenFileExistsCanOverrideContent() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", handler -> handler.override(new ByteArrayResource(\"overridden\".getBytes(StandardCharsets.UTF_8))));\r\n    assertThat(this.root.resolve(\"resources/META-INF/mydir\")).content().isEqualTo(\"overridden\");\r\n}\nprivate void assertPathMustBeRelative(FileSystemGeneratedFiles generatedFiles, String path) {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> generatedFiles.addResourceFile(path, \"test\")).withMessage(\"'path' must be relative\");\r\n}",
    "comment": "\n * Tests for {@link FileSystemGeneratedFiles}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFilesCopiesToFileSystem()",
    "entityType": "method",
    "code": "@Test\r\nvoid addFilesCopiesToFileSystem() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addSourceFile(\"com.example.Test\", \";\");\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.addClassFile(\"com/example/TestProxy.class\", new ByteArrayResource(\"!\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThat(this.root.resolve(\"sources/com/example/Test.java\")).content().isEqualTo(\";\");\r\n    assertThat(this.root.resolve(\"resources/META-INF/test\")).content().isEqualTo(\"test\");\r\n    assertThat(this.root.resolve(\"classes/com/example/TestProxy.class\")).content().isEqualTo(\"!\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFilesWithCustomRootsCopiesToFileSystem()",
    "entityType": "method",
    "code": "@Test\r\nvoid addFilesWithCustomRootsCopiesToFileSystem() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(kind -> this.root.resolve(\"the-\" + kind));\r\n    generatedFiles.addSourceFile(\"com.example.Test\", \";\");\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.addClassFile(\"com/example/TestProxy.class\", new ByteArrayResource(\"!\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThat(this.root.resolve(\"the-SOURCE/com/example/Test.java\")).content().isEqualTo(\";\");\r\n    assertThat(this.root.resolve(\"the-RESOURCE/META-INF/test\")).content().isEqualTo(\"test\");\r\n    assertThat(this.root.resolve(\"the-CLASS/com/example/TestProxy.class\")).content().isEqualTo(\"!\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#createWhenRootIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenRootIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles((Path) null)).withMessage(\"'root' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#createWhenRootsIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenRootsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles((Function<Kind, Path>) null)).withMessage(\"'roots' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#createWhenRootsResultsInNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenRootsResultsInNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new FileSystemGeneratedFiles(kind -> (kind != Kind.CLASS) ? this.root.resolve(kind.toString()) : null)).withMessage(\"'roots' must return a value for all file kinds\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenPathIsOutsideOfRootThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addFileWhenPathIsOutsideOfRootThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    assertPathMustBeRelative(generatedFiles, \"/test\");\r\n    assertPathMustBeRelative(generatedFiles, \"../test\");\r\n    assertPathMustBeRelative(generatedFiles, \"test/../../test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenFileAlreadyAddedThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addFileWhenFileAlreadyAddedThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\")).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsProvidesFileHandler()",
    "entityType": "method",
    "code": "@Test\r\nvoid handleFileWhenFileExistsProvidesFileHandler() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        assertThat(handler.exists()).isTrue();\r\n        assertThat(handler.getContent()).isNotNull();\r\n        assertThat(handler.getContent().getInputStream()).hasContent(\"test\");\r\n    });\r\n    assertThat(this.root.resolve(\"resources/META-INF/test\")).content().isEqualTo(\"test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsFailsToCreate()",
    "entityType": "method",
    "code": "@Test\r\nvoid handleFileWhenFileExistsFailsToCreate() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    ThrowingConsumer<FileHandler> consumer = handler -> handler.create(new ByteArrayResource(\"should fail\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", consumer)).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsCanOverrideContent()",
    "entityType": "method",
    "code": "@Test\r\nvoid handleFileWhenFileExistsCanOverrideContent() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", handler -> handler.override(new ByteArrayResource(\"overridden\".getBytes(StandardCharsets.UTF_8))));\r\n    assertThat(this.root.resolve(\"resources/META-INF/mydir\")).content().isEqualTo(\"overridden\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#assertPathMustBeRelative(FileSystemGeneratedFiles,String)",
    "entityType": "method",
    "code": "private void assertPathMustBeRelative(FileSystemGeneratedFiles generatedFiles, String path) {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> generatedFiles.addResourceFile(path, \"test\")).withMessage(\"'path' must be relative\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests",
    "entityType": "class",
    "code": "private static final Consumer<TypeSpec.Builder> emptyTypeCustomizer = type -> {\r\n};\nprivate final GeneratedClasses generatedClasses = new GeneratedClasses(new ClassNameGenerator(ClassName.get(\"com.example\", \"Test\")));\n@Test\r\nvoid createWhenClassNameGeneratorIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new GeneratedClasses(null)).withMessage(\"'classNameGenerator' must not be null\");\r\n}\n@Test\r\nvoid addForFeatureComponentWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"\", TestComponent.class, emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}\n@Test\r\nvoid addForFeatureWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeature(\"\", emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}\n@Test\r\nvoid addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"test\", TestComponent.class, null)).withMessage(\"'type' must not be null\");\r\n}\n@Test\r\nvoid addForFeatureUsesDefaultTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeature(\"Test\", emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName()).hasToString(\"com.example.Test__Test\");\r\n}\n@Test\r\nvoid addForFeatureComponentUsesTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeatureComponent(\"Test\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName().toString()).endsWith(\"TestComponent__Test\");\r\n}\n@Test\r\nvoid addForFeatureComponentWithSameNameReturnsDifferentInstances() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotSameAs(generatedClass2);\r\n    assertThat(generatedClass1.getName().simpleName()).endsWith(\"__One\");\r\n    assertThat(generatedClass2.getName().simpleName()).endsWith(\"__One1\");\r\n}\n@Test\r\nvoid getOrAddForFeatureComponentWhenNewReturnsGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"two\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\r\n    assertThat(generatedClass2).isNotNull();\r\n}\n@Test\r\nvoid getOrAddForFeatureWhenNewReturnsGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeature(\"two\", emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\r\n    assertThat(generatedClass2).isNotNull();\r\n}\n@Test\r\nvoid getOrAddForFeatureComponentWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isSameAs(generatedClass2).isSameAs(generatedClass3);\r\n}\n@Test\r\nvoid getOrAddForFeatureWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isSameAs(generatedClass2).isSameAs(generatedClass3);\r\n}\n@Test\r\nvoid getOrAddForFeatureComponentWhenHasFeatureNamePrefix() {\r\n    GeneratedClasses prefixed = this.generatedClasses.withFeatureNamePrefix(\"prefix\");\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = prefixed.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass4 = prefixed.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isSameAs(generatedClass2).isNotSameAs(generatedClass3);\r\n    assertThat(generatedClass3).isSameAs(generatedClass4);\r\n}\n@Test\r\nvoid writeToInvokeTypeSpecCustomizer() {\r\n    Consumer<TypeSpec.Builder> typeSpecCustomizer = mock();\r\n    this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, typeSpecCustomizer);\r\n    verifyNoInteractions(typeSpecCustomizer);\r\n    InMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\r\n    this.generatedClasses.writeTo(generatedFiles);\r\n    verify(typeSpecCustomizer).accept(any());\r\n    assertThat(generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(1);\r\n}\n@Test\r\nvoid withNameUpdatesNamingConventions() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.withFeatureNamePrefix(\"Another\").addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1.getName().toString()).endsWith(\"TestComponent__One\");\r\n    assertThat(generatedClass2.getName().toString()).endsWith(\"TestComponent__AnotherOne\");\r\n}\nprivate static class TestComponent {\r\n}",
    "comment": "\n * Tests for {@link GeneratedClasses}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#createWhenClassNameGeneratorIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid createWhenClassNameGeneratorIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new GeneratedClasses(null)).withMessage(\"'classNameGenerator' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenFeatureNameIsEmptyThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureComponentWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"\", TestComponent.class, emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureWhenFeatureNameIsEmptyThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeature(\"\", emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"test\", TestComponent.class, null)).withMessage(\"'type' must not be null\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureUsesDefaultTarget()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureUsesDefaultTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeature(\"Test\", emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName()).hasToString(\"com.example.Test__Test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentUsesTarget()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureComponentUsesTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeatureComponent(\"Test\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName().toString()).endsWith(\"TestComponent__Test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWithSameNameReturnsDifferentInstances()",
    "entityType": "method",
    "code": "@Test\r\nvoid addForFeatureComponentWithSameNameReturnsDifferentInstances() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotSameAs(generatedClass2);\r\n    assertThat(generatedClass1.getName().simpleName()).endsWith(\"__One\");\r\n    assertThat(generatedClass2.getName().simpleName()).endsWith(\"__One1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#getOrAddForFeatureComponentWhenNewReturnsGeneratedClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddForFeatureComponentWhenNewReturnsGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"two\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\r\n    assertThat(generatedClass2).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#getOrAddForFeatureWhenNewReturnsGeneratedClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddForFeatureWhenNewReturnsGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeature(\"two\", emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\r\n    assertThat(generatedClass2).isNotNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#getOrAddForFeatureComponentWhenRepeatReturnsSameGeneratedClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddForFeatureComponentWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isSameAs(generatedClass2).isSameAs(generatedClass3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#getOrAddForFeatureWhenRepeatReturnsSameGeneratedClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddForFeatureWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = this.generatedClasses.getOrAddForFeature(\"one\", emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isNotNull().isSameAs(generatedClass2).isSameAs(generatedClass3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#getOrAddForFeatureComponentWhenHasFeatureNamePrefix()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddForFeatureComponentWhenHasFeatureNamePrefix() {\r\n    GeneratedClasses prefixed = this.generatedClasses.withFeatureNamePrefix(\"prefix\");\r\n    GeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass3 = prefixed.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass4 = prefixed.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1).isSameAs(generatedClass2).isNotSameAs(generatedClass3);\r\n    assertThat(generatedClass3).isSameAs(generatedClass4);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#writeToInvokeTypeSpecCustomizer()",
    "entityType": "method",
    "code": "@Test\r\nvoid writeToInvokeTypeSpecCustomizer() {\r\n    Consumer<TypeSpec.Builder> typeSpecCustomizer = mock();\r\n    this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, typeSpecCustomizer);\r\n    verifyNoInteractions(typeSpecCustomizer);\r\n    InMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\r\n    this.generatedClasses.writeTo(generatedFiles);\r\n    verify(typeSpecCustomizer).accept(any());\r\n    assertThat(generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(1);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassesTests#withNameUpdatesNamingConventions()",
    "entityType": "method",
    "code": "@Test\r\nvoid withNameUpdatesNamingConventions() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.withFeatureNamePrefix(\"Another\").addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1.getName().toString()).endsWith(\"TestComponent__One\");\r\n    assertThat(generatedClass2.getName().toString()).endsWith(\"TestComponent__AnotherOne\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.TestComponent",
    "entityType": "class",
    "code": "",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests",
    "entityType": "class",
    "code": "private static final ClassName TEST_CLASS_NAME = ClassName.get(\"com.example\", \"Test\");\nprivate static final Consumer<TypeSpec.Builder> emptyTypeCustomizer = type -> {\r\n};\nprivate static final Consumer<MethodSpec.Builder> emptyMethodCustomizer = method -> {\r\n};\n@Test\r\nvoid getEnclosingNameOnTopLevelClassReturnsNull() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getEnclosingClass()).isNull();\r\n}\n@Test\r\nvoid getEnclosingNameOnInnerClassReturnsParent() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Test\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass.getEnclosingClass()).isEqualTo(generatedClass);\r\n}\n@Test\r\nvoid getNameReturnsName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getName()).isSameAs(TEST_CLASS_NAME);\r\n}\n@Test\r\nvoid reserveMethodNamesWhenNameUsedThrowsException() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedClass.reserveMethodNames(\"apply\"));\r\n}\n@Test\r\nvoid reserveMethodNamesReservesNames() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.reserveMethodNames(\"apply\");\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"apply1\");\r\n}\n@Test\r\nvoid generateMethodNameWhenAllEmptyPartsGeneratesSetName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"123\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"$$aot\");\r\n}\n@Test\r\nvoid getOrAddWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass2 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass3 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass).isSameAs(innerGeneratedClass2).isSameAs(innerGeneratedClass3);\r\n}\n@Test\r\nvoid generateJavaFileIsAnnotatedWithGenerated() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"@Generated\").contains(\"import \" + Generated.class.getName() + \";\");\r\n}\n@Test\r\nvoid generateJavaFileIncludesGeneratedMethods() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getMethods().add(\"test\", method -> method.addJavadoc(\"Test Method\"));\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"Test Method\");\r\n}\n@Test\r\nvoid generateJavaFileIncludesDeclaredClasses() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getOrAdd(\"First\", type -> type.modifiers.add(Modifier.STATIC));\r\n    generatedClass.getOrAdd(\"Second\", type -> type.modifiers.add(Modifier.PRIVATE));\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"static class First\").contains(\"private class Second\");\r\n}\n@Test\r\nvoid generateJavaFileOnInnerClassThrowsException() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME).getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    assertThatIllegalStateException().isThrownBy(generatedClass::generateJavaFile);\r\n}\nprivate static GeneratedClass createGeneratedClass(ClassName className) {\r\n    return new GeneratedClass(className, emptyTypeCustomizer);\r\n}",
    "comment": "\n * Tests for {@link GeneratedClass}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnTopLevelClassReturnsNull()",
    "entityType": "method",
    "code": "@Test\r\nvoid getEnclosingNameOnTopLevelClassReturnsNull() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getEnclosingClass()).isNull();\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnInnerClassReturnsParent()",
    "entityType": "method",
    "code": "@Test\r\nvoid getEnclosingNameOnInnerClassReturnsParent() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Test\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass.getEnclosingClass()).isEqualTo(generatedClass);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#getNameReturnsName()",
    "entityType": "method",
    "code": "@Test\r\nvoid getNameReturnsName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getName()).isSameAs(TEST_CLASS_NAME);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesWhenNameUsedThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid reserveMethodNamesWhenNameUsedThrowsException() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedClass.reserveMethodNames(\"apply\"));\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesReservesNames()",
    "entityType": "method",
    "code": "@Test\r\nvoid reserveMethodNamesReservesNames() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.reserveMethodNames(\"apply\");\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"apply1\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#generateMethodNameWhenAllEmptyPartsGeneratesSetName()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateMethodNameWhenAllEmptyPartsGeneratesSetName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"123\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"$$aot\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#getOrAddWhenRepeatReturnsSameGeneratedClass()",
    "entityType": "method",
    "code": "@Test\r\nvoid getOrAddWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass2 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass3 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass).isSameAs(innerGeneratedClass2).isSameAs(innerGeneratedClass3);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileIsAnnotatedWithGenerated()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateJavaFileIsAnnotatedWithGenerated() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"@Generated\").contains(\"import \" + Generated.class.getName() + \";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileIncludesGeneratedMethods()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateJavaFileIncludesGeneratedMethods() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getMethods().add(\"test\", method -> method.addJavadoc(\"Test Method\"));\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"Test Method\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileIncludesDeclaredClasses()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateJavaFileIncludesDeclaredClasses() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getOrAdd(\"First\", type -> type.modifiers.add(Modifier.STATIC));\r\n    generatedClass.getOrAdd(\"Second\", type -> type.modifiers.add(Modifier.PRIVATE));\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"static class First\").contains(\"private class Second\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileOnInnerClassThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid generateJavaFileOnInnerClassThrowsException() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME).getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    assertThatIllegalStateException().isThrownBy(generatedClass::generateJavaFile);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedClassTests#createGeneratedClass(ClassName)",
    "entityType": "method",
    "code": "private static GeneratedClass createGeneratedClass(ClassName className) {\r\n    return new GeneratedClass(className, emptyTypeCustomizer);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests",
    "entityType": "class",
    "code": "private final TestGeneratedFiles generatedFiles = new TestGeneratedFiles();\n@Test\r\nvoid addSourceFileWithJavaFileAddsFile() throws Exception {\r\n    MethodSpec main = MethodSpec.methodBuilder(\"main\").addModifiers(Modifier.PUBLIC, Modifier.STATIC).returns(void.class).addParameter(String[].class, \"args\").addStatement(\"$T.out.println($S)\", System.class, \"Hello, World!\").build();\r\n    TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\").addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(main).build();\r\n    JavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\r\n    this.generatedFiles.addSourceFile(javaFile);\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").contains(\"Hello, World!\");\r\n}\n@Test\r\nvoid addSourceFileWithJavaFileInTheDefaultPackageThrowsException() {\r\n    TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\").build();\r\n    JavaFile javaFile = JavaFile.builder(\"\", helloWorld).build();\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(javaFile)).withMessage(\"Could not add 'HelloWorld', processing classes in the \" + \"default package is not supported. Did you forget to add a package statement?\");\r\n}\n@Test\r\nvoid addSourceFileWithCharSequenceAddsFile() throws Exception {\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", \";\");\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}\n@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"\", \";\")).withMessage(\"'className' must not be empty\");\r\n}\n@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsInTheDefaultPackageThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"HelloWorld\", \";\")).withMessage(\"Could not add 'HelloWorld', processing classes in the \" + \"default package is not supported. Did you forget to add a package statement?\");\r\n}\n@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsInvalidThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"com/example/HelloWorld.java\", \";\")).withMessage(\"'className' must be a valid identifier, got 'com/example/HelloWorld.java'\");\r\n}\n@Test\r\nvoid addSourceFileWithConsumedAppendableAddsFile() throws Exception {\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", appendable -> appendable.append(\";\"));\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}\n@Test\r\nvoid addSourceFileWithInputStreamSourceAddsFile() throws Exception {\r\n    Resource resource = new ByteArrayResource(\";\".getBytes(StandardCharsets.UTF_8));\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", resource);\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}\n@Test\r\nvoid addResourceFileWithCharSequenceAddsFile() throws Exception {\r\n    this.generatedFiles.addResourceFile(\"META-INF/file\", \"test\");\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}\n@Test\r\nvoid addResourceFileWithConsumedAppendableAddsFile() throws Exception {\r\n    this.generatedFiles.addResourceFile(\"META-INF/file\", appendable -> appendable.append(\"test\"));\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}\n@Test\r\nvoid addResourceFileWithInputStreamSourceAddsFile() throws IOException {\r\n    Resource resource = new ByteArrayResource(\"test\".getBytes(StandardCharsets.UTF_8));\r\n    this.generatedFiles.addResourceFile(\"META-INF/file\", resource);\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}\n@Test\r\nvoid addClassFileWithInputStreamSourceAddsFile() throws IOException {\r\n    Resource resource = new ByteArrayResource(\"test\".getBytes(StandardCharsets.UTF_8));\r\n    this.generatedFiles.addClassFile(\"com/example/HelloWorld.class\", resource);\r\n    assertThatFileAdded(Kind.CLASS, \"com/example/HelloWorld.class\").isEqualTo(\"test\");\r\n}\n@Test\r\nvoid addFileWithCharSequenceAddsFile() throws Exception {\r\n    this.generatedFiles.addFile(Kind.RESOURCE, \"META-INF/file\", \"test\");\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}\n@Test\r\nvoid addFileWithConsumedAppendableAddsFile() throws IOException {\r\n    this.generatedFiles.addFile(Kind.SOURCE, \"com/example/HelloWorld.java\", appendable -> appendable.append(\";\"));\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}\n@Test\r\nvoid handleFileWhenFileDoesNotExist() throws IOException {\r\n    this.generatedFiles.setFileHandler(new TestFileHandler());\r\n    AtomicBoolean called = new AtomicBoolean(false);\r\n    this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        called.set(true);\r\n        handler.create(createSource(\"content\"));\r\n    });\r\n    assertThat(called).isTrue();\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"content\").hasOverride(false);\r\n}\n@Test\r\nvoid handleFileWhenFileExistsCanOverride() throws IOException {\r\n    this.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\r\n    AtomicBoolean called = new AtomicBoolean(false);\r\n    this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        called.set(true);\r\n        handler.override(createSource(\"overridden\"));\r\n    });\r\n    assertThat(called).isTrue();\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"overridden\").hasOverride(true);\r\n}\n@Test\r\nvoid handleFileWhenFileExistsCanOverrideUsingExistingContent() throws IOException {\r\n    this.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\r\n    AtomicBoolean called = new AtomicBoolean(false);\r\n    this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        called.set(true);\r\n        assertThat(handler.getContent()).isNotNull();\r\n        String existing = readSource(handler.getContent());\r\n        handler.override(createSource(existing + \"-override\"));\r\n    });\r\n    assertThat(called).isTrue();\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"existing-override\").hasOverride(true);\r\n}\n@Test\r\nvoid handleFileWhenFileExistsFailedToCreate() {\r\n    TestFileHandler fileHandler = new TestFileHandler(createSource(\"existing\"));\r\n    this.generatedFiles.setFileHandler(fileHandler);\r\n    assertThatIllegalStateException().isThrownBy(() -> this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> handler.create(createSource(\"should fail\")))).withMessage(\"%s already exists\".formatted(fileHandler));\r\n}\nprivate static InputStreamSource createSource(String content) {\r\n    return new ByteArrayResource(content.getBytes(StandardCharsets.UTF_8));\r\n}\nprivate static String readSource(InputStreamSource content) throws IOException {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    content.getInputStream().transferTo(out);\r\n    return out.toString(StandardCharsets.UTF_8);\r\n}\nprivate GeneratedFileAssert assertThatFileAdded(Kind kind, String path) throws IOException {\r\n    return this.generatedFiles.assertThatFileAdded(kind, path);\r\n}\nstatic class TestGeneratedFiles implements GeneratedFiles {\r\n\r\n    @Nullable\r\n    private Kind kind;\r\n\r\n    @Nullable\r\n    private String path;\r\n\r\n    private TestFileHandler fileHandler = new TestFileHandler();\r\n\r\n    void setFileHandler(TestFileHandler fileHandler) {\r\n        this.fileHandler = fileHandler;\r\n    }\r\n\r\n    @Override\r\n    public void handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler) {\r\n        this.kind = kind;\r\n        this.path = path;\r\n        handler.accept(this.fileHandler);\r\n    }\r\n\r\n    GeneratedFileAssert assertThatFileAdded(Kind kind, String path) throws IOException {\r\n        assertThat(this.kind).as(\"kind\").isEqualTo(kind);\r\n        assertThat(this.path).as(\"path\").isEqualTo(path);\r\n        assertThat(this.fileHandler.content).as(\"content\").isNotNull();\r\n        return new GeneratedFileAssert(this.fileHandler.content, this.fileHandler.override);\r\n    }\r\n}\nprivate static class GeneratedFileAssert extends AbstractStringAssert<GeneratedFileAssert> {\r\n\r\n    @Nullable\r\n    private final Boolean override;\r\n\r\n    GeneratedFileAssert(InputStreamSource content, @Nullable Boolean override) throws IOException {\r\n        super(readSource(content), GeneratedFileAssert.class);\r\n        this.override = override;\r\n    }\r\n\r\n    public GeneratedFileAssert hasOverride(boolean expected) {\r\n        assertThat(this.override).isEqualTo(expected);\r\n        return this.myself;\r\n    }\r\n}\nprivate static class TestFileHandler extends FileHandler {\r\n\r\n    @Nullable\r\n    private InputStreamSource content;\r\n\r\n    @Nullable\r\n    private Boolean override;\r\n\r\n    TestFileHandler(@Nullable InputStreamSource content) {\r\n        super(content != null, () -> content);\r\n        this.content = content;\r\n    }\r\n\r\n    TestFileHandler() {\r\n        this(null);\r\n    }\r\n\r\n    @Override\r\n    protected void copy(InputStreamSource content, boolean override) {\r\n        this.content = content;\r\n        this.override = override;\r\n    }\r\n}",
    "comment": "\n * Tests for {@link GeneratedFiles}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n "
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithJavaFileAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithJavaFileAddsFile() throws Exception {\r\n    MethodSpec main = MethodSpec.methodBuilder(\"main\").addModifiers(Modifier.PUBLIC, Modifier.STATIC).returns(void.class).addParameter(String[].class, \"args\").addStatement(\"$T.out.println($S)\", System.class, \"Hello, World!\").build();\r\n    TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\").addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(main).build();\r\n    JavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\r\n    this.generatedFiles.addSourceFile(javaFile);\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").contains(\"Hello, World!\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithJavaFileInTheDefaultPackageThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithJavaFileInTheDefaultPackageThrowsException() {\r\n    TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\").build();\r\n    JavaFile javaFile = JavaFile.builder(\"\", helloWorld).build();\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(javaFile)).withMessage(\"Could not add 'HelloWorld', processing classes in the \" + \"default package is not supported. Did you forget to add a package statement?\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithCharSequenceAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithCharSequenceAddsFile() throws Exception {\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", \";\");\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithCharSequenceWhenClassNameIsEmptyThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"\", \";\")).withMessage(\"'className' must not be empty\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithCharSequenceWhenClassNameIsInTheDefaultPackageThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsInTheDefaultPackageThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"HelloWorld\", \";\")).withMessage(\"Could not add 'HelloWorld', processing classes in the \" + \"default package is not supported. Did you forget to add a package statement?\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithCharSequenceWhenClassNameIsInvalidThrowsException()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithCharSequenceWhenClassNameIsInvalidThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(\"com/example/HelloWorld.java\", \";\")).withMessage(\"'className' must be a valid identifier, got 'com/example/HelloWorld.java'\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithConsumedAppendableAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithConsumedAppendableAddsFile() throws Exception {\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", appendable -> appendable.append(\";\"));\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addSourceFileWithInputStreamSourceAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addSourceFileWithInputStreamSourceAddsFile() throws Exception {\r\n    Resource resource = new ByteArrayResource(\";\".getBytes(StandardCharsets.UTF_8));\r\n    this.generatedFiles.addSourceFile(\"com.example.HelloWorld\", resource);\r\n    assertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\";\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addResourceFileWithCharSequenceAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addResourceFileWithCharSequenceAddsFile() throws Exception {\r\n    this.generatedFiles.addResourceFile(\"META-INF/file\", \"test\");\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.aot.generate.GeneratedFilesTests#addResourceFileWithConsumedAppendableAddsFile()",
    "entityType": "method",
    "code": "@Test\r\nvoid addResourceFileWithConsumedAppendableAddsFile() throws Exception {\r\n    this.generatedFiles.addResourceFile(\"META-INF/file\", appendable -> appendable.append(\"test\"));\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\r\n}",
    "comment": ""
  }
]