[
  {
    "entityId": "org.springframework.util.TaskInfo#getTime(TimeUnit)",
    "entityType": "method",
    "code": "/**\r\n * Get the time this task took in the requested time unit\r\n * (with decimal points in nanosecond precision).\r\n * @param timeUnit the unit to use\r\n * @since 6.1\r\n * @see #getTimeNanos()\r\n * @see #getTimeMillis()\r\n * @see #getTimeSeconds()\r\n */\r\npublic double getTime(TimeUnit timeUnit) {\r\n    return (double) this.timeNanos / TimeUnit.NANOSECONDS.convert(1, timeUnit);\r\n}",
    "comment": "\n\t\t * Get the time this task took in the requested time unit\n\t\t * (with decimal points in nanosecond precision).\n\t\t * @param timeUnit the unit to use\n\t\t * @since 6.1\n\t\t * @see #getTimeNanos()\n\t\t * @see #getTimeMillis()\n\t\t * @see #getTimeSeconds()\n\t\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils",
    "entityType": "class",
    "code": "/**\r\n * The default buffer size used when copying bytes.\r\n */\r\npublic static final int BUFFER_SIZE = 8192;\nprivate static final byte[] EMPTY_CONTENT = new byte[0];\n/**\r\n * Copy the contents of the given InputStream into a new byte array.\r\n * <p>Leaves the stream open when done.\r\n * @param in the stream to copy from (may be {@code null} or empty)\r\n * @return the new byte array that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {\r\n    if (in == null) {\r\n        return EMPTY_CONTENT;\r\n    }\r\n    return in.readAllBytes();\r\n}\n/**\r\n * Copy the contents of the given InputStream into a String.\r\n * <p>Leaves the stream open when done.\r\n * @param in the InputStream to copy from (may be {@code null} or empty)\r\n * @param charset the {@link Charset} to use to decode the bytes\r\n * @return the String that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {\r\n    if (in == null) {\r\n        return \"\";\r\n    }\r\n    StringBuilder out = new StringBuilder();\r\n    InputStreamReader reader = new InputStreamReader(in, charset);\r\n    char[] buffer = new char[BUFFER_SIZE];\r\n    int charsRead;\r\n    while ((charsRead = reader.read(buffer)) != -1) {\r\n        out.append(buffer, 0, charsRead);\r\n    }\r\n    return out.toString();\r\n}\n/**\r\n * Copy the contents of the given {@link ByteArrayOutputStream} into a {@link String}.\r\n * <p>This is a more effective equivalent of {@code new String(baos.toByteArray(), charset)}.\r\n * @param baos the {@code ByteArrayOutputStream} to be copied into a String\r\n * @param charset the {@link Charset} to use to decode the bytes\r\n * @return the String that has been copied to (possibly empty)\r\n * @since 5.2.6\r\n */\r\npublic static String copyToString(ByteArrayOutputStream baos, Charset charset) {\r\n    Assert.notNull(baos, \"No ByteArrayOutputStream specified\");\r\n    Assert.notNull(charset, \"No Charset specified\");\r\n    return baos.toString(charset);\r\n}\n/**\r\n * Copy the contents of the given byte array to the given OutputStream.\r\n * <p>Leaves the stream open when done.\r\n * @param in the byte array to copy from\r\n * @param out the OutputStream to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(byte[] in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No input byte array specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    out.write(in);\r\n    out.flush();\r\n}\n/**\r\n * Copy the contents of the given String to the given OutputStream.\r\n * <p>Leaves the stream open when done.\r\n * @param in the String to copy from\r\n * @param charset the Charset\r\n * @param out the OutputStream to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(String in, Charset charset, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No input String specified\");\r\n    Assert.notNull(charset, \"No Charset specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    out.write(in.getBytes(charset));\r\n    out.flush();\r\n}\n/**\r\n * Copy the contents of the given InputStream to the given OutputStream.\r\n * <p>Leaves both streams open when done.\r\n * @param in the InputStream to copy from\r\n * @param out the OutputStream to copy to\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static int copy(InputStream in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    int count = (int) in.transferTo(out);\r\n    out.flush();\r\n    return count;\r\n}\n/**\r\n * Copy a range of content of the given InputStream to the given OutputStream.\r\n * <p>If the specified range exceeds the length of the InputStream, this copies\r\n * up to the end of the stream and returns the actual number of copied bytes.\r\n * <p>Leaves both streams open when done.\r\n * @param in the InputStream to copy from\r\n * @param out the OutputStream to copy to\r\n * @param start the position to start copying from\r\n * @param end the position to end copying\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n * @since 4.3\r\n */\r\npublic static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    long skipped = in.skip(start);\r\n    if (skipped < start) {\r\n        throw new IOException(\"Skipped only \" + skipped + \" bytes out of \" + start + \" required\");\r\n    }\r\n    long bytesToCopy = end - start + 1;\r\n    byte[] buffer = new byte[(int) Math.min(StreamUtils.BUFFER_SIZE, bytesToCopy)];\r\n    while (bytesToCopy > 0) {\r\n        int bytesRead = (bytesToCopy < buffer.length ? in.read(buffer, 0, (int) bytesToCopy) : in.read(buffer));\r\n        if (bytesRead == -1) {\r\n            break;\r\n        }\r\n        out.write(buffer, 0, bytesRead);\r\n        bytesToCopy -= bytesRead;\r\n    }\r\n    return (end - start + 1 - bytesToCopy);\r\n}\n/**\r\n * Drain the remaining content of the given InputStream.\r\n * <p>Leaves the InputStream open when done.\r\n * @param in the InputStream to drain\r\n * @return the number of bytes read\r\n * @throws IOException in case of I/O errors\r\n * @since 4.3\r\n */\r\n@Contract(\"null -> fail\")\r\npublic static int drain(@Nullable InputStream in) throws IOException {\r\n    if (in == null) {\r\n        return 0;\r\n    }\r\n    return (int) in.transferTo(OutputStream.nullOutputStream());\r\n}\n/**\r\n * Return an efficient empty {@link InputStream}.\r\n * @return an InputStream which contains no bytes\r\n * @since 4.2.2\r\n * @deprecated as of 6.0 in favor of {@link InputStream#nullInputStream()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static InputStream emptyInput() {\r\n    return InputStream.nullInputStream();\r\n}\n/**\r\n * Return a variant of the given {@link InputStream} where calling\r\n * {@link InputStream#close() close()} has no effect.\r\n * @param in the InputStream to decorate\r\n * @return a version of the InputStream that ignores calls to close\r\n */\r\npublic static InputStream nonClosing(InputStream in) {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    return new NonClosingInputStream(in);\r\n}\n/**\r\n * Return a variant of the given {@link OutputStream} where calling\r\n * {@link OutputStream#close() close()} has no effect.\r\n * @param out the OutputStream to decorate\r\n * @return a version of the OutputStream that ignores calls to close\r\n */\r\npublic static OutputStream nonClosing(OutputStream out) {\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    return new NonClosingOutputStream(out);\r\n}\nprivate static class NonClosingInputStream extends FilterInputStream {\r\n\r\n    public NonClosingInputStream(InputStream in) {\r\n        super(in);\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n    }\r\n}\nprivate static class NonClosingOutputStream extends FilterOutputStream {\r\n\r\n    public NonClosingOutputStream(OutputStream out) {\r\n        super(out);\r\n    }\r\n\r\n    @Override\r\n    public void write(byte[] b, int off, int let) throws IOException {\r\n        // It is critical that we override this method for performance\r\n        this.out.write(b, off, let);\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n    }\r\n}",
    "comment": "\n * Simple utility methods for dealing with streams. The copy methods of this class are\n * similar to those defined in {@link FileCopyUtils} except that all affected streams are\n * left open when done. All copy methods use a block size of 8192 bytes.\n *\n * <p>Mainly for use within the framework, but also useful for application code.\n *\n * @author Juergen Hoeller\n * @author Phillip Webb\n * @author Brian Clozel\n * @since 3.2.2\n * @see FileCopyUtils\n "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copyToByteArray(InputStream)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given InputStream into a new byte array.\r\n * <p>Leaves the stream open when done.\r\n * @param in the stream to copy from (may be {@code null} or empty)\r\n * @return the new byte array that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {\r\n    if (in == null) {\r\n        return EMPTY_CONTENT;\r\n    }\r\n    return in.readAllBytes();\r\n}",
    "comment": "\n\t * Copy the contents of the given InputStream into a new byte array.\n\t * <p>Leaves the stream open when done.\n\t * @param in the stream to copy from (may be {@code null} or empty)\n\t * @return the new byte array that has been copied to (possibly empty)\n\t * @throws IOException in case of I/O errors\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copyToString(InputStream,Charset)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given InputStream into a String.\r\n * <p>Leaves the stream open when done.\r\n * @param in the InputStream to copy from (may be {@code null} or empty)\r\n * @param charset the {@link Charset} to use to decode the bytes\r\n * @return the String that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {\r\n    if (in == null) {\r\n        return \"\";\r\n    }\r\n    StringBuilder out = new StringBuilder();\r\n    InputStreamReader reader = new InputStreamReader(in, charset);\r\n    char[] buffer = new char[BUFFER_SIZE];\r\n    int charsRead;\r\n    while ((charsRead = reader.read(buffer)) != -1) {\r\n        out.append(buffer, 0, charsRead);\r\n    }\r\n    return out.toString();\r\n}",
    "comment": "\n\t * Copy the contents of the given InputStream into a String.\n\t * <p>Leaves the stream open when done.\n\t * @param in the InputStream to copy from (may be {@code null} or empty)\n\t * @param charset the {@link Charset} to use to decode the bytes\n\t * @return the String that has been copied to (possibly empty)\n\t * @throws IOException in case of I/O errors\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copyToString(ByteArrayOutputStream,Charset)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given {@link ByteArrayOutputStream} into a {@link String}.\r\n * <p>This is a more effective equivalent of {@code new String(baos.toByteArray(), charset)}.\r\n * @param baos the {@code ByteArrayOutputStream} to be copied into a String\r\n * @param charset the {@link Charset} to use to decode the bytes\r\n * @return the String that has been copied to (possibly empty)\r\n * @since 5.2.6\r\n */\r\npublic static String copyToString(ByteArrayOutputStream baos, Charset charset) {\r\n    Assert.notNull(baos, \"No ByteArrayOutputStream specified\");\r\n    Assert.notNull(charset, \"No Charset specified\");\r\n    return baos.toString(charset);\r\n}",
    "comment": "\n\t * Copy the contents of the given {@link ByteArrayOutputStream} into a {@link String}.\n\t * <p>This is a more effective equivalent of {@code new String(baos.toByteArray(), charset)}.\n\t * @param baos the {@code ByteArrayOutputStream} to be copied into a String\n\t * @param charset the {@link Charset} to use to decode the bytes\n\t * @return the String that has been copied to (possibly empty)\n\t * @since 5.2.6\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copy(byte[],OutputStream)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given byte array to the given OutputStream.\r\n * <p>Leaves the stream open when done.\r\n * @param in the byte array to copy from\r\n * @param out the OutputStream to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(byte[] in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No input byte array specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    out.write(in);\r\n    out.flush();\r\n}",
    "comment": "\n\t * Copy the contents of the given byte array to the given OutputStream.\n\t * <p>Leaves the stream open when done.\n\t * @param in the byte array to copy from\n\t * @param out the OutputStream to copy to\n\t * @throws IOException in case of I/O errors\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copy(String,Charset,OutputStream)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given String to the given OutputStream.\r\n * <p>Leaves the stream open when done.\r\n * @param in the String to copy from\r\n * @param charset the Charset\r\n * @param out the OutputStream to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(String in, Charset charset, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No input String specified\");\r\n    Assert.notNull(charset, \"No Charset specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    out.write(in.getBytes(charset));\r\n    out.flush();\r\n}",
    "comment": "\n\t * Copy the contents of the given String to the given OutputStream.\n\t * <p>Leaves the stream open when done.\n\t * @param in the String to copy from\n\t * @param charset the Charset\n\t * @param out the OutputStream to copy to\n\t * @throws IOException in case of I/O errors\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copy(InputStream,OutputStream)",
    "entityType": "method",
    "code": "/**\r\n * Copy the contents of the given InputStream to the given OutputStream.\r\n * <p>Leaves both streams open when done.\r\n * @param in the InputStream to copy from\r\n * @param out the OutputStream to copy to\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static int copy(InputStream in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    int count = (int) in.transferTo(out);\r\n    out.flush();\r\n    return count;\r\n}",
    "comment": "\n\t * Copy the contents of the given InputStream to the given OutputStream.\n\t * <p>Leaves both streams open when done.\n\t * @param in the InputStream to copy from\n\t * @param out the OutputStream to copy to\n\t * @return the number of bytes copied\n\t * @throws IOException in case of I/O errors\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#copyRange(InputStream,OutputStream,long,long)",
    "entityType": "method",
    "code": "/**\r\n * Copy a range of content of the given InputStream to the given OutputStream.\r\n * <p>If the specified range exceeds the length of the InputStream, this copies\r\n * up to the end of the stream and returns the actual number of copied bytes.\r\n * <p>Leaves both streams open when done.\r\n * @param in the InputStream to copy from\r\n * @param out the OutputStream to copy to\r\n * @param start the position to start copying from\r\n * @param end the position to end copying\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n * @since 4.3\r\n */\r\npublic static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    long skipped = in.skip(start);\r\n    if (skipped < start) {\r\n        throw new IOException(\"Skipped only \" + skipped + \" bytes out of \" + start + \" required\");\r\n    }\r\n    long bytesToCopy = end - start + 1;\r\n    byte[] buffer = new byte[(int) Math.min(StreamUtils.BUFFER_SIZE, bytesToCopy)];\r\n    while (bytesToCopy > 0) {\r\n        int bytesRead = (bytesToCopy < buffer.length ? in.read(buffer, 0, (int) bytesToCopy) : in.read(buffer));\r\n        if (bytesRead == -1) {\r\n            break;\r\n        }\r\n        out.write(buffer, 0, bytesRead);\r\n        bytesToCopy -= bytesRead;\r\n    }\r\n    return (end - start + 1 - bytesToCopy);\r\n}",
    "comment": "\n\t * Copy a range of content of the given InputStream to the given OutputStream.\n\t * <p>If the specified range exceeds the length of the InputStream, this copies\n\t * up to the end of the stream and returns the actual number of copied bytes.\n\t * <p>Leaves both streams open when done.\n\t * @param in the InputStream to copy from\n\t * @param out the OutputStream to copy to\n\t * @param start the position to start copying from\n\t * @param end the position to end copying\n\t * @return the number of bytes copied\n\t * @throws IOException in case of I/O errors\n\t * @since 4.3\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#drain(InputStream)",
    "entityType": "method",
    "code": "/**\r\n * Drain the remaining content of the given InputStream.\r\n * <p>Leaves the InputStream open when done.\r\n * @param in the InputStream to drain\r\n * @return the number of bytes read\r\n * @throws IOException in case of I/O errors\r\n * @since 4.3\r\n */\r\n@Contract(\"null -> fail\")\r\npublic static int drain(@Nullable InputStream in) throws IOException {\r\n    if (in == null) {\r\n        return 0;\r\n    }\r\n    return (int) in.transferTo(OutputStream.nullOutputStream());\r\n}",
    "comment": "\n\t * Drain the remaining content of the given InputStream.\n\t * <p>Leaves the InputStream open when done.\n\t * @param in the InputStream to drain\n\t * @return the number of bytes read\n\t * @throws IOException in case of I/O errors\n\t * @since 4.3\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#emptyInput()",
    "entityType": "method",
    "code": "/**\r\n * Return an efficient empty {@link InputStream}.\r\n * @return an InputStream which contains no bytes\r\n * @since 4.2.2\r\n * @deprecated as of 6.0 in favor of {@link InputStream#nullInputStream()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static InputStream emptyInput() {\r\n    return InputStream.nullInputStream();\r\n}",
    "comment": "\n\t * Return an efficient empty {@link InputStream}.\n\t * @return an InputStream which contains no bytes\n\t * @since 4.2.2\n\t * @deprecated as of 6.0 in favor of {@link InputStream#nullInputStream()}\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#nonClosing(InputStream)",
    "entityType": "method",
    "code": "/**\r\n * Return a variant of the given {@link InputStream} where calling\r\n * {@link InputStream#close() close()} has no effect.\r\n * @param in the InputStream to decorate\r\n * @return a version of the InputStream that ignores calls to close\r\n */\r\npublic static InputStream nonClosing(InputStream in) {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    return new NonClosingInputStream(in);\r\n}",
    "comment": "\n\t * Return a variant of the given {@link InputStream} where calling\n\t * {@link InputStream#close() close()} has no effect.\n\t * @param in the InputStream to decorate\n\t * @return a version of the InputStream that ignores calls to close\n\t "
  },
  {
    "entityId": "org.springframework.util.StreamUtils#nonClosing(OutputStream)",
    "entityType": "method",
    "code": "/**\r\n * Return a variant of the given {@link OutputStream} where calling\r\n * {@link OutputStream#close() close()} has no effect.\r\n * @param out the OutputStream to decorate\r\n * @return a version of the OutputStream that ignores calls to close\r\n */\r\npublic static OutputStream nonClosing(OutputStream out) {\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    return new NonClosingOutputStream(out);\r\n}",
    "comment": "\n\t * Return a variant of the given {@link OutputStream} where calling\n\t * {@link OutputStream#close() close()} has no effect.\n\t * @param out the OutputStream to decorate\n\t * @return a version of the OutputStream that ignores calls to close\n\t "
  },
  {
    "entityId": "org.springframework.util.NonClosingInputStream",
    "entityType": "class",
    "code": "public NonClosingInputStream(InputStream in) {\r\n    super(in);\r\n}\n@Override\r\npublic void close() throws IOException ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NonClosingInputStream#close()",
    "entityType": "method",
    "code": "@Override\r\npublic void close() throws IOException ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NonClosingOutputStream",
    "entityType": "class",
    "code": "public NonClosingOutputStream(OutputStream out) {\r\n    super(out);\r\n}\n@Override\r\npublic void write(byte[] b, int off, int let) throws IOException {\r\n    // It is critical that we override this method for performance\r\n    this.out.write(b, off, let);\r\n}\n@Override\r\npublic void close() throws IOException ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NonClosingOutputStream#write(byte[],int,int)",
    "entityType": "method",
    "code": "@Override\r\npublic void write(byte[] b, int off, int let) throws IOException {\r\n    // It is critical that we override this method for performance\r\n    this.out.write(b, off, let);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.NonClosingOutputStream#close()",
    "entityType": "method",
    "code": "@Override\r\npublic void close() throws IOException ;",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.StringUtils",
    "entityType": "class",
    "code": "private static final String[] EMPTY_STRING_ARRAY = {};\nprivate static final String FOLDER_SEPARATOR = \"/\";\nprivate static final char FOLDER_SEPARATOR_CHAR = '/';\nprivate static final String WINDOWS_FOLDER_SEPARATOR = \"\\\\\";\nprivate static final char WINDOWS_FOLDER_SEPARATOR_CHAR = '\\\\';\nprivate static final String DOUBLE_BACKSLASHES = \"\\\\\\\\\";\nprivate static final String TOP_PATH = \"..\";\nprivate static final String CURRENT_PATH = \".\";\nprivate static final char DOT_CHAR = '.';\nprivate static final int DEFAULT_TRUNCATION_THRESHOLD = 100;\nprivate static final String TRUNCATION_SUFFIX = \" (truncated)...\";\n//---------------------------------------------------------------------\r\n// General convenience methods for working with Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Check whether the given object (possibly a {@code String}) is empty.\r\n * This is effectively a shortcut for {@code !hasLength(String)}.\r\n * <p>This method accepts any Object as an argument, comparing it to\r\n * {@code null} and the empty String. As a consequence, this method\r\n * will never return {@code true} for a non-null non-String object.\r\n * <p>The Object signature is useful for general attribute handling code\r\n * that commonly deals with Strings but generally has to iterate over\r\n * Objects since attributes may, for example, be primitive value objects as well.\r\n * <p><b>Note: If the object is typed to {@code String} upfront, prefer\r\n * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>\r\n * @param str the candidate object (possibly a {@code String})\r\n * @since 3.2.1\r\n * @deprecated as of 5.3, in favor of {@link #hasLength(String)} and\r\n * {@link #hasText(String)} (or {@link ObjectUtils#isEmpty(Object)})\r\n */\r\n@Deprecated\r\npublic static boolean isEmpty(@Nullable Object str) {\r\n    return (str == null || \"\".equals(str));\r\n}\n/**\r\n * Check that the given {@code CharSequence} is neither {@code null} nor\r\n * of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code CharSequence}\r\n * that purely consists of whitespace.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasLength(null) = false\r\n * StringUtils.hasLength(\"\") = false\r\n * StringUtils.hasLength(\" \") = true\r\n * StringUtils.hasLength(\"Hello\") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\r\n * @see #hasLength(String)\r\n * @see #hasText(CharSequence)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable CharSequence str) {\r\n    // as of JDK 15\r\n    return (str != null && !str.isEmpty());\r\n}\n/**\r\n * Check that the given {@code String} is neither {@code null} nor of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code String} that\r\n * purely consists of whitespace.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null} and has length\r\n * @see #hasLength(CharSequence)\r\n * @see #hasText(String)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable String str) {\r\n    return (str != null && !str.isEmpty());\r\n}\n/**\r\n * Check whether the given {@code CharSequence} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code CharSequence} is not {@code null}, its length is greater than\r\n * 0, and it contains at least one non-whitespace character.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasText(null) = false\r\n * StringUtils.hasText(\"\") = false\r\n * StringUtils.hasText(\" \") = false\r\n * StringUtils.hasText(\"12345\") = true\r\n * StringUtils.hasText(\" 12345 \") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null},\r\n * its length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(String)\r\n * @see #hasLength(CharSequence)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable CharSequence str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    if (strLen == 0) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (!Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n/**\r\n * Check whether the given {@code String} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code String} is not {@code null}, its length is greater than 0,\r\n * and it contains at least one non-whitespace character.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null}, its\r\n * length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(CharSequence)\r\n * @see #hasLength(String)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable String str) {\r\n    return (str != null && !str.isBlank());\r\n}\n/**\r\n * Check whether the given {@code CharSequence} contains any whitespace characters.\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see Character#isWhitespace\r\n */\r\npublic static boolean containsWhitespace(@Nullable CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n/**\r\n * Check whether the given {@code String} contains any whitespace characters.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see #containsWhitespace(CharSequence)\r\n */\r\npublic static boolean containsWhitespace(@Nullable String str) {\r\n    return containsWhitespace((CharSequence) str);\r\n}\n/**\r\n * Trim leading and trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#strip()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.strip();\r\n}\n/**\r\n * Trim <em>all</em> whitespace from the given {@code CharSequence}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code CharSequence} to check\r\n * @return the trimmed {@code CharSequence}\r\n * @since 5.3.22\r\n * @see #trimAllWhitespace(String)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static CharSequence trimAllWhitespace(CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int len = str.length();\r\n    StringBuilder sb = new StringBuilder(str.length());\r\n    for (int i = 0; i < len; i++) {\r\n        char c = str.charAt(i);\r\n        if (!Character.isWhitespace(c)) {\r\n            sb.append(c);\r\n        }\r\n    }\r\n    return sb;\r\n}\n/**\r\n * Trim <em>all</em> whitespace from the given {@code String}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see #trimAllWhitespace(CharSequence)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static String trimAllWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return trimAllWhitespace((CharSequence) str).toString();\r\n}\n/**\r\n * Trim leading whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripLeading()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimLeadingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripLeading();\r\n}\n/**\r\n * Trim trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripTrailing()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimTrailingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripTrailing();\r\n}\n/**\r\n * Trim all occurrences of the supplied leading character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param leadingCharacter the leading character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimLeadingCharacter(String str, char leadingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int beginIdx = 0;\r\n    while (beginIdx < str.length() && leadingCharacter == str.charAt(beginIdx)) {\r\n        beginIdx++;\r\n    }\r\n    return str.substring(beginIdx);\r\n}\n/**\r\n * Trim all occurrences of the supplied trailing character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param trailingCharacter the trailing character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimTrailingCharacter(String str, char trailingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int endIdx = str.length() - 1;\r\n    while (endIdx >= 0 && trailingCharacter == str.charAt(endIdx)) {\r\n        endIdx--;\r\n    }\r\n    return str.substring(0, endIdx + 1);\r\n}\n/**\r\n * Test if the given {@code String} matches the given single character.\r\n * @param str the {@code String} to check\r\n * @param singleCharacter the character to compare to\r\n * @since 5.2.9\r\n */\r\npublic static boolean matchesCharacter(@Nullable String str, char singleCharacter) {\r\n    return (str != null && str.length() == 1 && str.charAt(0) == singleCharacter);\r\n}\n/**\r\n * Test if the given {@code String} starts with the specified prefix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param prefix the prefix to look for\r\n * @see java.lang.String#startsWith\r\n */\r\npublic static boolean startsWithIgnoreCase(@Nullable String str, @Nullable String prefix) {\r\n    return (str != null && prefix != null && str.length() >= prefix.length() && str.regionMatches(true, 0, prefix, 0, prefix.length()));\r\n}\n/**\r\n * Test if the given {@code String} ends with the specified suffix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param suffix the suffix to look for\r\n * @see java.lang.String#endsWith\r\n */\r\npublic static boolean endsWithIgnoreCase(@Nullable String str, @Nullable String suffix) {\r\n    return (str != null && suffix != null && str.length() >= suffix.length() && str.regionMatches(true, str.length() - suffix.length(), suffix, 0, suffix.length()));\r\n}\n/**\r\n * Test whether the given string matches the given substring\r\n * at the given index.\r\n * @param str the original string (or StringBuilder)\r\n * @param index the index in the original string to start matching against\r\n * @param substring the substring to match at the given index\r\n */\r\npublic static boolean substringMatch(CharSequence str, int index, CharSequence substring) {\r\n    if (index + substring.length() > str.length()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < substring.length(); i++) {\r\n        if (str.charAt(index + i) != substring.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n/**\r\n * Count the occurrences of the substring {@code sub} in string {@code str}.\r\n * @param str string to search in\r\n * @param sub string to search for\r\n */\r\npublic static int countOccurrencesOf(String str, String sub) {\r\n    if (!hasLength(str) || !hasLength(sub)) {\r\n        return 0;\r\n    }\r\n    int count = 0;\r\n    int pos = 0;\r\n    int idx;\r\n    while ((idx = str.indexOf(sub, pos)) != -1) {\r\n        ++count;\r\n        pos = idx + sub.length();\r\n    }\r\n    return count;\r\n}\n/**\r\n * Replace all occurrences of a substring within a string with another string.\r\n * @param inString {@code String} to examine\r\n * @param oldPattern {@code String} to replace\r\n * @param newPattern {@code String} to insert\r\n * @return a {@code String} with the replacements\r\n */\r\npublic static String replace(String inString, String oldPattern, @Nullable String newPattern) {\r\n    if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\r\n        return inString;\r\n    }\r\n    int index = inString.indexOf(oldPattern);\r\n    if (index == -1) {\r\n        // no occurrence -> can return input as-is\r\n        return inString;\r\n    }\r\n    int capacity = inString.length();\r\n    if (newPattern.length() > oldPattern.length()) {\r\n        capacity += 16;\r\n    }\r\n    StringBuilder sb = new StringBuilder(capacity);\r\n    // our position in the old string\r\n    int pos = 0;\r\n    int patLen = oldPattern.length();\r\n    while (index >= 0) {\r\n        sb.append(inString, pos, index);\r\n        sb.append(newPattern);\r\n        pos = index + patLen;\r\n        index = inString.indexOf(oldPattern, pos);\r\n    }\r\n    // append any characters to the right of a match\r\n    sb.append(inString, pos, inString.length());\r\n    return sb.toString();\r\n}\n/**\r\n * Delete all occurrences of the given substring.\r\n * @param inString the original {@code String}\r\n * @param pattern the pattern to delete all occurrences of\r\n * @return the resulting {@code String}\r\n */\r\npublic static String delete(String inString, String pattern) {\r\n    return replace(inString, pattern, \"\");\r\n}\n/**\r\n * Delete any character in a given {@code String}.\r\n * @param inString the original {@code String}\r\n * @param charsToDelete a set of characters to delete.\r\n * For example, \"az\\n\" will delete 'a's, 'z's and new lines.\r\n * @return the resulting {@code String}\r\n */\r\npublic static String deleteAny(String inString, @Nullable String charsToDelete) {\r\n    if (!hasLength(inString) || !hasLength(charsToDelete)) {\r\n        return inString;\r\n    }\r\n    int lastCharIndex = 0;\r\n    char[] result = new char[inString.length()];\r\n    for (int i = 0; i < inString.length(); i++) {\r\n        char c = inString.charAt(i);\r\n        if (charsToDelete.indexOf(c) == -1) {\r\n            result[lastCharIndex++] = c;\r\n        }\r\n    }\r\n    if (lastCharIndex == inString.length()) {\r\n        return inString;\r\n    }\r\n    return new String(result, 0, lastCharIndex);\r\n}\n//---------------------------------------------------------------------\r\n// Convenience methods for working with formatted Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Quote the given {@code String} with single quotes.\r\n * @param str the input {@code String} (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or {@code null} if the input was {@code null}\r\n */\r\n@Nullable\r\npublic static String quote(@Nullable String str) {\r\n    return (str != null ? \"'\" + str + \"'\" : null);\r\n}\n/**\r\n * Turn the given Object into a {@code String} with single quotes\r\n * if it is a {@code String}; keeping the Object as-is else.\r\n * @param obj the input Object (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or the input object as-is if not a {@code String}\r\n */\r\n@Nullable\r\npublic static Object quoteIfString(@Nullable Object obj) {\r\n    return (obj instanceof String str ? quote(str) : obj);\r\n}\n/**\r\n * Unqualify a string qualified by a '.' dot character. For example,\r\n * \"this.name.is.qualified\", returns \"qualified\".\r\n * @param qualifiedName the qualified name\r\n */\r\npublic static String unqualify(String qualifiedName) {\r\n    return unqualify(qualifiedName, DOT_CHAR);\r\n}\n/**\r\n * Unqualify a string qualified by a separator character. For example,\r\n * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\r\n * @param qualifiedName the qualified name\r\n * @param separator the separator\r\n */\r\npublic static String unqualify(String qualifiedName, char separator) {\r\n    return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);\r\n}\n/**\r\n * Capitalize a {@code String}, changing the first letter to\r\n * upper case as per {@link Character#toUpperCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to capitalize\r\n * @return the capitalized {@code String}\r\n */\r\npublic static String capitalize(String str) {\r\n    return changeFirstCharacterCase(str, true);\r\n}\n/**\r\n * Uncapitalize a {@code String}, changing the first letter to\r\n * lower case as per {@link Character#toLowerCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n */\r\npublic static String uncapitalize(String str) {\r\n    return changeFirstCharacterCase(str, false);\r\n}\n/**\r\n * Uncapitalize a {@code String} in JavaBeans property format,\r\n * changing the first letter to lower case as per\r\n * {@link Character#toLowerCase(char)}, unless the initial two\r\n * letters are upper case in direct succession.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n * @since 6.0\r\n * @see java.beans.Introspector#decapitalize(String)\r\n */\r\npublic static String uncapitalizeAsProperty(String str) {\r\n    if (!hasLength(str) || (str.length() > 1 && Character.isUpperCase(str.charAt(0)) && Character.isUpperCase(str.charAt(1)))) {\r\n        return str;\r\n    }\r\n    return changeFirstCharacterCase(str, false);\r\n}\nprivate static String changeFirstCharacterCase(String str, boolean capitalize) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    char baseChar = str.charAt(0);\r\n    char updatedChar;\r\n    if (capitalize) {\r\n        updatedChar = Character.toUpperCase(baseChar);\r\n    } else {\r\n        updatedChar = Character.toLowerCase(baseChar);\r\n    }\r\n    if (baseChar == updatedChar) {\r\n        return str;\r\n    }\r\n    char[] chars = str.toCharArray();\r\n    chars[0] = updatedChar;\r\n    return new String(chars);\r\n}\n/**\r\n * Extract the filename from the given Java resource path,\r\n * for example, {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}.\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilename(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    return (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\r\n}\n/**\r\n * Extract the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"txt\".\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename extension, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilenameExtension(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return null;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return null;\r\n    }\r\n    return path.substring(extIndex + 1);\r\n}\n/**\r\n * Strip the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"mypath/myfile\".\r\n * @param path the file path\r\n * @return the path with stripped filename extension\r\n */\r\npublic static String stripFilenameExtension(String path) {\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return path;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return path;\r\n    }\r\n    return path.substring(0, extIndex);\r\n}\n/**\r\n * Apply the given relative path to the given Java resource path,\r\n * assuming standard Java folder separation (i.e. \"/\" separators).\r\n * @param path the path to start from (usually a full file path)\r\n * @param relativePath the relative path to apply\r\n * (relative to the full file path above)\r\n * @return the full file path that results from applying the relative path\r\n */\r\npublic static String applyRelativePath(String path, String relativePath) {\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (separatorIndex != -1) {\r\n        String newPath = path.substring(0, separatorIndex);\r\n        if (!relativePath.startsWith(FOLDER_SEPARATOR)) {\r\n            newPath += FOLDER_SEPARATOR_CHAR;\r\n        }\r\n        return newPath + relativePath;\r\n    } else {\r\n        return relativePath;\r\n    }\r\n}\n/**\r\n * Normalize the path by suppressing sequences like \"path/..\" and\r\n * inner simple dots.\r\n * <p>The result is convenient for path comparison. For other uses,\r\n * notice that Windows separators (\"\\\" and \"\\\\\") are replaced by simple slashes.\r\n * <p><strong>NOTE</strong> that {@code cleanPath} should not be depended\r\n * upon in a security context. Other mechanisms should be used to prevent\r\n * path-traversal issues.\r\n * @param path the original path\r\n * @return the normalized path\r\n */\r\npublic static String cleanPath(String path) {\r\n    if (!hasLength(path)) {\r\n        return path;\r\n    }\r\n    String normalizedPath;\r\n    // Optimize when there is no backslash\r\n    if (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {\r\n        normalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);\r\n        normalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\r\n    } else {\r\n        normalizedPath = path;\r\n    }\r\n    String pathToUse = normalizedPath;\r\n    // Shortcut if there is no work to do\r\n    if (pathToUse.indexOf(DOT_CHAR) == -1) {\r\n        return pathToUse;\r\n    }\r\n    // Strip prefix from path to analyze, to not treat it as part of the\r\n    // first path element. This is necessary to correctly parse paths like\r\n    // \"file:core/../core/io/Resource.class\", where the \"..\" should just\r\n    // strip the first \"core\" directory while keeping the \"file:\" prefix.\r\n    int prefixIndex = pathToUse.indexOf(':');\r\n    String prefix = \"\";\r\n    if (prefixIndex != -1) {\r\n        prefix = pathToUse.substring(0, prefixIndex + 1);\r\n        if (prefix.contains(FOLDER_SEPARATOR)) {\r\n            prefix = \"\";\r\n        } else {\r\n            pathToUse = pathToUse.substring(prefixIndex + 1);\r\n        }\r\n    }\r\n    if (pathToUse.startsWith(FOLDER_SEPARATOR)) {\r\n        prefix = prefix + FOLDER_SEPARATOR;\r\n        pathToUse = pathToUse.substring(1);\r\n    }\r\n    String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\r\n    // we never require more elements than pathArray and in the common case the same number\r\n    Deque<String> pathElements = new ArrayDeque<>(pathArray.length);\r\n    int tops = 0;\r\n    for (int i = pathArray.length - 1; i >= 0; i--) {\r\n        String element = pathArray[i];\r\n        if (CURRENT_PATH.equals(element)) {\r\n            // Points to current directory - drop it.\r\n        } else if (TOP_PATH.equals(element)) {\r\n            // Registering top path found.\r\n            tops++;\r\n        } else {\r\n            if (tops > 0) {\r\n                // Merging path element with element corresponding to top path.\r\n                tops--;\r\n            } else {\r\n                // Normal path element found.\r\n                pathElements.addFirst(element);\r\n            }\r\n        }\r\n    }\r\n    // All path elements stayed the same - shortcut\r\n    if (pathArray.length == pathElements.size()) {\r\n        return normalizedPath;\r\n    }\r\n    // Remaining top paths need to be retained.\r\n    for (int i = 0; i < tops; i++) {\r\n        pathElements.addFirst(TOP_PATH);\r\n    }\r\n    // If nothing else left, at least explicitly point to current path.\r\n    if (pathElements.size() == 1 && pathElements.getLast().isEmpty() && !prefix.endsWith(FOLDER_SEPARATOR)) {\r\n        pathElements.addFirst(CURRENT_PATH);\r\n    }\r\n    final String joined = collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\r\n    // avoid string concatenation with empty prefix\r\n    return prefix.isEmpty() ? joined : prefix + joined;\r\n}\n/**\r\n * Compare two paths after normalization of them.\r\n * @param path1 first path for comparison\r\n * @param path2 second path for comparison\r\n * @return whether the two paths are equivalent after normalization\r\n */\r\npublic static boolean pathEquals(String path1, String path2) {\r\n    return cleanPath(path1).equals(cleanPath(path2));\r\n}\n/**\r\n * Decode the given encoded URI component value. Based on the following rules:\r\n * <ul>\r\n * <li>Alphanumeric characters {@code \"a\"} through {@code \"z\"}, {@code \"A\"} through {@code \"Z\"},\r\n * and {@code \"0\"} through {@code \"9\"} stay the same.</li>\r\n * <li>Special characters {@code \"-\"}, {@code \"_\"}, {@code \".\"}, and {@code \"*\"} stay the same.</li>\r\n * <li>A sequence \"{@code %<i>xy</i>}\" is interpreted as a hexadecimal representation of the character.</li>\r\n * <li>For all other characters (including those already decoded), the output is undefined.</li>\r\n * </ul>\r\n * @param source the encoded String\r\n * @param charset the character set\r\n * @return the decoded value\r\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\r\n * @since 5.0\r\n * @see java.net.URLDecoder#decode(String, String)\r\n */\r\npublic static String uriDecode(String source, Charset charset) {\r\n    int length = source.length();\r\n    if (length == 0) {\r\n        return source;\r\n    }\r\n    Assert.notNull(charset, \"Charset must not be null\");\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream(length);\r\n    boolean changed = false;\r\n    for (int i = 0; i < length; i++) {\r\n        int ch = source.charAt(i);\r\n        if (ch == '%') {\r\n            if (i + 2 < length) {\r\n                char hex1 = source.charAt(i + 1);\r\n                char hex2 = source.charAt(i + 2);\r\n                int u = Character.digit(hex1, 16);\r\n                int l = Character.digit(hex2, 16);\r\n                if (u == -1 || l == -1) {\r\n                    throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n                }\r\n                baos.write((char) ((u << 4) + l));\r\n                i += 2;\r\n                changed = true;\r\n            } else {\r\n                throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n            }\r\n        } else {\r\n            baos.write(ch);\r\n        }\r\n    }\r\n    return (changed ? StreamUtils.copyToString(baos, charset) : source);\r\n}\n/**\r\n * Parse the given {@code String} value into a {@link Locale}, accepting\r\n * the {@link Locale#toString} format as well as BCP 47 language tags as\r\n * specified by {@link Locale#forLanguageTag}.\r\n * @param localeValue the locale value: following either {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores), or BCP 47 (for example, \"en-UK\")\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n * @since 5.0.4\r\n * @see #parseLocaleString\r\n * @see Locale#forLanguageTag\r\n */\r\n@Nullable\r\npublic static Locale parseLocale(String localeValue) {\r\n    if (!localeValue.contains(\"_\") && !localeValue.contains(\" \")) {\r\n        validateLocalePart(localeValue);\r\n        Locale resolved = Locale.forLanguageTag(localeValue);\r\n        if (!resolved.getLanguage().isEmpty()) {\r\n            return resolved;\r\n        }\r\n    }\r\n    return parseLocaleString(localeValue);\r\n}\n/**\r\n * Parse the given {@code String} representation into a {@link Locale}.\r\n * <p>For many parsing scenarios, this is an inverse operation of\r\n * {@link Locale#toString Locale's toString}, in a lenient sense.\r\n * This method does not aim for strict {@code Locale} design compliance;\r\n * it is rather specifically tailored for typical Spring parsing needs.\r\n * <p><b>Note: This delegate does not accept the BCP 47 language tag format.\r\n * Please use {@link #parseLocale} for lenient parsing of both formats.</b>\r\n * @param localeString the locale {@code String}: following {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores)\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n */\r\n// for Locale constructors on JDK 19\r\n@SuppressWarnings(\"deprecation\")\r\n@Nullable\r\npublic static Locale parseLocaleString(String localeString) {\r\n    if (localeString.isEmpty()) {\r\n        return null;\r\n    }\r\n    String delimiter = \"_\";\r\n    if (!localeString.contains(\"_\") && localeString.contains(\" \")) {\r\n        delimiter = \" \";\r\n    }\r\n    String[] tokens = localeString.split(delimiter, -1);\r\n    if (tokens.length == 1) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        return new Locale(language);\r\n    } else if (tokens.length == 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        return new Locale(language, country);\r\n    } else if (tokens.length > 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        String variant = Arrays.stream(tokens).skip(2).collect(Collectors.joining(delimiter));\r\n        return new Locale(language, country, variant);\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid locale format: '\" + localeString + \"'\");\r\n}\nprivate static void validateLocalePart(String localePart) {\r\n    for (int i = 0; i < localePart.length(); i++) {\r\n        char ch = localePart.charAt(i);\r\n        if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {\r\n            throw new IllegalArgumentException(\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\r\n        }\r\n    }\r\n}\n/**\r\n * Parse the given {@code timeZoneString} value into a {@link TimeZone}.\r\n * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\r\n * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\r\n * @return a corresponding {@link TimeZone} instance\r\n * @throws IllegalArgumentException in case of an invalid time zone specification\r\n */\r\npublic static TimeZone parseTimeZoneString(String timeZoneString) {\r\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneString);\r\n    if (\"GMT\".equals(timeZone.getID()) && !timeZoneString.startsWith(\"GMT\")) {\r\n        // We don't want that GMT fallback...\r\n        throw new IllegalArgumentException(\"Invalid time zone specification '\" + timeZoneString + \"'\");\r\n    }\r\n    return timeZone;\r\n}\n//---------------------------------------------------------------------\r\n// Convenience methods for working with String arrays\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the given {@link Collection} into a {@code String} array.\r\n * <p>The {@code Collection} must contain {@code String} elements only.\r\n * @param collection the {@code Collection} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Collection<String> collection) {\r\n    return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_STRING_ARRAY) : EMPTY_STRING_ARRAY);\r\n}\n/**\r\n * Copy the given {@link Enumeration} into a {@code String} array.\r\n * <p>The {@code Enumeration} must contain {@code String} elements only.\r\n * @param enumeration the {@code Enumeration} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Enumeration<String> enumeration) {\r\n    return (enumeration != null ? toStringArray(Collections.list(enumeration)) : EMPTY_STRING_ARRAY);\r\n}\n/**\r\n * Append the given {@code String} to the given {@code String} array,\r\n * returning a new array consisting of the input array contents plus\r\n * the given {@code String}.\r\n * @param array the array to append to (can be {@code null})\r\n * @param str the {@code String} to append\r\n * @return the new array (never {@code null})\r\n */\r\npublic static String[] addStringToArray(String @Nullable [] array, String str) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return new String[] { str };\r\n    }\r\n    String[] newArr = new String[array.length + 1];\r\n    System.arraycopy(array, 0, newArr, 0, array.length);\r\n    newArr[array.length] = str;\r\n    return newArr;\r\n}\n/**\r\n * Concatenate the given {@code String} arrays into one,\r\n * with overlapping array elements included twice.\r\n * <p>The order of elements in the original arrays is preserved.\r\n * @param array1 the first array (can be {@code null})\r\n * @param array2 the second array (can be {@code null})\r\n * @return the new array ({@code null} if both given arrays were {@code null})\r\n */\r\npublic static String @Nullable [] concatenateStringArrays(String @Nullable [] array1, String @Nullable [] array2) {\r\n    if (ObjectUtils.isEmpty(array1)) {\r\n        return array2;\r\n    }\r\n    if (ObjectUtils.isEmpty(array2)) {\r\n        return array1;\r\n    }\r\n    String[] newArr = new String[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, newArr, 0, array1.length);\r\n    System.arraycopy(array2, 0, newArr, array1.length, array2.length);\r\n    return newArr;\r\n}\n/**\r\n * Sort the given {@code String} array if necessary.\r\n * @param array the original array (potentially empty)\r\n * @return the array in sorted form (never {@code null})\r\n */\r\npublic static String[] sortStringArray(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Arrays.sort(array);\r\n    return array;\r\n}\n/**\r\n * Trim the elements of the given {@code String} array, calling\r\n * {@code String.trim()} on each non-null element.\r\n * @param array the original {@code String} array (potentially empty)\r\n * @return the resulting array (of the same size) with trimmed elements\r\n */\r\n@Nullable\r\npublic static String[] trimArrayElements(@Nullable String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    @Nullable\r\n    String[] result = new String[array.length];\r\n    for (int i = 0; i < array.length; i++) {\r\n        String element = array[i];\r\n        result[i] = (element != null ? element.trim() : null);\r\n    }\r\n    return result;\r\n}\n/**\r\n * Remove duplicate strings from the given array.\r\n * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.\r\n * @param array the {@code String} array (potentially empty)\r\n * @return an array without duplicates, in natural sort order\r\n */\r\npublic static String[] removeDuplicateStrings(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Set<String> set = new LinkedHashSet<>(Arrays.asList(array));\r\n    return toStringArray(set);\r\n}\n/**\r\n * Split a {@code String} at the first occurrence of the delimiter.\r\n * Does not include the delimiter in the result.\r\n * @param toSplit the string to split (potentially {@code null} or empty)\r\n * @param delimiter to split the string up with (potentially {@code null} or empty)\r\n * @return a two element array with index 0 being before the delimiter, and\r\n * index 1 being after the delimiter (neither element includes the delimiter);\r\n * or {@code null} if the delimiter wasn't found in the given input {@code String}\r\n */\r\npublic static String @Nullable [] split(@Nullable String toSplit, @Nullable String delimiter) {\r\n    if (!hasLength(toSplit) || !hasLength(delimiter)) {\r\n        return null;\r\n    }\r\n    int offset = toSplit.indexOf(delimiter);\r\n    if (offset < 0) {\r\n        return null;\r\n    }\r\n    String beforeDelimiter = toSplit.substring(0, offset);\r\n    String afterDelimiter = toSplit.substring(offset + delimiter.length());\r\n    return new String[] { beforeDelimiter, afterDelimiter };\r\n}\n/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the delimiter\r\n * providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the {@code Properties}.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {\r\n    return splitArrayElementsIntoProperties(array, delimiter, null);\r\n}\n/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the\r\n * delimiter providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the\r\n * {@code Properties} instance.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @param charsToDelete one or more characters to remove from each element\r\n * prior to attempting the split operation (typically the quotation mark\r\n * symbol), or {@code null} if no removal should occur\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter, @Nullable String charsToDelete) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return null;\r\n    }\r\n    Properties result = new Properties();\r\n    for (String element : array) {\r\n        if (charsToDelete != null) {\r\n            element = deleteAny(element, charsToDelete);\r\n        }\r\n        String[] splittedElement = split(element, delimiter);\r\n        if (splittedElement == null) {\r\n            continue;\r\n        }\r\n        result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\r\n    }\r\n    return result;\r\n}\n/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>Trims tokens and omits empty tokens.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters) {\r\n    return tokenizeToStringArray(str, delimiters, true, true);\r\n}\n/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @param trimTokens trim the tokens via {@link String#trim()}\r\n * @param ignoreEmptyTokens omit empty tokens from the result array\r\n * (only applies to tokens that are empty after trimming; StringTokenizer\r\n * will not consider subsequent delimiters as token in the first place).\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    StringTokenizer st = new StringTokenizer(str, delimiters);\r\n    List<String> tokens = new ArrayList<>();\r\n    while (st.hasMoreTokens()) {\r\n        String token = st.nextToken();\r\n        if (trimTokens) {\r\n            token = token.trim();\r\n        }\r\n        if (!ignoreEmptyTokens || !token.isEmpty()) {\r\n            tokens.add(token);\r\n        }\r\n    }\r\n    return toStringArray(tokens);\r\n}\n/**\r\n * Take a {@code String} that is a delimited list and convert it into a\r\n * {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter) {\r\n    return delimitedListToStringArray(str, delimiter, null);\r\n}\n/**\r\n * Take a {@code String} that is a delimited list and convert it into\r\n * a {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @param charsToDelete a set of characters to delete; useful for deleting unwanted\r\n * line breaks: for example, \"\\r\\n\\f\" will delete all new lines and line feeds in a {@code String}\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter, @Nullable String charsToDelete) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    if (delimiter == null) {\r\n        return new String[] { str };\r\n    }\r\n    List<String> result = new ArrayList<>();\r\n    if (delimiter.isEmpty()) {\r\n        for (int i = 0; i < str.length(); i++) {\r\n            result.add(deleteAny(str.substring(i, i + 1), charsToDelete));\r\n        }\r\n    } else {\r\n        int pos = 0;\r\n        int delPos;\r\n        while ((delPos = str.indexOf(delimiter, pos)) != -1) {\r\n            result.add(deleteAny(str.substring(pos, delPos), charsToDelete));\r\n            pos = delPos + delimiter.length();\r\n        }\r\n        if (!str.isEmpty() && pos <= str.length()) {\r\n            // Add rest of String, but not in case of empty input.\r\n            result.add(deleteAny(str.substring(pos), charsToDelete));\r\n        }\r\n    }\r\n    return toStringArray(result);\r\n}\n/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into an\r\n * array of strings.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return an array of strings, or the empty array in case of empty input\r\n */\r\npublic static String[] commaDelimitedListToStringArray(@Nullable String str) {\r\n    return delimitedListToStringArray(str, \",\");\r\n}\n/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into a set.\r\n * <p>Note that this will suppress duplicates, and as of 4.2, the elements in\r\n * the returned set will preserve the original order in a {@link LinkedHashSet}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return a set of {@code String} entries in the list\r\n * @see #removeDuplicateStrings(String[])\r\n */\r\npublic static Set<String> commaDelimitedListToSet(@Nullable String str) {\r\n    String[] tokens = commaDelimitedListToStringArray(str);\r\n    return new LinkedHashSet<>(Arrays.asList(tokens));\r\n}\n/**\r\n * Convert a {@link Collection} to a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @param prefix the {@code String} to start each element with\r\n * @param suffix the {@code String} to end each element with\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim, String prefix, String suffix) {\r\n    if (CollectionUtils.isEmpty(coll)) {\r\n        return \"\";\r\n    }\r\n    int totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\r\n    for (Object element : coll) {\r\n        totalLength += String.valueOf(element).length();\r\n    }\r\n    StringBuilder sb = new StringBuilder(totalLength);\r\n    Iterator<?> it = coll.iterator();\r\n    while (it.hasNext()) {\r\n        sb.append(prefix).append(it.next()).append(suffix);\r\n        if (it.hasNext()) {\r\n            sb.append(delim);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}\n/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim) {\r\n    return collectionToDelimitedString(coll, delim, \"\", \"\");\r\n}\n/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToCommaDelimitedString(@Nullable Collection<?> coll) {\r\n    return collectionToDelimitedString(coll, \",\");\r\n}\n/**\r\n * Convert a {@code String} array into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToDelimitedString(@Nullable Object @Nullable [] arr, String delim) {\r\n    if (ObjectUtils.isEmpty(arr)) {\r\n        return \"\";\r\n    }\r\n    if (arr.length == 1) {\r\n        return ObjectUtils.nullSafeToString(arr[0]);\r\n    }\r\n    StringJoiner sj = new StringJoiner(delim);\r\n    for (Object elem : arr) {\r\n        sj.add(String.valueOf(elem));\r\n    }\r\n    return sj.toString();\r\n}\n/**\r\n * Convert a {@code String} array into a comma delimited {@code String}\r\n * (i.e., CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToCommaDelimitedString(@Nullable Object @Nullable [] arr) {\r\n    return arrayToDelimitedString(arr, \",\");\r\n}\n/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>Delegates to {@link #truncate(CharSequence, int)}, supplying {@code 100}\r\n * as the threshold.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence) {\r\n    return truncate(charSequence, DEFAULT_TRUNCATION_THRESHOLD);\r\n}\n/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>If the length of the {@code CharSequence} is greater than the threshold,\r\n * this method returns a {@linkplain CharSequence#subSequence(int, int)\r\n * subsequence} of the {@code CharSequence} (up to the threshold) appended\r\n * with the suffix {@code \" (truncated)...\"}. Otherwise, this method returns\r\n * {@code charSequence.toString()}.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @param threshold the maximum length after which to truncate; must be a\r\n * positive number\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence, int threshold) {\r\n    Assert.isTrue(threshold > 0, () -> \"Truncation threshold must be a positive number: \" + threshold);\r\n    if (charSequence.length() > threshold) {\r\n        return charSequence.subSequence(0, threshold) + TRUNCATION_SUFFIX;\r\n    }\r\n    return charSequence.toString();\r\n}",
    "comment": "\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"https://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @author Sebastien Deleuze\n * @since 16 April 2001\n "
  },
  {
    "entityId": "org.springframework.util.StringUtils#isEmpty(Object)",
    "entityType": "method",
    "code": "//---------------------------------------------------------------------\r\n// General convenience methods for working with Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Check whether the given object (possibly a {@code String}) is empty.\r\n * This is effectively a shortcut for {@code !hasLength(String)}.\r\n * <p>This method accepts any Object as an argument, comparing it to\r\n * {@code null} and the empty String. As a consequence, this method\r\n * will never return {@code true} for a non-null non-String object.\r\n * <p>The Object signature is useful for general attribute handling code\r\n * that commonly deals with Strings but generally has to iterate over\r\n * Objects since attributes may, for example, be primitive value objects as well.\r\n * <p><b>Note: If the object is typed to {@code String} upfront, prefer\r\n * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>\r\n * @param str the candidate object (possibly a {@code String})\r\n * @since 3.2.1\r\n * @deprecated as of 5.3, in favor of {@link #hasLength(String)} and\r\n * {@link #hasText(String)} (or {@link ObjectUtils#isEmpty(Object)})\r\n */\r\n@Deprecated\r\npublic static boolean isEmpty(@Nullable Object str) {\r\n    return (str == null || \"\".equals(str));\r\n}",
    "comment": "\n\t * Check whether the given object (possibly a {@code String}) is empty.\n\t * This is effectively a shortcut for {@code !hasLength(String)}.\n\t * <p>This method accepts any Object as an argument, comparing it to\n\t * {@code null} and the empty String. As a consequence, this method\n\t * will never return {@code true} for a non-null non-String object.\n\t * <p>The Object signature is useful for general attribute handling code\n\t * that commonly deals with Strings but generally has to iterate over\n\t * Objects since attributes may, for example, be primitive value objects as well.\n\t * <p><b>Note: If the object is typed to {@code String} upfront, prefer\n\t * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>\n\t * @param str the candidate object (possibly a {@code String})\n\t * @since 3.2.1\n\t * @deprecated as of 5.3, in favor of {@link #hasLength(String)} and\n\t * {@link #hasText(String)} (or {@link ObjectUtils#isEmpty(Object)})\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#hasLength(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Check that the given {@code CharSequence} is neither {@code null} nor\r\n * of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code CharSequence}\r\n * that purely consists of whitespace.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasLength(null) = false\r\n * StringUtils.hasLength(\"\") = false\r\n * StringUtils.hasLength(\" \") = true\r\n * StringUtils.hasLength(\"Hello\") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\r\n * @see #hasLength(String)\r\n * @see #hasText(CharSequence)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable CharSequence str) {\r\n    // as of JDK 15\r\n    return (str != null && !str.isEmpty());\r\n}",
    "comment": "\n\t * Check that the given {@code CharSequence} is neither {@code null} nor\n\t * of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code CharSequence}\n\t * that purely consists of whitespace.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasLength(null) = false\n\t * StringUtils.hasLength(\"\") = false\n\t * StringUtils.hasLength(\" \") = true\n\t * StringUtils.hasLength(\"Hello\") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n\t * @see #hasLength(String)\n\t * @see #hasText(CharSequence)\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#hasLength(String)",
    "entityType": "method",
    "code": "/**\r\n * Check that the given {@code String} is neither {@code null} nor of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code String} that\r\n * purely consists of whitespace.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null} and has length\r\n * @see #hasLength(CharSequence)\r\n * @see #hasText(String)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable String str) {\r\n    return (str != null && !str.isEmpty());\r\n}",
    "comment": "\n\t * Check that the given {@code String} is neither {@code null} nor of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code String} that\n\t * purely consists of whitespace.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not {@code null} and has length\n\t * @see #hasLength(CharSequence)\n\t * @see #hasText(String)\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#hasText(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Check whether the given {@code CharSequence} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code CharSequence} is not {@code null}, its length is greater than\r\n * 0, and it contains at least one non-whitespace character.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasText(null) = false\r\n * StringUtils.hasText(\"\") = false\r\n * StringUtils.hasText(\" \") = false\r\n * StringUtils.hasText(\"12345\") = true\r\n * StringUtils.hasText(\" 12345 \") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null},\r\n * its length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(String)\r\n * @see #hasLength(CharSequence)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable CharSequence str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    if (strLen == 0) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (!Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "comment": "\n\t * Check whether the given {@code CharSequence} contains actual <em>text</em>.\n\t * <p>More specifically, this method returns {@code true} if the\n\t * {@code CharSequence} is not {@code null}, its length is greater than\n\t * 0, and it contains at least one non-whitespace character.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasText(null) = false\n\t * StringUtils.hasText(\"\") = false\n\t * StringUtils.hasText(\" \") = false\n\t * StringUtils.hasText(\"12345\") = true\n\t * StringUtils.hasText(\" 12345 \") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null},\n\t * its length is greater than 0, and it does not contain whitespace only\n\t * @see #hasText(String)\n\t * @see #hasLength(CharSequence)\n\t * @see Character#isWhitespace\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#hasText(String)",
    "entityType": "method",
    "code": "/**\r\n * Check whether the given {@code String} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code String} is not {@code null}, its length is greater than 0,\r\n * and it contains at least one non-whitespace character.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null}, its\r\n * length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(CharSequence)\r\n * @see #hasLength(String)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable String str) {\r\n    return (str != null && !str.isBlank());\r\n}",
    "comment": "\n\t * Check whether the given {@code String} contains actual <em>text</em>.\n\t * <p>More specifically, this method returns {@code true} if the\n\t * {@code String} is not {@code null}, its length is greater than 0,\n\t * and it contains at least one non-whitespace character.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not {@code null}, its\n\t * length is greater than 0, and it does not contain whitespace only\n\t * @see #hasText(CharSequence)\n\t * @see #hasLength(String)\n\t * @see Character#isWhitespace\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#containsWhitespace(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Check whether the given {@code CharSequence} contains any whitespace characters.\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see Character#isWhitespace\r\n */\r\npublic static boolean containsWhitespace(@Nullable CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "comment": "\n\t * Check whether the given {@code CharSequence} contains any whitespace characters.\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not empty and\n\t * contains at least 1 whitespace character\n\t * @see Character#isWhitespace\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#containsWhitespace(String)",
    "entityType": "method",
    "code": "/**\r\n * Check whether the given {@code String} contains any whitespace characters.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see #containsWhitespace(CharSequence)\r\n */\r\npublic static boolean containsWhitespace(@Nullable String str) {\r\n    return containsWhitespace((CharSequence) str);\r\n}",
    "comment": "\n\t * Check whether the given {@code String} contains any whitespace characters.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not empty and\n\t * contains at least 1 whitespace character\n\t * @see #containsWhitespace(CharSequence)\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimWhitespace(String)",
    "entityType": "method",
    "code": "/**\r\n * Trim leading and trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#strip()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.strip();\r\n}",
    "comment": "\n\t * Trim leading and trailing whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#strip()}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimAllWhitespace(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Trim <em>all</em> whitespace from the given {@code CharSequence}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code CharSequence} to check\r\n * @return the trimmed {@code CharSequence}\r\n * @since 5.3.22\r\n * @see #trimAllWhitespace(String)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static CharSequence trimAllWhitespace(CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int len = str.length();\r\n    StringBuilder sb = new StringBuilder(str.length());\r\n    for (int i = 0; i < len; i++) {\r\n        char c = str.charAt(i);\r\n        if (!Character.isWhitespace(c)) {\r\n            sb.append(c);\r\n        }\r\n    }\r\n    return sb;\r\n}",
    "comment": "\n\t * Trim <em>all</em> whitespace from the given {@code CharSequence}:\n\t * leading, trailing, and in between characters.\n\t * @param str the {@code CharSequence} to check\n\t * @return the trimmed {@code CharSequence}\n\t * @since 5.3.22\n\t * @see #trimAllWhitespace(String)\n\t * @see java.lang.Character#isWhitespace\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimAllWhitespace(String)",
    "entityType": "method",
    "code": "/**\r\n * Trim <em>all</em> whitespace from the given {@code String}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see #trimAllWhitespace(CharSequence)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static String trimAllWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return trimAllWhitespace((CharSequence) str).toString();\r\n}",
    "comment": "\n\t * Trim <em>all</em> whitespace from the given {@code String}:\n\t * leading, trailing, and in between characters.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see #trimAllWhitespace(CharSequence)\n\t * @see java.lang.Character#isWhitespace\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimLeadingWhitespace(String)",
    "entityType": "method",
    "code": "/**\r\n * Trim leading whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripLeading()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimLeadingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripLeading();\r\n}",
    "comment": "\n\t * Trim leading whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#stripLeading()}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimTrailingWhitespace(String)",
    "entityType": "method",
    "code": "/**\r\n * Trim trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripTrailing()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimTrailingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripTrailing();\r\n}",
    "comment": "\n\t * Trim trailing whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#stripTrailing()}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimLeadingCharacter(String,char)",
    "entityType": "method",
    "code": "/**\r\n * Trim all occurrences of the supplied leading character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param leadingCharacter the leading character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimLeadingCharacter(String str, char leadingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int beginIdx = 0;\r\n    while (beginIdx < str.length() && leadingCharacter == str.charAt(beginIdx)) {\r\n        beginIdx++;\r\n    }\r\n    return str.substring(beginIdx);\r\n}",
    "comment": "\n\t * Trim all occurrences of the supplied leading character from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @param leadingCharacter the leading character to be trimmed\n\t * @return the trimmed {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimTrailingCharacter(String,char)",
    "entityType": "method",
    "code": "/**\r\n * Trim all occurrences of the supplied trailing character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param trailingCharacter the trailing character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimTrailingCharacter(String str, char trailingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int endIdx = str.length() - 1;\r\n    while (endIdx >= 0 && trailingCharacter == str.charAt(endIdx)) {\r\n        endIdx--;\r\n    }\r\n    return str.substring(0, endIdx + 1);\r\n}",
    "comment": "\n\t * Trim all occurrences of the supplied trailing character from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @param trailingCharacter the trailing character to be trimmed\n\t * @return the trimmed {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#matchesCharacter(String,char)",
    "entityType": "method",
    "code": "/**\r\n * Test if the given {@code String} matches the given single character.\r\n * @param str the {@code String} to check\r\n * @param singleCharacter the character to compare to\r\n * @since 5.2.9\r\n */\r\npublic static boolean matchesCharacter(@Nullable String str, char singleCharacter) {\r\n    return (str != null && str.length() == 1 && str.charAt(0) == singleCharacter);\r\n}",
    "comment": "\n\t * Test if the given {@code String} matches the given single character.\n\t * @param str the {@code String} to check\n\t * @param singleCharacter the character to compare to\n\t * @since 5.2.9\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#startsWithIgnoreCase(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Test if the given {@code String} starts with the specified prefix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param prefix the prefix to look for\r\n * @see java.lang.String#startsWith\r\n */\r\npublic static boolean startsWithIgnoreCase(@Nullable String str, @Nullable String prefix) {\r\n    return (str != null && prefix != null && str.length() >= prefix.length() && str.regionMatches(true, 0, prefix, 0, prefix.length()));\r\n}",
    "comment": "\n\t * Test if the given {@code String} starts with the specified prefix,\n\t * ignoring upper/lower case.\n\t * @param str the {@code String} to check\n\t * @param prefix the prefix to look for\n\t * @see java.lang.String#startsWith\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#endsWithIgnoreCase(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Test if the given {@code String} ends with the specified suffix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param suffix the suffix to look for\r\n * @see java.lang.String#endsWith\r\n */\r\npublic static boolean endsWithIgnoreCase(@Nullable String str, @Nullable String suffix) {\r\n    return (str != null && suffix != null && str.length() >= suffix.length() && str.regionMatches(true, str.length() - suffix.length(), suffix, 0, suffix.length()));\r\n}",
    "comment": "\n\t * Test if the given {@code String} ends with the specified suffix,\n\t * ignoring upper/lower case.\n\t * @param str the {@code String} to check\n\t * @param suffix the suffix to look for\n\t * @see java.lang.String#endsWith\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#substringMatch(CharSequence,int,CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Test whether the given string matches the given substring\r\n * at the given index.\r\n * @param str the original string (or StringBuilder)\r\n * @param index the index in the original string to start matching against\r\n * @param substring the substring to match at the given index\r\n */\r\npublic static boolean substringMatch(CharSequence str, int index, CharSequence substring) {\r\n    if (index + substring.length() > str.length()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < substring.length(); i++) {\r\n        if (str.charAt(index + i) != substring.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "comment": "\n\t * Test whether the given string matches the given substring\n\t * at the given index.\n\t * @param str the original string (or StringBuilder)\n\t * @param index the index in the original string to start matching against\n\t * @param substring the substring to match at the given index\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#countOccurrencesOf(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Count the occurrences of the substring {@code sub} in string {@code str}.\r\n * @param str string to search in\r\n * @param sub string to search for\r\n */\r\npublic static int countOccurrencesOf(String str, String sub) {\r\n    if (!hasLength(str) || !hasLength(sub)) {\r\n        return 0;\r\n    }\r\n    int count = 0;\r\n    int pos = 0;\r\n    int idx;\r\n    while ((idx = str.indexOf(sub, pos)) != -1) {\r\n        ++count;\r\n        pos = idx + sub.length();\r\n    }\r\n    return count;\r\n}",
    "comment": "\n\t * Count the occurrences of the substring {@code sub} in string {@code str}.\n\t * @param str string to search in\n\t * @param sub string to search for\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#replace(String,String,String)",
    "entityType": "method",
    "code": "/**\r\n * Replace all occurrences of a substring within a string with another string.\r\n * @param inString {@code String} to examine\r\n * @param oldPattern {@code String} to replace\r\n * @param newPattern {@code String} to insert\r\n * @return a {@code String} with the replacements\r\n */\r\npublic static String replace(String inString, String oldPattern, @Nullable String newPattern) {\r\n    if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\r\n        return inString;\r\n    }\r\n    int index = inString.indexOf(oldPattern);\r\n    if (index == -1) {\r\n        // no occurrence -> can return input as-is\r\n        return inString;\r\n    }\r\n    int capacity = inString.length();\r\n    if (newPattern.length() > oldPattern.length()) {\r\n        capacity += 16;\r\n    }\r\n    StringBuilder sb = new StringBuilder(capacity);\r\n    // our position in the old string\r\n    int pos = 0;\r\n    int patLen = oldPattern.length();\r\n    while (index >= 0) {\r\n        sb.append(inString, pos, index);\r\n        sb.append(newPattern);\r\n        pos = index + patLen;\r\n        index = inString.indexOf(oldPattern, pos);\r\n    }\r\n    // append any characters to the right of a match\r\n    sb.append(inString, pos, inString.length());\r\n    return sb.toString();\r\n}",
    "comment": "\n\t * Replace all occurrences of a substring within a string with another string.\n\t * @param inString {@code String} to examine\n\t * @param oldPattern {@code String} to replace\n\t * @param newPattern {@code String} to insert\n\t * @return a {@code String} with the replacements\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#delete(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Delete all occurrences of the given substring.\r\n * @param inString the original {@code String}\r\n * @param pattern the pattern to delete all occurrences of\r\n * @return the resulting {@code String}\r\n */\r\npublic static String delete(String inString, String pattern) {\r\n    return replace(inString, pattern, \"\");\r\n}",
    "comment": "\n\t * Delete all occurrences of the given substring.\n\t * @param inString the original {@code String}\n\t * @param pattern the pattern to delete all occurrences of\n\t * @return the resulting {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#deleteAny(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Delete any character in a given {@code String}.\r\n * @param inString the original {@code String}\r\n * @param charsToDelete a set of characters to delete.\r\n * For example, \"az\\n\" will delete 'a's, 'z's and new lines.\r\n * @return the resulting {@code String}\r\n */\r\npublic static String deleteAny(String inString, @Nullable String charsToDelete) {\r\n    if (!hasLength(inString) || !hasLength(charsToDelete)) {\r\n        return inString;\r\n    }\r\n    int lastCharIndex = 0;\r\n    char[] result = new char[inString.length()];\r\n    for (int i = 0; i < inString.length(); i++) {\r\n        char c = inString.charAt(i);\r\n        if (charsToDelete.indexOf(c) == -1) {\r\n            result[lastCharIndex++] = c;\r\n        }\r\n    }\r\n    if (lastCharIndex == inString.length()) {\r\n        return inString;\r\n    }\r\n    return new String(result, 0, lastCharIndex);\r\n}",
    "comment": "\n\t * Delete any character in a given {@code String}.\n\t * @param inString the original {@code String}\n\t * @param charsToDelete a set of characters to delete.\n\t * For example, \"az\\n\" will delete 'a's, 'z's and new lines.\n\t * @return the resulting {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#quote(String)",
    "entityType": "method",
    "code": "//---------------------------------------------------------------------\r\n// Convenience methods for working with formatted Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Quote the given {@code String} with single quotes.\r\n * @param str the input {@code String} (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or {@code null} if the input was {@code null}\r\n */\r\n@Nullable\r\npublic static String quote(@Nullable String str) {\r\n    return (str != null ? \"'\" + str + \"'\" : null);\r\n}",
    "comment": "\n\t * Quote the given {@code String} with single quotes.\n\t * @param str the input {@code String} (for example, \"myString\")\n\t * @return the quoted {@code String} (for example, \"'myString'\"),\n\t * or {@code null} if the input was {@code null}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#quoteIfString(Object)",
    "entityType": "method",
    "code": "/**\r\n * Turn the given Object into a {@code String} with single quotes\r\n * if it is a {@code String}; keeping the Object as-is else.\r\n * @param obj the input Object (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or the input object as-is if not a {@code String}\r\n */\r\n@Nullable\r\npublic static Object quoteIfString(@Nullable Object obj) {\r\n    return (obj instanceof String str ? quote(str) : obj);\r\n}",
    "comment": "\n\t * Turn the given Object into a {@code String} with single quotes\n\t * if it is a {@code String}; keeping the Object as-is else.\n\t * @param obj the input Object (for example, \"myString\")\n\t * @return the quoted {@code String} (for example, \"'myString'\"),\n\t * or the input object as-is if not a {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#unqualify(String)",
    "entityType": "method",
    "code": "/**\r\n * Unqualify a string qualified by a '.' dot character. For example,\r\n * \"this.name.is.qualified\", returns \"qualified\".\r\n * @param qualifiedName the qualified name\r\n */\r\npublic static String unqualify(String qualifiedName) {\r\n    return unqualify(qualifiedName, DOT_CHAR);\r\n}",
    "comment": "\n\t * Unqualify a string qualified by a '.' dot character. For example,\n\t * \"this.name.is.qualified\", returns \"qualified\".\n\t * @param qualifiedName the qualified name\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#unqualify(String,char)",
    "entityType": "method",
    "code": "/**\r\n * Unqualify a string qualified by a separator character. For example,\r\n * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\r\n * @param qualifiedName the qualified name\r\n * @param separator the separator\r\n */\r\npublic static String unqualify(String qualifiedName, char separator) {\r\n    return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);\r\n}",
    "comment": "\n\t * Unqualify a string qualified by a separator character. For example,\n\t * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\n\t * @param qualifiedName the qualified name\n\t * @param separator the separator\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#capitalize(String)",
    "entityType": "method",
    "code": "/**\r\n * Capitalize a {@code String}, changing the first letter to\r\n * upper case as per {@link Character#toUpperCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to capitalize\r\n * @return the capitalized {@code String}\r\n */\r\npublic static String capitalize(String str) {\r\n    return changeFirstCharacterCase(str, true);\r\n}",
    "comment": "\n\t * Capitalize a {@code String}, changing the first letter to\n\t * upper case as per {@link Character#toUpperCase(char)}.\n\t * No other letters are changed.\n\t * @param str the {@code String} to capitalize\n\t * @return the capitalized {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#uncapitalize(String)",
    "entityType": "method",
    "code": "/**\r\n * Uncapitalize a {@code String}, changing the first letter to\r\n * lower case as per {@link Character#toLowerCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n */\r\npublic static String uncapitalize(String str) {\r\n    return changeFirstCharacterCase(str, false);\r\n}",
    "comment": "\n\t * Uncapitalize a {@code String}, changing the first letter to\n\t * lower case as per {@link Character#toLowerCase(char)}.\n\t * No other letters are changed.\n\t * @param str the {@code String} to uncapitalize\n\t * @return the uncapitalized {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#uncapitalizeAsProperty(String)",
    "entityType": "method",
    "code": "/**\r\n * Uncapitalize a {@code String} in JavaBeans property format,\r\n * changing the first letter to lower case as per\r\n * {@link Character#toLowerCase(char)}, unless the initial two\r\n * letters are upper case in direct succession.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n * @since 6.0\r\n * @see java.beans.Introspector#decapitalize(String)\r\n */\r\npublic static String uncapitalizeAsProperty(String str) {\r\n    if (!hasLength(str) || (str.length() > 1 && Character.isUpperCase(str.charAt(0)) && Character.isUpperCase(str.charAt(1)))) {\r\n        return str;\r\n    }\r\n    return changeFirstCharacterCase(str, false);\r\n}",
    "comment": "\n\t * Uncapitalize a {@code String} in JavaBeans property format,\n\t * changing the first letter to lower case as per\n\t * {@link Character#toLowerCase(char)}, unless the initial two\n\t * letters are upper case in direct succession.\n\t * @param str the {@code String} to uncapitalize\n\t * @return the uncapitalized {@code String}\n\t * @since 6.0\n\t * @see java.beans.Introspector#decapitalize(String)\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#changeFirstCharacterCase(String,boolean)",
    "entityType": "method",
    "code": "private static String changeFirstCharacterCase(String str, boolean capitalize) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    char baseChar = str.charAt(0);\r\n    char updatedChar;\r\n    if (capitalize) {\r\n        updatedChar = Character.toUpperCase(baseChar);\r\n    } else {\r\n        updatedChar = Character.toLowerCase(baseChar);\r\n    }\r\n    if (baseChar == updatedChar) {\r\n        return str;\r\n    }\r\n    char[] chars = str.toCharArray();\r\n    chars[0] = updatedChar;\r\n    return new String(chars);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.StringUtils#getFilename(String)",
    "entityType": "method",
    "code": "/**\r\n * Extract the filename from the given Java resource path,\r\n * for example, {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}.\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilename(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    return (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\r\n}",
    "comment": "\n\t * Extract the filename from the given Java resource path,\n\t * for example, {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}.\n\t * @param path the file path (may be {@code null})\n\t * @return the extracted filename, or {@code null} if none\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#getFilenameExtension(String)",
    "entityType": "method",
    "code": "/**\r\n * Extract the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"txt\".\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename extension, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilenameExtension(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return null;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return null;\r\n    }\r\n    return path.substring(extIndex + 1);\r\n}",
    "comment": "\n\t * Extract the filename extension from the given Java resource path,\n\t * for example, \"mypath/myfile.txt\" &rarr; \"txt\".\n\t * @param path the file path (may be {@code null})\n\t * @return the extracted filename extension, or {@code null} if none\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#stripFilenameExtension(String)",
    "entityType": "method",
    "code": "/**\r\n * Strip the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"mypath/myfile\".\r\n * @param path the file path\r\n * @return the path with stripped filename extension\r\n */\r\npublic static String stripFilenameExtension(String path) {\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return path;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return path;\r\n    }\r\n    return path.substring(0, extIndex);\r\n}",
    "comment": "\n\t * Strip the filename extension from the given Java resource path,\n\t * for example, \"mypath/myfile.txt\" &rarr; \"mypath/myfile\".\n\t * @param path the file path\n\t * @return the path with stripped filename extension\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#applyRelativePath(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Apply the given relative path to the given Java resource path,\r\n * assuming standard Java folder separation (i.e. \"/\" separators).\r\n * @param path the path to start from (usually a full file path)\r\n * @param relativePath the relative path to apply\r\n * (relative to the full file path above)\r\n * @return the full file path that results from applying the relative path\r\n */\r\npublic static String applyRelativePath(String path, String relativePath) {\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (separatorIndex != -1) {\r\n        String newPath = path.substring(0, separatorIndex);\r\n        if (!relativePath.startsWith(FOLDER_SEPARATOR)) {\r\n            newPath += FOLDER_SEPARATOR_CHAR;\r\n        }\r\n        return newPath + relativePath;\r\n    } else {\r\n        return relativePath;\r\n    }\r\n}",
    "comment": "\n\t * Apply the given relative path to the given Java resource path,\n\t * assuming standard Java folder separation (i.e. \"/\" separators).\n\t * @param path the path to start from (usually a full file path)\n\t * @param relativePath the relative path to apply\n\t * (relative to the full file path above)\n\t * @return the full file path that results from applying the relative path\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#cleanPath(String)",
    "entityType": "method",
    "code": "/**\r\n * Normalize the path by suppressing sequences like \"path/..\" and\r\n * inner simple dots.\r\n * <p>The result is convenient for path comparison. For other uses,\r\n * notice that Windows separators (\"\\\" and \"\\\\\") are replaced by simple slashes.\r\n * <p><strong>NOTE</strong> that {@code cleanPath} should not be depended\r\n * upon in a security context. Other mechanisms should be used to prevent\r\n * path-traversal issues.\r\n * @param path the original path\r\n * @return the normalized path\r\n */\r\npublic static String cleanPath(String path) {\r\n    if (!hasLength(path)) {\r\n        return path;\r\n    }\r\n    String normalizedPath;\r\n    // Optimize when there is no backslash\r\n    if (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {\r\n        normalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);\r\n        normalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\r\n    } else {\r\n        normalizedPath = path;\r\n    }\r\n    String pathToUse = normalizedPath;\r\n    // Shortcut if there is no work to do\r\n    if (pathToUse.indexOf(DOT_CHAR) == -1) {\r\n        return pathToUse;\r\n    }\r\n    // Strip prefix from path to analyze, to not treat it as part of the\r\n    // first path element. This is necessary to correctly parse paths like\r\n    // \"file:core/../core/io/Resource.class\", where the \"..\" should just\r\n    // strip the first \"core\" directory while keeping the \"file:\" prefix.\r\n    int prefixIndex = pathToUse.indexOf(':');\r\n    String prefix = \"\";\r\n    if (prefixIndex != -1) {\r\n        prefix = pathToUse.substring(0, prefixIndex + 1);\r\n        if (prefix.contains(FOLDER_SEPARATOR)) {\r\n            prefix = \"\";\r\n        } else {\r\n            pathToUse = pathToUse.substring(prefixIndex + 1);\r\n        }\r\n    }\r\n    if (pathToUse.startsWith(FOLDER_SEPARATOR)) {\r\n        prefix = prefix + FOLDER_SEPARATOR;\r\n        pathToUse = pathToUse.substring(1);\r\n    }\r\n    String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\r\n    // we never require more elements than pathArray and in the common case the same number\r\n    Deque<String> pathElements = new ArrayDeque<>(pathArray.length);\r\n    int tops = 0;\r\n    for (int i = pathArray.length - 1; i >= 0; i--) {\r\n        String element = pathArray[i];\r\n        if (CURRENT_PATH.equals(element)) {\r\n            // Points to current directory - drop it.\r\n        } else if (TOP_PATH.equals(element)) {\r\n            // Registering top path found.\r\n            tops++;\r\n        } else {\r\n            if (tops > 0) {\r\n                // Merging path element with element corresponding to top path.\r\n                tops--;\r\n            } else {\r\n                // Normal path element found.\r\n                pathElements.addFirst(element);\r\n            }\r\n        }\r\n    }\r\n    // All path elements stayed the same - shortcut\r\n    if (pathArray.length == pathElements.size()) {\r\n        return normalizedPath;\r\n    }\r\n    // Remaining top paths need to be retained.\r\n    for (int i = 0; i < tops; i++) {\r\n        pathElements.addFirst(TOP_PATH);\r\n    }\r\n    // If nothing else left, at least explicitly point to current path.\r\n    if (pathElements.size() == 1 && pathElements.getLast().isEmpty() && !prefix.endsWith(FOLDER_SEPARATOR)) {\r\n        pathElements.addFirst(CURRENT_PATH);\r\n    }\r\n    final String joined = collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\r\n    // avoid string concatenation with empty prefix\r\n    return prefix.isEmpty() ? joined : prefix + joined;\r\n}",
    "comment": "\n\t * Normalize the path by suppressing sequences like \"path/..\" and\n\t * inner simple dots.\n\t * <p>The result is convenient for path comparison. For other uses,\n\t * notice that Windows separators (\"\\\" and \"\\\\\") are replaced by simple slashes.\n\t * <p><strong>NOTE</strong> that {@code cleanPath} should not be depended\n\t * upon in a security context. Other mechanisms should be used to prevent\n\t * path-traversal issues.\n\t * @param path the original path\n\t * @return the normalized path\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#pathEquals(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Compare two paths after normalization of them.\r\n * @param path1 first path for comparison\r\n * @param path2 second path for comparison\r\n * @return whether the two paths are equivalent after normalization\r\n */\r\npublic static boolean pathEquals(String path1, String path2) {\r\n    return cleanPath(path1).equals(cleanPath(path2));\r\n}",
    "comment": "\n\t * Compare two paths after normalization of them.\n\t * @param path1 first path for comparison\n\t * @param path2 second path for comparison\n\t * @return whether the two paths are equivalent after normalization\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#uriDecode(String,Charset)",
    "entityType": "method",
    "code": "/**\r\n * Decode the given encoded URI component value. Based on the following rules:\r\n * <ul>\r\n * <li>Alphanumeric characters {@code \"a\"} through {@code \"z\"}, {@code \"A\"} through {@code \"Z\"},\r\n * and {@code \"0\"} through {@code \"9\"} stay the same.</li>\r\n * <li>Special characters {@code \"-\"}, {@code \"_\"}, {@code \".\"}, and {@code \"*\"} stay the same.</li>\r\n * <li>A sequence \"{@code %<i>xy</i>}\" is interpreted as a hexadecimal representation of the character.</li>\r\n * <li>For all other characters (including those already decoded), the output is undefined.</li>\r\n * </ul>\r\n * @param source the encoded String\r\n * @param charset the character set\r\n * @return the decoded value\r\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\r\n * @since 5.0\r\n * @see java.net.URLDecoder#decode(String, String)\r\n */\r\npublic static String uriDecode(String source, Charset charset) {\r\n    int length = source.length();\r\n    if (length == 0) {\r\n        return source;\r\n    }\r\n    Assert.notNull(charset, \"Charset must not be null\");\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream(length);\r\n    boolean changed = false;\r\n    for (int i = 0; i < length; i++) {\r\n        int ch = source.charAt(i);\r\n        if (ch == '%') {\r\n            if (i + 2 < length) {\r\n                char hex1 = source.charAt(i + 1);\r\n                char hex2 = source.charAt(i + 2);\r\n                int u = Character.digit(hex1, 16);\r\n                int l = Character.digit(hex2, 16);\r\n                if (u == -1 || l == -1) {\r\n                    throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n                }\r\n                baos.write((char) ((u << 4) + l));\r\n                i += 2;\r\n                changed = true;\r\n            } else {\r\n                throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n            }\r\n        } else {\r\n            baos.write(ch);\r\n        }\r\n    }\r\n    return (changed ? StreamUtils.copyToString(baos, charset) : source);\r\n}",
    "comment": "\n\t * Decode the given encoded URI component value. Based on the following rules:\n\t * <ul>\n\t * <li>Alphanumeric characters {@code \"a\"} through {@code \"z\"}, {@code \"A\"} through {@code \"Z\"},\n\t * and {@code \"0\"} through {@code \"9\"} stay the same.</li>\n\t * <li>Special characters {@code \"-\"}, {@code \"_\"}, {@code \".\"}, and {@code \"*\"} stay the same.</li>\n\t * <li>A sequence \"{@code %<i>xy</i>}\" is interpreted as a hexadecimal representation of the character.</li>\n\t * <li>For all other characters (including those already decoded), the output is undefined.</li>\n\t * </ul>\n\t * @param source the encoded String\n\t * @param charset the character set\n\t * @return the decoded value\n\t * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n\t * @since 5.0\n\t * @see java.net.URLDecoder#decode(String, String)\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#parseLocale(String)",
    "entityType": "method",
    "code": "/**\r\n * Parse the given {@code String} value into a {@link Locale}, accepting\r\n * the {@link Locale#toString} format as well as BCP 47 language tags as\r\n * specified by {@link Locale#forLanguageTag}.\r\n * @param localeValue the locale value: following either {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores), or BCP 47 (for example, \"en-UK\")\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n * @since 5.0.4\r\n * @see #parseLocaleString\r\n * @see Locale#forLanguageTag\r\n */\r\n@Nullable\r\npublic static Locale parseLocale(String localeValue) {\r\n    if (!localeValue.contains(\"_\") && !localeValue.contains(\" \")) {\r\n        validateLocalePart(localeValue);\r\n        Locale resolved = Locale.forLanguageTag(localeValue);\r\n        if (!resolved.getLanguage().isEmpty()) {\r\n            return resolved;\r\n        }\r\n    }\r\n    return parseLocaleString(localeValue);\r\n}",
    "comment": "\n\t * Parse the given {@code String} value into a {@link Locale}, accepting\n\t * the {@link Locale#toString} format as well as BCP 47 language tags as\n\t * specified by {@link Locale#forLanguageTag}.\n\t * @param localeValue the locale value: following either {@code Locale's}\n\t * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\n\t * separators (as an alternative to underscores), or BCP 47 (for example, \"en-UK\")\n\t * @return a corresponding {@code Locale} instance, or {@code null} if none\n\t * @throws IllegalArgumentException in case of an invalid locale specification\n\t * @since 5.0.4\n\t * @see #parseLocaleString\n\t * @see Locale#forLanguageTag\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#parseLocaleString(String)",
    "entityType": "method",
    "code": "/**\r\n * Parse the given {@code String} representation into a {@link Locale}.\r\n * <p>For many parsing scenarios, this is an inverse operation of\r\n * {@link Locale#toString Locale's toString}, in a lenient sense.\r\n * This method does not aim for strict {@code Locale} design compliance;\r\n * it is rather specifically tailored for typical Spring parsing needs.\r\n * <p><b>Note: This delegate does not accept the BCP 47 language tag format.\r\n * Please use {@link #parseLocale} for lenient parsing of both formats.</b>\r\n * @param localeString the locale {@code String}: following {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores)\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n */\r\n// for Locale constructors on JDK 19\r\n@SuppressWarnings(\"deprecation\")\r\n@Nullable\r\npublic static Locale parseLocaleString(String localeString) {\r\n    if (localeString.isEmpty()) {\r\n        return null;\r\n    }\r\n    String delimiter = \"_\";\r\n    if (!localeString.contains(\"_\") && localeString.contains(\" \")) {\r\n        delimiter = \" \";\r\n    }\r\n    String[] tokens = localeString.split(delimiter, -1);\r\n    if (tokens.length == 1) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        return new Locale(language);\r\n    } else if (tokens.length == 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        return new Locale(language, country);\r\n    } else if (tokens.length > 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        String variant = Arrays.stream(tokens).skip(2).collect(Collectors.joining(delimiter));\r\n        return new Locale(language, country, variant);\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid locale format: '\" + localeString + \"'\");\r\n}",
    "comment": "\n\t * Parse the given {@code String} representation into a {@link Locale}.\n\t * <p>For many parsing scenarios, this is an inverse operation of\n\t * {@link Locale#toString Locale's toString}, in a lenient sense.\n\t * This method does not aim for strict {@code Locale} design compliance;\n\t * it is rather specifically tailored for typical Spring parsing needs.\n\t * <p><b>Note: This delegate does not accept the BCP 47 language tag format.\n\t * Please use {@link #parseLocale} for lenient parsing of both formats.</b>\n\t * @param localeString the locale {@code String}: following {@code Locale's}\n\t * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\n\t * separators (as an alternative to underscores)\n\t * @return a corresponding {@code Locale} instance, or {@code null} if none\n\t * @throws IllegalArgumentException in case of an invalid locale specification\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#validateLocalePart(String)",
    "entityType": "method",
    "code": "private static void validateLocalePart(String localePart) {\r\n    for (int i = 0; i < localePart.length(); i++) {\r\n        char ch = localePart.charAt(i);\r\n        if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {\r\n            throw new IllegalArgumentException(\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\r\n        }\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.StringUtils#parseTimeZoneString(String)",
    "entityType": "method",
    "code": "/**\r\n * Parse the given {@code timeZoneString} value into a {@link TimeZone}.\r\n * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\r\n * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\r\n * @return a corresponding {@link TimeZone} instance\r\n * @throws IllegalArgumentException in case of an invalid time zone specification\r\n */\r\npublic static TimeZone parseTimeZoneString(String timeZoneString) {\r\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneString);\r\n    if (\"GMT\".equals(timeZone.getID()) && !timeZoneString.startsWith(\"GMT\")) {\r\n        // We don't want that GMT fallback...\r\n        throw new IllegalArgumentException(\"Invalid time zone specification '\" + timeZoneString + \"'\");\r\n    }\r\n    return timeZone;\r\n}",
    "comment": "\n\t * Parse the given {@code timeZoneString} value into a {@link TimeZone}.\n\t * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\n\t * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\n\t * @return a corresponding {@link TimeZone} instance\n\t * @throws IllegalArgumentException in case of an invalid time zone specification\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#toStringArray(Collection<String>)",
    "entityType": "method",
    "code": "//---------------------------------------------------------------------\r\n// Convenience methods for working with String arrays\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the given {@link Collection} into a {@code String} array.\r\n * <p>The {@code Collection} must contain {@code String} elements only.\r\n * @param collection the {@code Collection} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Collection<String> collection) {\r\n    return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_STRING_ARRAY) : EMPTY_STRING_ARRAY);\r\n}",
    "comment": "\n\t * Copy the given {@link Collection} into a {@code String} array.\n\t * <p>The {@code Collection} must contain {@code String} elements only.\n\t * @param collection the {@code Collection} to copy\n\t * (potentially {@code null} or empty)\n\t * @return the resulting {@code String} array\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#toStringArray(Enumeration<String>)",
    "entityType": "method",
    "code": "/**\r\n * Copy the given {@link Enumeration} into a {@code String} array.\r\n * <p>The {@code Enumeration} must contain {@code String} elements only.\r\n * @param enumeration the {@code Enumeration} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Enumeration<String> enumeration) {\r\n    return (enumeration != null ? toStringArray(Collections.list(enumeration)) : EMPTY_STRING_ARRAY);\r\n}",
    "comment": "\n\t * Copy the given {@link Enumeration} into a {@code String} array.\n\t * <p>The {@code Enumeration} must contain {@code String} elements only.\n\t * @param enumeration the {@code Enumeration} to copy\n\t * (potentially {@code null} or empty)\n\t * @return the resulting {@code String} array\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#addStringToArray(String[],String)",
    "entityType": "method",
    "code": "/**\r\n * Append the given {@code String} to the given {@code String} array,\r\n * returning a new array consisting of the input array contents plus\r\n * the given {@code String}.\r\n * @param array the array to append to (can be {@code null})\r\n * @param str the {@code String} to append\r\n * @return the new array (never {@code null})\r\n */\r\npublic static String[] addStringToArray(String @Nullable [] array, String str) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return new String[] { str };\r\n    }\r\n    String[] newArr = new String[array.length + 1];\r\n    System.arraycopy(array, 0, newArr, 0, array.length);\r\n    newArr[array.length] = str;\r\n    return newArr;\r\n}",
    "comment": "\n\t * Append the given {@code String} to the given {@code String} array,\n\t * returning a new array consisting of the input array contents plus\n\t * the given {@code String}.\n\t * @param array the array to append to (can be {@code null})\n\t * @param str the {@code String} to append\n\t * @return the new array (never {@code null})\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#concatenateStringArrays(String[],String[])",
    "entityType": "method",
    "code": "/**\r\n * Concatenate the given {@code String} arrays into one,\r\n * with overlapping array elements included twice.\r\n * <p>The order of elements in the original arrays is preserved.\r\n * @param array1 the first array (can be {@code null})\r\n * @param array2 the second array (can be {@code null})\r\n * @return the new array ({@code null} if both given arrays were {@code null})\r\n */\r\npublic static String @Nullable [] concatenateStringArrays(String @Nullable [] array1, String @Nullable [] array2) {\r\n    if (ObjectUtils.isEmpty(array1)) {\r\n        return array2;\r\n    }\r\n    if (ObjectUtils.isEmpty(array2)) {\r\n        return array1;\r\n    }\r\n    String[] newArr = new String[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, newArr, 0, array1.length);\r\n    System.arraycopy(array2, 0, newArr, array1.length, array2.length);\r\n    return newArr;\r\n}",
    "comment": "\n\t * Concatenate the given {@code String} arrays into one,\n\t * with overlapping array elements included twice.\n\t * <p>The order of elements in the original arrays is preserved.\n\t * @param array1 the first array (can be {@code null})\n\t * @param array2 the second array (can be {@code null})\n\t * @return the new array ({@code null} if both given arrays were {@code null})\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#sortStringArray(String[])",
    "entityType": "method",
    "code": "/**\r\n * Sort the given {@code String} array if necessary.\r\n * @param array the original array (potentially empty)\r\n * @return the array in sorted form (never {@code null})\r\n */\r\npublic static String[] sortStringArray(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Arrays.sort(array);\r\n    return array;\r\n}",
    "comment": "\n\t * Sort the given {@code String} array if necessary.\n\t * @param array the original array (potentially empty)\n\t * @return the array in sorted form (never {@code null})\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#trimArrayElements(String[])",
    "entityType": "method",
    "code": "/**\r\n * Trim the elements of the given {@code String} array, calling\r\n * {@code String.trim()} on each non-null element.\r\n * @param array the original {@code String} array (potentially empty)\r\n * @return the resulting array (of the same size) with trimmed elements\r\n */\r\n@Nullable\r\npublic static String[] trimArrayElements(@Nullable String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    @Nullable\r\n    String[] result = new String[array.length];\r\n    for (int i = 0; i < array.length; i++) {\r\n        String element = array[i];\r\n        result[i] = (element != null ? element.trim() : null);\r\n    }\r\n    return result;\r\n}",
    "comment": "\n\t * Trim the elements of the given {@code String} array, calling\n\t * {@code String.trim()} on each non-null element.\n\t * @param array the original {@code String} array (potentially empty)\n\t * @return the resulting array (of the same size) with trimmed elements\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#removeDuplicateStrings(String[])",
    "entityType": "method",
    "code": "/**\r\n * Remove duplicate strings from the given array.\r\n * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.\r\n * @param array the {@code String} array (potentially empty)\r\n * @return an array without duplicates, in natural sort order\r\n */\r\npublic static String[] removeDuplicateStrings(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Set<String> set = new LinkedHashSet<>(Arrays.asList(array));\r\n    return toStringArray(set);\r\n}",
    "comment": "\n\t * Remove duplicate strings from the given array.\n\t * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.\n\t * @param array the {@code String} array (potentially empty)\n\t * @return an array without duplicates, in natural sort order\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#split(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Split a {@code String} at the first occurrence of the delimiter.\r\n * Does not include the delimiter in the result.\r\n * @param toSplit the string to split (potentially {@code null} or empty)\r\n * @param delimiter to split the string up with (potentially {@code null} or empty)\r\n * @return a two element array with index 0 being before the delimiter, and\r\n * index 1 being after the delimiter (neither element includes the delimiter);\r\n * or {@code null} if the delimiter wasn't found in the given input {@code String}\r\n */\r\npublic static String @Nullable [] split(@Nullable String toSplit, @Nullable String delimiter) {\r\n    if (!hasLength(toSplit) || !hasLength(delimiter)) {\r\n        return null;\r\n    }\r\n    int offset = toSplit.indexOf(delimiter);\r\n    if (offset < 0) {\r\n        return null;\r\n    }\r\n    String beforeDelimiter = toSplit.substring(0, offset);\r\n    String afterDelimiter = toSplit.substring(offset + delimiter.length());\r\n    return new String[] { beforeDelimiter, afterDelimiter };\r\n}",
    "comment": "\n\t * Split a {@code String} at the first occurrence of the delimiter.\n\t * Does not include the delimiter in the result.\n\t * @param toSplit the string to split (potentially {@code null} or empty)\n\t * @param delimiter to split the string up with (potentially {@code null} or empty)\n\t * @return a two element array with index 0 being before the delimiter, and\n\t * index 1 being after the delimiter (neither element includes the delimiter);\n\t * or {@code null} if the delimiter wasn't found in the given input {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String)",
    "entityType": "method",
    "code": "/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the delimiter\r\n * providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the {@code Properties}.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {\r\n    return splitArrayElementsIntoProperties(array, delimiter, null);\r\n}",
    "comment": "\n\t * Take an array of strings and split each element based on the given delimiter.\n\t * A {@code Properties} instance is then generated, with the left of the delimiter\n\t * providing the key, and the right of the delimiter providing the value.\n\t * <p>Will trim both the key and value before adding them to the {@code Properties}.\n\t * @param array the array to process\n\t * @param delimiter to split each element using (typically the equals symbol)\n\t * @return a {@code Properties} instance representing the array contents,\n\t * or {@code null} if the array to process was {@code null} or empty\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String,String)",
    "entityType": "method",
    "code": "/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the\r\n * delimiter providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the\r\n * {@code Properties} instance.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @param charsToDelete one or more characters to remove from each element\r\n * prior to attempting the split operation (typically the quotation mark\r\n * symbol), or {@code null} if no removal should occur\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter, @Nullable String charsToDelete) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return null;\r\n    }\r\n    Properties result = new Properties();\r\n    for (String element : array) {\r\n        if (charsToDelete != null) {\r\n            element = deleteAny(element, charsToDelete);\r\n        }\r\n        String[] splittedElement = split(element, delimiter);\r\n        if (splittedElement == null) {\r\n            continue;\r\n        }\r\n        result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\r\n    }\r\n    return result;\r\n}",
    "comment": "\n\t * Take an array of strings and split each element based on the given delimiter.\n\t * A {@code Properties} instance is then generated, with the left of the\n\t * delimiter providing the key, and the right of the delimiter providing the value.\n\t * <p>Will trim both the key and value before adding them to the\n\t * {@code Properties} instance.\n\t * @param array the array to process\n\t * @param delimiter to split each element using (typically the equals symbol)\n\t * @param charsToDelete one or more characters to remove from each element\n\t * prior to attempting the split operation (typically the quotation mark\n\t * symbol), or {@code null} if no removal should occur\n\t * @return a {@code Properties} instance representing the array contents,\n\t * or {@code null} if the array to process was {@code null} or empty\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>Trims tokens and omits empty tokens.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters) {\r\n    return tokenizeToStringArray(str, delimiters, true, true);\r\n}",
    "comment": "\n\t * Tokenize the given {@code String} into a {@code String} array via a\n\t * {@link StringTokenizer}.\n\t * <p>Trims tokens and omits empty tokens.\n\t * <p>The given {@code delimiters} string can consist of any number of\n\t * delimiter characters. Each of those characters can be used to separate\n\t * tokens. A delimiter is always a single character; for multi-character\n\t * delimiters, consider using {@link #delimitedListToStringArray}.\n\t * @param str the {@code String} to tokenize (potentially {@code null} or empty)\n\t * @param delimiters the delimiter characters, assembled as a {@code String}\n\t * (each of the characters is individually considered as a delimiter)\n\t * @return an array of the tokens\n\t * @see java.util.StringTokenizer\n\t * @see String#trim()\n\t * @see #delimitedListToStringArray\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String,boolean,boolean)",
    "entityType": "method",
    "code": "/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @param trimTokens trim the tokens via {@link String#trim()}\r\n * @param ignoreEmptyTokens omit empty tokens from the result array\r\n * (only applies to tokens that are empty after trimming; StringTokenizer\r\n * will not consider subsequent delimiters as token in the first place).\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    StringTokenizer st = new StringTokenizer(str, delimiters);\r\n    List<String> tokens = new ArrayList<>();\r\n    while (st.hasMoreTokens()) {\r\n        String token = st.nextToken();\r\n        if (trimTokens) {\r\n            token = token.trim();\r\n        }\r\n        if (!ignoreEmptyTokens || !token.isEmpty()) {\r\n            tokens.add(token);\r\n        }\r\n    }\r\n    return toStringArray(tokens);\r\n}",
    "comment": "\n\t * Tokenize the given {@code String} into a {@code String} array via a\n\t * {@link StringTokenizer}.\n\t * <p>The given {@code delimiters} string can consist of any number of\n\t * delimiter characters. Each of those characters can be used to separate\n\t * tokens. A delimiter is always a single character; for multi-character\n\t * delimiters, consider using {@link #delimitedListToStringArray}.\n\t * @param str the {@code String} to tokenize (potentially {@code null} or empty)\n\t * @param delimiters the delimiter characters, assembled as a {@code String}\n\t * (each of the characters is individually considered as a delimiter)\n\t * @param trimTokens trim the tokens via {@link String#trim()}\n\t * @param ignoreEmptyTokens omit empty tokens from the result array\n\t * (only applies to tokens that are empty after trimming; StringTokenizer\n\t * will not consider subsequent delimiters as token in the first place).\n\t * @return an array of the tokens\n\t * @see java.util.StringTokenizer\n\t * @see String#trim()\n\t * @see #delimitedListToStringArray\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String)",
    "entityType": "method",
    "code": "/**\r\n * Take a {@code String} that is a delimited list and convert it into a\r\n * {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter) {\r\n    return delimitedListToStringArray(str, delimiter, null);\r\n}",
    "comment": "\n\t * Take a {@code String} that is a delimited list and convert it into a\n\t * {@code String} array.\n\t * <p>A single {@code delimiter} may consist of more than one character,\n\t * but it will still be considered as a single delimiter string, rather\n\t * than as a bunch of potential delimiter characters, in contrast to\n\t * {@link #tokenizeToStringArray}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @param delimiter the delimiter between elements (this is a single delimiter,\n\t * rather than a bunch individual delimiter characters)\n\t * @return an array of the tokens in the list\n\t * @see #tokenizeToStringArray\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String,String)",
    "entityType": "method",
    "code": "/**\r\n * Take a {@code String} that is a delimited list and convert it into\r\n * a {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @param charsToDelete a set of characters to delete; useful for deleting unwanted\r\n * line breaks: for example, \"\\r\\n\\f\" will delete all new lines and line feeds in a {@code String}\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter, @Nullable String charsToDelete) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    if (delimiter == null) {\r\n        return new String[] { str };\r\n    }\r\n    List<String> result = new ArrayList<>();\r\n    if (delimiter.isEmpty()) {\r\n        for (int i = 0; i < str.length(); i++) {\r\n            result.add(deleteAny(str.substring(i, i + 1), charsToDelete));\r\n        }\r\n    } else {\r\n        int pos = 0;\r\n        int delPos;\r\n        while ((delPos = str.indexOf(delimiter, pos)) != -1) {\r\n            result.add(deleteAny(str.substring(pos, delPos), charsToDelete));\r\n            pos = delPos + delimiter.length();\r\n        }\r\n        if (!str.isEmpty() && pos <= str.length()) {\r\n            // Add rest of String, but not in case of empty input.\r\n            result.add(deleteAny(str.substring(pos), charsToDelete));\r\n        }\r\n    }\r\n    return toStringArray(result);\r\n}",
    "comment": "\n\t * Take a {@code String} that is a delimited list and convert it into\n\t * a {@code String} array.\n\t * <p>A single {@code delimiter} may consist of more than one character,\n\t * but it will still be considered as a single delimiter string, rather\n\t * than as a bunch of potential delimiter characters, in contrast to\n\t * {@link #tokenizeToStringArray}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @param delimiter the delimiter between elements (this is a single delimiter,\n\t * rather than a bunch individual delimiter characters)\n\t * @param charsToDelete a set of characters to delete; useful for deleting unwanted\n\t * line breaks: for example, \"\\r\\n\\f\" will delete all new lines and line feeds in a {@code String}\n\t * @return an array of the tokens in the list\n\t * @see #tokenizeToStringArray\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#commaDelimitedListToStringArray(String)",
    "entityType": "method",
    "code": "/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into an\r\n * array of strings.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return an array of strings, or the empty array in case of empty input\r\n */\r\npublic static String[] commaDelimitedListToStringArray(@Nullable String str) {\r\n    return delimitedListToStringArray(str, \",\");\r\n}",
    "comment": "\n\t * Convert a comma delimited list (for example, a row from a CSV file) into an\n\t * array of strings.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @return an array of strings, or the empty array in case of empty input\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#commaDelimitedListToSet(String)",
    "entityType": "method",
    "code": "/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into a set.\r\n * <p>Note that this will suppress duplicates, and as of 4.2, the elements in\r\n * the returned set will preserve the original order in a {@link LinkedHashSet}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return a set of {@code String} entries in the list\r\n * @see #removeDuplicateStrings(String[])\r\n */\r\npublic static Set<String> commaDelimitedListToSet(@Nullable String str) {\r\n    String[] tokens = commaDelimitedListToStringArray(str);\r\n    return new LinkedHashSet<>(Arrays.asList(tokens));\r\n}",
    "comment": "\n\t * Convert a comma delimited list (for example, a row from a CSV file) into a set.\n\t * <p>Note that this will suppress duplicates, and as of 4.2, the elements in\n\t * the returned set will preserve the original order in a {@link LinkedHashSet}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @return a set of {@code String} entries in the list\n\t * @see #removeDuplicateStrings(String[])\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String,String,String)",
    "entityType": "method",
    "code": "/**\r\n * Convert a {@link Collection} to a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @param prefix the {@code String} to start each element with\r\n * @param suffix the {@code String} to end each element with\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim, String prefix, String suffix) {\r\n    if (CollectionUtils.isEmpty(coll)) {\r\n        return \"\";\r\n    }\r\n    int totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\r\n    for (Object element : coll) {\r\n        totalLength += String.valueOf(element).length();\r\n    }\r\n    StringBuilder sb = new StringBuilder(totalLength);\r\n    Iterator<?> it = coll.iterator();\r\n    while (it.hasNext()) {\r\n        sb.append(prefix).append(it.next()).append(suffix);\r\n        if (it.hasNext()) {\r\n            sb.append(delim);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "comment": "\n\t * Convert a {@link Collection} to a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @param prefix the {@code String} to start each element with\n\t * @param suffix the {@code String} to end each element with\n\t * @return the delimited {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String)",
    "entityType": "method",
    "code": "/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim) {\r\n    return collectionToDelimitedString(coll, delim, \"\", \"\");\r\n}",
    "comment": "\n\t * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @return the delimited {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#collectionToCommaDelimitedString(Collection<?>)",
    "entityType": "method",
    "code": "/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToCommaDelimitedString(@Nullable Collection<?> coll) {\r\n    return collectionToDelimitedString(coll, \",\");\r\n}",
    "comment": "\n\t * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @return the delimited {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#arrayToDelimitedString(Object[],String)",
    "entityType": "method",
    "code": "/**\r\n * Convert a {@code String} array into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToDelimitedString(@Nullable Object @Nullable [] arr, String delim) {\r\n    if (ObjectUtils.isEmpty(arr)) {\r\n        return \"\";\r\n    }\r\n    if (arr.length == 1) {\r\n        return ObjectUtils.nullSafeToString(arr[0]);\r\n    }\r\n    StringJoiner sj = new StringJoiner(delim);\r\n    for (Object elem : arr) {\r\n        sj.add(String.valueOf(elem));\r\n    }\r\n    return sj.toString();\r\n}",
    "comment": "\n\t * Convert a {@code String} array into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param arr the array to display (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @return the delimited {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#arrayToCommaDelimitedString(Object[])",
    "entityType": "method",
    "code": "/**\r\n * Convert a {@code String} array into a comma delimited {@code String}\r\n * (i.e., CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToCommaDelimitedString(@Nullable Object @Nullable [] arr) {\r\n    return arrayToDelimitedString(arr, \",\");\r\n}",
    "comment": "\n\t * Convert a {@code String} array into a comma delimited {@code String}\n\t * (i.e., CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param arr the array to display (potentially {@code null} or empty)\n\t * @return the delimited {@code String}\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#truncate(CharSequence)",
    "entityType": "method",
    "code": "/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>Delegates to {@link #truncate(CharSequence, int)}, supplying {@code 100}\r\n * as the threshold.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence) {\r\n    return truncate(charSequence, DEFAULT_TRUNCATION_THRESHOLD);\r\n}",
    "comment": "\n\t * Truncate the supplied {@link CharSequence}.\n\t * <p>Delegates to {@link #truncate(CharSequence, int)}, supplying {@code 100}\n\t * as the threshold.\n\t * @param charSequence the {@code CharSequence} to truncate\n\t * @return a truncated string, or a string representation of the original\n\t * {@code CharSequence} if its length does not exceed the threshold\n\t * @since 5.3.27\n\t "
  },
  {
    "entityId": "org.springframework.util.StringUtils#truncate(CharSequence,int)",
    "entityType": "method",
    "code": "/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>If the length of the {@code CharSequence} is greater than the threshold,\r\n * this method returns a {@linkplain CharSequence#subSequence(int, int)\r\n * subsequence} of the {@code CharSequence} (up to the threshold) appended\r\n * with the suffix {@code \" (truncated)...\"}. Otherwise, this method returns\r\n * {@code charSequence.toString()}.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @param threshold the maximum length after which to truncate; must be a\r\n * positive number\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence, int threshold) {\r\n    Assert.isTrue(threshold > 0, () -> \"Truncation threshold must be a positive number: \" + threshold);\r\n    if (charSequence.length() > threshold) {\r\n        return charSequence.subSequence(0, threshold) + TRUNCATION_SUFFIX;\r\n    }\r\n    return charSequence.toString();\r\n}",
    "comment": "\n\t * Truncate the supplied {@link CharSequence}.\n\t * <p>If the length of the {@code CharSequence} is greater than the threshold,\n\t * this method returns a {@linkplain CharSequence#subSequence(int, int)\n\t * subsequence} of the {@code CharSequence} (up to the threshold) appended\n\t * with the suffix {@code \" (truncated)...\"}. Otherwise, this method returns\n\t * {@code charSequence.toString()}.\n\t * @param charSequence the {@code CharSequence} to truncate\n\t * @param threshold the maximum length after which to truncate; must be a\n\t * positive number\n\t * @return a truncated string, or a string representation of the original\n\t * {@code CharSequence} if its length does not exceed the threshold\n\t * @since 5.3.27\n\t "
  },
  {
    "entityId": "org.springframework.util.StringValueResolver",
    "entityType": "class",
    "code": "/**\r\n * Resolve the given String value, for example parsing placeholders.\r\n * @param strVal the original String value (never {@code null})\r\n * @return the resolved String value (may be {@code null} when resolved to a null\r\n * value), possibly the original String value itself (in case of no placeholders\r\n * to resolve or when ignoring unresolvable placeholders)\r\n * @throws IllegalArgumentException in case of an unresolvable String value\r\n */\r\n@Nullable\r\nString resolveStringValue(String strVal);",
    "comment": "\n * Simple strategy interface for resolving a String value.\n * Used by {@link org.springframework.beans.factory.config.ConfigurableBeanFactory}.\n *\n * @author Juergen Hoeller\n * @since 2.5\n * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#resolveAliases\n * @see org.springframework.beans.factory.config.BeanDefinitionVisitor#BeanDefinitionVisitor(StringValueResolver)\n "
  },
  {
    "entityId": "org.springframework.util.StringValueResolver#resolveStringValue(String)",
    "entityType": "method",
    "code": "/**\r\n * Resolve the given String value, for example parsing placeholders.\r\n * @param strVal the original String value (never {@code null})\r\n * @return the resolved String value (may be {@code null} when resolved to a null\r\n * value), possibly the original String value itself (in case of no placeholders\r\n * to resolve or when ignoring unresolvable placeholders)\r\n * @throws IllegalArgumentException in case of an unresolvable String value\r\n */\r\n@Nullable\r\nString resolveStringValue(String strVal);",
    "comment": "\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value (never {@code null})\n\t * @return the resolved String value (may be {@code null} when resolved to a null\n\t * value), possibly the original String value itself (in case of no placeholders\n\t * to resolve or when ignoring unresolvable placeholders)\n\t * @throws IllegalArgumentException in case of an unresolvable String value\n\t "
  },
  {
    "entityId": "org.springframework.util.SystemPropertyUtils",
    "entityType": "class",
    "code": "/**\r\n * Prefix for system property placeholders: {@value}.\r\n */\r\npublic static final String PLACEHOLDER_PREFIX = \"${\";\n/**\r\n * Suffix for system property placeholders: {@value}.\r\n */\r\npublic static final String PLACEHOLDER_SUFFIX = \"}\";\n/**\r\n * Value separator for system property placeholders: {@value}.\r\n */\r\npublic static final String VALUE_SEPARATOR = \":\";\n/**\r\n * Default escape character: {@code '\\'}.\r\n */\r\npublic static final Character ESCAPE_CHARACTER = '\\\\';\nprivate static final PropertyPlaceholderHelper strictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, ESCAPE_CHARACTER, false);\nprivate static final PropertyPlaceholderHelper nonStrictHelper = new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, ESCAPE_CHARACTER, true);\n/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values.\r\n * @param text the String to resolve\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n */\r\npublic static String resolvePlaceholders(String text) {\r\n    return resolvePlaceholders(text, false);\r\n}\n/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values. Unresolvable placeholders with no default\r\n * value are ignored and passed through unchanged if the flag is set to {@code true}.\r\n * @param text the String to resolve\r\n * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\r\n */\r\npublic static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {\r\n    if (text.isEmpty()) {\r\n        return text;\r\n    }\r\n    PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);\r\n    return helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));\r\n}\n/**\r\n * PlaceholderResolver implementation that resolves against system properties\r\n * and system environment variables.\r\n */\r\nprivate static class SystemPropertyPlaceholderResolver implements PropertyPlaceholderHelper.PlaceholderResolver {\r\n\r\n    private final String text;\r\n\r\n    public SystemPropertyPlaceholderResolver(String text) {\r\n        this.text = text;\r\n    }\r\n\r\n    @Override\r\n    @Nullable\r\n    public String resolvePlaceholder(String placeholderName) {\r\n        try {\r\n            String propVal = System.getProperty(placeholderName);\r\n            if (propVal == null) {\r\n                // Fall back to searching the system environment.\r\n                propVal = System.getenv(placeholderName);\r\n            }\r\n            return propVal;\r\n        } catch (Throwable ex) {\r\n            System.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" + this.text + \"] as system property: \" + ex);\r\n            return null;\r\n        }\r\n    }\r\n}",
    "comment": "\n * Helper class for resolving placeholders in texts. Usually applied to file paths.\n *\n * <p>A text may contain {@code ${...}} placeholders, to be resolved as system properties:\n * for example, {@code ${user.dir}}. Default values can be supplied using the \":\" separator\n * between key and value.\n *\n * @author Juergen Hoeller\n * @author Rob Harrop\n * @author Dave Syer\n * @since 1.2.5\n * @see #PLACEHOLDER_PREFIX\n * @see #PLACEHOLDER_SUFFIX\n * @see System#getProperty(String)\n "
  },
  {
    "entityId": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String)",
    "entityType": "method",
    "code": "/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values.\r\n * @param text the String to resolve\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n */\r\npublic static String resolvePlaceholders(String text) {\r\n    return resolvePlaceholders(text, false);\r\n}",
    "comment": "\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values.\n\t * @param text the String to resolve\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t "
  },
  {
    "entityId": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String,boolean)",
    "entityType": "method",
    "code": "/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values. Unresolvable placeholders with no default\r\n * value are ignored and passed through unchanged if the flag is set to {@code true}.\r\n * @param text the String to resolve\r\n * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\r\n */\r\npublic static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {\r\n    if (text.isEmpty()) {\r\n        return text;\r\n    }\r\n    PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);\r\n    return helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));\r\n}",
    "comment": "\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values. Unresolvable placeholders with no default\n\t * value are ignored and passed through unchanged if the flag is set to {@code true}.\n\t * @param text the String to resolve\n\t * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\n\t "
  },
  {
    "entityId": "org.springframework.util.SystemPropertyPlaceholderResolver",
    "entityType": "class",
    "code": "private final String text;\npublic SystemPropertyPlaceholderResolver(String text) {\r\n    this.text = text;\r\n}\n@Override\r\n@Nullable\r\npublic String resolvePlaceholder(String placeholderName) {\r\n    try {\r\n        String propVal = System.getProperty(placeholderName);\r\n        if (propVal == null) {\r\n            // Fall back to searching the system environment.\r\n            propVal = System.getenv(placeholderName);\r\n        }\r\n        return propVal;\r\n    } catch (Throwable ex) {\r\n        System.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" + this.text + \"] as system property: \" + ex);\r\n        return null;\r\n    }\r\n}",
    "comment": "\n\t * PlaceholderResolver implementation that resolves against system properties\n\t * and system environment variables.\n\t "
  },
  {
    "entityId": "org.springframework.util.SystemPropertyPlaceholderResolver#resolvePlaceholder(String)",
    "entityType": "method",
    "code": "@Override\r\n@Nullable\r\npublic String resolvePlaceholder(String placeholderName) {\r\n    try {\r\n        String propVal = System.getProperty(placeholderName);\r\n        if (propVal == null) {\r\n            // Fall back to searching the system environment.\r\n            propVal = System.getenv(placeholderName);\r\n        }\r\n        return propVal;\r\n    } catch (Throwable ex) {\r\n        System.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" + this.text + \"] as system property: \" + ex);\r\n        return null;\r\n    }\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.TypeUtils",
    "entityType": "class",
    "code": "private static final Type[] IMPLICIT_LOWER_BOUNDS = { null };\nprivate static final Type[] IMPLICIT_UPPER_BOUNDS = { Object.class };\n/**\r\n * Check if the right-hand side type may be assigned to the left-hand side\r\n * type following the Java generics rules.\r\n * @param lhsType the target type (left-hand side (LHS) type)\r\n * @param rhsType the value type (right-hand side (RHS) type) that should\r\n * be assigned to the target type\r\n * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\r\n * @see ClassUtils#isAssignable(Class, Class)\r\n */\r\npublic static boolean isAssignable(Type lhsType, Type rhsType) {\r\n    Assert.notNull(lhsType, \"Left-hand side type must not be null\");\r\n    Assert.notNull(rhsType, \"Right-hand side type must not be null\");\r\n    // all types are assignable to themselves and to class Object\r\n    if (lhsType.equals(rhsType) || Object.class == lhsType) {\r\n        return true;\r\n    }\r\n    if (lhsType instanceof Class<?> lhsClass) {\r\n        // just comparing two classes\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n        }\r\n        if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            Type rhsRaw = rhsParameterizedType.getRawType();\r\n            // a parameterized type is always assignable to its raw class type\r\n            if (rhsRaw instanceof Class<?> rhRawClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhRawClass);\r\n            }\r\n        } else if (lhsClass.isArray() && rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsClass.componentType(), rhsComponent);\r\n        }\r\n    }\r\n    // parameterized types are only assignable to other parameterized types and class types\r\n    if (lhsType instanceof ParameterizedType lhsParameterizedType) {\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            Type lhsRaw = lhsParameterizedType.getRawType();\r\n            if (lhsRaw instanceof Class<?> lhsClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n            }\r\n        } else if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            return isAssignable(lhsParameterizedType, rhsParameterizedType);\r\n        }\r\n    }\r\n    if (lhsType instanceof GenericArrayType lhsGenericArrayType) {\r\n        Type lhsComponent = lhsGenericArrayType.getGenericComponentType();\r\n        if (rhsType instanceof Class<?> rhsClass && rhsClass.isArray()) {\r\n            return isAssignable(lhsComponent, rhsClass.componentType());\r\n        } else if (rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsComponent, rhsComponent);\r\n        }\r\n    }\r\n    if (lhsType instanceof WildcardType lhsWildcardType) {\r\n        return isAssignable(lhsWildcardType, rhsType);\r\n    }\r\n    return false;\r\n}\nprivate static boolean isAssignable(ParameterizedType lhsType, ParameterizedType rhsType) {\r\n    if (lhsType.equals(rhsType)) {\r\n        return true;\r\n    }\r\n    Type[] lhsTypeArguments = lhsType.getActualTypeArguments();\r\n    Type[] rhsTypeArguments = rhsType.getActualTypeArguments();\r\n    if (lhsTypeArguments.length != rhsTypeArguments.length) {\r\n        return false;\r\n    }\r\n    for (int size = lhsTypeArguments.length, i = 0; i < size; ++i) {\r\n        Type lhsArg = lhsTypeArguments[i];\r\n        Type rhsArg = rhsTypeArguments[i];\r\n        if (!lhsArg.equals(rhsArg) && !(lhsArg instanceof WildcardType wildcardType && isAssignable(wildcardType, rhsArg))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\nprivate static boolean isAssignable(WildcardType lhsType, Type rhsType) {\r\n    Type[] lUpperBounds = getUpperBounds(lhsType);\r\n    Type[] lLowerBounds = getLowerBounds(lhsType);\r\n    if (rhsType instanceof WildcardType rhsWcType) {\r\n        // both the upper and lower bounds of the right-hand side must be\r\n        // completely enclosed in the upper and lower bounds of the left-\r\n        // hand side.\r\n        Type[] rUpperBounds = getUpperBounds(rhsWcType);\r\n        Type[] rLowerBounds = getLowerBounds(rhsWcType);\r\n        for (Type lBound : lUpperBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (Type lBound : lUpperBounds) {\r\n            if (!isAssignableBound(lBound, rhsType)) {\r\n                return false;\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            if (!isAssignableBound(rhsType, lBound)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\nprivate static Type[] getLowerBounds(WildcardType wildcardType) {\r\n    Type[] lowerBounds = wildcardType.getLowerBounds();\r\n    // supply the implicit lower bound if none are specified\r\n    return (lowerBounds.length == 0 ? IMPLICIT_LOWER_BOUNDS : lowerBounds);\r\n}\nprivate static Type[] getUpperBounds(WildcardType wildcardType) {\r\n    Type[] upperBounds = wildcardType.getUpperBounds();\r\n    // supply the implicit upper bound if none are specified\r\n    return (upperBounds.length == 0 ? IMPLICIT_UPPER_BOUNDS : upperBounds);\r\n}\npublic static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {\r\n    if (rhsType == null) {\r\n        return true;\r\n    }\r\n    if (lhsType == null) {\r\n        return false;\r\n    }\r\n    return isAssignable(lhsType, rhsType);\r\n}",
    "comment": "\n * Utility to work with generic type parameters.\n *\n * <p>Mainly for internal use within the framework.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @author Chris Beams\n * @author Sam Brannen\n * @since 2.0.7\n "
  },
  {
    "entityId": "org.springframework.util.TypeUtils#isAssignable(Type,Type)",
    "entityType": "method",
    "code": "/**\r\n * Check if the right-hand side type may be assigned to the left-hand side\r\n * type following the Java generics rules.\r\n * @param lhsType the target type (left-hand side (LHS) type)\r\n * @param rhsType the value type (right-hand side (RHS) type) that should\r\n * be assigned to the target type\r\n * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\r\n * @see ClassUtils#isAssignable(Class, Class)\r\n */\r\npublic static boolean isAssignable(Type lhsType, Type rhsType) {\r\n    Assert.notNull(lhsType, \"Left-hand side type must not be null\");\r\n    Assert.notNull(rhsType, \"Right-hand side type must not be null\");\r\n    // all types are assignable to themselves and to class Object\r\n    if (lhsType.equals(rhsType) || Object.class == lhsType) {\r\n        return true;\r\n    }\r\n    if (lhsType instanceof Class<?> lhsClass) {\r\n        // just comparing two classes\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n        }\r\n        if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            Type rhsRaw = rhsParameterizedType.getRawType();\r\n            // a parameterized type is always assignable to its raw class type\r\n            if (rhsRaw instanceof Class<?> rhRawClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhRawClass);\r\n            }\r\n        } else if (lhsClass.isArray() && rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsClass.componentType(), rhsComponent);\r\n        }\r\n    }\r\n    // parameterized types are only assignable to other parameterized types and class types\r\n    if (lhsType instanceof ParameterizedType lhsParameterizedType) {\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            Type lhsRaw = lhsParameterizedType.getRawType();\r\n            if (lhsRaw instanceof Class<?> lhsClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n            }\r\n        } else if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            return isAssignable(lhsParameterizedType, rhsParameterizedType);\r\n        }\r\n    }\r\n    if (lhsType instanceof GenericArrayType lhsGenericArrayType) {\r\n        Type lhsComponent = lhsGenericArrayType.getGenericComponentType();\r\n        if (rhsType instanceof Class<?> rhsClass && rhsClass.isArray()) {\r\n            return isAssignable(lhsComponent, rhsClass.componentType());\r\n        } else if (rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsComponent, rhsComponent);\r\n        }\r\n    }\r\n    if (lhsType instanceof WildcardType lhsWildcardType) {\r\n        return isAssignable(lhsWildcardType, rhsType);\r\n    }\r\n    return false;\r\n}",
    "comment": "\n\t * Check if the right-hand side type may be assigned to the left-hand side\n\t * type following the Java generics rules.\n\t * @param lhsType the target type (left-hand side (LHS) type)\n\t * @param rhsType the value type (right-hand side (RHS) type) that should\n\t * be assigned to the target type\n\t * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\n\t * @see ClassUtils#isAssignable(Class, Class)\n\t "
  },
  {
    "entityId": "org.springframework.util.TypeUtils#isAssignable(ParameterizedType,ParameterizedType)",
    "entityType": "method",
    "code": "private static boolean isAssignable(ParameterizedType lhsType, ParameterizedType rhsType) {\r\n    if (lhsType.equals(rhsType)) {\r\n        return true;\r\n    }\r\n    Type[] lhsTypeArguments = lhsType.getActualTypeArguments();\r\n    Type[] rhsTypeArguments = rhsType.getActualTypeArguments();\r\n    if (lhsTypeArguments.length != rhsTypeArguments.length) {\r\n        return false;\r\n    }\r\n    for (int size = lhsTypeArguments.length, i = 0; i < size; ++i) {\r\n        Type lhsArg = lhsTypeArguments[i];\r\n        Type rhsArg = rhsTypeArguments[i];\r\n        if (!lhsArg.equals(rhsArg) && !(lhsArg instanceof WildcardType wildcardType && isAssignable(wildcardType, rhsArg))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.TypeUtils#isAssignable(WildcardType,Type)",
    "entityType": "method",
    "code": "private static boolean isAssignable(WildcardType lhsType, Type rhsType) {\r\n    Type[] lUpperBounds = getUpperBounds(lhsType);\r\n    Type[] lLowerBounds = getLowerBounds(lhsType);\r\n    if (rhsType instanceof WildcardType rhsWcType) {\r\n        // both the upper and lower bounds of the right-hand side must be\r\n        // completely enclosed in the upper and lower bounds of the left-\r\n        // hand side.\r\n        Type[] rUpperBounds = getUpperBounds(rhsWcType);\r\n        Type[] rLowerBounds = getLowerBounds(rhsWcType);\r\n        for (Type lBound : lUpperBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(lBound, rBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            for (Type rBound : rUpperBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (Type rBound : rLowerBounds) {\r\n                if (!isAssignableBound(rBound, lBound)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (Type lBound : lUpperBounds) {\r\n            if (!isAssignableBound(lBound, rhsType)) {\r\n                return false;\r\n            }\r\n        }\r\n        for (Type lBound : lLowerBounds) {\r\n            if (!isAssignableBound(rhsType, lBound)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.TypeUtils#getLowerBounds(WildcardType)",
    "entityType": "method",
    "code": "private static Type[] getLowerBounds(WildcardType wildcardType) {\r\n    Type[] lowerBounds = wildcardType.getLowerBounds();\r\n    // supply the implicit lower bound if none are specified\r\n    return (lowerBounds.length == 0 ? IMPLICIT_LOWER_BOUNDS : lowerBounds);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.TypeUtils#getUpperBounds(WildcardType)",
    "entityType": "method",
    "code": "private static Type[] getUpperBounds(WildcardType wildcardType) {\r\n    Type[] upperBounds = wildcardType.getUpperBounds();\r\n    // supply the implicit upper bound if none are specified\r\n    return (upperBounds.length == 0 ? IMPLICIT_UPPER_BOUNDS : upperBounds);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.TypeUtils#isAssignableBound(Type,Type)",
    "entityType": "method",
    "code": "public static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {\r\n    if (rhsType == null) {\r\n        return true;\r\n    }\r\n    if (lhsType == null) {\r\n        return false;\r\n    }\r\n    return isAssignable(lhsType, rhsType);\r\n}",
    "comment": ""
  },
  {
    "entityId": "org.springframework.util.unit.DataSize",
    "entityType": "class",
    "code": "/**\r\n * Bytes per Kilobyte.\r\n */\r\nprivate static final long BYTES_PER_KB = 1024;\n/**\r\n * Bytes per Megabyte.\r\n */\r\nprivate static final long BYTES_PER_MB = BYTES_PER_KB * 1024;\n/**\r\n * Bytes per Gigabyte.\r\n */\r\nprivate static final long BYTES_PER_GB = BYTES_PER_MB * 1024;\n/**\r\n * Bytes per Terabyte.\r\n */\r\nprivate static final long BYTES_PER_TB = BYTES_PER_GB * 1024;\nprivate final long bytes;\nprivate DataSize(long bytes) {\r\n    this.bytes = bytes;\r\n}\n/**\r\n * Obtain a {@link DataSize} representing the specified number of bytes.\r\n * @param bytes the number of bytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofBytes(long bytes) {\r\n    return new DataSize(bytes);\r\n}\n/**\r\n * Obtain a {@link DataSize} representing the specified number of kilobytes.\r\n * @param kilobytes the number of kilobytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofKilobytes(long kilobytes) {\r\n    return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));\r\n}\n/**\r\n * Obtain a {@link DataSize} representing the specified number of megabytes.\r\n * @param megabytes the number of megabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofMegabytes(long megabytes) {\r\n    return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));\r\n}\n/**\r\n * Obtain a {@link DataSize} representing the specified number of gigabytes.\r\n * @param gigabytes the number of gigabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofGigabytes(long gigabytes) {\r\n    return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));\r\n}\n/**\r\n * Obtain a {@link DataSize} representing the specified number of terabytes.\r\n * @param terabytes the number of terabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofTerabytes(long terabytes) {\r\n    return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));\r\n}\n/**\r\n * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.\r\n * @param amount the amount of the size, measured in terms of the unit,\r\n * positive or negative\r\n * @return a corresponding {@code DataSize}\r\n */\r\npublic static DataSize of(long amount, DataUnit unit) {\r\n    Assert.notNull(unit, \"Unit must not be null\");\r\n    return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));\r\n}\n/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * {@link DataUnit#BYTES} if no unit is specified.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 bytes\"\r\n * </pre>\r\n * @param text the text to parse\r\n * @return the parsed {@code DataSize}\r\n * @see #parse(CharSequence, DataUnit)\r\n */\r\npublic static DataSize parse(CharSequence text) {\r\n    return parse(text, null);\r\n}\n/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * the specified default {@link DataUnit} if no unit is specified.\r\n * <p>The string starts with a number followed optionally by a unit matching\r\n * one of the supported {@linkplain DataUnit suffixes}.\r\n * <p>If neither a unit nor a default {@code DataUnit} is specified,\r\n * {@link DataUnit#BYTES} will be inferred.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 kilobytes\" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})\r\n * \"20\"   -- parses as \"20 bytes\" (if the {@code defaultUnit} is {@code null})\r\n * </pre>\r\n * @param text the text to parse\r\n * @param defaultUnit the default {@code DataUnit} to use\r\n * @return the parsed {@code DataSize}\r\n */\r\npublic static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {\r\n    Assert.notNull(text, \"Text must not be null\");\r\n    try {\r\n        CharSequence trimmedText = StringUtils.trimAllWhitespace(text);\r\n        Matcher matcher = DataSizeUtils.PATTERN.matcher(trimmedText);\r\n        Assert.state(matcher.matches(), () -> \"'\" + text + \"' does not match data size pattern\");\r\n        DataUnit unit = DataSizeUtils.determineDataUnit(matcher.group(2), defaultUnit);\r\n        long amount = Long.parseLong(trimmedText, matcher.start(1), matcher.end(1), 10);\r\n        return DataSize.of(amount, unit);\r\n    } catch (Exception ex) {\r\n        throw new IllegalArgumentException(\"'\" + text + \"' is not a valid data size\", ex);\r\n    }\r\n}\n/**\r\n * Checks if this size is negative, excluding zero.\r\n * @return true if this size has a size less than zero bytes\r\n */\r\npublic boolean isNegative() {\r\n    return this.bytes < 0;\r\n}\n/**\r\n * Return the number of bytes in this instance.\r\n * @return the number of bytes\r\n */\r\npublic long toBytes() {\r\n    return this.bytes;\r\n}\n/**\r\n * Return the number of kilobytes in this instance.\r\n * @return the number of kilobytes\r\n */\r\npublic long toKilobytes() {\r\n    return this.bytes / BYTES_PER_KB;\r\n}\n/**\r\n * Return the number of megabytes in this instance.\r\n * @return the number of megabytes\r\n */\r\npublic long toMegabytes() {\r\n    return this.bytes / BYTES_PER_MB;\r\n}\n/**\r\n * Return the number of gigabytes in this instance.\r\n * @return the number of gigabytes\r\n */\r\npublic long toGigabytes() {\r\n    return this.bytes / BYTES_PER_GB;\r\n}\n/**\r\n * Return the number of terabytes in this instance.\r\n * @return the number of terabytes\r\n */\r\npublic long toTerabytes() {\r\n    return this.bytes / BYTES_PER_TB;\r\n}\n@Override\r\npublic int compareTo(DataSize other) {\r\n    return Long.compare(this.bytes, other.bytes);\r\n}\n@Override\r\npublic String toString() {\r\n    return String.format(\"%dB\", this.bytes);\r\n}\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || getClass() != other.getClass()) {\r\n        return false;\r\n    }\r\n    DataSize that = (DataSize) other;\r\n    return (this.bytes == that.bytes);\r\n}\n@Override\r\npublic int hashCode() {\r\n    return Long.hashCode(this.bytes);\r\n}\n/**\r\n * Static nested class to support lazy loading of the {@link #PATTERN}.\r\n * @since 5.3.21\r\n */\r\nprivate static class DataSizeUtils {\r\n\r\n    /**\r\n     * The pattern for parsing.\r\n     */\r\n    private static final Pattern PATTERN = Pattern.compile(\"^([+\\\\-]?\\\\d+)([a-zA-Z]{0,2})$\");\r\n\r\n    private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {\r\n        DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);\r\n        return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);\r\n    }\r\n}",
    "comment": "\n * A data size, such as '12MB'. This class models data size in terms of\n * bytes and is immutable and thread-safe.\n *\n * <p>The terms and units used in this class are based on\n * <a href=\"https://en.wikipedia.org/wiki/Binary_prefix\">binary prefixes</a>\n * indicating multiplication by powers of 2. Consult the following table and\n * the Javadoc for {@link DataUnit} for details.\n *\n * <p>\n * <table border=\"1\">\n * <tr><th>Term</th><th>Data Size</th><th>Size in Bytes</th></tr>\n * <tr><td>byte</td><td>1B</td><td>1</td></tr>\n * <tr><td>kilobyte</td><td>1KB</td><td>1,024</td></tr>\n * <tr><td>megabyte</td><td>1MB</td><td>1,048,576</td></tr>\n * <tr><td>gigabyte</td><td>1GB</td><td>1,073,741,824</td></tr>\n * <tr><td>terabyte</td><td>1TB</td><td>1,099,511,627,776</td></tr>\n * </table>\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 5.1\n * @see DataUnit\n "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#ofBytes(long)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing the specified number of bytes.\r\n * @param bytes the number of bytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofBytes(long bytes) {\r\n    return new DataSize(bytes);\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing the specified number of bytes.\n\t * @param bytes the number of bytes, positive or negative\n\t * @return a {@code DataSize}\n\t "
  },
  {
    "entityId": "org.springframework.util.unit.DataSize#ofKilobytes(long)",
    "entityType": "method",
    "code": "/**\r\n * Obtain a {@link DataSize} representing the specified number of kilobytes.\r\n * @param kilobytes the number of kilobytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofKilobytes(long kilobytes) {\r\n    return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));\r\n}",
    "comment": "\n\t * Obtain a {@link DataSize} representing the specified number of kilobytes.\n\t * @param kilobytes the number of kilobytes, positive or negative\n\t * @return a {@code DataSize}\n\t "
  }
]