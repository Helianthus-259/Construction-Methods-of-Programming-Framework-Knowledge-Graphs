[
  {
    "head": "org.springframework.core.ConstantsTests#getValuesInTurkey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValuesInTurkey() {\r\n    Locale oldLocale = Locale.getDefault();\r\n    Locale.setDefault(new Locale(\"tr\", \"\"));\r\n    try {\r\n        Constants c = new Constants(A.class);\r\n        Set<Object> values = c.getValues(\"\");\r\n        assertThat(values).hasSize(7);\r\n        assertThat(values).contains(0);\r\n        assertThat(values).contains(66);\r\n        assertThat(values).contains(\"\");\r\n        values = c.getValues(\"D\");\r\n        assertThat(values).hasSize(1);\r\n        assertThat(values).contains(0);\r\n        values = c.getValues(\"prefix\");\r\n        assertThat(values).hasSize(2);\r\n        assertThat(values).contains(1);\r\n        assertThat(values).contains(2);\r\n        values = c.getValuesForProperty(\"myProperty\");\r\n        assertThat(values).hasSize(2);\r\n        assertThat(values).contains(1);\r\n        assertThat(values).contains(2);\r\n    } finally {\r\n        Locale.setDefault(oldLocale);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#getValuesInTurkey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesInTurkey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#suffixAccess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid suffixAccess() {\r\n    Constants c = new Constants(A.class);\r\n    Set<String> names = c.getNamesForSuffix(\"_PROPERTY\");\r\n    assertThat(names).hasSize(2);\r\n    assertThat(names).contains(\"NO_PROPERTY\");\r\n    assertThat(names).contains(\"YES_PROPERTY\");\r\n    Set<Object> values = c.getValuesForSuffix(\"_PROPERTY\");\r\n    assertThat(values).hasSize(2);\r\n    assertThat(values).contains(3);\r\n    assertThat(values).contains(4);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#suffixAccess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#suffixAccess()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#toCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toCode() {\r\n    Constants c = new Constants(A.class);\r\n    assertThat(c.toCode(0, \"\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCode(0, \"D\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCode(0, \"DO\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCode(0, \"DoG\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCode(0, null)).isEqualTo(\"DOG\");\r\n    assertThat(c.toCode(66, \"\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCode(66, \"C\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCode(66, \"ca\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCode(66, \"cAt\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCode(66, null)).isEqualTo(\"CAT\");\r\n    assertThat(c.toCode(\"\", \"\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCode(\"\", \"s\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCode(\"\", \"s1\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCode(\"\", null)).isEqualTo(\"S1\");\r\n    assertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() -> c.toCode(\"bogus\", \"bogus\"));\r\n    assertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() -> c.toCode(\"bogus\", null));\r\n    assertThat(c.toCodeForProperty(1, \"myProperty\")).isEqualTo(\"MY_PROPERTY_NO\");\r\n    assertThat(c.toCodeForProperty(2, \"myProperty\")).isEqualTo(\"MY_PROPERTY_YES\");\r\n    assertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() -> c.toCodeForProperty(\"bogus\", \"bogus\"));\r\n    assertThat(c.toCodeForSuffix(0, \"\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCodeForSuffix(0, \"G\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCodeForSuffix(0, \"OG\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCodeForSuffix(0, \"DoG\")).isEqualTo(\"DOG\");\r\n    assertThat(c.toCodeForSuffix(0, null)).isEqualTo(\"DOG\");\r\n    assertThat(c.toCodeForSuffix(66, \"\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCodeForSuffix(66, \"T\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCodeForSuffix(66, \"at\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCodeForSuffix(66, \"cAt\")).isEqualTo(\"CAT\");\r\n    assertThat(c.toCodeForSuffix(66, null)).isEqualTo(\"CAT\");\r\n    assertThat(c.toCodeForSuffix(\"\", \"\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCodeForSuffix(\"\", \"1\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCodeForSuffix(\"\", \"s1\")).isEqualTo(\"S1\");\r\n    assertThat(c.toCodeForSuffix(\"\", null)).isEqualTo(\"S1\");\r\n    assertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() -> c.toCodeForSuffix(\"bogus\", \"bogus\"));\r\n    assertThatExceptionOfType(Constants.ConstantException.class).isThrownBy(() -> c.toCodeForSuffix(\"bogus\", null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#toCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#toCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithNullPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValuesWithNullPrefix() {\r\n    Constants c = new Constants(A.class);\r\n    Set<?> values = c.getValues(null);\r\n    assertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#getValuesWithNullPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithNullPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithEmptyStringPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValuesWithEmptyStringPrefix() {\r\n    Constants c = new Constants(A.class);\r\n    Set<Object> values = c.getValues(\"\");\r\n    assertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#getValuesWithEmptyStringPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithEmptyStringPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithWhitespacedStringPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValuesWithWhitespacedStringPrefix() {\r\n    Constants c = new Constants(A.class);\r\n    Set<?> values = c.getValues(\" \");\r\n    assertThat(values).as(\"Must have returned *all* public static final values\").hasSize(7);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#getValuesWithWhitespacedStringPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConstantsTests#getValuesWithWhitespacedStringPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConstantsTests#withClassThatExposesNoConstants()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withClassThatExposesNoConstants() {\r\n    Constants c = new Constants(NoConstants.class);\r\n    assertThat(c.getSize()).isEqualTo(0);\r\n    final Set<?> values = c.getValues(\"\");\r\n    assertThat(values).isNotNull();\r\n    assertThat(values).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConstantsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConstantsTests#withClassThatExposesNoConstants()",
    "tailType": "method"
  }
]