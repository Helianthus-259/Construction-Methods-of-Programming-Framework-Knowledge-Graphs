[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumber()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumberNotSupportedNumber()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid numberToNumberNotSupportedNumber() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(1, CustomNumber.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumberNotSupportedNumber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToNumberNotSupportedNumber()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToCharacter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid numberToCharacter() {\r\n    assertThat(conversionService.convert(65, Character.class)).isEqualTo(Character.valueOf('A'));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToCharacter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#numberToCharacter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#characterToNumber()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid characterToNumber() {\r\n    assertThat(conversionService.convert('A', Integer.class)).isEqualTo(65);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#characterToNumber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#characterToNumber()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// collection conversion\r\n@Test\r\nvoid convertArrayToCollectionInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Collection.class);\r\n    assertThat(result).isEqualTo(List.of(\"1\", \"2\", \"3\"));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToSetInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertArrayToSetInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    Collection<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, Set.class);\r\n    assertThat(result).isExactlyInstanceOf(LinkedHashSet.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToSetInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToSetInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToListInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertArrayToListInterface() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> result = conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, List.class);\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToListInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToListInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertArrayToCollectionGenericTypeConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertArrayToCollectionGenericTypeConversion() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> result = (List<Integer>) conversionService.convert(new String[] { \"1\", \"2\", \"3\" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField(\"genericList\")));\r\n    assertThat(result).isExactlyInstanceOf(ArrayList.class).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  }
]