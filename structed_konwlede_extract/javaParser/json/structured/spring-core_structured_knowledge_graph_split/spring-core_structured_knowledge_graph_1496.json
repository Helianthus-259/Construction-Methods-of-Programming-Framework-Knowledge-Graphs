[
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#writeToInvokeTypeSpecCustomizer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid writeToInvokeTypeSpecCustomizer() {\r\n    Consumer<TypeSpec.Builder> typeSpecCustomizer = mock();\r\n    this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, typeSpecCustomizer);\r\n    verifyNoInteractions(typeSpecCustomizer);\r\n    InMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\r\n    this.generatedClasses.writeTo(generatedFiles);\r\n    verify(typeSpecCustomizer).accept(any());\r\n    assertThat(generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#writeToInvokeTypeSpecCustomizer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#writeToInvokeTypeSpecCustomizer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#withNameUpdatesNamingConventions()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNameUpdatesNamingConventions() {\r\n    GeneratedClass generatedClass1 = this.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    GeneratedClass generatedClass2 = this.generatedClasses.withFeatureNamePrefix(\"Another\").addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass1.getName().toString()).endsWith(\"TestComponent__One\");\r\n    assertThat(generatedClass2.getName().toString()).endsWith(\"TestComponent__AnotherOne\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#withNameUpdatesNamingConventions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#withNameUpdatesNamingConventions()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.TestComponent",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.TestComponent",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.GeneratedFiles.Kind;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link GeneratedClasses}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass GeneratedClassesTests {\n\n\tprivate static final Consumer<TypeSpec.Builder> emptyTypeCustomizer = type -> {};\n\n\tprivate final GeneratedClasses generatedClasses = new GeneratedClasses(\n\t\t\tnew ClassNameGenerator(ClassName.get(\"com.example\", \"Test\")));\n\n\t@Test\n\tvoid createWhenClassNameGeneratorIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new GeneratedClasses(null))\n\t\t\t\t.withMessage(\"'classNameGenerator' must not be null\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWhenFeatureNameIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"\",\n\t\t\t\t\t\tTestComponent.class, emptyTypeCustomizer))\n\t\t\t\t.withMessage(\"'featureName' must not be empty\");\n\t}\n\n\t@Test\n\tvoid addForFeatureWhenFeatureNameIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses.addForFeature(\"\", emptyTypeCustomizer))\n\t\t\t\t.withMessage(\"'featureName' must not be empty\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses\n\t\t\t\t\t\t.addForFeatureComponent(\"test\", TestComponent.class, null))\n\t\t\t\t.withMessage(\"'type' must not be null\");\n\t}\n\n\t@Test\n\tvoid addForFeatureUsesDefaultTarget() {\n\t\tGeneratedClass generatedClass = this.generatedClasses.addForFeature(\"Test\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass.getName()).hasToString(\"com.example.Test__Test\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentUsesTarget() {\n\t\tGeneratedClass generatedClass = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"Test\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass.getName().toString()).endsWith(\"TestComponent__Test\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWithSameNameReturnsDifferentInstances() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotSameAs(generatedClass2);\n\t\tassertThat(generatedClass1.getName().simpleName()).endsWith(\"__One\");\n\t\tassertThat(generatedClass2.getName().simpleName()).endsWith(\"__One1\");\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenNewReturnsGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"two\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\n\t\tassertThat(generatedClass2).isNotNull();\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureWhenNewReturnsGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"two\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\n\t\tassertThat(generatedClass2).isNotNull();\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenRepeatReturnsSameGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isSameAs(generatedClass2)\n\t\t\t\t.isSameAs(generatedClass3);\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureWhenRepeatReturnsSameGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isSameAs(generatedClass2)\n\t\t\t\t.isSameAs(generatedClass3);\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenHasFeatureNamePrefix() {\n\t\tGeneratedClasses prefixed = this.generatedClasses.withFeatureNamePrefix(\"prefix\");\n\t\tGeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = prefixed.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass4 = prefixed.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isSameAs(generatedClass2).isNotSameAs(generatedClass3);\n\t\tassertThat(generatedClass3).isSameAs(generatedClass4);\n\t}\n\n\t@Test\n\tvoid writeToInvokeTypeSpecCustomizer() {\n\t\tConsumer<TypeSpec.Builder> typeSpecCustomizer = mock();\n\t\tthis.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, typeSpecCustomizer);\n\t\tverifyNoInteractions(typeSpecCustomizer);\n\t\tInMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n\t\tthis.generatedClasses.writeTo(generatedFiles);\n\t\tverify(typeSpecCustomizer).accept(any());\n\t\tassertThat(generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(1);\n\t}\n\n\t@Test\n\tvoid withNameUpdatesNamingConventions() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses.withFeatureNamePrefix(\"Another\")\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1.getName().toString()).endsWith(\"TestComponent__One\");\n\t\tassertThat(generatedClass2.getName().toString()).endsWith(\"TestComponent__AnotherOne\");\n\t}\n\n\n\tprivate static class TestComponent {\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedClassTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Consumer;\n\nimport javax.lang.model.element.Modifier;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.MethodSpec;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link GeneratedClass}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass GeneratedClassTests {\n\n\tprivate static final ClassName TEST_CLASS_NAME = ClassName.get(\"com.example\", \"Test\");\n\n\tprivate static final Consumer<TypeSpec.Builder> emptyTypeCustomizer = type -> {};\n\n\tprivate static final Consumer<MethodSpec.Builder> emptyMethodCustomizer = method -> {};\n\n\t@Test\n\tvoid getEnclosingNameOnTopLevelClassReturnsNull() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tassertThat(generatedClass.getEnclosingClass()).isNull();\n\t}\n\n\t@Test\n\tvoid getEnclosingNameOnInnerClassReturnsParent() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tGeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Test\", emptyTypeCustomizer);\n\t\tassertThat(innerGeneratedClass.getEnclosingClass()).isEqualTo(generatedClass);\n\t}\n\n\t@Test\n\tvoid getNameReturnsName() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tassertThat(generatedClass.getName()).isSameAs(TEST_CLASS_NAME);\n\t}\n\n\t@Test\n\tvoid reserveMethodNamesWhenNameUsedThrowsException() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tgeneratedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> generatedClass.reserveMethodNames(\"apply\"));\n\t}\n\n\t@Test\n\tvoid reserveMethodNamesReservesNames() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tgeneratedClass.reserveMethodNames(\"apply\");\n\t\tGeneratedMethod generatedMethod = generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\n\t\tassertThat(generatedMethod.getName()).isEqualTo(\"apply1\");\n\t}\n\n\t@Test\n\tvoid generateMethodNameWhenAllEmptyPartsGeneratesSetName() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tGeneratedMethod generatedMethod = generatedClass.getMethods().add(\"123\", emptyMethodCustomizer);\n\t\tassertThat(generatedMethod.getName()).isEqualTo(\"$$aot\");\n\t}\n\n\t@Test\n\tvoid getOrAddWhenRepeatReturnsSameGeneratedClass() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tGeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\n\t\tGeneratedClass innerGeneratedClass2 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\n\t\tGeneratedClass innerGeneratedClass3 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\n\t\tassertThat(innerGeneratedClass).isSameAs(innerGeneratedClass2).isSameAs(innerGeneratedClass3);\n\t}\n\n\t@Test\n\tvoid generateJavaFileIsAnnotatedWithGenerated() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tassertThat(generatedClass.generateJavaFile().toString())\n\t\t\t\t.contains(\"@Generated\")\n\t\t\t\t.contains(\"import \" + Generated.class.getName() + \";\");\n\t}\n\n\t@Test\n\tvoid generateJavaFileIncludesGeneratedMethods() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tgeneratedClass.getMethods().add(\"test\", method -> method.addJavadoc(\"Test Method\"));\n\t\tassertThat(generatedClass.generateJavaFile().toString()).contains(\"Test Method\");\n\t}\n\n\t@Test\n\tvoid generateJavaFileIncludesDeclaredClasses() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\n\t\tgeneratedClass.getOrAdd(\"First\", type -> type.modifiers.add(Modifier.STATIC));\n\t\tgeneratedClass.getOrAdd(\"Second\", type -> type.modifiers.add(Modifier.PRIVATE));\n\t\tassertThat(generatedClass.generateJavaFile().toString())\n\t\t\t\t.contains(\"static class First\").contains(\"private class Second\");\n\t}\n\n\t@Test\n\tvoid generateJavaFileOnInnerClassThrowsException() {\n\t\tGeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME)\n\t\t\t\t.getOrAdd(\"Inner\", emptyTypeCustomizer);\n\t\tassertThatIllegalStateException().isThrownBy(generatedClass::generateJavaFile);\n\t}\n\n\tprivate static GeneratedClass createGeneratedClass(ClassName className) {\n\t\treturn new GeneratedClass(className, emptyTypeCustomizer);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#TEST_CLASS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#TEST_CLASS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#emptyTypeCustomizer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#emptyTypeCustomizer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<TypeSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#emptyMethodCustomizer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#emptyMethodCustomizer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<MethodSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnTopLevelClassReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnclosingNameOnTopLevelClassReturnsNull() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getEnclosingClass()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnTopLevelClassReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnTopLevelClassReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]