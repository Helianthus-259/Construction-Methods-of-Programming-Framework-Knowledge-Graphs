[
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#encode(Publisher<? extends ResourceRegion>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> encode(Publisher<? extends ResourceRegion> input, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Assert.notNull(input, \"'inputStream' must not be null\");\r\n    Assert.notNull(bufferFactory, \"'bufferFactory' must not be null\");\r\n    Assert.notNull(elementType, \"'elementType' must not be null\");\r\n    if (input instanceof Mono) {\r\n        return Mono.from(input).flatMapMany(region -> {\r\n            if (!region.getResource().isReadable()) {\r\n                return Flux.error(new EncodingException(\"Resource \" + region.getResource() + \" is not readable\"));\r\n            }\r\n            return writeResourceRegion(region, bufferFactory, hints);\r\n        });\r\n    } else {\r\n        final String boundaryString = Hints.getRequiredHint(hints, BOUNDARY_STRING_HINT);\r\n        byte[] startBoundary = toAsciiBytes(\"\\r\\n--\" + boundaryString + \"\\r\\n\");\r\n        byte[] contentType = mimeType != null ? toAsciiBytes(\"Content-Type: \" + mimeType + \"\\r\\n\") : new byte[0];\r\n        return Flux.from(input).concatMap(region -> {\r\n            if (!region.getResource().isReadable()) {\r\n                return Flux.error(new EncodingException(\"Resource \" + region.getResource() + \" is not readable\"));\r\n            }\r\n            Flux<DataBuffer> prefix = Flux.just(bufferFactory.wrap(startBoundary), bufferFactory.wrap(contentType), // only wrapping, no allocation\r\n            bufferFactory.wrap(getContentRangeHeader(region)));\r\n            return prefix.concatWith(writeResourceRegion(region, bufferFactory, hints));\r\n        }).concatWithValues(getRegionSuffix(bufferFactory, boundaryString));\r\n    }\r\n    // No doOnDiscard (no caching after DataBufferUtils#read)\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#encode(Publisher<? extends ResourceRegion>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#encode(Publisher<? extends ResourceRegion>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#writeResourceRegion(ResourceRegion,DataBufferFactory,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Flux<DataBuffer> writeResourceRegion(ResourceRegion region, DataBufferFactory bufferFactory, @Nullable Map<String, Object> hints) {\r\n    Resource resource = region.getResource();\r\n    long position = region.getPosition();\r\n    long count = region.getCount();\r\n    if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\r\n        logger.debug(Hints.getLogPrefix(hints) + \"Writing region \" + position + \"-\" + (position + count) + \" of [\" + resource + \"]\");\r\n    }\r\n    Flux<DataBuffer> in = DataBufferUtils.read(resource, position, bufferFactory, this.bufferSize);\r\n    if (logger.isDebugEnabled()) {\r\n        in = in.doOnNext(buffer -> Hints.touchDataBuffer(buffer, hints, logger));\r\n    }\r\n    return DataBufferUtils.takeUntilByteCount(in, count);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#writeResourceRegion(ResourceRegion,DataBufferFactory,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#getRegionSuffix(DataBufferFactory,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private DataBuffer getRegionSuffix(DataBufferFactory bufferFactory, String boundaryString) {\r\n    byte[] endBoundary = toAsciiBytes(\"\\r\\n--\" + boundaryString + \"--\");\r\n    return bufferFactory.wrap(endBoundary);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#getRegionSuffix(DataBufferFactory,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#toAsciiBytes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private byte[] toAsciiBytes(String in) {\r\n    return in.getBytes(StandardCharsets.US_ASCII);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#toAsciiBytes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#getContentRangeHeader(ResourceRegion)",
    "headType": "method",
    "relation": "provide",
    "tail": "private byte[] getContentRangeHeader(ResourceRegion region) {\r\n    long start = region.getPosition();\r\n    long end = start + region.getCount() - 1;\r\n    OptionalLong contentLength = contentLength(region.getResource());\r\n    if (contentLength.isPresent()) {\r\n        long length = contentLength.getAsLong();\r\n        return toAsciiBytes(\"Content-Range: bytes \" + start + '-' + end + '/' + length + \"\\r\\n\\r\\n\");\r\n    } else {\r\n        return toAsciiBytes(\"Content-Range: bytes \" + start + '-' + end + \"\\r\\n\\r\\n\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#getContentRangeHeader(ResourceRegion)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder#contentLength(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine, if possible, the contentLength of the given resource without reading it.\r\n * @param resource the resource instance\r\n * @return the contentLength of the resource\r\n */\r\nprivate OptionalLong contentLength(Resource resource) {\r\n    // Don't try to determine contentLength on InputStreamResource - cannot be read afterwards...\r\n    // Note: custom InputStreamResource subclasses could provide a pre-calculated content length!\r\n    if (InputStreamResource.class != resource.getClass()) {\r\n        try {\r\n            return OptionalLong.of(resource.contentLength());\r\n        } catch (IOException ignored) ;\r\n    }\r\n    return OptionalLong.empty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceRegionEncoder#contentLength(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceRegionEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.StringDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.Charset;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decode from a data buffer stream to a {@code String} stream, either splitting\n * or aggregating incoming data chunks to realign along newlines delimiters\n * and produce a stream of strings. This is useful for streaming but is also\n * necessary to ensure that multi-byte characters can be decoded correctly,\n * avoiding split-character issues. The default delimiters used by default are\n * {@code \\n} and {@code \\r\\n} but that can be customized.\n *\n * @author Sebastien Deleuze\n * @author Brian Clozel\n * @author Arjen Poutsma\n * @author Mark Paluch\n * @since 5.0\n * @see CharSequenceEncoder\n */\npublic final class StringDecoder extends AbstractCharSequenceDecoder<String> {\n\n\tprivate StringDecoder(List<String> delimiters, boolean stripDelimiter, MimeType... mimeTypes) {\n\t\tsuper(delimiters, stripDelimiter, mimeTypes);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (elementType.resolve() == String.class && super.canDecode(elementType, mimeType));\n\t}\n\n\n\t@Override\n\tprotected String decodeInternal(DataBuffer dataBuffer, Charset charset) {\n\t\treturn dataBuffer.toString(charset);\n\t}\n\n\n\t/**\n\t * Create a {@code StringDecoder} for {@code \"text/plain\"}.\n\t */\n\tpublic static StringDecoder textPlainOnly() {\n\t\treturn textPlainOnly(DEFAULT_DELIMITERS, true);\n\t}\n\n\t/**\n\t * Create a {@code StringDecoder} for {@code \"text/plain\"}.\n\t * @param delimiters delimiter strings to use to split the input stream\n\t * @param stripDelimiter whether to remove delimiters from the resulting\n\t * input strings\n\t */\n\tpublic static StringDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter) {\n\t\treturn new StringDecoder(delimiters, stripDelimiter, new MimeType(\"text\", \"plain\", DEFAULT_CHARSET));\n\t}\n\n\t/**\n\t * Create a {@code StringDecoder} that supports all MIME types.\n\t */\n\tpublic static StringDecoder allMimeTypes() {\n\t\treturn allMimeTypes(DEFAULT_DELIMITERS, true);\n\t}\n\n\t/**\n\t * Create a {@code StringDecoder} that supports all MIME types.\n\t * @param delimiters delimiter strings to use to split the input stream\n\t * @param stripDelimiter whether to remove delimiters from the resulting\n\t * input strings\n\t */\n\tpublic static StringDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter) {\n\t\treturn new StringDecoder(delimiters, stripDelimiter,\n\t\t\t\tnew MimeType(\"text\", \"plain\", DEFAULT_CHARSET), MimeTypeUtils.ALL);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (elementType.resolve() == String.class && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  }
]