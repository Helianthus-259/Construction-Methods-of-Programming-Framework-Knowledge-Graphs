[
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.SpringNamingPolicy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\n/**\n * Custom variant of CGLIB's {@link DefaultNamingPolicy}, modifying the tag\n * in generated class names from \"EnhancerByCGLIB\" etc to a \"SpringCGLIB\" tag\n * and using a plain counter suffix instead of a hash code suffix (as of 6.0).\n *\n * <p>This allows for reliably discovering pre-generated Spring proxy classes\n * in the classpath.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 3.2.8 / 6.0\n */\npublic final class SpringNamingPolicy implements NamingPolicy {\n\n\tpublic static final SpringNamingPolicy INSTANCE = new SpringNamingPolicy();\n\n\tprivate static final String SPRING_LABEL = \"$$SpringCGLIB$$\";\n\n\tprivate static final String FAST_CLASS_SUFFIX = \"FastClass$$\";\n\n\n\tprivate SpringNamingPolicy() {\n\t}\n\n\t@Override\n\tpublic String getClassName(String prefix, String source, Object key, Predicate names) {\n\t\tif (prefix == null) {\n\t\t\tprefix = \"org.springframework.cglib.empty.Object\";\n\t\t}\n\t\telse if (prefix.startsWith(\"java.\") || prefix.startsWith(\"javax.\")) {\n\t\t\tprefix = \"_\" + prefix;\n\t\t}\n\n\t\tString base;\n\t\tint existingLabel = prefix.indexOf(SPRING_LABEL);\n\t\tif (existingLabel >= 0) {\n\t\t\tbase = prefix.substring(0, existingLabel + SPRING_LABEL.length());\n\t\t}\n\t\telse {\n\t\t\tbase = prefix + SPRING_LABEL;\n\t\t}\n\n\t\t// When the generated class name is for a FastClass, the source is\n\t\t// \"org.springframework.cglib.reflect.FastClass\".\n\t\tboolean isFastClass = (source != null && source.endsWith(\".FastClass\"));\n\t\tif (isFastClass && !prefix.contains(FAST_CLASS_SUFFIX)) {\n\t\t\tbase += FAST_CLASS_SUFFIX;\n\t\t}\n\n\t\tint index = 0;\n\t\tString attempt = base + index;\n\t\twhile (names.evaluate(attempt)) {\n\t\t\tattempt = base + index++;\n\t\t}\n\t\treturn attempt;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.SpringNamingPolicy#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "SpringNamingPolicy",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.SpringNamingPolicy#SPRING_LABEL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy#SPRING_LABEL",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.SpringNamingPolicy#FAST_CLASS_SUFFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy#FAST_CLASS_SUFFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getClassName(String prefix, String source, Object key, Predicate names) {\r\n    if (prefix == null) {\r\n        prefix = \"org.springframework.cglib.empty.Object\";\r\n    } else if (prefix.startsWith(\"java.\") || prefix.startsWith(\"javax.\")) {\r\n        prefix = \"_\" + prefix;\r\n    }\r\n    String base;\r\n    int existingLabel = prefix.indexOf(SPRING_LABEL);\r\n    if (existingLabel >= 0) {\r\n        base = prefix.substring(0, existingLabel + SPRING_LABEL.length());\r\n    } else {\r\n        base = prefix + SPRING_LABEL;\r\n    }\r\n    // When the generated class name is for a FastClass, the source is\r\n    // \"org.springframework.cglib.reflect.FastClass\".\r\n    boolean isFastClass = (source != null && source.endsWith(\".FastClass\"));\r\n    if (isFastClass && !prefix.contains(FAST_CLASS_SUFFIX)) {\r\n        base += FAST_CLASS_SUFFIX;\r\n    }\r\n    int index = 0;\r\n    String attempt = base + index;\r\n    while (names.evaluate(attempt)) {\r\n        attempt = base + index++;\r\n    }\r\n    return attempt;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicy#getClassName(String,String,Object,Predicate)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.TinyBitSet",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\n@Deprecated\npublic class TinyBitSet {\n    private static final int[] T = new int[256];\n    private int value = 0;\n\n    private static int gcount(int x) {\n        int c = 0;\n        while (x != 0) {\n            c++;\n            x &= (x - 1);\n        }\n        return c;\n    }\n\n    static {\n        for (int j = 0; j < 256; j++) {\n            T[j] = gcount(j);\n        }\n    }\n\n    private static int topbit(int i) {\n        int j;\n        for (j = 0; i != 0; i ^= j) {\n            j = i & -i;\n        }\n        return j;\n    }\n\n    private static int log2(int i) {\n        int j = 0;\n        for (j = 0; i != 0; i >>= 1) {\n            j++;\n        }\n        return j;\n    }\n\n    public int length() {\n        return log2(topbit(value));\n    }\n\n    /**\n     * If bit 31 is set then this method results in an infinite loop.\n     *\n     * @return the number of bits set to <code>true</code> in this TinyBitSet.\n     */\n    public int cardinality() {\n        int w = value;\n        int c = 0;\n        while (w != 0) {\n            c += T[w & 255];\n            w >>= 8;\n        }\n        return c;\n    }\n\n    public boolean get(int index) {\n        return (value & (1 << index)) != 0;\n    }\n\n    public void set(int index) {\n        value |= (1 << index);\n    }\n\n    public void clear(int index) {\n        value &= ~(1 << index);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.TinyBitSet#T",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#T",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.TinyBitSet#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int gcount(int x) {\r\n    int c = 0;\r\n    while (x != 0) {\r\n        c++;\r\n        x &= (x - 1);\r\n    }\r\n    return c;\r\n}",
    "tailType": "method_code"
  }
]