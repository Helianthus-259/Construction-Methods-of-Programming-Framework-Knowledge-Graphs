[
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#isActive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Executes the given task, within a concurrency throttle\r\n * if configured (through the superclass's settings).\r\n * @see #doExecute(Runnable)\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\n@Override\r\npublic void execute(Runnable task) {\r\n    execute(task, TIMEOUT_INDEFINITE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Executes the given task, within a concurrency throttle\r\n * if configured (through the superclass's settings).\r\n * <p>Executes urgent tasks (with 'immediate' timeout) directly,\r\n * bypassing the concurrency throttle (if active). All other\r\n * tasks are subject to throttling.\r\n * @see #TIMEOUT_IMMEDIATE\r\n * @see #doExecute(Runnable)\r\n */\r\n@Deprecated\r\n@Override\r\npublic void execute(Runnable task, long startTimeout) {\r\n    Assert.notNull(task, \"Runnable must not be null\");\r\n    if (!isActive()) {\r\n        throw new TaskRejectedException(getClass().getSimpleName() + \" has been closed already\");\r\n    }\r\n    Runnable taskToUse = (this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\r\n    if (isThrottleActive() && startTimeout > TIMEOUT_IMMEDIATE) {\r\n        this.concurrencyThrottle.beforeAccess();\r\n        doExecute(new TaskTrackingRunnable(taskToUse));\r\n    } else if (this.activeThreads != null) {\r\n        doExecute(new TaskTrackingRunnable(taskToUse));\r\n    } else {\r\n        doExecute(taskToUse);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable,long)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#execute(Runnable,long)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"deprecation\")\r\n@Override\r\npublic Future<?> submit(Runnable task) {\r\n    FutureTask<Object> future = new FutureTask<>(task, null);\r\n    execute(future, TIMEOUT_INDEFINITE);\r\n    return future;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Callable<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"deprecation\")\r\n@Override\r\npublic <T> Future<T> submit(Callable<T> task) {\r\n    FutureTask<T> future = new FutureTask<>(task);\r\n    execute(future, TIMEOUT_INDEFINITE);\r\n    return future;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Callable<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Callable<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#submit(Callable<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#doExecute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Template method for the actual execution of a task.\r\n * <p>The default implementation creates a new Thread and starts it.\r\n * @param task the Runnable to execute\r\n * @see #newThread\r\n * @see Thread#start()\r\n */\r\nprotected void doExecute(Runnable task) {\r\n    newThread(task).start();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#doExecute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#newThread(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new Thread for the given task.\r\n * @param task the Runnable to create a Thread for\r\n * @return the new Thread instance\r\n * @since 6.1\r\n * @see #setVirtualThreads\r\n * @see #setThreadFactory\r\n * @see #createThread\r\n */\r\nprotected Thread newThread(Runnable task) {\r\n    if (this.virtualThreadDelegate != null) {\r\n        return this.virtualThreadDelegate.newVirtualThread(nextThreadName(), task);\r\n    } else {\r\n        return (this.threadFactory != null ? this.threadFactory.newThread(task) : createThread(task));\r\n    }\r\n}",
    "tailType": "method_code"
  }
]