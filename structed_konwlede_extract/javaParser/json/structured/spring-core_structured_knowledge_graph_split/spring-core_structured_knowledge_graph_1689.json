[
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getRepeatableAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComposedRepeatableAnnotationsOnClass() {\r\n    assertGetRepeatableAnnotations(ComposedRepeatableClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsMixedWithContainerOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComposedRepeatableAnnotationsMixedWithContainerOnClass() {\r\n    assertGetRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsMixedWithContainerOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedRepeatableAnnotationsMixedWithContainerOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedContainerForRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComposedContainerForRepeatableAnnotationsOnClass() {\r\n    assertGetRepeatableAnnotations(ComposedContainerClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedContainerForRepeatableAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getComposedContainerForRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNoninheritedComposedRepeatableAnnotationsOnClass() {\r\n    Class<?> element = NoninheritedRepeatableClass.class;\r\n    Set<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\r\n    assertNoninheritedRepeatableAnnotations(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\r\n    Class<?> element = SubNoninheritedRepeatableClass.class;\r\n    Set<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\r\n    assertThat(annotations).isNotNull();\r\n    assertThat(annotations).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#getNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNonRepeatableAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findNonRepeatableAnnotation() {\r\n    expectNonRepeatableAnnotation(() -> findMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNonRepeatableAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNonRepeatableAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findInvalidRepeatableAnnotationContainerMissingValueAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findInvalidRepeatableAnnotationContainerMissingValueAttribute() {\r\n    expectContainerMissingValueAttribute(() -> findMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\r\n}",
    "tailType": "method_code"
  }
]