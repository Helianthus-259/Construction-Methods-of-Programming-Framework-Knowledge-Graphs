[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnLangType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid getAllAnnotationAttributesOnLangType() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(org.springframework.lang.NonNullApi.class, Nonnull.class.getName());\r\n    assertThat(attributes).as(\"Annotation attributes map for @Nonnull on NonNullApi\").isNotNull();\r\n    assertThat(attributes.get(\"when\")).as(\"value for NonNullApi\").isEqualTo(List.of(When.ALWAYS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnLangType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnLangType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnLangType()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesOnJavaxType() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(ParametersAreNonnullByDefault.class, Nonnull.class.getName());\r\n    assertThat(attributes).as(\"Annotation attributes map for @Nonnull on NonNullApi\").isNotNull();\r\n    assertThat(attributes.get(\"when\")).as(\"value for NonNullApi\").isEqualTo(List.of(When.ALWAYS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnJavaxType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesOnClassWithLocalAnnotation() {\r\n    Class<?> element = TxConfig.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Annotation attributes for @Transactional on TxConfig\").isNotNull();\r\n    assertThat(attributes.getString(\"value\")).as(\"value for TxConfig\").isEqualTo(\"TxConfig\");\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass() {\r\n    Class<?> element = DerivedTxConfig.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"Annotation attributes for @Transactional on DerivedTxConfig\").isNotNull();\r\n    assertThat(attributes.getString(\"value\")).as(\"value for DerivedTxConfig\").isEqualTo(\"DerivedTxConfig\");\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(MetaCycleAnnotatedClass.class, TX_NAME);\r\n    assertThat(attributes).as(\"Should not find annotation attributes for @Transactional on MetaCycleAnnotatedClass\").isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation() {\r\n    Class<?> element = SubClassWithInheritedAnnotation.class;\r\n    String name = TX_NAME;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    assertThat(attributes).as(\"AnnotationAttributes for @Transactional on SubClassWithInheritedAnnotation\").isNotNull();\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n    assertThat(attributes.getBoolean(\"readOnly\")).as(\"readOnly flag for SubClassWithInheritedAnnotation.\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesFavorsLocalComposedAnnotationOverInheritedAnnotation()",
    "tailType": "method"
  }
]