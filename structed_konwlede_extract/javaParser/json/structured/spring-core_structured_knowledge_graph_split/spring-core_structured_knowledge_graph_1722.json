[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromSubSubNonInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubNonInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromInterfaceMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyInheritedFromInterfaceMethod() throws Exception {\r\n    Method method = ConcreteClassWithInheritedAnnotation.class.getMethod(\"handleFromInterface\");\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromInterfaceMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromInterfaceMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWithTypeHierarchyInheritedFromSuperInterfaceMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-31803\r\n@Test\r\nvoid streamWithTypeHierarchyInheritedFromSuperInterfaceMethod() throws Exception {\r\n    Method method = Hello2Impl.class.getMethod(\"method\");\r\n    long count = MergedAnnotations.search(SearchStrategy.TYPE_HIERARCHY).from(method).stream(TestAnnotation1.class).count();\r\n    assertThat(count).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamWithTypeHierarchyInheritedFromSuperInterfaceMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWithTypeHierarchyInheritedFromSuperInterfaceMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromAbstractMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyInheritedFromAbstractMethod() throws NoSuchMethodException {\r\n    Method method = ConcreteClassWithInheritedAnnotation.class.getMethod(\"handle\");\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromAbstractMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromAbstractMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromBridgedMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyInheritedFromBridgedMethod() throws NoSuchMethodException {\r\n    Method method = ConcreteClassWithInheritedAnnotation.class.getMethod(\"handleParameterized\", String.class);\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromBridgedMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyInheritedFromBridgedMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromBridgeMethod() {\r\n    List<Method> methods = new ArrayList<>();\r\n    ReflectionUtils.doWithLocalMethods(StringGenericParameter.class, method -> {\r\n        if (\"getFor\".equals(method.getName())) {\r\n            methods.add(method);\r\n        }\r\n    });\r\n    Method bridgeMethod = methods.get(0).getReturnType().equals(Object.class) ? methods.get(0) : methods.get(1);\r\n    Method bridgedMethod = methods.get(0).getReturnType().equals(Object.class) ? methods.get(1) : methods.get(0);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(bridgeMethod, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromBridgeMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromBridgeMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaAndLocalTxConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromClassWithMetaAndLocalTxConfig() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(MetaAndLocalTxConfigClass.class, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.getString(\"qualifier\")).isEqualTo(\"localTxMgr\");\r\n}",
    "tailType": "method_code"
  }
]