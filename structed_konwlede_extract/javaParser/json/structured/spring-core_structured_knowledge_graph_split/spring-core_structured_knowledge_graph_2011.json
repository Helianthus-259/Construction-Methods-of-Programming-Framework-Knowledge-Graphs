[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCount(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountCancelled(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid skipUntilByteCountCancelled(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    Flux<DataBuffer> source = Flux.concat(deferStringBuffer(\"foo\"), deferStringBuffer(\"bar\"));\r\n    Flux<DataBuffer> result = DataBufferUtils.skipUntilByteCount(source, 5L);\r\n    StepVerifier.create(result).consumeNextWith(stringConsumer(\"r\")).thenCancel().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountCancelled(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountCancelled(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountErrorInFlux(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid skipUntilByteCountErrorInFlux(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    Flux<DataBuffer> flux = Flux.just(foo).concatWith(Mono.error(new RuntimeException()));\r\n    Flux<DataBuffer> result = DataBufferUtils.skipUntilByteCount(flux, 3L);\r\n    StepVerifier.create(result).expectError(RuntimeException.class).verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountErrorInFlux(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountErrorInFlux(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountShouldSkipAll(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid skipUntilByteCountShouldSkipAll(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    DataBuffer baz = stringBuffer(\"baz\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar, baz);\r\n    Flux<DataBuffer> result = DataBufferUtils.skipUntilByteCount(flux, 9L);\r\n    StepVerifier.create(result).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountShouldSkipAll(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#skipUntilByteCountShouldSkipAll(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#releaseConsumer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid releaseConsumer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    DataBuffer baz = stringBuffer(\"baz\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar, baz);\r\n    flux.subscribe(DataBufferUtils.releaseConsumer());\r\n    assertReleased(foo);\r\n    assertReleased(bar);\r\n    assertReleased(baz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#releaseConsumer(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#releaseConsumer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#assertReleased(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertReleased(DataBuffer dataBuffer) {\r\n    if (dataBuffer instanceof NettyDataBuffer nettyDataBuffer) {\r\n        ByteBuf byteBuf = nettyDataBuffer.getNativeBuffer();\r\n        assertThat(byteBuf.refCnt()).isEqualTo(0);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#assertReleased(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#SPR16070(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid SPR16070(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    ReadableByteChannel channel = mock();\r\n    given(channel.read(any())).willAnswer(putByte('a')).willAnswer(putByte('b')).willAnswer(putByte('c')).willReturn(-1);\r\n    Flux<DataBuffer> read = DataBufferUtils.readByteChannel(() -> channel, super.bufferFactory, 1);\r\n    StepVerifier.create(read).consumeNextWith(stringConsumer(\"a\")).consumeNextWith(stringConsumer(\"b\")).consumeNextWith(stringConsumer(\"c\")).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#SPR16070(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#SPR16070(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#putByte(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Answer<Integer> putByte(int b) {\r\n    return invocation -> {\r\n        ByteBuffer buffer = invocation.getArgument(0);\r\n        buffer.put((byte) b);\r\n        return 1;\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#putByte(int)",
    "tailType": "method"
  }
]