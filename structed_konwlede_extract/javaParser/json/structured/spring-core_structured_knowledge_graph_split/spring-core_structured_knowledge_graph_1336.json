[
  {
    "head": "org.springframework.util.MimeType#checkToken(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Checks the given token string for illegal characters, as defined in RFC 2616,\r\n * section 2.2.\r\n * @throws IllegalArgumentException in case of illegal characters\r\n * @see <a href=\"https://tools.ietf.org/html/rfc2616#section-2.2\">HTTP 1.1, section 2.2</a>\r\n */\r\nprivate void checkToken(String token) {\r\n    for (int i = 0; i < token.length(); i++) {\r\n        char ch = token.charAt(i);\r\n        if (!TOKEN.get(ch)) {\r\n            throw new IllegalArgumentException(\"Invalid token character '\" + ch + \"' in token \\\"\" + token + \"\\\"\");\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#checkToken(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#checkParameters(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void checkParameters(String parameter, String value) {\r\n    Assert.hasLength(parameter, \"'parameter' must not be empty\");\r\n    Assert.hasLength(value, \"'value' must not be empty\");\r\n    checkToken(parameter);\r\n    if (PARAM_CHARSET.equals(parameter)) {\r\n        if (this.resolvedCharset == null) {\r\n            this.resolvedCharset = Charset.forName(unquote(value));\r\n        }\r\n    } else if (!isQuotedString(value)) {\r\n        checkToken(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#checkParameters(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isQuotedString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isQuotedString(String s) {\r\n    if (s.length() < 2) {\r\n        return false;\r\n    }\r\n    return ((s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) || (s.startsWith(\"'\") && s.endsWith(\"'\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isQuotedString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#unquote(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected String unquote(String s) {\r\n    return (isQuotedString(s) ? s.substring(1, s.length() - 1) : s);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#unquote(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isWildcardType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether the {@linkplain #getType() type} is the wildcard character\r\n * <code>&#42;</code> or not.\r\n */\r\npublic boolean isWildcardType() {\r\n    return WILDCARD_TYPE.equals(getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isWildcardType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isWildcardSubtype()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard\r\n * character <code>&#42;</code> or the wildcard character followed by a suffix\r\n * (for example, <code>&#42;+xml</code>).\r\n * @return whether the subtype is a wildcard\r\n */\r\npublic boolean isWildcardSubtype() {\r\n    String subtype = getSubtype();\r\n    return (WILDCARD_TYPE.equals(subtype) || subtype.startsWith(\"*+\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isWildcardSubtype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isConcrete()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether this MIME Type is concrete, i.e. whether neither the type\r\n * nor the subtype is a wildcard character <code>&#42;</code>.\r\n * @return whether this MIME Type is concrete\r\n */\r\npublic boolean isConcrete() {\r\n    return !isWildcardType() && !isWildcardSubtype();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isConcrete()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the primary type.\r\n */\r\npublic String getType() {\r\n    return this.type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#getSubtype()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the subtype.\r\n */\r\npublic String getSubtype() {\r\n    return this.subtype;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getSubtype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#getSubtypeSuffix()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the subtype suffix as defined in RFC 6839.\r\n * @since 5.3\r\n */\r\n@Nullable\r\npublic String getSubtypeSuffix() {\r\n    int suffixIndex = this.subtype.lastIndexOf('+');\r\n    if (suffixIndex != -1 && this.subtype.length() > suffixIndex) {\r\n        return this.subtype.substring(suffixIndex + 1);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getSubtypeSuffix()",
    "tailType": "method"
  }
]