[
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getAttributeValue(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getAttributeValue(int index) {\r\n    return getAttribute(index).getValue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getAttributeValue(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getAttributeValue(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getAttribute(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"rawtypes\")\r\nprivate Attribute getAttribute(int index) {\r\n    if (!this.event.isStartElement()) {\r\n        throw new IllegalStateException();\r\n    }\r\n    int count = 0;\r\n    Iterator attributes = this.event.asStartElement().getAttributes();\r\n    while (attributes.hasNext()) {\r\n        Attribute attribute = (Attribute) attributes.next();\r\n        if (count == index) {\r\n            return attribute;\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getAttribute(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getAttribute(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NamespaceContext getNamespaceContext() {\r\n    if (this.event.isStartElement()) {\r\n        return this.event.asStartElement().getNamespaceContext();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"rawtypes\")\r\npublic int getNamespaceCount() {\r\n    Iterator namespaces;\r\n    if (this.event.isStartElement()) {\r\n        namespaces = this.event.asStartElement().getNamespaces();\r\n    } else if (this.event.isEndElement()) {\r\n        namespaces = this.event.asEndElement().getNamespaces();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n    return countIterator(namespaces);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespacePrefix(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getNamespacePrefix(int index) {\r\n    return getNamespace(index).getPrefix();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getNamespacePrefix(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespacePrefix(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceURI(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getNamespaceURI(int index) {\r\n    return getNamespace(index).getNamespaceURI();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceURI(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespaceURI(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespace(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"rawtypes\")\r\nprivate Namespace getNamespace(int index) {\r\n    Iterator namespaces;\r\n    if (this.event.isStartElement()) {\r\n        namespaces = this.event.asStartElement().getNamespaces();\r\n    } else if (this.event.isEndElement()) {\r\n        namespaces = this.event.asEndElement().getNamespaces();\r\n    } else {\r\n        throw new IllegalStateException();\r\n    }\r\n    int count = 0;\r\n    while (namespaces.hasNext()) {\r\n        Namespace namespace = (Namespace) namespaces.next();\r\n        if (count == index) {\r\n            return namespace;\r\n        } else {\r\n            count++;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException();\r\n}",
    "tailType": "method_code"
  }
]