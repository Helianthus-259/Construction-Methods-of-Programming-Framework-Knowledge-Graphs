[
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@NullMarked",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@NullMarked\r\n@NonNull\r\nString nonNullMarkedProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@NullMarked",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullMarkedProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@NonNull",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#voidProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "void voidProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#voidProcess()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness.marked",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.TypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\n\npackage org.springframework.asm;\n\n/**\n * A reference to a type appearing in a class, field or method declaration, or on an instruction.\n * Such a reference designates the part of the class where the referenced type is appearing (for example, an\n * 'extends', 'implements' or 'throws' clause, a 'new' instruction, a 'catch' clause, a type cast, a\n * local variable declaration, etc).\n *\n * @author Eric Bruneton\n */\npublic class TypeReference {\n\n  /**\n   * The sort of type references that target a type parameter of a generic class. See {@link\n   * #getSort}.\n   */\n  public static final int CLASS_TYPE_PARAMETER = 0x00;\n\n  /**\n   * The sort of type references that target a type parameter of a generic method. See {@link\n   * #getSort}.\n   */\n  public static final int METHOD_TYPE_PARAMETER = 0x01;\n\n  /**\n   * The sort of type references that target the super class of a class or one of the interfaces it\n   * implements. See {@link #getSort}.\n   */\n  public static final int CLASS_EXTENDS = 0x10;\n\n  /**\n   * The sort of type references that target a bound of a type parameter of a generic class. See\n   * {@link #getSort}.\n   */\n  public static final int CLASS_TYPE_PARAMETER_BOUND = 0x11;\n\n  /**\n   * The sort of type references that target a bound of a type parameter of a generic method. See\n   * {@link #getSort}.\n   */\n  public static final int METHOD_TYPE_PARAMETER_BOUND = 0x12;\n\n  /** The sort of type references that target the type of a field. See {@link #getSort}. */\n  public static final int FIELD = 0x13;\n\n  /** The sort of type references that target the return type of a method. See {@link #getSort}. */\n  public static final int METHOD_RETURN = 0x14;\n\n  /**\n   * The sort of type references that target the receiver type of a method. See {@link #getSort}.\n   */\n  public static final int METHOD_RECEIVER = 0x15;\n\n  /**\n   * The sort of type references that target the type of a formal parameter of a method. See {@link\n   * #getSort}.\n   */\n  public static final int METHOD_FORMAL_PARAMETER = 0x16;\n\n  /**\n   * The sort of type references that target the type of an exception declared in the throws clause\n   * of a method. See {@link #getSort}.\n   */\n  public static final int THROWS = 0x17;\n\n  /**\n   * The sort of type references that target the type of a local variable in a method. See {@link\n   * #getSort}.\n   */\n  public static final int LOCAL_VARIABLE = 0x40;\n\n  /**\n   * The sort of type references that target the type of a resource variable in a method. See {@link\n   * #getSort}.\n   */\n  public static final int RESOURCE_VARIABLE = 0x41;\n\n  /**\n   * The sort of type references that target the type of the exception of a 'catch' clause in a\n   * method. See {@link #getSort}.\n   */\n  public static final int EXCEPTION_PARAMETER = 0x42;\n\n  /**\n   * The sort of type references that target the type declared in an 'instanceof' instruction. See\n   * {@link #getSort}.\n   */\n  public static final int INSTANCEOF = 0x43;\n\n  /**\n   * The sort of type references that target the type of the object created by a 'new' instruction.\n   * See {@link #getSort}.\n   */\n  public static final int NEW = 0x44;\n\n  /**\n   * The sort of type references that target the receiver type of a constructor reference. See\n   * {@link #getSort}.\n   */\n  public static final int CONSTRUCTOR_REFERENCE = 0x45;\n\n  /**\n   * The sort of type references that target the receiver type of a method reference. See {@link\n   * #getSort}.\n   */\n  public static final int METHOD_REFERENCE = 0x46;\n\n  /**\n   * The sort of type references that target the type declared in an explicit or implicit cast\n   * instruction. See {@link #getSort}.\n   */\n  public static final int CAST = 0x47;\n\n  /**\n   * The sort of type references that target a type parameter of a generic constructor in a\n   * constructor call. See {@link #getSort}.\n   */\n  public static final int CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;\n\n  /**\n   * The sort of type references that target a type parameter of a generic method in a method call.\n   * See {@link #getSort}.\n   */\n  public static final int METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;\n\n  /**\n   * The sort of type references that target a type parameter of a generic constructor in a\n   * constructor reference. See {@link #getSort}.\n   */\n  public static final int CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;\n\n  /**\n   * The sort of type references that target a type parameter of a generic method in a method\n   * reference. See {@link #getSort}.\n   */\n  public static final int METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;\n\n  /**\n   * The target_type and target_info structures - as defined in the Java Virtual Machine\n   * Specification (JVMS) - corresponding to this type reference. target_type uses one byte, and all\n   * the target_info union fields use up to 3 bytes (except localvar_target, handled with the\n   * specific method {@link MethodVisitor#visitLocalVariableAnnotation}). Thus, both structures can\n   * be stored in an int.\n   *\n   * <p>This int field stores target_type (called the TypeReference 'sort' in the public API of this\n   * class) in its most significant byte, followed by the target_info fields. Depending on\n   * target_type, 1, 2 or even 3 least significant bytes of this field are unused. target_info\n   * fields which reference bytecode offsets are set to 0 (these offsets are ignored in ClassReader,\n   * and recomputed in MethodWriter).\n   *\n   * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20\">JVMS\n   *     4.7.20</a>\n   * @see <a\n   *     href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20.1\">JVMS\n   *     4.7.20.1</a>\n   */\n  private final int targetTypeAndInfo;\n\n  /**\n   * Constructs a new TypeReference.\n   *\n   * @param typeRef the int encoded value of the type reference, as received in a visit method\n   *     related to type annotations, such as {@link ClassVisitor#visitTypeAnnotation}.\n   */\n  public TypeReference(final int typeRef) {\n    this.targetTypeAndInfo = typeRef;\n  }\n\n  /**\n   * Returns a type reference of the given sort.\n   *\n   * @param sort one of {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link\n   *     #LOCAL_VARIABLE}, {@link #RESOURCE_VARIABLE}, {@link #INSTANCEOF}, {@link #NEW}, {@link\n   *     #CONSTRUCTOR_REFERENCE}, or {@link #METHOD_REFERENCE}.\n   * @return a type reference of the given sort.\n   */\n  public static TypeReference newTypeReference(final int sort) {\n    return new TypeReference(sort << 24);\n  }\n\n  /**\n   * Returns a reference to a type parameter of a generic class or method.\n   *\n   * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.\n   * @param paramIndex the type parameter index.\n   * @return a reference to the given generic class or method type parameter.\n   */\n  public static TypeReference newTypeParameterReference(final int sort, final int paramIndex) {\n    return new TypeReference((sort << 24) | (paramIndex << 16));\n  }\n\n  /**\n   * Returns a reference to a type parameter bound of a generic class or method.\n   *\n   * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.\n   * @param paramIndex the type parameter index.\n   * @param boundIndex the type bound index within the above type parameters.\n   * @return a reference to the given generic class or method type parameter bound.\n   */\n  public static TypeReference newTypeParameterBoundReference(\n      final int sort, final int paramIndex, final int boundIndex) {\n    return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));\n  }\n\n  /**\n   * Returns a reference to the super class or to an interface of the 'implements' clause of a\n   * class.\n   *\n   * @param itfIndex the index of an interface in the 'implements' clause of a class, or -1 to\n   *     reference the super class of the class.\n   * @return a reference to the given super type of a class.\n   */\n  public static TypeReference newSuperTypeReference(final int itfIndex) {\n    return new TypeReference((CLASS_EXTENDS << 24) | ((itfIndex & 0xFFFF) << 8));\n  }\n\n  /**\n   * Returns a reference to the type of a formal parameter of a method.\n   *\n   * @param paramIndex the formal parameter index.\n   * @return a reference to the type of the given method formal parameter.\n   */\n  public static TypeReference newFormalParameterReference(final int paramIndex) {\n    return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));\n  }\n\n  /**\n   * Returns a reference to the type of an exception, in a 'throws' clause of a method.\n   *\n   * @param exceptionIndex the index of an exception in a 'throws' clause of a method.\n   * @return a reference to the type of the given exception.\n   */\n  public static TypeReference newExceptionReference(final int exceptionIndex) {\n    return new TypeReference((THROWS << 24) | (exceptionIndex << 8));\n  }\n\n  /**\n   * Returns a reference to the type of the exception declared in a 'catch' clause of a method.\n   *\n   * @param tryCatchBlockIndex the index of a try catch block (using the order in which they are\n   *     visited with visitTryCatchBlock).\n   * @return a reference to the type of the given exception.\n   */\n  public static TypeReference newTryCatchReference(final int tryCatchBlockIndex) {\n    return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));\n  }\n\n  /**\n   * Returns a reference to the type of a type argument in a constructor or method call or\n   * reference.\n   *\n   * @param sort one of {@link #CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link\n   *     #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link\n   *     #METHOD_REFERENCE_TYPE_ARGUMENT}.\n   * @param argIndex the type argument index.\n   * @return a reference to the type of the given type argument.\n   */\n  public static TypeReference newTypeArgumentReference(final int sort, final int argIndex) {\n    return new TypeReference((sort << 24) | argIndex);\n  }\n\n  /**\n   * Returns the sort of this type reference.\n   *\n   * @return one of {@link #CLASS_TYPE_PARAMETER}, {@link #METHOD_TYPE_PARAMETER}, {@link\n   *     #CLASS_EXTENDS}, {@link #CLASS_TYPE_PARAMETER_BOUND}, {@link #METHOD_TYPE_PARAMETER_BOUND},\n   *     {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link\n   *     #METHOD_FORMAL_PARAMETER}, {@link #THROWS}, {@link #LOCAL_VARIABLE}, {@link\n   *     #RESOURCE_VARIABLE}, {@link #EXCEPTION_PARAMETER}, {@link #INSTANCEOF}, {@link #NEW},\n   *     {@link #CONSTRUCTOR_REFERENCE}, {@link #METHOD_REFERENCE}, {@link #CAST}, {@link\n   *     #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\n   *     #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.\n   */\n  public int getSort() {\n    return targetTypeAndInfo >>> 24;\n  }\n\n  /**\n   * Returns the index of the type parameter referenced by this type reference. This method must\n   * only be used for type references whose sort is {@link #CLASS_TYPE_PARAMETER}, {@link\n   * #METHOD_TYPE_PARAMETER}, {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link\n   * #METHOD_TYPE_PARAMETER_BOUND}.\n   *\n   * @return a type parameter index.\n   */\n  public int getTypeParameterIndex() {\n    return (targetTypeAndInfo & 0x00FF0000) >> 16;\n  }\n\n  /**\n   * Returns the index of the type parameter bound, within the type parameter {@link\n   * #getTypeParameterIndex}, referenced by this type reference. This method must only be used for\n   * type references whose sort is {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link\n   * #METHOD_TYPE_PARAMETER_BOUND}.\n   *\n   * @return a type parameter bound index.\n   */\n  public int getTypeParameterBoundIndex() {\n    return (targetTypeAndInfo & 0x0000FF00) >> 8;\n  }\n\n  /**\n   * Returns the index of the \"super type\" of a class that is referenced by this type reference.\n   * This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.\n   *\n   * @return the index of an interface in the 'implements' clause of a class, or -1 if this type\n   *     reference references the type of the super class.\n   */\n  public int getSuperTypeIndex() {\n    return (short) ((targetTypeAndInfo & 0x00FFFF00) >> 8);\n  }\n\n  /**\n   * Returns the index of the formal parameter whose type is referenced by this type reference. This\n   * method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.\n   *\n   * @return a formal parameter index.\n   */\n  public int getFormalParameterIndex() {\n    return (targetTypeAndInfo & 0x00FF0000) >> 16;\n  }\n\n  /**\n   * Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced\n   * by this type reference. This method must only be used for type references whose sort is {@link\n   * #THROWS}.\n   *\n   * @return the index of an exception in the 'throws' clause of a method.\n   */\n  public int getExceptionIndex() {\n    return (targetTypeAndInfo & 0x00FFFF00) >> 8;\n  }\n\n  /**\n   * Returns the index of the try catch block (using the order in which they are visited with\n   * visitTryCatchBlock), whose 'catch' type is referenced by this type reference. This method must\n   * only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .\n   *\n   * @return the index of an exception in the 'throws' clause of a method.\n   */\n  public int getTryCatchBlockIndex() {\n    return (targetTypeAndInfo & 0x00FFFF00) >> 8;\n  }\n\n  /**\n   * Returns the index of the type argument referenced by this type reference. This method must only\n   * be used for type references whose sort is {@link #CAST}, {@link\n   * #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\n   * #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.\n   *\n   * @return a type parameter index.\n   */\n  public int getTypeArgumentIndex() {\n    return targetTypeAndInfo & 0xFF;\n  }\n\n  /**\n   * Returns the int encoded value of this type reference, suitable for use in visit methods related\n   * to type annotations, like visitTypeAnnotation.\n   *\n   * @return the int encoded value of this type reference.\n   */\n  public int getValue() {\n    return targetTypeAndInfo;\n  }\n\n  /**\n   * Puts the given target_type and target_info JVMS structures into the given ByteVector.\n   *\n   * @param targetTypeAndInfo a target_type and a target_info structures encoded as in {@link\n   *     #targetTypeAndInfo}. LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.\n   * @param output where the type reference must be put.\n   */\n  static void putTarget(final int targetTypeAndInfo, final ByteVector output) {\n    switch (targetTypeAndInfo >>> 24) {\n      case CLASS_TYPE_PARAMETER:\n      case METHOD_TYPE_PARAMETER:\n      case METHOD_FORMAL_PARAMETER:\n        output.putShort(targetTypeAndInfo >>> 16);\n        break;\n      case FIELD:\n      case METHOD_RETURN:\n      case METHOD_RECEIVER:\n        output.putByte(targetTypeAndInfo >>> 24);\n        break;\n      case CAST:\n      case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:\n      case METHOD_INVOCATION_TYPE_ARGUMENT:\n      case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:\n      case METHOD_REFERENCE_TYPE_ARGUMENT:\n        output.putInt(targetTypeAndInfo);\n        break;\n      case CLASS_EXTENDS:\n      case CLASS_TYPE_PARAMETER_BOUND:\n      case METHOD_TYPE_PARAMETER_BOUND:\n      case THROWS:\n      case EXCEPTION_PARAMETER:\n      case INSTANCEOF:\n      case NEW:\n      case CONSTRUCTOR_REFERENCE:\n      case METHOD_REFERENCE:\n        output.put12(targetTypeAndInfo >>> 24, (targetTypeAndInfo & 0xFFFF00) >> 8);\n        break;\n      default:\n        throw new IllegalArgumentException();\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CLASS_TYPE_PARAMETER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CLASS_TYPE_PARAMETER",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#METHOD_TYPE_PARAMETER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#METHOD_TYPE_PARAMETER",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CLASS_EXTENDS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CLASS_EXTENDS",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CLASS_TYPE_PARAMETER_BOUND",
    "tailType": "field"
  }
]