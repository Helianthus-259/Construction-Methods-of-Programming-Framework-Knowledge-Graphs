[
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodParameterWithImplementsClass() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedParameter\", Object.class);\r\n    ResolvableType type = ResolvableType.forMethodParameter(method, 0, TypedMethods.class);\r\n    assertThat(type.resolve()).isEqualTo(String.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodParameterType() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedParameter\", Object.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(type.resolve()).isNull();\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid resolveTypeVariableFromMethodParameterTypeWithImplementsClass() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedParameter\", Object.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    methodParameter.setContainingClass(TypedMethods.class);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(type.resolve()).isEqualTo(String.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodParameterTypeWithImplementsType() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedParameter\", Object.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    ResolvableType implementationType = ResolvableType.forClassWithGenerics(Methods.class, Integer.class);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter, implementationType);\r\n    assertThat(type.resolve()).isEqualTo(Integer.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameterTypeWithImplementsType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturn()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodReturn() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedReturn\");\r\n    ResolvableType type = ResolvableType.forMethodReturnType(method);\r\n    assertThat(type.resolve()).isNull();\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturn()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturn()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturnWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodReturnWithImplementsClass() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedReturn\");\r\n    ResolvableType type = ResolvableType.forMethodReturnType(method, TypedMethods.class);\r\n    assertThat(type.resolve()).isEqualTo(String.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturnWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodReturnWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromType() throws Exception {\r\n    Type sourceType = Methods.class.getMethod(\"typedReturn\").getGenericReturnType();\r\n    ResolvableType type = ResolvableType.forType(sourceType);\r\n    assertThat(type.resolve()).isNull();\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  }
]