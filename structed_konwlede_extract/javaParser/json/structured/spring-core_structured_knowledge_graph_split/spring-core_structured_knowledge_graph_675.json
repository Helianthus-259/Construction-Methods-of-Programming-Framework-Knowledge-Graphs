[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.reflect",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.reflect",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.reflect.FastConstructor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class FastConstructor extends FastMember\n{\n    FastConstructor(FastClass fc, Constructor constructor) {\n        super(fc, constructor, fc.getIndex(constructor.getParameterTypes()));\n    }\n\n    @Override\n\tpublic Class[] getParameterTypes() {\n        return ((Constructor)member).getParameterTypes();\n    }\n\n    @Override\n\tpublic Class[] getExceptionTypes() {\n        return ((Constructor)member).getExceptionTypes();\n    }\n\n    public Object newInstance() throws InvocationTargetException {\n        return fc.newInstance(index, null);\n    }\n\n    public Object newInstance(Object[] args) throws InvocationTargetException {\n        return fc.newInstance(index, args);\n    }\n\n    public Constructor getJavaConstructor() {\n        return (Constructor)member;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#getParameterTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class[] getParameterTypes() {\r\n    return ((Constructor) member).getParameterTypes();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastConstructor#getParameterTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#getParameterTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#getExceptionTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class[] getExceptionTypes() {\r\n    return ((Constructor) member).getExceptionTypes();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastConstructor#getExceptionTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#getExceptionTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#newInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object newInstance() throws InvocationTargetException {\r\n    return fc.newInstance(index, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastConstructor#newInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#newInstance(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object newInstance(Object[] args) throws InvocationTargetException {\r\n    return fc.newInstance(index, args);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastConstructor#newInstance(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor#getJavaConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Constructor getJavaConstructor() {\r\n    return (Constructor) member;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastConstructor#getJavaConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastConstructor",
    "headType": "class",
    "relation": "extend",
    "tail": "FastMember",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.reflect",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.reflect",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.reflect.FastMember",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]