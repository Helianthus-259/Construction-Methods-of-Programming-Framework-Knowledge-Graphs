[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#isDirectlyPresentWhenNotPresentReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isDirectlyPresentWhenNotPresentReturnsFalse() {\r\n    MergedAnnotations annotations = getDirectAndSimple();\r\n    assertThat(annotations.isDirectlyPresent(Missing.class)).isFalse();\r\n    assertThat(annotations.isDirectlyPresent(Missing.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#isDirectlyPresentWhenNotPresentReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#isDirectlyPresentWhenNotPresentReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getReturnsAppropriateAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getReturnsAppropriateAnnotation() {\r\n    MergedAnnotations annotations = getMultiRoute1();\r\n    assertThat(annotations.get(MultiRouteTarget.class).getString(MergedAnnotation.VALUE)).isEqualTo(\"12\");\r\n    assertThat(annotations.get(MultiRouteTarget.class.getName()).getString(MergedAnnotation.VALUE)).isEqualTo(\"12\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getReturnsAppropriateAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getReturnsAppropriateAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWhenNotPresentReturnsMissing()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWhenNotPresentReturnsMissing() {\r\n    MergedAnnotations annotations = getDirectAndSimple();\r\n    assertThat(annotations.get(Missing.class)).isEqualTo(MergedAnnotation.missing());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWhenNotPresentReturnsMissing()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWhenNotPresentReturnsMissing()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithPredicateReturnsOnlyMatching()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithPredicateReturnsOnlyMatching() {\r\n    MergedAnnotations annotations = getMultiRoute1();\r\n    assertThat(annotations.get(MultiRouteTarget.class, annotation -> annotation.getDistance() >= 3).getString(MergedAnnotation.VALUE)).isEqualTo(\"111\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithPredicateReturnsOnlyMatching()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithPredicateReturnsOnlyMatching()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithSelectorReturnsSelected()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithSelectorReturnsSelected() {\r\n    MergedAnnotations annotations = getMultiRoute1();\r\n    MergedAnnotationSelector<MultiRouteTarget> deepest = (existing, candidate) -> candidate.getDistance() > existing.getDistance() ? candidate : existing;\r\n    assertThat(annotations.get(MultiRouteTarget.class, null, deepest).getString(MergedAnnotation.VALUE)).isEqualTo(\"111\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithSelectorReturnsSelected()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#getWithSelectorReturnsSelected()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#streamStreamsInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamStreamsInCorrectOrder() {\r\n    MergedAnnotations annotations = getDirectAndSimple();\r\n    List<Class<?>> types = new ArrayList<>();\r\n    annotations.stream().forEach(annotation -> types.add(annotation.getType()));\r\n    assertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class, Meta2.class, Meta11.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#streamStreamsInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#streamStreamsInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#streamWithTypeStreamsInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamWithTypeStreamsInCorrectOrder() {\r\n    MergedAnnotations annotations = getMultiRoute1();\r\n    List<String> values = new ArrayList<>();\r\n    annotations.stream(MultiRouteTarget.class).forEach(annotation -> values.add(annotation.getString(MergedAnnotation.VALUE)));\r\n    assertThat(values).containsExactly(\"12\", \"111\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#streamWithTypeStreamsInCorrectOrder()",
    "tailType": "method"
  }
]