[
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#registerReflectionForBindingOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#registerReflectionForBindingOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#registerReflectionForBindingOnClassItself()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerReflectionForBindingOnClassItself() {\r\n    processor.registerReflectionHints(hints.reflection(), SampleClassWithoutAnnotationAttribute.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithoutAnnotationAttribute.class)).accepts(hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithoutAnnotationAttribute.class, \"getName\")).accepts(hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#registerReflectionForBindingOnClassItself()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#registerReflectionForBindingOnClassItself()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#throwExceptionWithoutAnnotationAttributeOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid throwExceptionWithoutAnnotationAttributeOnMethod() {\r\n    assertThatThrownBy(() -> processor.registerReflectionHints(hints.reflection(), SampleClassWithoutMethodLevelAnnotationAttribute.class.getMethod(\"method\"))).isInstanceOf(IllegalStateException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#throwExceptionWithoutAnnotationAttributeOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionForBindingProcessorTests#throwExceptionWithoutAnnotationAttributeOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.ClassLevelAnnotatedBean",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ClassLevelAnnotatedBean",
    "headType": "class",
    "relation": "use",
    "tail": "@RegisterReflectionForBinding",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.ClassLevelAnnotatedBean",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link RegisterReflectionForBindingProcessor}.\n *\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n */\nclass RegisterReflectionForBindingProcessorTests {\n\n\tprivate final RegisterReflectionForBindingProcessor processor = new RegisterReflectionForBindingProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerReflectionForBindingOnClass() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), ClassLevelAnnotatedBean.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnMethod() throws NoSuchMethodException {\n\t\tprocessor.registerReflectionHints(hints.reflection(), MethodLevelAnnotatedBean.class.getMethod(\"method\"));\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnClassItself() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), SampleClassWithoutAnnotationAttribute.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithoutAnnotationAttribute.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithoutAnnotationAttribute.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid throwExceptionWithoutAnnotationAttributeOnMethod() {\n\t\tassertThatThrownBy(() -> processor.registerReflectionHints(hints.reflection(),\n\t\t\t\tSampleClassWithoutMethodLevelAnnotationAttribute.class.getMethod(\"method\")))\n\t\t\t\t.isInstanceOf(IllegalStateException.class);\n\t}\n\n\n\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\tstatic class ClassLevelAnnotatedBean {\n\t}\n\n\tstatic class MethodLevelAnnotatedBean {\n\n\t\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\t@RegisterReflectionForBinding\n\tstatic class SampleClassWithoutAnnotationAttribute {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithoutMethodLevelAnnotationAttribute {\n\n\t\t@RegisterReflectionForBinding\n\t\tpublic void method() {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link RegisterReflectionForBindingProcessor}.\n *\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n */\nclass RegisterReflectionForBindingProcessorTests {\n\n\tprivate final RegisterReflectionForBindingProcessor processor = new RegisterReflectionForBindingProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerReflectionForBindingOnClass() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), ClassLevelAnnotatedBean.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnMethod() throws NoSuchMethodException {\n\t\tprocessor.registerReflectionHints(hints.reflection(), MethodLevelAnnotatedBean.class.getMethod(\"method\"));\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnClassItself() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), SampleClassWithoutAnnotationAttribute.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithoutAnnotationAttribute.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithoutAnnotationAttribute.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid throwExceptionWithoutAnnotationAttributeOnMethod() {\n\t\tassertThatThrownBy(() -> processor.registerReflectionHints(hints.reflection(),\n\t\t\t\tSampleClassWithoutMethodLevelAnnotationAttribute.class.getMethod(\"method\")))\n\t\t\t\t.isInstanceOf(IllegalStateException.class);\n\t}\n\n\n\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\tstatic class ClassLevelAnnotatedBean {\n\t}\n\n\tstatic class MethodLevelAnnotatedBean {\n\n\t\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\t@RegisterReflectionForBinding\n\tstatic class SampleClassWithoutAnnotationAttribute {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithoutMethodLevelAnnotationAttribute {\n\n\t\t@RegisterReflectionForBinding\n\t\tpublic void method() {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean#method()",
    "headType": "method",
    "relation": "provide",
    "tail": "@RegisterReflectionForBinding(SampleClassWithGetter.class)\r\npublic void method() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean#method()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.MethodLevelAnnotatedBean#method()",
    "headType": "method",
    "relation": "use",
    "tail": "@RegisterReflectionForBinding",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.SampleClassWithGetter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleClassWithGetter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link RegisterReflectionForBindingProcessor}.\n *\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n */\nclass RegisterReflectionForBindingProcessorTests {\n\n\tprivate final RegisterReflectionForBindingProcessor processor = new RegisterReflectionForBindingProcessor();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerReflectionForBindingOnClass() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), ClassLevelAnnotatedBean.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnMethod() throws NoSuchMethodException {\n\t\tprocessor.registerReflectionHints(hints.reflection(), MethodLevelAnnotatedBean.class.getMethod(\"method\"));\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithGetter.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithGetter.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid registerReflectionForBindingOnClassItself() {\n\t\tprocessor.registerReflectionHints(hints.reflection(), SampleClassWithoutAnnotationAttribute.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleClassWithoutAnnotationAttribute.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(String.class)).accepts(hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithoutAnnotationAttribute.class, \"getName\")).accepts(hints);\n\t}\n\n\t@Test\n\tvoid throwExceptionWithoutAnnotationAttributeOnMethod() {\n\t\tassertThatThrownBy(() -> processor.registerReflectionHints(hints.reflection(),\n\t\t\t\tSampleClassWithoutMethodLevelAnnotationAttribute.class.getMethod(\"method\")))\n\t\t\t\t.isInstanceOf(IllegalStateException.class);\n\t}\n\n\n\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\tstatic class ClassLevelAnnotatedBean {\n\t}\n\n\tstatic class MethodLevelAnnotatedBean {\n\n\t\t@RegisterReflectionForBinding(SampleClassWithGetter.class)\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\t@RegisterReflectionForBinding\n\tstatic class SampleClassWithoutAnnotationAttribute {\n\n\t\tpublic String getName() {\n\t\t\treturn \"test\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithoutMethodLevelAnnotationAttribute {\n\n\t\t@RegisterReflectionForBinding\n\t\tpublic void method() {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleClassWithGetter#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String getName() {\r\n    return \"test\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SampleClassWithGetter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SampleClassWithGetter#getName()",
    "tailType": "method"
  }
]