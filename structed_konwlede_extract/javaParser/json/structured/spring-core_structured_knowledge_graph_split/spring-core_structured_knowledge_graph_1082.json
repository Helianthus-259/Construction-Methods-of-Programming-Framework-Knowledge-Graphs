[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.VfsUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.net.URL;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Utility for detecting and accessing JBoss VFS in the classpath.\n *\n * <p>As of Spring 4.0, this class supports VFS 3.x on JBoss AS 6+\n * (package {@code org.jboss.vfs}) and is in particular compatible with\n * JBoss AS 7 and WildFly 8+.\n *\n * <p>Thanks go to Marius Bogoevici for the initial implementation.\n *\n * <p><b>Note:</b> This is an internal class and should not be used outside the framework.\n *\n * @author Costin Leau\n * @author Juergen Hoeller\n * @since 3.0.3\n */\npublic abstract class VfsUtils {\n\n\tprivate static final String VFS3_PKG = \"org.jboss.vfs.\";\n\tprivate static final String VFS_NAME = \"VFS\";\n\n\tprivate static final Method VFS_METHOD_GET_ROOT_URL;\n\tprivate static final Method VFS_METHOD_GET_ROOT_URI;\n\n\tprivate static final Method VIRTUAL_FILE_METHOD_EXISTS;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_INPUT_STREAM;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_SIZE;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED;\n\tprivate static final Method VIRTUAL_FILE_METHOD_TO_URL;\n\tprivate static final Method VIRTUAL_FILE_METHOD_TO_URI;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_NAME;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_PATH_NAME;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_PHYSICAL_FILE;\n\tprivate static final Method VIRTUAL_FILE_METHOD_GET_CHILD;\n\n\tprotected static final Class<?> VIRTUAL_FILE_VISITOR_INTERFACE;\n\tprotected static final Method VIRTUAL_FILE_METHOD_VISIT;\n\n\tprivate static final Field VISITOR_ATTRIBUTES_FIELD_RECURSE;\n\n\tstatic {\n\t\tClassLoader loader = VfsUtils.class.getClassLoader();\n\t\ttry {\n\t\t\tClass<?> vfsClass = loader.loadClass(VFS3_PKG + VFS_NAME);\n\t\t\tVFS_METHOD_GET_ROOT_URL = vfsClass.getMethod(\"getChild\", URL.class);\n\t\t\tVFS_METHOD_GET_ROOT_URI = vfsClass.getMethod(\"getChild\", URI.class);\n\n\t\t\tClass<?> virtualFile = loader.loadClass(VFS3_PKG + \"VirtualFile\");\n\t\t\tVIRTUAL_FILE_METHOD_EXISTS = virtualFile.getMethod(\"exists\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_INPUT_STREAM = virtualFile.getMethod(\"openStream\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_SIZE = virtualFile.getMethod(\"getSize\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_LAST_MODIFIED = virtualFile.getMethod(\"getLastModified\");\n\t\t\tVIRTUAL_FILE_METHOD_TO_URI = virtualFile.getMethod(\"toURI\");\n\t\t\tVIRTUAL_FILE_METHOD_TO_URL = virtualFile.getMethod(\"toURL\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_NAME = virtualFile.getMethod(\"getName\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_PATH_NAME = virtualFile.getMethod(\"getPathName\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_PHYSICAL_FILE = virtualFile.getMethod(\"getPhysicalFile\");\n\t\t\tVIRTUAL_FILE_METHOD_GET_CHILD = virtualFile.getMethod(\"getChild\", String.class);\n\n\t\t\tVIRTUAL_FILE_VISITOR_INTERFACE = loader.loadClass(VFS3_PKG + \"VirtualFileVisitor\");\n\t\t\tVIRTUAL_FILE_METHOD_VISIT = virtualFile.getMethod(\"visit\", VIRTUAL_FILE_VISITOR_INTERFACE);\n\n\t\t\tClass<?> visitorAttributesClass = loader.loadClass(VFS3_PKG + \"VisitorAttributes\");\n\t\t\tVISITOR_ATTRIBUTES_FIELD_RECURSE = visitorAttributesClass.getField(\"RECURSE\");\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new IllegalStateException(\"Could not detect JBoss VFS infrastructure\", ex);\n\t\t}\n\t}\n\n\tprotected static Object invokeVfsMethod(Method method, @Nullable Object target, Object... args) throws IOException {\n\t\ttry {\n\t\t\treturn method.invoke(target, args);\n\t\t}\n\t\tcatch (InvocationTargetException ex) {\n\t\t\tThrowable targetEx = ex.getTargetException();\n\t\t\tif (targetEx instanceof IOException ioException) {\n\t\t\t\tthrow ioException;\n\t\t\t}\n\t\t\tReflectionUtils.handleInvocationTargetException(ex);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tReflectionUtils.handleReflectionException(ex);\n\t\t}\n\n\t\tthrow new IllegalStateException(\"Invalid code path reached\");\n\t}\n\n\tstatic boolean exists(Object vfsResource) {\n\t\ttry {\n\t\t\treturn (Boolean) invokeVfsMethod(VIRTUAL_FILE_METHOD_EXISTS, vfsResource);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstatic boolean isReadable(Object vfsResource) {\n\t\ttry {\n\t\t\treturn (Long) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_SIZE, vfsResource) > 0;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstatic long getSize(Object vfsResource) throws IOException {\n\t\treturn (Long) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_SIZE, vfsResource);\n\t}\n\n\tstatic long getLastModified(Object vfsResource) throws IOException {\n\t\treturn (Long) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED, vfsResource);\n\t}\n\n\tstatic InputStream getInputStream(Object vfsResource) throws IOException {\n\t\treturn (InputStream) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_INPUT_STREAM, vfsResource);\n\t}\n\n\tstatic URL getURL(Object vfsResource) throws IOException {\n\t\treturn (URL) invokeVfsMethod(VIRTUAL_FILE_METHOD_TO_URL, vfsResource);\n\t}\n\n\tstatic URI getURI(Object vfsResource) throws IOException {\n\t\treturn (URI) invokeVfsMethod(VIRTUAL_FILE_METHOD_TO_URI, vfsResource);\n\t}\n\n\tstatic String getName(Object vfsResource) {\n\t\ttry {\n\t\t\treturn (String) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_NAME, vfsResource);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Cannot get resource name\", ex);\n\t\t}\n\t}\n\n\tstatic Object getRelative(URL url) throws IOException {\n\t\treturn invokeVfsMethod(VFS_METHOD_GET_ROOT_URL, null, url);\n\t}\n\n\tstatic Object getChild(Object vfsResource, String path) throws IOException {\n\t\treturn invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_CHILD, vfsResource, path);\n\t}\n\n\tstatic File getFile(Object vfsResource) throws IOException {\n\t\treturn (File) invokeVfsMethod(VIRTUAL_FILE_METHOD_GET_PHYSICAL_FILE, vfsResource);\n\t}\n\n\tstatic Object getRoot(URI url) throws IOException {\n\t\treturn invokeVfsMethod(VFS_METHOD_GET_ROOT_URI, null, url);\n\t}\n\n\t// protected methods used by the support sub-package\n\n\tprotected static Object getRoot(URL url) throws IOException {\n\t\treturn invokeVfsMethod(VFS_METHOD_GET_ROOT_URL, null, url);\n\t}\n\n\tprotected static @Nullable Object doGetVisitorAttributes() {\n\t\treturn ReflectionUtils.getField(VISITOR_ATTRIBUTES_FIELD_RECURSE, null);\n\t}\n\n\tprotected static @Nullable String doGetPath(Object resource) {\n\t\treturn (String) ReflectionUtils.invokeMethod(VIRTUAL_FILE_METHOD_GET_PATH_NAME, resource);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VFS3_PKG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VFS3_PKG",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VFS_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VFS_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VFS_METHOD_GET_ROOT_URL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VFS_METHOD_GET_ROOT_URL",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VFS_METHOD_GET_ROOT_URI",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VFS_METHOD_GET_ROOT_URI",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_EXISTS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_EXISTS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_INPUT_STREAM",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_INPUT_STREAM",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_GET_LAST_MODIFIED",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.VfsUtils#VIRTUAL_FILE_METHOD_TO_URL",
    "tailType": "field"
  }
]