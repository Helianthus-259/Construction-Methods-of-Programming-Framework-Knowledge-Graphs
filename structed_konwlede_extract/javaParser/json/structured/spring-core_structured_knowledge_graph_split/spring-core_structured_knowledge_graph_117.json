[
  {
    "head": "org.springframework.tests.sample.objects.TestObject#absquatulate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void absquatulate() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#absquatulate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#absquatulate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#compareTo(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compareTo(Object o) {\r\n    if (this.name != null && o instanceof TestObject) {\r\n        return this.name.compareTo(((TestObject) o).getName());\r\n    } else {\r\n        return 1;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#compareTo(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#compareTo(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerConstructorHint(ReflectionHints,Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register {@link ReflectionHints} against the specified {@link Constructor}.\r\n * @param hints the reflection hints instance to use\r\n * @param constructor the constructor to process\r\n */\r\nprotected void registerConstructorHint(ReflectionHints hints, Constructor<?> constructor) {\r\n    hints.registerConstructor(constructor, ExecutableMode.INVOKE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerConstructorHint(ReflectionHints,Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerFieldHint(ReflectionHints,Field)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register {@link ReflectionHints} against the specified {@link Field}.\r\n * @param hints the reflection hints instance to use\r\n * @param field the field to process\r\n */\r\nprotected void registerFieldHint(ReflectionHints hints, Field field) {\r\n    hints.registerField(field);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerFieldHint(ReflectionHints,Field)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerMethodHint(ReflectionHints,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register {@link ReflectionHints} against the specified {@link Method}.\r\n * @param hints the reflection hints instance to use\r\n * @param method the method to process\r\n */\r\nprotected void registerMethodHint(ReflectionHints hints, Method method) {\r\n    hints.registerMethod(method, ExecutableMode.INVOKE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerMethodHint(ReflectionHints,Method)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.RecordComponent;\nimport java.lang.reflect.Type;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.function.Consumer;\n\nimport kotlin.jvm.JvmClassMappingKt;\nimport kotlin.reflect.KClass;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.KotlinDetector;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Register the necessary reflection hints so that the specified type can be\n * bound at runtime. Fields, constructors, properties, and record components\n * are registered, except for a set of types like those in the {@code java.}\n * package where just the type is registered. Types are discovered transitively\n * on properties and record components, and generic types are registered as well.\n *\n * @author Sebastien Deleuze\n * @since 6.0\n */\npublic class BindingReflectionHintsRegistrar {\n\n\tprivate static final String KOTLIN_COMPANION_SUFFIX = \"$Companion\";\n\n\tprivate static final String JACKSON_ANNOTATION = \"com.fasterxml.jackson.annotation.JacksonAnnotation\";\n\n\tprivate static final boolean jacksonAnnotationPresent =\n\t\t\tClassUtils.isPresent(JACKSON_ANNOTATION, BindingReflectionHintsRegistrar.class.getClassLoader());\n\n\n\t/**\n\t * Register the necessary reflection hints to bind the specified types.\n\t * @param hints the hints instance to use\n\t * @param types the types to register\n\t */\n\tpublic void registerReflectionHints(ReflectionHints hints, Type... types) {\n\t\tSet<Type> seen = new HashSet<>();\n\t\tfor (Type type : types) {\n\t\t\tregisterReflectionHints(hints, seen, type);\n\t\t}\n\t}\n\n\tprivate boolean shouldSkipType(Class<?> type) {\n\t\treturn type.isPrimitive() || type == Object.class;\n\t}\n\n\tprivate boolean shouldSkipMembers(Class<?> type) {\n\t\treturn type.getCanonicalName().startsWith(\"java.\") || type.isArray();\n\t}\n\n\tprivate void registerReflectionHints(ReflectionHints hints, Set<Type> seen, Type type) {\n\t\tif (seen.contains(type)) {\n\t\t\treturn;\n\t\t}\n\t\tseen.add(type);\n\t\tif (type instanceof Class<?> clazz) {\n\t\t\tif (shouldSkipType(clazz)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\thints.registerType(clazz, typeHint -> {\n\t\t\t\tif (!shouldSkipMembers(clazz)) {\n\t\t\t\t\tif (clazz.isRecord()) {\n\t\t\t\t\t\ttypeHint.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\t\tfor (RecordComponent recordComponent : clazz.getRecordComponents()) {\n\t\t\t\t\t\t\tregisterRecordHints(hints, seen, recordComponent.getAccessor());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (clazz.isEnum()) {\n\t\t\t\t\t\ttypeHint.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS,\n\t\t\t\t\t\t\t\tMemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\t\t\t}\n\t\t\t\t\ttypeHint.withMembers(MemberCategory.ACCESS_DECLARED_FIELDS,\n\t\t\t\t\t\t\tMemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tfor (Method method : clazz.getMethods()) {\n\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\tif (methodName.startsWith(\"set\") && method.getParameterCount() == 1) {\n\t\t\t\t\t\t\tregisterPropertyHints(hints, seen, method, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((methodName.startsWith(\"get\") && method.getParameterCount() == 0 && method.getReturnType() != void.class) ||\n\t\t\t\t\t\t\t\t(methodName.startsWith(\"is\") && method.getParameterCount() == 0\n\t\t\t\t\t\t\t\t\t\t&& ClassUtils.resolvePrimitiveIfNecessary(method.getReturnType()) == Boolean.class)) {\n\t\t\t\t\t\t\tregisterPropertyHints(hints, seen, method, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (jacksonAnnotationPresent) {\n\t\t\t\t\t\tregisterJacksonHints(hints, clazz);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (KotlinDetector.isKotlinType(clazz)) {\n\t\t\t\t\tKotlinDelegate.registerComponentHints(hints, clazz);\n\t\t\t\t\tregisterKotlinSerializationHints(hints, clazz);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tSet<Class<?>> referencedTypes = new LinkedHashSet<>();\n\t\tcollectReferencedTypes(referencedTypes, ResolvableType.forType(type));\n\t\treferencedTypes.forEach(referencedType -> registerReflectionHints(hints, seen, referencedType));\n\t}\n\n\tprivate void registerRecordHints(ReflectionHints hints, Set<Type> seen, Method method) {\n\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n\t\tMethodParameter methodParameter = MethodParameter.forExecutable(method, -1);\n\t\tType methodParameterType = methodParameter.getGenericParameterType();\n\t\tregisterReflectionHints(hints, seen, methodParameterType);\n\t}\n\n\tprivate void registerPropertyHints(ReflectionHints hints, Set<Type> seen, @Nullable Method method, int parameterIndex) {\n\t\tif (method != null && method.getDeclaringClass() != Object.class && method.getDeclaringClass() != Enum.class) {\n\t\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n\t\t\tMethodParameter methodParameter = MethodParameter.forExecutable(method, parameterIndex);\n\t\t\tType methodParameterType = methodParameter.getGenericParameterType();\n\t\t\tregisterReflectionHints(hints, seen, methodParameterType);\n\t\t}\n\t}\n\n\tprivate void registerKotlinSerializationHints(ReflectionHints hints, Class<?> clazz) {\n\t\tString companionClassName = clazz.getCanonicalName() + KOTLIN_COMPANION_SUFFIX;\n\t\tif (ClassUtils.isPresent(companionClassName, null)) {\n\t\t\tClass<?> companionClass = ClassUtils.resolveClassName(companionClassName, null);\n\t\t\tMethod serializerMethod = ClassUtils.getMethodIfAvailable(companionClass, \"serializer\");\n\t\t\tif (serializerMethod != null) {\n\t\t\t\thints.registerMethod(serializerMethod, ExecutableMode.INVOKE);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void collectReferencedTypes(Set<Class<?>> types, ResolvableType resolvableType) {\n\t\tClass<?> clazz = resolvableType.resolve();\n\t\tif (clazz != null && !types.contains(clazz)) {\n\t\t\ttypes.add(clazz);\n\t\t\tfor (ResolvableType genericResolvableType : resolvableType.getGenerics()) {\n\t\t\t\tcollectReferencedTypes(types, genericResolvableType);\n\t\t\t}\n\t\t\tClass<?> superClass = clazz.getSuperclass();\n\t\t\tif (superClass != null && superClass != Object.class && superClass != Record.class && superClass != Enum.class) {\n\t\t\t\ttypes.add(superClass);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void registerJacksonHints(ReflectionHints hints, Class<?> clazz) {\n\t\tReflectionUtils.doWithFields(clazz, field ->\n\t\t\t\tforEachJacksonAnnotation(field, annotation -> {\n\t\t\t\t\t\t\tField sourceField = (Field) annotation.getSource();\n\t\t\t\t\t\t\tif (sourceField != null) {\n\t\t\t\t\t\t\t\thints.registerField(sourceField);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tregisterHintsForClassAttributes(hints, annotation);\n\t\t\t\t\t\t}));\n\t\tReflectionUtils.doWithMethods(clazz, method ->\n\t\t\t\tforEachJacksonAnnotation(method, annotation -> {\n\t\t\t\t\t\t\tMethod sourceMethod = (Method) annotation.getSource();\n\t\t\t\t\t\t\tif (sourceMethod != null) {\n\t\t\t\t\t\t\t\thints.registerMethod(sourceMethod, ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tregisterHintsForClassAttributes(hints, annotation);\n\t\t\t\t\t\t}));\n\t\tforEachJacksonAnnotation(clazz, annotation -> registerHintsForClassAttributes(hints, annotation));\n\t}\n\n\tprivate void forEachJacksonAnnotation(AnnotatedElement element, Consumer<MergedAnnotation<Annotation>> action) {\n\t\tMergedAnnotations\n\t\t\t\t.from(element, MergedAnnotations.SearchStrategy.TYPE_HIERARCHY)\n\t\t\t\t.stream(JACKSON_ANNOTATION)\n\t\t\t\t.filter(MergedAnnotation::isMetaPresent)\n\t\t\t\t.forEach(action);\n\t}\n\n\tprivate void registerHintsForClassAttributes(ReflectionHints hints, MergedAnnotation<Annotation> annotation) {\n\t\tannotation.getRoot().asMap().forEach((attributeName, value) -> {\n\t\t\tif (value instanceof Class<?> classValue && value != Void.class) {\n\t\t\t\tif (attributeName.equals(\"builder\")) {\n\t\t\t\t\thints.registerType(classValue, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,\n\t\t\t\t\t\t\tMemberCategory.INVOKE_DECLARED_METHODS);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\thints.registerType(classValue, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\n\t/**\n\t * Inner class to avoid a hard dependency on Kotlin at runtime.\n\t */\n\tprivate static class KotlinDelegate {\n\n\t\tpublic static void registerComponentHints(ReflectionHints hints, Class<?> type) {\n\t\t\tKClass<?> kClass = JvmClassMappingKt.getKotlinClass(type);\n\t\t\tif (kClass.isData()) {\n\t\t\t\tfor (Method method : type.getMethods()) {\n\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\tif (methodName.startsWith(\"component\") || methodName.equals(\"copy\") || methodName.equals(\"copy$default\")) {\n\t\t\t\t\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar#KOTLIN_COMPANION_SUFFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar#KOTLIN_COMPANION_SUFFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar#JACKSON_ANNOTATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar#JACKSON_ANNOTATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrar",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrar#jacksonAnnotationPresent",
    "tailType": "field"
  }
]