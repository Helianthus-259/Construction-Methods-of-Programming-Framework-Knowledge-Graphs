[
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithNoProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithNoProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithGetter() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithGetter.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithGetter.class));\r\n        assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"getName\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        });\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithGetter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithSetter() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithSetter.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithSetter.class));\r\n        assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"setName\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        });\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithSetter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithListProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithListProperty() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithListProperty.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithListProperty.class));\r\n        assertThat(typeHint.methods()).satisfiesExactlyInAnyOrder(methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"setNames\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        }, methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"getNames\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        });\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithListProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithListProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithCycles() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithCycles.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithCycles.class)), typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithCycles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithResolvableType() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithResolvableType.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType[].class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Type.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Class.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType.class));\r\n        assertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(MemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).hasSizeGreaterThan(1);\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithResolvableType.class));\r\n        assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"getResolvableType\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        });\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithResolvableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithMultipleLevelsAndCollection() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassA.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassA.class)), typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassB.class)), typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassC.class)), typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class)), typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Set.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithMultipleLevelsAndCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]