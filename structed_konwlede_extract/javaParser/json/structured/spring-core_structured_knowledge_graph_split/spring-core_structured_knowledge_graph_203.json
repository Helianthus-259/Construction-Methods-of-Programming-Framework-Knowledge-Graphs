[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOnDoublePut()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldReplaceOnDoublePut() {\r\n    this.map.put(123, \"321\");\r\n    this.map.put(123, \"123\");\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOnDoublePut()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOnDoublePut()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutNullKey() {\r\n    assertThat(this.map.get(null)).isNull();\r\n    assertThat(this.map.getOrDefault(null, \"456\")).isEqualTo(\"456\");\r\n    this.map.put(null, \"123\");\r\n    assertThat(this.map.get(null)).isEqualTo(\"123\");\r\n    assertThat(this.map.getOrDefault(null, \"456\")).isEqualTo(\"123\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutNullValue() {\r\n    assertThat(this.map.get(123)).isNull();\r\n    assertThat(this.map.getOrDefault(123, \"456\")).isEqualTo(\"456\");\r\n    this.map.put(123, \"321\");\r\n    assertThat(this.map.get(123)).isEqualTo(\"321\");\r\n    assertThat(this.map.getOrDefault(123, \"456\")).isEqualTo(\"321\");\r\n    this.map.put(123, null);\r\n    assertThat(this.map.get(123)).isNull();\r\n    assertThat(this.map.getOrDefault(123, \"456\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutNullValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetWithNoItems()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetWithNoItems() {\r\n    assertThat(this.map.get(123)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetWithNoItems()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetWithNoItems()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldApplySupplementalHash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldApplySupplementalHash() {\r\n    Integer key = 123;\r\n    this.map.put(key, \"123\");\r\n    assertThat(this.map.getSupplementalHash()).isNotEqualTo(key.hashCode());\r\n    assertThat(this.map.getSupplementalHash() >> 30 & 0xFF).isNotEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldApplySupplementalHash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldApplySupplementalHash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetFollowingNexts()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetFollowingNexts() {\r\n    // Use loadFactor to disable resize\r\n    this.map = new TestWeakConcurrentCache<>(1, 10.0f, 1);\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(1);\r\n    assertThat(this.map.get(1)).isEqualTo(\"1\");\r\n    assertThat(this.map.get(2)).isEqualTo(\"2\");\r\n    assertThat(this.map.get(3)).isEqualTo(\"3\");\r\n    assertThat(this.map.get(4)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetFollowingNexts()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetFollowingNexts()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldResize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldResize() {\r\n    this.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\r\n    this.map.put(1, \"1\");\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(1);\r\n    assertThat(this.map.get(1)).isEqualTo(\"1\");\r\n    this.map.put(2, \"2\");\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(2);\r\n    assertThat(this.map.get(1)).isEqualTo(\"1\");\r\n    assertThat(this.map.get(2)).isEqualTo(\"2\");\r\n    this.map.put(3, \"3\");\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(4);\r\n    assertThat(this.map.get(1)).isEqualTo(\"1\");\r\n    assertThat(this.map.get(2)).isEqualTo(\"2\");\r\n    assertThat(this.map.get(3)).isEqualTo(\"3\");\r\n    this.map.put(4, \"4\");\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(8);\r\n    assertThat(this.map.get(4)).isEqualTo(\"4\");\r\n    // Putting again should not increase the count\r\n    for (int i = 1; i <= 5; i++) {\r\n        this.map.put(i, String.valueOf(i));\r\n    }\r\n    assertThat(this.map.getSegment(0).getSize()).isEqualTo(8);\r\n    assertThat(this.map.get(5)).isEqualTo(\"5\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldResize()",
    "tailType": "method"
  }
]