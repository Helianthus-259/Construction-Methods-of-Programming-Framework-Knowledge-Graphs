[
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverterTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This test effectively verifies that the {@link ObjectToObjectConverter}\r\n * was properly registered with the {@link GenericConversionService}.\r\n */\r\n@Test\r\nvoid nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType() {\r\n    assertThat(conversionService.canConvert(Source.class, Data.class)).as(\"can convert Source to Data\").isTrue();\r\n    Data data = conversionService.convert(new Source(\"test\"), Data.class);\r\n    assertThat(data).asString().isEqualTo(\"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType() {\r\n    assertThat(conversionService.canConvert(Text.class, Data.class)).as(\"can convert Text to Data\").isFalse();\r\n    assertThat(conversionService.canConvert(Text.class, Optional.class)).as(\"can convert Text to Optional\").isFalse();\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert Text to Data\").isThrownBy(() -> conversionService.convert(new Text(\"test\"), Data.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#staticValueOfFactoryMethodWithDifferentReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid staticValueOfFactoryMethodWithDifferentReturnType() {\r\n    assertThat(conversionService.canConvert(String.class, Data.class)).as(\"can convert String to Data\").isFalse();\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).as(\"convert String to Data\").isThrownBy(() -> conversionService.convert(\"test\", Data.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverterTests#staticValueOfFactoryMethodWithDifferentReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverterTests#staticValueOfFactoryMethodWithDifferentReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.Source",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.Source",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.convert.ConverterNotFoundException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests for {@link ObjectToObjectConverter}.\n *\n * @author Sam Brannen\n * @author Phillip Webb\n * @since 5.3.21\n * @see org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()\n */\nclass ObjectToObjectConverterTests {\n\n\tprivate final GenericConversionService conversionService = new GenericConversionService();\n\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tconversionService.addConverter(new ObjectToObjectConverter());\n\t}\n\n\n\t/**\n\t * This test effectively verifies that the {@link ObjectToObjectConverter}\n\t * was properly registered with the {@link GenericConversionService}.\n\t */\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType() {\n\t\tassertThat(conversionService.canConvert(Source.class, Data.class))\n\t\t\t\t.as(\"can convert Source to Data\").isTrue();\n\t\tData data = conversionService.convert(new Source(\"test\"), Data.class);\n\t\tassertThat(data).asString().isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(Text.class, Data.class))\n\t\t\t\t.as(\"can convert Text to Data\").isFalse();\n\t\tassertThat(conversionService.canConvert(Text.class, Optional.class))\n\t\t\t\t.as(\"can convert Text to Optional\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert Text to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new Text(\"test\"), Data.class));\n\t}\n\n\t@Test\n\tvoid staticValueOfFactoryMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(String.class, Data.class))\n\t\t\t\t.as(\"can convert String to Data\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert String to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(\"test\", Data.class));\n\t}\n\n\n\tstatic class Source {\n\n\t\tprivate final String value;\n\n\t\tprivate Source(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Data toData() {\n\t\t\treturn new Data(this.value);\n\t\t}\n\t}\n\n\n\tstatic class Text {\n\n\t\tprivate final String value;\n\n\t\tprivate Text(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Optional<Data> toData() {\n\t\t\treturn Optional.of(new Data(this.value));\n\t\t}\n\t}\n\n\n\tstatic class Data {\n\n\t\tprivate final String value;\n\n\t\tprivate Data(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t\tpublic static Optional<Data> valueOf(String string) {\n\t\t\treturn (string != null ? Optional.of(new Data(string)) : Optional.empty());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.Source",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.Source#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.Source#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.Source#toData()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Data toData() {\r\n    return new Data(this.value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.Source",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.Source#toData()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.Text",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.Text",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.convert.ConverterNotFoundException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests for {@link ObjectToObjectConverter}.\n *\n * @author Sam Brannen\n * @author Phillip Webb\n * @since 5.3.21\n * @see org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectToObjectUsingValueOfMethod()\n */\nclass ObjectToObjectConverterTests {\n\n\tprivate final GenericConversionService conversionService = new GenericConversionService();\n\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tconversionService.addConverter(new ObjectToObjectConverter());\n\t}\n\n\n\t/**\n\t * This test effectively verifies that the {@link ObjectToObjectConverter}\n\t * was properly registered with the {@link GenericConversionService}.\n\t */\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithMatchingReturnType() {\n\t\tassertThat(conversionService.canConvert(Source.class, Data.class))\n\t\t\t\t.as(\"can convert Source to Data\").isTrue();\n\t\tData data = conversionService.convert(new Source(\"test\"), Data.class);\n\t\tassertThat(data).asString().isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid nonStaticToTargetTypeSimpleNameMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(Text.class, Data.class))\n\t\t\t\t.as(\"can convert Text to Data\").isFalse();\n\t\tassertThat(conversionService.canConvert(Text.class, Optional.class))\n\t\t\t\t.as(\"can convert Text to Optional\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert Text to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(new Text(\"test\"), Data.class));\n\t}\n\n\t@Test\n\tvoid staticValueOfFactoryMethodWithDifferentReturnType() {\n\t\tassertThat(conversionService.canConvert(String.class, Data.class))\n\t\t\t\t.as(\"can convert String to Data\").isFalse();\n\t\tassertThatExceptionOfType(ConverterNotFoundException.class)\n\t\t\t\t.as(\"convert String to Data\")\n\t\t\t\t.isThrownBy(() -> conversionService.convert(\"test\", Data.class));\n\t}\n\n\n\tstatic class Source {\n\n\t\tprivate final String value;\n\n\t\tprivate Source(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Data toData() {\n\t\t\treturn new Data(this.value);\n\t\t}\n\t}\n\n\n\tstatic class Text {\n\n\t\tprivate final String value;\n\n\t\tprivate Text(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic Optional<Data> toData() {\n\t\t\treturn Optional.of(new Data(this.value));\n\t\t}\n\t}\n\n\n\tstatic class Data {\n\n\t\tprivate final String value;\n\n\t\tprivate Data(String value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.value;\n\t\t}\n\n\t\tpublic static Optional<Data> valueOf(String string) {\n\t\t\treturn (string != null ? Optional.of(new Data(string)) : Optional.empty());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.Text",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.Text#value",
    "tailType": "field"
  }
]