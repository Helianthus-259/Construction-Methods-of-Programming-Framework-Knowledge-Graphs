[
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getPubliclyAccessibleMethodIfPossible(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#findPubliclyAccessibleMethodIfPossible(String,Class<?>[],Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Method findPubliclyAccessibleMethodIfPossible(String methodName, Class<?>[] parameterTypes, Class<?> declaringClass) {\r\n    Class<?> current = declaringClass.getSuperclass();\r\n    while (current != null) {\r\n        if (Modifier.isPublic(current.getModifiers())) {\r\n            try {\r\n                return current.getDeclaredMethod(methodName, parameterTypes);\r\n            } catch (NoSuchMethodException ex) {\r\n                // ignore\r\n            }\r\n        }\r\n        current = current.getSuperclass();\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#findPubliclyAccessibleMethodIfPossible(String,Class<?>[],Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#findPubliclyAccessibleMethodIfPossible(String,Class<?>[],Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#isUserLevelMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is declared by the user or at least pointing to\r\n * a user-declared method.\r\n * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the\r\n * {@code GroovyObject} interface (for interface methods; on an implementation class,\r\n * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway).\r\n * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered\r\n * as user-level methods since they are eventually pointing to a user-declared generic method.\r\n * @param method the method to check\r\n * @return {@code true} if the method can be considered as user-declared; {@code false} otherwise\r\n */\r\npublic static boolean isUserLevelMethod(Method method) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    return (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isUserLevelMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isGroovyObjectMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isGroovyObjectMethod(Method method) {\r\n    return method.getDeclaringClass().getName().equals(\"groovy.lang.GroovyObject\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isGroovyObjectMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isOverridable(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is overridable in the given target class.\r\n * @param method the method to check\r\n * @param targetClass the target class to check against\r\n */\r\nprivate static boolean isOverridable(Method method, @Nullable Class<?> targetClass) {\r\n    if ((method.getModifiers() & NON_OVERRIDABLE_MODIFIER) != 0) {\r\n        return false;\r\n    }\r\n    if ((method.getModifiers() & OVERRIDABLE_MODIFIER) != 0) {\r\n        return true;\r\n    }\r\n    return (targetClass == null || getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isOverridable(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getStaticMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a public static method of a class.\r\n * @param clazz the class which defines the method\r\n * @param methodName the static method name\r\n * @param args the parameter types to the method\r\n * @return the static method, or {@code null} if no static method was found\r\n * @throws IllegalArgumentException if the method name is blank or the clazz is null\r\n */\r\n@Nullable\r\npublic static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(methodName, \"Method name must not be null\");\r\n    try {\r\n        Method method = clazz.getMethod(methodName, args);\r\n        return (Modifier.isStatic(method.getModifiers()) ? method : null);\r\n    } catch (NoSuchMethodException ex) {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getStaticMethod(Class<?>,String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getStaticMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#getMethodOrNull(Class<?>,String,Class<?>[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Method getMethodOrNull(Class<?> clazz, String methodName, @Nullable Class<?> @Nullable [] paramTypes) {\r\n    try {\r\n        return clazz.getMethod(methodName, paramTypes);\r\n    } catch (NoSuchMethodException ex) {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getMethodOrNull(Class<?>,String,Class<?>[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getMethodOrNull(Class<?>,String,Class<?>[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#findMethodCandidatesByName(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Set<Method> findMethodCandidatesByName(Class<?> clazz, String methodName) {\r\n    Set<Method> candidates = new HashSet<>(1);\r\n    Method[] methods = clazz.getMethods();\r\n    for (Method method : methods) {\r\n        if (methodName.equals(method.getName())) {\r\n            candidates.add(method);\r\n        }\r\n    }\r\n    return candidates;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#findMethodCandidatesByName(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CollectionUtils",
    "tailType": "class"
  }
]