[
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ResourceDecoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.InputStreamResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.codec.AbstractDecoderTests;\nimport org.springframework.util.MimeTypeUtils;\nimport org.springframework.util.StreamUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.core.ResolvableType.forClass;\n\n/**\n * @author Arjen Poutsma\n */\nclass ResourceDecoderTests extends AbstractDecoderTests<ResourceDecoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\n\tResourceDecoderTests() {\n\t\tsuper(new ResourceDecoder());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canDecode() {\n\t\tassertThat(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\n\t\tassertThat(this.decoder.canDecode(forClass(Object.class), MimeTypeUtils.APPLICATION_JSON)).isFalse();\n\t}\n\n\n\t@Override\n\t@Test\n\tprotected void decode() {\n\t\tFlux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\n\n\t\ttestDecodeAll(input, Resource.class, step -> step\n\t\t\t\t.consumeNextWith(resource -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbyte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\n\t\t\t\t\t\tassertThat(new String(bytes)).isEqualTo(\"foobar\");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\tthrow new AssertionError(ex.getMessage(), ex);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decodeToMono() {\n\t\tFlux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\n\t\ttestDecodeToMonoAll(input, ResolvableType.forClass(Resource.class),\n\t\t\t\tstep -> step\n\t\t\t\t\t\t.consumeNextWith(value -> {\n\t\t\t\t\t\t\tResource resource = (Resource) value;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbyte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\n\t\t\t\t\t\t\t\tassertThat(new String(bytes)).isEqualTo(\"foobar\");\n\t\t\t\t\t\t\t\tassertThat(resource.getFilename()).isEqualTo(\"testFile\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t\t\tthrow new AssertionError(ex.getMessage(), ex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.expectComplete()\n\t\t\t\t\t\t.verify(),\n\t\t\t\tnull,\n\t\t\t\tCollections.singletonMap(ResourceDecoder.FILENAME_HINT, \"testFile\"));\n\t}\n\n\t@Test\n\tvoid decodeInputStreamResource() {\n\t\tFlux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\n\t\ttestDecodeAll(input, InputStreamResource.class, step -> step\n\t\t\t\t.consumeNextWith(resource -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbyte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\n\t\t\t\t\t\tassertThat(new String(bytes)).isEqualTo(\"foobar\");\n\t\t\t\t\t\tassertThat(resource.contentLength()).isEqualTo(fooBytes.length + barBytes.length);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\tthrow new AssertionError(ex.getMessage(), ex);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#canDecode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canDecode() {\r\n    assertThat(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    assertThat(this.decoder.canDecode(forClass(Object.class), MimeTypeUtils.APPLICATION_JSON)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#canDecode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decode() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    testDecodeAll(input, Resource.class, step -> step.consumeNextWith(resource -> {\r\n        try {\r\n            byte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\r\n            assertThat(new String(bytes)).isEqualTo(\"foobar\");\r\n        } catch (IOException ex) {\r\n            throw new AssertionError(ex.getMessage(), ex);\r\n        }\r\n    }).expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#decode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decodeToMono() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    testDecodeToMonoAll(input, ResolvableType.forClass(Resource.class), step -> step.consumeNextWith(value -> {\r\n        Resource resource = (Resource) value;\r\n        try {\r\n            byte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\r\n            assertThat(new String(bytes)).isEqualTo(\"foobar\");\r\n            assertThat(resource.getFilename()).isEqualTo(\"testFile\");\r\n        } catch (IOException ex) {\r\n            throw new AssertionError(ex.getMessage(), ex);\r\n        }\r\n    }).expectComplete().verify(), null, Collections.singletonMap(ResourceDecoder.FILENAME_HINT, \"testFile\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#decodeToMono()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]