[
  {
    "head": "org.springframework.core.codec.ByteBufferDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ByteBufferEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.ByteBuffer;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Encoder for {@link ByteBuffer ByteBuffers}.\n *\n * @author Sebastien Deleuze\n * @since 5.0\n */\npublic class ByteBufferEncoder extends AbstractEncoder<ByteBuffer> {\n\n\tpublic ByteBufferEncoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\tClass<?> clazz = elementType.toClass();\n\t\treturn super.canEncode(elementType, mimeType) && ByteBuffer.class.isAssignableFrom(clazz);\n\t}\n\n\t@Override\n\tpublic Flux<DataBuffer> encode(Publisher<? extends ByteBuffer> inputStream,\n\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(inputStream).map(byteBuffer ->\n\t\t\t\tencodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\n\t}\n\n\t@Override\n\tpublic DataBuffer encodeValue(ByteBuffer byteBuffer, DataBufferFactory bufferFactory,\n\t\t\tResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tDataBuffer dataBuffer = bufferFactory.wrap(byteBuffer);\n\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n\t\t\tString logPrefix = Hints.getLogPrefix(hints);\n\t\t\tlogger.debug(logPrefix + \"Writing \" + dataBuffer.readableByteCount() + \" bytes\");\n\t\t}\n\t\treturn dataBuffer;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    Class<?> clazz = elementType.toClass();\r\n    return super.canEncode(elementType, mimeType) && ByteBuffer.class.isAssignableFrom(clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteBufferEncoder#canEncode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#encode(Publisher<? extends ByteBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> encode(Publisher<? extends ByteBuffer> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(inputStream).map(byteBuffer -> encodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteBufferEncoder#encode(Publisher<? extends ByteBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#encode(Publisher<? extends ByteBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#encodeValue(ByteBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer encodeValue(ByteBuffer byteBuffer, DataBufferFactory bufferFactory, ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    DataBuffer dataBuffer = bufferFactory.wrap(byteBuffer);\r\n    if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\r\n        String logPrefix = Hints.getLogPrefix(hints);\r\n        logger.debug(logPrefix + \"Writing \" + dataBuffer.readableByteCount() + \" bytes\");\r\n    }\r\n    return dataBuffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteBufferEncoder#encodeValue(ByteBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder#encodeValue(ByteBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.CharBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decode from a data buffer stream to a {@code CharBuffer} stream, either splitting\n * or aggregating incoming data chunks to realign along newlines delimiters\n * and produce a stream of char buffers. This is useful for streaming but is also\n * necessary to ensure that multi-byte characters can be decoded correctly,\n * avoiding split-character issues. The default delimiters used by default are\n * {@code \\n} and {@code \\r\\n} but that can be customized.\n *\n * @author Markus Heiden\n * @author Arjen Poutsma\n * @since 6.1\n * @see CharSequenceEncoder\n */\npublic final class CharBufferDecoder extends AbstractCharSequenceDecoder<CharBuffer> {\n\n\tpublic CharBufferDecoder(List<String> delimiters, boolean stripDelimiter, MimeType... mimeTypes) {\n\t\tsuper(delimiters, stripDelimiter, mimeTypes);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (elementType.resolve() == CharBuffer.class) && super.canDecode(elementType, mimeType);\n\t}\n\n\t@Override\n\tprotected CharBuffer decodeInternal(DataBuffer dataBuffer, Charset charset) {\n\t\tByteBuffer byteBuffer = ByteBuffer.allocate(dataBuffer.readableByteCount());\n\t\tdataBuffer.toByteBuffer(byteBuffer);\n\t\treturn charset.decode(byteBuffer);\n\t}\n\n\n\t/**\n\t * Create a {@code CharBufferDecoder} for {@code \"text/plain\"}.\n\t */\n\tpublic static CharBufferDecoder textPlainOnly() {\n\t\treturn textPlainOnly(DEFAULT_DELIMITERS, true);\n\t}\n\n\t/**\n\t * Create a {@code CharBufferDecoder} for {@code \"text/plain\"}.\n\t * @param delimiters delimiter strings to use to split the input stream\n\t * @param stripDelimiter whether to remove delimiters from the resulting input strings\n\t */\n\tpublic static CharBufferDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter) {\n\t\tvar textPlain = new MimeType(\"text\", \"plain\", DEFAULT_CHARSET);\n\t\treturn new CharBufferDecoder(delimiters, stripDelimiter, textPlain);\n\t}\n\n\t/**\n\t * Create a {@code CharBufferDecoder} that supports all MIME types.\n\t */\n\tpublic static CharBufferDecoder allMimeTypes() {\n\t\treturn allMimeTypes(DEFAULT_DELIMITERS, true);\n\t}\n\n\t/**\n\t * Create a {@code CharBufferDecoder} that supports all MIME types.\n\t * @param delimiters delimiter strings to use to split the input stream\n\t * @param stripDelimiter whether to remove delimiters from the resulting input strings\n\t */\n\tpublic static CharBufferDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter) {\n\t\tvar textPlain = new MimeType(\"text\", \"plain\", DEFAULT_CHARSET);\n\t\treturn new CharBufferDecoder(delimiters, stripDelimiter, textPlain, MimeTypeUtils.ALL);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (elementType.resolve() == CharBuffer.class) && super.canDecode(elementType, mimeType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]