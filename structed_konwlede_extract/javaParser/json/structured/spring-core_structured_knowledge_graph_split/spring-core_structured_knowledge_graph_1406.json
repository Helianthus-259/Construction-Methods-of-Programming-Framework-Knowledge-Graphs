[
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.unit.DataSize#bytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.unit.DataSize#bytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.unit.DataSize#ofBytes(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing the specified number of bytes.\r\n * @param bytes the number of bytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofBytes(long bytes) {\r\n    return new DataSize(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#ofBytes(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#ofKilobytes(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing the specified number of kilobytes.\r\n * @param kilobytes the number of kilobytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofKilobytes(long kilobytes) {\r\n    return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#ofKilobytes(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#ofMegabytes(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing the specified number of megabytes.\r\n * @param megabytes the number of megabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofMegabytes(long megabytes) {\r\n    return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#ofMegabytes(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#ofGigabytes(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing the specified number of gigabytes.\r\n * @param gigabytes the number of gigabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofGigabytes(long gigabytes) {\r\n    return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#ofGigabytes(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#ofTerabytes(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing the specified number of terabytes.\r\n * @param terabytes the number of terabytes, positive or negative\r\n * @return a {@code DataSize}\r\n */\r\npublic static DataSize ofTerabytes(long terabytes) {\r\n    return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#ofTerabytes(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#of(long,DataUnit)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}.\r\n * @param amount the amount of the size, measured in terms of the unit,\r\n * positive or negative\r\n * @return a corresponding {@code DataSize}\r\n */\r\npublic static DataSize of(long amount, DataUnit unit) {\r\n    Assert.notNull(unit, \"Unit must not be null\");\r\n    return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#of(long,DataUnit)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#parse(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * {@link DataUnit#BYTES} if no unit is specified.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 bytes\"\r\n * </pre>\r\n * @param text the text to parse\r\n * @return the parsed {@code DataSize}\r\n * @see #parse(CharSequence, DataUnit)\r\n */\r\npublic static DataSize parse(CharSequence text) {\r\n    return parse(text, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#parse(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#parse(CharSequence,DataUnit)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a {@link DataSize} from a text string such as {@code 12MB} using\r\n * the specified default {@link DataUnit} if no unit is specified.\r\n * <p>The string starts with a number followed optionally by a unit matching\r\n * one of the supported {@linkplain DataUnit suffixes}.\r\n * <p>If neither a unit nor a default {@code DataUnit} is specified,\r\n * {@link DataUnit#BYTES} will be inferred.\r\n * <p>Examples:\r\n * <pre>\r\n * \"12KB\" -- parses as \"12 kilobytes\"\r\n * \"5MB\"  -- parses as \"5 megabytes\"\r\n * \"20\"   -- parses as \"20 kilobytes\" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})\r\n * \"20\"   -- parses as \"20 bytes\" (if the {@code defaultUnit} is {@code null})\r\n * </pre>\r\n * @param text the text to parse\r\n * @param defaultUnit the default {@code DataUnit} to use\r\n * @return the parsed {@code DataSize}\r\n */\r\npublic static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {\r\n    Assert.notNull(text, \"Text must not be null\");\r\n    try {\r\n        CharSequence trimmedText = StringUtils.trimAllWhitespace(text);\r\n        Matcher matcher = DataSizeUtils.PATTERN.matcher(trimmedText);\r\n        Assert.state(matcher.matches(), () -> \"'\" + text + \"' does not match data size pattern\");\r\n        DataUnit unit = DataSizeUtils.determineDataUnit(matcher.group(2), defaultUnit);\r\n        long amount = Long.parseLong(trimmedText, matcher.start(1), matcher.end(1), 10);\r\n        return DataSize.of(amount, unit);\r\n    } catch (Exception ex) {\r\n        throw new IllegalArgumentException(\"'\" + text + \"' is not a valid data size\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#parse(CharSequence,DataUnit)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSize#isNegative()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Checks if this size is negative, excluding zero.\r\n * @return true if this size has a size less than zero bytes\r\n */\r\npublic boolean isNegative() {\r\n    return this.bytes < 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSize",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSize#isNegative()",
    "tailType": "method"
  }
]