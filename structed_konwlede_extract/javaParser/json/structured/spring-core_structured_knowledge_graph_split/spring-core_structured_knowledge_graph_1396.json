[
  {
    "head": "org.springframework.util.StringUtils#hasText(CharSequence)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#hasText(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given {@code String} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code String} is not {@code null}, its length is greater than 0,\r\n * and it contains at least one non-whitespace character.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null}, its\r\n * length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(CharSequence)\r\n * @see #hasLength(String)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable String str) {\r\n    return (str != null && !str.isBlank());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#hasText(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#hasText(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#containsWhitespace(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given {@code CharSequence} contains any whitespace characters.\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see Character#isWhitespace\r\n */\r\npublic static boolean containsWhitespace(@Nullable CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#containsWhitespace(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#containsWhitespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given {@code String} contains any whitespace characters.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not empty and\r\n * contains at least 1 whitespace character\r\n * @see #containsWhitespace(CharSequence)\r\n */\r\npublic static boolean containsWhitespace(@Nullable String str) {\r\n    return containsWhitespace((CharSequence) str);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#containsWhitespace(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimWhitespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim leading and trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#strip()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.strip();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimWhitespace(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimWhitespace(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#trimAllWhitespace(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim <em>all</em> whitespace from the given {@code CharSequence}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code CharSequence} to check\r\n * @return the trimmed {@code CharSequence}\r\n * @since 5.3.22\r\n * @see #trimAllWhitespace(String)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static CharSequence trimAllWhitespace(CharSequence str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int len = str.length();\r\n    StringBuilder sb = new StringBuilder(str.length());\r\n    for (int i = 0; i < len; i++) {\r\n        char c = str.charAt(i);\r\n        if (!Character.isWhitespace(c)) {\r\n            sb.append(c);\r\n        }\r\n    }\r\n    return sb;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimAllWhitespace(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimAllWhitespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim <em>all</em> whitespace from the given {@code String}:\r\n * leading, trailing, and in between characters.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see #trimAllWhitespace(CharSequence)\r\n * @see java.lang.Character#isWhitespace\r\n */\r\npublic static String trimAllWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return trimAllWhitespace((CharSequence) str).toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimAllWhitespace(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimLeadingWhitespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim leading whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripLeading()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimLeadingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripLeading();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimLeadingWhitespace(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimLeadingWhitespace(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#trimTrailingWhitespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim trailing whitespace from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @return the trimmed {@code String}\r\n * @see java.lang.Character#isWhitespace\r\n * @deprecated since 6.0, in favor of {@link String#stripTrailing()}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static String trimTrailingWhitespace(String str) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    return str.stripTrailing();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimTrailingWhitespace(String)",
    "tailType": "method"
  }
]