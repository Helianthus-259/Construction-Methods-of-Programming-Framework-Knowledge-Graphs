[
  {
    "head": "org.springframework.core.io.PathResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getDescription() {\r\n    return \"path [\" + this.path.toAbsolutePath() + \"]\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getDescription()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation compares the underlying {@link Path} references.\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof PathResource that && this.path.equals(that.path)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the hash code of the underlying {@link Path} reference.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return this.path.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ProtocolResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ProtocolResolver",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ProtocolResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A resolution strategy for protocol-specific resource handles.\n *\n * <p>Used as an SPI for {@link DefaultResourceLoader}, allowing for\n * custom protocols to be handled without subclassing the loader\n * implementation (or application context implementation).\n *\n * @author Juergen Hoeller\n * @since 4.3\n * @see DefaultResourceLoader#addProtocolResolver\n */\n@FunctionalInterface\npublic interface ProtocolResolver {\n\n\t/**\n\t * Resolve the given location against the given resource loader\n\t * if this implementation's protocol matches.\n\t * @param location the user-specified resource location\n\t * @param resourceLoader the associated resource loader\n\t * @return a corresponding {@code Resource} handle if the given location\n\t * matches this resolver's protocol, or {@code null} otherwise\n\t */\n\t@Nullable Resource resolve(String location, ResourceLoader resourceLoader);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ProtocolResolver#resolve(String,ResourceLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given location against the given resource loader\r\n * if this implementation's protocol matches.\r\n * @param location the user-specified resource location\r\n * @param resourceLoader the associated resource loader\r\n * @return a corresponding {@code Resource} handle if the given location\r\n * matches this resolver's protocol, or {@code null} otherwise\r\n */\r\n@Nullable\r\nResource resolve(String location, ResourceLoader resourceLoader);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ProtocolResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ProtocolResolver#resolve(String,ResourceLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ProtocolResolver#resolve(String,ResourceLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.Resource",
    "tailType": "class"
  }
]