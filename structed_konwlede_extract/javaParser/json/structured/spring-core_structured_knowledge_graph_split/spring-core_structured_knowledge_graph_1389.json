[
  {
    "head": "org.springframework.util.StopWatch#stop()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Stop the current task.\r\n * <p>The results are undefined if timing methods are called without invoking\r\n * at least one pair of {@code start()} / {@code stop()} methods.\r\n * @see #start()\r\n * @see #start(String)\r\n */\r\npublic void stop() throws IllegalStateException {\r\n    if (this.currentTaskName == null) {\r\n        throw new IllegalStateException(\"Can't stop StopWatch: it's not running\");\r\n    }\r\n    long lastTime = System.nanoTime() - this.startTimeNanos;\r\n    this.totalTimeNanos += lastTime;\r\n    this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime);\r\n    if (this.taskList != null) {\r\n        this.taskList.add(this.lastTaskInfo);\r\n    }\r\n    ++this.taskCount;\r\n    this.currentTaskName = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#stop()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#isRunning()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether this {@code StopWatch} is currently running.\r\n * @see #currentTaskName()\r\n */\r\npublic boolean isRunning() {\r\n    return (this.currentTaskName != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#isRunning()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#currentTaskName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the name of the currently running task, if any.\r\n * @since 4.2.2\r\n * @see #isRunning()\r\n */\r\n@Nullable\r\npublic String currentTaskName() {\r\n    return this.currentTaskName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#currentTaskName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#currentTaskName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StopWatch#lastTaskInfo()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the last task as a {@link TaskInfo} object.\r\n * @throws IllegalStateException if no tasks have run yet\r\n * @since 6.1\r\n */\r\npublic TaskInfo lastTaskInfo() throws IllegalStateException {\r\n    Assert.state(this.lastTaskInfo != null, \"No tasks run\");\r\n    return this.lastTaskInfo;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#lastTaskInfo()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskInfo()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the last task as a {@link TaskInfo} object.\r\n * @deprecated as of 6.1, in favor of {@link #lastTaskInfo()}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic TaskInfo getLastTaskInfo() throws IllegalStateException {\r\n    return lastTaskInfo();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getLastTaskInfo()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskInfo()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the name of the last task.\r\n * @see TaskInfo#getTaskName()\r\n * @deprecated as of 6.1, in favor of {@link #lastTaskInfo()}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic String getLastTaskName() throws IllegalStateException {\r\n    return lastTaskInfo().getTaskName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getLastTaskName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskTimeNanos()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the time taken by the last task in nanoseconds.\r\n * @since 5.2\r\n * @see TaskInfo#getTimeNanos()\r\n * @deprecated as of 6.1, in favor of {@link #lastTaskInfo()}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic long getLastTaskTimeNanos() throws IllegalStateException {\r\n    return lastTaskInfo().getTimeNanos();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getLastTaskTimeNanos()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskTimeNanos()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StopWatch#getLastTaskTimeMillis()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the time taken by the last task in milliseconds.\r\n * @see TaskInfo#getTimeMillis()\r\n * @deprecated as of 6.1, in favor of {@link #lastTaskInfo()}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic long getLastTaskTimeMillis() throws IllegalStateException {\r\n    return lastTaskInfo().getTimeMillis();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getLastTaskTimeMillis()",
    "tailType": "method"
  }
]