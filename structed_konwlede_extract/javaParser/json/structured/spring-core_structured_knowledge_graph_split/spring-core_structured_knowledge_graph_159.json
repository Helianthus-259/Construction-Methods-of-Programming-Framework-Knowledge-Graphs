[
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#publicInterfaceMethodDeclaredInNonPublicClassWithLateBindingOfClassMethodToSubclassDeclaredInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateSubclassOverridesPropertyInPublicInterface() throws Exception {\r\n    Method originalMethod = PrivateSubclass.class.getDeclaredMethod(\"getText\");\r\n    // Prerequisite: type must not be public for this use case.\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(PublicInterface.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"getText\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPrivateInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateSubclassOverridesPropertyInPrivateInterface() throws Exception {\r\n    Method originalMethod = PrivateSubclass.class.getDeclaredMethod(\"getMessage\");\r\n    // Prerequisite: type must not be public for this use case.\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    // Should not find the interface method in PrivateInterface.\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(PublicSuperclass.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"getMessage\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPrivateInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPrivateInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateSubclassOverridesPropertyInPublicSuperclass() throws Exception {\r\n    Method originalMethod = PrivateSubclass.class.getDeclaredMethod(\"getNumber\");\r\n    // Prerequisite: type must not be public for this use case.\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(PublicSuperclass.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"getNumber\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).isEmpty();\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#privateSubclassOverridesPropertyInPublicSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicates",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicates",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.aot.hint.ProxyHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.util.Assert;\n\n/**\n * Generator of {@link ProxyHints} predicates, testing whether the given hints\n * match the expected behavior for proxies.\n *\n * @author Brian Clozel\n * @since 6.0\n */\npublic class ProxyHintsPredicates {\n\n\tProxyHintsPredicates() {\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a {@link org.springframework.aot.hint.JdkProxyHint}\n\t * is registered for the given interfaces.\n\t * <p>Note that the order in which interfaces are given matters.\n\t * @param interfaces the proxied interfaces\n\t * @return the {@link RuntimeHints} predicate\n\t * @see java.lang.reflect.Proxy\n\t */\n\tpublic Predicate<RuntimeHints> forInterfaces(Class<?>... interfaces) {\n\t\tAssert.notEmpty(interfaces, \"'interfaces' should not be empty\");\n\t\treturn forInterfaces(Arrays.stream(interfaces).map(TypeReference::of).toArray(TypeReference[]::new));\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a {@link org.springframework.aot.hint.JdkProxyHint}\n\t * is registered for the given interfaces.\n\t * <p>Note that the order in which interfaces are given matters.\n\t * @param interfaces the proxied interfaces as type references\n\t * @return the {@link RuntimeHints} predicate\n\t * @see java.lang.reflect.Proxy\n\t */\n\tpublic Predicate<RuntimeHints> forInterfaces(TypeReference... interfaces) {\n\t\tAssert.notEmpty(interfaces, \"'interfaces' should not be empty\");\n\t\tList<TypeReference> interfaceList = Arrays.asList(interfaces);\n\t\treturn hints -> hints.proxies().jdkProxyHints().anyMatch(proxyHint ->\n\t\t\t\tproxyHint.getProxiedInterfaces().equals(interfaceList));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#packagePrivateSubclassOverridesMethodInPublicInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid packagePrivateSubclassOverridesMethodInPublicInterface() throws Exception {\r\n    List<String> unmodifiableList = Collections.unmodifiableList(Arrays.asList(\"foo\", \"bar\"));\r\n    Class<?> targetClass = unmodifiableList.getClass();\r\n    // Prerequisites for this use case:\r\n    assertNotPublic(targetClass);\r\n    Method originalMethod = targetClass.getMethod(\"contains\", Object.class);\r\n    // Prerequisite: type must not be public for this use case.\r\n    assertNotPublic(originalMethod.getDeclaringClass());\r\n    Method publiclyAccessibleMethod = ClassUtils.getPubliclyAccessibleMethodIfPossible(originalMethod, null);\r\n    assertThat(publiclyAccessibleMethod.getDeclaringClass()).isEqualTo(Collection.class);\r\n    assertThat(publiclyAccessibleMethod.getName()).isEqualTo(\"contains\");\r\n    assertThat(publiclyAccessibleMethod.getParameterTypes()).containsExactly(Object.class);\r\n    assertPubliclyAccessible(publiclyAccessibleMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.GetPubliclyAccessibleMethodTests#packagePrivateSubclassOverridesMethodInPublicInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.GetPubliclyAccessibleMethodTests#packagePrivateSubclassOverridesMethodInPublicInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicates#forInterfaces(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a {@link org.springframework.aot.hint.JdkProxyHint}\r\n * is registered for the given interfaces.\r\n * <p>Note that the order in which interfaces are given matters.\r\n * @param interfaces the proxied interfaces\r\n * @return the {@link RuntimeHints} predicate\r\n * @see java.lang.reflect.Proxy\r\n */\r\npublic Predicate<RuntimeHints> forInterfaces(Class<?>... interfaces) {\r\n    Assert.notEmpty(interfaces, \"'interfaces' should not be empty\");\r\n    return forInterfaces(Arrays.stream(interfaces).map(TypeReference::of).toArray(TypeReference[]::new));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicates#forInterfaces(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicates#forInterfaces(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a {@link org.springframework.aot.hint.JdkProxyHint}\r\n * is registered for the given interfaces.\r\n * <p>Note that the order in which interfaces are given matters.\r\n * @param interfaces the proxied interfaces as type references\r\n * @return the {@link RuntimeHints} predicate\r\n * @see java.lang.reflect.Proxy\r\n */\r\npublic Predicate<RuntimeHints> forInterfaces(TypeReference... interfaces) {\r\n    Assert.notEmpty(interfaces, \"'interfaces' should not be empty\");\r\n    List<TypeReference> interfaceList = Arrays.asList(interfaces);\r\n    return hints -> hints.proxies().jdkProxyHints().anyMatch(proxyHint -> proxyHint.getProxiedInterfaces().equals(interfaceList));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicates#forInterfaces(TypeReference)",
    "tailType": "method"
  }
]