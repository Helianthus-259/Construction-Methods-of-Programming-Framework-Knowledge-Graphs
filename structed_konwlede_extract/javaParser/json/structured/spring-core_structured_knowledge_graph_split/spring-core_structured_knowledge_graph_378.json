[
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid valuesDelegation() {\r\n    MultiValueMap<String, String> mockMap = mock();\r\n    Collection<List<String>> mockValues = mock();\r\n    given(mockMap.values()).willReturn(mockValues);\r\n    Collection<List<String>> values = new UnmodifiableMultiValueMap<>(mockMap).values();\r\n    given(mockValues.size()).willReturn(1);\r\n    assertThat(values).hasSize(1);\r\n    given(mockValues.isEmpty()).willReturn(false);\r\n    assertThat(values.isEmpty()).isFalse();\r\n    given(mockValues.contains(List.of(\"foo\"))).willReturn(true);\r\n    assertThat(mockValues.contains(List.of(\"foo\"))).isTrue();\r\n    given(mockValues.containsAll(List.of(List.of(\"foo\")))).willReturn(true);\r\n    assertThat(mockValues.containsAll(List.of(List.of(\"foo\")))).isTrue();\r\n    Iterator<List<String>> mockIterator = mock(Iterator.class);\r\n    given(mockValues.iterator()).willReturn(mockIterator);\r\n    given(mockIterator.hasNext()).willReturn(false);\r\n    assertThat(values.iterator()).isExhausted();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesDelegation()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid valuesUnsupported() {\r\n    Collection<List<String>> values = new UnmodifiableMultiValueMap<String, String>(new LinkedMultiValueMap<>()).values();\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.add(List.of(\"foo\")));\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.remove(List.of(\"foo\")));\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.addAll(List.of(List.of(\"foo\"))));\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.removeAll(List.of(List.of(\"foo\"))));\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.retainAll(List.of(List.of(\"foo\"))));\r\n    assertThatUnsupportedOperationException().isThrownBy(() -> values.removeIf(s -> true));\r\n    assertThatUnsupportedOperationException().isThrownBy(values::clear);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#valuesUnsupported()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static ThrowableTypeAssert<UnsupportedOperationException> assertThatUnsupportedOperationException() {\r\n    return assertThatExceptionOfType(UnsupportedOperationException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMapTests#assertThatUnsupportedOperationException()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ConstantDynamic",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\nimport java.util.Arrays;\n\n/**\n * A constant whose value is computed at runtime, with a bootstrap method.\n *\n * @author Remi Forax\n */\npublic final class ConstantDynamic {\n\n  /** The constant name (can be arbitrary). */\n  private final String name;\n\n  /** The constant type (must be a field descriptor). */\n  private final String descriptor;\n\n  /** The bootstrap method to use to compute the constant value at runtime. */\n  private final Handle bootstrapMethod;\n\n  /**\n   * The arguments to pass to the bootstrap method, in order to compute the constant value at\n   * runtime.\n   */\n  private final Object[] bootstrapMethodArguments;\n\n  /**\n   * Constructs a new {@link ConstantDynamic}.\n   *\n   * @param name the constant name (can be arbitrary).\n   * @param descriptor the constant type (must be a field descriptor).\n   * @param bootstrapMethod the bootstrap method to use to compute the constant value at runtime.\n   * @param bootstrapMethodArguments the arguments to pass to the bootstrap method, in order to\n   *     compute the constant value at runtime.\n   */\n  public ConstantDynamic(\n      final String name,\n      final String descriptor,\n      final Handle bootstrapMethod,\n      final Object... bootstrapMethodArguments) {\n    this.name = name;\n    this.descriptor = descriptor;\n    this.bootstrapMethod = bootstrapMethod;\n    this.bootstrapMethodArguments = bootstrapMethodArguments;\n  }\n\n  /**\n   * Returns the name of this constant.\n   *\n   * @return the name of this constant.\n   */\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Returns the type of this constant.\n   *\n   * @return the type of this constant, as a field descriptor.\n   */\n  public String getDescriptor() {\n    return descriptor;\n  }\n\n  /**\n   * Returns the bootstrap method used to compute the value of this constant.\n   *\n   * @return the bootstrap method used to compute the value of this constant.\n   */\n  public Handle getBootstrapMethod() {\n    return bootstrapMethod;\n  }\n\n  /**\n   * Returns the number of arguments passed to the bootstrap method, in order to compute the value\n   * of this constant.\n   *\n   * @return the number of arguments passed to the bootstrap method, in order to compute the value\n   *     of this constant.\n   */\n  public int getBootstrapMethodArgumentCount() {\n    return bootstrapMethodArguments.length;\n  }\n\n  /**\n   * Returns an argument passed to the bootstrap method, in order to compute the value of this\n   * constant.\n   *\n   * @param index an argument index, between 0 and {@link #getBootstrapMethodArgumentCount()}\n   *     (exclusive).\n   * @return the argument passed to the bootstrap method, with the given index.\n   */\n  public Object getBootstrapMethodArgument(final int index) {\n    return bootstrapMethodArguments[index];\n  }\n\n  /**\n   * Returns the arguments to pass to the bootstrap method, in order to compute the value of this\n   * constant. WARNING: this array must not be modified, and must not be returned to the user.\n   *\n   * @return the arguments to pass to the bootstrap method, in order to compute the value of this\n   *     constant.\n   */\n  Object[] getBootstrapMethodArgumentsUnsafe() {\n    return bootstrapMethodArguments;\n  }\n\n  /**\n   * Returns the size of this constant.\n   *\n   * @return the size of this constant, i.e., 2 for {@code long} and {@code double}, 1 otherwise.\n   */\n  public int getSize() {\n    char firstCharOfDescriptor = descriptor.charAt(0);\n    return (firstCharOfDescriptor == 'J' || firstCharOfDescriptor == 'D') ? 2 : 1;\n  }\n\n  @Override\n  public boolean equals(final Object object) {\n    if (object == this) {\n      return true;\n    }\n    if (!(object instanceof ConstantDynamic)) {\n      return false;\n    }\n    ConstantDynamic constantDynamic = (ConstantDynamic) object;\n    return name.equals(constantDynamic.name)\n        && descriptor.equals(constantDynamic.descriptor)\n        && bootstrapMethod.equals(constantDynamic.bootstrapMethod)\n        && Arrays.equals(bootstrapMethodArguments, constantDynamic.bootstrapMethodArguments);\n  }\n\n  @Override\n  public int hashCode() {\n    return name.hashCode()\n        ^ Integer.rotateLeft(descriptor.hashCode(), 8)\n        ^ Integer.rotateLeft(bootstrapMethod.hashCode(), 16)\n        ^ Integer.rotateLeft(Arrays.hashCode(bootstrapMethodArguments), 24);\n  }\n\n  @Override\n  public String toString() {\n    return name\n        + \" : \"\n        + descriptor\n        + ' '\n        + bootstrapMethod\n        + ' '\n        + Arrays.toString(bootstrapMethodArguments);\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ConstantDynamic#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ConstantDynamic#descriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#descriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ConstantDynamic#bootstrapMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#bootstrapMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "Handle",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ConstantDynamic#bootstrapMethodArguments",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#bootstrapMethodArguments",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  }
]