[
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newPackage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a handle to the constant pool of the class being build. Does nothing if the constant pool\r\n * already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,\r\n * and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link\r\n *     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link\r\n *     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},\r\n *     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n * @param owner the internal name of the field or method owner class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the name of the field or method.\r\n * @param descriptor the descriptor of the field or method.\r\n * @return the index of a new or already existing method type reference item.\r\n * @deprecated this method is superseded by {@link #newHandle(int, String, String, String,\r\n *     boolean)}.\r\n */\r\n@Deprecated\r\npublic int newHandle(final int tag, final String owner, final String name, final String descriptor) {\r\n    return newHandle(tag, owner, name, descriptor, tag == Opcodes.H_INVOKEINTERFACE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a handle to the constant pool of the class being build. Does nothing if the constant pool\r\n * already contains a similar item. <i>This method is intended for {@link Attribute} sub classes,\r\n * and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param tag the kind of this handle. Must be {@link Opcodes#H_GETFIELD}, {@link\r\n *     Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link\r\n *     Opcodes#H_INVOKEVIRTUAL}, {@link Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL},\r\n *     {@link Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n * @param owner the internal name of the field or method owner class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the name of the field or method.\r\n * @param descriptor the descriptor of the field or method.\r\n * @param isInterface true if the owner is an interface.\r\n * @return the index of a new or already existing method type reference item.\r\n */\r\npublic int newHandle(final int tag, final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    return symbolTable.addConstantMethodHandle(tag, owner, name, descriptor, isInterface).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newHandle(int,String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a dynamic constant reference to the constant pool of the class being build. Does nothing\r\n * if the constant pool already contains a similar item. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param name name of the invoked method.\r\n * @param descriptor field descriptor of the constant type.\r\n * @param bootstrapMethodHandle the bootstrap method.\r\n * @param bootstrapMethodArguments the bootstrap method constant arguments.\r\n * @return the index of a new or already existing dynamic constant reference item.\r\n */\r\npublic int newConstantDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    return symbolTable.addConstantDynamic(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newConstantDynamic(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds an invokedynamic reference to the constant pool of the class being build. Does nothing if\r\n * the constant pool already contains a similar item. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param name name of the invoked method.\r\n * @param descriptor descriptor of the invoke method.\r\n * @param bootstrapMethodHandle the bootstrap method.\r\n * @param bootstrapMethodArguments the bootstrap method constant arguments.\r\n * @return the index of a new or already existing invokedynamic reference item.\r\n */\r\npublic int newInvokeDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    return symbolTable.addConstantInvokeDynamic(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newInvokeDynamic(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newField(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a field reference to the constant pool of the class being build. Does nothing if the\r\n * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}\r\n * sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\r\n * @param name the field's name.\r\n * @param descriptor the field's descriptor.\r\n * @return the index of a new or already existing field reference item.\r\n */\r\npublic int newField(final String owner, final String name, final String descriptor) {\r\n    return symbolTable.addConstantFieldref(owner, name, descriptor).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newField(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a method reference to the constant pool of the class being build. Does nothing if the\r\n * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}\r\n * sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param owner the internal name of the method's owner class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the method's name.\r\n * @param descriptor the method's descriptor.\r\n * @param isInterface {@literal true} if {@code owner} is an interface.\r\n * @return the index of a new or already existing method reference item.\r\n */\r\npublic int newMethod(final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    return symbolTable.addConstantMethodref(owner, name, descriptor, isInterface).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newMethod(String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#newNameType(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a name and type to the constant pool of the class being build. Does nothing if the\r\n * constant pool already contains a similar item. <i>This method is intended for {@link Attribute}\r\n * sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param name a name.\r\n * @param descriptor a type descriptor.\r\n * @return the index of a new or already existing name and type item.\r\n */\r\npublic int newNameType(final String name, final String descriptor) {\r\n    return symbolTable.addConstantNameAndType(name, descriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#newNameType(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#setFlags(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Changes the computation strategy of method properties like max stack size, max number of local\r\n * variables, and frames.\r\n *\r\n * <p><b>WARNING</b>: {@link #setFlags(int)} method changes the behavior of new method visitors\r\n * returned from {@link #visitMethod(int, String, String, String, String[])}. The behavior will be\r\n * changed only after the next method visitor is returned. All the previously returned method\r\n * visitors keep their previous behavior.\r\n *\r\n * @param flags option flags that can be used to modify the default behavior of this class. Must\r\n *     be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}.\r\n */\r\npublic final void setFlags(final int flags) {\r\n    if ((flags & ClassWriter.COMPUTE_FRAMES) != 0) {\r\n        compute = MethodWriter.COMPUTE_ALL_FRAMES;\r\n    } else if ((flags & ClassWriter.COMPUTE_MAXS) != 0) {\r\n        compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL;\r\n    } else {\r\n        compute = MethodWriter.COMPUTE_NOTHING;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#setFlags(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Default method to compute common super classes when computing stack map frames\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the common super type of the two given types. The default implementation of this method\r\n * <i>loads</i> the two given classes and uses the java.lang.Class methods to find the common\r\n * super class. It can be overridden to compute this common super type in other ways, in\r\n * particular without actually loading any class, or to take into account the class that is\r\n * currently being generated by this ClassWriter, which can of course not be loaded since it is\r\n * under construction.\r\n *\r\n * @param type1 the internal name of a class (see {@link Type#getInternalName()}).\r\n * @param type2 the internal name of another class (see {@link Type#getInternalName()}).\r\n * @return the internal name of the common super class of the two given classes (see {@link\r\n *     Type#getInternalName()}).\r\n */\r\nprotected String getCommonSuperClass(final String type1, final String type2) {\r\n    ClassLoader classLoader = getClassLoader();\r\n    Class<?> class1;\r\n    try {\r\n        class1 = Class.forName(type1.replace('/', '.'), false, classLoader);\r\n    } catch (ClassNotFoundException e) {\r\n        throw new TypeNotPresentException(type1, e);\r\n    }\r\n    Class<?> class2;\r\n    try {\r\n        class2 = Class.forName(type2.replace('/', '.'), false, classLoader);\r\n    } catch (ClassNotFoundException e) {\r\n        throw new TypeNotPresentException(type2, e);\r\n    }\r\n    if (class1.isAssignableFrom(class2)) {\r\n        return type1;\r\n    }\r\n    if (class2.isAssignableFrom(class1)) {\r\n        return type2;\r\n    }\r\n    if (class1.isInterface() || class2.isInterface()) {\r\n        return \"java/lang/Object\";\r\n    } else {\r\n        do {\r\n            class1 = class1.getSuperclass();\r\n        } while (!class1.isAssignableFrom(class2));\r\n        return class1.getName().replace('.', '/');\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#getCommonSuperClass(String,String)",
    "tailType": "method"
  }
]