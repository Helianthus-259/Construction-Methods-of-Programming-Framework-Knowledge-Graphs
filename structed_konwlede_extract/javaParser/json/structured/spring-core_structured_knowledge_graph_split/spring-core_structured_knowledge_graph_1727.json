[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithInterfaceOnSuper()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWhenInterfaceWhenSuperDoesNotImplementMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWhenInterfaceWhenSuperDoesNotImplementMethod() throws Exception {\r\n    Method method = SubOfAbstractImplementsInterfaceWithAnnotatedMethod.class.getMethod(\"foo\");\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWhenInterfaceWhenSuperDoesNotImplementMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWhenInterfaceWhenSuperDoesNotImplementMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Component.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubClassWithInheritedAnnotation.class, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.getBoolean(\"readOnly\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubClassWithInheritedMetaAnnotation.class, SearchStrategy.TYPE_HIERARCHY).get(Component.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassgetDirectFromClassMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassgetDirectFromClassMetaMetaAnnotatedClass() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(MetaMetaAnnotatedClass.class, SearchStrategy.TYPE_HIERARCHY).get(Component.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassgetDirectFromClassMetaMetaAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassgetDirectFromClassMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithMetaMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassWithMetaMetaMetaAnnotatedClass() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(MetaMetaMetaAnnotatedClass.class, SearchStrategy.TYPE_HIERARCHY).get(Component.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithMetaMetaMetaAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithMetaMetaMetaAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithAnnotatedClassWithMissingTargetMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassWithAnnotatedClassWithMissingTargetMetaAnnotation() {\r\n    // TransactionalClass is NOT annotated or meta-annotated with @Component\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(TransactionalClass.class, SearchStrategy.TYPE_HIERARCHY).get(Component.class);\r\n    assertThat(annotation.isPresent()).isFalse();\r\n}",
    "tailType": "method_code"
  }
]