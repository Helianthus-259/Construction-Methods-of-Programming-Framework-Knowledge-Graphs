[
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    BulkBean instance = (BulkBean) ReflectUtils.newInstance(type);\r\n    instance.target = target;\r\n    int length = getters.length;\r\n    instance.getters = new String[length];\r\n    System.arraycopy(getters, 0, instance.getters, 0, length);\r\n    instance.setters = new String[length];\r\n    System.arraycopy(setters, 0, instance.setters, 0, length);\r\n    instance.types = new Class[types.length];\r\n    System.arraycopy(types, 0, instance.types, 0, types.length);\r\n    return instance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return instance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.TestGroupsCondition",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.extension.ConditionEvaluationResult;\nimport org.junit.jupiter.api.extension.ExecutionCondition;\nimport org.junit.jupiter.api.extension.ExtensionContext;\n\nimport org.springframework.util.Assert;\n\nimport static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\nimport static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\nimport static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n\n/**\n * {@link ExecutionCondition} for Spring's {@link TestGroup} support.\n *\n * @author Sam Brannen\n * @since 5.2\n * @see EnabledForTestGroups @EnabledForTestGroups\n */\nclass TestGroupsCondition implements ExecutionCondition {\n\n\tprivate static final ConditionEvaluationResult ENABLED_BY_DEFAULT = enabled(\"@EnabledForTestGroups is not present\");\n\n\n\t@Override\n\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n\t\tOptional<EnabledForTestGroups> optional = findAnnotation(context.getElement(), EnabledForTestGroups.class);\n\t\tif (optional.isEmpty()) {\n\t\t\treturn ENABLED_BY_DEFAULT;\n\t\t}\n\t\tTestGroup[] testGroups = optional.get().value();\n\t\tAssert.state(testGroups.length > 0, \"You must declare at least one TestGroup in @EnabledForTestGroups\");\n\t\treturn (Arrays.stream(testGroups).anyMatch(TestGroup::isActive)) ?\n\t\t\t\tenabled(\"Enabled for TestGroups: \" + Arrays.toString(testGroups)) :\n\t\t\t\tdisabled(\"Disabled for TestGroups: \" + Arrays.toString(testGroups));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.TestGroupsCondition#ENABLED_BY_DEFAULT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition#ENABLED_BY_DEFAULT",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConditionEvaluationResult",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\r\n    Optional<EnabledForTestGroups> optional = findAnnotation(context.getElement(), EnabledForTestGroups.class);\r\n    if (optional.isEmpty()) {\r\n        return ENABLED_BY_DEFAULT;\r\n    }\r\n    TestGroup[] testGroups = optional.get().value();\r\n    Assert.state(testGroups.length > 0, \"You must declare at least one TestGroup in @EnabledForTestGroups\");\r\n    return (Arrays.stream(testGroups).anyMatch(TestGroup::isActive)) ? enabled(\"Enabled for TestGroups: \" + Arrays.toString(testGroups)) : disabled(\"Disabled for TestGroups: \" + Arrays.toString(testGroups));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupsCondition#evaluateExecutionCondition(ExtensionContext)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.beans",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.beans",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.beans.BulkBeanEmitter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans.BulkBeanEmitter",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]