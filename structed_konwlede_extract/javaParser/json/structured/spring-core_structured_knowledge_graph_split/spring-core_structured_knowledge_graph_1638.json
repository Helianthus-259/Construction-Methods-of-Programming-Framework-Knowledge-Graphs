[
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\r\n    Method source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\r\n    Class<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass)).containsExactly(\"0:EnclosedThree\");\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList()).containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\r\n    Class<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass)).containsExactly(\"0:EnclosedThree\");\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList()).isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList()).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\", \"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\", \"4:TestAnnotation3\", \"5:TestAnnotation4\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, new AnnotationsProcessor<Object, String>() {\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAggregate(Object context, int aggregateIndex) {\r\n            return \"\";\r\n        }\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAnnotations(Object context, int aggregateIndex, @Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\r\n            throw new IllegalStateException(\"Should not call\");\r\n        }\r\n    });\r\n    assertThat(result).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAggregateExitsEarly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\r\n    List<Integer> indexes = new ArrayList<>();\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, (context, aggregateIndex, source, annotations) -> {\r\n        indexes.add(aggregateIndex);\r\n        return \"\";\r\n    });\r\n    assertThat(result).isEmpty();\r\n    assertThat(indexes).containsExactly(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#scanWhenProcessorHasFinishMethodUsesFinishResult()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\r\n    String result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY, new AnnotationsProcessor<Object, String>() {\r\n\r\n        @Override\r\n        @NonNull\r\n        public String doWithAnnotations(Object context, int aggregateIndex, @Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\r\n            return \"K\";\r\n        }\r\n\r\n        @Override\r\n        @NonNull\r\n        public String finish(@Nullable String result) {\r\n            return \"O\" + result;\r\n        }\r\n    });\r\n    assertThat(result).isEqualTo(\"OK\");\r\n}",
    "tailType": "method_code"
  }
]