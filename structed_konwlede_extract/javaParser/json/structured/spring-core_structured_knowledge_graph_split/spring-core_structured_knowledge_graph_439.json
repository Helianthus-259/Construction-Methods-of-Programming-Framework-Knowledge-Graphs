[
  {
    "head": "org.springframework.asm.MethodVisitor#visitInsnAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on an instruction. This method must be called just <i>after</i> the\r\n * annotated instruction. It can be called several times for the same instruction.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link\r\n *     TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link\r\n *     TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link\r\n *     TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\r\n *     TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link\r\n *     TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitInsnAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(REQUIRES_ASM5);\r\n    }\r\n    if (mv != null) {\r\n        return mv.visitInsnAnnotation(typeRef, typePath, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitInsnAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitTryCatchBlock(Label,Label,Label,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Exceptions table entries, debug information, max stack and max locals\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Visits a try catch block.\r\n *\r\n * @param start the beginning of the exception handler's scope (inclusive).\r\n * @param end the end of the exception handler's scope (exclusive).\r\n * @param handler the beginning of the exception handler's code.\r\n * @param type the internal name of the type of exceptions handled by the handler (see {@link\r\n *     Type#getInternalName()}), or {@literal null} to catch any exceptions (for \"finally\"\r\n *     blocks).\r\n * @throws IllegalArgumentException if one of the labels has already been visited by this visitor\r\n *     (by the {@link #visitLabel} method).\r\n */\r\npublic void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) {\r\n    if (mv != null) {\r\n        mv.visitTryCatchBlock(start, end, handler, type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitTryCatchBlock(Label,Label,Label,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on an exception handler type. This method must be called <i>after</i> the\r\n * {@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times\r\n * for the same exception handler.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitTryCatchAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(REQUIRES_ASM5);\r\n    }\r\n    if (mv != null) {\r\n        return mv.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLocalVariable(String,String,String,Label,Label,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a local variable declaration.\r\n *\r\n * @param name the name of a local variable.\r\n * @param descriptor the type descriptor of this local variable.\r\n * @param signature the type signature of this local variable. May be {@literal null} if the local\r\n *     variable type does not use generic types.\r\n * @param start the first instruction corresponding to the scope of this local variable\r\n *     (inclusive).\r\n * @param end the last instruction corresponding to the scope of this local variable (exclusive).\r\n * @param index the local variable's index.\r\n * @throws IllegalArgumentException if one of the labels has not already been visited by this\r\n *     visitor (by the {@link #visitLabel} method).\r\n */\r\npublic void visitLocalVariable(final String name, final String descriptor, final String signature, final Label start, final Label end, final int index) {\r\n    if (mv != null) {\r\n        mv.visitLocalVariable(name, descriptor, signature, start, end, index);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLocalVariable(String,String,String,Label,Label,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on a local variable type.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\r\n *     TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param start the fist instructions corresponding to the continuous ranges that make the scope\r\n *     of this local variable (inclusive).\r\n * @param end the last instructions corresponding to the continuous ranges that make the scope of\r\n *     this local variable (exclusive). This array must have the same size as the 'start' array.\r\n * @param index the local variable's index in each range. This array must have the same size as\r\n *     the 'start' array.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitLocalVariableAnnotation(final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(REQUIRES_ASM5);\r\n    }\r\n    if (mv != null) {\r\n        return mv.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLineNumber(int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a line number declaration.\r\n *\r\n * @param line a line number. This number refers to the source file from which the class was\r\n *     compiled.\r\n * @param start the first instruction corresponding to this line number.\r\n * @throws IllegalArgumentException if {@code start} has not already been visited by this visitor\r\n *     (by the {@link #visitLabel} method).\r\n */\r\npublic void visitLineNumber(final int line, final Label start) {\r\n    if (mv != null) {\r\n        mv.visitLineNumber(line, start);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLineNumber(int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitMaxs(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the maximum stack size and the maximum number of local variables of the method.\r\n *\r\n * @param maxStack maximum stack size of the method.\r\n * @param maxLocals maximum number of local variables for the method.\r\n */\r\npublic void visitMaxs(final int maxStack, final int maxLocals) {\r\n    if (mv != null) {\r\n        mv.visitMaxs(maxStack, maxLocals);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitMaxs(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the end of the method. This method, which is the last one to be called, is used to\r\n * inform the visitor that all the annotations and attributes of the method have been visited.\r\n */\r\npublic void visitEnd() {\r\n    if (mv != null) {\r\n        mv.visitEnd();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n * @since 6.1\n */\nclass VirtualThreadTaskExecutorTests {\n\n\t@Test\n\tvoid virtualThreadsWithoutName() {\n\t\tfinal Object monitor = new Object();\n\t\tVirtualThreadTaskExecutor executor = new VirtualThreadTaskExecutor();\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEmpty();\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid virtualThreadsWithNamePrefix() {\n\t\tfinal Object monitor = new Object();\n\t\tVirtualThreadTaskExecutor executor = new VirtualThreadTaskExecutor(\"test-\");\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEqualTo(\"test-0\");\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid simpleWithVirtualThreadFactory() {\n\t\tfinal Object monitor = new Object();\n\t\tSimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(Thread.ofVirtual().name(\"test\").factory());\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEqualTo(\"test\");\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid simpleWithVirtualThreadFlag() {\n\t\tfinal String customPrefix = \"chankPop#\";\n\t\tfinal Object monitor = new Object();\n\t\tSimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(customPrefix);\n\t\texecutor.setVirtualThreads(true);\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).startsWith(customPrefix);\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\tprivate void executeAndWait(TaskExecutor executor, Runnable task, Object monitor) {\n\t\tsynchronized (monitor) {\n\t\t\texecutor.execute(task);\n\t\t\ttry {\n\t\t\t\tmonitor.wait();\n\t\t\t}\n\t\t\tcatch (InterruptedException ignored) {\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate static final class NoOpRunnable implements Runnable {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\n\tprivate abstract static class AbstractNotifyingRunnable implements Runnable {\n\n\t\tprivate final Object monitor;\n\n\t\tprotected AbstractNotifyingRunnable(Object monitor) {\n\t\t\tthis.monitor = monitor;\n\t\t}\n\n\t\t@Override\n\t\tpublic final void run() {\n\t\t\tsynchronized (this.monitor) {\n\t\t\t\ttry {\n\t\t\t\t\tdoRun();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tthis.monitor.notifyAll();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract void doRun();\n\t}\n\n\n\tprivate static final class ThreadNameHarvester extends AbstractNotifyingRunnable {\n\n\t\tprivate final AtomicInteger runCount = new AtomicInteger();\n\n\t\tprivate String threadName;\n\n\t\tprivate boolean virtual;\n\n\t\tprotected ThreadNameHarvester(Object monitor) {\n\t\t\tsuper(monitor);\n\t\t}\n\n\t\tpublic String getThreadName() {\n\t\t\treturn this.threadName;\n\t\t}\n\n\t\tpublic boolean isVirtual() {\n\t\t\treturn this.virtual;\n\t\t}\n\n\t\tpublic int runCount() {\n\t\t\treturn this.runCount.get();\n\t\t}\n\n\t\t@Override\n\t\tprotected void doRun() {\n\t\t\tThread thread = Thread.currentThread();\n\t\t\tthis.threadName = thread.getName();\n\t\t\tthis.virtual = thread.isVirtual();\n\t\t\trunCount.incrementAndGet();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutorTests#virtualThreadsWithoutName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid virtualThreadsWithoutName() {\r\n    final Object monitor = new Object();\r\n    VirtualThreadTaskExecutor executor = new VirtualThreadTaskExecutor();\r\n    ThreadNameHarvester task = new ThreadNameHarvester(monitor);\r\n    executeAndWait(executor, task, monitor);\r\n    assertThat(task.getThreadName()).isEmpty();\r\n    assertThat(task.isVirtual()).isTrue();\r\n    assertThat(task.runCount()).isOne();\r\n}",
    "tailType": "method_code"
  }
]