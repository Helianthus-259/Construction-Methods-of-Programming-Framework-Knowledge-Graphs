[
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(File,File)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(byte[],File)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given byte array to the given output File.\r\n * @param in the byte array to copy from\r\n * @param out the file to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(byte[] in, File out) throws IOException {\r\n    Assert.notNull(in, \"No input byte array specified\");\r\n    Assert.notNull(out, \"No output File specified\");\r\n    copy(new ByteArrayInputStream(in), Files.newOutputStream(out.toPath()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(byte[],File)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copyToByteArray(File)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given input File into a new byte array.\r\n * @param in the file to copy from\r\n * @return the new byte array that has been copied to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static byte[] copyToByteArray(File in) throws IOException {\r\n    Assert.notNull(in, \"No input File specified\");\r\n    return copyToByteArray(Files.newInputStream(in.toPath()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copyToByteArray(File)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(InputStream,OutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Copy methods for java.io.InputStream / java.io.OutputStream\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the contents of the given InputStream to the given OutputStream.\r\n * Closes both streams when done.\r\n * @param in the stream to copy from\r\n * @param out the stream to copy to\r\n * @return the number of bytes copied\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static int copy(InputStream in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No InputStream specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    try (in;\r\n        out) {\r\n        int count = (int) in.transferTo(out);\r\n        out.flush();\r\n        return count;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(InputStream,OutputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(byte[],OutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given byte array to the given OutputStream.\r\n * Closes the stream when done.\r\n * @param in the byte array to copy from\r\n * @param out the OutputStream to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(byte[] in, OutputStream out) throws IOException {\r\n    Assert.notNull(in, \"No input byte array specified\");\r\n    Assert.notNull(out, \"No OutputStream specified\");\r\n    try {\r\n        out.write(in);\r\n    } finally {\r\n        close(out);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(byte[],OutputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copyToByteArray(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given InputStream into a new byte array.\r\n * Closes the stream when done.\r\n * @param in the stream to copy from (may be {@code null} or empty)\r\n * @return the new byte array that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {\r\n    if (in == null) {\r\n        return new byte[0];\r\n    }\r\n    try (in) {\r\n        return in.readAllBytes();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copyToByteArray(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(Reader,Writer)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Copy methods for java.io.Reader / java.io.Writer\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the contents of the given Reader to the given Writer.\r\n * Closes both when done.\r\n * @param in the Reader to copy from\r\n * @param out the Writer to copy to\r\n * @return the number of characters copied\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static int copy(Reader in, Writer out) throws IOException {\r\n    Assert.notNull(in, \"No Reader specified\");\r\n    Assert.notNull(out, \"No Writer specified\");\r\n    try {\r\n        int charCount = 0;\r\n        char[] buffer = new char[BUFFER_SIZE];\r\n        int charsRead;\r\n        while ((charsRead = in.read(buffer)) != -1) {\r\n            out.write(buffer, 0, charsRead);\r\n            charCount += charsRead;\r\n        }\r\n        out.flush();\r\n        return charCount;\r\n    } finally {\r\n        close(in);\r\n        close(out);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(Reader,Writer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copy(String,Writer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given String to the given Writer.\r\n * Closes the writer when done.\r\n * @param in the String to copy from\r\n * @param out the Writer to copy to\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static void copy(String in, Writer out) throws IOException {\r\n    Assert.notNull(in, \"No input String specified\");\r\n    Assert.notNull(out, \"No Writer specified\");\r\n    try {\r\n        out.write(in);\r\n    } finally {\r\n        close(out);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copy(String,Writer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#copyToString(Reader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the contents of the given Reader into a String.\r\n * Closes the reader when done.\r\n * @param in the reader to copy from (may be {@code null} or empty)\r\n * @return the String that has been copied to (possibly empty)\r\n * @throws IOException in case of I/O errors\r\n */\r\npublic static String copyToString(@Nullable Reader in) throws IOException {\r\n    if (in == null) {\r\n        return \"\";\r\n    }\r\n    StringWriter out = new StringWriter(BUFFER_SIZE);\r\n    copy(in, out);\r\n    return out.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#copyToString(Reader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtils#close(Closeable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Attempt to close the supplied {@link Closeable}, silently swallowing any\r\n * exceptions.\r\n * @param closeable the {@code Closeable} to close\r\n */\r\nprivate static void close(Closeable closeable) {\r\n    try {\r\n        closeable.close();\r\n    } catch (IOException ex) {\r\n        // ignore\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtils#close(Closeable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]