[
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decode() {\r\n    CharBuffer u = charBuffer(\"ü\");\r\n    CharBuffer e = charBuffer(\"é\");\r\n    CharBuffer o = charBuffer(\"ø\");\r\n    String s = String.format(\"%s\\n%s\\n%s\", u, e, o);\r\n    Flux<DataBuffer> input = toDataBuffers(s, 1, UTF_8);\r\n    testDecodeAll(input, TYPE, step -> step.expectNext(u, e, o).verifyComplete(), null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#decode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeMultibyteCharacterUtf16()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeMultibyteCharacterUtf16() {\r\n    CharBuffer u = charBuffer(\"ü\");\r\n    CharBuffer e = charBuffer(\"é\");\r\n    CharBuffer o = charBuffer(\"ø\");\r\n    String s = String.format(\"%s\\n%s\\n%s\", u, e, o);\r\n    Flux<DataBuffer> source = toDataBuffers(s, 2, UTF_16BE);\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(\"text/plain;charset=utf-16be\");\r\n    testDecode(source, TYPE, step -> step.expectNext(u, e, o).verifyComplete(), mimeType, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#decodeMultibyteCharacterUtf16()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeMultibyteCharacterUtf16()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#toDataBuffers(String,int,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Flux<DataBuffer> toDataBuffers(String s, int length, Charset charset) {\r\n    byte[] bytes = s.getBytes(charset);\r\n    List<byte[]> chunks = new ArrayList<>();\r\n    for (int i = 0; i < bytes.length; i += length) {\r\n        chunks.add(Arrays.copyOfRange(bytes, i, i + length));\r\n    }\r\n    return Flux.fromIterable(chunks).map(chunk -> {\r\n        DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(length);\r\n        dataBuffer.write(chunk, 0, chunk.length);\r\n        return dataBuffer;\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#toDataBuffers(String,int,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewLine()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeNewLine() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"\\r\\nabc\\n\"), stringBuffer(\"def\"), stringBuffer(\"ghi\\r\\n\\n\"), stringBuffer(\"jkl\"), stringBuffer(\"mno\\npqr\\n\"), stringBuffer(\"stu\"), stringBuffer(\"vw\"), stringBuffer(\"xyz\"));\r\n    testDecode(input, CharBuffer.class, step -> step.expectNext(charBuffer(\"\")).as(\"1st\").expectNext(charBuffer(\"abc\")).expectNext(charBuffer(\"defghi\")).expectNext(charBuffer(\"\")).as(\"2nd\").expectNext(charBuffer(\"jklmno\")).expectNext(charBuffer(\"pqr\")).expectNext(charBuffer(\"stuvwxyz\")).expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewLine()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewLine()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewlinesAcrossBuffers()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeNewlinesAcrossBuffers() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"\\r\"), stringBuffer(\"\\n\"), stringBuffer(\"xyz\"));\r\n    testDecode(input, CharBuffer.class, step -> step.expectNext(charBuffer(\"\")).expectNext(charBuffer(\"xyz\")).expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewlinesAcrossBuffers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeNewlinesAcrossBuffers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#maxInMemoryLimit()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxInMemoryLimit() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"abc\\n\"), stringBuffer(\"defg\\n\"), stringBuffer(\"hi\"), stringBuffer(\"jkl\"), stringBuffer(\"mnop\"));\r\n    this.decoder.setMaxInMemorySize(5);\r\n    testDecode(input, CharBuffer.class, step -> step.expectNext(charBuffer(\"abc\")).expectNext(charBuffer(\"defg\")).verifyError(DataBufferLimitException.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#maxInMemoryLimit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#maxInMemoryLimit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]