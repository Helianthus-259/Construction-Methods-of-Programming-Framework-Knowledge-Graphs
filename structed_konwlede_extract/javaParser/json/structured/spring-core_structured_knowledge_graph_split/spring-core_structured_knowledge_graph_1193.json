[
  {
    "head": "org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Read basic class metadata for the underlying class.\r\n */\r\nClassMetadata getClassMetadata();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MetadataReader#getClassMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Read full annotation metadata for the underlying class,\r\n * including metadata for annotated methods.\r\n */\r\nAnnotationMetadata getAnnotationMetadata();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.MetadataReaderFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReaderFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.IOException;\n\nimport org.springframework.core.io.Resource;\n\n/**\n * Factory interface for {@link MetadataReader} instances.\n * Allows for caching a MetadataReader per original resource.\n *\n * @author Juergen Hoeller\n * @since 2.5\n * @see SimpleMetadataReaderFactory\n * @see CachingMetadataReaderFactory\n */\npublic interface MetadataReaderFactory {\n\n\t/**\n\t * Obtain a MetadataReader for the given class name.\n\t * @param className the class name (to be resolved to a \".class\" file)\n\t * @return a holder for the ClassReader instance (never {@code null})\n\t * @throws ClassFormatException in case of an incompatible class format\n\t * @throws IOException in case of I/O failure\n\t */\n\tMetadataReader getMetadataReader(String className) throws IOException;\n\n\t/**\n\t * Obtain a MetadataReader for the given resource.\n\t * @param resource the resource (pointing to a \".class\" file)\n\t * @return a holder for the ClassReader instance (never {@code null})\n\t * @throws ClassFormatException in case of an incompatible class format\n\t * @throws IOException in case of I/O failure\n\t */\n\tMetadataReader getMetadataReader(Resource resource) throws IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReaderFactory#getMetadataReader(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a MetadataReader for the given class name.\r\n * @param className the class name (to be resolved to a \".class\" file)\r\n * @return a holder for the ClassReader instance (never {@code null})\r\n * @throws ClassFormatException in case of an incompatible class format\r\n * @throws IOException in case of I/O failure\r\n */\r\nMetadataReader getMetadataReader(String className) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReaderFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MetadataReaderFactory#getMetadataReader(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReaderFactory#getMetadataReader(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a MetadataReader for the given resource.\r\n * @param resource the resource (pointing to a \".class\" file)\r\n * @return a holder for the ClassReader instance (never {@code null})\r\n * @throws ClassFormatException in case of an incompatible class format\r\n * @throws IOException in case of I/O failure\r\n */\r\nMetadataReader getMetadataReader(Resource resource) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReaderFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MetadataReaderFactory#getMetadataReader(Resource)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.asm.Opcodes;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.core.type.MethodMetadata;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link AnnotationMetadata} created from a\n * {@link SimpleAnnotationMetadataReadingVisitor}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @author Juergen Hoeller\n * @since 5.2\n */\nfinal class SimpleAnnotationMetadata implements AnnotationMetadata {\n\n\tprivate final String className;\n\n\tprivate final int access;\n\n\tprivate final @Nullable String enclosingClassName;\n\n\tprivate final @Nullable String superClassName;\n\n\tprivate final boolean independentInnerClass;\n\n\tprivate final Set<String> interfaceNames;\n\n\tprivate final Set<String> memberClassNames;\n\n\tprivate final Set<MethodMetadata> declaredMethods;\n\n\tprivate final MergedAnnotations mergedAnnotations;\n\n\tprivate @Nullable Set<String> annotationTypes;\n\n\n\tSimpleAnnotationMetadata(String className, int access, @Nullable String enclosingClassName,\n\t\t\t@Nullable String superClassName, boolean independentInnerClass, Set<String> interfaceNames,\n\t\t\tSet<String> memberClassNames, Set<MethodMetadata> declaredMethods, MergedAnnotations mergedAnnotations) {\n\n\t\tthis.className = className;\n\t\tthis.access = access;\n\t\tthis.enclosingClassName = enclosingClassName;\n\t\tthis.superClassName = superClassName;\n\t\tthis.independentInnerClass = independentInnerClass;\n\t\tthis.interfaceNames = interfaceNames;\n\t\tthis.memberClassNames = memberClassNames;\n\t\tthis.declaredMethods = declaredMethods;\n\t\tthis.mergedAnnotations = mergedAnnotations;\n\t}\n\n\t@Override\n\tpublic String getClassName() {\n\t\treturn this.className;\n\t}\n\n\t@Override\n\tpublic boolean isInterface() {\n\t\treturn (this.access & Opcodes.ACC_INTERFACE) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isAnnotation() {\n\t\treturn (this.access & Opcodes.ACC_ANNOTATION) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isAbstract() {\n\t\treturn (this.access & Opcodes.ACC_ABSTRACT) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isFinal() {\n\t\treturn (this.access & Opcodes.ACC_FINAL) != 0;\n\t}\n\n\t@Override\n\tpublic boolean isIndependent() {\n\t\treturn (this.enclosingClassName == null || this.independentInnerClass);\n\t}\n\n\t@Override\n\tpublic @Nullable String getEnclosingClassName() {\n\t\treturn this.enclosingClassName;\n\t}\n\n\t@Override\n\tpublic @Nullable String getSuperClassName() {\n\t\treturn this.superClassName;\n\t}\n\n\t@Override\n\tpublic String[] getInterfaceNames() {\n\t\treturn StringUtils.toStringArray(this.interfaceNames);\n\t}\n\n\t@Override\n\tpublic String[] getMemberClassNames() {\n\t\treturn StringUtils.toStringArray(this.memberClassNames);\n\t}\n\n\t@Override\n\tpublic MergedAnnotations getAnnotations() {\n\t\treturn this.mergedAnnotations;\n\t}\n\n\t@Override\n\tpublic Set<String> getAnnotationTypes() {\n\t\tSet<String> annotationTypes = this.annotationTypes;\n\t\tif (annotationTypes == null) {\n\t\t\tannotationTypes = Collections.unmodifiableSet(\n\t\t\t\t\tAnnotationMetadata.super.getAnnotationTypes());\n\t\t\tthis.annotationTypes = annotationTypes;\n\t\t}\n\t\treturn annotationTypes;\n\t}\n\n\t@Override\n\tpublic Set<MethodMetadata> getAnnotatedMethods(String annotationName) {\n\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);\n\t\tfor (MethodMetadata annotatedMethod : this.declaredMethods) {\n\t\t\tif (annotatedMethod.isAnnotated(annotationName)) {\n\t\t\t\tresult.add(annotatedMethod);\n\t\t\t}\n\t\t}\n\t\treturn Collections.unmodifiableSet(result);\n\t}\n\n\t@Override\n\tpublic Set<MethodMetadata> getDeclaredMethods() {\n\t\treturn Collections.unmodifiableSet(this.declaredMethods);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof SimpleAnnotationMetadata that && this.className.equals(that.className)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.className.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.className;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadata#className",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata#className",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadata#access",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata#access",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadata#enclosingClassName",
    "tailType": "field"
  }
]