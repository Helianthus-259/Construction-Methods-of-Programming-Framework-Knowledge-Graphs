[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForMapSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createMapArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createMapArray() {\r\n    TypeDescriptor mapType = TypeDescriptor.map(LinkedHashMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));\r\n    TypeDescriptor arrayType = TypeDescriptor.array(mapType);\r\n    assertThat(LinkedHashMap[].class).isEqualTo(arrayType.getType());\r\n    assertThat(mapType).isEqualTo(arrayType.getElementTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#createMapArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createMapArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createStringArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createStringArray() {\r\n    TypeDescriptor arrayType = TypeDescriptor.array(TypeDescriptor.valueOf(String.class));\r\n    assertThat(TypeDescriptor.valueOf(String[].class)).isEqualTo(arrayType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#createStringArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createStringArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createNullArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createNullArray() {\r\n    assertThat((Object) TypeDescriptor.array(null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#createNullArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createNullArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#serializable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializable() throws Exception {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.forObject(\"\");\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    ObjectOutputStream outputStream = new ObjectOutputStream(out);\r\n    outputStream.writeObject(typeDescriptor);\r\n    ObjectInputStream inputStream = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\r\n    TypeDescriptor readObject = (TypeDescriptor) inputStream.readObject();\r\n    assertThat(readObject).isEqualTo(typeDescriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#serializable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#serializable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createCollectionWithNullElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createCollectionWithNullElement() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.collection(List.class, null);\r\n    assertThat(typeDescriptor.getElementTypeDescriptor()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#createCollectionWithNullElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createCollectionWithNullElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createMapWithNullElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createMapWithNullElements() {\r\n    TypeDescriptor typeDescriptor = TypeDescriptor.map(LinkedHashMap.class, null, null);\r\n    assertThat(typeDescriptor.getMapKeyTypeDescriptor()).isNull();\r\n    assertThat(typeDescriptor.getMapValueTypeDescriptor()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#createMapWithNullElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#createMapWithNullElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSource() throws Exception {\r\n    Field field = getClass().getField(\"fieldScalar\");\r\n    MethodParameter methodParameter = new MethodParameter(getClass().getMethod(\"testParameterPrimitive\", int.class), 0);\r\n    assertThat(new TypeDescriptor(field).getSource()).isEqualTo(field);\r\n    assertThat(new TypeDescriptor(methodParameter).getSource()).isEqualTo(methodParameter);\r\n    assertThat(TypeDescriptor.valueOf(Integer.class).getSource()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  }
]