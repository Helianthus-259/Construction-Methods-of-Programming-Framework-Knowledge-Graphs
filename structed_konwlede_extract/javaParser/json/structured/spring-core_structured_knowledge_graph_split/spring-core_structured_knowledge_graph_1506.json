[
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#getNameReturnsName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNameReturnsName() {\r\n    GeneratedMethod generatedMethod = new GeneratedMethod(TEST_CLASS_NAME, NAME, emptyMethod);\r\n    assertThat(generatedMethod.getName()).isSameAs(NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#getNameReturnsName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#getNameReturnsName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecReturnsMethodSpec()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateMethodSpecReturnsMethodSpec() {\r\n    GeneratedMethod generatedMethod = create(method -> method.addJavadoc(\"Test\"));\r\n    assertThat(generatedMethod.getMethodSpec().javadoc).asString().contains(\"Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecReturnsMethodSpec()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecReturnsMethodSpec()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecWhenMethodNameIsChangedThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateMethodSpecWhenMethodNameIsChangedThrowsException() {\r\n    assertThatIllegalStateException().isThrownBy(() -> create(method -> method.setName(\"badname\")).getMethodSpec()).withMessage(\"'method' consumer must not change the generated method name\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecWhenMethodNameIsChangedThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#generateMethodSpecWhenMethodNameIsChangedThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithInstanceMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toMethodReferenceWithInstanceMethod() {\r\n    GeneratedMethod generatedMethod = create(emptyMethod);\r\n    MethodReference methodReference = generatedMethod.toMethodReference();\r\n    assertThat(methodReference).isNotNull();\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"spring()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithInstanceMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithInstanceMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithStaticMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toMethodReferenceWithStaticMethod() {\r\n    GeneratedMethod generatedMethod = create(method -> method.addModifiers(Modifier.STATIC));\r\n    MethodReference methodReference = generatedMethod.toMethodReference();\r\n    assertThat(methodReference).isNotNull();\r\n    ClassName anotherDeclaringClass = ClassName.get(\"com.example\", \"Another\");\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), anotherDeclaringClass)).isEqualTo(CodeBlock.of(\"com.example.Test.spring()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithStaticMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#toMethodReferenceWithStaticMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests#create(Consumer<MethodSpec.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private GeneratedMethod create(Consumer<MethodSpec.Builder> method) {\r\n    return new GeneratedMethod(TEST_CLASS_NAME, NAME, method);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodTests#create(Consumer<MethodSpec.Builder>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.javapoet.ClassName;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link GeneratedTypeReference}.\n *\n * @author Stephane Nicoll\n */\nclass GeneratedTypeReferenceTests {\n\n\n\t@ParameterizedTest\n\t@MethodSource(\"reflectionTargetNames\")\n\tvoid hasSuitableReflectionTargetName(TypeReference typeReference, String binaryName) {\n\t\tassertThat(typeReference.getName()).isEqualTo(binaryName);\n\t}\n\n\tstatic Stream<Arguments> reflectionTargetNames() {\n\t\treturn Stream.of(\n\t\t\t\tArguments.of(GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\")), \"com.example.Test\"),\n\t\t\t\tArguments.of(GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\", \"Inner\")), \"com.example.Test$Inner\"));\n\t}\n\n\t@Test\n\tvoid createWithClassName() {\n\t\tGeneratedTypeReference typeReference = GeneratedTypeReference.of(\n\t\t\t\tClassName.get(\"com.example\", \"Test\"));\n\t\tassertThat(typeReference.getPackageName()).isEqualTo(\"com.example\");\n\t\tassertThat(typeReference.getSimpleName()).isEqualTo(\"Test\");\n\t\tassertThat(typeReference.getCanonicalName()).isEqualTo(\"com.example.Test\");\n\t\tassertThat(typeReference.getEnclosingType()).isNull();\n\t}\n\n\t@Test\n\tvoid createWithClassNameAndParent() {\n\t\tGeneratedTypeReference typeReference = GeneratedTypeReference.of(\n\t\t\t\tClassName.get(\"com.example\", \"Test\").nestedClass(\"Nested\"));\n\t\tassertThat(typeReference.getPackageName()).isEqualTo(\"com.example\");\n\t\tassertThat(typeReference.getSimpleName()).isEqualTo(\"Nested\");\n\t\tassertThat(typeReference.getCanonicalName()).isEqualTo(\"com.example.Test.Nested\");\n\t\tassertThat(typeReference.getEnclosingType()).satisfies(parentTypeReference -> {\n\t\t\tassertThat(parentTypeReference.getPackageName()).isEqualTo(\"com.example\");\n\t\t\tassertThat(parentTypeReference.getSimpleName()).isEqualTo(\"Test\");\n\t\t\tassertThat(parentTypeReference.getCanonicalName()).isEqualTo(\"com.example.Test\");\n\t\t\tassertThat(parentTypeReference.getEnclosingType()).isNull();\n\t\t});\n\t}\n\n\t@Test\n\tvoid nameOfCglibProxy() {\n\t\tTypeReference reference = GeneratedTypeReference.of(\n\t\t\t\tClassName.get(\"com.example\", \"Test$$SpringCGLIB$$0\"));\n\t\tassertThat(reference.getSimpleName()).isEqualTo(\"Test$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getEnclosingType()).isNull();\n\t}\n\n\t@Test\n\tvoid nameOfNestedCglibProxy() {\n\t\tTypeReference reference = GeneratedTypeReference.of(\n\t\t\t\tClassName.get(\"com.example\", \"Test\").nestedClass(\"Another$$SpringCGLIB$$0\"));\n\t\tassertThat(reference.getSimpleName()).isEqualTo(\"Another$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getEnclosingType()).isNotNull();\n\t\tassertThat(reference.getEnclosingType().getSimpleName()).isEqualTo(\"Test\");\n\t}\n\n\t@Test\n\tvoid equalsWithIdenticalCanonicalNameIsTrue() {\n\t\tassertThat(GeneratedTypeReference.of(ClassName.get(\"java.lang\", \"String\")))\n\t\t\t\t.isEqualTo(TypeReference.of(String.class));\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]