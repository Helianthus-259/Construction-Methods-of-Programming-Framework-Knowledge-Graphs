[
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryTypeHasHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryImplementationHasHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid factoryImplementationHasHint() {\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(MyDummyFactory1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryImplementationHasHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHintsTests#factoryImplementationHasHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SpringPropertiesRuntimeHints}.\n * @author Brian Clozel\n */\nclass SpringPropertiesRuntimeHintsTests {\n\n\tprivate RuntimeHints hints;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.hints = new RuntimeHints();\n\t\tSpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\")\n\t\t\t\t.load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar\n\t\t\t\t\t\t.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\n\t}\n\n\t@Test\n\tvoid springPropertiesResourceHasHints() {\n\t\tassertThat(RuntimeHintsPredicates.resource().forResource(\"spring.properties\")).accepts(this.hints);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#hints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#hints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    this.hints = new RuntimeHints();\r\n    SpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\").load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#springPropertiesResourceHasHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid springPropertiesResourceHasHints() {\r\n    assertThat(RuntimeHintsPredicates.resource().forResource(\"spring.properties\")).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#springPropertiesResourceHasHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHintsTests#springPropertiesResourceHasHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.TypeHintTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.TypeHint.Builder;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link TypeHint}.\n *\n * @author Stephane Nicoll\n */\n@SuppressWarnings(\"removal\")\nclass TypeHintTests {\n\n\t@Test\n\tvoid createWithNullTypeReference() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> TypeHint.of(null));\n\t}\n\n\t@Test\n\tvoid createWithType() {\n\t\tTypeHint hint = TypeHint.of(TypeReference.of(String.class)).build();\n\t\tassertThat(hint).isNotNull();\n\t\tassertThat(hint.getType().getCanonicalName()).isEqualTo(\"java.lang.String\");\n\t}\n\n\t@Test\n\tvoid createWithTypeAndReachableType() {\n\t\tTypeHint hint = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.onReachableType(TypeReference.of(\"com.example.Test\")).build();\n\t\tassertThat(hint).isNotNull();\n\t\tassertThat(hint.getReachableType()).isNotNull();\n\t\tassertThat(hint.getReachableType().getCanonicalName()).isEqualTo(\"com.example.Test\");\n\t}\n\n\t@Test\n\tvoid createWithField() {\n\t\tassertFieldHint(TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withField(\"value\"), fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"value\"));\n\t}\n\n\tvoid assertFieldHint(Builder builder, Consumer<FieldHint> fieldHint) {\n\t\tTypeHint hint = builder.build();\n\t\tassertThat(hint.fields()).singleElement().satisfies(fieldHint);\n\t\tassertThat(hint.constructors()).isEmpty();\n\t\tassertThat(hint.methods()).isEmpty();\n\t\tassertThat(hint.getMemberCategories()).isEmpty();\n\t}\n\n\t@Test\n\tvoid createWithConstructor() {\n\t\tList<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\n\t\tassertConstructorHint(TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withConstructor(parameterTypes, ExecutableMode.INTROSPECT), constructorHint -> {\n\t\t\tassertThat(constructorHint.getParameterTypes()).containsOnlyOnceElementsOf(parameterTypes);\n\t\t\tassertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\n\t\t});\n\t}\n\n\t@Test\n\tvoid createWithConstructorWithSameConstructorUpdatesEntry() {\n\t\tList<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\n\t\tBuilder builder = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withConstructor(parameterTypes, ExecutableMode.INTROSPECT);\n\t\tassertConstructorHint(builder.withConstructor(parameterTypes, ExecutableMode.INVOKE), constructorHint -> {\n\t\t\tassertThat(constructorHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\n\t\t\tassertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\t@Test\n\tvoid createWithConstructorAndSameConstructorAppliesExecutableModePrecedence() {\n\t\tList<TypeReference> parameterTypes = TypeReference.listOf(byte[].class, int.class);\n\t\tBuilder builder = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withConstructor(parameterTypes, ExecutableMode.INVOKE);\n\t\tassertConstructorHint(builder.withConstructor(parameterTypes, ExecutableMode.INTROSPECT), constructorHint -> {\n\t\t\tassertThat(constructorHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\n\t\t\tassertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\tvoid assertConstructorHint(Builder builder, Consumer<ExecutableHint> constructorHint) {\n\t\tTypeHint hint = builder.build();\n\t\tassertThat(hint.fields()).isEmpty();\n\t\tassertThat(hint.constructors()).singleElement().satisfies(constructorHint);\n\t\tassertThat(hint.methods()).isEmpty();\n\t\tassertThat(hint.getMemberCategories()).isEmpty();\n\t}\n\n\t@Test\n\tvoid createWithMethod() {\n\t\tList<TypeReference> parameterTypes = List.of(TypeReference.of(char[].class));\n\t\tassertMethodHint(TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT), methodHint -> {\n\t\t\tassertThat(methodHint.getName()).isEqualTo(\"valueOf\");\n\t\t\tassertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\n\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\n\t\t});\n\t}\n\n\t@Test\n\tvoid createWithMethodWithSameMethodUpdatesEntry() {\n\t\tList<TypeReference> parameterTypes = TypeReference.listOf(char[].class);\n\t\tBuilder builder = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT);\n\t\tassertMethodHint(builder.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INVOKE), methodHint -> {\n\t\t\tassertThat(methodHint.getName()).isEqualTo(\"valueOf\");\n\t\t\tassertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\n\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\t@Test\n\tvoid createWithMethodAndSameMethodAppliesExecutableModePrecedence() {\n\t\tList<TypeReference> parameterTypes = TypeReference.listOf(char[].class);\n\t\tBuilder builder = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INVOKE);\n\t\tassertMethodHint(builder.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT), methodHint -> {\n\t\t\tassertThat(methodHint.getName()).isEqualTo(\"valueOf\");\n\t\t\tassertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\n\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t});\n\t}\n\n\tvoid assertMethodHint(Builder builder, Consumer<ExecutableHint> methodHint) {\n\t\tTypeHint hint = builder.build();\n\t\tassertThat(hint.fields()).isEmpty();\n\t\tassertThat(hint.constructors()).isEmpty();\n\t\tassertThat(hint.methods()).singleElement().satisfies(methodHint);\n\t\tassertThat(hint.getMemberCategories()).isEmpty();\n\t}\n\n\n\t@Test\n\tvoid createWithMemberCategory() {\n\t\tTypeHint hint = TypeHint.of(TypeReference.of(String.class))\n\t\t\t\t.withMembers(MemberCategory.DECLARED_FIELDS).build();\n\t\tassertThat(hint.getMemberCategories()).containsOnly(MemberCategory.DECLARED_FIELDS);\n\t}\n\n\t@Test\n\tvoid typeHintHasAppropriateToString() {\n\t\tTypeHint hint = TypeHint.of(TypeReference.of(String.class)).build();\n\t\tassertThat(hint).hasToString(\"TypeHint[type=java.lang.String]\");\n\t}\n\n\t@Test\n\tvoid builtWithAppliesMemberCategories() {\n\t\tTypeHint.Builder builder = new TypeHint.Builder(TypeReference.of(String.class));\n\t\tassertThat(builder.build().getMemberCategories()).isEmpty();\n\t\tTypeHint.builtWith(MemberCategory.DECLARED_FIELDS).accept(builder);\n\t\tassertThat(builder.build().getMemberCategories()).containsExactly(MemberCategory.DECLARED_FIELDS);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithNullTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithNullTypeReference() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TypeHint.of(null));\r\n}",
    "tailType": "method_code"
  }
]