[
  {
    "head": "org.springframework.cglib.proxy.MixinEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MixinEmitter#getMethods(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEmitter",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.proxy;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.CollectionUtils;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.RejectModifierPredicate;\n\n/**\n * @author Chris Nokleberg\n * @version $Id: MixinEverythingEmitter.java,v 1.3 2004/06/24 21:15:19 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nclass MixinEverythingEmitter extends MixinEmitter {\n\n    public MixinEverythingEmitter(ClassVisitor v, String className, Class[] classes) {\n        super(v, className, classes, null);\n    }\n\n    @Override\n    protected Class[] getInterfaces(Class[] classes) {\n        List list = new ArrayList();\n        for (Class clazz : classes) {\n            ReflectUtils.addAllInterfaces(clazz, list);\n        }\n        return (Class[])list.toArray(new Class[list.size()]);\n    }\n\n    @Override\n\tprotected Method[] getMethods(Class type) {\n        List methods = new ArrayList(Arrays.asList(type.getMethods()));\n        CollectionUtils.filter(methods, new RejectModifierPredicate(Modifier.FINAL | Modifier.STATIC));\n        return (Method[])methods.toArray(new Method[methods.size()]);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class[] getInterfaces(Class[] classes) {\r\n    List list = new ArrayList();\r\n    for (Class clazz : classes) {\r\n        ReflectUtils.addAllInterfaces(clazz, list);\r\n    }\r\n    return (Class[]) list.toArray(new Class[list.size()]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getInterfaces(Class[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getMethods(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Method[] getMethods(Class type) {\r\n    List methods = new ArrayList(Arrays.asList(type.getMethods()));\r\n    CollectionUtils.filter(methods, new RejectModifierPredicate(Modifier.FINAL | Modifier.STATIC));\r\n    return (Method[]) methods.toArray(new Method[methods.size()]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MixinEverythingEmitter#getMethods(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter#getMethods(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.MixinEverythingEmitter",
    "headType": "class",
    "relation": "extend",
    "tail": "MixinEmitter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.NoOp",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOp",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\n/**\n * Methods using this {@link Enhancer} callback will delegate directly to the\n * default (super) implementation in the base class.\n */\npublic interface NoOp extends Callback\n{\n    /**\n     * A thread-safe singleton instance of the <code>NoOp</code> callback.\n     */\n    public static final NoOp INSTANCE = new NoOp() { };\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOp",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.NoOp#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOp#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "NoOp",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOp",
    "headType": "class",
    "relation": "extend",
    "tail": "Callback",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  }
]