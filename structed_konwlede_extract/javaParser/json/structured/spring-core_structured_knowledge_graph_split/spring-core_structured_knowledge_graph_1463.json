[
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createXMLReader(XMLEventReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createEventStreamReader(XMLEventReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link XMLStreamReader} that reads from a {@link XMLEventReader}.\r\n * Useful because the StAX {@code XMLInputFactory} allows one to create an\r\n * event reader from a stream reader, but not vice-versa.\r\n * @return a stream reader that reads from an event reader\r\n */\r\npublic static XMLStreamReader createEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {\r\n    return new XMLEventStreamReader(eventReader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createEventStreamReader(XMLEventReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createEventStreamWriter(XMLEventWriter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.\r\n * @return a stream writer that writes to an event writer\r\n * @since 3.2\r\n */\r\npublic static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter) {\r\n    return new XMLEventStreamWriter(eventWriter, XMLEventFactory.newFactory());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createEventStreamWriter(XMLEventWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createEventStreamWriter(XMLEventWriter,XMLEventFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.\r\n * @return a stream writer that writes to an event writer\r\n * @since 3.0.5\r\n */\r\npublic static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {\r\n    return new XMLEventStreamWriter(eventWriter, eventFactory);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createEventStreamWriter(XMLEventWriter,XMLEventFactory)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.TransformerUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\n\nimport org.springframework.util.Assert;\n\n/**\n * Contains common behavior relating to {@link javax.xml.transform.Transformer Transformers}\n * and the {@code javax.xml.transform} package in general.\n *\n * @author Rick Evans\n * @author Juergen Hoeller\n * @since 2.5.5\n */\npublic abstract class TransformerUtils {\n\n\t/**\n\t * The indent amount of characters if {@link #enableIndenting indenting is enabled}.\n\t * <p>Defaults to \"2\".\n\t */\n\tpublic static final int DEFAULT_INDENT_AMOUNT = 2;\n\n\n\t/**\n\t * Enable indenting for the supplied {@link javax.xml.transform.Transformer}.\n\t * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}\n\t * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters.\n\t * @param transformer the target transformer\n\t * @see javax.xml.transform.Transformer#setOutputProperty(String, String)\n\t * @see javax.xml.transform.OutputKeys#INDENT\n\t */\n\tpublic static void enableIndenting(Transformer transformer) {\n\t\tenableIndenting(transformer, DEFAULT_INDENT_AMOUNT);\n\t}\n\n\t/**\n\t * Enable indenting for the supplied {@link javax.xml.transform.Transformer}.\n\t * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}\n\t * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters.\n\t * @param transformer the target transformer\n\t * @param indentAmount the size of the indent (2 characters, 3 characters, etc.)\n\t * @see javax.xml.transform.Transformer#setOutputProperty(String, String)\n\t * @see javax.xml.transform.OutputKeys#INDENT\n\t */\n\tpublic static void enableIndenting(Transformer transformer, int indentAmount) {\n\t\tAssert.notNull(transformer, \"Transformer must not be null\");\n\t\tif (indentAmount < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid indent amount (must not be less than zero): \" + indentAmount);\n\t\t}\n\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\t\ttry {\n\t\t\t// Xalan-specific, but this is the most common XSLT engine in any case\n\t\t\ttransformer.setOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\", String.valueOf(indentAmount));\n\t\t}\n\t\tcatch (IllegalArgumentException ignored) {\n\t\t}\n\t}\n\n\t/**\n\t * Disable indenting for the supplied {@link javax.xml.transform.Transformer}.\n\t * @param transformer the target transformer\n\t * @see javax.xml.transform.OutputKeys#INDENT\n\t */\n\tpublic static void disableIndenting(Transformer transformer) {\n\t\tAssert.notNull(transformer, \"Transformer must not be null\");\n\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"no\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.TransformerUtils#DEFAULT_INDENT_AMOUNT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils#DEFAULT_INDENT_AMOUNT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils#enableIndenting(Transformer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Enable indenting for the supplied {@link javax.xml.transform.Transformer}.\r\n * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}\r\n * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters.\r\n * @param transformer the target transformer\r\n * @see javax.xml.transform.Transformer#setOutputProperty(String, String)\r\n * @see javax.xml.transform.OutputKeys#INDENT\r\n */\r\npublic static void enableIndenting(Transformer transformer) {\r\n    enableIndenting(transformer, DEFAULT_INDENT_AMOUNT);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtils#enableIndenting(Transformer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils#enableIndenting(Transformer,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Enable indenting for the supplied {@link javax.xml.transform.Transformer}.\r\n * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}\r\n * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters.\r\n * @param transformer the target transformer\r\n * @param indentAmount the size of the indent (2 characters, 3 characters, etc.)\r\n * @see javax.xml.transform.Transformer#setOutputProperty(String, String)\r\n * @see javax.xml.transform.OutputKeys#INDENT\r\n */\r\npublic static void enableIndenting(Transformer transformer, int indentAmount) {\r\n    Assert.notNull(transformer, \"Transformer must not be null\");\r\n    if (indentAmount < 0) {\r\n        throw new IllegalArgumentException(\"Invalid indent amount (must not be less than zero): \" + indentAmount);\r\n    }\r\n    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n    try {\r\n        // Xalan-specific, but this is the most common XSLT engine in any case\r\n        transformer.setOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\", String.valueOf(indentAmount));\r\n    } catch (IllegalArgumentException ignored) ;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtils#enableIndenting(Transformer,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils#disableIndenting(Transformer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Disable indenting for the supplied {@link javax.xml.transform.Transformer}.\r\n * @param transformer the target transformer\r\n * @see javax.xml.transform.OutputKeys#INDENT\r\n */\r\npublic static void disableIndenting(Transformer transformer) {\r\n    Assert.notNull(transformer, \"Transformer must not be null\");\r\n    transformer.setOutputProperty(OutputKeys.INDENT, \"no\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtils#disableIndenting(Transformer)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.XMLEventStreamReader",
    "tailType": "class"
  }
]