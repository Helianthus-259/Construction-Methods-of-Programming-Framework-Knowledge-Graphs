[
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypes() {\r\n    String s = \"text/plain, text/html, text/x-dvi, text/x-c\";\r\n    List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);\r\n    assertThat(mimeTypes).as(\"No mime types returned\").isNotNull();\r\n    assertThat(mimeTypes).as(\"Invalid amount of mime types\").hasSize(4);\r\n    mimeTypes = MimeTypeUtils.parseMimeTypes(null);\r\n    assertThat(mimeTypes).as(\"No mime types returned\").isNotNull();\r\n    assertThat(mimeTypes).as(\"Invalid amount of mime types\").isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypesWithTrailingComma()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23241\r\n@Test\r\nvoid parseMimeTypesWithTrailingComma() {\r\n    List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(\"text/plain, text/html,\");\r\n    assertThat(mimeTypes).as(\"No mime types returned\").isNotNull();\r\n    assertThat(mimeTypes).as(\"Incorrect number of mime types\").hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypesWithTrailingComma()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypesWithTrailingComma()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypesWithQuotedParameters()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-17459\r\n@Test\r\nvoid parseMimeTypesWithQuotedParameters() {\r\n    testWithQuotedParameters(\"foo/bar;param=\\\",\\\"\");\r\n    testWithQuotedParameters(\"foo/bar;param=\\\"s,a,\\\"\");\r\n    testWithQuotedParameters(\"foo/bar;param=\\\"s,\\\"\", \"text/x-c\");\r\n    testWithQuotedParameters(\"foo/bar;param=\\\"a\\\\\\\"b,c\\\"\");\r\n    testWithQuotedParameters(\"foo/bar;param=\\\"\\\\\\\\\\\"\");\r\n    testWithQuotedParameters(\"foo/bar;param=\\\"\\\\,\\\\\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypesWithQuotedParameters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypesWithQuotedParameters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseSubtypeSuffix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseSubtypeSuffix() {\r\n    MimeType type = new MimeType(\"application\", \"vdn.something+json\");\r\n    assertThat(type.getSubtypeSuffix()).isEqualTo(\"json\");\r\n    type = new MimeType(\"application\", \"vdn.something\");\r\n    assertThat(type.getSubtypeSuffix()).isNull();\r\n    type = new MimeType(\"application\", \"vdn.something+\");\r\n    assertThat(type.getSubtypeSuffix()).isEmpty();\r\n    type = new MimeType(\"application\", \"vdn.some+thing+json\");\r\n    assertThat(type.getSubtypeSuffix()).isEqualTo(\"json\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseSubtypeSuffix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseSubtypeSuffix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#wildcardSubtypeCompatibleWithSuffix()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-25350\r\n@Test\r\nvoid wildcardSubtypeCompatibleWithSuffix() {\r\n    MimeType applicationStar = new MimeType(\"application\", \"*\");\r\n    MimeType applicationVndJson = new MimeType(\"application\", \"vnd.something+json\");\r\n    assertThat(applicationStar.isCompatibleWith(applicationVndJson)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#wildcardSubtypeCompatibleWithSuffix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#wildcardSubtypeCompatibleWithSuffix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#testWithQuotedParameters(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testWithQuotedParameters(String... mimeTypes) {\r\n    String s = String.join(\",\", mimeTypes);\r\n    List<MimeType> actual = MimeTypeUtils.parseMimeTypes(s);\r\n    assertThat(actual).hasSameSizeAs(mimeTypes);\r\n    for (int i = 0; i < mimeTypes.length; i++) {\r\n        assertThat(actual.get(i).toString()).isEqualTo(mimeTypes[i]);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#testWithQuotedParameters(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#compareTo()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid compareTo() {\r\n    MimeType audioBasic = new MimeType(\"audio\", \"basic\");\r\n    MimeType audio = new MimeType(\"audio\");\r\n    MimeType audioWave = new MimeType(\"audio\", \"wave\");\r\n    MimeType audioBasicLevel = new MimeType(\"audio\", \"basic\", singletonMap(\"level\", \"1\"));\r\n    // equal\r\n    assertThat(audioBasic.compareTo(audioBasic)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    assertThat(audio.compareTo(audio)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    assertThat(audioBasicLevel.compareTo(audioBasicLevel)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    assertThat(audioBasicLevel.compareTo(audio)).as(\"Invalid comparison result\").isGreaterThan(0);\r\n    List<MimeType> expected = new ArrayList<>();\r\n    expected.add(audio);\r\n    expected.add(audioBasic);\r\n    expected.add(audioBasicLevel);\r\n    expected.add(audioWave);\r\n    List<MimeType> result = new ArrayList<>(expected);\r\n    Random rnd = new Random();\r\n    // shuffle & sort 10 times\r\n    for (int i = 0; i < 10; i++) {\r\n        Collections.shuffle(result, rnd);\r\n        Collections.sort(result);\r\n        for (int j = 0; j < result.size(); j++) {\r\n            assertThat(result.get(j)).as(\"Invalid media type at \" + j + \", run \" + i).isSameAs(expected.get(j));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#compareTo()",
    "tailType": "method"
  }
]