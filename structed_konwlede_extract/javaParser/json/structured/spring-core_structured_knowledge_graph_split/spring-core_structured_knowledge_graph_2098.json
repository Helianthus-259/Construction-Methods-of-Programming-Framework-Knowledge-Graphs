[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#noInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#noInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nested()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nested() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"nested\"));\r\n    type = type.getNested(2);\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(Byte.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#nested()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nested()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nestedWithIndexes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedWithIndexes() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"nested\"));\r\n    type = type.getNested(2, Collections.singletonMap(2, 0));\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(String.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#nestedWithIndexes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nestedWithIndexes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nestedWithArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedWithArray() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\r\n    type = type.getNested(2);\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#nestedWithArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#nestedWithArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGeneric() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    assertThat(type.getGeneric().getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericByIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericByIndex() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringIntegerMultiValueMap\"));\r\n    assertThat(type.getGeneric(0).getType()).isEqualTo(String.class);\r\n    assertThat(type.getGeneric(1).getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericByIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericByIndex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOfGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericOfGeneric() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringListList\"));\r\n    assertThat(type.getGeneric().getType().toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertThat(type.getGeneric().getGeneric().getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericOfGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOfGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]