[
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveFromOuterClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveFromOuterClass() throws Exception {\r\n    Field field = EnclosedInParameterizedType.InnerTyped.class.getField(\"field\");\r\n    ResolvableType type = ResolvableType.forField(field, TypedEnclosedInParameterizedType.TypedInnerTyped.class);\r\n    assertThat(type.resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveFromOuterClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveFromOuterClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveFromClassWithGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveFromClassWithGenerics() {\r\n    ResolvableType type = ResolvableType.forClassWithGenerics(List.class, ResolvableType.forClassWithGenerics(List.class, String.class));\r\n    assertThat(type.asCollection().toString()).isEqualTo(\"java.util.Collection<java.util.List<java.lang.String>>\");\r\n    assertThat(type.asCollection().getGeneric().toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertThat(type.asCollection().getGeneric().asCollection().toString()).isEqualTo(\"java.util.Collection<java.lang.String>\");\r\n    assertThat(type.toString()).isEqualTo(\"java.util.List<java.util.List<java.lang.String>>\");\r\n    assertThat(type.asCollection().getGeneric().getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveFromClassWithGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveFromClassWithGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forClass(Object.class).isAssignableFrom((ResolvableType) null)).withMessage(\"ResolvableType must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForNone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForNone() {\r\n    ResolvableType objectType = ResolvableType.forClass(Object.class);\r\n    assertThat(objectType.isAssignableFrom(ResolvableType.NONE)).isFalse();\r\n    assertThat(ResolvableType.NONE.isAssignableFrom(objectType)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForNone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForNone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForClassAndClass() {\r\n    ResolvableType objectType = ResolvableType.forClass(Object.class);\r\n    ResolvableType charSequenceType = ResolvableType.forClass(CharSequence.class);\r\n    ResolvableType stringType = ResolvableType.forClass(String.class);\r\n    assertThatResolvableType(objectType).isAssignableFrom(objectType, charSequenceType, stringType);\r\n    assertThatResolvableType(charSequenceType).isAssignableFrom(charSequenceType, stringType).isNotAssignableFrom(objectType);\r\n    assertThatResolvableType(stringType).isAssignableFrom(stringType).isNotAssignableFrom(objectType, charSequenceType);\r\n    assertThat(objectType.isAssignableFrom(String.class)).isTrue();\r\n    assertThat(objectType.isAssignableFrom(StringBuilder.class)).isTrue();\r\n    assertThat(charSequenceType.isAssignableFrom(String.class)).isTrue();\r\n    assertThat(charSequenceType.isAssignableFrom(StringBuilder.class)).isTrue();\r\n    assertThat(stringType.isAssignableFrom(String.class)).isTrue();\r\n    assertThat(stringType.isAssignableFrom(StringBuilder.class)).isFalse();\r\n    assertThat(objectType.isInstance(\"a String\")).isTrue();\r\n    assertThat(objectType.isInstance(new StringBuilder(\"a StringBuilder\"))).isTrue();\r\n    assertThat(charSequenceType.isInstance(\"a String\")).isTrue();\r\n    assertThat(charSequenceType.isInstance(new StringBuilder(\"a StringBuilder\"))).isTrue();\r\n    assertThat(stringType.isInstance(\"a String\")).isTrue();\r\n    assertThat(stringType.isInstance(new StringBuilder(\"a StringBuilder\"))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromCannotBeResolved()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromCannotBeResolved() throws Exception {\r\n    ResolvableType objectType = ResolvableType.forClass(Object.class);\r\n    ResolvableType unresolvableVariable1 = ResolvableType.forField(AssignmentBase.class.getField(\"o\"));\r\n    ResolvableType unresolvableVariable2 = ResolvableType.forField(AssignmentBase.class.getField(\"c\"));\r\n    ResolvableType unresolvableVariable3 = ResolvableType.forField(AssignmentBase.class.getField(\"s\"));\r\n    assertThat(unresolvableVariable1.resolve()).isNull();\r\n    assertThatResolvableType(objectType).isAssignableFrom(unresolvableVariable1);\r\n    assertThatResolvableType(unresolvableVariable1).isAssignableFrom(objectType);\r\n    assertThat(unresolvableVariable2.resolve()).isNull();\r\n    assertThatResolvableType(objectType).isAssignableFrom(unresolvableVariable2);\r\n    assertThatResolvableType(unresolvableVariable2).isAssignableFrom(objectType);\r\n    assertThat(unresolvableVariable3.resolve()).isEqualTo(Serializable.class);\r\n    assertThatResolvableType(objectType).isAssignableFrom(unresolvableVariable3);\r\n    assertThatResolvableType(unresolvableVariable3).isNotAssignableFrom(objectType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromCannotBeResolved()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndSimpleVariable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForClassAndSimpleVariable() throws Exception {\r\n    ResolvableType objectType = ResolvableType.forClass(Object.class);\r\n    ResolvableType charSequenceType = ResolvableType.forClass(CharSequence.class);\r\n    ResolvableType stringType = ResolvableType.forClass(String.class);\r\n    ResolvableType objectVariable = ResolvableType.forField(AssignmentBase.class.getField(\"o\"), Assignment.class);\r\n    ResolvableType charSequenceVariable = ResolvableType.forField(AssignmentBase.class.getField(\"c\"), Assignment.class);\r\n    ResolvableType stringVariable = ResolvableType.forField(AssignmentBase.class.getField(\"s\"), Assignment.class);\r\n    assertThatResolvableType(objectType).isAssignableFrom(objectVariable, charSequenceVariable, stringVariable);\r\n    assertThatResolvableType(charSequenceType).isAssignableFrom(charSequenceVariable, stringVariable).isNotAssignableFrom(objectVariable);\r\n    assertThatResolvableType(stringType).isAssignableFrom(stringVariable).isNotAssignableFrom(objectVariable, charSequenceVariable);\r\n    assertThatResolvableType(objectVariable).isAssignableFrom(objectType, charSequenceType, stringType);\r\n    assertThatResolvableType(charSequenceVariable).isAssignableFrom(charSequenceType, stringType).isNotAssignableFrom(objectType);\r\n    assertThatResolvableType(stringVariable).isAssignableFrom(stringType).isNotAssignableFrom(objectType, charSequenceType);\r\n    assertThatResolvableType(objectVariable).isAssignableFrom(objectVariable, charSequenceVariable, stringVariable);\r\n    assertThatResolvableType(charSequenceVariable).isAssignableFrom(charSequenceVariable, stringVariable).isNotAssignableFrom(objectVariable);\r\n    assertThatResolvableType(stringVariable).isAssignableFrom(stringVariable).isNotAssignableFrom(objectVariable, charSequenceVariable);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForClassAndSimpleVariable()",
    "tailType": "method"
  }
]