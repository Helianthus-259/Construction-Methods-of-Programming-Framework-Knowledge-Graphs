[
  {
    "head": "org.springframework.util.PlaceholderParser#separator",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.PlaceholderParser#ignoreUnresolvablePlaceholders",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#ignoreUnresolvablePlaceholders",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.PlaceholderParser#escape",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#escape",
    "headType": "field",
    "relation": "haveType",
    "tail": "Character",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#replacePlaceholders(String,PlaceholderResolver)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Replace all placeholders of format {@code ${name}} with the value returned\r\n * from the supplied {@link PlaceholderResolver}.\r\n * @param value the value containing the placeholders to be replaced\r\n * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\r\n * @return the supplied value with placeholders replaced inline\r\n */\r\npublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\r\n    Assert.notNull(value, \"'value' must not be null\");\r\n    ParsedValue parsedValue = parse(value);\r\n    PartResolutionContext resolutionContext = new PartResolutionContext(placeholderResolver, this.prefix, this.suffix, this.ignoreUnresolvablePlaceholders, candidate -> parse(candidate, false));\r\n    return parsedValue.resolve(resolutionContext);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#replacePlaceholders(String,PlaceholderResolver)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#parse(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the specified value.\r\n * @param value the value containing the placeholders to be replaced\r\n * @return the different parts that have been identified\r\n */\r\nParsedValue parse(String value) {\r\n    List<Part> parts = parse(value, false);\r\n    return new ParsedValue(value, parts);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#parse(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#parse(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<Part> parse(String value, boolean inPlaceholder) {\r\n    LinkedList<Part> parts = new LinkedList<>();\r\n    int startIndex = nextStartPrefix(value, 0);\r\n    if (startIndex == -1) {\r\n        Part part = (inPlaceholder ? createSimplePlaceholderPart(value) : new TextPart(value));\r\n        parts.add(part);\r\n        return parts;\r\n    }\r\n    int position = 0;\r\n    while (startIndex != -1) {\r\n        int endIndex = nextValidEndPrefix(value, startIndex);\r\n        if (endIndex == -1) {\r\n            // Not a valid placeholder, consume the prefix and continue\r\n            addText(value, position, startIndex + this.prefix.length(), parts);\r\n            position = startIndex + this.prefix.length();\r\n            startIndex = nextStartPrefix(value, position);\r\n        } else if (isEscaped(value, startIndex)) {\r\n            // Not a valid index, accumulate and skip the escape character\r\n            addText(value, position, startIndex - 1, parts);\r\n            addText(value, startIndex, startIndex + this.prefix.length(), parts);\r\n            position = startIndex + this.prefix.length();\r\n            startIndex = nextStartPrefix(value, position);\r\n        } else {\r\n            // Found valid placeholder, recursive parsing\r\n            addText(value, position, startIndex, parts);\r\n            String placeholder = value.substring(startIndex + this.prefix.length(), endIndex);\r\n            List<Part> placeholderParts = parse(placeholder, true);\r\n            parts.addAll(placeholderParts);\r\n            startIndex = nextStartPrefix(value, endIndex + this.suffix.length());\r\n            position = endIndex + this.suffix.length();\r\n        }\r\n    }\r\n    // Add rest of text if necessary\r\n    addText(value, position, value.length(), parts);\r\n    return (inPlaceholder ? List.of(createNestedPlaceholderPart(value, parts)) : parts);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#parse(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#createSimplePlaceholderPart(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private SimplePlaceholderPart createSimplePlaceholderPart(String text) {\r\n    ParsedSection section = parseSection(text);\r\n    return new SimplePlaceholderPart(text, section.key(), section.fallback());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#createSimplePlaceholderPart(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#createNestedPlaceholderPart(String,List<Part>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private NestedPlaceholderPart createNestedPlaceholderPart(String text, List<Part> parts) {\r\n    if (this.separator == null) {\r\n        return new NestedPlaceholderPart(text, parts, null);\r\n    }\r\n    List<Part> keyParts = new ArrayList<>();\r\n    List<Part> defaultParts = new ArrayList<>();\r\n    for (int i = 0; i < parts.size(); i++) {\r\n        Part part = parts.get(i);\r\n        if (!(part instanceof TextPart)) {\r\n            keyParts.add(part);\r\n        } else {\r\n            String candidate = part.text();\r\n            ParsedSection section = parseSection(candidate);\r\n            keyParts.add(new TextPart(section.key()));\r\n            if (section.fallback() != null) {\r\n                defaultParts.add(new TextPart(section.fallback()));\r\n                defaultParts.addAll(parts.subList(i + 1, parts.size()));\r\n                return new NestedPlaceholderPart(text, keyParts, defaultParts);\r\n            }\r\n        }\r\n    }\r\n    return new NestedPlaceholderPart(text, keyParts, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#createNestedPlaceholderPart(String,List<Part>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#parseSection(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse an input value that may contain a separator character and return a\r\n * {@link ParsedValue}. If a valid separator character has been identified, the\r\n * given {@code value} is split between a {@code key} and a {@code fallback}. If not,\r\n * only the {@code key} is set.\r\n * <p>\r\n * The returned key may be different from the original value as escaped\r\n * separators, if any, are resolved.\r\n * @param value the value to parse\r\n * @return the parsed section\r\n */\r\nprivate ParsedSection parseSection(String value) {\r\n    if (this.separator == null || !value.contains(this.separator)) {\r\n        return new ParsedSection(value, null);\r\n    }\r\n    int position = 0;\r\n    int index = value.indexOf(this.separator, position);\r\n    StringBuilder buffer = new StringBuilder();\r\n    while (index != -1) {\r\n        if (isEscaped(value, index)) {\r\n            // Accumulate, without the escape character.\r\n            buffer.append(value, position, index - 1);\r\n            buffer.append(value, index, index + this.separator.length());\r\n            position = index + this.separator.length();\r\n            index = value.indexOf(this.separator, position);\r\n        } else {\r\n            buffer.append(value, position, index);\r\n            String key = buffer.toString();\r\n            String fallback = value.substring(index + this.separator.length());\r\n            return new ParsedSection(key, fallback);\r\n        }\r\n    }\r\n    buffer.append(value, position, value.length());\r\n    return new ParsedSection(buffer.toString(), null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#parseSection(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#addText(String,int,int,LinkedList<Part>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void addText(String value, int start, int end, LinkedList<Part> parts) {\r\n    if (start > end) {\r\n        return;\r\n    }\r\n    String text = value.substring(start, end);\r\n    if (!text.isEmpty()) {\r\n        if (!parts.isEmpty()) {\r\n            Part current = parts.removeLast();\r\n            if (current instanceof TextPart textPart) {\r\n                parts.add(new TextPart(textPart.text() + text));\r\n            } else {\r\n                parts.add(current);\r\n                parts.add(new TextPart(text));\r\n            }\r\n        } else {\r\n            parts.add(new TextPart(text));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderParser#addText(String,int,int,LinkedList<Part>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderParser#nextStartPrefix(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int nextStartPrefix(String value, int index) {\r\n    return value.indexOf(this.prefix, index);\r\n}",
    "tailType": "method_code"
  }
]