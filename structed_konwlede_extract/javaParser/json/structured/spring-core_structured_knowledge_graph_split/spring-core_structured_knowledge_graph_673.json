[
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#INVOKE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#NEW_INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#NEW_INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#GET_MAX_INDEX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#GET_MAX_INDEX",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#GET_SIGNATURE_WITHOUT_RETURN_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#GET_SIGNATURE_WITHOUT_RETURN_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#FAST_CLASS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#FAST_CLASS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#ILLEGAL_ARGUMENT_EXCEPTION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#ILLEGAL_ARGUMENT_EXCEPTION",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#INVOCATION_TARGET_EXCEPTION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#INVOCATION_TARGET_EXCEPTION",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#INVOCATION_TARGET_EXCEPTION_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#INVOCATION_TARGET_EXCEPTION_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#TOO_MANY_METHODS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#TOO_MANY_METHODS",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#emitIndexBySignature(List)",
    "headType": "method",
    "relation": "provide",
    "tail": "// TODO: support constructor indices (\"<init>\")\r\nprivate void emitIndexBySignature(List methods) {\r\n    CodeEmitter e = begin_method(Constants.ACC_PUBLIC, SIGNATURE_GET_INDEX, null);\r\n    List signatures = CollectionUtils.transform(methods, obj -> ReflectUtils.getSignature((Method) obj).toString());\r\n    e.load_arg(0);\r\n    e.invoke_virtual(Constants.TYPE_OBJECT, TO_STRING);\r\n    signatureSwitchHelper(e, signatures);\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClassEmitter#emitIndexBySignature(List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClassEmitter#emitIndexByClassArray(List)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitIndexByClassArray(List methods) {\r\n    CodeEmitter e = begin_method(Constants.ACC_PUBLIC, METHOD_GET_INDEX, null);\r\n    if (methods.size() > TOO_MANY_METHODS) {\r\n        // hack for big classes\r\n        List signatures = CollectionUtils.transform(methods, obj -> {\r\n            String s = ReflectUtils.getSignature((Method) obj).toString();\r\n            return s.substring(0, s.lastIndexOf(')') + 1);\r\n        });\r\n        e.load_args();\r\n        e.invoke_static(FAST_CLASS, GET_SIGNATURE_WITHOUT_RETURN_TYPE);\r\n        signatureSwitchHelper(e, signatures);\r\n    } else {\r\n        e.load_args();\r\n        List info = CollectionUtils.transform(methods, MethodInfoTransformer.getInstance());\r\n        EmitUtils.method_switch(e, info, new GetIndexCallback(e, info));\r\n    }\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  }
]