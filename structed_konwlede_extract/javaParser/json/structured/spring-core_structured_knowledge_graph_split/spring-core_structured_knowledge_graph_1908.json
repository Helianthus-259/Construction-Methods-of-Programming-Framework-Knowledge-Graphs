[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringArrayToIntegerArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringArrayToIntegerArray() {\r\n    conversionService.addConverter(new MyStringArrayToIntegerArrayConverter());\r\n    Integer[] converted = conversionService.convert(new String[] { \"x1\", \"z3\" }, Integer[].class);\r\n    assertThat(converted).isEqualTo(new Integer[] { 1, 3 });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringArrayToIntegerArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringArrayToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToIntegerArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToIntegerArray() {\r\n    conversionService.addConverter(new MyStringToIntegerArrayConverter());\r\n    Integer[] converted = conversionService.convert(\"x1,z3\", Integer[].class);\r\n    assertThat(converted).isEqualTo(new Integer[] { 1, 3 });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToIntegerArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#wildcardMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid wildcardMap() throws Exception {\r\n    Map<String, String> input = new LinkedHashMap<>();\r\n    input.put(\"key\", \"value\");\r\n    Object converted = conversionService.convert(input, new TypeDescriptor(getClass().getField(\"wildcardMap\")));\r\n    assertThat(converted).isEqualTo(input);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#wildcardMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#wildcardMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToString() {\r\n    String value = \"myValue\";\r\n    String result = conversionService.convert(value, String.class);\r\n    assertThat(result).isSameAs(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToObject() {\r\n    String value = \"myValue\";\r\n    Object result = conversionService.convert(value, Object.class);\r\n    assertThat(result).isSameAs(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#ignoreCopyConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ignoreCopyConstructor() {\r\n    WithCopyConstructor value = new WithCopyConstructor();\r\n    Object result = conversionService.convert(value, WithCopyConstructor.class);\r\n    assertThat(result).isSameAs(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#ignoreCopyConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#ignoreCopyConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyListToArray() {\r\n    conversionService.addConverter(new CollectionToArrayConverter(conversionService));\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    List<String> list = new ArrayList<>();\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(list);\r\n    TypeDescriptor targetType = TypeDescriptor.valueOf(String[].class);\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    assertThat(((String[]) conversionService.convert(list, sourceType, targetType))).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToArray()",
    "tailType": "method"
  }
]