[
  {
    "head": "org.springframework.asm.FieldWriter#accessFlags",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#nameIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#nameIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#descriptorIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#descriptorIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#signatureIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#signatureIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#constantValueIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#constantValueIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#lastRuntimeVisibleAnnotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#lastRuntimeVisibleAnnotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#lastRuntimeInvisibleAnnotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#lastRuntimeInvisibleAnnotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#lastRuntimeVisibleTypeAnnotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#lastRuntimeVisibleTypeAnnotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#lastRuntimeInvisibleTypeAnnotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#lastRuntimeInvisibleTypeAnnotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#firstAttribute",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#firstAttribute",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport javax.xml.XMLConstants;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * @author Arjen Poutsma\n * @author Leo Arnold\n */\nclass SimpleNamespaceContextTests {\n\n\tprivate final String unboundPrefix = \"unbound\";\n\tprivate final String prefix = \"prefix\";\n\tprivate final String namespaceUri = \"https://Namespace-name-URI\";\n\tprivate final String additionalNamespaceUri = \"https://Additional-namespace-name-URI\";\n\tprivate final String unboundNamespaceUri = \"https://Unbound-namespace-name-URI\";\n\tprivate final String defaultNamespaceUri = \"https://Default-namespace-name-URI\";\n\n\tprivate final SimpleNamespaceContext context = new SimpleNamespaceContext();\n\n\n\t@Test\n\tvoid getNamespaceURI_withNull() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcontext.getNamespaceURI(null));\n\t}\n\n\t@Test\n\tvoid getNamespaceURI() {\n\t\tcontext.bindNamespaceUri(XMLConstants.XMLNS_ATTRIBUTE, additionalNamespaceUri);\n\t\tassertThat(context.getNamespaceURI(XMLConstants.XMLNS_ATTRIBUTE))\n\t\t\t\t.as(\"Always returns \\\"http://www.w3.org/2000/xmlns/\\\" for \\\"xmlns\\\"\")\n\t\t\t\t.isEqualTo(XMLConstants.XMLNS_ATTRIBUTE_NS_URI);\n\t\tcontext.bindNamespaceUri(XMLConstants.XML_NS_PREFIX, additionalNamespaceUri);\n\t\tassertThat(context.getNamespaceURI(XMLConstants.XML_NS_PREFIX))\n\t\t\t\t.as(\"Always returns \\\"http://www.w3.org/XML/1998/namespace\\\" for \\\"xml\\\"\")\n\t\t\t\t.isEqualTo(XMLConstants.XML_NS_URI);\n\n\t\tassertThat(context.getNamespaceURI(unboundPrefix))\n\t\t\t\t.as(\"Returns \\\"\\\" for an unbound prefix\").isEmpty();\n\t\tcontext.bindNamespaceUri(prefix, namespaceUri);\n\t\tassertThat(context.getNamespaceURI(prefix))\n\t\t\t\t.as(\"Returns the bound namespace URI for a bound prefix\")\n\t\t\t\t.isEqualTo(namespaceUri);\n\n\t\tassertThat(context.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX))\n\t\t\t\t.as(\"By default returns URI \\\"\\\" for the default namespace prefix\").isEmpty();\n\t\tcontext.bindDefaultNamespaceUri(defaultNamespaceUri);\n\t\tassertThat(context.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX))\n\t\t\t\t.as(\"Returns the set URI for the default namespace prefix\")\n\t\t\t\t.isEqualTo(defaultNamespaceUri);\n\t}\n\n\t@Test\n\tvoid getPrefix_withNull() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcontext.getPrefix(null));\n\t}\n\n\t@Test\n\tvoid getPrefix() {\n\t\tassertThat(context.getPrefix(XMLConstants.XMLNS_ATTRIBUTE_NS_URI))\n\t\t\t\t.as(\"Always returns \\\"xmlns\\\" for \\\"http://www.w3.org/2000/xmlns/\\\"\")\n\t\t\t\t.isEqualTo(XMLConstants.XMLNS_ATTRIBUTE);\n\t\tassertThat(context.getPrefix(XMLConstants.XML_NS_URI))\n\t\t\t\t.as(\"Always returns \\\"xml\\\" for \\\"http://www.w3.org/XML/1998/namespace\\\"\")\n\t\t\t\t.isEqualTo(XMLConstants.XML_NS_PREFIX);\n\n\t\tassertThat(context.getPrefix(unboundNamespaceUri)).as(\"Returns null for an unbound namespace URI\").isNull();\n\t\tcontext.bindNamespaceUri(\"prefix1\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix2\", namespaceUri);\n\t\tassertThat(context.getPrefix(namespaceUri))\n\t\t\t\t.as(\"Returns a prefix for a bound namespace URI\")\n\t\t\t\t.matches(prefix -> \"prefix1\".equals(prefix) || \"prefix2\".equals(prefix));\n\t}\n\n\t@Test\n\tvoid getPrefixes_withNull() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcontext.getPrefixes(null));\n\t}\n\n\t@Test\n\tvoid getPrefixes_IteratorIsNotModifiable() {\n\t\tcontext.bindNamespaceUri(prefix, namespaceUri);\n\t\tIterator<String> iterator = context.getPrefixes(namespaceUri);\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(\n\t\t\t\titerator::remove);\n\t}\n\n\t@Test\n\tvoid getPrefixes() {\n\t\tassertThat(getItemSet(context.getPrefixes(XMLConstants.XMLNS_ATTRIBUTE_NS_URI)))\n\t\t\t\t.as(\"Returns only \\\"xmlns\\\" for \\\"http://www.w3.org/2000/xmlns/\\\"\")\n\t\t\t\t.containsExactly(XMLConstants.XMLNS_ATTRIBUTE);\n\t\tassertThat(getItemSet(context.getPrefixes(XMLConstants.XML_NS_URI)))\n\t\t\t\t.as(\"Returns only \\\"xml\\\" for \\\"http://www.w3.org/XML/1998/namespace\\\"\")\n\t\t\t\t.containsExactly(XMLConstants.XML_NS_PREFIX);\n\n\t\tassertThat(context.getPrefixes(\"unbound Namespace URI\").hasNext())\n\t\t\t\t.as(\"Returns empty iterator for unbound prefix\")\n\t\t\t\t.isFalse();\n\t\tcontext.bindNamespaceUri(\"prefix1\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix2\", namespaceUri);\n\t\tassertThat(getItemSet(context.getPrefixes(namespaceUri)))\n\t\t\t\t.as(\"Returns all prefixes (and only those) bound to the namespace URI\")\n\t\t\t\t.containsExactlyInAnyOrder(\"prefix1\", \"prefix2\");\n\t}\n\n\t@Test\n\tvoid bindNamespaceUri_withNullNamespaceUri() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcontext.bindNamespaceUri(\"prefix\", null));\n\t}\n\n\t@Test\n\tvoid bindNamespaceUri_withNullPrefix() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcontext.bindNamespaceUri(null, namespaceUri));\n\t}\n\n\t@Test\n\tvoid bindNamespaceUri() {\n\t\tcontext.bindNamespaceUri(prefix, namespaceUri);\n\t\tassertThat(context.getNamespaceURI(prefix))\n\t\t\t\t.as(\"The Namespace URI was bound to the prefix\")\n\t\t\t\t.isEqualTo(namespaceUri);\n\t\tassertThat(getItemSet(context.getPrefixes(namespaceUri)))\n\t\t\t\t.as(\"The prefix was bound to the namespace URI\")\n\t\t\t\t.contains(prefix);\n\t}\n\n\t@Test\n\tvoid getBoundPrefixes() {\n\t\tcontext.bindNamespaceUri(\"prefix1\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix2\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix3\", additionalNamespaceUri);\n\t\tassertThat(getItemSet(context.getBoundPrefixes()))\n\t\t\t\t.as(\"Returns all bound prefixes\")\n\t\t\t\t.containsExactlyInAnyOrder(\"prefix1\", \"prefix2\", \"prefix3\");\n\t}\n\n\t@Test\n\tvoid clear() {\n\t\tcontext.bindNamespaceUri(\"prefix1\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix2\", namespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix3\", additionalNamespaceUri);\n\t\tcontext.clear();\n\t\tassertThat(context.getBoundPrefixes().hasNext()).as(\"All bound prefixes were removed\").isFalse();\n\t\tassertThat(context.getPrefixes(namespaceUri).hasNext()).as(\"All bound namespace URIs were removed\").isFalse();\n\t}\n\n\t@Test\n\tvoid removeBinding() {\n\t\tcontext.removeBinding(unboundPrefix);\n\n\t\tcontext.bindNamespaceUri(prefix, namespaceUri);\n\t\tcontext.removeBinding(prefix);\n\t\tassertThat(context.getNamespaceURI(prefix)).as(\"Returns default namespace URI for removed prefix\").isEmpty();\n\t\tassertThat(context.getPrefix(namespaceUri)).as(\"#getPrefix returns null when all prefixes for a namespace URI were removed\").isNull();\n\t\tassertThat(context.getPrefixes(namespaceUri).hasNext()).as(\"#getPrefixes returns an empty iterator when all prefixes for a namespace URI were removed\").isFalse();\n\n\t\tcontext.bindNamespaceUri(\"prefix1\", additionalNamespaceUri);\n\t\tcontext.bindNamespaceUri(\"prefix2\", additionalNamespaceUri);\n\t\tcontext.removeBinding(\"prefix1\");\n\t\tassertThat(context.getNamespaceURI(\"prefix1\")).as(\"Prefix was unbound\").isEmpty();\n\t\tassertThat(context.getPrefix(additionalNamespaceUri)).as(\"#getPrefix returns a bound prefix after removal of another prefix for the same namespace URI\").isEqualTo(\"prefix2\");\n\t\tassertThat(getItemSet(context.getPrefixes(additionalNamespaceUri)))\n\t\t\t\t.as(\"Prefix was removed from namespace URI\")\n\t\t\t\t.containsExactly(\"prefix2\");\n\t}\n\n\n\tprivate Set<String> getItemSet(Iterator<String> iterator) {\n\t\tSet<String> itemSet = new LinkedHashSet<>();\n\t\titerator.forEachRemaining(itemSet::add);\n\t\treturn itemSet;\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]