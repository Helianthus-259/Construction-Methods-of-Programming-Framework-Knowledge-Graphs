[
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MimeType",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\nimport java.nio.charset.Charset;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TreeSet;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Represents a MIME Type, as originally defined in RFC 2046 and subsequently\n * used in other Internet protocols including HTTP.\n *\n * <p>This class, however, does not contain support for the q-parameters used\n * in HTTP content negotiation. Those can be found in the subclass\n * {@code org.springframework.http.MediaType} in the {@code spring-web} module.\n *\n * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}.\n * Also has functionality to parse MIME Type values from a {@code String} using\n * {@link #valueOf(String)}. For more parsing options see {@link MimeTypeUtils}.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @author Rossen Stoyanchev\n * @author Sam Brannen\n * @since 4.0\n * @see MimeTypeUtils\n */\npublic class MimeType implements Comparable<MimeType>, Serializable {\n\n\tprivate static final long serialVersionUID = 4085923477777865903L;\n\n\n\tprotected static final String WILDCARD_TYPE = \"*\";\n\n\tprivate static final String PARAM_CHARSET = \"charset\";\n\n\tprivate static final BitSet TOKEN;\n\n\tstatic {\n\t\t// variable names refer to RFC 2616, section 2.2\n\t\tBitSet ctl = new BitSet(128);\n\t\tfor (int i = 0; i <= 31; i++) {\n\t\t\tctl.set(i);\n\t\t}\n\t\tctl.set(127);\n\n\t\tBitSet separators = new BitSet(128);\n\t\tseparators.set('(');\n\t\tseparators.set(')');\n\t\tseparators.set('<');\n\t\tseparators.set('>');\n\t\tseparators.set('@');\n\t\tseparators.set(',');\n\t\tseparators.set(';');\n\t\tseparators.set(':');\n\t\tseparators.set('\\\\');\n\t\tseparators.set('\\\"');\n\t\tseparators.set('/');\n\t\tseparators.set('[');\n\t\tseparators.set(']');\n\t\tseparators.set('?');\n\t\tseparators.set('=');\n\t\tseparators.set('{');\n\t\tseparators.set('}');\n\t\tseparators.set(' ');\n\t\tseparators.set('\\t');\n\n\t\tTOKEN = new BitSet(128);\n\t\tTOKEN.set(0, 128);\n\t\tTOKEN.andNot(ctl);\n\t\tTOKEN.andNot(separators);\n\t}\n\n\n\tprivate final String type;\n\n\tprivate final String subtype;\n\n\t@SuppressWarnings(\"serial\")\n\tprivate final Map<String, String> parameters;\n\n\tprivate transient @Nullable Charset resolvedCharset;\n\n\tprivate volatile @Nullable String toStringValue;\n\n\n\t/**\n\t * Create a new {@code MimeType} for the given primary type.\n\t * <p>The {@linkplain #getSubtype() subtype} is set to <code>\"&#42;\"</code>,\n\t * and the parameters are empty.\n\t * @param type the primary type\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t */\n\tpublic MimeType(String type) {\n\t\tthis(type, WILDCARD_TYPE);\n\t}\n\n\t/**\n\t * Create a new {@code MimeType} for the given primary type and subtype.\n\t * <p>The parameters are empty.\n\t * @param type the primary type\n\t * @param subtype the subtype\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t */\n\tpublic MimeType(String type, String subtype) {\n\t\tthis(type, subtype, Collections.emptyMap());\n\t}\n\n\t/**\n\t * Create a new {@code MimeType} for the given type, subtype, and character set.\n\t * @param type the primary type\n\t * @param subtype the subtype\n\t * @param charset the character set\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t */\n\tpublic MimeType(String type, String subtype, Charset charset) {\n\t\tthis(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));\n\t\tthis.resolvedCharset = charset;\n\t}\n\n\t/**\n\t * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},\n\t * and allows to set the specified character set.\n\t * @param other the other MimeType\n\t * @param charset the character set\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t * @since 4.3\n\t */\n\tpublic MimeType(MimeType other, Charset charset) {\n\t\tthis(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()));\n\t\tthis.resolvedCharset = charset;\n\t}\n\n\t/**\n\t * Copy-constructor that copies the type and subtype of the given {@code MimeType},\n\t * and allows for different parameter.\n\t * @param other the other MimeType\n\t * @param parameters the parameters (may be {@code null})\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t */\n\tpublic MimeType(MimeType other, @Nullable Map<String, String> parameters) {\n\t\tthis(other.getType(), other.getSubtype(), parameters);\n\t}\n\n\t/**\n\t * Create a new {@code MimeType} for the given type, subtype, and parameters.\n\t * @param type the primary type\n\t * @param subtype the subtype\n\t * @param parameters the parameters (may be {@code null})\n\t * @throws IllegalArgumentException if any of the parameters contains illegal characters\n\t */\n\tpublic MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {\n\t\tAssert.hasLength(type, \"'type' must not be empty\");\n\t\tAssert.hasLength(subtype, \"'subtype' must not be empty\");\n\t\tcheckToken(type);\n\t\tcheckToken(subtype);\n\t\tthis.type = type.toLowerCase(Locale.ROOT);\n\t\tthis.subtype = subtype.toLowerCase(Locale.ROOT);\n\t\tif (!CollectionUtils.isEmpty(parameters)) {\n\t\t\tMap<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ROOT);\n\t\t\tparameters.forEach((parameter, value) -> {\n\t\t\t\tcheckParameters(parameter, value);\n\t\t\t\tmap.put(parameter, value);\n\t\t\t});\n\t\t\tthis.parameters = Collections.unmodifiableMap(map);\n\t\t}\n\t\telse {\n\t\t\tthis.parameters = Collections.emptyMap();\n\t\t}\n\t}\n\n\t/**\n\t * Copy-constructor that copies the type, subtype and parameters of the given {@code MimeType},\n\t * skipping checks performed in other constructors.\n\t * @param other the other MimeType\n\t * @since 5.3\n\t */\n\tprotected MimeType(MimeType other) {\n\t\tthis.type = other.type;\n\t\tthis.subtype = other.subtype;\n\t\tthis.parameters = other.parameters;\n\t\tthis.resolvedCharset = other.resolvedCharset;\n\t\tthis.toStringValue = other.toStringValue;\n\t}\n\n\t/**\n\t * Checks the given token string for illegal characters, as defined in RFC 2616,\n\t * section 2.2.\n\t * @throws IllegalArgumentException in case of illegal characters\n\t * @see <a href=\"https://tools.ietf.org/html/rfc2616#section-2.2\">HTTP 1.1, section 2.2</a>\n\t */\n\tprivate void checkToken(String token) {\n\t\tfor (int i = 0; i < token.length(); i++) {\n\t\t\tchar ch = token.charAt(i);\n\t\t\tif (!TOKEN.get(ch)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid token character '\" + ch + \"' in token \\\"\" + token + \"\\\"\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected void checkParameters(String parameter, String value) {\n\t\tAssert.hasLength(parameter, \"'parameter' must not be empty\");\n\t\tAssert.hasLength(value, \"'value' must not be empty\");\n\t\tcheckToken(parameter);\n\t\tif (PARAM_CHARSET.equals(parameter)) {\n\t\t\tif (this.resolvedCharset == null) {\n\t\t\t\tthis.resolvedCharset = Charset.forName(unquote(value));\n\t\t\t}\n\t\t}\n\t\telse if (!isQuotedString(value)) {\n\t\t\tcheckToken(value);\n\t\t}\n\t}\n\n\tprivate boolean isQuotedString(String s) {\n\t\tif (s.length() < 2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ((s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) || (s.startsWith(\"'\") && s.endsWith(\"'\")));\n\t}\n\n\tprotected String unquote(String s) {\n\t\treturn (isQuotedString(s) ? s.substring(1, s.length() - 1) : s);\n\t}\n\n\t/**\n\t * Indicates whether the {@linkplain #getType() type} is the wildcard character\n\t * <code>&#42;</code> or not.\n\t */\n\tpublic boolean isWildcardType() {\n\t\treturn WILDCARD_TYPE.equals(getType());\n\t}\n\n\t/**\n\t * Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard\n\t * character <code>&#42;</code> or the wildcard character followed by a suffix\n\t * (for example, <code>&#42;+xml</code>).\n\t * @return whether the subtype is a wildcard\n\t */\n\tpublic boolean isWildcardSubtype() {\n\t\tString subtype = getSubtype();\n\t\treturn (WILDCARD_TYPE.equals(subtype) || subtype.startsWith(\"*+\"));\n\t}\n\n\t/**\n\t * Indicates whether this MIME Type is concrete, i.e. whether neither the type\n\t * nor the subtype is a wildcard character <code>&#42;</code>.\n\t * @return whether this MIME Type is concrete\n\t */\n\tpublic boolean isConcrete() {\n\t\treturn !isWildcardType() && !isWildcardSubtype();\n\t}\n\n\t/**\n\t * Return the primary type.\n\t */\n\tpublic String getType() {\n\t\treturn this.type;\n\t}\n\n\t/**\n\t * Return the subtype.\n\t */\n\tpublic String getSubtype() {\n\t\treturn this.subtype;\n\t}\n\n\t/**\n\t * Return the subtype suffix as defined in RFC 6839.\n\t * @since 5.3\n\t */\n\tpublic @Nullable String getSubtypeSuffix() {\n\t\tint suffixIndex = this.subtype.lastIndexOf('+');\n\t\tif (suffixIndex != -1 && this.subtype.length() > suffixIndex) {\n\t\t\treturn this.subtype.substring(suffixIndex + 1);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return the character set, as indicated by a {@code charset} parameter, if any.\n\t * @return the character set, or {@code null} if not available\n\t * @since 4.3\n\t */\n\tpublic @Nullable Charset getCharset() {\n\t\treturn this.resolvedCharset;\n\t}\n\n\t/**\n\t * Return a generic parameter value, given a parameter name.\n\t * @param name the parameter name\n\t * @return the parameter value, or {@code null} if not present\n\t */\n\tpublic @Nullable String getParameter(String name) {\n\t\treturn this.parameters.get(name);\n\t}\n\n\t/**\n\t * Return all generic parameter values.\n\t * @return a read-only map (possibly empty, never {@code null})\n\t */\n\tpublic Map<String, String> getParameters() {\n\t\treturn this.parameters;\n\t}\n\n\t/**\n\t * Indicate whether this MIME Type includes the given MIME Type.\n\t * <p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},\n\t * and {@code application/*+xml} includes {@code application/soap+xml}, etc.\n\t * This method is <b>not</b> symmetric.\n\t * @param other the reference MIME Type with which to compare\n\t * @return {@code true} if this MIME Type includes the given MIME Type;\n\t * {@code false} otherwise\n\t */\n\tpublic boolean includes(@Nullable MimeType other) {\n\t\tif (other == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isWildcardType()) {\n\t\t\t// */* includes anything\n\t\t\treturn true;\n\t\t}\n\t\telse if (getType().equals(other.getType())) {\n\t\t\tif (getSubtype().equals(other.getSubtype())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (isWildcardSubtype()) {\n\t\t\t\t// Wildcard with suffix, for example, application/*+xml\n\t\t\t\tint thisPlusIdx = getSubtype().lastIndexOf('+');\n\t\t\t\tif (thisPlusIdx == -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// application/*+xml includes application/soap+xml\n\t\t\t\t\tint otherPlusIdx = other.getSubtype().lastIndexOf('+');\n\t\t\t\t\tif (otherPlusIdx != -1) {\n\t\t\t\t\t\tString thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx);\n\t\t\t\t\t\tString thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1);\n\t\t\t\t\t\tString otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1);\n\t\t\t\t\t\tif (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Indicate whether this MIME Type is compatible with the given MIME Type.\n\t * <p>For instance, {@code text/*} is compatible with {@code text/plain},\n\t * {@code text/html}, and vice versa. In effect, this method is similar to\n\t * {@link #includes}, except that it <b>is</b> symmetric.\n\t * @param other the reference MIME Type with which to compare\n\t * @return {@code true} if this MIME Type is compatible with the given MIME Type;\n\t * {@code false} otherwise\n\t */\n\tpublic boolean isCompatibleWith(@Nullable MimeType other) {\n\t\tif (other == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isWildcardType() || other.isWildcardType()) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (getType().equals(other.getType())) {\n\t\t\tif (getSubtype().equals(other.getSubtype())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (isWildcardSubtype() || other.isWildcardSubtype()) {\n\t\t\t\tString thisSuffix = getSubtypeSuffix();\n\t\t\t\tString otherSuffix = other.getSubtypeSuffix();\n\t\t\t\tif (getSubtype().equals(WILDCARD_TYPE) || other.getSubtype().equals(WILDCARD_TYPE)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if (isWildcardSubtype() && thisSuffix != null) {\n\t\t\t\t\treturn (thisSuffix.equals(other.getSubtype()) || thisSuffix.equals(otherSuffix));\n\t\t\t\t}\n\t\t\t\telse if (other.isWildcardSubtype() && otherSuffix != null) {\n\t\t\t\t\treturn (getSubtype().equals(otherSuffix) || otherSuffix.equals(thisSuffix));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Similar to {@link #equals(Object)} but based on the type and subtype\n\t * only, i.e. ignoring parameters.\n\t * @param other the other mime type to compare to\n\t * @return whether the two mime types have the same type and subtype\n\t * @since 5.1.4\n\t */\n\tpublic boolean equalsTypeAndSubtype(@Nullable MimeType other) {\n\t\tif (other == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);\n\t}\n\n\t/**\n\t * Unlike {@link Collection#contains(Object)} which relies on\n\t * {@link MimeType#equals(Object)}, this method only checks the type and the\n\t * subtype, but otherwise ignores parameters.\n\t * @param mimeTypes the list of mime types to perform the check against\n\t * @return whether the list contains the given mime type\n\t * @since 5.1.4\n\t */\n\tpublic boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {\n\t\tfor (MimeType mimeType : mimeTypes) {\n\t\t\tif (mimeType.equalsTypeAndSubtype(this)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof MimeType otherType &&\n\t\t\t\tthis.type.equalsIgnoreCase(otherType.type) &&\n\t\t\t\tthis.subtype.equalsIgnoreCase(otherType.subtype) &&\n\t\t\t\tparametersAreEqual(otherType)));\n\t}\n\n\t/**\n\t * Determine if the parameters in this {@code MimeType} and the supplied\n\t * {@code MimeType} are equal, performing case-insensitive comparisons\n\t * for {@link Charset Charsets}.\n\t * @since 4.2\n\t */\n\tprivate boolean parametersAreEqual(MimeType other) {\n\t\tif (this.parameters.size() != other.parameters.size()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (Map.Entry<String, String> entry : this.parameters.entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tif (!other.parameters.containsKey(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (PARAM_CHARSET.equals(key)) {\n\t\t\t\tif (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result = this.type.hashCode();\n\t\tresult = 31 * result + this.subtype.hashCode();\n\t\tresult = 31 * result + this.parameters.hashCode();\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tString value = this.toStringValue;\n\t\tif (value == null) {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tappendTo(builder);\n\t\t\tvalue = builder.toString();\n\t\t\tthis.toStringValue = value;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected void appendTo(StringBuilder builder) {\n\t\tbuilder.append(this.type);\n\t\tbuilder.append('/');\n\t\tbuilder.append(this.subtype);\n\t\tappendTo(this.parameters, builder);\n\t}\n\n\tprivate void appendTo(Map<String, String> map, StringBuilder builder) {\n\t\tmap.forEach((key, val) -> {\n\t\t\tbuilder.append(';');\n\t\t\tbuilder.append(key);\n\t\t\tbuilder.append('=');\n\t\t\tbuilder.append(val);\n\t\t});\n\t}\n\n\t/**\n\t * Compares this MIME Type to another alphabetically.\n\t * @param other the MIME Type to compare to\n\t */\n\t@Override\n\tpublic int compareTo(MimeType other) {\n\t\tint comp = getType().compareToIgnoreCase(other.getType());\n\t\tif (comp != 0) {\n\t\t\treturn comp;\n\t\t}\n\t\tcomp = getSubtype().compareToIgnoreCase(other.getSubtype());\n\t\tif (comp != 0) {\n\t\t\treturn comp;\n\t\t}\n\t\tcomp = getParameters().size() - other.getParameters().size();\n\t\tif (comp != 0) {\n\t\t\treturn comp;\n\t\t}\n\n\t\tTreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n\t\tthisAttributes.addAll(getParameters().keySet());\n\t\tTreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n\t\totherAttributes.addAll(other.getParameters().keySet());\n\t\tIterator<String> thisAttributesIterator = thisAttributes.iterator();\n\t\tIterator<String> otherAttributesIterator = otherAttributes.iterator();\n\n\t\twhile (thisAttributesIterator.hasNext()) {\n\t\t\tString thisAttribute = thisAttributesIterator.next();\n\t\t\tString otherAttribute = otherAttributesIterator.next();\n\t\t\tcomp = thisAttribute.compareToIgnoreCase(otherAttribute);\n\t\t\tif (comp != 0) {\n\t\t\t\treturn comp;\n\t\t\t}\n\t\t\tif (PARAM_CHARSET.equals(thisAttribute)) {\n\t\t\t\tCharset thisCharset = getCharset();\n\t\t\t\tCharset otherCharset = other.getCharset();\n\t\t\t\tif (thisCharset != otherCharset) {\n\t\t\t\t\tif (thisCharset == null) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (otherCharset == null) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tcomp = thisCharset.compareTo(otherCharset);\n\t\t\t\t\tif (comp != 0) {\n\t\t\t\t\t\treturn comp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString thisValue = getParameters().get(thisAttribute);\n\t\t\t\tString otherValue = other.getParameters().get(otherAttribute);\n\t\t\t\tAssert.notNull(thisValue, \"Parameter for \" + thisAttribute + \" must not be null\");\n\t\t\t\tif (otherValue == null) {\n\t\t\t\t\totherValue = \"\";\n\t\t\t\t}\n\t\t\t\tcomp = thisValue.compareTo(otherValue);\n\t\t\t\tif (comp != 0) {\n\t\t\t\t\treturn comp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Indicates whether this {@code MimeType} is more specific than the given\n\t * type.\n\t * <ol>\n\t * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does not, then this method returns {@code false}.</li>\n\t * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does, then this method returns {@code true}.</li>\n\t * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does not, then this method returns {@code false}.</li>\n\t * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does, then this method returns {@code true}.</li>\n\t * <li>if the two mime types have identical {@linkplain #getType() type} and\n\t * {@linkplain #getSubtype() subtype}, then the mime type with the most\n\t * parameters is more specific than the other.</li>\n\t * <li>Otherwise, this method returns {@code false}.</li>\n\t * </ol>\n\t * @param other the {@code MimeType} to be compared\n\t * @return the result of the comparison\n\t * @since 6.0\n\t * @see #isLessSpecific(MimeType)\n\t * @see <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.2\">HTTP 1.1: Semantics\n\t * and Content, section 5.3.2</a>\n\t */\n\tpublic boolean isMoreSpecific(MimeType other) {\n\t\tAssert.notNull(other, \"Other must not be null\");\n\t\tboolean thisWildcard = isWildcardType();\n\t\tboolean otherWildcard = other.isWildcardType();\n\t\tif (thisWildcard && !otherWildcard) {  // */* > audio/*\n\t\t\treturn false;\n\t\t}\n\t\telse if (!thisWildcard && otherWildcard) {  // audio/* < */*\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tboolean thisWildcardSubtype = isWildcardSubtype();\n\t\t\tboolean otherWildcardSubtype = other.isWildcardSubtype();\n\t\t\tif (thisWildcardSubtype && !otherWildcardSubtype) {  // audio/* > audio/basic\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!thisWildcardSubtype && otherWildcardSubtype) {  // audio/basic < audio/*\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (getType().equals(other.getType()) && getSubtype().equals(other.getSubtype())) {\n\t\t\t\tint paramsSize1 = getParameters().size();\n\t\t\t\tint paramsSize2 = other.getParameters().size();\n\t\t\t\treturn paramsSize1 > paramsSize2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether this {@code MimeType} is less specific than the given type.\n\t * <ol>\n\t * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does not, then this method returns {@code true}.</li>\n\t * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does, then this method returns {@code false}.</li>\n\t * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does not, then this method returns {@code true}.</li>\n\t * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\n\t * and the other does, then this method returns {@code false}.</li>\n\t * <li>if the two mime types have identical {@linkplain #getType() type} and\n\t * {@linkplain #getSubtype() subtype}, then the mime type with the least\n\t * parameters is less specific than the other.</li>\n\t * <li>Otherwise, this method returns {@code false}.</li>\n\t * </ol>\n\t * @param other the {@code MimeType} to be compared\n\t * @return the result of the comparison\n\t * @since 6.0\n\t * @see #isMoreSpecific(MimeType)\n\t * @see <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.2\">HTTP 1.1: Semantics\n\t * and Content, section 5.3.2</a>\n\t */\n\tpublic boolean isLessSpecific(MimeType other) {\n\t\tAssert.notNull(other, \"Other must not be null\");\n\t\treturn other.isMoreSpecific(this);\n\t}\n\n\tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n\t\t// Rely on default serialization, just initialize state after deserialization.\n\t\tois.defaultReadObject();\n\n\t\t// Initialize transient fields.\n\t\tString charsetName = getParameter(PARAM_CHARSET);\n\t\tif (charsetName != null) {\n\t\t\tthis.resolvedCharset = Charset.forName(unquote(charsetName));\n\t\t}\n\t}\n\n\n\t/**\n\t * Parse the given String value into a {@code MimeType} object,\n\t * with this method name following the 'valueOf' naming convention\n\t * (as supported by {@link org.springframework.core.convert.ConversionService}).\n\t * @see MimeTypeUtils#parseMimeType(String)\n\t */\n\tpublic static MimeType valueOf(String value) {\n\t\treturn MimeTypeUtils.parseMimeType(value);\n\t}\n\n\tprivate static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {\n\t\tMap<String, String> map = new LinkedHashMap<>(parameters);\n\t\tmap.put(PARAM_CHARSET, charset.name());\n\t\treturn map;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#WILDCARD_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#WILDCARD_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#PARAM_CHARSET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#PARAM_CHARSET",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#TOKEN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#TOKEN",
    "headType": "field",
    "relation": "haveType",
    "tail": "BitSet",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#subtype",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#subtype",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#parameters",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#parameters",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#resolvedCharset",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#resolvedCharset",
    "headType": "field",
    "relation": "haveType",
    "tail": "Charset",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MimeType#toStringValue",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MimeType#toStringValue",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]