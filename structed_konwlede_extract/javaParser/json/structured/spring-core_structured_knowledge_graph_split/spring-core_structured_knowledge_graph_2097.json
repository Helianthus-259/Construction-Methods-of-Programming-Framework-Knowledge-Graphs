[
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromSuperType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInheritedSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asFromInheritedSuperType() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).as(List.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"java.util.List<E>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asFromInheritedSuperType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInheritedSuperType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asNotFound()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asNotFound() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).as(Map.class);\r\n    assertThat(type).isSameAs(ResolvableType.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asNotFound()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asNotFound()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asSelf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asSelf() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class);\r\n    assertThat(type.as(ExtendsList.class)).isEqualTo(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asSelf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asSelf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperType() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).getSuperType();\r\n    assertThat(type.resolve()).isEqualTo(ArrayList.class);\r\n    type = type.getSuperType();\r\n    assertThat(type.resolve()).isEqualTo(AbstractList.class);\r\n    type = type.getSuperType();\r\n    assertThat(type.resolve()).isEqualTo(AbstractCollection.class);\r\n    type = type.getSuperType();\r\n    assertThat(type.resolve()).isEqualTo(Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getSuperType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getSuperType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInterfaces() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class);\r\n    assertThat(type.getInterfaces()).isEmpty();\r\n    SortedSet<String> interfaces = new TreeSet<>();\r\n    for (ResolvableType interfaceType : type.getSuperType().getInterfaces()) {\r\n        interfaces.add(interfaceType.toString());\r\n    }\r\n    assertThat(interfaces.toString()).isEqualTo(\"[java.io.Serializable, java.lang.Cloneable, \" + \"java.util.List<java.lang.CharSequence>, java.util.RandomAccess]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#noSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noSuperType() {\r\n    assertThat(ResolvableType.forClass(Object.class).getSuperType()).isEqualTo(ResolvableType.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#noSuperType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#noSuperType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#noInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noInterfaces() {\r\n    assertThat(ResolvableType.forClass(Object.class).getInterfaces()).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]