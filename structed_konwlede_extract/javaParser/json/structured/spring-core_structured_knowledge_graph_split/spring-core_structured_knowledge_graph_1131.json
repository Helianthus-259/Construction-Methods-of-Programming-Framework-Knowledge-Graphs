[
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#kotlinCoroutinesPresent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#kotlinCoroutinesPresent",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#mutinyPresent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#mutinyPresent",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#adapters",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#adapters",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<ReactiveAdapter>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#registerReactiveType(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register a reactive type along with functions to adapt to and from a\r\n * Reactive Streams {@link Publisher}. The function arguments assume that\r\n * their input is neither {@code null} nor {@link Optional}.\r\n * <p>This variant registers the new adapter after existing adapters.\r\n * It will be matched for the exact reactive type if no earlier adapter was\r\n * registered for the specific type, and it will be matched for assignability\r\n * in a second pass if no earlier adapter had an assignable type before.\r\n * @see #registerReactiveTypeOverride\r\n * @see #getAdapter\r\n */\r\npublic void registerReactiveType(ReactiveTypeDescriptor descriptor, Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {\r\n    this.adapters.add(buildAdapter(descriptor, toAdapter, fromAdapter));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#registerReactiveType(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#registerReactiveTypeOverride(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register a reactive type along with functions to adapt to and from a\r\n * Reactive Streams {@link Publisher}. The function arguments assume that\r\n * their input is neither {@code null} nor {@link Optional}.\r\n * <p>This variant registers the new adapter first, effectively overriding\r\n * any previously registered adapters for the same reactive type. This allows\r\n * for overriding existing adapters, in particular default adapters.\r\n * <p>Note that existing adapters for specific types will still match before\r\n * an assignability match with the new adapter. In order to override all\r\n * existing matches, a new reactive type adapter needs to be registered\r\n * for every specific type, not relying on subtype assignability matches.\r\n * @since 5.3.30\r\n * @see #registerReactiveType\r\n * @see #getAdapter\r\n */\r\npublic void registerReactiveTypeOverride(ReactiveTypeDescriptor descriptor, Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {\r\n    this.adapters.add(0, buildAdapter(descriptor, toAdapter, fromAdapter));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#registerReactiveTypeOverride(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#buildAdapter(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private ReactiveAdapter buildAdapter(ReactiveTypeDescriptor descriptor, Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {\r\n    return (reactorPresent ? new ReactorAdapter(descriptor, toAdapter, fromAdapter) : new ReactiveAdapter(descriptor, toAdapter, fromAdapter));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#buildAdapter(ReactiveTypeDescriptor,Function<Object,Publisher<?>>,Function<Publisher<?>,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#hasAdapters()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the registry has any adapters.\r\n */\r\npublic boolean hasAdapters() {\r\n    return !this.adapters.isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#hasAdapters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the adapter for the given reactive type.\r\n * @return the corresponding adapter, or {@code null} if none available\r\n */\r\n@Nullable\r\npublic ReactiveAdapter getAdapter(Class<?> reactiveType) {\r\n    return getAdapter(reactiveType, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the adapter for the given reactive type. Or if a \"source\" object is\r\n * provided, its actual type is used instead.\r\n * @param reactiveType the reactive type\r\n * (may be {@code null} if a concrete source object is given)\r\n * @param source an instance of the reactive type\r\n * (i.e. to adapt from; may be {@code null} if the reactive type is specified)\r\n * @return the corresponding adapter, or {@code null} if none available\r\n */\r\n@Nullable\r\npublic ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {\r\n    if (this.adapters.isEmpty()) {\r\n        return null;\r\n    }\r\n    Object sourceToUse = (source instanceof Optional<?> optional ? optional.orElse(null) : source);\r\n    Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);\r\n    if (clazz == null) {\r\n        return null;\r\n    }\r\n    for (ReactiveAdapter adapter : this.adapters) {\r\n        if (adapter.getReactiveType() == clazz) {\r\n            return adapter;\r\n        }\r\n    }\r\n    for (ReactiveAdapter adapter : this.adapters) {\r\n        if (adapter.getReactiveType().isAssignableFrom(clazz)) {\r\n            return adapter;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapterRegistry#getAdapter(Class<?>,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]