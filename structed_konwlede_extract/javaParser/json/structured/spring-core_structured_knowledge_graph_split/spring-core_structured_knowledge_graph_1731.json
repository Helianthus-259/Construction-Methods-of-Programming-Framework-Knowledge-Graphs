[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromAnnotation() throws Exception {\r\n    Method method = TransactionalStringGeneric.class.getMethod(\"something\", Object.class);\r\n    MergedAnnotation<Order> annotation = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.getDefaultValue(\"value\")).contains(Ordered.LOWEST_PRECEDENCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromNonPublicAnnotation() {\r\n    Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();\r\n    assertThat(declaredAnnotations).hasSize(1);\r\n    Annotation declaredAnnotation = declaredAnnotations[0];\r\n    MergedAnnotation<?> annotation = MergedAnnotation.from(declaredAnnotation);\r\n    assertThat(annotation.getType().getName()).isEqualTo(\"org.springframework.core.annotation.subpackage.NonPublicAnnotation\");\r\n    assertThat(annotation.getDefaultValue(\"value\")).contains(-1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromNonPublicAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromAnnotationType() {\r\n    MergedAnnotation<?> annotation = MergedAnnotation.of(Order.class);\r\n    assertThat(annotation.getDefaultValue(\"value\")).contains(Ordered.LOWEST_PRECEDENCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDefaultValueFromAnnotationType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamRepeatableDeclaredOnMethod() throws Exception {\r\n    Method method = InterfaceWithRepeated.class.getMethod(\"foo\");\r\n    Stream<MergedAnnotation<MyRepeatable>> annotations = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).stream(MyRepeatable.class);\r\n    Stream<String> values = annotations.map(annotation -> annotation.getString(\"value\"));\r\n    assertThat(values).containsExactly(\"A\", \"B\", \"C\", \"meta1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClassWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid streamRepeatableDeclaredOnClassWithAttributeAliases() {\r\n    assertThat(MergedAnnotations.from(HierarchyClass.class).stream(TestConfiguration.class)).isEmpty();\r\n    RepeatableContainers containers = RepeatableContainers.of(TestConfiguration.class, Hierarchy.class);\r\n    MergedAnnotations annotations = MergedAnnotations.from(HierarchyClass.class, SearchStrategy.DIRECT, containers, AnnotationFilter.NONE);\r\n    assertThat(annotations.stream(TestConfiguration.class).map(annotation -> annotation.getString(\"location\"))).containsExactly(\"A\", \"B\");\r\n    assertThat(annotations.stream(TestConfiguration.class).map(annotation -> annotation.getString(\"value\"))).containsExactly(\"A\", \"B\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClassWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClassWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClassWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamRepeatableDeclaredOnClass() {\r\n    Class<?> element = MyRepeatableClass.class;\r\n    String[] expectedValuesJava = { \"A\", \"B\", \"C\" };\r\n    String[] expectedValuesSpring = { \"A\", \"B\", \"C\", \"meta1\" };\r\n    testRepeatables(SearchStrategy.SUPERCLASS, element, expectedValuesJava, expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamRepeatableDeclaredOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]