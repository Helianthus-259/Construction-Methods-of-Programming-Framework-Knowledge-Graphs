[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyTypeCovariance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertyTypeCovariance() throws Exception {\r\n    GenericType<Number> genericBean = new NumberType();\r\n    Property property = new Property(getClass(), genericBean.getClass().getMethod(\"getProperty\"), genericBean.getClass().getMethod(\"setProperty\", Number.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#propertyTypeCovariance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyTypeCovariance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericTypeList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertyGenericTypeList() throws Exception {\r\n    GenericType<Integer> genericBean = new IntegerType();\r\n    Property property = new Property(getClass(), genericBean.getClass().getMethod(\"getListProperty\"), genericBean.getClass().getMethod(\"setListProperty\", List.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericTypeList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericTypeList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericClassList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertyGenericClassList() throws Exception {\r\n    IntegerClass genericBean = new IntegerClass();\r\n    Property property = new Property(genericBean.getClass(), genericBean.getClass().getMethod(\"getListProperty\"), genericBean.getClass().getMethod(\"setListProperty\", List.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getAnnotation(MethodAnnotation1.class)).isNotNull();\r\n    assertThat(desc.hasAnnotation(MethodAnnotation1.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericClassList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericClassList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#property()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid property() throws Exception {\r\n    Property property = new Property(getClass(), getClass().getMethod(\"getProperty\"), getClass().getMethod(\"setProperty\", Map.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getType()).isEqualTo(Map.class);\r\n    assertThat(desc.getMapKeyTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Long.class);\r\n    assertThat(desc.getAnnotation(MethodAnnotation1.class)).isNotNull();\r\n    assertThat(desc.getAnnotation(MethodAnnotation2.class)).isNotNull();\r\n    assertThat(desc.getAnnotation(MethodAnnotation3.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#property()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#property()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsLocallyAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationOnMethodThatIsLocallyAnnotated() throws Exception {\r\n    assertAnnotationFoundOnMethod(MethodAnnotation1.class, \"methodWithLocalAnnotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsLocallyAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsLocallyAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationOnMethodThatIsMetaAnnotated() throws Exception {\r\n    assertAnnotationFoundOnMethod(MethodAnnotation1.class, \"methodWithComposedAnnotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaMetaAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationOnMethodThatIsMetaMetaAnnotated() throws Exception {\r\n    assertAnnotationFoundOnMethod(MethodAnnotation1.class, \"methodWithComposedComposedAnnotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationOnMethodThatIsMetaMetaAnnotated()",
    "tailType": "method"
  }
]