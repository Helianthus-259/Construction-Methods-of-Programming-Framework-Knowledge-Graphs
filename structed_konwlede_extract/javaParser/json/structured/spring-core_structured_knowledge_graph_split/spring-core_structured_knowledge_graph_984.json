[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#fromEmptyByteBuffer(DefaultDataBufferFactory,ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#getNativeBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Directly exposes the native {@code ByteBuffer} that this buffer is based\r\n * on. The {@linkplain ByteBuffer#position() position} of the returned\r\n * {@code ByteBuffer} is set to the {@linkplain #readPosition() read\r\n * position}, and the {@linkplain ByteBuffer#limit()} to the\r\n * {@linkplain #writePosition() write position}.\r\n * @return the wrapped byte buffer\r\n */\r\npublic ByteBuffer getNativeBuffer() {\r\n    return this.byteBuffer.duplicate().position(this.readPosition).limit(this.writePosition);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#getNativeBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#setNativeBuffer(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void setNativeBuffer(ByteBuffer byteBuffer) {\r\n    this.byteBuffer = byteBuffer;\r\n    this.capacity = byteBuffer.capacity();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#setNativeBuffer(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#factory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBufferFactory factory() {\r\n    return this.dataBufferFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#factory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#factory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#indexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int indexOf(IntPredicate predicate, int fromIndex) {\r\n    Assert.notNull(predicate, \"IntPredicate must not be null\");\r\n    if (fromIndex < 0) {\r\n        fromIndex = 0;\r\n    } else if (fromIndex >= this.writePosition) {\r\n        return -1;\r\n    }\r\n    for (int i = fromIndex; i < this.writePosition; i++) {\r\n        byte b = this.byteBuffer.get(i);\r\n        if (predicate.test(b)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#indexOf(IntPredicate,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#indexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#lastIndexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int lastIndexOf(IntPredicate predicate, int fromIndex) {\r\n    Assert.notNull(predicate, \"IntPredicate must not be null\");\r\n    int i = Math.min(fromIndex, this.writePosition - 1);\r\n    for (; i >= 0; i--) {\r\n        byte b = this.byteBuffer.get(i);\r\n        if (predicate.test(b)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#lastIndexOf(IntPredicate,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#lastIndexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readableByteCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int readableByteCount() {\r\n    return this.writePosition - this.readPosition;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#readableByteCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readableByteCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int writableByteCount() {\r\n    return this.capacity - this.writePosition;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]