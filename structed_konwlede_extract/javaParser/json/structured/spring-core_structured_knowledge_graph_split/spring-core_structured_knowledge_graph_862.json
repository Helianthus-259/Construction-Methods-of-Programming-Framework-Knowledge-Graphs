[
  {
    "head": "org.springframework.core.convert.Property#resolveReadMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate MethodParameter resolveReadMethodParameter() {\r\n    if (getReadMethod() == null) {\r\n        return null;\r\n    }\r\n    return new MethodParameter(getReadMethod(), -1).withContainingClass(getObjectType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#resolveReadMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveReadMethodParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveWriteMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate MethodParameter resolveWriteMethodParameter() {\r\n    if (getWriteMethod() == null) {\r\n        return null;\r\n    }\r\n    return new MethodParameter(getWriteMethod(), 0).withContainingClass(getObjectType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#resolveWriteMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveWriteMethodParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Annotation[] resolveAnnotations() {\r\n    Annotation[] annotations = annotationCache.get(this);\r\n    if (annotations == null) {\r\n        Map<Class<? extends Annotation>, Annotation> annotationMap = new LinkedHashMap<>();\r\n        addAnnotationsToMap(annotationMap, getReadMethod());\r\n        addAnnotationsToMap(annotationMap, getWriteMethod());\r\n        addAnnotationsToMap(annotationMap, getField());\r\n        annotations = annotationMap.values().toArray(new Annotation[0]);\r\n        annotationCache.put(this, annotations);\r\n    }\r\n    return annotations;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#resolveAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#addAnnotationsToMap(Map<Class<? extends Annotation>,Annotation>,AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addAnnotationsToMap(Map<Class<? extends Annotation>, Annotation> annotationMap, @Nullable AnnotatedElement object) {\r\n    if (object != null) {\r\n        for (Annotation annotation : object.getAnnotations()) {\r\n            annotationMap.put(annotation.annotationType(), annotation);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#addAnnotationsToMap(Map<Class<? extends Annotation>,Annotation>,AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Field getField() {\r\n    String name = getName();\r\n    if (!StringUtils.hasLength(name)) {\r\n        return null;\r\n    }\r\n    Field field = null;\r\n    Class<?> declaringClass = declaringClass();\r\n    if (declaringClass != null) {\r\n        field = ReflectionUtils.findField(declaringClass, name);\r\n        if (field == null) {\r\n            // Same lenient fallback checking as in CachedIntrospectionResults...\r\n            field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));\r\n            if (field == null) {\r\n                field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));\r\n            }\r\n        }\r\n    }\r\n    return field;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#declaringClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Class<?> declaringClass() {\r\n    if (getReadMethod() != null) {\r\n        return getReadMethod().getDeclaringClass();\r\n    } else if (getWriteMethod() != null) {\r\n        return getWriteMethod().getDeclaringClass();\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#declaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#declaringClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof Property that && ObjectUtils.nullSafeEquals(this.objectType, that.objectType) && ObjectUtils.nullSafeEquals(this.name, that.name) && ObjectUtils.nullSafeEquals(this.readMethod, that.readMethod) && ObjectUtils.nullSafeEquals(this.writeMethod, that.writeMethod)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return Objects.hash(this.objectType, this.name);\r\n}",
    "tailType": "method_code"
  }
]