[
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodAnnotations(C,int,Method,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processMethodAnnotations(C context, int aggregateIndex, Method source, AnnotationsProcessor<C, R> processor) {\r\n    @Nullable\r\n    Annotation[] annotations = getDeclaredAnnotations(source, false);\r\n    R result = processor.doWithAnnotations(context, aggregateIndex, source, annotations);\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(source);\r\n    if (bridgedMethod != source) {\r\n        @Nullable\r\n        Annotation[] bridgedAnnotations = getDeclaredAnnotations(bridgedMethod, true);\r\n        for (int i = 0; i < bridgedAnnotations.length; i++) {\r\n            if (ObjectUtils.containsElement(annotations, bridgedAnnotations[i])) {\r\n                bridgedAnnotations[i] = null;\r\n            }\r\n        }\r\n        return processor.doWithAnnotations(context, aggregateIndex, source, bridgedAnnotations);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processMethodAnnotations(C,int,Method,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodAnnotations(C,int,Method,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processElement(C,AnnotatedElement,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processElement(C context, AnnotatedElement source, AnnotationsProcessor<C, R> processor) {\r\n    try {\r\n        R result = processor.doWithAggregate(context, 0);\r\n        return (result != null ? result : processor.doWithAnnotations(context, 0, source, getDeclaredAnnotations(source, false)));\r\n    } catch (Throwable ex) {\r\n        AnnotationUtils.handleIntrospectionFailure(source, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processElement(C,AnnotatedElement,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processElement(C,AnnotatedElement,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nstatic <A extends Annotation> A getDeclaredAnnotation(AnnotatedElement source, Class<A> annotationType) {\r\n    @Nullable\r\n    Annotation[] annotations = getDeclaredAnnotations(source, false);\r\n    for (Annotation annotation : annotations) {\r\n        if (annotation != null && annotationType == annotation.annotationType()) {\r\n            return (A) annotation;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotation(AnnotatedElement,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotations(AnnotatedElement,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Dataflow analysis limitation\r\n@SuppressWarnings(\"NullAway\")\r\n@Nullable\r\nstatic Annotation[] getDeclaredAnnotations(AnnotatedElement source, boolean defensive) {\r\n    boolean cached = false;\r\n    @Nullable\r\n    Annotation[] annotations = declaredAnnotationCache.get(source);\r\n    if (annotations != null) {\r\n        cached = true;\r\n    } else {\r\n        annotations = source.getDeclaredAnnotations();\r\n        if (annotations.length != 0) {\r\n            boolean allIgnored = true;\r\n            for (int i = 0; i < annotations.length; i++) {\r\n                Annotation annotation = annotations[i];\r\n                //noinspection DataFlowIssue\r\n                if (isIgnorable(annotation.annotationType()) || !AttributeMethods.forAnnotationType(annotation.annotationType()).canLoad(annotation)) {\r\n                    annotations[i] = null;\r\n                } else {\r\n                    allIgnored = false;\r\n                }\r\n            }\r\n            annotations = (allIgnored ? NO_ANNOTATIONS : annotations);\r\n            if (source instanceof Class || source instanceof Member) {\r\n                //noinspection NullableProblems\r\n                declaredAnnotationCache.put(source, annotations);\r\n                cached = true;\r\n            }\r\n        }\r\n    }\r\n    if (!defensive || annotations.length == 0 || !cached) {\r\n        return annotations;\r\n    }\r\n    return annotations.clone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotations(AnnotatedElement,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotations(AnnotatedElement,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getDeclaredAnnotations(AnnotatedElement,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#isIgnorable(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isIgnorable(Class<?> annotationType) {\r\n    return AnnotationFilter.PLAIN.matches(annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#isIgnorable(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#isKnownEmpty(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "static boolean isKnownEmpty(AnnotatedElement source, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass) {\r\n    if (hasPlainJavaAnnotationsOnly(source)) {\r\n        return true;\r\n    }\r\n    if (searchStrategy == SearchStrategy.DIRECT || isWithoutHierarchy(source, searchEnclosingClass)) {\r\n        if (source instanceof Method method && method.isBridge()) {\r\n            return false;\r\n        }\r\n        return getDeclaredAnnotations(source, false).length == 0;\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#isKnownEmpty(AnnotatedElement,SearchStrategy,Predicate<Class<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#hasPlainJavaAnnotationsOnly(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "static boolean hasPlainJavaAnnotationsOnly(@Nullable Object annotatedElement) {\r\n    if (annotatedElement instanceof Class<?> clazz) {\r\n        return hasPlainJavaAnnotationsOnly(clazz);\r\n    } else if (annotatedElement instanceof Member member) {\r\n        return hasPlainJavaAnnotationsOnly(member.getDeclaringClass());\r\n    } else {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#hasPlainJavaAnnotationsOnly(Object)",
    "tailType": "method"
  }
]