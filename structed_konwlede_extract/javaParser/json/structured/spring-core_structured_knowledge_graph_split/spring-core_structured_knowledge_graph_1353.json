[
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#decodeBigInteger(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ObjectUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.Array;\nimport java.nio.charset.Charset;\nimport java.time.ZoneId;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.StringJoiner;\nimport java.util.TimeZone;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.lang.Contract;\n\n/**\n * Miscellaneous object utility methods.\n *\n * <p>Mainly for internal use within the framework.\n *\n * <p>Thanks to Alex Ruiz for contributing several enhancements to this class!\n *\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rod Johnson\n * @author Rob Harrop\n * @author Chris Beams\n * @author Sam Brannen\n * @since 19.03.2004\n * @see ClassUtils\n * @see CollectionUtils\n * @see StringUtils\n */\npublic abstract class ObjectUtils {\n\n\tprivate static final String EMPTY_STRING = \"\";\n\tprivate static final String NULL_STRING = \"null\";\n\tprivate static final String ARRAY_START = \"{\";\n\tprivate static final String ARRAY_END = \"}\";\n\tprivate static final String EMPTY_ARRAY = ARRAY_START + ARRAY_END;\n\tprivate static final String ARRAY_ELEMENT_SEPARATOR = \", \";\n\tprivate static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n\tprivate static final String NON_EMPTY_ARRAY = ARRAY_START + \"...\" + ARRAY_END;\n\tprivate static final String COLLECTION = \"[...]\";\n\tprivate static final String MAP = NON_EMPTY_ARRAY;\n\n\n\t/**\n\t * Return whether the given throwable is a checked exception:\n\t * that is, neither a RuntimeException nor an Error.\n\t * @param ex the throwable to check\n\t * @return whether the throwable is a checked exception\n\t * @see java.lang.Exception\n\t * @see java.lang.RuntimeException\n\t * @see java.lang.Error\n\t */\n\tpublic static boolean isCheckedException(Throwable ex) {\n\t\treturn !(ex instanceof RuntimeException || ex instanceof Error);\n\t}\n\n\t/**\n\t * Check whether the given exception is compatible with the specified\n\t * exception types, as declared in a {@code throws} clause.\n\t * @param ex the exception to check\n\t * @param declaredExceptions the exception types declared in the throws clause\n\t * @return whether the given exception is compatible\n\t */\n\tpublic static boolean isCompatibleWithThrowsClause(Throwable ex, Class<?> @Nullable ... declaredExceptions) {\n\t\tif (!isCheckedException(ex)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (declaredExceptions != null) {\n\t\t\tfor (Class<?> declaredException : declaredExceptions) {\n\t\t\t\tif (declaredException.isInstance(ex)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determine whether the given object is an array:\n\t * either an Object array or a primitive array.\n\t * @param obj the object to check\n\t */\n\t@Contract(\"null -> false\")\n\tpublic static boolean isArray(@Nullable Object obj) {\n\t\treturn (obj != null && obj.getClass().isArray());\n\t}\n\n\t/**\n\t * Determine whether the given array is empty:\n\t * i.e. {@code null} or of zero length.\n\t * @param array the array to check\n\t * @see #isEmpty(Object)\n\t */\n\t@Contract(\"null -> true\")\n\tpublic static boolean isEmpty(@Nullable Object @Nullable [] array) {\n\t\treturn (array == null || array.length == 0);\n\t}\n\n\t/**\n\t * Determine whether the given object is empty.\n\t * <p>This method supports the following object types.\n\t * <ul>\n\t * <li>{@code Optional}: considered empty if not {@link Optional#isPresent()}</li>\n\t * <li>{@code Array}: considered empty if its length is zero</li>\n\t * <li>{@link CharSequence}: considered empty if its length is zero</li>\n\t * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>\n\t * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>\n\t * </ul>\n\t * <p>If the given object is non-null and not one of the aforementioned\n\t * supported types, this method returns {@code false}.\n\t * @param obj the object to check\n\t * @return {@code true} if the object is {@code null} or <em>empty</em>\n\t * @since 4.2\n\t * @see Optional#isPresent()\n\t * @see ObjectUtils#isEmpty(Object[])\n\t * @see StringUtils#hasLength(CharSequence)\n\t * @see CollectionUtils#isEmpty(java.util.Collection)\n\t * @see CollectionUtils#isEmpty(java.util.Map)\n\t */\n\t@Contract(\"null -> true\")\n\tpublic static boolean isEmpty(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (obj instanceof Optional<?> optional) {\n\t\t\treturn optional.isEmpty();\n\t\t}\n\t\tif (obj instanceof CharSequence charSequence) {\n\t\t\treturn charSequence.isEmpty();\n\t\t}\n\t\tif (obj.getClass().isArray()) {\n\t\t\treturn Array.getLength(obj) == 0;\n\t\t}\n\t\tif (obj instanceof Collection<?> collection) {\n\t\t\treturn collection.isEmpty();\n\t\t}\n\t\tif (obj instanceof Map<?, ?> map) {\n\t\t\treturn map.isEmpty();\n\t\t}\n\n\t\t// else\n\t\treturn false;\n\t}\n\n\t/**\n\t * Unwrap the given object which is potentially a {@link java.util.Optional}.\n\t * @param obj the candidate object\n\t * @return either the value held within the {@code Optional}, {@code null}\n\t * if the {@code Optional} is empty, or simply the given object as-is\n\t * @since 5.0\n\t */\n\tpublic static @Nullable Object unwrapOptional(@Nullable Object obj) {\n\t\tif (obj instanceof Optional<?> optional) {\n\t\t\tObject result = optional.orElse(null);\n\t\t\tAssert.isTrue(!(result instanceof Optional), \"Multi-level Optional usage not supported\");\n\t\t\treturn result;\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Check whether the given array contains the given element.\n\t * @param array the array to check (may be {@code null},\n\t * in which case the return value will always be {@code false})\n\t * @param element the element to check for\n\t * @return whether the element has been found in the given array\n\t */\n\tpublic static boolean containsElement(@Nullable Object @Nullable [] array, @Nullable Object element) {\n\t\tif (array == null) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (Object arrayEle : array) {\n\t\t\tif (nullSafeEquals(arrayEle, element)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check whether the given array of enum constants contains a constant with the given name,\n\t * ignoring case when determining a match.\n\t * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}\n\t * @param constant the constant name to find (must not be null or empty string)\n\t * @return whether the constant has been found in the given array\n\t */\n\tpublic static boolean containsConstant(Enum<?>[] enumValues, String constant) {\n\t\treturn containsConstant(enumValues, constant, false);\n\t}\n\n\t/**\n\t * Check whether the given array of enum constants contains a constant with the given name.\n\t * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}\n\t * @param constant the constant name to find (must not be null or empty string)\n\t * @param caseSensitive whether case is significant in determining a match\n\t * @return whether the constant has been found in the given array\n\t */\n\tpublic static boolean containsConstant(Enum<?>[] enumValues, String constant, boolean caseSensitive) {\n\t\tfor (Enum<?> candidate : enumValues) {\n\t\t\tif (caseSensitive ? candidate.toString().equals(constant) :\n\t\t\t\t\tcandidate.toString().equalsIgnoreCase(constant)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Case insensitive alternative to {@link Enum#valueOf(Class, String)}.\n\t * @param <E> the concrete Enum type\n\t * @param enumValues the array of all Enum constants in question, usually per {@code Enum.values()}\n\t * @param constant the constant to get the enum value of\n\t * @throws IllegalArgumentException if the given constant is not found in the given array\n\t * of enum values. Use {@link #containsConstant(Enum[], String)} as a guard to avoid this exception.\n\t */\n\tpublic static <E extends Enum<?>> E caseInsensitiveValueOf(E[] enumValues, String constant) {\n\t\tfor (E candidate : enumValues) {\n\t\t\tif (candidate.toString().equalsIgnoreCase(constant)) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Constant [\" + constant + \"] does not exist in enum type \" +\n\t\t\t\tenumValues.getClass().componentType().getName());\n\t}\n\n\t/**\n\t * Append the given object to the given array, returning a new array\n\t * consisting of the input array contents plus the given object.\n\t * @param array the array to append to (can be {@code null})\n\t * @param obj the object to append\n\t * @return the new array (of the same component type; never {@code null})\n\t */\n\tpublic static <A, O extends A> A[] addObjectToArray(A @Nullable [] array, @Nullable O obj) {\n\t\treturn addObjectToArray(array, obj, (array != null ? array.length : 0));\n\t}\n\n\t/**\n\t * Add the given object to the given array at the specified position, returning\n\t * a new array consisting of the input array contents plus the given object.\n\t * @param array the array to add to (can be {@code null})\n\t * @param obj the object to append\n\t * @param position the position at which to add the object\n\t * @return the new array (of the same component type; never {@code null})\n\t * @since 6.0\n\t */\n\tpublic static <A, O extends A> @Nullable A[] addObjectToArray(A @Nullable [] array, @Nullable O obj, int position) {\n\t\tClass<?> componentType = Object.class;\n\t\tif (array != null) {\n\t\t\tcomponentType = array.getClass().componentType();\n\t\t}\n\t\telse if (obj != null) {\n\t\t\tcomponentType = obj.getClass();\n\t\t}\n\t\tint newArrayLength = (array != null ? array.length + 1 : 1);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t@Nullable A[] newArray = (A[]) Array.newInstance(componentType, newArrayLength);\n\t\tif (array != null) {\n\t\t\tSystem.arraycopy(array, 0, newArray, 0, position);\n\t\t\tSystem.arraycopy(array, position, newArray, position + 1, array.length - position);\n\t\t}\n\t\tnewArray[position] = obj;\n\t\treturn newArray;\n\t}\n\n\t/**\n\t * Convert the given array (which may be a primitive array) to an object array (if\n\t * necessary, to an array of primitive wrapper objects).\n\t * <p>A {@code null} source value or empty primitive array will be converted to an\n\t * empty Object array.\n\t * @param source the (potentially primitive) array\n\t * @return the corresponding object array (never {@code null})\n\t * @throws IllegalArgumentException if the parameter is not an array\n\t */\n\tpublic static Object[] toObjectArray(@Nullable Object source) {\n\t\tif (source instanceof Object[] objects) {\n\t\t\treturn objects;\n\t\t}\n\t\tif (source == null) {\n\t\t\treturn EMPTY_OBJECT_ARRAY;\n\t\t}\n\t\tif (!source.getClass().isArray()) {\n\t\t\tthrow new IllegalArgumentException(\"Source is not an array: \" + source);\n\t\t}\n\t\tint length = Array.getLength(source);\n\t\tif (length == 0) {\n\t\t\treturn EMPTY_OBJECT_ARRAY;\n\t\t}\n\t\tClass<?> wrapperType = Array.get(source, 0).getClass();\n\t\tObject[] newArray = (Object[]) Array.newInstance(wrapperType, length);\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tnewArray[i] = Array.get(source, i);\n\t\t}\n\t\treturn newArray;\n\t}\n\n\n\t//---------------------------------------------------------------------\n\t// Convenience methods for content-based equality/hash-code handling\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Determine if the given objects are equal, returning {@code true} if\n\t * both are {@code null} or {@code false} if only one is {@code null}.\n\t * <p>Compares arrays with {@code Arrays.equals}, performing an equality\n\t * check based on the array elements rather than the array reference.\n\t * @param o1 first Object to compare\n\t * @param o2 second Object to compare\n\t * @return whether the given objects are equal\n\t * @see Object#equals(Object)\n\t * @see java.util.Arrays#equals\n\t */\n\t@Contract(\"null, null -> true; null, _ -> false; _, null -> false\")\n\tpublic static boolean nullSafeEquals(@Nullable Object o1, @Nullable Object o2) {\n\t\tif (o1 == o2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o1 == null || o2 == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (o1.equals(o2)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o1.getClass().isArray() && o2.getClass().isArray()) {\n\t\t\treturn arrayEquals(o1, o2);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Compare the given arrays with {@code Arrays.equals}, performing an equality\n\t * check based on the array elements rather than the array reference.\n\t * @param o1 first array to compare\n\t * @param o2 second array to compare\n\t * @return whether the given objects are equal\n\t * @see #nullSafeEquals(Object, Object)\n\t * @see java.util.Arrays#equals\n\t */\n\tprivate static boolean arrayEquals(Object o1, Object o2) {\n\t\tif (o1 instanceof Object[] objects1 && o2 instanceof Object[] objects2) {\n\t\t\treturn Arrays.equals(objects1, objects2);\n\t\t}\n\t\tif (o1 instanceof boolean[] booleans1 && o2 instanceof boolean[] booleans2) {\n\t\t\treturn Arrays.equals(booleans1, booleans2);\n\t\t}\n\t\tif (o1 instanceof byte[] bytes1 && o2 instanceof byte[] bytes2) {\n\t\t\treturn Arrays.equals(bytes1, bytes2);\n\t\t}\n\t\tif (o1 instanceof char[] chars1 && o2 instanceof char[] chars2) {\n\t\t\treturn Arrays.equals(chars1, chars2);\n\t\t}\n\t\tif (o1 instanceof double[] doubles1 && o2 instanceof double[] doubles2) {\n\t\t\treturn Arrays.equals(doubles1, doubles2);\n\t\t}\n\t\tif (o1 instanceof float[] floats1 && o2 instanceof float[] floats2) {\n\t\t\treturn Arrays.equals(floats1, floats2);\n\t\t}\n\t\tif (o1 instanceof int[] ints1 && o2 instanceof int[] ints2) {\n\t\t\treturn Arrays.equals(ints1, ints2);\n\t\t}\n\t\tif (o1 instanceof long[] longs1 && o2 instanceof long[] longs2) {\n\t\t\treturn Arrays.equals(longs1, longs2);\n\t\t}\n\t\tif (o1 instanceof short[] shorts1 && o2 instanceof short[] shorts2) {\n\t\t\treturn Arrays.equals(shorts1, shorts2);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return a hash code for the given elements, delegating to\n\t * {@link #nullSafeHashCode(Object)} for each element. Contrary\n\t * to {@link Objects#hash(Object...)}, this method can handle an\n\t * element that is an array.\n\t * @param elements the elements to be hashed\n\t * @return a hash value of the elements\n\t * @since 6.1\n\t */\n\tpublic static int nullSafeHash(@Nullable Object @Nullable ... elements) {\n\t\tif (elements == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tint result = 1;\n\t\tfor (Object element : elements) {\n\t\t\tresult = 31 * result + nullSafeHashCode(element);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Return a hash code for the given object; typically the value of\n\t * {@code Object#hashCode()}}. If the object is an array,\n\t * this method will delegate to any of the {@code Arrays.hashCode}\n\t * methods. If the object is {@code null}, this method returns 0.\n\t * @see Object#hashCode()\n\t * @see Arrays\n\t */\n\tpublic static int nullSafeHashCode(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (obj.getClass().isArray()) {\n\t\t\tif (obj instanceof Object[] objects) {\n\t\t\t\treturn Arrays.hashCode(objects);\n\t\t\t}\n\t\t\tif (obj instanceof boolean[] booleans) {\n\t\t\t\treturn Arrays.hashCode(booleans);\n\t\t\t}\n\t\t\tif (obj instanceof byte[] bytes) {\n\t\t\t\treturn Arrays.hashCode(bytes);\n\t\t\t}\n\t\t\tif (obj instanceof char[] chars) {\n\t\t\t\treturn Arrays.hashCode(chars);\n\t\t\t}\n\t\t\tif (obj instanceof double[] doubles) {\n\t\t\t\treturn Arrays.hashCode(doubles);\n\t\t\t}\n\t\t\tif (obj instanceof float[] floats) {\n\t\t\t\treturn Arrays.hashCode(floats);\n\t\t\t}\n\t\t\tif (obj instanceof int[] ints) {\n\t\t\t\treturn Arrays.hashCode(ints);\n\t\t\t}\n\t\t\tif (obj instanceof long[] longs) {\n\t\t\t\treturn Arrays.hashCode(longs);\n\t\t\t}\n\t\t\tif (obj instanceof short[] shorts) {\n\t\t\t\treturn Arrays.hashCode(shorts);\n\t\t\t}\n\t\t}\n\t\treturn obj.hashCode();\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(Object[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(Object @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(boolean[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(boolean @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(byte[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(byte @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(char[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(char @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(double[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(double @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(float[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(float @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(int[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(int @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(long[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(long @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\t/**\n\t * Return a hash code based on the contents of the specified array.\n\t * If {@code array} is {@code null}, this method returns 0.\n\t * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(short[])}\n\t */\n\t@Deprecated(since = \"6.1\")\n\tpublic static int nullSafeHashCode(short @Nullable [] array) {\n\t\treturn Arrays.hashCode(array);\n\t}\n\n\n\t//---------------------------------------------------------------------\n\t// Convenience methods for toString output\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Return a String representation of an object's overall identity.\n\t * @param obj the object (may be {@code null})\n\t * @return the object's identity as String representation,\n\t * or an empty String if the object was {@code null}\n\t */\n\tpublic static String identityToString(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn EMPTY_STRING;\n\t\t}\n\t\treturn obj.getClass().getName() + \"@\" + getIdentityHexString(obj);\n\t}\n\n\t/**\n\t * Return a hex String form of an object's identity hash code.\n\t * @param obj the object\n\t * @return the object's identity code in hex notation\n\t */\n\tpublic static String getIdentityHexString(Object obj) {\n\t\treturn Integer.toHexString(System.identityHashCode(obj));\n\t}\n\n\t/**\n\t * Return a content-based String representation if {@code obj} is\n\t * not {@code null}; otherwise returns an empty String.\n\t * <p>Differs from {@link #nullSafeToString(Object)} in that it returns\n\t * an empty String rather than \"null\" for a {@code null} value.\n\t * @param obj the object to build a display String for\n\t * @return a display String representation of {@code obj}\n\t * @see #nullSafeToString(Object)\n\t */\n\tpublic static String getDisplayString(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn EMPTY_STRING;\n\t\t}\n\t\treturn nullSafeToString(obj);\n\t}\n\n\t/**\n\t * Determine the class name for the given object.\n\t * <p>Returns a {@code \"null\"} String if {@code obj} is {@code null}.\n\t * @param obj the object to introspect (may be {@code null})\n\t * @return the corresponding class name\n\t */\n\tpublic static String nullSafeClassName(@Nullable Object obj) {\n\t\treturn (obj != null ? obj.getClass().getName() : NULL_STRING);\n\t}\n\n\t/**\n\t * Return a String representation of the specified Object.\n\t * <p>Builds a String representation of the contents in case of an array.\n\t * Returns a {@code \"null\"} String if {@code obj} is {@code null}.\n\t * @param obj the object to build a String representation for\n\t * @return a String representation of {@code obj}\n\t * @see #nullSafeConciseToString(Object)\n\t */\n\tpublic static String nullSafeToString(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (obj instanceof String string) {\n\t\t\treturn string;\n\t\t}\n\t\tif (obj instanceof Object[] objects) {\n\t\t\treturn nullSafeToString(objects);\n\t\t}\n\t\tif (obj instanceof boolean[] booleans) {\n\t\t\treturn nullSafeToString(booleans);\n\t\t}\n\t\tif (obj instanceof byte[] bytes) {\n\t\t\treturn nullSafeToString(bytes);\n\t\t}\n\t\tif (obj instanceof char[] chars) {\n\t\t\treturn nullSafeToString(chars);\n\t\t}\n\t\tif (obj instanceof double[] doubles) {\n\t\t\treturn nullSafeToString(doubles);\n\t\t}\n\t\tif (obj instanceof float[] floats) {\n\t\t\treturn nullSafeToString(floats);\n\t\t}\n\t\tif (obj instanceof int[] ints) {\n\t\t\treturn nullSafeToString(ints);\n\t\t}\n\t\tif (obj instanceof long[] longs) {\n\t\t\treturn nullSafeToString(longs);\n\t\t}\n\t\tif (obj instanceof short[] shorts) {\n\t\t\treturn nullSafeToString(shorts);\n\t\t}\n\t\tString str = obj.toString();\n\t\treturn (str != null ? str : EMPTY_STRING);\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(@Nullable Object @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tint length = array.length;\n\t\tif (length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (Object o : array) {\n\t\t\tstringJoiner.add(String.valueOf(o));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(boolean @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tint length = array.length;\n\t\tif (length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (boolean b : array) {\n\t\t\tstringJoiner.add(String.valueOf(b));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(byte @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (byte b : array) {\n\t\t\tstringJoiner.add(String.valueOf(b));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(char @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (char c : array) {\n\t\t\tstringJoiner.add('\\'' + String.valueOf(c) + '\\'');\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(double @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (double d : array) {\n\t\t\tstringJoiner.add(String.valueOf(d));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(float @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (float f : array) {\n\t\t\tstringJoiner.add(String.valueOf(f));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(int @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (int i : array) {\n\t\t\tstringJoiner.add(String.valueOf(i));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(long @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tint length = array.length;\n\t\tif (length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (long l : array) {\n\t\t\tstringJoiner.add(String.valueOf(l));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Return a String representation of the contents of the specified array.\n\t * <p>The String representation consists of a list of the array's elements,\n\t * enclosed in curly braces ({@code \"{}\"}). Adjacent elements are separated\n\t * by the characters {@code \", \"} (a comma followed by a space).\n\t * Returns a {@code \"null\"} String if {@code array} is {@code null}.\n\t * @param array the array to build a String representation for\n\t * @return a String representation of {@code array}\n\t */\n\tpublic static String nullSafeToString(short @Nullable [] array) {\n\t\tif (array == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (array.length == 0) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tStringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\n\t\tfor (short s : array) {\n\t\t\tstringJoiner.add(String.valueOf(s));\n\t\t}\n\t\treturn stringJoiner.toString();\n\t}\n\n\t/**\n\t * Generate a null-safe, concise string representation of the supplied object\n\t * as described below.\n\t * <p>Favor this method over {@link #nullSafeToString(Object)} when you need\n\t * the length of the generated string to be limited.\n\t * <p>Returns:\n\t * <ul>\n\t * <li>{@code \"null\"} if {@code obj} is {@code null}</li>\n\t * <li>{@code \"Optional.empty\"} if {@code obj} is an empty {@link Optional}</li>\n\t * <li>{@code \"Optional[<concise-string>]\"} if {@code obj} is a non-empty {@code Optional},\n\t * where {@code <concise-string>} is the result of invoking this method on the object\n\t * contained in the {@code Optional}</li>\n\t * <li>{@code \"{}\"} if {@code obj} is an empty array</li>\n\t * <li>{@code \"{...}\"} if {@code obj} is a {@link Map} or a non-empty array</li>\n\t * <li>{@code \"[...]\"} if {@code obj} is a {@link Collection}</li>\n\t * <li>{@linkplain Class#getName() Class name} if {@code obj} is a {@link Class}</li>\n\t * <li>{@linkplain Charset#name() Charset name} if {@code obj} is a {@link Charset}</li>\n\t * <li>{@linkplain TimeZone#getID() TimeZone ID} if {@code obj} is a {@link TimeZone}</li>\n\t * <li>{@linkplain ZoneId#getId() Zone ID} if {@code obj} is a {@link ZoneId}</li>\n\t * <li>Potentially {@linkplain StringUtils#truncate(CharSequence) truncated string}\n\t * if {@code obj} is a {@link String} or {@link CharSequence}</li>\n\t * <li>Potentially {@linkplain StringUtils#truncate(CharSequence) truncated string}\n\t * if {@code obj} is a <em>simple value type</em> whose {@code toString()} method\n\t * returns a non-null value</li>\n\t * <li>Otherwise, a string representation of the object's type name concatenated\n\t * with {@code \"@\"} and a hex string form of the object's identity hash code</li>\n\t * </ul>\n\t * <p>In the context of this method, a <em>simple value type</em> is any of the following:\n\t * primitive wrapper (excluding {@link Void}), {@link Enum}, {@link Number},\n\t * {@link java.util.Date Date}, {@link java.time.temporal.Temporal Temporal},\n\t * {@link java.io.File File}, {@link java.nio.file.Path Path},\n\t * {@link java.net.URI URI}, {@link java.net.URL URL},\n\t * {@link java.net.InetAddress InetAddress}, {@link java.util.Currency Currency},\n\t * {@link java.util.Locale Locale}, {@link java.util.UUID UUID},\n\t * {@link java.util.regex.Pattern Pattern}.\n\t * @param obj the object to build a string representation for\n\t * @return a concise string representation of the supplied object\n\t * @since 5.3.27\n\t * @see #nullSafeToString(Object)\n\t * @see StringUtils#truncate(CharSequence)\n\t * @see ClassUtils#isSimpleValueType(Class)\n\t */\n\tpublic static String nullSafeConciseToString(@Nullable Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn NULL_STRING;\n\t\t}\n\t\tif (obj instanceof Optional<?> optional) {\n\t\t\treturn (optional.isEmpty() ? \"Optional.empty\" :\n\t\t\t\t\"Optional[%s]\".formatted(nullSafeConciseToString(optional.get())));\n\t\t}\n\t\tif (obj.getClass().isArray()) {\n\t\t\treturn (Array.getLength(obj) == 0 ? EMPTY_ARRAY : NON_EMPTY_ARRAY);\n\t\t}\n\t\tif (obj instanceof Collection) {\n\t\t\treturn COLLECTION;\n\t\t}\n\t\tif (obj instanceof Map) {\n\t\t\treturn MAP;\n\t\t}\n\t\tif (obj instanceof Class<?> clazz) {\n\t\t\treturn clazz.getName();\n\t\t}\n\t\tif (obj instanceof Charset charset) {\n\t\t\treturn charset.name();\n\t\t}\n\t\tif (obj instanceof TimeZone timeZone) {\n\t\t\treturn timeZone.getID();\n\t\t}\n\t\tif (obj instanceof ZoneId zoneId) {\n\t\t\treturn zoneId.getId();\n\t\t}\n\t\tif (obj instanceof CharSequence charSequence) {\n\t\t\treturn StringUtils.truncate(charSequence);\n\t\t}\n\t\tClass<?> type = obj.getClass();\n\t\tif (ClassUtils.isSimpleValueType(type)) {\n\t\t\tString str = obj.toString();\n\t\t\tif (str != null) {\n\t\t\t\treturn StringUtils.truncate(str);\n\t\t\t}\n\t\t}\n\t\treturn type.getTypeName() + \"@\" + getIdentityHexString(obj);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#EMPTY_STRING",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#EMPTY_STRING",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#NULL_STRING",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#NULL_STRING",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#ARRAY_START",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#ARRAY_START",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#ARRAY_END",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#ARRAY_END",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#EMPTY_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#EMPTY_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#ARRAY_ELEMENT_SEPARATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#ARRAY_ELEMENT_SEPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#EMPTY_OBJECT_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#EMPTY_OBJECT_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#NON_EMPTY_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#NON_EMPTY_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]