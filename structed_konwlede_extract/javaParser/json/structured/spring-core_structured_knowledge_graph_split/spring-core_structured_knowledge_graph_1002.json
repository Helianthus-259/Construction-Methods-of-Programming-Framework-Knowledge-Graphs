[
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#add(int,DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#add(int,DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(Collection<? extends DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean addAll(Collection<? extends DataBuffer> collection) {\r\n    boolean result = super.addAll(collection);\r\n    collection.forEach(buffer -> updateCount(buffer.readableByteCount()));\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(Collection<? extends DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(Collection<? extends DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(int,Collection<? extends DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean addAll(int index, Collection<? extends DataBuffer> collection) {\r\n    boolean result = super.addAll(index, collection);\r\n    collection.forEach(buffer -> updateCount(buffer.readableByteCount()));\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(int,Collection<? extends DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#addAll(int,Collection<? extends DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#updateCount(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void updateCount(int bytesToAdd) {\r\n    if (this.maxByteCount < 0) {\r\n        return;\r\n    }\r\n    if (bytesToAdd > Integer.MAX_VALUE - this.byteCount) {\r\n        raiseLimitException();\r\n    } else {\r\n        this.byteCount += bytesToAdd;\r\n        if (this.byteCount > this.maxByteCount) {\r\n            raiseLimitException();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#updateCount(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#raiseLimitException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void raiseLimitException() {\r\n    // Do not release here, it's likely done via doOnDiscard\r\n    throw new DataBufferLimitException(\"Exceeded limit on max bytes to buffer : \" + this.maxByteCount);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#raiseLimitException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer remove(int index) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean remove(Object o) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeRange(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void removeRange(int fromIndex, int toIndex) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#removeRange(int,int)",
    "tailType": "method"
  }
]