[
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitNestMember(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitNestMember(final String nestMember) {\r\n    if (nestMemberClasses == null) {\r\n        nestMemberClasses = new ByteVector();\r\n    }\r\n    ++numberOfNestMemberClasses;\r\n    nestMemberClasses.putShort(symbolTable.addConstantClass(nestMember).index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitNestMember(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitNestMember(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitPermittedSubclass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitPermittedSubclass(final String permittedSubclass) {\r\n    if (permittedSubclasses == null) {\r\n        permittedSubclasses = new ByteVector();\r\n    }\r\n    ++numberOfPermittedSubclasses;\r\n    permittedSubclasses.putShort(symbolTable.addConstantClass(permittedSubclass).index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitPermittedSubclass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitPermittedSubclass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitInnerClass(final String name, final String outerName, final String innerName, final int access) {\r\n    if (innerClasses == null) {\r\n        innerClasses = new ByteVector();\r\n    }\r\n    // Section 4.7.6 of the JVMS states \"Every CONSTANT_Class_info entry in the constant_pool table\r\n    // which represents a class or interface C that is not a package member must have exactly one\r\n    // corresponding entry in the classes array\". To avoid duplicates we keep track in the info\r\n    // field of the Symbol of each CONSTANT_Class_info entry C whether an inner class entry has\r\n    // already been added for C. If so, we store the index of this inner class entry (plus one) in\r\n    // the info field. This trick allows duplicate detection in O(1) time.\r\n    Symbol nameSymbol = symbolTable.addConstantClass(name);\r\n    if (nameSymbol.info == 0) {\r\n        ++numberOfInnerClasses;\r\n        innerClasses.putShort(nameSymbol.index);\r\n        innerClasses.putShort(outerName == null ? 0 : symbolTable.addConstantClass(outerName).index);\r\n        innerClasses.putShort(innerName == null ? 0 : symbolTable.addConstantUtf8(innerName));\r\n        innerClasses.putShort(access);\r\n        nameSymbol.info = numberOfInnerClasses;\r\n    }\r\n    // Else, compare the inner classes entry nameSymbol.info - 1 with the arguments of this method\r\n    // and throw an exception if there is a difference?\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final RecordComponentVisitor visitRecordComponent(final String name, final String descriptor, final String signature) {\r\n    RecordComponentWriter recordComponentWriter = new RecordComponentWriter(symbolTable, name, descriptor, signature);\r\n    if (firstRecordComponent == null) {\r\n        firstRecordComponent = recordComponentWriter;\r\n    } else {\r\n        lastRecordComponent.delegate = recordComponentWriter;\r\n    }\r\n    return lastRecordComponent = recordComponentWriter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitRecordComponent(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final FieldVisitor visitField(final int access, final String name, final String descriptor, final String signature, final Object value) {\r\n    FieldWriter fieldWriter = new FieldWriter(symbolTable, access, name, descriptor, signature, value);\r\n    if (firstField == null) {\r\n        firstField = fieldWriter;\r\n    } else {\r\n        lastField.fv = fieldWriter;\r\n    }\r\n    return lastField = fieldWriter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final MethodVisitor visitMethod(final int access, final String name, final String descriptor, final String signature, final String[] exceptions) {\r\n    MethodWriter methodWriter = new MethodWriter(symbolTable, access, name, descriptor, signature, exceptions, compute);\r\n    if (firstMethod == null) {\r\n        firstMethod = methodWriter;\r\n    } else {\r\n        lastMethod.mv = methodWriter;\r\n    }\r\n    return lastMethod = methodWriter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]