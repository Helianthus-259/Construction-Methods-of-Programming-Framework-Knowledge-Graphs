[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToEnum",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\n\n/**\n * Converts from a String to a {@link java.lang.Enum} by calling {@link Enum#valueOf(Class, String)}.\n *\n * @author Keith Donald\n * @author Stephane Nicoll\n * @since 3.0\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nfinal class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n\n\t@Override\n\tpublic <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n\t\treturn new StringToEnum(ConversionUtils.getEnumType(targetType));\n\t}\n\n\n\tprivate static class StringToEnum<T extends Enum> implements Converter<String, T> {\n\n\t\tprivate final Class<T> enumType;\n\n\t\tStringToEnum(Class<T> enumType) {\n\t\t\tthis.enumType = enumType;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable T convert(String source) {\n\t\t\tif (source.isEmpty()) {\n\t\t\t\t// It's an empty enum identifier: reset the enum value to null.\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn (T) Enum.valueOf(this.enumType, source.trim());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToEnum#enumType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum#enumType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic T convert(String source) {\r\n    if (source.isEmpty()) {\r\n        // It's an empty enum identifier: reset the enum value to null.\r\n        return null;\r\n    }\r\n    return (T) Enum.valueOf(this.enumType, source.trim());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToEnum#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToEnum#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToLocaleConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToLocaleConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Locale;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Converts from a String to a {@link java.util.Locale}.\n *\n * <p>Accepts the classic {@link Locale} String format ({@link Locale#toString()})\n * as well as BCP 47 language tags ({@link Locale#forLanguageTag}.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n * @see StringUtils#parseLocale\n */\nfinal class StringToLocaleConverter implements Converter<String, Locale> {\n\n\t@Override\n\tpublic @Nullable Locale convert(String source) {\n\t\treturn StringUtils.parseLocale(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToLocaleConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Locale convert(String source) {\r\n    return StringUtils.parseLocale(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToLocaleConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToLocaleConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToLocaleConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToLocaleConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToNumberConverterFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumberConverterFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\nimport org.springframework.util.NumberUtils;\n\n/**\n * Converts from a String any JDK-standard Number implementation.\n *\n * <p>Support Number classes including Byte, Short, Integer, Float, Double, Long, BigInteger, BigDecimal. This class\n * delegates to {@link NumberUtils#parseNumber(String, Class)} to perform the conversion.\n *\n * @author Keith Donald\n * @since 3.0\n * @see java.lang.Byte\n * @see java.lang.Short\n * @see java.lang.Integer\n * @see java.lang.Long\n * @see java.math.BigInteger\n * @see java.lang.Float\n * @see java.lang.Double\n * @see java.math.BigDecimal\n * @see NumberUtils\n */\nfinal class StringToNumberConverterFactory implements ConverterFactory<String, Number> {\n\n\t@Override\n\tpublic <T extends Number> Converter<String, T> getConverter(Class<T> targetType) {\n\t\treturn new StringToNumber<>(targetType);\n\t}\n\n\n\tprivate static final class StringToNumber<T extends Number> implements Converter<String, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic StringToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable T convert(String source) {\n\t\t\tif (source.isEmpty()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn NumberUtils.parseNumber(source, this.targetType);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumberConverterFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T extends Number> Converter<String, T> getConverter(Class<T> targetType) {\r\n    return new StringToNumber<>(targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumberConverterFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToNumberConverterFactory#getConverter(Class<T>)",
    "tailType": "method"
  }
]