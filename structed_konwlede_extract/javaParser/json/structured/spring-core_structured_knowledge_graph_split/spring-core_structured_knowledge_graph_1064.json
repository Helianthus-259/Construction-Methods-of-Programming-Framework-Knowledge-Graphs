[
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#fileEncoding",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#fileEncoding",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#propertiesPersister",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#propertiesPersister",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertiesPersister",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setProperties(Properties)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set local properties, for example, via the \"props\" tag in XML bean definitions.\r\n * These can be considered defaults, to be overridden by properties\r\n * loaded from files.\r\n */\r\npublic void setProperties(Properties properties) {\r\n    this.localProperties = new Properties[] { properties };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setProperties(Properties)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setPropertiesArray(Properties)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set local properties, for example, via the \"props\" tag in XML bean definitions,\r\n * allowing for merging multiple properties sets into one.\r\n */\r\npublic void setPropertiesArray(Properties... propertiesArray) {\r\n    this.localProperties = propertiesArray;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setPropertiesArray(Properties)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocation(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set a location of a properties file to be loaded.\r\n * <p>Can point to a classic properties file or to an XML file\r\n * that follows Java's properties XML format.\r\n */\r\npublic void setLocation(Resource location) {\r\n    this.locations = new Resource[] { location };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocation(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocations(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set locations of properties files to be loaded.\r\n * <p>Can point to classic properties files or to XML files\r\n * that follow Java's properties XML format.\r\n * <p>Note: Properties defined in later files will override\r\n * properties defined earlier files, in case of overlapping keys.\r\n * Hence, make sure that the most specific files are the last\r\n * ones in the given list of locations.\r\n */\r\npublic void setLocations(Resource... locations) {\r\n    this.locations = locations;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocations(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocalOverride(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether local properties override properties from files.\r\n * <p>Default is \"false\": Properties from files override local defaults.\r\n * Can be switched to \"true\" to let local properties override defaults\r\n * from files.\r\n */\r\npublic void setLocalOverride(boolean localOverride) {\r\n    this.localOverride = localOverride;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setLocalOverride(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setIgnoreResourceNotFound(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set if failure to find the property resource should be ignored.\r\n * <p>\"true\" is appropriate if the properties file is completely optional.\r\n * Default is \"false\".\r\n */\r\npublic void setIgnoreResourceNotFound(boolean ignoreResourceNotFound) {\r\n    this.ignoreResourceNotFound = ignoreResourceNotFound;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setIgnoreResourceNotFound(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setFileEncoding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the encoding to use for parsing properties files.\r\n * <p>Default is none, using the {@code java.util.Properties}\r\n * default encoding.\r\n * <p>Only applies to classic properties files, not to XML files.\r\n * @see org.springframework.util.PropertiesPersister#load\r\n */\r\npublic void setFileEncoding(String encoding) {\r\n    this.fileEncoding = encoding;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setFileEncoding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport#setPropertiesPersister(PropertiesPersister)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the PropertiesPersister to use for parsing properties files.\r\n * The default is {@code DefaultPropertiesPersister}.\r\n * @see DefaultPropertiesPersister#INSTANCE\r\n */\r\npublic void setPropertiesPersister(@Nullable PropertiesPersister propertiesPersister) {\r\n    this.propertiesPersister = (propertiesPersister != null ? propertiesPersister : DefaultPropertiesPersister.INSTANCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderSupport#setPropertiesPersister(PropertiesPersister)",
    "tailType": "method"
  }
]