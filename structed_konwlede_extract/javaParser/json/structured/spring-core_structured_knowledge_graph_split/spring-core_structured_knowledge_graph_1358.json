[
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(@Nullable Object @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    int length = array.length;\r\n    if (length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (Object o : array) {\r\n        stringJoiner.add(String.valueOf(o));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(boolean[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(boolean @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    int length = array.length;\r\n    if (length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (boolean b : array) {\r\n        stringJoiner.add(String.valueOf(b));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(boolean[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(byte @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (byte b : array) {\r\n        stringJoiner.add(String.valueOf(b));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(char[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(char @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (char c : array) {\r\n        stringJoiner.add('\\'' + String.valueOf(c) + '\\'');\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(char[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(double[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(double @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (double d : array) {\r\n        stringJoiner.add(String.valueOf(d));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(double[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(float[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(float @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (float f : array) {\r\n        stringJoiner.add(String.valueOf(f));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(float[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(int @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (int i : array) {\r\n        stringJoiner.add(String.valueOf(i));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(long[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(long @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    int length = array.length;\r\n    if (length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (long l : array) {\r\n        stringJoiner.add(String.valueOf(l));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(long[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(short[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the contents of the specified array.\r\n * <p>The String representation consists of a list of the array's elements,\r\n * enclosed in curly braces ({@code \";\"}). Adjacent elements are separated\r\n * by the characters {@code \", \"} (a comma followed by a space).\r\n * Returns a {@code \"null\"} String if {@code array} is {@code null}.\r\n * @param array the array to build a String representation for\r\n * @return a String representation of {@code array}\r\n */\r\npublic static String nullSafeToString(short @Nullable [] array) {\r\n    if (array == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (array.length == 0) {\r\n        return EMPTY_ARRAY;\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);\r\n    for (short s : array) {\r\n        stringJoiner.add(String.valueOf(s));\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeToString(short[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeConciseToString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a null-safe, concise string representation of the supplied object\r\n * as described below.\r\n * <p>Favor this method over {@link #nullSafeToString(Object)} when you need\r\n * the length of the generated string to be limited.\r\n * <p>Returns:\r\n * <ul>\r\n * <li>{@code \"null\"} if {@code obj} is {@code null}</li>\r\n * <li>{@code \"Optional.empty\"} if {@code obj} is an empty {@link Optional}</li>\r\n * <li>{@code \"Optional[<concise-string>]\"} if {@code obj} is a non-empty {@code Optional},\r\n * where {@code <concise-string>} is the result of invoking this method on the object\r\n * contained in the {@code Optional}</li>\r\n * <li>{@code \";\"} if {@code obj} is an empty array</li>\r\n * <li>{@code \"{...}\"} if {@code obj} is a {@link Map} or a non-empty array</li>\r\n * <li>{@code \"[...]\"} if {@code obj} is a {@link Collection}</li>\r\n * <li>{@linkplain Class#getName() Class name} if {@code obj} is a {@link Class}</li>\r\n * <li>{@linkplain Charset#name() Charset name} if {@code obj} is a {@link Charset}</li>\r\n * <li>{@linkplain TimeZone#getID() TimeZone ID} if {@code obj} is a {@link TimeZone}</li>\r\n * <li>{@linkplain ZoneId#getId() Zone ID} if {@code obj} is a {@link ZoneId}</li>\r\n * <li>Potentially {@linkplain StringUtils#truncate(CharSequence) truncated string}\r\n * if {@code obj} is a {@link String} or {@link CharSequence}</li>\r\n * <li>Potentially {@linkplain StringUtils#truncate(CharSequence) truncated string}\r\n * if {@code obj} is a <em>simple value type</em> whose {@code toString()} method\r\n * returns a non-null value</li>\r\n * <li>Otherwise, a string representation of the object's type name concatenated\r\n * with {@code \"@\"} and a hex string form of the object's identity hash code</li>\r\n * </ul>\r\n * <p>In the context of this method, a <em>simple value type</em> is any of the following:\r\n * primitive wrapper (excluding {@link Void}), {@link Enum}, {@link Number},\r\n * {@link java.util.Date Date}, {@link java.time.temporal.Temporal Temporal},\r\n * {@link java.io.File File}, {@link java.nio.file.Path Path},\r\n * {@link java.net.URI URI}, {@link java.net.URL URL},\r\n * {@link java.net.InetAddress InetAddress}, {@link java.util.Currency Currency},\r\n * {@link java.util.Locale Locale}, {@link java.util.UUID UUID},\r\n * {@link java.util.regex.Pattern Pattern}.\r\n * @param obj the object to build a string representation for\r\n * @return a concise string representation of the supplied object\r\n * @since 5.3.27\r\n * @see #nullSafeToString(Object)\r\n * @see StringUtils#truncate(CharSequence)\r\n * @see ClassUtils#isSimpleValueType(Class)\r\n */\r\npublic static String nullSafeConciseToString(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (obj instanceof Optional<?> optional) {\r\n        return (optional.isEmpty() ? \"Optional.empty\" : \"Optional[%s]\".formatted(nullSafeConciseToString(optional.get())));\r\n    }\r\n    if (obj.getClass().isArray()) {\r\n        return (Array.getLength(obj) == 0 ? EMPTY_ARRAY : NON_EMPTY_ARRAY);\r\n    }\r\n    if (obj instanceof Collection) {\r\n        return COLLECTION;\r\n    }\r\n    if (obj instanceof Map) {\r\n        return MAP;\r\n    }\r\n    if (obj instanceof Class<?> clazz) {\r\n        return clazz.getName();\r\n    }\r\n    if (obj instanceof Charset charset) {\r\n        return charset.name();\r\n    }\r\n    if (obj instanceof TimeZone timeZone) {\r\n        return timeZone.getID();\r\n    }\r\n    if (obj instanceof ZoneId zoneId) {\r\n        return zoneId.getId();\r\n    }\r\n    if (obj instanceof CharSequence charSequence) {\r\n        return StringUtils.truncate(charSequence);\r\n    }\r\n    Class<?> type = obj.getClass();\r\n    if (ClassUtils.isSimpleValueType(type)) {\r\n        String str = obj.toString();\r\n        if (str != null) {\r\n            return StringUtils.truncate(str);\r\n        }\r\n    }\r\n    return type.getTypeName() + \"@\" + getIdentityHexString(obj);\r\n}",
    "tailType": "method_code"
  }
]