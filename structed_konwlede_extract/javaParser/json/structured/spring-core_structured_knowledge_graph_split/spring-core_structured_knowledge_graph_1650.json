[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenHasAliasForWithBothValueAndAttributeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForToSelfNonExistingAttribute() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForToSelfNonExistingAttribute.class)).withMessage(\"@AliasFor declaration on attribute 'test' in annotation [\" + AliasForToSelfNonExistingAttribute.class.getName() + \"] declares an alias for 'missing' which is not present.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfNonExistingAttribute()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForToOtherNonExistingAttribute() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForToOtherNonExistingAttribute.class)).withMessage(\"Attribute 'test' in annotation [\" + AliasForToOtherNonExistingAttribute.class.getName() + \"] is declared as an @AliasFor nonexistent \" + \"attribute 'missing' in annotation [\" + AliasForToOtherNonExistingAttributeTarget.class.getName() + \"].\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToOtherNonExistingAttribute()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForToSelf() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForToSelf.class)).withMessage(\"@AliasFor declaration on attribute 'test' in annotation [\" + AliasForToSelf.class.getName() + \"] points to itself. Specify 'annotation' to point to \" + \"a same-named attribute on a meta-annotation.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(AliasForWithArrayCompatibleReturnTypes.class);\r\n    AnnotationTypeMapping mapping = getMapping(mappings, AliasForWithArrayCompatibleReturnTypesTarget.class);\r\n    assertThat(getAliasMapping(mapping, 0).getName()).isEqualTo(\"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithArrayCompatibleReturnTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForWithIncompatibleReturnTypes.class)).withMessage(\"Misconfigured aliases: attribute 'test' in annotation [\" + AliasForWithIncompatibleReturnTypes.class.getName() + \"] and attribute 'test' in annotation [\" + AliasForWithIncompatibleReturnTypesTarget.class.getName() + \"] must declare the same return type.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForWithIncompatibleReturnTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute() {\r\n    String annotationType = AliasForToSelfAnnotatedToOtherAttribute.class.getName();\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForToSelfAnnotatedToOtherAttribute.class)).withMessage(\"Attribute 'b' in annotation [\" + annotationType + \"] must be declared as an @AliasFor attribute 'a' in annotation [\" + annotationType + \"], not attribute 'c' in annotation [\" + annotationType + \"].\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForToSelfAnnotatedToOtherAttribute()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]