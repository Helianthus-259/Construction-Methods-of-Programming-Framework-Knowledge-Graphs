[
  {
    "head": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int LCONST(long value) {\r\n    if (value == 0L) {\r\n        return Constants.LCONST_0;\r\n    } else if (value == 1L) {\r\n        return Constants.LCONST_1;\r\n    } else {\r\n        // error\r\n        return -1;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#LCONST(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int FCONST(float value) {\r\n    if (value == 0f) {\r\n        return Constants.FCONST_0;\r\n    } else if (value == 1f) {\r\n        return Constants.FCONST_1;\r\n    } else if (value == 2f) {\r\n        return Constants.FCONST_2;\r\n    } else {\r\n        // error\r\n        return -1;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#FCONST(float)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int DCONST(double value) {\r\n    if (value == 0d) {\r\n        return Constants.DCONST_0;\r\n    } else if (value == 1d) {\r\n        return Constants.DCONST_1;\r\n    } else {\r\n        // error\r\n        return -1;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#DCONST(double)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static int NEWARRAY(Type type) {\r\n    return switch(type.getSort()) {\r\n        case Type.BYTE ->\r\n            Constants.T_BYTE;\r\n        case Type.CHAR ->\r\n            Constants.T_CHAR;\r\n        case Type.DOUBLE ->\r\n            Constants.T_DOUBLE;\r\n        case Type.FLOAT ->\r\n            Constants.T_FLOAT;\r\n        case Type.INT ->\r\n            Constants.T_INT;\r\n        case Type.LONG ->\r\n            Constants.T_LONG;\r\n        case Type.SHORT ->\r\n            Constants.T_SHORT;\r\n        case Type.BOOLEAN ->\r\n            Constants.T_BOOLEAN;\r\n        // error\r\n        default ->\r\n            -1;\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#NEWARRAY(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String escapeType(String s) {\r\n    StringBuilder sb = new StringBuilder();\r\n    for (int i = 0, len = s.length(); i < len; i++) {\r\n        char c = s.charAt(i);\r\n        switch(c) {\r\n            case '$' ->\r\n                sb.append(\"$24\");\r\n            case '.' ->\r\n                sb.append(\"$2E\");\r\n            case '[' ->\r\n                sb.append(\"$5B\");\r\n            case ';' ->\r\n                sb.append(\"$3B\");\r\n            case '(' ->\r\n                sb.append(\"$28\");\r\n            case ')' ->\r\n                sb.append(\"$29\");\r\n            case '/' ->\r\n                sb.append(\"$2F\");\r\n            default ->\r\n                sb.append(c);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#escapeType(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.VisibilityPredicate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Modifier;\n\nimport org.springframework.asm.Type;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class VisibilityPredicate implements Predicate {\n    private boolean protectedOk;\n    private String pkg;\n    private boolean samePackageOk;\n\n    public VisibilityPredicate(Class source, boolean protectedOk) {\n        this.protectedOk = protectedOk;\n        // same package is not ok for the bootstrap loaded classes.  In all other cases we are\n        // generating classes in the same classloader\n        this.samePackageOk = source.getClassLoader() != null;\n        pkg = TypeUtils.getPackageName(Type.getType(source));\n    }\n\n    @Override\n\tpublic boolean evaluate(Object arg) {\n        Member member = (Member)arg;\n\t\tint mod = member.getModifiers();\n        if (Modifier.isPrivate(mod)) {\n            return false;\n        } else if (Modifier.isPublic(mod)) {\n            return true;\n        } else if (Modifier.isProtected(mod) && protectedOk) {\n            // protected is fine if 'protectedOk' is true (for subclasses)\n            return true;\n        } else {\n            // protected/package private if the member is in the same package as the source class\n            // and we are generating into the same classloader.\n            return samePackageOk\n                && pkg.equals(TypeUtils.getPackageName(Type.getType(member.getDeclaringClass())));\n        }\n    }\n}\n\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.VisibilityPredicate#protectedOk",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate#protectedOk",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.VisibilityPredicate#pkg",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate#pkg",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.VisibilityPredicate#samePackageOk",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate#samePackageOk",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  }
]