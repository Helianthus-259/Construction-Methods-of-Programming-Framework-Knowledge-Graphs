[
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#set(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap#setAll(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the given values under.\r\n * @param values the values.\r\n */\r\nvoid setAll(Map<K, V> values);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#setAll(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap#toSingleValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code Map} with the first values contained in this {@code MultiValueMap}.\r\n * The difference between this method and {@link #asSingleValueMap()} is\r\n * that this method returns a copy of the entries of this map, whereas\r\n * the latter returns a view.\r\n * @return a single value representation of this map\r\n */\r\nMap<K, V> toSingleValueMap();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#toSingleValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap#asSingleValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return this map as a {@code Map} with the first values contained in this\r\n * {@code MultiValueMap}.\r\n * <p>The difference between this method and {@link #toSingleValueMap()} is\r\n * that this method returns a view of the entries of this map, whereas\r\n * the latter returns a copy.\r\n * @return a single value representation of this map\r\n * @since 6.2\r\n */\r\ndefault Map<K, V> asSingleValueMap() {\r\n    return new MultiToSingleValueMapAdapter<>(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#asSingleValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap#fromSingleValue(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code MultiValueMap<K, V>} that adapts the given single-value\r\n * {@code Map<K, V>}.\r\n * <p>The returned map cannot map multiple values to the same key,\r\n * and doing so results in an {@link UnsupportedOperationException}.\r\n * Use {@link #fromMultiValue(Map)} to support multiple values.\r\n * @param map the map to be adapted\r\n * @param <K> the key type\r\n * @param <V> the value element type\r\n * @return a multi-value-map that delegates to {@code map}\r\n * @since 6.2\r\n * @see #fromMultiValue(Map)\r\n */\r\nstatic <K, V> MultiValueMap<K, V> fromSingleValue(Map<K, V> map) {\r\n    Assert.notNull(map, \"Map must not be null\");\r\n    return new SingleToMultiValueMapAdapter<>(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#fromSingleValue(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap#fromMultiValue(Map<K,List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code MultiValueMap<K, V>} that adapts the given multi-value\r\n * {@code Map<K, List<V>>}.\r\n * @param map the map to be adapted\r\n * @param <K> the key type\r\n * @param <V> the value element type\r\n * @return a multi-value-map that delegates to {@code map}\r\n * @since 6.2\r\n * @see #fromSingleValue(Map)\r\n */\r\nstatic <K, V> MultiValueMap<K, V> fromMultiValue(Map<K, List<V>> map) {\r\n    Assert.notNull(map, \"Map must not be null\");\r\n    return new MultiValueMapAdapter<>(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMap#fromMultiValue(Map<K,List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMap",
    "headType": "class",
    "relation": "extend",
    "tail": "Map",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MultiValueMapAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Adapts a given {@link Map} to the {@link MultiValueMap} contract.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 5.3\n * @param <K> the key type\n * @param <V> the value element type\n * @see CollectionUtils#toMultiValueMap\n * @see LinkedMultiValueMap\n */\n@SuppressWarnings(\"serial\")\npublic class MultiValueMapAdapter<K, V> implements MultiValueMap<K, V>, Serializable {\n\n\tprivate final Map<K, List<V>> targetMap;\n\n\n\t/**\n\t * Wrap the given target {@link Map} as a {@link MultiValueMap} adapter.\n\t * @param targetMap the plain target {@code Map}\n\t */\n\tpublic MultiValueMapAdapter(Map<K, List<V>> targetMap) {\n\t\tAssert.notNull(targetMap, \"'targetMap' must not be null\");\n\t\tthis.targetMap = targetMap;\n\t}\n\n\n\t// MultiValueMap implementation\n\n\t@Override\n\tpublic @Nullable V getFirst(K key) {\n\t\tList<V> values = this.targetMap.get(key);\n\t\treturn (!CollectionUtils.isEmpty(values) ? values.get(0) : null);\n\t}\n\n\t@Override\n\tpublic void add(K key, @Nullable V value) {\n\t\tList<V> values = this.targetMap.computeIfAbsent(key, k -> new ArrayList<>(1));\n\t\tvalues.add(value);\n\t}\n\n\t@Override\n\tpublic void addAll(K key, List<? extends V> values) {\n\t\tList<V> currentValues = this.targetMap.computeIfAbsent(key, k -> new ArrayList<>(values.size()));\n\t\tcurrentValues.addAll(values);\n\t}\n\n\t@Override\n\tpublic void addAll(MultiValueMap<K, V> values) {\n\t\tvalues.forEach(this::addAll);\n\t}\n\n\t@Override\n\tpublic void set(K key, @Nullable V value) {\n\t\tList<V> values = new ArrayList<>(1);\n\t\tvalues.add(value);\n\t\tthis.targetMap.put(key, values);\n\t}\n\n\t@Override\n\tpublic void setAll(Map<K, V> values) {\n\t\tvalues.forEach(this::set);\n\t}\n\n\t@Override\n\tpublic Map<K, V> toSingleValueMap() {\n\t\tMap<K, V> singleValueMap = CollectionUtils.newLinkedHashMap(this.targetMap.size());\n\t\tthis.targetMap.forEach((key, values) -> {\n\t\t\tif (!CollectionUtils.isEmpty(values)) {\n\t\t\t\tsingleValueMap.put(key, values.get(0));\n\t\t\t}\n\t\t});\n\t\treturn singleValueMap;\n\t}\n\n\n\t// Map implementation\n\n\t@Override\n\tpublic int size() {\n\t\treturn this.targetMap.size();\n\t}\n\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn this.targetMap.isEmpty();\n\t}\n\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn this.targetMap.containsKey(key);\n\t}\n\n\t@Override\n\tpublic boolean containsValue(Object value) {\n\t\treturn this.targetMap.containsValue(value);\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> get(Object key) {\n\t\treturn this.targetMap.get(key);\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> put(K key, List<V> value) {\n\t\treturn this.targetMap.put(key, value);\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> putIfAbsent(K key, List<V> value) {\n\t\treturn this.targetMap.putIfAbsent(key, value);\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> remove(Object key) {\n\t\treturn this.targetMap.remove(key);\n\t}\n\n\t@Override\n\tpublic void putAll(Map<? extends K, ? extends List<V>> map) {\n\t\tthis.targetMap.putAll(map);\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthis.targetMap.clear();\n\t}\n\n\t@Override\n\tpublic Set<K> keySet() {\n\t\treturn this.targetMap.keySet();\n\t}\n\n\t@Override\n\tpublic Collection<List<V>> values() {\n\t\treturn this.targetMap.values();\n\t}\n\n\t@Override\n\tpublic Set<Entry<K, List<V>>> entrySet() {\n\t\treturn this.targetMap.entrySet();\n\t}\n\n\t@Override\n\tpublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\n\t\tthis.targetMap.forEach(action);\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || this.targetMap.equals(other));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.targetMap.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.targetMap.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MultiValueMapAdapter#targetMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#targetMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<K, List<V>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#getFirst(K)",
    "headType": "method",
    "relation": "provide",
    "tail": "// MultiValueMap implementation\r\n@Override\r\n@Nullable\r\npublic V getFirst(K key) {\r\n    List<V> values = this.targetMap.get(key);\r\n    return (!CollectionUtils.isEmpty(values) ? values.get(0) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#getFirst(K)",
    "tailType": "method"
  }
]