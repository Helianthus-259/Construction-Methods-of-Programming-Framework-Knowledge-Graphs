[
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#createWhenClassNameIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#createWhenMethodNameGeneratorIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenMethodNameGeneratorIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new GeneratedMethods(TEST_CLASS_NAME, null)).withMessage(\"'methodNameGenerator' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#createWhenMethodNameGeneratorIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#createWhenMethodNameGeneratorIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#createWithExistingGeneratorUsesGenerator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithExistingGeneratorUsesGenerator() {\r\n    Function<MethodName, String> generator = name -> \"__\" + name.toString();\r\n    GeneratedMethods methods = new GeneratedMethods(TEST_CLASS_NAME, generator);\r\n    assertThat(methods.add(\"test\", methodSpecCustomizer).getName()).hasToString(\"__test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#createWithExistingGeneratorUsesGenerator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#createWithExistingGeneratorUsesGenerator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenSuggestedMethodIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addWithStringNameWhenSuggestedMethodIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.methods.add((String) null, methodSpecCustomizer)).withMessage(\"'suggestedName' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenSuggestedMethodIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenSuggestedMethodIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenMethodIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addWithStringNameWhenMethodIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.methods.add(\"test\", null)).withMessage(\"'method' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenMethodIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addWithStringNameWhenMethodIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addAddsMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addAddsMethod() {\r\n    this.methods.add(\"springBeans\", methodSpecCustomizer);\r\n    this.methods.add(\"springContext\", methodSpecCustomizer);\r\n    assertThat(this.methods.stream().map(GeneratedMethod::getName).map(Object::toString)).containsExactly(\"springBeans\", \"springContext\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#addAddsMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#addAddsMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingGetMethodUsesPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withPrefixWhenGeneratingGetMethodUsesPrefix() {\r\n    GeneratedMethod generateMethod = this.methods.withPrefix(\"myBean\").add(\"getTest\", methodSpecCustomizer);\r\n    assertThat(generateMethod.getName()).hasToString(\"getMyBeanTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingGetMethodUsesPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingGetMethodUsesPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedMethodsTests#withPrefixWhenGeneratingSetMethodUsesPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withPrefixWhenGeneratingSetMethodUsesPrefix() {\r\n    GeneratedMethod generateMethod = this.methods.withPrefix(\"myBean\").add(\"setTest\", methodSpecCustomizer);\r\n    assertThat(generateMethod.getName()).hasToString(\"setMyBeanTest\");\r\n}",
    "tailType": "method_code"
  }
]