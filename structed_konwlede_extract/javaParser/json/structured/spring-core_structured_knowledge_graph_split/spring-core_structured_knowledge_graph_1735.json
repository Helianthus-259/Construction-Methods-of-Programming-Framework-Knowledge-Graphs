[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForWithMissingDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForWithMissingDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeWithDifferentDefaultValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasForAttributeWithDifferentDefaultValue() {\r\n    AliasForAttributeWithDifferentDefaultValue annotation = AliasForAttributeWithDifferentDefaultValueClass.class.getAnnotation(AliasForAttributeWithDifferentDefaultValue.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"Misconfigured aliases\").withMessageContaining(AliasForAttributeWithDifferentDefaultValue.class.getName()).withMessageContaining(\"attribute 'foo' in annotation\").withMessageContaining(\"attribute 'bar' in annotation\").withMessageContaining(\"same default value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeWithDifferentDefaultValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeWithDifferentDefaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForMetaAnnotationThatIsNotMetaPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasForMetaAnnotationThatIsNotMetaPresent() {\r\n    AliasedComposedTestConfigurationNotMetaPresent annotation = AliasedComposedTestConfigurationNotMetaPresentClass.class.getAnnotation(AliasedComposedTestConfigurationNotMetaPresent.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"@AliasFor declaration on attribute 'xmlConfigFile' in annotation\").withMessageContaining(AliasedComposedTestConfigurationNotMetaPresent.class.getName()).withMessageContaining(\"declares an alias for attribute 'location' in annotation\").withMessageContaining(TestConfiguration.class.getName()).withMessageContaining(\"not meta-present\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForMetaAnnotationThatIsNotMetaPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForMetaAnnotationThatIsNotMetaPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliases() {\r\n    testSynthesisWithImplicitAliases(ValueImplicitAliasesTestConfigurationClass.class, \"value\");\r\n    testSynthesisWithImplicitAliases(Location1ImplicitAliasesTestConfigurationClass.class, \"location1\");\r\n    testSynthesisWithImplicitAliases(XmlImplicitAliasesTestConfigurationClass.class, \"xmlFile\");\r\n    testSynthesisWithImplicitAliases(GroovyImplicitAliasesSimpleTestConfigurationClass.class, \"groovyScript\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisWithImplicitAliases(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testSynthesisWithImplicitAliases(Class<?> clazz, String expected) {\r\n    ImplicitAliasesTestConfiguration config = clazz.getAnnotation(ImplicitAliasesTestConfiguration.class);\r\n    assertThat(config).isNotNull();\r\n    ImplicitAliasesTestConfiguration synthesized = MergedAnnotation.from(config).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized.value()).isEqualTo(expected);\r\n    assertThat(synthesized.location1()).isEqualTo(expected);\r\n    assertThat(synthesized.xmlFile()).isEqualTo(expected);\r\n    assertThat(synthesized.groovyScript()).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisWithImplicitAliases(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithImpliedAliasNamesOmitted()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliasesWithImpliedAliasNamesOmitted() {\r\n    testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(ValueImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass.class, \"value\");\r\n    testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(LocationsImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass.class, \"location\");\r\n    testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(XmlFilesImplicitAliasesWithImpliedAliasNamesOmittedTestConfigurationClass.class, \"xmlFile\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithImpliedAliasNamesOmitted()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithImpliedAliasNamesOmitted()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(Class<?> clazz, String expected) {\r\n    ImplicitAliasesWithImpliedAliasNamesOmittedTestConfiguration config = clazz.getAnnotation(ImplicitAliasesWithImpliedAliasNamesOmittedTestConfiguration.class);\r\n    assertThat(config).isNotNull();\r\n    ImplicitAliasesWithImpliedAliasNamesOmittedTestConfiguration synthesized = MergedAnnotation.from(config).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized.value()).isEqualTo(expected);\r\n    assertThat(synthesized.location()).isEqualTo(expected);\r\n    assertThat(synthesized.xmlFile()).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testSynthesisWithImplicitAliasesWithImpliedAliasNamesOmitted(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesForAliasPair()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliasesForAliasPair() {\r\n    ImplicitAliasesForAliasPairTestConfiguration config = ImplicitAliasesForAliasPairTestConfigurationClass.class.getAnnotation(ImplicitAliasesForAliasPairTestConfiguration.class);\r\n    ImplicitAliasesForAliasPairTestConfiguration synthesized = MergedAnnotation.from(config).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized.xmlFile()).isEqualTo(\"test.xml\");\r\n    assertThat(synthesized.groovyScript()).isEqualTo(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesForAliasPair()",
    "tailType": "method"
  }
]