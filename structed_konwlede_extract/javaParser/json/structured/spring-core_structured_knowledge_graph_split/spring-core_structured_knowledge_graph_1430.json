[
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#charactersInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void charactersInternal(String data) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#charactersInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#cDataInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void cDataInternal(String data) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#cDataInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#ignorableWhitespaceInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void ignorableWhitespaceInternal(String data) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#ignorableWhitespaceInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#processingInstructionInternal(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void processingInstructionInternal(String target, String data) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#processingInstructionInternal(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#skippedEntityInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void skippedEntityInternal(String name) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#skippedEntityInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#dtdInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void dtdInternal(String dtd) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#dtdInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#commentInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void commentInternal(String comment) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#commentInternal(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.Location;\nimport javax.xml.stream.XMLStreamException;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXNotRecognizedException;\nimport org.xml.sax.SAXNotSupportedException;\nimport org.xml.sax.SAXParseException;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * Abstract base class for SAX {@code XMLReader} implementations that use StAX as a basis.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n * @see #setContentHandler(org.xml.sax.ContentHandler)\n * @see #setDTDHandler(org.xml.sax.DTDHandler)\n * @see #setEntityResolver(org.xml.sax.EntityResolver)\n * @see #setErrorHandler(org.xml.sax.ErrorHandler)\n */\nabstract class AbstractStaxXMLReader extends AbstractXMLReader {\n\n\tprivate static final String NAMESPACES_FEATURE_NAME = \"http://xml.org/sax/features/namespaces\";\n\n\tprivate static final String NAMESPACE_PREFIXES_FEATURE_NAME = \"http://xml.org/sax/features/namespace-prefixes\";\n\n\tprivate static final String IS_STANDALONE_FEATURE_NAME = \"http://xml.org/sax/features/is-standalone\";\n\n\n\tprivate boolean namespacesFeature = true;\n\n\tprivate boolean namespacePrefixesFeature = false;\n\n\tprivate @Nullable Boolean isStandalone;\n\n\tprivate final Map<String, String> namespaces = new LinkedHashMap<>();\n\n\n\t@Override\n\tpublic boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\treturn switch (name) {\n\t\t\tcase NAMESPACES_FEATURE_NAME -> this.namespacesFeature;\n\t\t\tcase NAMESPACE_PREFIXES_FEATURE_NAME -> this.namespacePrefixesFeature;\n\t\t\tcase IS_STANDALONE_FEATURE_NAME -> {\n\t\t\t\tif (this.isStandalone != null) {\n\t\t\t\t\tyield this.isStandalone;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new SAXNotSupportedException(\"startDocument() callback not completed yet\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault -> super.getFeature(name);\n\t\t};\n\t}\n\n\t@Override\n\tpublic void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\tif (NAMESPACES_FEATURE_NAME.equals(name)) {\n\t\t\tthis.namespacesFeature = value;\n\t\t}\n\t\telse if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {\n\t\t\tthis.namespacePrefixesFeature = value;\n\t\t}\n\t\telse {\n\t\t\tsuper.setFeature(name, value);\n\t\t}\n\t}\n\n\tprotected void setStandalone(boolean standalone) {\n\t\tthis.isStandalone = standalone;\n\t}\n\n\t/**\n\t * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces} is turned on.\n\t */\n\tprotected boolean hasNamespacesFeature() {\n\t\treturn this.namespacesFeature;\n\t}\n\n\t/**\n\t * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces-prefixes} is turned on.\n\t */\n\tprotected boolean hasNamespacePrefixesFeature() {\n\t\treturn this.namespacePrefixesFeature;\n\t}\n\n\t/**\n\t * Convert a {@code QName} to a qualified name, as used by DOM and SAX.\n\t * The returned string has a format of {@code prefix:localName} if the\n\t * prefix is set, or just {@code localName} if not.\n\t * @param qName the {@code QName}\n\t * @return the qualified name\n\t */\n\tprotected String toQualifiedName(QName qName) {\n\t\tString prefix = qName.getPrefix();\n\t\tif (!StringUtils.hasLength(prefix)) {\n\t\t\treturn qName.getLocalPart();\n\t\t}\n\t\telse {\n\t\t\treturn prefix + \":\" + qName.getLocalPart();\n\t\t}\n\t}\n\n\n\t/**\n\t * Parse the StAX XML reader passed at construction-time.\n\t * <p><b>NOTE:</b>: The given {@code InputSource} is not read, but ignored.\n\t * @param ignored is ignored\n\t * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}\n\t */\n\t@Override\n\tpublic final void parse(InputSource ignored) throws SAXException {\n\t\tparse();\n\t}\n\n\t/**\n\t * Parse the StAX XML reader passed at construction-time.\n\t * <p><b>NOTE:</b>: The given system identifier is not read, but ignored.\n\t * @param ignored is ignored\n\t * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}\n\t */\n\t@Override\n\tpublic final void parse(String ignored) throws SAXException {\n\t\tparse();\n\t}\n\n\tprivate void parse() throws SAXException {\n\t\ttry {\n\t\t\tparseInternal();\n\t\t}\n\t\tcatch (XMLStreamException ex) {\n\t\t\tLocator locator = null;\n\t\t\tif (ex.getLocation() != null) {\n\t\t\t\tlocator = new StaxLocator(ex.getLocation());\n\t\t\t}\n\t\t\tSAXParseException saxException = new SAXParseException(ex.getMessage(), locator, ex);\n\t\t\tif (getErrorHandler() != null) {\n\t\t\t\tgetErrorHandler().fatalError(saxException);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow saxException;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Template method that parses the StAX reader passed at construction-time.\n\t */\n\tprotected abstract void parseInternal() throws SAXException, XMLStreamException;\n\n\n\t/**\n\t * Start the prefix mapping for the given prefix.\n\t * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)\n\t */\n\tprotected void startPrefixMapping(@Nullable String prefix, String namespace) throws SAXException {\n\t\tif (getContentHandler() != null && StringUtils.hasLength(namespace)) {\n\t\t\tif (prefix == null) {\n\t\t\t\tprefix = \"\";\n\t\t\t}\n\t\t\tif (!namespace.equals(this.namespaces.get(prefix))) {\n\t\t\t\tgetContentHandler().startPrefixMapping(prefix, namespace);\n\t\t\t\tthis.namespaces.put(prefix, namespace);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * End the prefix mapping for the given prefix.\n\t * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\n\t */\n\tprotected void endPrefixMapping(String prefix) throws SAXException {\n\t\tif (getContentHandler() != null && this.namespaces.containsKey(prefix)) {\n\t\t\tgetContentHandler().endPrefixMapping(prefix);\n\t\t\tthis.namespaces.remove(prefix);\n\t\t}\n\t}\n\n\n\t/**\n\t * Implementation of the {@code Locator} interface based on a given StAX {@code Location}.\n\t * @see Locator\n\t * @see Location\n\t */\n\tprivate static class StaxLocator implements Locator {\n\n\t\tprivate final Location location;\n\n\t\tpublic StaxLocator(Location location) {\n\t\t\tthis.location = location;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPublicId() {\n\t\t\treturn this.location.getPublicId();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getSystemId() {\n\t\t\treturn this.location.getSystemId();\n\t\t}\n\n\t\t@Override\n\t\tpublic int getLineNumber() {\n\t\t\treturn this.location.getLineNumber();\n\t\t}\n\n\t\t@Override\n\t\tpublic int getColumnNumber() {\n\t\t\treturn this.location.getColumnNumber();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#NAMESPACES_FEATURE_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#NAMESPACES_FEATURE_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#NAMESPACE_PREFIXES_FEATURE_NAME",
    "tailType": "field"
  }
]