[
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.JdkProxyHint.Builder;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link JdkProxyHint}.\n *\n * @author Stephane Nicoll\n */\nclass JdkProxyHintTests {\n\n\t@Test\n\tvoid equalsWithSameInstanceIsTrue() {\n\t\tJdkProxyHint hint = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\n\t\tassertThat(hint).isEqualTo(hint);\n\t}\n\n\t@Test\n\tvoid equalsWithSameProxiedInterfacesIsTrue() {\n\t\tJdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\n\t\tJdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()),\n\t\t\t\tTypeReference.of(Consumer.class)).build();\n\t\tassertThat(first).isEqualTo(second);\n\t}\n\n\t@Test\n\tvoid equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse() {\n\t\tJdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class)\n\t\t\t\t.onReachableType(TypeReference.of(String.class)).build();\n\t\tJdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()),\n\t\t\t\tTypeReference.of(Consumer.class)).onReachableType(TypeReference.of(Function.class)).build();\n\t\tassertThat(first).isNotEqualTo(second);\n\t}\n\n\t@Test\n\tvoid equalsWithSameProxiedInterfacesDifferentOrderIsFalse() {\n\t\tJdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\n\t\tJdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Consumer.class),\n\t\t\t\tTypeReference.of(Function.class.getName())).build();\n\t\tassertThat(first).isNotEqualTo(second);\n\t}\n\n\t@Test\n\tvoid equalsWithDifferentProxiedInterfacesIsFalse() {\n\t\tJdkProxyHint first = new Builder().proxiedInterfaces(Function.class).build();\n\t\tJdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()),\n\t\t\t\tTypeReference.of(Consumer.class)).build();\n\t\tassertThat(first).isNotEqualTo(second);\n\t}\n\n\t@Test\n\tvoid equalsWithNonJdkProxyHintIsFalse() {\n\t\tJdkProxyHint first = new Builder().proxiedInterfaces(Function.class).build();\n\t\tTypeReference second = TypeReference.of(Function.class);\n\t\tassertThat(first).isNotEqualTo(second);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithSameInstanceIsTrue() {\r\n    JdkProxyHint hint = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\r\n    assertThat(hint).isEqualTo(hint);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameInstanceIsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithSameProxiedInterfacesIsTrue() {\r\n    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\r\n    JdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()), TypeReference.of(Consumer.class)).build();\r\n    assertThat(first).isEqualTo(second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesIsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse() {\r\n    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).onReachableType(TypeReference.of(String.class)).build();\r\n    JdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()), TypeReference.of(Consumer.class)).onReachableType(TypeReference.of(Function.class)).build();\r\n    assertThat(first).isNotEqualTo(second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesAndDifferentConditionIsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithSameProxiedInterfacesDifferentOrderIsFalse() {\r\n    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class, Consumer.class).build();\r\n    JdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Consumer.class), TypeReference.of(Function.class.getName())).build();\r\n    assertThat(first).isNotEqualTo(second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithSameProxiedInterfacesDifferentOrderIsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithDifferentProxiedInterfacesIsFalse() {\r\n    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class).build();\r\n    JdkProxyHint second = new Builder().proxiedInterfaces(TypeReference.of(Function.class.getName()), TypeReference.of(Consumer.class)).build();\r\n    assertThat(first).isNotEqualTo(second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithDifferentProxiedInterfacesIsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithNonJdkProxyHintIsFalse() {\r\n    JdkProxyHint first = new Builder().proxiedInterfaces(Function.class).build();\r\n    TypeReference second = TypeReference.of(Function.class);\r\n    assertThat(first).isNotEqualTo(second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHintTests#equalsWithNonJdkProxyHintIsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  }
]