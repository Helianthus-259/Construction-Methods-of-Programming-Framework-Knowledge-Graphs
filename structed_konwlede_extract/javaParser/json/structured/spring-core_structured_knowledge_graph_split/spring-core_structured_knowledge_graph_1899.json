[
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#listToCollectionNoCopyRequired()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#differentImpls()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid differentImpls() throws Exception {\r\n    List<Resource> resources = new ArrayList<>();\r\n    resources.add(new ClassPathResource(\"test\"));\r\n    resources.add(new FileSystemResource(\"test\"));\r\n    resources.add(new TestResource());\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(resources);\r\n    assertThat(conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\")))).isSameAs(resources);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#differentImpls()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#differentImpls()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#mixedInNulls()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mixedInNulls() throws Exception {\r\n    List<Resource> resources = new ArrayList<>();\r\n    resources.add(new ClassPathResource(\"test\"));\r\n    resources.add(null);\r\n    resources.add(new FileSystemResource(\"test\"));\r\n    resources.add(new TestResource());\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(resources);\r\n    assertThat(conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\")))).isSameAs(resources);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#mixedInNulls()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#mixedInNulls()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#allNulls()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid allNulls() throws Exception {\r\n    List<Resource> resources = new ArrayList<>();\r\n    resources.add(null);\r\n    resources.add(null);\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(resources);\r\n    assertThat(conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\")))).isSameAs(resources);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#allNulls()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#allNulls()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#elementTypesNotConvertible()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid elementTypesNotConvertible() throws Exception {\r\n    List<String> resources = new ArrayList<>();\r\n    resources.add(null);\r\n    resources.add(null);\r\n    TypeDescriptor sourceType = new TypeDescriptor(getClass().getField(\"strings\"));\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\"))));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#elementTypesNotConvertible()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#elementTypesNotConvertible()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#nothingInCommon()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nothingInCommon() {\r\n    List<Object> resources = new ArrayList<>();\r\n    resources.add(new ClassPathResource(\"test\"));\r\n    resources.add(3);\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(resources);\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(resources, sourceType, new TypeDescriptor(getClass().getField(\"resources\"))));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#nothingInCommon()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#nothingInCommon()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumSet() throws Exception {\r\n    conversionService.addConverterFactory(new StringToEnumConverterFactory());\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"A\");\r\n    list.add(\"C\");\r\n    assertThat(conversionService.convert(list, new TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(MyEnum.A, MyEnum.C));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.BaseResource",
    "tailType": "class"
  }
]