[
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#emitProxy(ClassEmitter,MethodInfo)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitProxy(ClassEmitter ce, final MethodInfo method) {\r\n    int modifiers = Constants.ACC_PUBLIC;\r\n    if ((method.getModifiers() & Constants.ACC_VARARGS) == Constants.ACC_VARARGS) {\r\n        modifiers |= Constants.ACC_VARARGS;\r\n    }\r\n    final CodeEmitter e = EmitUtils.begin_method(ce, method, modifiers);\r\n    Type returnType = method.getSignature().getReturnType();\r\n    final boolean returns = returnType != Type.VOID_TYPE;\r\n    Local result = null;\r\n    if (returns) {\r\n        result = e.make_local(returnType);\r\n        e.zero_or_null(returnType);\r\n        e.store_local(result);\r\n    }\r\n    e.load_this();\r\n    e.super_getfield(\"targets\", Constants.TYPE_OBJECT_ARRAY);\r\n    final Local result2 = result;\r\n    EmitUtils.process_array(e, Constants.TYPE_OBJECT_ARRAY, type -> {\r\n        e.checkcast(Type.getType(iface));\r\n        e.load_args();\r\n        e.invoke(method);\r\n        if (returns) {\r\n            e.store_local(result2);\r\n        }\r\n    });\r\n    if (returns) {\r\n        e.load_local(result);\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#emitProxy(ClassEmitter,MethodInfo)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    // make a new instance in case first object is used with a long list of targets\r\n    return ((MulticastDelegate) ReflectUtils.newInstance(type)).newInstance();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return ((MulticastDelegate) instance).newInstance();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.reflect",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.SpringCglibInfo",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.SpringCglibInfo",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib;\n\n/**\n * Empty class used to ensure that the {@code org.springframework.cglib}\n * package is processed during javadoc generation.\n *\n * <p>See <a href=\"package-summary.html\">package-level javadocs</a> for more\n * information on {@code org.springframework.cglib}.\n *\n * @author Chris Beams\n * @since 3.2\n */\npublic final class SpringCglibInfo {\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.FieldVisitor;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.cglib.core.ClassTransformer;\n\nabstract public class AbstractClassFilterTransformer extends AbstractClassTransformer {\n    private ClassTransformer pass;\n    private ClassVisitor target;\n\n    @Override\n\tpublic void setTarget(ClassVisitor target) {\n        super.setTarget(target);\n        pass.setTarget(target);\n    }\n\n    protected AbstractClassFilterTransformer(ClassTransformer pass) {\n        this.pass = pass;\n    }\n\n    abstract protected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces);\n\n    @Override\n\tpublic void visit(int version,\n                      int access,\n                      String name,\n                      String signature,\n                      String superName,\n                      String[] interfaces) {\n        target = accept(version, access, name, signature, superName, interfaces) ? pass : cv;\n        target.visit(version, access, name, signature, superName, interfaces);\n    }\n\n    @Override\n\tpublic void visitSource(String source, String debug) {\n        target.visitSource(source, debug);\n    }\n\n    @Override\n\tpublic void visitOuterClass(String owner, String name, String desc) {\n        target.visitOuterClass(owner, name, desc);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n        return target.visitAnnotation(desc, visible);\n    }\n\n    @Override\n\tpublic void visitAttribute(Attribute attr) {\n        target.visitAttribute(attr);\n    }\n\n    @Override\n\tpublic void visitInnerClass(String name, String outerName, String innerName, int access) {\n        target.visitInnerClass(name, outerName, innerName, access);\n    }\n\n    @Override\n\tpublic FieldVisitor visitField(int access,\n                                   String name,\n                                   String desc,\n                                   String signature,\n                                   Object value) {\n        return target.visitField(access, name, desc, signature, value);\n    }\n\n    @Override\n\tpublic MethodVisitor visitMethod(int access,\n                                     String name,\n                                     String desc,\n                                     String signature,\n                                     String[] exceptions) {\n        return target.visitMethod(access, name, desc, signature, exceptions);\n    }\n\n    @Override\n\tpublic void visitEnd() {\n        target.visitEnd();\n        target = null; // just to be safe\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#pass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#pass",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassTransformer",
    "tailType": "type"
  }
]