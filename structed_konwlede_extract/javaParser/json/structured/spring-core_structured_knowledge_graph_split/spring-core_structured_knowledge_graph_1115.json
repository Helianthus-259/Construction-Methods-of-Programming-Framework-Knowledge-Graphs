[
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic StartupStep tag(String key, String value) {\r\n    this.tags.add(key, value);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic StartupStep tag(String key, Supplier<String> value) {\r\n    this.tags.add(key, value.get());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#tag(String,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#getTags()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Tags getTags() {\r\n    return this.tags;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#getTags()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#getTags()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#end()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void end() {\r\n    this.event.end();\r\n    if (this.event.shouldCommit()) {\r\n        StringBuilder builder = new StringBuilder();\r\n        this.tags.forEach(tag -> builder.append(tag.getKey()).append('=').append(tag.getValue()).append(','));\r\n        this.event.setTags(builder.toString());\r\n    }\r\n    this.event.commit();\r\n    this.recordingCallback.accept(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#end()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#end()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#getEvent()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected FlightRecorderStartupEvent getEvent() {\r\n    return this.event;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderStartupStep#getEvent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTags",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTags",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2012-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.metrics.jfr;\n\nimport java.util.Iterator;\nimport java.util.function.Consumer;\nimport java.util.function.Supplier;\n\nimport org.springframework.core.metrics.StartupStep;\n\n/**\n * {@link StartupStep} implementation for the Java Flight Recorder.\n *\n * <p>This variant delegates to a {@link FlightRecorderStartupEvent JFR event extension}\n * to collect and record data in Java Flight Recorder.\n *\n * @author Brian Clozel\n */\nclass FlightRecorderStartupStep implements StartupStep {\n\n\tprivate final FlightRecorderStartupEvent event;\n\n\tprivate final FlightRecorderTags tags = new FlightRecorderTags();\n\n\tprivate final Consumer<FlightRecorderStartupStep> recordingCallback;\n\n\n\tpublic FlightRecorderStartupStep(long id, String name, long parentId,\n\t\t\tConsumer<FlightRecorderStartupStep> recordingCallback) {\n\n\t\tthis.event = new FlightRecorderStartupEvent(id, name, parentId);\n\t\tthis.event.begin();\n\t\tthis.recordingCallback = recordingCallback;\n\t}\n\n\n\t@Override\n\tpublic String getName() {\n\t\treturn this.event.name;\n\t}\n\n\t@Override\n\tpublic long getId() {\n\t\treturn this.event.eventId;\n\t}\n\n\t@Override\n\tpublic Long getParentId() {\n\t\treturn this.event.parentId;\n\t}\n\n\t@Override\n\tpublic StartupStep tag(String key, String value) {\n\t\tthis.tags.add(key, value);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic StartupStep tag(String key, Supplier<String> value) {\n\t\tthis.tags.add(key, value.get());\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic Tags getTags() {\n\t\treturn this.tags;\n\t}\n\n\t@Override\n\tpublic void end() {\n\t\tthis.event.end();\n\t\tif (this.event.shouldCommit()) {\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tthis.tags.forEach(tag ->\n\t\t\t\t\tbuilder.append(tag.getKey()).append('=').append(tag.getValue()).append(',')\n\t\t\t);\n\t\t\tthis.event.setTags(builder.toString());\n\t\t}\n\t\tthis.event.commit();\n\t\tthis.recordingCallback.accept(this);\n\t}\n\n\tprotected FlightRecorderStartupEvent getEvent() {\n\t\treturn this.event;\n\t}\n\n\n\tstatic class FlightRecorderTags implements Tags {\n\n\t\tprivate Tag[] tags = new Tag[0];\n\n\t\tpublic void add(String key, String value) {\n\t\t\tTag[] newTags = new Tag[this.tags.length + 1];\n\t\t\tSystem.arraycopy(this.tags, 0, newTags, 0, this.tags.length);\n\t\t\tnewTags[newTags.length - 1] = new FlightRecorderTag(key, value);\n\t\t\tthis.tags = newTags;\n\t\t}\n\n\t\tpublic void add(String key, Supplier<String> value) {\n\t\t\tadd(key, value.get());\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<Tag> iterator() {\n\t\t\treturn new TagsIterator();\n\t\t}\n\n\n\t\tprivate class TagsIterator implements Iterator<Tag> {\n\n\t\t\tprivate int idx = 0;\n\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn this.idx < tags.length;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Tag next() {\n\t\t\t\treturn tags[this.idx++];\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void remove() {\n\t\t\t\tthrow new UnsupportedOperationException(\"tags are append only\");\n\t\t\t}\n\t\t}\n\t}\n\n\n\tstatic class FlightRecorderTag implements Tag {\n\n\t\tprivate final String key;\n\n\t\tprivate final String value;\n\n\t\tpublic FlightRecorderTag(String key, String value) {\n\t\t\tthis.key = key;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getKey() {\n\t\t\treturn this.key;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getValue() {\n\t\t\treturn this.value;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTags",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTags#tags",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTags#tags",
    "headType": "field",
    "relation": "haveType",
    "tail": "Tag",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTags#add(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void add(String key, String value) {\r\n    Tag[] newTags = new Tag[this.tags.length + 1];\r\n    System.arraycopy(this.tags, 0, newTags, 0, this.tags.length);\r\n    newTags[newTags.length - 1] = new FlightRecorderTag(key, value);\r\n    this.tags = newTags;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTags",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTags#add(String,String)",
    "tailType": "method"
  }
]