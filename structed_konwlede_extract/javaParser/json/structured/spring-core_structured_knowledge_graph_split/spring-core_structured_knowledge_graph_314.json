[
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ByteVector#data",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ByteVector#data",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ByteVector#length",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ByteVector#length",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ByteVector#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the actual number of bytes in this vector.\r\n *\r\n * @return the actual number of bytes in this vector.\r\n */\r\npublic int size() {\r\n    return length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersister()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersister() throws IOException {\r\n    String propString = \"code1=message1\\ncode2:message2\";\r\n    Properties props = loadProperties(propString, false);\r\n    String propCopy = storeProperties(props, null, false);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersister()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersister()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithWhitespace() throws IOException {\r\n    String propString = \" code1\\t= \\tmessage1\\n  code2 \\t  :\\t mess\\\\\\n \\t  age2\";\r\n    Properties props = loadProperties(propString, false);\r\n    String propCopy = storeProperties(props, null, false);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ByteVector#putByte(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\r\n *\r\n * @param byteValue a byte.\r\n * @return this byte vector.\r\n */\r\npublic ByteVector putByte(final int byteValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 1 > data.length) {\r\n        enlarge(1);\r\n    }\r\n    data[currentLength++] = (byte) byteValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putByte(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithHeader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithHeader() throws IOException {\r\n    String propString = \"code1=message1\\ncode2:message2\";\r\n    Properties props = loadProperties(propString, false);\r\n    String propCopy = storeProperties(props, \"myHeader\", false);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithHeader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithHeader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithEmptyValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithEmptyValue() throws IOException {\r\n    String propString = \"code1=message1\\ncode2:message2\\ncode3=\";\r\n    Properties props = loadProperties(propString, false);\r\n    String propCopy = storeProperties(props, null, false);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithEmptyValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithEmptyValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]