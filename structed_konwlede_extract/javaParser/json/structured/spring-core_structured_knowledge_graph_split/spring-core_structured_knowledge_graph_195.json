[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.concurrent",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.concurrent",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.concurrent;\n\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.mock;\n\n/**\n * @author Arjen Poutsma\n */\n@SuppressWarnings(\"deprecation\")\nclass FutureAdapterTests {\n\n\tprivate Future<Integer> adaptee = mock();\n\n\tprivate FutureAdapter<String, Integer> adapter = new FutureAdapter<>(adaptee) {\n\t\t@Override\n\t\tprotected String adapt(Integer adapteeResult) {\n\t\t\treturn adapteeResult.toString();\n\t\t}\n\t};\n\n\n\n\t@Test\n\tvoid cancel() {\n\t\tgiven(adaptee.cancel(true)).willReturn(true);\n\t\tboolean result = adapter.cancel(true);\n\t\tassertThat(result).isTrue();\n\t}\n\n\t@Test\n\tvoid isCancelled() {\n\t\tgiven(adaptee.isCancelled()).willReturn(true);\n\t\tboolean result = adapter.isCancelled();\n\t\tassertThat(result).isTrue();\n\t}\n\n\t@Test\n\tvoid isDone() {\n\t\tgiven(adaptee.isDone()).willReturn(true);\n\t\tboolean result = adapter.isDone();\n\t\tassertThat(result).isTrue();\n\t}\n\n\t@Test\n\tvoid get() throws Exception {\n\t\tgiven(adaptee.get()).willReturn(42);\n\t\tString result = adapter.get();\n\t\tassertThat(result).isEqualTo(\"42\");\n\t}\n\n\t@Test\n\tvoid getTimeOut() throws Exception {\n\t\tgiven(adaptee.get(1, TimeUnit.SECONDS)).willReturn(42);\n\t\tString result = adapter.get(1, TimeUnit.SECONDS);\n\t\tassertThat(result).isEqualTo(\"42\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#adaptee",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#adaptee",
    "headType": "field",
    "relation": "haveType",
    "tail": "Future<Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#adapter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#adapter",
    "headType": "field",
    "relation": "haveType",
    "tail": "FutureAdapter<String, Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#cancel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid cancel() {\r\n    given(adaptee.cancel(true)).willReturn(true);\r\n    boolean result = adapter.cancel(true);\r\n    assertThat(result).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#cancel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#cancel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#isCancelled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isCancelled() {\r\n    given(adaptee.isCancelled()).willReturn(true);\r\n    boolean result = adapter.isCancelled();\r\n    assertThat(result).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#isCancelled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#isCancelled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#isDone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isDone() {\r\n    given(adaptee.isDone()).willReturn(true);\r\n    boolean result = adapter.isDone();\r\n    assertThat(result).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#isDone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#isDone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#get()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid get() throws Exception {\r\n    given(adaptee.get()).willReturn(42);\r\n    String result = adapter.get();\r\n    assertThat(result).isEqualTo(\"42\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#get()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]