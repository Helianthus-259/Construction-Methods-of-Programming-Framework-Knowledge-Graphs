[
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenNoRegisteredImplementationsReturnsEmptyList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWhenNoRegisteredImplementationsReturnsEmptyList() {\r\n    List<Integer> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(Integer.class);\r\n    assertThat(factories).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenNoRegisteredImplementationsReturnsEmptyList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenNoRegisteredImplementationsReturnsEmptyList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenDuplicateRegistrationsPresentReturnsListInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWhenDuplicateRegistrationsPresentReturnsListInCorrectOrder() {\r\n    List<DummyFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(DummyFactory.class);\r\n    assertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenDuplicateRegistrationsPresentReturnsListInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenDuplicateRegistrationsPresentReturnsListInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenPackagePrivateFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWhenPackagePrivateFactory() {\r\n    List<DummyPackagePrivateFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(DummyPackagePrivateFactory.class);\r\n    assertThat(factories).hasSize(1);\r\n    assertThat(Modifier.isPublic(factories.get(0).getClass().getModifiers())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenPackagePrivateFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenPackagePrivateFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenIncompatibleTypeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWhenIncompatibleTypeThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> SpringFactoriesLoader.forDefaultResourceLocation().load(String.class)).withMessageContaining(\"Unable to instantiate factory class \" + \"[org.springframework.core.io.support.MyDummyFactory1] for factory type [java.lang.String]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenIncompatibleTypeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenIncompatibleTypeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithLoggingFailureHandlerWhenIncompatibleTypeReturnsEmptyList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWithLoggingFailureHandlerWhenIncompatibleTypeReturnsEmptyList() {\r\n    Log logger = mock();\r\n    FailureHandler failureHandler = FailureHandler.logging(logger);\r\n    List<String> factories = SpringFactoriesLoader.forDefaultResourceLocation().load(String.class, failureHandler);\r\n    assertThat(factories).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithLoggingFailureHandlerWhenIncompatibleTypeReturnsEmptyList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithLoggingFailureHandlerWhenIncompatibleTypeReturnsEmptyList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithArgumentResolverWhenNoDefaultConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWithArgumentResolverWhenNoDefaultConstructor() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(String.class, \"injected\");\r\n    List<DummyFactory> factories = SpringFactoriesLoader.forDefaultResourceLocation(LimitedClassLoader.constructorArgumentFactories).load(DummyFactory.class, resolver);\r\n    assertThat(factories).hasExactlyElementsOfTypes(MyDummyFactory1.class, MyDummyFactory2.class, ConstructorArgsDummyFactory.class);\r\n    assertThat(factories).extracting(DummyFactory::getString).containsExactly(\"Foo\", \"Bar\", \"injected\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithArgumentResolverWhenNoDefaultConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWithArgumentResolverWhenNoDefaultConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenMultipleConstructorsThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid loadWhenMultipleConstructorsThrowsException() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(String.class, \"injected\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> SpringFactoriesLoader.forDefaultResourceLocation(LimitedClassLoader.multipleArgumentFactories).load(DummyFactory.class, resolver)).withMessageContaining(\"Unable to instantiate factory class \" + \"[org.springframework.core.io.support.MultipleConstructorArgsDummyFactory] for factory type [org.springframework.core.io.support.DummyFactory]\").havingRootCause().withMessageContaining(\"Class [org.springframework.core.io.support.MultipleConstructorArgsDummyFactory] has no suitable constructor\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoaderTests#loadWhenMultipleConstructorsThrowsException()",
    "tailType": "method"
  }
]