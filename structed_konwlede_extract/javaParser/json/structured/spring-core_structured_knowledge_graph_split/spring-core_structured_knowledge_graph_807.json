[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getMetaSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic MergedAnnotation<?> getMetaSource() {\r\n    AnnotationTypeMapping metaSourceMapping = this.mapping.getSource();\r\n    if (metaSourceMapping == null) {\r\n        return null;\r\n    }\r\n    return new TypeMappedAnnotation<>(metaSourceMapping, this.classLoader, this.source, this.rootAttributes, this.valueExtractor, this.aggregateIndex, this.resolvedRootMirrors);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getMetaSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getMetaSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getMetaSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<?> getRoot() {\r\n    if (getDistance() == 0) {\r\n        return this;\r\n    }\r\n    AnnotationTypeMapping rootMapping = this.mapping.getRoot();\r\n    return new TypeMappedAnnotation<>(rootMapping, this.classLoader, this.source, this.rootAttributes, this.valueExtractor, this.aggregateIndex, this.resolvedRootMirrors);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getRoot()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#hasDefaultValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasDefaultValue(String attributeName) {\r\n    int attributeIndex = getAttributeIndex(attributeName, true);\r\n    Object value = getValue(attributeIndex, true, false);\r\n    return (value == null || this.mapping.isEquivalentToDefaultValue(attributeIndex, value, this.valueExtractor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#hasDefaultValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#hasDefaultValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotation(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic <T extends Annotation> MergedAnnotation<T> getAnnotation(String attributeName, Class<T> type) throws NoSuchElementException {\r\n    int attributeIndex = getAttributeIndex(attributeName, true);\r\n    Method attribute = this.mapping.getAttributes().get(attributeIndex);\r\n    Assert.notNull(type, \"Type must not be null\");\r\n    Assert.isAssignable(type, attribute.getReturnType(), () -> \"Attribute \" + attributeName + \" type mismatch:\");\r\n    return (MergedAnnotation<T>) getRequiredValue(attributeIndex, attributeName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotation(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotation(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotation(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotationArray(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic <T extends Annotation> MergedAnnotation<T>[] getAnnotationArray(String attributeName, Class<T> type) throws NoSuchElementException {\r\n    int attributeIndex = getAttributeIndex(attributeName, true);\r\n    Method attribute = this.mapping.getAttributes().get(attributeIndex);\r\n    Class<?> componentType = attribute.getReturnType().componentType();\r\n    Assert.notNull(type, \"Type must not be null\");\r\n    Assert.notNull(componentType, () -> \"Attribute \" + attributeName + \" is not an array\");\r\n    Assert.isAssignable(type, componentType, () -> \"Attribute \" + attributeName + \" component type mismatch:\");\r\n    return (MergedAnnotation<T>[]) getRequiredValue(attributeIndex, attributeName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotationArray(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAnnotationArray(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]