[
  {
    "head": "org.springframework.core.codec.SseLinesState",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#aliasChainingWithMultipleAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-17191\r\n@Test\r\nvoid aliasChainingWithMultipleAliases() {\r\n    registerAlias(NAME1, ALIAS1);\r\n    registerAlias(NAME1, ALIAS2);\r\n    assertHasAlias(NAME1, ALIAS1);\r\n    assertHasAlias(NAME1, ALIAS2);\r\n    registerAlias(REAL_NAME, NAME1);\r\n    assertHasAlias(REAL_NAME, NAME1);\r\n    assertHasAlias(REAL_NAME, ALIAS1);\r\n    assertHasAlias(REAL_NAME, ALIAS2);\r\n    registerAlias(NAME1, ALIAS3);\r\n    assertHasAlias(REAL_NAME, NAME1);\r\n    assertHasAlias(REAL_NAME, ALIAS1);\r\n    assertHasAlias(REAL_NAME, ALIAS2);\r\n    assertHasAlias(REAL_NAME, ALIAS3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#aliasChainingWithMultipleAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#aliasChainingWithMultipleAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeNullAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeNullAlias() {\r\n    assertThatNullPointerException().isThrownBy(() -> registry.removeAlias(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#removeNullAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeNullAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeNonExistentAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeNonExistentAlias() {\r\n    String alias = NICKNAME;\r\n    assertDoesNotHaveAlias(REAL_NAME, alias);\r\n    assertThatIllegalStateException().isThrownBy(() -> registry.removeAlias(alias)).withMessage(\"No alias '%s' registered\", alias);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#removeNonExistentAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeNonExistentAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeExistingAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeExistingAlias() {\r\n    registerAlias(REAL_NAME, NICKNAME);\r\n    assertHasAlias(REAL_NAME, NICKNAME);\r\n    registry.removeAlias(NICKNAME);\r\n    assertDoesNotHaveAlias(REAL_NAME, NICKNAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#removeExistingAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#removeExistingAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#isAlias()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAlias() {\r\n    registerAlias(REAL_NAME, NICKNAME);\r\n    assertThat(registry.isAlias(NICKNAME)).isTrue();\r\n    assertThat(registry.isAlias(REAL_NAME)).isFalse();\r\n    assertThat(registry.isAlias(\"bogus\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#isAlias()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#isAlias()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#getAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliases() {\r\n    assertThat(registry.getAliases(NAME1)).isEmpty();\r\n    registerAlias(NAME1, ALIAS1);\r\n    assertThat(registry.getAliases(NAME1)).containsExactly(ALIAS1);\r\n    registerAlias(ALIAS1, ALIAS2);\r\n    registerAlias(ALIAS2, ALIAS3);\r\n    assertThat(registry.getAliases(NAME1)).containsExactlyInAnyOrder(ALIAS1, ALIAS2, ALIAS3);\r\n    assertThat(registry.getAliases(ALIAS1)).containsExactlyInAnyOrder(ALIAS2, ALIAS3);\r\n    assertThat(registry.getAliases(ALIAS2)).containsExactly(ALIAS3);\r\n    assertThat(registry.getAliases(ALIAS3)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistryTests#getAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#getAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistryTests#checkForAliasCircle()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid checkForAliasCircle() {\r\n    // No aliases registered, so no cycles possible.\r\n    assertThatNoException().isThrownBy(() -> registry.checkForAliasCircle(NAME1, ALIAS1));\r\n    // ALIAS1 -> NAME1\r\n    registerAlias(NAME1, ALIAS1);\r\n    // No cycles possible.\r\n    assertThatNoException().isThrownBy(() -> registry.checkForAliasCircle(NAME1, ALIAS1));\r\n    assertThatIllegalStateException().// NAME1 -> ALIAS1 -> NAME1\r\n    isThrownBy(// internally invokes checkForAliasCircle()\r\n    () -> registerAlias(ALIAS1, NAME1)).withMessageContaining(\"'%s' is a direct or indirect alias for '%s'\", ALIAS1, NAME1);\r\n    // ALIAS2 -> ALIAS1 -> NAME1\r\n    registerAlias(ALIAS1, ALIAS2);\r\n    assertThatIllegalStateException().// NAME1 -> ALIAS1 -> ALIAS2 -> NAME1\r\n    isThrownBy(// internally invokes checkForAliasCircle()\r\n    () -> registerAlias(ALIAS2, NAME1)).withMessageContaining(\"'%s' is a direct or indirect alias for '%s'\", ALIAS2, NAME1);\r\n}",
    "tailType": "method_code"
  }
]