[
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getPackageName(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getPackageName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the name of the package of the given fully-qualified class name,\r\n * for example, \"java.lang\" for the {@code java.lang.String} class name.\r\n * @param fqClassName the fully-qualified class name\r\n * @return the package name, or the empty String if the class\r\n * is defined in the default package\r\n */\r\npublic static String getPackageName(String fqClassName) {\r\n    Assert.notNull(fqClassName, \"Class name must not be null\");\r\n    int lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);\r\n    return (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getPackageName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getQualifiedName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the qualified name of the given class: usually simply\r\n * the class name, but component type class name + \"[]\" for arrays.\r\n * @param clazz the class\r\n * @return the qualified name of the class\r\n */\r\npublic static String getQualifiedName(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    return clazz.getTypeName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getQualifiedName(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getQualifiedMethodName(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the qualified name of the given method, consisting of\r\n * fully qualified interface/class name + \".\" + method name.\r\n * @param method the method\r\n * @return the qualified name of the method\r\n */\r\npublic static String getQualifiedMethodName(Method method) {\r\n    return getQualifiedMethodName(method, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getQualifiedMethodName(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getQualifiedMethodName(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the qualified name of the given method, consisting of\r\n * fully qualified interface/class name + \".\" + method name.\r\n * @param method the method\r\n * @param clazz the clazz that the method is being invoked on\r\n * (can be {@code null} to indicate the method's declaring class)\r\n * @return the qualified name of the method\r\n * @since 4.3.4\r\n */\r\npublic static String getQualifiedMethodName(Method method, @Nullable Class<?> clazz) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    return (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getQualifiedMethodName(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#hasConstructor(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class has a public constructor with the given signature.\r\n * <p>Essentially translates {@code NoSuchMethodException} to \"false\".\r\n * @param clazz the clazz to analyze\r\n * @param paramTypes the parameter types of the method\r\n * @return whether the class has a corresponding constructor\r\n * @see Class#getConstructor\r\n */\r\npublic static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {\r\n    return (getConstructorIfAvailable(clazz, paramTypes) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#hasConstructor(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getConstructorIfAvailable(Class<T>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class has a public constructor with the given signature,\r\n * and return it if available (else return {@code null}).\r\n * <p>Essentially translates {@code NoSuchMethodException} to {@code null}.\r\n * @param clazz the clazz to analyze\r\n * @param paramTypes the parameter types of the method\r\n * @return the constructor, or {@code null} if not found\r\n * @see Class#getConstructor\r\n */\r\n@Nullable\r\npublic static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    try {\r\n        return clazz.getConstructor(paramTypes);\r\n    } catch (NoSuchMethodException ex) {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getConstructorIfAvailable(Class<T>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getConstructorIfAvailable(Class<T>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#hasMethod(Class<?>,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class has a public method with the given signature.\r\n * @param clazz the clazz to analyze\r\n * @param method the method to look for\r\n * @return whether the class has a corresponding method\r\n * @since 5.2.3\r\n */\r\npublic static boolean hasMethod(Class<?> clazz, Method method) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    if (clazz == method.getDeclaringClass()) {\r\n        return true;\r\n    }\r\n    String methodName = method.getName();\r\n    Class<?>[] paramTypes = method.getParameterTypes();\r\n    return getMethodOrNull(clazz, methodName, paramTypes) != null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#hasMethod(Class<?>,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#hasMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class has a public method with the given signature.\r\n * <p>Essentially translates {@code NoSuchMethodException} to \"false\".\r\n * @param clazz the clazz to analyze\r\n * @param methodName the name of the method\r\n * @param paramTypes the parameter types of the method\r\n * @return whether the class has a corresponding method\r\n * @see Class#getMethod\r\n */\r\npublic static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {\r\n    return (getMethodIfAvailable(clazz, methodName, paramTypes) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#hasMethod(Class<?>,String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class has a public method with the given signature,\r\n * and return it if available (else throws an {@code IllegalStateException}).\r\n * <p>In case of any signature specified, only returns the method if there is a\r\n * unique candidate, i.e. a single public method with the specified name.\r\n * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}.\r\n * @param clazz the clazz to analyze\r\n * @param methodName the name of the method\r\n * @param paramTypes the parameter types of the method\r\n * (can be {@code null} to indicate any signature)\r\n * @return the method (never {@code null})\r\n * @throws IllegalStateException if the method has not been found\r\n * @see Class#getMethod\r\n */\r\npublic static Method getMethod(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(methodName, \"Method name must not be null\");\r\n    if (paramTypes != null) {\r\n        try {\r\n            return clazz.getMethod(methodName, paramTypes);\r\n        } catch (NoSuchMethodException ex) {\r\n            throw new IllegalStateException(\"Expected method not found: \" + ex);\r\n        }\r\n    } else {\r\n        Set<Method> candidates = findMethodCandidatesByName(clazz, methodName);\r\n        if (candidates.size() == 1) {\r\n            return candidates.iterator().next();\r\n        } else if (candidates.isEmpty()) {\r\n            throw new IllegalStateException(\"Expected method not found: \" + clazz.getName() + '.' + methodName);\r\n        } else {\r\n            throw new IllegalStateException(\"No unique method found: \" + clazz.getName() + '.' + methodName);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getMethod(Class<?>,String,Class<?>)",
    "tailType": "method"
  }
]