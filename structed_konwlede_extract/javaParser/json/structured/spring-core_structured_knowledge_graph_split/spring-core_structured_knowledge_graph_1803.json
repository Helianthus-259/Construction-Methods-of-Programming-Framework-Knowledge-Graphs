[
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3324()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3324()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3357()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3357() throws Exception {\r\n    Method bridgedMethod = ExtendsAbstractImplementsInterface.class.getDeclaredMethod(\"doSomething\", DomainObjectExtendsSuper.class, Object.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = ExtendsAbstractImplementsInterface.class.getDeclaredMethod(\"doSomething\", DomainObjectSuper.class, Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3357()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3357()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3485()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3485() throws Exception {\r\n    Method bridgedMethod = DomainObject.class.getDeclaredMethod(\"method2\", ParameterType.class, byte[].class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = DomainObject.class.getDeclaredMethod(\"method2\", Serializable.class, Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3485()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3485()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3534()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3534() {\r\n    Method bridgeMethod = ReflectionUtils.findMethod(TestEmailProvider.class, \"findBy\", Object.class);\r\n    assertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\r\n    Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    assertThat(bridgedMethod.getName()).isEqualTo(\"findBy\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3534()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3534()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#testClassHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16103\r\n@Test\r\nvoid testClassHierarchy() throws Exception {\r\n    doTestHierarchyResolution(FooClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#testClassHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#testClassHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#testInterfaceHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16103\r\n@Test\r\nvoid testInterfaceHierarchy() throws Exception {\r\n    doTestHierarchyResolution(FooInterface.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#testInterfaceHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#testInterfaceHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#doTestHierarchyResolution(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestHierarchyResolution(Class<?> clazz) throws Exception {\r\n    for (Method method : clazz.getDeclaredMethods()) {\r\n        Method bridged = BridgeMethodResolver.findBridgedMethod(method);\r\n        Method expected = clazz.getMethod(\"test\", FooEntity.class);\r\n        assertThat(bridged).isEqualTo(expected);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#doTestHierarchyResolution(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.Foo",
    "tailType": "class"
  }
]