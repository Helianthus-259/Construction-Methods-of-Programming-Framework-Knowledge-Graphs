[
  {
    "head": "org.springframework.core.codec.Encoder#getEncodableMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of MIME types supported by this Encoder. The list may not\r\n * apply to every possible target element type and calls to this method should\r\n * typically be guarded via {@link #canEncode(ResolvableType, MimeType)\r\n * canEncode(elementType, null)}. The list may also exclude MIME types\r\n * supported only for a specific element type. Alternatively, use\r\n * {@link #getEncodableMimeTypes(ResolvableType)} for a more precise list.\r\n * @return the list of supported MIME types\r\n */\r\nList<MimeType> getEncodableMimeTypes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Encoder#getEncodableMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Encoder#getEncodableMimeTypes(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of MIME types supported by this Encoder for the given type\r\n * of element. This list may differ from the {@link #getEncodableMimeTypes()}\r\n * if the Encoder doesn't support the element type or if it supports it only\r\n * for a subset of MIME types.\r\n * @param elementType the type of element to check for encoding\r\n * @return the list of MIME types supported for the given element type\r\n * @since 5.3.4\r\n */\r\ndefault List<MimeType> getEncodableMimeTypes(ResolvableType elementType) {\r\n    return (canEncode(elementType, null) ? getEncodableMimeTypes() : Collections.emptyList());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Encoder#getEncodableMimeTypes(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.EncodingException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.EncodingException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.EncodingException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Indicates an issue with encoding the input Object stream with a focus on\n * not being able to encode Objects. As opposed to a more general I/O errors\n * or a {@link CodecException} such as a configuration issue that an\n * {@link Encoder} may also choose to raise.\n *\n * @author Rossen Stoyanchev\n * @since 5.0\n * @see Encoder\n */\n@SuppressWarnings(\"serial\")\npublic class EncodingException extends CodecException {\n\n\t/**\n\t * Create a new EncodingException.\n\t * @param msg the detail message\n\t */\n\tpublic EncodingException(String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Create a new EncodingException.\n\t * @param msg the detail message\n\t * @param cause root cause for the exception, if any\n\t */\n\tpublic EncodingException(String msg, @Nullable Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.EncodingException",
    "headType": "class",
    "relation": "extend",
    "tail": "CodecException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.Hints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport org.apache.commons.logging.Log;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Constants and convenience methods for working with hints.\n *\n * @author Rossen Stoyanchev\n * @since 5.1\n * @see ResourceRegionEncoder#BOUNDARY_STRING_HINT\n */\npublic abstract class Hints {\n\n\t/**\n\t * Name of hint exposing a prefix to use for correlating log messages.\n\t */\n\tpublic static final String LOG_PREFIX_HINT = Log.class.getName() + \".PREFIX\";\n\n\t/**\n\t * Name of boolean hint whether to avoid logging data either because it's\n\t * potentially sensitive, or because it has been logged by a composite\n\t * encoder, for example, for multipart requests.\n\t */\n\tpublic static final String SUPPRESS_LOGGING_HINT = Log.class.getName() + \".SUPPRESS_LOGGING\";\n\n\n\t/**\n\t * Create a map wit a single hint via {@link Collections#singletonMap}.\n\t * @param hintName the hint name\n\t * @param value the hint value\n\t * @return the created map\n\t */\n\tpublic static Map<String, Object> from(String hintName, Object value) {\n\t\treturn Collections.singletonMap(hintName, value);\n\t}\n\n\t/**\n\t * Return an empty map of hints via {@link Collections#emptyMap()}.\n\t * @return the empty map\n\t */\n\tpublic static Map<String, Object> none() {\n\t\treturn Collections.emptyMap();\n\t}\n\n\t/**\n\t * Obtain the value for a required hint.\n\t * @param hints the hints map\n\t * @param hintName the required hint name\n\t * @param <T> the hint type to cast to\n\t * @return the hint value\n\t * @throws IllegalArgumentException if the hint is not found\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {\n\t\tif (hints == null) {\n\t\t\tthrow new IllegalArgumentException(\"No hints map for required hint '\" + hintName + \"'\");\n\t\t}\n\t\tT hint = (T) hints.get(hintName);\n\t\tif (hint == null) {\n\t\t\tthrow new IllegalArgumentException(\"Hints map must contain the hint '\" + hintName + \"'\");\n\t\t}\n\t\treturn hint;\n\t}\n\n\t/**\n\t * Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String.\n\t * @param hints the hints passed to the encode method\n\t * @return the log prefix\n\t */\n\tpublic static String getLogPrefix(@Nullable Map<String, Object> hints) {\n\t\treturn (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, \"\") : \"\");\n\t}\n\n\t/**\n\t * Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}.\n\t * @param hints the hints map\n\t * @return whether logging of data is allowed\n\t */\n\tpublic static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints) {\n\t\treturn (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));\n\t}\n\n\t/**\n\t * Merge two maps of hints, creating and copying into a new map if both have\n\t * values, or returning the non-empty map, or an empty map if both are empty.\n\t * @param hints1 1st map of hints\n\t * @param hints2 2nd map of hints\n\t * @return a single map with hints from both\n\t */\n\tpublic static Map<String, Object> merge(\n\t\t\t@Nullable Map<String, Object> hints1, @Nullable Map<String, Object> hints2) {\n\n\t\tif (ObjectUtils.isEmpty(hints1) && ObjectUtils.isEmpty(hints2)) {\n\t\t\treturn Collections.emptyMap();\n\t\t}\n\t\telse if (ObjectUtils.isEmpty(hints2)) {\n\t\t\treturn (hints1 != null ? hints1 : Collections.emptyMap());\n\t\t}\n\t\telse if (ObjectUtils.isEmpty(hints1)) {\n\t\t\treturn hints2;\n\t\t}\n\t\tMap<String, Object> result = CollectionUtils.newHashMap(hints1.size() + hints2.size());\n\t\tresult.putAll(hints1);\n\t\tresult.putAll(hints2);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Merge a single hint into a map of hints, possibly creating and copying\n\t * all hints into a new map, or otherwise if the map of hints is empty,\n\t * creating a new single entry map.\n\t * @param hints a map of hints to be merged\n\t * @param hintName the hint name to merge\n\t * @param hintValue the hint value to merge\n\t * @return a single map with all hints\n\t */\n\tpublic static Map<String, Object> merge(@Nullable Map<String, Object> hints, String hintName, Object hintValue) {\n\t\tif (ObjectUtils.isEmpty(hints)) {\n\t\t\treturn Collections.singletonMap(hintName, hintValue);\n\t\t}\n\t\tMap<String, Object> result = CollectionUtils.newHashMap(hints.size() + 1);\n\t\tresult.putAll(hints);\n\t\tresult.put(hintName, hintValue);\n\t\treturn result;\n\t}\n\n\t/**\n\t * If the hints contain a {@link #LOG_PREFIX_HINT} and the given logger has\n\t * DEBUG level enabled, apply the log prefix as a hint to the given buffer\n\t * via {@link DataBufferUtils#touch(DataBuffer, Object)}.\n\t * @param buffer the buffer to touch\n\t * @param hints the hints map to check for a log prefix\n\t * @param logger the logger whose level to check\n\t * @since 5.3.2\n\t */\n\tpublic static void touchDataBuffer(DataBuffer buffer, @Nullable Map<String, Object> hints, Log logger) {\n\t\tif (logger.isDebugEnabled() && hints != null) {\n\t\t\tObject logPrefix = hints.get(LOG_PREFIX_HINT);\n\t\t\tif (logPrefix != null) {\n\t\t\t\tDataBufferUtils.touch(buffer, logPrefix);\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.Hints#LOG_PREFIX_HINT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.Hints#LOG_PREFIX_HINT",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.Hints#SUPPRESS_LOGGING_HINT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.Hints#SUPPRESS_LOGGING_HINT",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.Hints#from(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a map wit a single hint via {@link Collections#singletonMap}.\r\n * @param hintName the hint name\r\n * @param value the hint value\r\n * @return the created map\r\n */\r\npublic static Map<String, Object> from(String hintName, Object value) {\r\n    return Collections.singletonMap(hintName, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#from(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#none()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an empty map of hints via {@link Collections#emptyMap()}.\r\n * @return the empty map\r\n */\r\npublic static Map<String, Object> none() {\r\n    return Collections.emptyMap();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#none()",
    "tailType": "method"
  }
]