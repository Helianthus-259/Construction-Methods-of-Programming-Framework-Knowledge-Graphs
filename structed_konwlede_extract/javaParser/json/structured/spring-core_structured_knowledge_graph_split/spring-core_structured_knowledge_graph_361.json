[
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid replaceWithNoDefaultIgnored() {\r\n    String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\", true);\r\n    assertThat(resolved).isEqualTo(\"${test.prop}\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithNoDefaultIgnored()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithEmptyDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid replaceWithEmptyDefault() {\r\n    String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:}\");\r\n    assertThat(resolved).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtilsTests#replaceWithEmptyDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceWithEmptyDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid recursiveFromSystemProperty() {\r\n    System.setProperty(\"test.prop\", \"foo=${bar}\");\r\n    System.setProperty(\"bar\", \"baz\");\r\n    try {\r\n        String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\");\r\n        assertThat(resolved).isEqualTo(\"foo=baz\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n        System.clearProperty(\"bar\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#recursiveFromSystemProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid replaceFromEnv() {\r\n    Map<String, String> env = System.getenv();\r\n    if (env.containsKey(\"PATH\")) {\r\n        String text = \"${PATH}\";\r\n        assertThat(SystemPropertyUtils.resolvePlaceholders(text)).isEqualTo(env.get(\"PATH\"));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromEnv()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.TypeUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link TypeUtils}.\n *\n * @author Juergen Hoeller\n * @author Chris Beams\n */\nclass TypeUtilsTests {\n\n\tpublic static Object object;\n\n\tpublic static String string;\n\n\tpublic static Integer number;\n\n\tpublic static List<Object> objects;\n\n\tpublic static List<String> strings;\n\n\tpublic static List<? extends Object> openObjects;\n\n\tpublic static List<? extends Number> openNumbers;\n\n\tpublic static List<? super Object> storableObjectList;\n\n\tpublic static List<Number>[] array;\n\n\tpublic static List<? extends Number>[] openArray;\n\n\n\t@Test\n\tvoid withClasses() {\n\t\tassertThat(TypeUtils.isAssignable(Object.class, Object.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, String.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(String.class, Object.class)).isFalse();\n\t\tassertThat(TypeUtils.isAssignable(List.class, List.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List.class, LinkedList.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List.class, Collection.class)).isFalse();\n\t\tassertThat(TypeUtils.isAssignable(List.class, HashSet.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid withParameterizedTypes() throws Exception {\n\t\tType objectsType = getClass().getField(\"objects\").getGenericType();\n\t\tType openObjectsType = getClass().getField(\"openObjects\").getGenericType();\n\t\tType stringsType = getClass().getField(\"strings\").getGenericType();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, objectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, openObjectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, stringsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List.class, objectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List.class, openObjectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List.class, stringsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(objectsType, List.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openObjectsType, List.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(stringsType, List.class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(objectsType, objectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openObjectsType, openObjectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(stringsType, stringsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openObjectsType, objectsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openObjectsType, stringsType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(stringsType, objectsType)).isFalse();\n\t\tassertThat(TypeUtils.isAssignable(objectsType, stringsType)).isFalse();\n\t}\n\n\t@Test\n\tvoid withWildcardTypes() throws Exception {\n\t\tParameterizedType openObjectsType = (ParameterizedType) getClass().getField(\"openObjects\").getGenericType();\n\t\tParameterizedType openNumbersType = (ParameterizedType) getClass().getField(\"openNumbers\").getGenericType();\n\t\tType storableObjectListType = getClass().getField(\"storableObjectList\").getGenericType();\n\n\t\tType objectType = getClass().getField(\"object\").getGenericType();\n\t\tType numberType = getClass().getField(\"number\").getGenericType();\n\t\tType stringType = getClass().getField(\"string\").getGenericType();\n\n\t\tType openWildcard = openObjectsType.getActualTypeArguments()[0]; // '?'\n\t\tType openNumbersWildcard = openNumbersType.getActualTypeArguments()[0]; // '? extends number'\n\n\t\tassertThat(TypeUtils.isAssignable(openWildcard, objectType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openNumbersWildcard, numberType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openNumbersWildcard, stringType)).isFalse();\n\t\tassertThat(TypeUtils.isAssignable(storableObjectListType, openObjectsType)).isFalse();\n\t}\n\n\t@Test\n\tvoid withGenericArrayTypes() throws Exception {\n\t\tType arrayType = getClass().getField(\"array\").getGenericType();\n\t\tType openArrayType = getClass().getField(\"openArray\").getGenericType();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, arrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(Object.class, openArrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List[].class, arrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(List[].class, openArrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(arrayType, List[].class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openArrayType, List[].class)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(arrayType, arrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openArrayType, openArrayType)).isTrue();\n\t\tassertThat(TypeUtils.isAssignable(openArrayType, arrayType)).isTrue();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#object",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#object",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#string",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#string",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]