[
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#error(SAXParseException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void error(SAXParseException ex) throws SAXException {\r\n    throw ex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleSaxErrorHandler#error(SAXParseException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#error(SAXParseException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#fatalError(SAXParseException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void fatalError(SAXParseException ex) throws SAXException {\r\n    throw ex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleSaxErrorHandler#fatalError(SAXParseException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#fatalError(SAXParseException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.SimpleTransformErrorListener",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.TransformerException;\n\nimport org.apache.commons.logging.Log;\n\n/**\n * Simple {@code javax.xml.transform.ErrorListener} implementation:\n * logs warnings using the given Commons Logging logger instance,\n * and rethrows errors to discontinue the XML transformation.\n *\n * @author Juergen Hoeller\n * @since 1.2\n */\npublic class SimpleTransformErrorListener implements ErrorListener {\n\n\tprivate final Log logger;\n\n\n\t/**\n\t * Create a new SimpleTransformErrorListener for the given\n\t * Commons Logging logger instance.\n\t */\n\tpublic SimpleTransformErrorListener(Log logger) {\n\t\tthis.logger = logger;\n\t}\n\n\n\t@Override\n\tpublic void warning(TransformerException ex) throws TransformerException {\n\t\tlogger.warn(\"XSLT transformation warning\", ex);\n\t}\n\n\t@Override\n\tpublic void error(TransformerException ex) throws TransformerException {\n\t\tlogger.error(\"XSLT transformation error\", ex);\n\t}\n\n\t@Override\n\tpublic void fatalError(TransformerException ex) throws TransformerException {\n\t\tthrow ex;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleTransformErrorListener#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#warning(TransformerException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void warning(TransformerException ex) throws TransformerException {\r\n    logger.warn(\"XSLT transformation warning\", ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleTransformErrorListener#warning(TransformerException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#warning(TransformerException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#error(TransformerException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void error(TransformerException ex) throws TransformerException {\r\n    logger.error(\"XSLT transformation error\", ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleTransformErrorListener#error(TransformerException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#error(TransformerException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#fatalError(TransformerException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void fatalError(TransformerException ex) throws TransformerException {\r\n    throw ex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleTransformErrorListener#fatalError(TransformerException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleTransformErrorListener#fatalError(TransformerException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]