[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.lang",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.lang",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.objenesis",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.objenesis",
    "tailType": "package"
  },
  {
    "head": "org.springframework.objenesis",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.objenesis.SpringObjenesis",
    "tailType": "class"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.objenesis;\n\nimport org.springframework.core.SpringProperties;\nimport org.springframework.objenesis.instantiator.ObjectInstantiator;\nimport org.springframework.objenesis.strategy.InstantiatorStrategy;\nimport org.springframework.objenesis.strategy.StdInstantiatorStrategy;\nimport org.springframework.util.ConcurrentReferenceHashMap;\n\n/**\n * Spring-specific variant of {@link ObjenesisStd} / {@link ObjenesisBase},\n * providing a cache based on {@code Class} keys instead of class names,\n * and allowing for selective use of the cache.\n *\n * @author Juergen Hoeller\n * @since 4.2\n * @see #isWorthTrying()\n * @see #newInstance(Class, boolean)\n */\npublic class SpringObjenesis implements Objenesis {\n\n\t/**\n\t * System property that instructs Spring to ignore Objenesis, not even attempting\n\t * to use it. Setting this flag to \"true\" is equivalent to letting Spring find\n\t * out that Objenesis isn't working at runtime, triggering the fallback code path\n\t * immediately: Most importantly, this means that all CGLIB AOP proxies will be\n\t * created through regular instantiation via a default constructor.\n\t */\n\tpublic static final String IGNORE_OBJENESIS_PROPERTY_NAME = \"spring.objenesis.ignore\";\n\n\n\tprivate final InstantiatorStrategy strategy;\n\n\tprivate final ConcurrentReferenceHashMap<Class<?>, ObjectInstantiator<?>> cache =\n\t\t\tnew ConcurrentReferenceHashMap<>();\n\n\tprivate volatile Boolean worthTrying;\n\n\n\t/**\n\t * Create a new {@code SpringObjenesis} instance with the\n\t * standard instantiator strategy.\n\t */\n\tpublic SpringObjenesis() {\n\t\tthis(null);\n\t}\n\n\t/**\n\t * Create a new {@code SpringObjenesis} instance with the\n\t * given standard instantiator strategy.\n\t * @param strategy the instantiator strategy to use\n\t */\n\tpublic SpringObjenesis(InstantiatorStrategy strategy) {\n\t\tthis.strategy = (strategy != null ? strategy : new StdInstantiatorStrategy());\n\n\t\t// Evaluate the \"spring.objenesis.ignore\" property upfront...\n\t\tif (SpringProperties.getFlag(SpringObjenesis.IGNORE_OBJENESIS_PROPERTY_NAME)) {\n\t\t\tthis.worthTrying = Boolean.FALSE;\n\t\t}\n\t}\n\n\n\t/**\n\t * Return whether this Objenesis instance is worth trying for instance creation,\n\t * i.e. whether it hasn't been used yet or is known to work.\n\t * <p>If the configured Objenesis instantiator strategy has been identified to not\n\t * work on the current JVM at all or if the \"spring.objenesis.ignore\" property has\n\t * been set to \"true\", this method returns {@code false}.\n\t */\n\tpublic boolean isWorthTrying() {\n\t\treturn (this.worthTrying != Boolean.FALSE);\n\t}\n\n\t/**\n\t * Create a new instance of the given class via Objenesis.\n\t * @param clazz the class to create an instance of\n\t * @param useCache whether to use the instantiator cache\n\t * (typically {@code true} but can be set to {@code false}\n\t * for example, for reloadable classes)\n\t * @return the new instance (never {@code null})\n\t * @throws ObjenesisException if instance creation failed\n\t */\n\tpublic <T> T newInstance(Class<T> clazz, boolean useCache) {\n\t\tif (!useCache) {\n\t\t\treturn newInstantiatorOf(clazz).newInstance();\n\t\t}\n\t\treturn getInstantiatorOf(clazz).newInstance();\n\t}\n\n\t@Override\n\tpublic <T> T newInstance(Class<T> clazz) {\n\t\treturn getInstantiatorOf(clazz).newInstance();\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> ObjectInstantiator<T> getInstantiatorOf(Class<T> clazz) {\n\t\tObjectInstantiator<?> instantiator = this.cache.get(clazz);\n\t\tif (instantiator == null) {\n\t\t\tObjectInstantiator<T> newInstantiator = newInstantiatorOf(clazz);\n\t\t\tinstantiator = this.cache.putIfAbsent(clazz, newInstantiator);\n\t\t\tif (instantiator == null) {\n\t\t\t\tinstantiator = newInstantiator;\n\t\t\t}\n\t\t}\n\t\treturn (ObjectInstantiator<T>) instantiator;\n\t}\n\n\tprotected <T> ObjectInstantiator<T> newInstantiatorOf(Class<T> clazz) {\n\t\tBoolean currentWorthTrying = this.worthTrying;\n\t\ttry {\n\t\t\tObjectInstantiator<T> instantiator = this.strategy.newInstantiatorOf(clazz);\n\t\t\tif (currentWorthTrying == null) {\n\t\t\t\tthis.worthTrying = Boolean.TRUE;\n\t\t\t}\n\t\t\treturn instantiator;\n\t\t}\n\t\tcatch (ObjenesisException ex) {\n\t\t\tif (currentWorthTrying == null) {\n\t\t\t\tThrowable cause = ex.getCause();\n\t\t\t\tif (cause instanceof ClassNotFoundException || cause instanceof IllegalAccessException) {\n\t\t\t\t\t// Indicates that the chosen instantiation strategy does not work on the given JVM.\n\t\t\t\t\t// Typically a failure to initialize the default SunReflectionFactoryInstantiator.\n\t\t\t\t\t// Let's assume that any subsequent attempts to use Objenesis will fail as well...\n\t\t\t\t\tthis.worthTrying = Boolean.FALSE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (NoClassDefFoundError err) {\n\t\t\t// Happening on the production version of Google App Engine, coming out of the\n\t\t\t// restricted \"sun.reflect.ReflectionFactory\" class...\n\t\t\tif (currentWorthTrying == null) {\n\t\t\t\tthis.worthTrying = Boolean.FALSE;\n\t\t\t}\n\t\t\tthrow new ObjenesisException(err);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.objenesis.SpringObjenesis#IGNORE_OBJENESIS_PROPERTY_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#IGNORE_OBJENESIS_PROPERTY_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.objenesis.SpringObjenesis#strategy",
    "tailType": "field"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#strategy",
    "headType": "field",
    "relation": "haveType",
    "tail": "InstantiatorStrategy",
    "tailType": "type"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.objenesis.SpringObjenesis#cache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#cache",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConcurrentReferenceHashMap<Class<?>, ObjectInstantiator<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.objenesis.SpringObjenesis#worthTrying",
    "tailType": "field"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#worthTrying",
    "headType": "field",
    "relation": "haveType",
    "tail": "Boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#isWorthTrying()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this Objenesis instance is worth trying for instance creation,\r\n * i.e. whether it hasn't been used yet or is known to work.\r\n * <p>If the configured Objenesis instantiator strategy has been identified to not\r\n * work on the current JVM at all or if the \"spring.objenesis.ignore\" property has\r\n * been set to \"true\", this method returns {@code false}.\r\n */\r\npublic boolean isWorthTrying() {\r\n    return (this.worthTrying != Boolean.FALSE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.objenesis.SpringObjenesis#isWorthTrying()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#newInstance(Class<T>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new instance of the given class via Objenesis.\r\n * @param clazz the class to create an instance of\r\n * @param useCache whether to use the instantiator cache\r\n * (typically {@code true} but can be set to {@code false}\r\n * for example, for reloadable classes)\r\n * @return the new instance (never {@code null})\r\n * @throws ObjenesisException if instance creation failed\r\n */\r\npublic <T> T newInstance(Class<T> clazz, boolean useCache) {\r\n    if (!useCache) {\r\n        return newInstantiatorOf(clazz).newInstance();\r\n    }\r\n    return getInstantiatorOf(clazz).newInstance();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.objenesis.SpringObjenesis#newInstance(Class<T>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis#newInstance(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> T newInstance(Class<T> clazz) {\r\n    return getInstantiatorOf(clazz).newInstance();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.objenesis.SpringObjenesis",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.objenesis.SpringObjenesis#newInstance(Class<T>)",
    "tailType": "method"
  }
]