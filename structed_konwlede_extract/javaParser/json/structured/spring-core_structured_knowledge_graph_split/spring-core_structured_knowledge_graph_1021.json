[
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NettyDataBuffer allocateBuffer(int initialCapacity) {\r\n    ByteBuf byteBuf = this.byteBufAllocator.buffer(initialCapacity);\r\n    return new NettyDataBuffer(byteBuf, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NettyDataBuffer wrap(ByteBuffer byteBuffer) {\r\n    ByteBuf byteBuf = Unpooled.wrappedBuffer(byteBuffer);\r\n    return new NettyDataBuffer(byteBuf, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer wrap(byte[] bytes) {\r\n    ByteBuf byteBuf = Unpooled.wrappedBuffer(bytes);\r\n    return new NettyDataBuffer(byteBuf, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(ByteBuf)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Wrap the given Netty {@link ByteBuf} in a {@code NettyDataBuffer}.\r\n * @param byteBuf the Netty byte buffer to wrap\r\n * @return the wrapped buffer\r\n */\r\npublic NettyDataBuffer wrap(ByteBuf byteBuf) {\r\n    byteBuf.touch();\r\n    return new NettyDataBuffer(byteBuf, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#wrap(ByteBuf)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * {@inheritDoc}\r\n * <p>This implementation uses Netty's {@link CompositeByteBuf}.\r\n */\r\n@Override\r\npublic DataBuffer join(List<? extends DataBuffer> dataBuffers) {\r\n    Assert.notEmpty(dataBuffers, \"DataBuffer List must not be empty\");\r\n    int bufferCount = dataBuffers.size();\r\n    if (bufferCount == 1) {\r\n        return dataBuffers.get(0);\r\n    }\r\n    CompositeByteBuf composite = this.byteBufAllocator.compositeBuffer(bufferCount);\r\n    for (DataBuffer dataBuffer : dataBuffers) {\r\n        Assert.isInstanceOf(NettyDataBuffer.class, dataBuffer);\r\n        composite.addComponent(true, ((NettyDataBuffer) dataBuffer).getNativeBuffer());\r\n    }\r\n    return new NettyDataBuffer(composite, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#join(List<? extends DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirect() {\r\n    return this.byteBufAllocator.isDirectBufferPooled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#isDirect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#toByteBuf(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}.\r\n * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}\r\n * if {@code dataBuffer} is a {@link NettyDataBuffer}; returns\r\n * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise.\r\n * @param dataBuffer the {@code DataBuffer} to return a {@code ByteBuf} for\r\n * @return the netty {@code ByteBuf}\r\n */\r\npublic static ByteBuf toByteBuf(DataBuffer dataBuffer) {\r\n    if (dataBuffer instanceof NettyDataBuffer nettyDataBuffer) {\r\n        return nettyDataBuffer.getNativeBuffer();\r\n    } else {\r\n        ByteBuffer byteBuffer = ByteBuffer.allocate(dataBuffer.readableByteCount());\r\n        dataBuffer.toByteBuffer(byteBuffer);\r\n        return Unpooled.wrappedBuffer(byteBuffer);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]