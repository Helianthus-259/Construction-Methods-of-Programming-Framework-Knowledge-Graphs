[
  {
    "head": "org.springframework.cglib.beans.Generator#setBean(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setBean(Object bean) {\r\n    this.bean = bean;\r\n    target = bean.getClass();\r\n    // SPRING PATCH BEGIN\r\n    setContextClass(target);\r\n    // SPRING PATCH END\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#setBean(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return target.getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(target);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object create() {\r\n    String name = target.getName();\r\n    setNamePrefix(name);\r\n    return super.create(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    Type targetType = Type.getType(target);\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), targetType, null, Constants.SOURCE_FILE);\r\n    ce.declare_field(Constants.ACC_FINAL | Constants.ACC_PRIVATE, FIELD_NAME, targetType, null);\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, CSTRUCT_OBJECT, null);\r\n    e.load_this();\r\n    e.super_invoke_constructor();\r\n    e.load_this();\r\n    e.load_arg(0);\r\n    e.checkcast(targetType);\r\n    e.putfield(FIELD_NAME);\r\n    e.return_value();\r\n    e.end_method();\r\n    PropertyDescriptor[] descriptors = ReflectUtils.getBeanProperties(target);\r\n    Method[] getters = ReflectUtils.getPropertyMethods(descriptors, true, false);\r\n    Method[] setters = ReflectUtils.getPropertyMethods(descriptors, false, true);\r\n    for (Method getter2 : getters) {\r\n        MethodInfo getter = ReflectUtils.getMethodInfo(getter2);\r\n        e = EmitUtils.begin_method(ce, getter, Constants.ACC_PUBLIC);\r\n        e.load_this();\r\n        e.getfield(FIELD_NAME);\r\n        e.invoke(getter);\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n    for (Method setter2 : setters) {\r\n        MethodInfo setter = ReflectUtils.getMethodInfo(setter2);\r\n        e = EmitUtils.begin_method(ce, setter, Constants.ACC_PUBLIC);\r\n        e.throw_exception(ILLEGAL_STATE_EXCEPTION, \"Bean is immutable\");\r\n        e.end_method();\r\n    }\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return ReflectUtils.newInstance(type, OBJECT_CLASSES, new Object[] { bean });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// TODO: optimize\r\n@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return firstInstance(instance.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  }
]