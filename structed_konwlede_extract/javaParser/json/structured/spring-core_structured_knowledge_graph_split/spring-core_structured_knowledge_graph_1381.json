[
  {
    "head": "org.springframework.util.SerializationUtils#deserialize(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Deserialize the byte array into an object.\r\n * @param bytes a serialized object\r\n * @return the result of deserializing the bytes\r\n * @deprecated This utility uses Java Object Serialization, which allows\r\n * arbitrary code to be run and is known for being the source of many Remote\r\n * Code Execution (RCE) vulnerabilities.\r\n * <p>Prefer the use of an external tool (that serializes to JSON, XML, or\r\n * any other format) which is regularly checked and updated for not allowing RCE.\r\n */\r\n@Deprecated\r\n@Nullable\r\npublic static Object deserialize(byte @Nullable [] bytes) {\r\n    if (bytes == null) {\r\n        return null;\r\n    }\r\n    try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {\r\n        return ois.readObject();\r\n    } catch (IOException ex) {\r\n        throw new IllegalArgumentException(\"Failed to deserialize object\", ex);\r\n    } catch (ClassNotFoundException ex) {\r\n        throw new IllegalStateException(\"Failed to deserialize object type\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtils#deserialize(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SerializationUtils#deserialize(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SerializationUtils#deserialize(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SerializationUtils#clone(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Clone the given object using Java Object Serialization.\r\n * @param object the object to clone\r\n * @param <T> the type of the object to clone\r\n * @return a clone (deep-copy) of the given object\r\n * @since 6.0\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <T extends Serializable> T clone(T object) {\r\n    Object result = SerializationUtils.deserialize(SerializationUtils.serialize(object));\r\n    Assert.state(result != null, \"Deserialized object must not be null\");\r\n    return (T) result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtils#clone(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SerializationUtils#clone(T)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SimpleIdGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicLong;\n\n/**\n * A simple {@link IdGenerator} that starts at 1, increments up to\n * {@link Long#MAX_VALUE}, and then rolls over.\n *\n * @author Rossen Stoyanchev\n * @since 4.1.5\n */\npublic class SimpleIdGenerator implements IdGenerator {\n\n\tprivate final AtomicLong leastSigBits = new AtomicLong();\n\n\n\t@Override\n\tpublic UUID generateId() {\n\t\treturn new UUID(0, this.leastSigBits.incrementAndGet());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SimpleIdGenerator#leastSigBits",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator#leastSigBits",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicLong",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator#generateId()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic UUID generateId() {\r\n    return new UUID(0, this.leastSigBits.incrementAndGet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SimpleIdGenerator#generateId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SimpleIdGenerator#generateId()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SimpleRouteMatcher",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SimpleRouteMatcher",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@code RouteMatcher} that delegates to a {@link PathMatcher}.\n *\n * <p><strong>Note:</strong> This implementation is not efficient since\n * {@code PathMatcher} treats paths and patterns as Strings. For more optimized\n * performance use the {@code PathPatternRouteMatcher} from {@code spring-web}\n * which enables use of parsed routes and patterns.\n *\n * @author Rossen Stoyanchev\n * @since 5.2\n */\npublic class SimpleRouteMatcher implements RouteMatcher {\n\n\tprivate final PathMatcher pathMatcher;\n\n\n\t/**\n\t * Create a new {@code SimpleRouteMatcher} for the given\n\t * {@link PathMatcher} delegate.\n\t */\n\tpublic SimpleRouteMatcher(PathMatcher pathMatcher) {\n\t\tAssert.notNull(pathMatcher, \"PathMatcher is required\");\n\t\tthis.pathMatcher = pathMatcher;\n\t}\n\n\t/**\n\t * Return the underlying {@link PathMatcher} delegate.\n\t */\n\tpublic PathMatcher getPathMatcher() {\n\t\treturn this.pathMatcher;\n\t}\n\n\n\t@Override\n\tpublic Route parseRoute(String route) {\n\t\treturn new DefaultRoute(route);\n\t}\n\n\t@Override\n\tpublic boolean isPattern(String route) {\n\t\treturn this.pathMatcher.isPattern(route);\n\t}\n\n\t@Override\n\tpublic String combine(String pattern1, String pattern2) {\n\t\treturn this.pathMatcher.combine(pattern1, pattern2);\n\t}\n\n\t@Override\n\tpublic boolean match(String pattern, Route route) {\n\t\treturn this.pathMatcher.match(pattern, route.value());\n\t}\n\n\t@Override\n\tpublic @Nullable Map<String, String> matchAndExtract(String pattern, Route route) {\n\t\tif (!match(pattern, route)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.pathMatcher.extractUriTemplateVariables(pattern, route.value());\n\t}\n\n\t@Override\n\tpublic Comparator<String> getPatternComparator(Route route) {\n\t\treturn this.pathMatcher.getPatternComparator(route.value());\n\t}\n\n\n\tprivate static class DefaultRoute implements Route {\n\n\t\tprivate final String path;\n\n\t\tDefaultRoute(String path) {\n\t\t\tthis.path = path;\n\t\t}\n\n\t\t@Override\n\t\tpublic String value() {\n\t\t\treturn this.path;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn value();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SimpleRouteMatcher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SimpleRouteMatcher#pathMatcher",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SimpleRouteMatcher#pathMatcher",
    "headType": "field",
    "relation": "haveType",
    "tail": "PathMatcher",
    "tailType": "type"
  }
]