[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.beans.PropertyEditorSupport;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.Assert;\n\n/**\n * Adapter that exposes a {@link java.beans.PropertyEditor} for any given\n * {@link org.springframework.core.convert.ConversionService} and specific target type.\n *\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic class ConvertingPropertyEditorAdapter extends PropertyEditorSupport {\n\n\tprivate final ConversionService conversionService;\n\n\tprivate final TypeDescriptor targetDescriptor;\n\n\tprivate final boolean canConvertToString;\n\n\n\t/**\n\t * Create a new ConvertingPropertyEditorAdapter for a given\n\t * {@link org.springframework.core.convert.ConversionService}\n\t * and the given target type.\n\t * @param conversionService the ConversionService to delegate to\n\t * @param targetDescriptor the target type to convert to\n\t */\n\tpublic ConvertingPropertyEditorAdapter(ConversionService conversionService, TypeDescriptor targetDescriptor) {\n\t\tAssert.notNull(conversionService, \"ConversionService must not be null\");\n\t\tAssert.notNull(targetDescriptor, \"TypeDescriptor must not be null\");\n\t\tthis.conversionService = conversionService;\n\t\tthis.targetDescriptor = targetDescriptor;\n\t\tthis.canConvertToString = conversionService.canConvert(this.targetDescriptor, TypeDescriptor.valueOf(String.class));\n\t}\n\n\n\t@Override\n\tpublic void setAsText(@Nullable String text) throws IllegalArgumentException {\n\t\tsetValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));\n\t}\n\n\t@Override\n\tpublic @Nullable String getAsText() {\n\t\tif (this.canConvertToString) {\n\t\t\treturn (String) this.conversionService.convert(getValue(), this.targetDescriptor, TypeDescriptor.valueOf(String.class));\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#targetDescriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#targetDescriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#canConvertToString",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#canConvertToString",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#setAsText(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAsText(@Nullable String text) throws IllegalArgumentException {\r\n    setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#setAsText(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#setAsText(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#getAsText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getAsText() {\r\n    if (this.canConvertToString) {\r\n        return (String) this.conversionService.convert(getValue(), this.targetDescriptor, TypeDescriptor.valueOf(String.class));\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#getAsText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#getAsText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter#getAsText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ConvertingPropertyEditorAdapter",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertyEditorSupport",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.DefaultConversionService",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.nio.charset.Charset;\nimport java.util.Currency;\nimport java.util.Locale;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.KotlinDetector;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.ConverterRegistry;\n\n/**\n * A specialization of {@link GenericConversionService} configured by default\n * with converters appropriate for most environments.\n *\n * <p>Designed for direct instantiation but also exposes the static\n * {@link #addDefaultConverters(ConverterRegistry)} utility method for ad-hoc\n * use against any {@code ConverterRegistry} instance.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @author Stephane Nicoll\n * @since 3.1\n */\npublic class DefaultConversionService extends GenericConversionService {\n\n\tprivate static volatile @Nullable DefaultConversionService sharedInstance;\n\n\n\t/**\n\t * Create a new {@code DefaultConversionService} with the set of\n\t * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}.\n\t */\n\tpublic DefaultConversionService() {\n\t\taddDefaultConverters(this);\n\t}\n\n\n\t/**\n\t * Return a shared default {@code ConversionService} instance,\n\t * lazily building it once needed.\n\t * <p><b>NOTE:</b> We highly recommend constructing individual\n\t * {@code ConversionService} instances for customization purposes.\n\t * This accessor is only meant as a fallback for code paths which\n\t * need simple type coercion but cannot access a longer-lived\n\t * {@code ConversionService} instance any other way.\n\t * @return the shared {@code ConversionService} instance (never {@code null})\n\t * @since 4.3.5\n\t */\n\tpublic static ConversionService getSharedInstance() {\n\t\tDefaultConversionService cs = sharedInstance;\n\t\tif (cs == null) {\n\t\t\tsynchronized (DefaultConversionService.class) {\n\t\t\t\tcs = sharedInstance;\n\t\t\t\tif (cs == null) {\n\t\t\t\t\tcs = new DefaultConversionService();\n\t\t\t\t\tsharedInstance = cs;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Add converters appropriate for most environments.\n\t * @param converterRegistry the registry of converters to add to\n\t * (must also be castable to ConversionService, for example, being a {@link ConfigurableConversionService})\n\t * @throws ClassCastException if the given ConverterRegistry could not be cast to a ConversionService\n\t */\n\tpublic static void addDefaultConverters(ConverterRegistry converterRegistry) {\n\t\taddScalarConverters(converterRegistry);\n\t\taddCollectionConverters(converterRegistry);\n\n\t\tconverterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));\n\t\tconverterRegistry.addConverter(new StringToTimeZoneConverter());\n\t\tconverterRegistry.addConverter(new ZoneIdToTimeZoneConverter());\n\t\tconverterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());\n\n\t\tconverterRegistry.addConverter(new ObjectToObjectConverter());\n\t\tconverterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));\n\t\tconverterRegistry.addConverter(new FallbackObjectToStringConverter());\n\t\tconverterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry));\n\t}\n\n\t/**\n\t * Add common collection converters.\n\t * @param converterRegistry the registry of converters to add to\n\t * (must also be castable to ConversionService, for example, being a {@link ConfigurableConversionService})\n\t * @throws ClassCastException if the given ConverterRegistry could not be cast to a ConversionService\n\t * @since 4.2.3\n\t */\n\tpublic static void addCollectionConverters(ConverterRegistry converterRegistry) {\n\t\tConversionService conversionService = (ConversionService) converterRegistry;\n\n\t\tconverterRegistry.addConverter(new ArrayToCollectionConverter(conversionService));\n\t\tconverterRegistry.addConverter(new CollectionToArrayConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new ArrayToArrayConverter(conversionService));\n\t\tconverterRegistry.addConverter(new CollectionToCollectionConverter(conversionService));\n\t\tconverterRegistry.addConverter(new MapToMapConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new ArrayToStringConverter(conversionService));\n\t\tconverterRegistry.addConverter(new StringToArrayConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new ArrayToObjectConverter(conversionService));\n\t\tconverterRegistry.addConverter(new ObjectToArrayConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new CollectionToStringConverter(conversionService));\n\t\tconverterRegistry.addConverter(new StringToCollectionConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new CollectionToObjectConverter(conversionService));\n\t\tconverterRegistry.addConverter(new ObjectToCollectionConverter(conversionService));\n\n\t\tconverterRegistry.addConverter(new StreamConverter(conversionService));\n\t}\n\n\tprivate static void addScalarConverters(ConverterRegistry converterRegistry) {\n\t\tconverterRegistry.addConverterFactory(new NumberToNumberConverterFactory());\n\n\t\tconverterRegistry.addConverterFactory(new StringToNumberConverterFactory());\n\t\tconverterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToCharacterConverter());\n\t\tconverterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new NumberToCharacterConverter());\n\t\tconverterRegistry.addConverterFactory(new CharacterToNumberFactory());\n\n\t\tconverterRegistry.addConverter(new StringToBooleanConverter());\n\t\tconverterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverterFactory(new StringToEnumConverterFactory());\n\t\tconverterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));\n\n\t\tconverterRegistry.addConverterFactory(new IntegerToEnumConverterFactory());\n\t\tconverterRegistry.addConverter(new EnumToIntegerConverter((ConversionService) converterRegistry));\n\n\t\tconverterRegistry.addConverter(new StringToLocaleConverter());\n\t\tconverterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToCharsetConverter());\n\t\tconverterRegistry.addConverter(Charset.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToCurrencyConverter());\n\t\tconverterRegistry.addConverter(Currency.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToPropertiesConverter());\n\t\tconverterRegistry.addConverter(new PropertiesToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToUUIDConverter());\n\t\tconverterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());\n\n\t\tconverterRegistry.addConverter(new StringToPatternConverter());\n\t\tconverterRegistry.addConverter(Pattern.class, String.class, new ObjectToStringConverter());\n\n\t\tif (KotlinDetector.isKotlinPresent()) {\n\t\t\tconverterRegistry.addConverter(new StringToRegexConverter());\n\t\t\tconverterRegistry.addConverter(kotlin.text.Regex.class, String.class, new ObjectToStringConverter());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.DefaultConversionService#sharedInstance",
    "tailType": "field"
  }
]