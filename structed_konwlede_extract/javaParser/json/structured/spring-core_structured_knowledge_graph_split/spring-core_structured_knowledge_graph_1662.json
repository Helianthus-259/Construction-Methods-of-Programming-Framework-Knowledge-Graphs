[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findAnnotationDeclaringClassForTypesWithSingleCandidateType() {\r\n    // no class-level annotation\r\n    List<Class<? extends Annotation>> transactionalCandidateList = Collections.singletonList(Transactional.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, NonAnnotatedInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, NonAnnotatedClass.class)).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, InheritedAnnotationInterface.class)).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, SubInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, InheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(transactionalCandidateList, SubInheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but findAnnotationDeclaringClassForTypes() should still find it on classes.\r\n    List<Class<? extends Annotation>> orderCandidateList = Collections.singletonList(Order.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, NonInheritedAnnotationInterface.class)).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, SubNonInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, NonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(orderCandidateList, SubNonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithSingleCandidateType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes() {\r\n    List<Class<? extends Annotation>> candidates = asList(Transactional.class, Order.class);\r\n    // no class-level annotation\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, NonAnnotatedInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, NonAnnotatedClass.class)).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, InheritedAnnotationInterface.class)).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, SubInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, InheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, SubInheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but findAnnotationDeclaringClassForTypes() should still find it on classes.\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, NonInheritedAnnotationInterface.class)).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, SubNonInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, NonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, SubNonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    // class hierarchy mixed with @Transactional and @Order declarations\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, TransactionalClass.class)).isEqualTo(TransactionalClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, TransactionalAndOrderedClass.class)).isEqualTo(TransactionalAndOrderedClass.class);\r\n    assertThat(findAnnotationDeclaringClassForTypes(candidates, SubTransactionalAndOrderedClass.class)).isEqualTo(TransactionalAndOrderedClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForTypesWithMultipleCandidateTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotationDeclaredLocallyForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, NonAnnotatedInterface.class)).isFalse();\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, NonAnnotatedClass.class)).isFalse();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, InheritedAnnotationInterface.class)).isTrue();\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, SubInheritedAnnotationInterface.class)).isFalse();\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, InheritedAnnotationClass.class)).isTrue();\r\n    assertThat(isAnnotationDeclaredLocally(Transactional.class, SubInheritedAnnotationClass.class)).isFalse();\r\n    // non-inherited class-level annotation; note: @Order is not inherited\r\n    assertThat(isAnnotationDeclaredLocally(Order.class, NonInheritedAnnotationInterface.class)).isTrue();\r\n    assertThat(isAnnotationDeclaredLocally(Order.class, SubNonInheritedAnnotationInterface.class)).isFalse();\r\n    assertThat(isAnnotationDeclaredLocally(Order.class, NonInheritedAnnotationClass.class)).isTrue();\r\n    assertThat(isAnnotationDeclaredLocally(Order.class, SubNonInheritedAnnotationClass.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationDeclaredLocallyForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotationInheritedForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(isAnnotationInherited(Transactional.class, NonAnnotatedInterface.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Transactional.class, NonAnnotatedClass.class)).isFalse();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(isAnnotationInherited(Transactional.class, InheritedAnnotationInterface.class)).isFalse();\r\n    // isAnnotationInherited() does not currently traverse interface hierarchies.\r\n    // Thus the following, though perhaps counterintuitive, must be false:\r\n    assertThat(isAnnotationInherited(Transactional.class, SubInheritedAnnotationInterface.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Transactional.class, InheritedAnnotationClass.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Transactional.class, SubInheritedAnnotationClass.class)).isTrue();\r\n    // non-inherited class-level annotation; note: @Order is not inherited\r\n    assertThat(isAnnotationInherited(Order.class, NonInheritedAnnotationInterface.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Order.class, SubNonInheritedAnnotationInterface.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Order.class, NonInheritedAnnotationClass.class)).isFalse();\r\n    assertThat(isAnnotationInherited(Order.class, SubNonInheritedAnnotationClass.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationInheritedForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotationMetaPresentForPlainType() {\r\n    assertThat(isAnnotationMetaPresent(Order.class, Documented.class)).isTrue();\r\n    assertThat(isAnnotationMetaPresent(ParametersAreNonnullByDefault.class, Documented.class)).isTrue();\r\n    assertThat(isAnnotationMetaPresent(ParametersAreNonnullByDefault.class, Nonnull.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#isAnnotationMetaPresentForPlainType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributesWithoutAttributeAliases() {\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    AnnotationAttributes attributes = (AnnotationAttributes) getAnnotationAttributes(component);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.getString(VALUE)).as(\"value attribute: \").isEqualTo(\"webController\");\r\n    assertThat(attributes.annotationType()).isEqualTo(Component.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithNestedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributesWithNestedAnnotations() {\r\n    ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class);\r\n    assertThat(componentScan).isNotNull();\r\n    AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.annotationType()).isEqualTo(ComponentScan.class);\r\n    Filter[] filters = attributes.getAnnotationArray(\"excludeFilters\", Filter.class);\r\n    assertThat(filters).isNotNull();\r\n    List<String> patterns = stream(filters).map(Filter::pattern).collect(toList());\r\n    assertThat(patterns).isEqualTo(asList(\"*Foo\", \"*Bar\"));\r\n}",
    "tailType": "method_code"
  }
]