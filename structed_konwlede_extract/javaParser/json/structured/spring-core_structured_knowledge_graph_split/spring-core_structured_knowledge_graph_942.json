[
  {
    "head": "org.springframework.core.env.ComparisonPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ComparisonPropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "StubPropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.PropertySources",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.PropertySources",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Holder containing one or more {@link PropertySource} objects.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see PropertySource\n */\npublic interface PropertySources extends Iterable<PropertySource<?>> {\n\n\t/**\n\t * Return a sequential {@link Stream} containing the property sources.\n\t * @since 5.1\n\t */\n\tdefault Stream<PropertySource<?>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\t/**\n\t * Return whether a property source with the given name is contained.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\tboolean contains(String name);\n\n\t/**\n\t * Return the property source with the given name, {@code null} if not found.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\t@Nullable PropertySource<?> get(String name);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.PropertySources#stream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a sequential {@link Stream} containing the property sources.\r\n * @since 5.1\r\n */\r\ndefault Stream<PropertySource<?>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySources#stream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySources#contains(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether a property source with the given name is contained.\r\n * @param name the {@linkplain PropertySource#getName() name of the property source} to find\r\n */\r\nboolean contains(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySources#contains(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySources#get(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property source with the given name, {@code null} if not found.\r\n * @param name the {@linkplain PropertySource#getName() name of the property source} to find\r\n */\r\n@Nullable\r\nPropertySource<?> get(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySources#get(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySources#get(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySources",
    "headType": "class",
    "relation": "extend",
    "tail": "Iterable",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@link PropertyResolver} implementation that resolves property values against\n * an underlying set of {@link PropertySources}.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see PropertySource\n * @see PropertySources\n * @see AbstractEnvironment\n */\npublic class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\n\tprivate final @Nullable PropertySources propertySources;\n\n\n\t/**\n\t * Create a new resolver against the given property sources.\n\t * @param propertySources the set of {@link PropertySource} objects to use\n\t */\n\tpublic PropertySourcesPropertyResolver(@Nullable PropertySources propertySources) {\n\t\tthis.propertySources = propertySources;\n\t}\n\n\n\t@Override\n\tpublic boolean containsProperty(String key) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tif (propertySource.containsProperty(key)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic @Nullable String getProperty(String key) {\n\t\treturn getProperty(key, String.class, true);\n\t}\n\n\t@Override\n\tpublic <T> @Nullable T getProperty(String key, Class<T> targetValueType) {\n\t\treturn getProperty(key, targetValueType, true);\n\t}\n\n\t@Override\n\tprotected @Nullable String getPropertyAsRawString(String key) {\n\t\treturn getProperty(key, String.class, false);\n\t}\n\n\tprotected <T> @Nullable T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Searching for key '\" + key + \"' in PropertySource '\" +\n\t\t\t\t\t\t\tpropertySource.getName() + \"'\");\n\t\t\t\t}\n\t\t\t\tObject value = propertySource.getProperty(key);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (resolveNestedPlaceholders) {\n\t\t\t\t\t\tif (value instanceof String string) {\n\t\t\t\t\t\t\tvalue = resolveNestedPlaceholders(string);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((value instanceof CharSequence cs) && (String.class.equals(targetValueType) ||\n\t\t\t\t\t\t\t\tCharSequence.class.equals(targetValueType))) {\n\t\t\t\t\t\t\tvalue = resolveNestedPlaceholders(cs.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlogKeyFound(key, propertySource, value);\n\t\t\t\t\treturn convertValueIfNecessary(value, targetValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Could not find key '\" + key + \"' in any property source\");\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Log the given key as found in the given {@link PropertySource}, resulting in\n\t * the given value.\n\t * <p>The default implementation writes a debug log message with key and source.\n\t * As of 4.3.3, this does not log the value anymore in order to avoid accidental\n\t * logging of sensitive settings. Subclasses may override this method to change\n\t * the log level and/or log message, including the property's value if desired.\n\t * @param key the key found\n\t * @param propertySource the {@code PropertySource} that the key has been found in\n\t * @param value the corresponding value\n\t * @since 4.3.1\n\t */\n\tprotected void logKeyFound(String key, PropertySource<?> propertySource, Object value) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found key '\" + key + \"' in PropertySource '\" + propertySource.getName() +\n\t\t\t\t\t\"' with value of type \" + value.getClass().getSimpleName());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#propertySources",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#propertySources",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertySources",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean containsProperty(String key) {\r\n    if (this.propertySources != null) {\r\n        for (PropertySource<?> propertySource : this.propertySources) {\r\n            if (propertySource.containsProperty(key)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#containsProperty(String)",
    "tailType": "method"
  }
]