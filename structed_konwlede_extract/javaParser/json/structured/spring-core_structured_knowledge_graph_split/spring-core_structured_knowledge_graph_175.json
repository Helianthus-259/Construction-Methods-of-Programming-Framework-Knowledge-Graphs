[
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.FieldHintPredicate#test(RuntimeHints)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate#test(RuntimeHints)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate#memberCategoryMatch(TypeHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"removal\")\r\nprivate boolean memberCategoryMatch(TypeHint typeHint) {\r\n    if (Modifier.isPublic(this.field.getModifiers())) {\r\n        return typeHint.getMemberCategories().contains(MemberCategory.ACCESS_PUBLIC_FIELDS) || typeHint.getMemberCategories().contains(MemberCategory.PUBLIC_FIELDS);\r\n    } else {\r\n        return typeHint.getMemberCategories().contains(MemberCategory.ACCESS_DECLARED_FIELDS) || typeHint.getMemberCategories().contains(MemberCategory.DECLARED_FIELDS);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.FieldHintPredicate#memberCategoryMatch(TypeHint)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate#memberCategoryMatch(TypeHint)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate#exactMatch(TypeHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean exactMatch(TypeHint typeHint) {\r\n    return typeHint.fields().anyMatch(fieldHint -> this.field.getName().equals(fieldHint.getName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.FieldHintPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.FieldHintPredicate#exactMatch(TypeHint)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.BooleanComparatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link BooleanComparator}.\n *\n * @author Keith Donald\n * @author Chris Beams\n * @author Phillip Webb\n * @author Eugene Rabii\n */\nclass BooleanComparatorTests {\n\n\t@Test\n\tvoid shouldCompareWithTrueLow() {\n\t\tComparator<Boolean> c = new BooleanComparator(true);\n\t\tassertThat(c.compare(true, false)).isLessThan(0);\n\t\tassertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareWithTrueHigh() {\n\t\tComparator<Boolean> c = new BooleanComparator(false);\n\t\tassertThat(c.compare(true, false)).isGreaterThan(0);\n\t\tassertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareFromTrueLow() {\n\t\tComparator<Boolean> c = BooleanComparator.TRUE_LOW;\n\t\tassertThat(c.compare(true, false)).isLessThan(0);\n\t\tassertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareFromTrueHigh() {\n\t\tComparator<Boolean> c = BooleanComparator.TRUE_HIGH;\n\t\tassertThat(c.compare(true, false)).isGreaterThan(0);\n\t\tassertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueLow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareWithTrueLow() {\r\n    Comparator<Boolean> c = new BooleanComparator(true);\r\n    assertThat(c.compare(true, false)).isLessThan(0);\r\n    assertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueLow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueLow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueHigh()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareWithTrueHigh() {\r\n    Comparator<Boolean> c = new BooleanComparator(false);\r\n    assertThat(c.compare(true, false)).isGreaterThan(0);\r\n    assertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueHigh()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareWithTrueHigh()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueLow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareFromTrueLow() {\r\n    Comparator<Boolean> c = BooleanComparator.TRUE_LOW;\r\n    assertThat(c.compare(true, false)).isLessThan(0);\r\n    assertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueLow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueLow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueHigh()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareFromTrueHigh() {\r\n    Comparator<Boolean> c = BooleanComparator.TRUE_HIGH;\r\n    assertThat(c.compare(true, false)).isGreaterThan(0);\r\n    assertThat(c.compare(Boolean.TRUE, Boolean.TRUE)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  }
]