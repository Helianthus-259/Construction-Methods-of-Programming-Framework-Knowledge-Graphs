[
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerType(TypeReference,Consumer<TypeHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerType(TypeReference,MemberCategory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the specified type\r\n * using the specified {@link MemberCategory MemberCategories}.\r\n * @param type the type to customize\r\n * @param memberCategories the member categories to apply\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerType(TypeReference type, MemberCategory... memberCategories) {\r\n    return registerType(type, TypeHint.builtWith(memberCategories));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerType(TypeReference,MemberCategory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerType(Class<?>,Consumer<TypeHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the specified type.\r\n * @param type the type to customize\r\n * @param typeHint a builder to further customize hints for that type\r\n * @return {@code this}, to facilitate method chaining\r\n * @see #registerType(Class, MemberCategory...)\r\n */\r\npublic ReflectionHints registerType(Class<?> type, Consumer<TypeHint.Builder> typeHint) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    if (type.getCanonicalName() != null) {\r\n        registerType(TypeReference.of(type), typeHint);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerType(Class<?>,Consumer<TypeHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerType(Class<?>,MemberCategory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the specified type\r\n * using the specified {@link MemberCategory MemberCategories}.\r\n * @param type the type to customize\r\n * @param memberCategories the member categories to apply\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerType(Class<?> type, MemberCategory... memberCategories) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    if (type.getCanonicalName() != null) {\r\n        registerType(TypeReference.of(type), memberCategories);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerType(Class<?>,MemberCategory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerTypeIfPresent(ClassLoader,String,Consumer<TypeHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the specified type if it\r\n * is available using the specified {@link ClassLoader}.\r\n * @param classLoader the classloader to use to check if the type is present\r\n * @param typeName the type to customize\r\n * @param typeHint a builder to further customize hints for that type\r\n * @return {@code this}, to facilitate method chaining\r\n * @see #registerTypeIfPresent(ClassLoader, String, MemberCategory...)\r\n */\r\npublic ReflectionHints registerTypeIfPresent(@Nullable ClassLoader classLoader, String typeName, Consumer<TypeHint.Builder> typeHint) {\r\n    if (ClassUtils.isPresent(typeName, classLoader)) {\r\n        registerType(TypeReference.of(typeName), typeHint);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerTypeIfPresent(ClassLoader,String,Consumer<TypeHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerTypeIfPresent(ClassLoader,String,MemberCategory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the specified type if it\r\n * is available using the specified {@link ClassLoader}.\r\n * @param classLoader the classloader to use to check if the type is present\r\n * @param typeName the type to customize\r\n * @param memberCategories the member categories to apply\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerTypeIfPresent(@Nullable ClassLoader classLoader, String typeName, MemberCategory... memberCategories) {\r\n    return registerTypeIfPresent(classLoader, typeName, TypeHint.builtWith(memberCategories));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerTypeIfPresent(ClassLoader,String,MemberCategory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerTypes(Iterable<TypeReference>,Consumer<TypeHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for the types defined by the\r\n * specified list of {@link TypeReference type references}. The specified\r\n * {@code typeHint} consumer is invoked for each type.\r\n * @param types the types to customize\r\n * @param typeHint a builder to further customize hints for each type\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerTypes(Iterable<TypeReference> types, Consumer<TypeHint.Builder> typeHint) {\r\n    types.forEach(type -> registerType(type, typeHint));\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerTypes(Iterable<TypeReference>,Consumer<TypeHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerForInterfaces(Class<?>,Consumer<TypeHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register or customize reflection hints for all the interfaces implemented by\r\n * the given type and its parent classes, ignoring the common Java language interfaces.\r\n * The specified {@code typeHint} consumer is invoked for each type.\r\n * @param type the type to consider\r\n * @param typeHint a builder to further customize hints for each type\r\n * @return {@code this}, to facilitate method chaining\r\n * @since 6.2\r\n */\r\npublic ReflectionHints registerForInterfaces(Class<?> type, Consumer<TypeHint.Builder> typeHint) {\r\n    Class<?> currentClass = type;\r\n    while (currentClass != null && currentClass != Object.class) {\r\n        for (Class<?> interfaceType : currentClass.getInterfaces()) {\r\n            if (!ClassUtils.isJavaLanguageInterface(interfaceType)) {\r\n                this.registerType(interfaceType, typeHint);\r\n                registerForInterfaces(interfaceType, typeHint);\r\n            }\r\n        }\r\n        currentClass = currentClass.getSuperclass();\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerForInterfaces(Class<?>,Consumer<TypeHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerField(Field)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflective field access on the specified {@link Field}.\r\n * @param field the field that requires reflective access\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerField(Field field) {\r\n    return registerType(TypeReference.of(field.getDeclaringClass()), typeHint -> typeHint.withField(field.getName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerField(Field)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerConstructor(Constructor<?>,ExecutableMode)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the specified {@link Constructor},\r\n * using the specified {@link ExecutableMode}.\r\n * @param constructor the constructor that requires reflection\r\n * @param mode the requested mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerConstructor(Constructor<?> constructor, ExecutableMode mode) {\r\n    return registerType(TypeReference.of(constructor.getDeclaringClass()), typeHint -> typeHint.withConstructor(mapParameters(constructor), mode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHints#registerConstructor(Constructor<?>,ExecutableMode)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHints#registerMethod(Method,ExecutableMode)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the specified {@link Method},\r\n * using the specified {@link ExecutableMode}.\r\n * @param method the method that requires reflection\r\n * @param mode the requested mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ReflectionHints registerMethod(Method method, ExecutableMode mode) {\r\n    return registerType(TypeReference.of(method.getDeclaringClass()), typeHint -> typeHint.withMethod(method.getName(), mapParameters(method), mode));\r\n}",
    "tailType": "method_code"
  }
]