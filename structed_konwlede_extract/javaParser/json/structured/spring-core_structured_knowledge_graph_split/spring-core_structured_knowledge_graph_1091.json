[
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#trace(Object,Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#trace(Object,Throwable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#getLogger(Predicate<Log>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Log getLogger(Predicate<Log> predicate) {\r\n    for (Log logger : this.loggers) {\r\n        if (predicate.test(logger)) {\r\n            return logger;\r\n        }\r\n    }\r\n    return NO_OP_LOG;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#getLogger(Predicate<Log>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.LogAccessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.function.Supplier;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\n/**\n * A convenient accessor for Commons Logging, providing not only\n * {@code CharSequence} based log methods but also {@code Supplier}\n * based variants for use with Java 8 lambda expressions.\n *\n * @author Juergen Hoeller\n * @since 5.2\n */\npublic class LogAccessor {\n\n\tprivate final Log log;\n\n\n\t/**\n\t * Create a new accessor for the given Commons Log.\n\t * @see LogFactory#getLog(Class)\n\t * @see LogFactory#getLog(String)\n\t */\n\tpublic LogAccessor(Log log) {\n\t\tthis.log = log;\n\t}\n\n\t/**\n\t * Create a new accessor for the specified Commons Log category.\n\t * @see LogFactory#getLog(Class)\n\t */\n\tpublic LogAccessor(Class<?> logCategory) {\n\t\tthis.log = LogFactory.getLog(logCategory);\n\t}\n\n\t/**\n\t * Create a new accessor for the specified Commons Log category.\n\t * @see LogFactory#getLog(String)\n\t */\n\tpublic LogAccessor(String logCategory) {\n\t\tthis.log = LogFactory.getLog(logCategory);\n\t}\n\n\n\t/**\n\t * Return the target Commons Log.\n\t */\n\tpublic final Log getLog() {\n\t\treturn this.log;\n\t}\n\n\n\t// Log level checks\n\n\t/**\n\t * Is fatal logging currently enabled?\n\t */\n\tpublic boolean isFatalEnabled() {\n\t\treturn this.log.isFatalEnabled();\n\t}\n\n\t/**\n\t * Is error logging currently enabled?\n\t */\n\tpublic boolean isErrorEnabled() {\n\t\treturn this.log.isErrorEnabled();\n\t}\n\n\t/**\n\t * Is warn logging currently enabled?\n\t */\n\tpublic boolean isWarnEnabled() {\n\t\treturn this.log.isWarnEnabled();\n\t}\n\n\t/**\n\t * Is info logging currently enabled?\n\t */\n\tpublic boolean isInfoEnabled() {\n\t\treturn this.log.isInfoEnabled();\n\t}\n\n\t/**\n\t * Is debug logging currently enabled?\n\t */\n\tpublic boolean isDebugEnabled() {\n\t\treturn this.log.isDebugEnabled();\n\t}\n\n\t/**\n\t * Is trace logging currently enabled?\n\t */\n\tpublic boolean isTraceEnabled() {\n\t\treturn this.log.isTraceEnabled();\n\t}\n\n\n\t// Plain log methods\n\n\t/**\n\t * Log a message with fatal log level.\n\t * @param message the message to log\n\t */\n\tpublic void fatal(CharSequence message) {\n\t\tthis.log.fatal(message);\n\t}\n\n\t/**\n\t * Log an error with fatal log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void fatal(Throwable cause, CharSequence message) {\n\t\tthis.log.fatal(message, cause);\n\t}\n\n\t/**\n\t * Log a message with error log level.\n\t * @param message the message to log\n\t */\n\tpublic void error(CharSequence message) {\n\t\tthis.log.error(message);\n\t}\n\n\t/**\n\t * Log an error with error log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void error(Throwable cause, CharSequence message) {\n\t\tthis.log.error(message, cause);\n\t}\n\n\t/**\n\t * Log a message with warn log level.\n\t * @param message the message to log\n\t */\n\tpublic void warn(CharSequence message) {\n\t\tthis.log.warn(message);\n\t}\n\n\t/**\n\t * Log an error with warn log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void warn(Throwable cause, CharSequence message) {\n\t\tthis.log.warn(message, cause);\n\t}\n\n\t/**\n\t * Log a message with info log level.\n\t * @param message the message to log\n\t */\n\tpublic void info(CharSequence message) {\n\t\tthis.log.info(message);\n\t}\n\n\t/**\n\t * Log an error with info log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void info(Throwable cause, CharSequence message) {\n\t\tthis.log.info(message, cause);\n\t}\n\n\t/**\n\t * Log a message with debug log level.\n\t * @param message the message to log\n\t */\n\tpublic void debug(CharSequence message) {\n\t\tthis.log.debug(message);\n\t}\n\n\t/**\n\t * Log an error with debug log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void debug(Throwable cause, CharSequence message) {\n\t\tthis.log.debug(message, cause);\n\t}\n\n\t/**\n\t * Log a message with trace log level.\n\t * @param message the message to log\n\t */\n\tpublic void trace(CharSequence message) {\n\t\tthis.log.trace(message);\n\t}\n\n\t/**\n\t * Log an error with trace log level.\n\t * @param cause the exception to log\n\t * @param message the message to log\n\t */\n\tpublic void trace(Throwable cause, CharSequence message) {\n\t\tthis.log.trace(message, cause);\n\t}\n\n\n\t// Supplier-based log methods\n\n\t/**\n\t * Log a message with fatal log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void fatal(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isFatalEnabled()) {\n\t\t\tthis.log.fatal(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with fatal log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void fatal(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isFatalEnabled()) {\n\t\t\tthis.log.fatal(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n\t/**\n\t * Log a message with error log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void error(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isErrorEnabled()) {\n\t\t\tthis.log.error(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with error log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void error(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isErrorEnabled()) {\n\t\t\tthis.log.error(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n\t/**\n\t * Log a message with warn log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void warn(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isWarnEnabled()) {\n\t\t\tthis.log.warn(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with warn log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void warn(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isWarnEnabled()) {\n\t\t\tthis.log.warn(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n\t/**\n\t * Log a message with info log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void info(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isInfoEnabled()) {\n\t\t\tthis.log.info(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with info log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void info(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isInfoEnabled()) {\n\t\t\tthis.log.info(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n\t/**\n\t * Log a message with debug log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void debug(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isDebugEnabled()) {\n\t\t\tthis.log.debug(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with debug log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void debug(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isDebugEnabled()) {\n\t\t\tthis.log.debug(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n\t/**\n\t * Log a message with trace log level.\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void trace(Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isTraceEnabled()) {\n\t\t\tthis.log.trace(LogMessage.of(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Log an error with trace log level.\n\t * @param cause the exception to log\n\t * @param messageSupplier a lazy supplier for the message to log\n\t */\n\tpublic void trace(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\n\t\tif (this.log.isTraceEnabled()) {\n\t\t\tthis.log.trace(LogMessage.of(messageSupplier), cause);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.LogAccessor#log",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#log",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#getLog()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the target Commons Log.\r\n */\r\npublic final Log getLog() {\r\n    return this.log;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#getLog()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isFatalEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "// Log level checks\r\n/**\r\n * Is fatal logging currently enabled?\r\n */\r\npublic boolean isFatalEnabled() {\r\n    return this.log.isFatalEnabled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isFatalEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isErrorEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is error logging currently enabled?\r\n */\r\npublic boolean isErrorEnabled() {\r\n    return this.log.isErrorEnabled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isErrorEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isWarnEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is warn logging currently enabled?\r\n */\r\npublic boolean isWarnEnabled() {\r\n    return this.log.isWarnEnabled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isWarnEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isInfoEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is info logging currently enabled?\r\n */\r\npublic boolean isInfoEnabled() {\r\n    return this.log.isInfoEnabled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isInfoEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isDebugEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is debug logging currently enabled?\r\n */\r\npublic boolean isDebugEnabled() {\r\n    return this.log.isDebugEnabled();\r\n}",
    "tailType": "method_code"
  }
]