[
  {
    "head": "org.springframework.core.io.PathResourceTests#getPathForDir()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileExists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fileExists() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#fileExists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileExists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#dirExists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid dirExists() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#dirExists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#dirExists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileDoesNotExist()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fileDoesNotExist() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.exists()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#fileDoesNotExist()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileDoesNotExist()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileIsReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fileIsReadable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isReadable()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#fileIsReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileIsReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#nonExistingFileIsNotReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nonExistingFileIsNotReadable() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#nonExistingFileIsNotReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#nonExistingFileIsNotReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#directoryIsNotReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directoryIsNotReadable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isReadable()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#directoryIsNotReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#directoryIsNotReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInputStream() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream());\r\n    assertThat(bytes).hasSizeGreaterThan(0);\r\n}",
    "tailType": "method_code"
  }
]