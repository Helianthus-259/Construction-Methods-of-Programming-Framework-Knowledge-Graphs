[
  {
    "head": "org.springframework.util.NestedPlaceholderPart#resolve(PartResolutionContext)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String resolve(PartResolutionContext resolutionContext) {\r\n    String resolvedKey = Part.resolveAll(this.keyParts, resolutionContext);\r\n    String value = resolveRecursively(resolutionContext, resolvedKey);\r\n    if (value != null) {\r\n        return value;\r\n    } else if (this.defaultParts != null) {\r\n        return Part.resolveAll(this.defaultParts, resolutionContext);\r\n    }\r\n    return resolutionContext.handleUnresolvablePlaceholder(resolvedKey, text());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NestedPlaceholderPart",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NestedPlaceholderPart#resolve(PartResolutionContext)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NestedPlaceholderPart#resolve(PartResolutionContext)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NestedPlaceholderPart",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractPart",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PlaceholderResolutionException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Thrown when the resolution of placeholder failed. This exception provides\n * the placeholder as well as the hierarchy of values that led to the issue.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\n@SuppressWarnings(\"serial\")\npublic class PlaceholderResolutionException extends IllegalArgumentException {\n\n\tprivate final String reason;\n\n\tprivate final String placeholder;\n\n\tprivate final List<String> values;\n\n\n\t/**\n\t * Create an exception using the specified reason for its message.\n\t * @param reason the reason for the exception, should contain the placeholder\n\t * @param placeholder the placeholder\n\t * @param value the original expression that led to the issue if available\n\t */\n\tPlaceholderResolutionException(String reason, String placeholder, @Nullable String value) {\n\t\tthis(reason, placeholder, (value != null ? List.of(value) : Collections.emptyList()));\n\t}\n\n\tprivate PlaceholderResolutionException(String reason, String placeholder, List<String> values) {\n\t\tsuper(buildMessage(reason, values));\n\t\tthis.reason = reason;\n\t\tthis.placeholder = placeholder;\n\t\tthis.values = values;\n\t}\n\n\tprivate static String buildMessage(String reason, List<String> values) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(reason);\n\t\tif (!CollectionUtils.isEmpty(values)) {\n\t\t\tString valuesChain = values.stream().map(value -> \"\\\"\" + value + \"\\\"\")\n\t\t\t\t\t.collect(Collectors.joining(\" <-- \"));\n\t\t\tsb.append(\" in value %s\".formatted(valuesChain));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\n\t/**\n\t * Return a {@link PlaceholderResolutionException} that provides\n\t * an additional parent value.\n\t * @param value the parent value to add\n\t * @return a new exception with the parent value added\n\t */\n\tPlaceholderResolutionException withValue(String value) {\n\t\tList<String> allValues = new ArrayList<>(this.values);\n\t\tallValues.add(value);\n\t\treturn new PlaceholderResolutionException(this.reason, this.placeholder, allValues);\n\t}\n\n\t/**\n\t * Return the placeholder that could not be resolved.\n\t * @return the unresolvable placeholder\n\t */\n\tpublic String getPlaceholder() {\n\t\treturn this.placeholder;\n\t}\n\n\t/**\n\t * Return a contextualized list of the resolution attempts that led to this\n\t * exception, where the first element is the value that generated this\n\t * exception.\n\t * @return the stack of values that led to this exception\n\t */\n\tpublic List<String> getValues() {\n\t\treturn this.values;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.PlaceholderResolutionException#reason",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#reason",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.PlaceholderResolutionException#placeholder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#placeholder",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.PlaceholderResolutionException#values",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#values",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#buildMessage(String,List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String buildMessage(String reason, List<String> values) {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(reason);\r\n    if (!CollectionUtils.isEmpty(values)) {\r\n        String valuesChain = values.stream().map(value -> \"\\\"\" + value + \"\\\"\").collect(Collectors.joining(\" <-- \"));\r\n        sb.append(\" in value %s\".formatted(valuesChain));\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderResolutionException#buildMessage(String,List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#withValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link PlaceholderResolutionException} that provides\r\n * an additional parent value.\r\n * @param value the parent value to add\r\n * @return a new exception with the parent value added\r\n */\r\nPlaceholderResolutionException withValue(String value) {\r\n    List<String> allValues = new ArrayList<>(this.values);\r\n    allValues.add(value);\r\n    return new PlaceholderResolutionException(this.reason, this.placeholder, allValues);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderResolutionException#withValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException#getPlaceholder()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the placeholder that could not be resolved.\r\n * @return the unresolvable placeholder\r\n */\r\npublic String getPlaceholder() {\r\n    return this.placeholder;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderResolutionException#getPlaceholder()",
    "tailType": "method"
  }
]