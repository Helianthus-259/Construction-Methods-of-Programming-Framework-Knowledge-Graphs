[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingReturnsAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenAliasPairReturnsMirrors()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMirrorSetWhenAliasPairReturnsMirrors() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(AliasPair.class).get(0);\r\n    MirrorSets mirrorSets = mapping.getMirrorSets();\r\n    assertThat(mirrorSets.size()).isEqualTo(1);\r\n    assertThat(mirrorSets.get(0).size()).isEqualTo(2);\r\n    assertThat(mirrorSets.get(0).get(0).getName()).isEqualTo(\"a\");\r\n    assertThat(mirrorSets.get(0).get(1).getName()).isEqualTo(\"b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenAliasPairReturnsMirrors()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenAliasPairReturnsMirrors()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMirrorSetWhenImplicitMirrorsReturnsMirrors() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(ImplicitMirrors.class).get(0);\r\n    MirrorSets mirrorSets = mapping.getMirrorSets();\r\n    assertThat(mirrorSets.size()).isEqualTo(1);\r\n    assertThat(mirrorSets.get(0).size()).isEqualTo(2);\r\n    assertThat(mirrorSets.get(0).get(0).getName()).isEqualTo(\"a\");\r\n    assertThat(mirrorSets.get(0).get(1).getName()).isEqualTo(\"b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenImplicitMirrorsReturnsMirrors()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMirrorSetWhenThreeDeepReturnsMirrors() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class);\r\n    AnnotationTypeMapping mappingA = mappings.get(0);\r\n    MirrorSets mirrorSetsA = mappingA.getMirrorSets();\r\n    assertThat(mirrorSetsA.size()).isEqualTo(2);\r\n    assertThat(getNames(mirrorSetsA.get(0))).containsExactly(\"a1\", \"a2\", \"a3\");\r\n    AnnotationTypeMapping mappingB = mappings.get(1);\r\n    MirrorSets mirrorSetsB = mappingB.getMirrorSets();\r\n    assertThat(mirrorSetsB.size()).isEqualTo(1);\r\n    assertThat(getNames(mirrorSetsB.get(0))).containsExactly(\"b1\", \"b2\");\r\n    AnnotationTypeMapping mappingC = mappings.get(2);\r\n    MirrorSets mirrorSetsC = mappingC.getMirrorSets();\r\n    assertThat(mirrorSetsC.size()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMirrorSetWhenThreeDeepReturnsMirrors()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenThreeDeepReturnsMappedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasMappingWhenThreeDeepReturnsMappedAttributes() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class);\r\n    AnnotationTypeMapping mappingA = mappings.get(0);\r\n    assertThat(getAliasMapping(mappingA, 0)).isNull();\r\n    assertThat(getAliasMapping(mappingA, 1)).isNull();\r\n    assertThat(getAliasMapping(mappingA, 2)).isNull();\r\n    assertThat(getAliasMapping(mappingA, 3)).isNull();\r\n    assertThat(getAliasMapping(mappingA, 4)).isNull();\r\n    AnnotationTypeMapping mappingB = mappings.get(1);\r\n    assertThat(getAliasMapping(mappingB, 0).getName()).isEqualTo(\"a1\");\r\n    assertThat(getAliasMapping(mappingB, 1).getName()).isEqualTo(\"a1\");\r\n    AnnotationTypeMapping mappingC = mappings.get(2);\r\n    assertThat(getAliasMapping(mappingC, 0).getName()).isEqualTo(\"a1\");\r\n    assertThat(getAliasMapping(mappingC, 1).getName()).isEqualTo(\"a4\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenThreeDeepReturnsMappedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingWhenThreeDeepReturnsMappedAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(DefinedAttributes.class).get(1);\r\n    assertThat(getAliasMapping(mapping, 0)).isNull();\r\n    assertThat(getAliasMapping(mapping, 1).getName()).isEqualTo(\"value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingsWhenHasDefinedAttributesReturnsMappedAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMirrorsWhenAliasPairResolves() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(AliasPair.class).get(0);\r\n    Method[] resolvedA = resolveMirrorSets(mapping, WithAliasPairA.class, AliasPair.class);\r\n    assertThat(resolvedA[0].getName()).isEqualTo(\"a\");\r\n    assertThat(resolvedA[1].getName()).isEqualTo(\"a\");\r\n    Method[] resolvedB = resolveMirrorSets(mapping, WithAliasPairB.class, AliasPair.class);\r\n    assertThat(resolvedB[0].getName()).isEqualTo(\"b\");\r\n    assertThat(resolvedB[1].getName()).isEqualTo(\"b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenAliasPairResolves()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#resolveMirrorsWhenHasSameValuesUsesFirst()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveMirrorsWhenHasSameValuesUsesFirst() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(AliasPair.class).get(0);\r\n    Method[] resolved = resolveMirrorSets(mapping, WithSameValueAliasPair.class, AliasPair.class);\r\n    assertThat(resolved[0].getName()).isEqualTo(\"a\");\r\n    assertThat(resolved[1].getName()).isEqualTo(\"a\");\r\n}",
    "tailType": "method_code"
  }
]