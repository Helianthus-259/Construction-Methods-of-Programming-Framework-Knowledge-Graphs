[
  {
    "head": "org.springframework.cglib.core.MethodInfo#getModifiers()",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract public int getModifiers();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#getModifiers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#getSignature()",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract public Signature getSignature();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#getSignature()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#getExceptionTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract public Type[] getExceptionTypes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#getExceptionTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(Object o) {\r\n    if (o == null) {\r\n        return false;\r\n    }\r\n    if (!(o instanceof MethodInfo other)) {\r\n        return false;\r\n    }\r\n    return getSignature().equals(other.getSignature());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return getSignature().hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    // TODO: include modifiers, exceptions\r\n    return getSignature().toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfo#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfo#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.MethodInfoTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\npublic class MethodInfoTransformer implements Transformer\n{\n    private static final MethodInfoTransformer INSTANCE = new MethodInfoTransformer();\n\n    public static MethodInfoTransformer getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    public Object transform(Object value) {\n        if (value instanceof Method method) {\n            return ReflectUtils.getMethodInfo(method);\n        } else if (value instanceof Constructor<?> constructor) {\n            return ReflectUtils.getMethodInfo(constructor);\n        } else {\n            throw new IllegalArgumentException(\"cannot get method info for \" + value);\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.MethodInfoTransformer#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodInfoTransformer",
    "tailType": "type"
  }
]