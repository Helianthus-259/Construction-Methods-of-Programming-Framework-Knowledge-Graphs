[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedTooManyLevels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedTooManyLevels() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test4\", List.class), 0), 3);\r\n    assertThat((Object) t1).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedTooManyLevels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedTooManyLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeNotNestable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterTypeNotNestable() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test5\", String.class), 0), 2);\r\n    assertThat((Object) t1).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeNotNestable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeNotNestable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeInvalidNestingLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedMethodParameterTypeInvalidNestingLevel() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test5\", String.class), 0, 2), 2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeInvalidNestingLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedMethodParameterTypeInvalidNestingLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedNotParameterized()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedNotParameterized() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test6\", List.class), 0), 1);\r\n    assertThat(t1.getType()).isEqualTo(List.class);\r\n    assertThat(t1.toString()).isEqualTo(\"java.util.List<?>\");\r\n    TypeDescriptor t2 = TypeDescriptor.nested(new MethodParameter(getClass().getMethod(\"test6\", List.class), 0), 2);\r\n    assertThat((Object) t2).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedNotParameterized()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedNotParameterized()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedFieldTypeMapTwoLevels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedFieldTypeMapTwoLevels() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.nested(getClass().getField(\"test4\"), 2);\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedFieldTypeMapTwoLevels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedFieldTypeMapTwoLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedPropertyTypeMapTwoLevels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nestedPropertyTypeMapTwoLevels() throws Exception {\r\n    Property property = new Property(getClass(), getClass().getMethod(\"getTest4\"), getClass().getMethod(\"setTest4\", List.class));\r\n    TypeDescriptor t1 = TypeDescriptor.nested(property, 2);\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#nestedPropertyTypeMapTwoLevels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#nestedPropertyTypeMapTwoLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#collection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collection() {\r\n    TypeDescriptor desc = TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(List.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.List\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.List<java.lang.Integer>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isTrue();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getElementTypeDescriptor()).isEqualTo(TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#collection()",
    "tailType": "method"
  }
]