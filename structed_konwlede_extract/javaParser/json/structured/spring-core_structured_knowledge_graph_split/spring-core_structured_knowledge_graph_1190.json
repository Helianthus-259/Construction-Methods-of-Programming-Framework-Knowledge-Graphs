[
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#annotationType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<A>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#consumer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#consumer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<MergedAnnotation<A>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#attributes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#attributes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visit(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visit(String name, Object value) {\r\n    if (value instanceof Type type) {\r\n        value = type.getClassName();\r\n    }\r\n    this.attributes.put(name, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visit(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visit(String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnum(String name, String descriptor, String value) {\r\n    visitEnum(descriptor, value, enumValue -> this.attributes.put(name, enumValue));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitEnum(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic AnnotationVisitor visitAnnotation(String name, String descriptor) {\r\n    return visitAnnotation(descriptor, annotation -> this.attributes.put(name, annotation));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitAnnotation(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitArray(String name) {\r\n    return new ArrayVisitor(value -> this.attributes.put(name, value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitArray(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    Map<String, Object> compactedAttributes = (this.attributes.isEmpty() ? Collections.emptyMap() : this.attributes);\r\n    MergedAnnotation<A> annotation = MergedAnnotation.of(this.classLoader, this.source, this.annotationType, compactedAttributes);\r\n    this.consumer.accept(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#visitEnd()",
    "tailType": "method"
  }
]