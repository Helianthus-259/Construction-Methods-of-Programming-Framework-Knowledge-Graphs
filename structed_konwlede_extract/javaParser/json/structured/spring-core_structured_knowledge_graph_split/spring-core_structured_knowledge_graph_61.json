[
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler#copy(InputStreamSource,CopyOption)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void copy(InputStreamSource content, CopyOption... copyOptions) {\r\n    try {\r\n        try (InputStream inputStream = content.getInputStream()) {\r\n            Files.createDirectories(this.path.getParent());\r\n            Files.copy(inputStream, this.path, copyOptions);\r\n        }\r\n    } catch (IOException ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemFileHandler#copy(InputStreamSource,CopyOption)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.path.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemFileHandler#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemFileHandler",
    "headType": "class",
    "relation": "extend",
    "tail": "FileHandler",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Abstract base class for testing implementations of\n * {@link ClassMetadata#getMemberClassNames()}.\n *\n * @author Chris Beams\n * @since 3.1\n */\npublic abstract class AbstractClassMetadataMemberClassTests {\n\n\tprotected abstract ClassMetadata getClassMetadataFor(Class<?> clazz);\n\n\t@Test\n\tvoid withNoMemberClasses() {\n\t\tClassMetadata metadata = getClassMetadataFor(L0_a.class);\n\t\tString[] nestedClasses = metadata.getMemberClassNames();\n\t\tassertThat(nestedClasses).isEmpty();\n\t}\n\n\t@Test\n\tvoid withPublicMemberClasses() {\n\t\tClassMetadata metadata = getClassMetadataFor(L0_b.class);\n\t\tString[] nestedClasses = metadata.getMemberClassNames();\n\t\tassertThat(nestedClasses).containsOnly(L0_b.L1.class.getName());\n\t}\n\n\t@Test\n\tvoid withNonPublicMemberClasses() {\n\t\tClassMetadata metadata = getClassMetadataFor(L0_c.class);\n\t\tString[] nestedClasses = metadata.getMemberClassNames();\n\t\tassertThat(nestedClasses).containsOnly(L0_c.L1.class.getName());\n\t}\n\n\t@Test\n\tvoid againstMemberClass() {\n\t\tClassMetadata metadata = getClassMetadataFor(L0_b.L1.class);\n\t\tString[] nestedClasses = metadata.getMemberClassNames();\n\t\tassertThat(nestedClasses).isEmpty();\n\t}\n\n\tpublic static class L0_a {\n\t}\n\n\tpublic static class L0_b {\n\t\tpublic static class L1 { }\n\t}\n\n\tpublic static class L0_c {\n\t\tprivate static class L1 { }\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#getClassMetadataFor(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract ClassMetadata getClassMetadataFor(Class<?> clazz);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#getClassMetadataFor(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNoMemberClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNoMemberClasses() {\r\n    ClassMetadata metadata = getClassMetadataFor(L0_a.class);\r\n    String[] nestedClasses = metadata.getMemberClassNames();\r\n    assertThat(nestedClasses).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNoMemberClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNoMemberClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withPublicMemberClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withPublicMemberClasses() {\r\n    ClassMetadata metadata = getClassMetadataFor(L0_b.class);\r\n    String[] nestedClasses = metadata.getMemberClassNames();\r\n    assertThat(nestedClasses).containsOnly(L0_b.L1.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withPublicMemberClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withPublicMemberClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNonPublicMemberClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNonPublicMemberClasses() {\r\n    ClassMetadata metadata = getClassMetadataFor(L0_c.class);\r\n    String[] nestedClasses = metadata.getMemberClassNames();\r\n    assertThat(nestedClasses).containsOnly(L0_c.L1.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNonPublicMemberClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractClassMetadataMemberClassTests#withNonPublicMemberClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]