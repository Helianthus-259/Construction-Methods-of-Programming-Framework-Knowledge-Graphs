[
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotableParameterCount(int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAnnotableParameterCount(final int parameterCount, final boolean visible) {\r\n    if (visible) {\r\n        visibleAnnotableParameterCount = parameterCount;\r\n    } else {\r\n        invisibleAnnotableParameterCount = parameterCount;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitAnnotableParameterCount(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotableParameterCount(int,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitParameterAnnotation(int,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitParameterAnnotation(final int parameter, final String annotationDescriptor, final boolean visible) {\r\n    if (visible) {\r\n        if (lastRuntimeVisibleParameterAnnotations == null) {\r\n            lastRuntimeVisibleParameterAnnotations = new AnnotationWriter[Type.getArgumentCount(descriptor)];\r\n        }\r\n        return lastRuntimeVisibleParameterAnnotations[parameter] = AnnotationWriter.create(symbolTable, annotationDescriptor, lastRuntimeVisibleParameterAnnotations[parameter]);\r\n    } else {\r\n        if (lastRuntimeInvisibleParameterAnnotations == null) {\r\n            lastRuntimeInvisibleParameterAnnotations = new AnnotationWriter[Type.getArgumentCount(descriptor)];\r\n        }\r\n        return lastRuntimeInvisibleParameterAnnotations[parameter] = AnnotationWriter.create(symbolTable, annotationDescriptor, lastRuntimeInvisibleParameterAnnotations[parameter]);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitParameterAnnotation(int,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitParameterAnnotation(int,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(final Attribute attribute) {\r\n    // Store the attributes in the <i>reverse</i> order of their visit by this method.\r\n    if (attribute.isCodeAttribute()) {\r\n        attribute.nextAttribute = firstCodeAttribute;\r\n        firstCodeAttribute = attribute;\r\n    } else {\r\n        attribute.nextAttribute = firstAttribute;\r\n        firstAttribute = attribute;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitCode() {\r\n    // Nothing to do.\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitFrame(int,int,Object[],int,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitFrame(final int type, final int numLocal, final Object[] local, final int numStack, final Object[] stack) {\r\n    if (compute == COMPUTE_ALL_FRAMES) {\r\n        return;\r\n    }\r\n    if (compute == COMPUTE_INSERTED_FRAMES) {\r\n        if (currentBasicBlock.frame == null) {\r\n            // This should happen only once, for the implicit first frame (which is explicitly visited\r\n            // in ClassReader if the EXPAND_ASM_INSNS option is used - and COMPUTE_INSERTED_FRAMES\r\n            // can't be set if EXPAND_ASM_INSNS is not used).\r\n            currentBasicBlock.frame = new CurrentFrame(currentBasicBlock);\r\n            currentBasicBlock.frame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, numLocal);\r\n            currentBasicBlock.frame.accept(this);\r\n        } else {\r\n            if (type == Opcodes.F_NEW) {\r\n                currentBasicBlock.frame.setInputFrameFromApiFormat(symbolTable, numLocal, local, numStack, stack);\r\n            }\r\n            // If type is not F_NEW then it is F_INSERT by hypothesis, and currentBlock.frame contains\r\n            // the stack map frame at the current instruction, computed from the last F_NEW frame and\r\n            // the bytecode instructions in between (via calls to CurrentFrame#execute).\r\n            currentBasicBlock.frame.accept(this);\r\n        }\r\n    } else if (type == Opcodes.F_NEW) {\r\n        if (previousFrame == null) {\r\n            int argumentsSize = Type.getArgumentsAndReturnSizes(descriptor) >> 2;\r\n            Frame implicitFirstFrame = new Frame(new Label());\r\n            implicitFirstFrame.setInputFrameFromDescriptor(symbolTable, accessFlags, descriptor, argumentsSize);\r\n            implicitFirstFrame.accept(this);\r\n        }\r\n        currentLocals = numLocal;\r\n        int frameIndex = visitFrameStart(code.length, numLocal, numStack);\r\n        for (int i = 0; i < numLocal; ++i) {\r\n            currentFrame[frameIndex++] = Frame.getAbstractTypeFromApiFormat(symbolTable, local[i]);\r\n        }\r\n        for (int i = 0; i < numStack; ++i) {\r\n            currentFrame[frameIndex++] = Frame.getAbstractTypeFromApiFormat(symbolTable, stack[i]);\r\n        }\r\n        visitFrameEnd();\r\n    } else {\r\n        if (symbolTable.getMajorVersion() < Opcodes.V1_6) {\r\n            throw new IllegalArgumentException(\"Class versions V1_5 or less must use F_NEW frames.\");\r\n        }\r\n        int offsetDelta;\r\n        if (stackMapTableEntries == null) {\r\n            stackMapTableEntries = new ByteVector();\r\n            offsetDelta = code.length;\r\n        } else {\r\n            offsetDelta = code.length - previousFrameOffset - 1;\r\n            if (offsetDelta < 0) {\r\n                if (type == Opcodes.F_SAME) {\r\n                    return;\r\n                } else {\r\n                    throw new IllegalStateException();\r\n                }\r\n            }\r\n        }\r\n        switch(type) {\r\n            case Opcodes.F_FULL:\r\n                currentLocals = numLocal;\r\n                stackMapTableEntries.putByte(Frame.FULL_FRAME).putShort(offsetDelta).putShort(numLocal);\r\n                for (int i = 0; i < numLocal; ++i) {\r\n                    putFrameType(local[i]);\r\n                }\r\n                stackMapTableEntries.putShort(numStack);\r\n                for (int i = 0; i < numStack; ++i) {\r\n                    putFrameType(stack[i]);\r\n                }\r\n                break;\r\n            case Opcodes.F_APPEND:\r\n                currentLocals += numLocal;\r\n                stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED + numLocal).putShort(offsetDelta);\r\n                for (int i = 0; i < numLocal; ++i) {\r\n                    putFrameType(local[i]);\r\n                }\r\n                break;\r\n            case Opcodes.F_CHOP:\r\n                currentLocals -= numLocal;\r\n                stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED - numLocal).putShort(offsetDelta);\r\n                break;\r\n            case Opcodes.F_SAME:\r\n                if (offsetDelta < 64) {\r\n                    stackMapTableEntries.putByte(offsetDelta);\r\n                } else {\r\n                    stackMapTableEntries.putByte(Frame.SAME_FRAME_EXTENDED).putShort(offsetDelta);\r\n                }\r\n                break;\r\n            case Opcodes.F_SAME1:\r\n                if (offsetDelta < 64) {\r\n                    stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME + offsetDelta);\r\n                } else {\r\n                    stackMapTableEntries.putByte(Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED).putShort(offsetDelta);\r\n                }\r\n                putFrameType(stack[0]);\r\n                break;\r\n            default:\r\n                throw new IllegalArgumentException();\r\n        }\r\n        previousFrameOffset = code.length;\r\n        ++stackMapTableNumberOfEntries;\r\n    }\r\n    if (compute == COMPUTE_MAX_STACK_AND_LOCAL_FROM_FRAMES) {\r\n        relativeStackSize = numStack;\r\n        for (int i = 0; i < numStack; ++i) {\r\n            if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) {\r\n                relativeStackSize++;\r\n            }\r\n        }\r\n        if (relativeStackSize > maxRelativeStackSize) {\r\n            maxRelativeStackSize = relativeStackSize;\r\n        }\r\n    }\r\n    maxStack = Math.max(maxStack, numStack);\r\n    maxLocals = Math.max(maxLocals, currentLocals);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitFrame(int,int,Object[],int,Object[])",
    "tailType": "method"
  }
]