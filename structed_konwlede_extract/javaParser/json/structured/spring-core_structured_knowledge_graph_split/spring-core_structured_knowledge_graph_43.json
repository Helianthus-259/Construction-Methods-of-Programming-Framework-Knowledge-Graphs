[
  {
    "head": "org.springframework.core.task.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.support.TestThreadLocalHolder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task.support;\n\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport io.micrometer.context.ContextRegistry;\nimport io.micrometer.context.ContextSnapshotFactory;\nimport io.micrometer.context.ThreadLocalAccessor;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ContextPropagatingTaskDecorator}.\n * @author Brian Clozel\n */\nclass ContextPropagatingTaskDecoratorTests {\n\n\t@Test\n\tvoid shouldPropagateContextInTaskExecution() throws Exception {\n\t\tAtomicReference<String> actual = new AtomicReference<>(\"\");\n\t\tContextRegistry registry = new ContextRegistry();\n\t\tregistry.registerThreadLocalAccessor(new TestThreadLocalAccessor());\n\t\tContextSnapshotFactory snapshotFactory = ContextSnapshotFactory.builder().contextRegistry(registry).build();\n\n\t\tRunnable task = () -> actual.set(TestThreadLocalHolder.getValue());\n\t\tTestThreadLocalHolder.setValue(\"expected\");\n\n\t\tThread execution = new Thread(new ContextPropagatingTaskDecorator(snapshotFactory).decorate(task));\n\t\texecution.start();\n\t\texecution.join();\n\t\tassertThat(actual.get()).isEqualTo(\"expected\");\n\t\tTestThreadLocalHolder.reset();\n\t}\n\n\tstatic class TestThreadLocalHolder {\n\n\t\tprivate static final ThreadLocal<String> holder = new ThreadLocal<>();\n\n\t\tstatic void setValue(String value) {\n\t\t\tholder.set(value);\n\t\t}\n\n\t\tstatic String getValue() {\n\t\t\treturn holder.get();\n\t\t}\n\n\t\tstatic void reset() {\n\t\t\tholder.remove();\n\t\t}\n\n\t}\n\n\tstatic class TestThreadLocalAccessor implements ThreadLocalAccessor<String> {\n\n\t\tstatic final String KEY = \"test.threadlocal\";\n\n\t\t@Override\n\t\tpublic Object key() {\n\t\t\treturn KEY;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getValue() {\n\t\t\treturn TestThreadLocalHolder.getValue();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setValue(String value) {\n\t\t\tTestThreadLocalHolder.setValue(value);\n\t\t}\n\n\t\t@Override\n\t\tpublic void setValue() {\n\t\t\tTestThreadLocalHolder.reset();\n\t\t}\n\n\t\t@Override\n\t\tpublic void restore(String previousValue) {\n\t\t\tsetValue(previousValue);\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.support.TestThreadLocalHolder#holder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder#holder",
    "headType": "field",
    "relation": "haveType",
    "tail": "ThreadLocal<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder#setValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "static void setValue(String value) {\r\n    holder.set(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TestThreadLocalHolder#setValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "static String getValue() {\r\n    return holder.get();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TestThreadLocalHolder#getValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder#reset()",
    "headType": "method",
    "relation": "provide",
    "tail": "static void reset() {\r\n    holder.remove();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalHolder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TestThreadLocalHolder#reset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.support.TestThreadLocalAccessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task.support;\n\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport io.micrometer.context.ContextRegistry;\nimport io.micrometer.context.ContextSnapshotFactory;\nimport io.micrometer.context.ThreadLocalAccessor;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ContextPropagatingTaskDecorator}.\n * @author Brian Clozel\n */\nclass ContextPropagatingTaskDecoratorTests {\n\n\t@Test\n\tvoid shouldPropagateContextInTaskExecution() throws Exception {\n\t\tAtomicReference<String> actual = new AtomicReference<>(\"\");\n\t\tContextRegistry registry = new ContextRegistry();\n\t\tregistry.registerThreadLocalAccessor(new TestThreadLocalAccessor());\n\t\tContextSnapshotFactory snapshotFactory = ContextSnapshotFactory.builder().contextRegistry(registry).build();\n\n\t\tRunnable task = () -> actual.set(TestThreadLocalHolder.getValue());\n\t\tTestThreadLocalHolder.setValue(\"expected\");\n\n\t\tThread execution = new Thread(new ContextPropagatingTaskDecorator(snapshotFactory).decorate(task));\n\t\texecution.start();\n\t\texecution.join();\n\t\tassertThat(actual.get()).isEqualTo(\"expected\");\n\t\tTestThreadLocalHolder.reset();\n\t}\n\n\tstatic class TestThreadLocalHolder {\n\n\t\tprivate static final ThreadLocal<String> holder = new ThreadLocal<>();\n\n\t\tstatic void setValue(String value) {\n\t\t\tholder.set(value);\n\t\t}\n\n\t\tstatic String getValue() {\n\t\t\treturn holder.get();\n\t\t}\n\n\t\tstatic void reset() {\n\t\t\tholder.remove();\n\t\t}\n\n\t}\n\n\tstatic class TestThreadLocalAccessor implements ThreadLocalAccessor<String> {\n\n\t\tstatic final String KEY = \"test.threadlocal\";\n\n\t\t@Override\n\t\tpublic Object key() {\n\t\t\treturn KEY;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getValue() {\n\t\t\treturn TestThreadLocalHolder.getValue();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setValue(String value) {\n\t\t\tTestThreadLocalHolder.setValue(value);\n\t\t}\n\n\t\t@Override\n\t\tpublic void setValue() {\n\t\t\tTestThreadLocalHolder.reset();\n\t\t}\n\n\t\t@Override\n\t\tpublic void restore(String previousValue) {\n\t\t\tsetValue(previousValue);\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.support.TestThreadLocalAccessor#KEY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor#KEY",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor#key()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object key() {\r\n    return KEY;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TestThreadLocalAccessor#key()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor#key()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getValue() {\r\n    return TestThreadLocalHolder.getValue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TestThreadLocalAccessor#getValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TestThreadLocalAccessor#getValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]