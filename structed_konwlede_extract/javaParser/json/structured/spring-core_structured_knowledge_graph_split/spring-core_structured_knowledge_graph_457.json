[
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecode(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Decoder#decode decode} scenario. For example:\r\n * <pre class=\"code\">\r\n * byte[] bytes1 = ...\r\n * byte[] bytes2 = ...\r\n *\r\n * Flux&lt;DataBuffer&gt; input = Flux.concat(\r\n *   dataBuffer(bytes1),\r\n *   dataBuffer(bytes2));\r\n *\r\n * testDecodeAll(input, byte[].class, step -&gt; step\r\n *   .consumeNextWith(expectBytes(bytes1))\r\n *   .consumeNextWith(expectBytes(bytes2))\r\n * \t .verifyComplete());\r\n * </pre>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param <T> the output type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected <T> void testDecode(Publisher<DataBuffer> input, ResolvableType outputType, Consumer<StepVerifier.FirstStep<T>> stepConsumer, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<T> result = (Flux<T>) this.decoder.decode(input, outputType, mimeType, hints);\r\n    StepVerifier.FirstStep<T> step = StepVerifier.create(result);\r\n    stepConsumer.accept(step);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecode(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecode(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeError(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Decoder#decode decode} scenario where the input stream contains an error.\r\n * This test method will feed the first element of the {@code input} stream to the decoder,\r\n * followed by an {@link InputException}.\r\n * The result is expected to contain one \"normal\" element, followed by the error.\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @see InputException\r\n */\r\nprotected void testDecodeError(Publisher<DataBuffer> input, ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<DataBuffer> flux = Mono.from(input).concatWith(Flux.error(new InputException()));\r\n    assertThatExceptionOfType(InputException.class).isThrownBy(() -> this.decoder.decode(flux, outputType, mimeType, hints).doOnNext(object -> {\r\n        if (object instanceof Buffer buffer) {\r\n            buffer.close();\r\n        }\r\n    }).blockLast(Duration.ofSeconds(5)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeError(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeCancel(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Decoder#decode decode} scenario where the input stream is canceled.\r\n * This test method will feed the first element of the {@code input} stream to the decoder,\r\n * followed by a cancel signal.\r\n * The result is expected to contain one \"normal\" element.\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n */\r\nprotected void testDecodeCancel(Publisher<DataBuffer> input, ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<?> result = this.decoder.decode(input, outputType, mimeType, hints).doOnNext(object -> {\r\n        if (object instanceof Buffer buffer) {\r\n            buffer.close();\r\n        }\r\n    });\r\n    StepVerifier.create(result).expectNextCount(1).thenCancel().verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeCancel(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeEmpty(ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Decoder#decode decode} scenario where the input stream is empty.\r\n * The output is expected to be empty as well.\r\n *\r\n * @param outputType the desired output type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n */\r\nprotected void testDecodeEmpty(ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<DataBuffer> input = Flux.empty();\r\n    Flux<?> result = this.decoder.decode(input, outputType, mimeType, hints);\r\n    StepVerifier.create(result).verifyComplete();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeEmpty(ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoAll(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Mono\r\n/**\r\n * Helper method that tests for a variety of {@link Mono} decoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testDecodeToMono(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputClass the desired output class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecodeToMonoAll(Publisher<DataBuffer> input, Class<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\r\n    testDecodeToMonoAll(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoAll(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoAll(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method that tests for a variety of {@link Mono} decoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testDecodeToMono(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeToMonoEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecodeToMonoAll(Publisher<DataBuffer> input, ResolvableType outputType, Consumer<StepVerifier.FirstStep<T>> stepConsumer, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    testDecodeToMono(input, outputType, stepConsumer, mimeType, hints);\r\n    testDecodeToMonoError(input, outputType, mimeType, hints);\r\n    testDecodeToMonoCancel(input, outputType, mimeType, hints);\r\n    testDecodeToMonoEmpty(outputType, mimeType, hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoAll(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMono(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Decoder#decodeToMono decode} scenario. For example:\r\n * <pre class=\"code\">\r\n * byte[] bytes1 = ...\r\n * byte[] bytes2 = ...\r\n * byte[] allBytes = ... // bytes1 + bytes2\r\n *\r\n * Flux&lt;DataBuffer&gt; input = Flux.concat(\r\n *   dataBuffer(bytes1),\r\n *   dataBuffer(bytes2));\r\n *\r\n * testDecodeAll(input, byte[].class, step -&gt; step\r\n *   .consumeNextWith(expectBytes(allBytes))\r\n * \t .verifyComplete());\r\n * </pre>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputClass the desired output class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecodeToMono(Publisher<DataBuffer> input, Class<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\r\n    testDecodeToMono(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMono(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMono(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Decoder#decodeToMono decode} scenario. For example:\r\n * <pre class=\"code\">\r\n * byte[] bytes1 = ...\r\n * byte[] bytes2 = ...\r\n * byte[] allBytes = ... // bytes1 + bytes2\r\n *\r\n * Flux&lt;DataBuffer&gt; input = Flux.concat(\r\n *   dataBuffer(bytes1),\r\n *   dataBuffer(bytes2));\r\n *\r\n * testDecodeAll(input, byte[].class, step -&gt; step\r\n *   .consumeNextWith(expectBytes(allBytes))\r\n * \t .verifyComplete());\r\n * </pre>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param <T> the output type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected <T> void testDecodeToMono(Publisher<DataBuffer> input, ResolvableType outputType, Consumer<StepVerifier.FirstStep<T>> stepConsumer, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Mono<T> result = (Mono<T>) this.decoder.decodeToMono(input, outputType, mimeType, hints);\r\n    StepVerifier.FirstStep<T> step = StepVerifier.create(result);\r\n    stepConsumer.accept(step);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMono(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMono(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoError(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Decoder#decodeToMono decode} scenario where the input stream contains an error.\r\n * This test method will feed the first element of the {@code input} stream to the decoder,\r\n * followed by an {@link InputException}.\r\n * The result is expected to contain the error.\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @see InputException\r\n */\r\nprotected void testDecodeToMonoError(Publisher<DataBuffer> input, ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    input = Mono.from(input).concatWith(Flux.error(new InputException()));\r\n    Mono<?> result = this.decoder.decodeToMono(input, outputType, mimeType, hints);\r\n    StepVerifier.create(result).expectError(InputException.class).verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeToMonoError(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  }
]