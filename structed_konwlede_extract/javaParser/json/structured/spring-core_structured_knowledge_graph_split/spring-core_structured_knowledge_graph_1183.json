[
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.VirtualThreadDelegate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.ThreadFactory;\n\n/**\n * Internal delegate for virtual thread handling on JDK 21.\n * This is a dummy version for reachability on JDK <21.\n *\n * @author Juergen Hoeller\n * @since 6.1\n * @see VirtualThreadTaskExecutor\n */\nfinal class VirtualThreadDelegate {\n\n\tpublic VirtualThreadDelegate() {\n\t\tthrow new UnsupportedOperationException(\"Virtual threads not supported on JDK <21\");\n\t}\n\n\tpublic ThreadFactory virtualThreadFactory() {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\tpublic ThreadFactory virtualThreadFactory(String threadNamePrefix) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\tpublic Thread newVirtualThread(String name, Runnable task) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "public ThreadFactory virtualThreadFactory() {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public ThreadFactory virtualThreadFactory(String threadNamePrefix) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#newVirtualThread(String,Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "public Thread newVirtualThread(String name, Runnable task) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#newVirtualThread(String,Runnable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.VirtualThreadTaskExecutor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.ThreadFactory;\n\n/**\n * A {@link TaskExecutor} implementation based on virtual threads in JDK 21+.\n * The only configuration option is a thread name prefix.\n *\n * <p>For additional features such as concurrency limiting or task decoration,\n * consider using {@link SimpleAsyncTaskExecutor#setVirtualThreads} instead.\n *\n * @author Juergen Hoeller\n * @since 6.1\n * @see SimpleAsyncTaskExecutor#setVirtualThreads\n */\npublic class VirtualThreadTaskExecutor implements AsyncTaskExecutor {\n\n\tprivate final ThreadFactory virtualThreadFactory;\n\n\n\t/**\n\t * Create a new {@code VirtualThreadTaskExecutor} without thread naming.\n\t */\n\tpublic VirtualThreadTaskExecutor() {\n\t\tthis.virtualThreadFactory = new VirtualThreadDelegate().virtualThreadFactory();\n\t}\n\n\t/**\n\t * Create a new {@code VirtualThreadTaskExecutor} with thread names based\n\t * on the given thread name prefix followed by a counter (for example, \"test-0\").\n\t * @param threadNamePrefix the prefix for thread names (for example, \"test-\")\n\t */\n\tpublic VirtualThreadTaskExecutor(String threadNamePrefix) {\n\t\tthis.virtualThreadFactory = new VirtualThreadDelegate().virtualThreadFactory(threadNamePrefix);\n\t}\n\n\n\t/**\n\t * Return the underlying virtual {@link ThreadFactory}.\n\t * Can also be used for custom thread creation elsewhere.\n\t */\n\tpublic final ThreadFactory getVirtualThreadFactory() {\n\t\treturn this.virtualThreadFactory;\n\t}\n\n\t@Override\n\tpublic void execute(Runnable task) {\n\t\tthis.virtualThreadFactory.newThread(task).start();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.VirtualThreadTaskExecutor#virtualThreadFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor#virtualThreadFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "ThreadFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor#getVirtualThreadFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying virtual {@link ThreadFactory}.\r\n * Can also be used for custom thread creation elsewhere.\r\n */\r\npublic final ThreadFactory getVirtualThreadFactory() {\r\n    return this.virtualThreadFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadTaskExecutor#getVirtualThreadFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void execute(Runnable task) {\r\n    this.virtualThreadFactory.newThread(task).start();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadTaskExecutor#execute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.AnnotatedTypeMetadata",
    "tailType": "class"
  }
]