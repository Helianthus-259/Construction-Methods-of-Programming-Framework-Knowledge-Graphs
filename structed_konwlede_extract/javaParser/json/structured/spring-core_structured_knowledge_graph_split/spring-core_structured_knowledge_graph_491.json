[
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OnHeapPooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty5OnHeapPooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "BufferAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OffHeapUnpooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OffHeapUnpooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "UnpooledByteBufAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OnHeapUnpooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OnHeapUnpooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "UnpooledByteBufAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OffHeapPooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OffHeapPooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "PooledByteBufAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OnHeapPooled",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#netty4OnHeapPooled",
    "headType": "field",
    "relation": "haveType",
    "tail": "PooledByteBufAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#leakDetector",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#leakDetector",
    "headType": "field",
    "relation": "haveType",
    "tail": "AfterEachCallback",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#bufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "DataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createDataBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected DataBuffer createDataBuffer(int capacity) {\r\n    return this.bufferFactory.allocateBuffer(capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createDataBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringBuffer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected DataBuffer stringBuffer(String value) {\r\n    return byteBuffer(value.getBytes(StandardCharsets.UTF_8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringBuffer(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#deferStringBuffer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Mono<DataBuffer> deferStringBuffer(String value) {\r\n    return Mono.defer(() -> Mono.just(stringBuffer(value)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#deferStringBuffer(String)",
    "tailType": "method"
  }
]