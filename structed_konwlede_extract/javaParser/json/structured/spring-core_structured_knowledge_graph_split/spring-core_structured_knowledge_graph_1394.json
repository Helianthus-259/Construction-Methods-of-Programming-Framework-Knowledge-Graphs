[
  {
    "head": "org.springframework.util.NonClosingOutputStream#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() throws IOException ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NonClosingOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NonClosingOutputStream#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NonClosingOutputStream#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NonClosingOutputStream",
    "headType": "class",
    "relation": "extend",
    "tail": "FilterOutputStream",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.StringUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.ByteArrayOutputStream;\nimport java.nio.charset.Charset;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringJoiner;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.lang.Contract;\n\n/**\n * Miscellaneous {@link String} utility methods.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"https://commons.apache.org/proper/commons-lang/\">Apache's Commons Lang</a>\n * for a more comprehensive suite of {@code String} utilities.\n *\n * <p>This class delivers some simple functionality that should really be\n * provided by the core Java {@link String} and {@link StringBuilder}\n * classes. It also provides easy-to-use methods to convert between\n * delimited strings, such as CSV strings, and collections and arrays.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Keith Donald\n * @author Rob Harrop\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Sam Brannen\n * @author Brian Clozel\n * @author Sebastien Deleuze\n * @since 16 April 2001\n */\npublic abstract class StringUtils {\n\n\tprivate static final String[] EMPTY_STRING_ARRAY = {};\n\n\tprivate static final String FOLDER_SEPARATOR = \"/\";\n\n\tprivate static final char FOLDER_SEPARATOR_CHAR = '/';\n\n\tprivate static final String WINDOWS_FOLDER_SEPARATOR = \"\\\\\";\n\n\tprivate static final char WINDOWS_FOLDER_SEPARATOR_CHAR = '\\\\';\n\n\tprivate static final String DOUBLE_BACKSLASHES = \"\\\\\\\\\";\n\n\tprivate static final String TOP_PATH = \"..\";\n\n\tprivate static final String CURRENT_PATH = \".\";\n\n\tprivate static final char DOT_CHAR = '.';\n\n\tprivate static final int DEFAULT_TRUNCATION_THRESHOLD = 100;\n\n\tprivate static final String TRUNCATION_SUFFIX = \" (truncated)...\";\n\n\n\t//---------------------------------------------------------------------\n\t// General convenience methods for working with Strings\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Check whether the given object (possibly a {@code String}) is empty.\n\t * This is effectively a shortcut for {@code !hasLength(String)}.\n\t * <p>This method accepts any Object as an argument, comparing it to\n\t * {@code null} and the empty String. As a consequence, this method\n\t * will never return {@code true} for a non-null non-String object.\n\t * <p>The Object signature is useful for general attribute handling code\n\t * that commonly deals with Strings but generally has to iterate over\n\t * Objects since attributes may, for example, be primitive value objects as well.\n\t * <p><b>Note: If the object is typed to {@code String} upfront, prefer\n\t * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>\n\t * @param str the candidate object (possibly a {@code String})\n\t * @since 3.2.1\n\t * @deprecated as of 5.3, in favor of {@link #hasLength(String)} and\n\t * {@link #hasText(String)} (or {@link ObjectUtils#isEmpty(Object)})\n\t */\n\t@Deprecated\n\tpublic static boolean isEmpty(@Nullable Object str) {\n\t\treturn (str == null || \"\".equals(str));\n\t}\n\n\t/**\n\t * Check that the given {@code CharSequence} is neither {@code null} nor\n\t * of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code CharSequence}\n\t * that purely consists of whitespace.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasLength(null) = false\n\t * StringUtils.hasLength(\"\") = false\n\t * StringUtils.hasLength(\" \") = true\n\t * StringUtils.hasLength(\"Hello\") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\n\t * @see #hasLength(String)\n\t * @see #hasText(CharSequence)\n\t */\n\t@Contract(\"null -> false\")\n\tpublic static boolean hasLength(@Nullable CharSequence str) {\n\t\treturn (str != null && !str.isEmpty());  // as of JDK 15\n\t}\n\n\t/**\n\t * Check that the given {@code String} is neither {@code null} nor of length 0.\n\t * <p>Note: this method returns {@code true} for a {@code String} that\n\t * purely consists of whitespace.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not {@code null} and has length\n\t * @see #hasLength(CharSequence)\n\t * @see #hasText(String)\n\t */\n\t@Contract(\"null -> false\")\n\tpublic static boolean hasLength(@Nullable String str) {\n\t\treturn (str != null && !str.isEmpty());\n\t}\n\n\t/**\n\t * Check whether the given {@code CharSequence} contains actual <em>text</em>.\n\t * <p>More specifically, this method returns {@code true} if the\n\t * {@code CharSequence} is not {@code null}, its length is greater than\n\t * 0, and it contains at least one non-whitespace character.\n\t * <p><pre class=\"code\">\n\t * StringUtils.hasText(null) = false\n\t * StringUtils.hasText(\"\") = false\n\t * StringUtils.hasText(\" \") = false\n\t * StringUtils.hasText(\"12345\") = true\n\t * StringUtils.hasText(\" 12345 \") = true\n\t * </pre>\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not {@code null},\n\t * its length is greater than 0, and it does not contain whitespace only\n\t * @see #hasText(String)\n\t * @see #hasLength(CharSequence)\n\t * @see Character#isWhitespace\n\t */\n\t@Contract(\"null -> false\")\n\tpublic static boolean hasText(@Nullable CharSequence str) {\n\t\tif (str == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tint strLen = str.length();\n\t\tif (strLen == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (int i = 0; i < strLen; i++) {\n\t\t\tif (!Character.isWhitespace(str.charAt(i))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check whether the given {@code String} contains actual <em>text</em>.\n\t * <p>More specifically, this method returns {@code true} if the\n\t * {@code String} is not {@code null}, its length is greater than 0,\n\t * and it contains at least one non-whitespace character.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not {@code null}, its\n\t * length is greater than 0, and it does not contain whitespace only\n\t * @see #hasText(CharSequence)\n\t * @see #hasLength(String)\n\t * @see Character#isWhitespace\n\t */\n\t@Contract(\"null -> false\")\n\tpublic static boolean hasText(@Nullable String str) {\n\t\treturn (str != null && !str.isBlank());\n\t}\n\n\t/**\n\t * Check whether the given {@code CharSequence} contains any whitespace characters.\n\t * @param str the {@code CharSequence} to check (may be {@code null})\n\t * @return {@code true} if the {@code CharSequence} is not empty and\n\t * contains at least 1 whitespace character\n\t * @see Character#isWhitespace\n\t */\n\tpublic static boolean containsWhitespace(@Nullable CharSequence str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tint strLen = str.length();\n\t\tfor (int i = 0; i < strLen; i++) {\n\t\t\tif (Character.isWhitespace(str.charAt(i))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check whether the given {@code String} contains any whitespace characters.\n\t * @param str the {@code String} to check (may be {@code null})\n\t * @return {@code true} if the {@code String} is not empty and\n\t * contains at least 1 whitespace character\n\t * @see #containsWhitespace(CharSequence)\n\t */\n\tpublic static boolean containsWhitespace(@Nullable String str) {\n\t\treturn containsWhitespace((CharSequence) str);\n\t}\n\n\t/**\n\t * Trim leading and trailing whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#strip()}\n\t */\n\t@Deprecated(since = \"6.0\")\n\tpublic static String trimWhitespace(String str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\treturn str.strip();\n\t}\n\n\t/**\n\t * Trim <em>all</em> whitespace from the given {@code CharSequence}:\n\t * leading, trailing, and in between characters.\n\t * @param str the {@code CharSequence} to check\n\t * @return the trimmed {@code CharSequence}\n\t * @since 5.3.22\n\t * @see #trimAllWhitespace(String)\n\t * @see java.lang.Character#isWhitespace\n\t */\n\tpublic static CharSequence trimAllWhitespace(CharSequence str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\tint len = str.length();\n\t\tStringBuilder sb = new StringBuilder(str.length());\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tchar c = str.charAt(i);\n\t\t\tif (!Character.isWhitespace(c)) {\n\t\t\t\tsb.append(c);\n\t\t\t}\n\t\t}\n\t\treturn sb;\n\t}\n\n\t/**\n\t * Trim <em>all</em> whitespace from the given {@code String}:\n\t * leading, trailing, and in between characters.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see #trimAllWhitespace(CharSequence)\n\t * @see java.lang.Character#isWhitespace\n\t */\n\tpublic static String trimAllWhitespace(String str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\treturn trimAllWhitespace((CharSequence) str).toString();\n\t}\n\n\t/**\n\t * Trim leading whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#stripLeading()}\n\t */\n\t@Deprecated(since = \"6.0\")\n\tpublic static String trimLeadingWhitespace(String str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\treturn str.stripLeading();\n\t}\n\n\t/**\n\t * Trim trailing whitespace from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @return the trimmed {@code String}\n\t * @see java.lang.Character#isWhitespace\n\t * @deprecated since 6.0, in favor of {@link String#stripTrailing()}\n\t */\n\t@Deprecated(since = \"6.0\")\n\tpublic static String trimTrailingWhitespace(String str) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\treturn str.stripTrailing();\n\t}\n\n\t/**\n\t * Trim all occurrences of the supplied leading character from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @param leadingCharacter the leading character to be trimmed\n\t * @return the trimmed {@code String}\n\t */\n\tpublic static String trimLeadingCharacter(String str, char leadingCharacter) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\tint beginIdx = 0;\n\t\twhile (beginIdx < str.length() && leadingCharacter == str.charAt(beginIdx)) {\n\t\t\tbeginIdx++;\n\t\t}\n\t\treturn str.substring(beginIdx);\n\t}\n\n\t/**\n\t * Trim all occurrences of the supplied trailing character from the given {@code String}.\n\t * @param str the {@code String} to check\n\t * @param trailingCharacter the trailing character to be trimmed\n\t * @return the trimmed {@code String}\n\t */\n\tpublic static String trimTrailingCharacter(String str, char trailingCharacter) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\tint endIdx = str.length() - 1;\n\t\twhile (endIdx >= 0 && trailingCharacter == str.charAt(endIdx)) {\n\t\t\tendIdx--;\n\t\t}\n\t\treturn str.substring(0, endIdx + 1);\n\t}\n\n\t/**\n\t * Test if the given {@code String} matches the given single character.\n\t * @param str the {@code String} to check\n\t * @param singleCharacter the character to compare to\n\t * @since 5.2.9\n\t */\n\tpublic static boolean matchesCharacter(@Nullable String str, char singleCharacter) {\n\t\treturn (str != null && str.length() == 1 && str.charAt(0) == singleCharacter);\n\t}\n\n\t/**\n\t * Test if the given {@code String} starts with the specified prefix,\n\t * ignoring upper/lower case.\n\t * @param str the {@code String} to check\n\t * @param prefix the prefix to look for\n\t * @see java.lang.String#startsWith\n\t */\n\tpublic static boolean startsWithIgnoreCase(@Nullable String str, @Nullable String prefix) {\n\t\treturn (str != null && prefix != null && str.length() >= prefix.length() &&\n\t\t\t\tstr.regionMatches(true, 0, prefix, 0, prefix.length()));\n\t}\n\n\t/**\n\t * Test if the given {@code String} ends with the specified suffix,\n\t * ignoring upper/lower case.\n\t * @param str the {@code String} to check\n\t * @param suffix the suffix to look for\n\t * @see java.lang.String#endsWith\n\t */\n\tpublic static boolean endsWithIgnoreCase(@Nullable String str, @Nullable String suffix) {\n\t\treturn (str != null && suffix != null && str.length() >= suffix.length() &&\n\t\t\t\tstr.regionMatches(true, str.length() - suffix.length(), suffix, 0, suffix.length()));\n\t}\n\n\t/**\n\t * Test whether the given string matches the given substring\n\t * at the given index.\n\t * @param str the original string (or StringBuilder)\n\t * @param index the index in the original string to start matching against\n\t * @param substring the substring to match at the given index\n\t */\n\tpublic static boolean substringMatch(CharSequence str, int index, CharSequence substring) {\n\t\tif (index + substring.length() > str.length()) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < substring.length(); i++) {\n\t\t\tif (str.charAt(index + i) != substring.charAt(i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Count the occurrences of the substring {@code sub} in string {@code str}.\n\t * @param str string to search in\n\t * @param sub string to search for\n\t */\n\tpublic static int countOccurrencesOf(String str, String sub) {\n\t\tif (!hasLength(str) || !hasLength(sub)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tint count = 0;\n\t\tint pos = 0;\n\t\tint idx;\n\t\twhile ((idx = str.indexOf(sub, pos)) != -1) {\n\t\t\t++count;\n\t\t\tpos = idx + sub.length();\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Replace all occurrences of a substring within a string with another string.\n\t * @param inString {@code String} to examine\n\t * @param oldPattern {@code String} to replace\n\t * @param newPattern {@code String} to insert\n\t * @return a {@code String} with the replacements\n\t */\n\tpublic static String replace(String inString, String oldPattern, @Nullable String newPattern) {\n\t\tif (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\n\t\t\treturn inString;\n\t\t}\n\t\tint index = inString.indexOf(oldPattern);\n\t\tif (index == -1) {\n\t\t\t// no occurrence -> can return input as-is\n\t\t\treturn inString;\n\t\t}\n\n\t\tint capacity = inString.length();\n\t\tif (newPattern.length() > oldPattern.length()) {\n\t\t\tcapacity += 16;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(capacity);\n\n\t\tint pos = 0;  // our position in the old string\n\t\tint patLen = oldPattern.length();\n\t\twhile (index >= 0) {\n\t\t\tsb.append(inString, pos, index);\n\t\t\tsb.append(newPattern);\n\t\t\tpos = index + patLen;\n\t\t\tindex = inString.indexOf(oldPattern, pos);\n\t\t}\n\n\t\t// append any characters to the right of a match\n\t\tsb.append(inString, pos, inString.length());\n\t\treturn sb.toString();\n\t}\n\n\t/**\n\t * Delete all occurrences of the given substring.\n\t * @param inString the original {@code String}\n\t * @param pattern the pattern to delete all occurrences of\n\t * @return the resulting {@code String}\n\t */\n\tpublic static String delete(String inString, String pattern) {\n\t\treturn replace(inString, pattern, \"\");\n\t}\n\n\t/**\n\t * Delete any character in a given {@code String}.\n\t * @param inString the original {@code String}\n\t * @param charsToDelete a set of characters to delete.\n\t * For example, \"az\\n\" will delete 'a's, 'z's and new lines.\n\t * @return the resulting {@code String}\n\t */\n\tpublic static String deleteAny(String inString, @Nullable String charsToDelete) {\n\t\tif (!hasLength(inString) || !hasLength(charsToDelete)) {\n\t\t\treturn inString;\n\t\t}\n\n\t\tint lastCharIndex = 0;\n\t\tchar[] result = new char[inString.length()];\n\t\tfor (int i = 0; i < inString.length(); i++) {\n\t\t\tchar c = inString.charAt(i);\n\t\t\tif (charsToDelete.indexOf(c) == -1) {\n\t\t\t\tresult[lastCharIndex++] = c;\n\t\t\t}\n\t\t}\n\t\tif (lastCharIndex == inString.length()) {\n\t\t\treturn inString;\n\t\t}\n\t\treturn new String(result, 0, lastCharIndex);\n\t}\n\n\t//---------------------------------------------------------------------\n\t// Convenience methods for working with formatted Strings\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Quote the given {@code String} with single quotes.\n\t * @param str the input {@code String} (for example, \"myString\")\n\t * @return the quoted {@code String} (for example, \"'myString'\"),\n\t * or {@code null} if the input was {@code null}\n\t */\n\tpublic static @Nullable String quote(@Nullable String str) {\n\t\treturn (str != null ? \"'\" + str + \"'\" : null);\n\t}\n\n\t/**\n\t * Turn the given Object into a {@code String} with single quotes\n\t * if it is a {@code String}; keeping the Object as-is else.\n\t * @param obj the input Object (for example, \"myString\")\n\t * @return the quoted {@code String} (for example, \"'myString'\"),\n\t * or the input object as-is if not a {@code String}\n\t */\n\tpublic static @Nullable Object quoteIfString(@Nullable Object obj) {\n\t\treturn (obj instanceof String str ? quote(str) : obj);\n\t}\n\n\t/**\n\t * Unqualify a string qualified by a '.' dot character. For example,\n\t * \"this.name.is.qualified\", returns \"qualified\".\n\t * @param qualifiedName the qualified name\n\t */\n\tpublic static String unqualify(String qualifiedName) {\n\t\treturn unqualify(qualifiedName, DOT_CHAR);\n\t}\n\n\t/**\n\t * Unqualify a string qualified by a separator character. For example,\n\t * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\n\t * @param qualifiedName the qualified name\n\t * @param separator the separator\n\t */\n\tpublic static String unqualify(String qualifiedName, char separator) {\n\t\treturn qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);\n\t}\n\n\t/**\n\t * Capitalize a {@code String}, changing the first letter to\n\t * upper case as per {@link Character#toUpperCase(char)}.\n\t * No other letters are changed.\n\t * @param str the {@code String} to capitalize\n\t * @return the capitalized {@code String}\n\t */\n\tpublic static String capitalize(String str) {\n\t\treturn changeFirstCharacterCase(str, true);\n\t}\n\n\t/**\n\t * Uncapitalize a {@code String}, changing the first letter to\n\t * lower case as per {@link Character#toLowerCase(char)}.\n\t * No other letters are changed.\n\t * @param str the {@code String} to uncapitalize\n\t * @return the uncapitalized {@code String}\n\t */\n\tpublic static String uncapitalize(String str) {\n\t\treturn changeFirstCharacterCase(str, false);\n\t}\n\n\t/**\n\t * Uncapitalize a {@code String} in JavaBeans property format,\n\t * changing the first letter to lower case as per\n\t * {@link Character#toLowerCase(char)}, unless the initial two\n\t * letters are upper case in direct succession.\n\t * @param str the {@code String} to uncapitalize\n\t * @return the uncapitalized {@code String}\n\t * @since 6.0\n\t * @see java.beans.Introspector#decapitalize(String)\n\t */\n\tpublic static String uncapitalizeAsProperty(String str) {\n\t\tif (!hasLength(str) || (str.length() > 1 && Character.isUpperCase(str.charAt(0)) &&\n\t\t\t\tCharacter.isUpperCase(str.charAt(1)))) {\n\t\t\treturn str;\n\t\t}\n\t\treturn changeFirstCharacterCase(str, false);\n\t}\n\n\tprivate static String changeFirstCharacterCase(String str, boolean capitalize) {\n\t\tif (!hasLength(str)) {\n\t\t\treturn str;\n\t\t}\n\n\t\tchar baseChar = str.charAt(0);\n\t\tchar updatedChar;\n\t\tif (capitalize) {\n\t\t\tupdatedChar = Character.toUpperCase(baseChar);\n\t\t}\n\t\telse {\n\t\t\tupdatedChar = Character.toLowerCase(baseChar);\n\t\t}\n\t\tif (baseChar == updatedChar) {\n\t\t\treturn str;\n\t\t}\n\n\t\tchar[] chars = str.toCharArray();\n\t\tchars[0] = updatedChar;\n\t\treturn new String(chars);\n\t}\n\n\t/**\n\t * Extract the filename from the given Java resource path,\n\t * for example, {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}.\n\t * @param path the file path (may be {@code null})\n\t * @return the extracted filename, or {@code null} if none\n\t */\n\tpublic static @Nullable String getFilename(@Nullable String path) {\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\n\t\treturn (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\n\t}\n\n\t/**\n\t * Extract the filename extension from the given Java resource path,\n\t * for example, \"mypath/myfile.txt\" &rarr; \"txt\".\n\t * @param path the file path (may be {@code null})\n\t * @return the extracted filename extension, or {@code null} if none\n\t */\n\tpublic static @Nullable String getFilenameExtension(@Nullable String path) {\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint extIndex = path.lastIndexOf(DOT_CHAR);\n\t\tif (extIndex == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\n\t\tif (folderIndex > extIndex) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn path.substring(extIndex + 1);\n\t}\n\n\t/**\n\t * Strip the filename extension from the given Java resource path,\n\t * for example, \"mypath/myfile.txt\" &rarr; \"mypath/myfile\".\n\t * @param path the file path\n\t * @return the path with stripped filename extension\n\t */\n\tpublic static String stripFilenameExtension(String path) {\n\t\tint extIndex = path.lastIndexOf(DOT_CHAR);\n\t\tif (extIndex == -1) {\n\t\t\treturn path;\n\t\t}\n\n\t\tint folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\n\t\tif (folderIndex > extIndex) {\n\t\t\treturn path;\n\t\t}\n\n\t\treturn path.substring(0, extIndex);\n\t}\n\n\t/**\n\t * Apply the given relative path to the given Java resource path,\n\t * assuming standard Java folder separation (i.e. \"/\" separators).\n\t * @param path the path to start from (usually a full file path)\n\t * @param relativePath the relative path to apply\n\t * (relative to the full file path above)\n\t * @return the full file path that results from applying the relative path\n\t */\n\tpublic static String applyRelativePath(String path, String relativePath) {\n\t\tint separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\n\t\tif (separatorIndex != -1) {\n\t\t\tString newPath = path.substring(0, separatorIndex);\n\t\t\tif (!relativePath.startsWith(FOLDER_SEPARATOR)) {\n\t\t\t\tnewPath += FOLDER_SEPARATOR_CHAR;\n\t\t\t}\n\t\t\treturn newPath + relativePath;\n\t\t}\n\t\telse {\n\t\t\treturn relativePath;\n\t\t}\n\t}\n\n\t/**\n\t * Normalize the path by suppressing sequences like \"path/..\" and\n\t * inner simple dots.\n\t * <p>The result is convenient for path comparison. For other uses,\n\t * notice that Windows separators (\"\\\" and \"\\\\\") are replaced by simple slashes.\n\t * <p><strong>NOTE</strong> that {@code cleanPath} should not be depended\n\t * upon in a security context. Other mechanisms should be used to prevent\n\t * path-traversal issues.\n\t * @param path the original path\n\t * @return the normalized path\n\t */\n\tpublic static String cleanPath(String path) {\n\t\tif (!hasLength(path)) {\n\t\t\treturn path;\n\t\t}\n\n\t\tString normalizedPath;\n\t\t// Optimize when there is no backslash\n\t\tif (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {\n\t\t\tnormalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);\n\t\t\tnormalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\n\t\t}\n\t\telse {\n\t\t\tnormalizedPath = path;\n\t\t}\n\t\tString pathToUse = normalizedPath;\n\n\t\t// Shortcut if there is no work to do\n\t\tif (pathToUse.indexOf(DOT_CHAR) == -1) {\n\t\t\treturn pathToUse;\n\t\t}\n\n\t\t// Strip prefix from path to analyze, to not treat it as part of the\n\t\t// first path element. This is necessary to correctly parse paths like\n\t\t// \"file:core/../core/io/Resource.class\", where the \"..\" should just\n\t\t// strip the first \"core\" directory while keeping the \"file:\" prefix.\n\t\tint prefixIndex = pathToUse.indexOf(':');\n\t\tString prefix = \"\";\n\t\tif (prefixIndex != -1) {\n\t\t\tprefix = pathToUse.substring(0, prefixIndex + 1);\n\t\t\tif (prefix.contains(FOLDER_SEPARATOR)) {\n\t\t\t\tprefix = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpathToUse = pathToUse.substring(prefixIndex + 1);\n\t\t\t}\n\t\t}\n\t\tif (pathToUse.startsWith(FOLDER_SEPARATOR)) {\n\t\t\tprefix = prefix + FOLDER_SEPARATOR;\n\t\t\tpathToUse = pathToUse.substring(1);\n\t\t}\n\n\t\tString[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\n\t\t// we never require more elements than pathArray and in the common case the same number\n\t\tDeque<String> pathElements = new ArrayDeque<>(pathArray.length);\n\t\tint tops = 0;\n\n\t\tfor (int i = pathArray.length - 1; i >= 0; i--) {\n\t\t\tString element = pathArray[i];\n\t\t\tif (CURRENT_PATH.equals(element)) {\n\t\t\t\t// Points to current directory - drop it.\n\t\t\t}\n\t\t\telse if (TOP_PATH.equals(element)) {\n\t\t\t\t// Registering top path found.\n\t\t\t\ttops++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (tops > 0) {\n\t\t\t\t\t// Merging path element with element corresponding to top path.\n\t\t\t\t\ttops--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Normal path element found.\n\t\t\t\t\tpathElements.addFirst(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// All path elements stayed the same - shortcut\n\t\tif (pathArray.length == pathElements.size()) {\n\t\t\treturn normalizedPath;\n\t\t}\n\t\t// Remaining top paths need to be retained.\n\t\tfor (int i = 0; i < tops; i++) {\n\t\t\tpathElements.addFirst(TOP_PATH);\n\t\t}\n\t\t// If nothing else left, at least explicitly point to current path.\n\t\tif (pathElements.size() == 1 && pathElements.getLast().isEmpty() && !prefix.endsWith(FOLDER_SEPARATOR)) {\n\t\t\tpathElements.addFirst(CURRENT_PATH);\n\t\t}\n\n\t\tfinal String joined = collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\n\t\t// avoid string concatenation with empty prefix\n\t\treturn prefix.isEmpty() ? joined : prefix + joined;\n\t}\n\n\t/**\n\t * Compare two paths after normalization of them.\n\t * @param path1 first path for comparison\n\t * @param path2 second path for comparison\n\t * @return whether the two paths are equivalent after normalization\n\t */\n\tpublic static boolean pathEquals(String path1, String path2) {\n\t\treturn cleanPath(path1).equals(cleanPath(path2));\n\t}\n\n\t/**\n\t * Decode the given encoded URI component value. Based on the following rules:\n\t * <ul>\n\t * <li>Alphanumeric characters {@code \"a\"} through {@code \"z\"}, {@code \"A\"} through {@code \"Z\"},\n\t * and {@code \"0\"} through {@code \"9\"} stay the same.</li>\n\t * <li>Special characters {@code \"-\"}, {@code \"_\"}, {@code \".\"}, and {@code \"*\"} stay the same.</li>\n\t * <li>A sequence \"{@code %<i>xy</i>}\" is interpreted as a hexadecimal representation of the character.</li>\n\t * <li>For all other characters (including those already decoded), the output is undefined.</li>\n\t * </ul>\n\t * @param source the encoded String\n\t * @param charset the character set\n\t * @return the decoded value\n\t * @throws IllegalArgumentException when the given source contains invalid encoded sequences\n\t * @since 5.0\n\t * @see java.net.URLDecoder#decode(String, String)\n\t */\n\tpublic static String uriDecode(String source, Charset charset) {\n\t\tint length = source.length();\n\t\tif (length == 0) {\n\t\t\treturn source;\n\t\t}\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream(length);\n\t\tboolean changed = false;\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tint ch = source.charAt(i);\n\t\t\tif (ch == '%') {\n\t\t\t\tif (i + 2 < length) {\n\t\t\t\t\tchar hex1 = source.charAt(i + 1);\n\t\t\t\t\tchar hex2 = source.charAt(i + 2);\n\t\t\t\t\tint u = Character.digit(hex1, 16);\n\t\t\t\t\tint l = Character.digit(hex2, 16);\n\t\t\t\t\tif (u == -1 || l == -1) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\n\t\t\t\t\t}\n\t\t\t\t\tbaos.write((char) ((u << 4) + l));\n\t\t\t\t\ti += 2;\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbaos.write(ch);\n\t\t\t}\n\t\t}\n\t\treturn (changed ? StreamUtils.copyToString(baos, charset) : source);\n\t}\n\n\t/**\n\t * Parse the given {@code String} value into a {@link Locale}, accepting\n\t * the {@link Locale#toString} format as well as BCP 47 language tags as\n\t * specified by {@link Locale#forLanguageTag}.\n\t * @param localeValue the locale value: following either {@code Locale's}\n\t * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\n\t * separators (as an alternative to underscores), or BCP 47 (for example, \"en-UK\")\n\t * @return a corresponding {@code Locale} instance, or {@code null} if none\n\t * @throws IllegalArgumentException in case of an invalid locale specification\n\t * @since 5.0.4\n\t * @see #parseLocaleString\n\t * @see Locale#forLanguageTag\n\t */\n\tpublic static @Nullable Locale parseLocale(String localeValue) {\n\t\tif (!localeValue.contains(\"_\") && !localeValue.contains(\" \")) {\n\t\t\tvalidateLocalePart(localeValue);\n\t\t\tLocale resolved = Locale.forLanguageTag(localeValue);\n\t\t\tif (!resolved.getLanguage().isEmpty()) {\n\t\t\t\treturn resolved;\n\t\t\t}\n\t\t}\n\t\treturn parseLocaleString(localeValue);\n\t}\n\n\t/**\n\t * Parse the given {@code String} representation into a {@link Locale}.\n\t * <p>For many parsing scenarios, this is an inverse operation of\n\t * {@link Locale#toString Locale's toString}, in a lenient sense.\n\t * This method does not aim for strict {@code Locale} design compliance;\n\t * it is rather specifically tailored for typical Spring parsing needs.\n\t * <p><b>Note: This delegate does not accept the BCP 47 language tag format.\n\t * Please use {@link #parseLocale} for lenient parsing of both formats.</b>\n\t * @param localeString the locale {@code String}: following {@code Locale's}\n\t * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\n\t * separators (as an alternative to underscores)\n\t * @return a corresponding {@code Locale} instance, or {@code null} if none\n\t * @throws IllegalArgumentException in case of an invalid locale specification\n\t */\n\t@SuppressWarnings(\"deprecation\")  // for Locale constructors on JDK 19\n\tpublic static @Nullable Locale parseLocaleString(String localeString) {\n\t\tif (localeString.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString delimiter = \"_\";\n\t\tif (!localeString.contains(\"_\") && localeString.contains(\" \")) {\n\t\t\tdelimiter = \" \";\n\t\t}\n\n\t\tString[] tokens = localeString.split(delimiter, -1);\n\t\tif (tokens.length == 1) {\n\t\t\tString language = tokens[0];\n\t\t\tvalidateLocalePart(language);\n\t\t\treturn new Locale(language);\n\t\t}\n\t\telse if (tokens.length == 2) {\n\t\t\tString language = tokens[0];\n\t\t\tvalidateLocalePart(language);\n\t\t\tString country = tokens[1];\n\t\t\tvalidateLocalePart(country);\n\t\t\treturn new Locale(language, country);\n\t\t}\n\t\telse if (tokens.length > 2) {\n\t\t\tString language = tokens[0];\n\t\t\tvalidateLocalePart(language);\n\t\t\tString country = tokens[1];\n\t\t\tvalidateLocalePart(country);\n\t\t\tString variant = Arrays.stream(tokens).skip(2).collect(Collectors.joining(delimiter));\n\t\t\treturn new Locale(language, country, variant);\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Invalid locale format: '\" + localeString + \"'\");\n\t}\n\n\tprivate static void validateLocalePart(String localePart) {\n\t\tfor (int i = 0; i < localePart.length(); i++) {\n\t\t\tchar ch = localePart.charAt(i);\n\t\t\tif (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Parse the given {@code timeZoneString} value into a {@link TimeZone}.\n\t * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\n\t * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\n\t * @return a corresponding {@link TimeZone} instance\n\t * @throws IllegalArgumentException in case of an invalid time zone specification\n\t */\n\tpublic static TimeZone parseTimeZoneString(String timeZoneString) {\n\t\tTimeZone timeZone = TimeZone.getTimeZone(timeZoneString);\n\t\tif (\"GMT\".equals(timeZone.getID()) && !timeZoneString.startsWith(\"GMT\")) {\n\t\t\t// We don't want that GMT fallback...\n\t\t\tthrow new IllegalArgumentException(\"Invalid time zone specification '\" + timeZoneString + \"'\");\n\t\t}\n\t\treturn timeZone;\n\t}\n\n\n\t//---------------------------------------------------------------------\n\t// Convenience methods for working with String arrays\n\t//---------------------------------------------------------------------\n\n\t/**\n\t * Copy the given {@link Collection} into a {@code String} array.\n\t * <p>The {@code Collection} must contain {@code String} elements only.\n\t * @param collection the {@code Collection} to copy\n\t * (potentially {@code null} or empty)\n\t * @return the resulting {@code String} array\n\t */\n\tpublic static String[] toStringArray(@Nullable Collection<String> collection) {\n\t\treturn (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_STRING_ARRAY) : EMPTY_STRING_ARRAY);\n\t}\n\n\t/**\n\t * Copy the given {@link Enumeration} into a {@code String} array.\n\t * <p>The {@code Enumeration} must contain {@code String} elements only.\n\t * @param enumeration the {@code Enumeration} to copy\n\t * (potentially {@code null} or empty)\n\t * @return the resulting {@code String} array\n\t */\n\tpublic static String[] toStringArray(@Nullable Enumeration<String> enumeration) {\n\t\treturn (enumeration != null ? toStringArray(Collections.list(enumeration)) : EMPTY_STRING_ARRAY);\n\t}\n\n\t/**\n\t * Append the given {@code String} to the given {@code String} array,\n\t * returning a new array consisting of the input array contents plus\n\t * the given {@code String}.\n\t * @param array the array to append to (can be {@code null})\n\t * @param str the {@code String} to append\n\t * @return the new array (never {@code null})\n\t */\n\tpublic static String[] addStringToArray(String @Nullable [] array, String str) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\treturn new String[] {str};\n\t\t}\n\n\t\tString[] newArr = new String[array.length + 1];\n\t\tSystem.arraycopy(array, 0, newArr, 0, array.length);\n\t\tnewArr[array.length] = str;\n\t\treturn newArr;\n\t}\n\n\t/**\n\t * Concatenate the given {@code String} arrays into one,\n\t * with overlapping array elements included twice.\n\t * <p>The order of elements in the original arrays is preserved.\n\t * @param array1 the first array (can be {@code null})\n\t * @param array2 the second array (can be {@code null})\n\t * @return the new array ({@code null} if both given arrays were {@code null})\n\t */\n\tpublic static String @Nullable [] concatenateStringArrays(String @Nullable [] array1, String @Nullable [] array2) {\n\t\tif (ObjectUtils.isEmpty(array1)) {\n\t\t\treturn array2;\n\t\t}\n\t\tif (ObjectUtils.isEmpty(array2)) {\n\t\t\treturn array1;\n\t\t}\n\n\t\tString[] newArr = new String[array1.length + array2.length];\n\t\tSystem.arraycopy(array1, 0, newArr, 0, array1.length);\n\t\tSystem.arraycopy(array2, 0, newArr, array1.length, array2.length);\n\t\treturn newArr;\n\t}\n\n\t/**\n\t * Sort the given {@code String} array if necessary.\n\t * @param array the original array (potentially empty)\n\t * @return the array in sorted form (never {@code null})\n\t */\n\tpublic static String[] sortStringArray(String[] array) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\treturn array;\n\t\t}\n\n\t\tArrays.sort(array);\n\t\treturn array;\n\t}\n\n\t/**\n\t * Trim the elements of the given {@code String} array, calling\n\t * {@code String.trim()} on each non-null element.\n\t * @param array the original {@code String} array (potentially empty)\n\t * @return the resulting array (of the same size) with trimmed elements\n\t */\n\tpublic static @Nullable String[] trimArrayElements(@Nullable String[] array) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\treturn array;\n\t\t}\n\n\t\t@Nullable String[] result = new String[array.length];\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tString element = array[i];\n\t\t\tresult[i] = (element != null ? element.trim() : null);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Remove duplicate strings from the given array.\n\t * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.\n\t * @param array the {@code String} array (potentially empty)\n\t * @return an array without duplicates, in natural sort order\n\t */\n\tpublic static String[] removeDuplicateStrings(String[] array) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\treturn array;\n\t\t}\n\n\t\tSet<String> set = new LinkedHashSet<>(Arrays.asList(array));\n\t\treturn toStringArray(set);\n\t}\n\n\t/**\n\t * Split a {@code String} at the first occurrence of the delimiter.\n\t * Does not include the delimiter in the result.\n\t * @param toSplit the string to split (potentially {@code null} or empty)\n\t * @param delimiter to split the string up with (potentially {@code null} or empty)\n\t * @return a two element array with index 0 being before the delimiter, and\n\t * index 1 being after the delimiter (neither element includes the delimiter);\n\t * or {@code null} if the delimiter wasn't found in the given input {@code String}\n\t */\n\tpublic static String @Nullable [] split(@Nullable String toSplit, @Nullable String delimiter) {\n\t\tif (!hasLength(toSplit) || !hasLength(delimiter)) {\n\t\t\treturn null;\n\t\t}\n\t\tint offset = toSplit.indexOf(delimiter);\n\t\tif (offset < 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString beforeDelimiter = toSplit.substring(0, offset);\n\t\tString afterDelimiter = toSplit.substring(offset + delimiter.length());\n\t\treturn new String[] {beforeDelimiter, afterDelimiter};\n\t}\n\n\t/**\n\t * Take an array of strings and split each element based on the given delimiter.\n\t * A {@code Properties} instance is then generated, with the left of the delimiter\n\t * providing the key, and the right of the delimiter providing the value.\n\t * <p>Will trim both the key and value before adding them to the {@code Properties}.\n\t * @param array the array to process\n\t * @param delimiter to split each element using (typically the equals symbol)\n\t * @return a {@code Properties} instance representing the array contents,\n\t * or {@code null} if the array to process was {@code null} or empty\n\t */\n\tpublic static @Nullable Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {\n\t\treturn splitArrayElementsIntoProperties(array, delimiter, null);\n\t}\n\n\t/**\n\t * Take an array of strings and split each element based on the given delimiter.\n\t * A {@code Properties} instance is then generated, with the left of the\n\t * delimiter providing the key, and the right of the delimiter providing the value.\n\t * <p>Will trim both the key and value before adding them to the\n\t * {@code Properties} instance.\n\t * @param array the array to process\n\t * @param delimiter to split each element using (typically the equals symbol)\n\t * @param charsToDelete one or more characters to remove from each element\n\t * prior to attempting the split operation (typically the quotation mark\n\t * symbol), or {@code null} if no removal should occur\n\t * @return a {@code Properties} instance representing the array contents,\n\t * or {@code null} if the array to process was {@code null} or empty\n\t */\n\tpublic static @Nullable Properties splitArrayElementsIntoProperties(\n\t\t\tString[] array, String delimiter, @Nullable String charsToDelete) {\n\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tProperties result = new Properties();\n\t\tfor (String element : array) {\n\t\t\tif (charsToDelete != null) {\n\t\t\t\telement = deleteAny(element, charsToDelete);\n\t\t\t}\n\t\t\tString[] splittedElement = split(element, delimiter);\n\t\t\tif (splittedElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Tokenize the given {@code String} into a {@code String} array via a\n\t * {@link StringTokenizer}.\n\t * <p>Trims tokens and omits empty tokens.\n\t * <p>The given {@code delimiters} string can consist of any number of\n\t * delimiter characters. Each of those characters can be used to separate\n\t * tokens. A delimiter is always a single character; for multi-character\n\t * delimiters, consider using {@link #delimitedListToStringArray}.\n\t * @param str the {@code String} to tokenize (potentially {@code null} or empty)\n\t * @param delimiters the delimiter characters, assembled as a {@code String}\n\t * (each of the characters is individually considered as a delimiter)\n\t * @return an array of the tokens\n\t * @see java.util.StringTokenizer\n\t * @see String#trim()\n\t * @see #delimitedListToStringArray\n\t */\n\tpublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters) {\n\t\treturn tokenizeToStringArray(str, delimiters, true, true);\n\t}\n\n\t/**\n\t * Tokenize the given {@code String} into a {@code String} array via a\n\t * {@link StringTokenizer}.\n\t * <p>The given {@code delimiters} string can consist of any number of\n\t * delimiter characters. Each of those characters can be used to separate\n\t * tokens. A delimiter is always a single character; for multi-character\n\t * delimiters, consider using {@link #delimitedListToStringArray}.\n\t * @param str the {@code String} to tokenize (potentially {@code null} or empty)\n\t * @param delimiters the delimiter characters, assembled as a {@code String}\n\t * (each of the characters is individually considered as a delimiter)\n\t * @param trimTokens trim the tokens via {@link String#trim()}\n\t * @param ignoreEmptyTokens omit empty tokens from the result array\n\t * (only applies to tokens that are empty after trimming; StringTokenizer\n\t * will not consider subsequent delimiters as token in the first place).\n\t * @return an array of the tokens\n\t * @see java.util.StringTokenizer\n\t * @see String#trim()\n\t * @see #delimitedListToStringArray\n\t */\n\tpublic static String[] tokenizeToStringArray(\n\t\t\t@Nullable String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\n\n\t\tif (str == null) {\n\t\t\treturn EMPTY_STRING_ARRAY;\n\t\t}\n\n\t\tStringTokenizer st = new StringTokenizer(str, delimiters);\n\t\tList<String> tokens = new ArrayList<>();\n\t\twhile (st.hasMoreTokens()) {\n\t\t\tString token = st.nextToken();\n\t\t\tif (trimTokens) {\n\t\t\t\ttoken = token.trim();\n\t\t\t}\n\t\t\tif (!ignoreEmptyTokens || !token.isEmpty()) {\n\t\t\t\ttokens.add(token);\n\t\t\t}\n\t\t}\n\t\treturn toStringArray(tokens);\n\t}\n\n\t/**\n\t * Take a {@code String} that is a delimited list and convert it into a\n\t * {@code String} array.\n\t * <p>A single {@code delimiter} may consist of more than one character,\n\t * but it will still be considered as a single delimiter string, rather\n\t * than as a bunch of potential delimiter characters, in contrast to\n\t * {@link #tokenizeToStringArray}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @param delimiter the delimiter between elements (this is a single delimiter,\n\t * rather than a bunch individual delimiter characters)\n\t * @return an array of the tokens in the list\n\t * @see #tokenizeToStringArray\n\t */\n\tpublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter) {\n\t\treturn delimitedListToStringArray(str, delimiter, null);\n\t}\n\n\t/**\n\t * Take a {@code String} that is a delimited list and convert it into\n\t * a {@code String} array.\n\t * <p>A single {@code delimiter} may consist of more than one character,\n\t * but it will still be considered as a single delimiter string, rather\n\t * than as a bunch of potential delimiter characters, in contrast to\n\t * {@link #tokenizeToStringArray}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @param delimiter the delimiter between elements (this is a single delimiter,\n\t * rather than a bunch individual delimiter characters)\n\t * @param charsToDelete a set of characters to delete; useful for deleting unwanted\n\t * line breaks: for example, \"\\r\\n\\f\" will delete all new lines and line feeds in a {@code String}\n\t * @return an array of the tokens in the list\n\t * @see #tokenizeToStringArray\n\t */\n\tpublic static String[] delimitedListToStringArray(\n\t\t\t@Nullable String str, @Nullable String delimiter, @Nullable String charsToDelete) {\n\n\t\tif (str == null) {\n\t\t\treturn EMPTY_STRING_ARRAY;\n\t\t}\n\t\tif (delimiter == null) {\n\t\t\treturn new String[] {str};\n\t\t}\n\n\t\tList<String> result = new ArrayList<>();\n\t\tif (delimiter.isEmpty()) {\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tresult.add(deleteAny(str.substring(i, i + 1), charsToDelete));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint pos = 0;\n\t\t\tint delPos;\n\t\t\twhile ((delPos = str.indexOf(delimiter, pos)) != -1) {\n\t\t\t\tresult.add(deleteAny(str.substring(pos, delPos), charsToDelete));\n\t\t\t\tpos = delPos + delimiter.length();\n\t\t\t}\n\t\t\tif (!str.isEmpty() && pos <= str.length()) {\n\t\t\t\t// Add rest of String, but not in case of empty input.\n\t\t\t\tresult.add(deleteAny(str.substring(pos), charsToDelete));\n\t\t\t}\n\t\t}\n\t\treturn toStringArray(result);\n\t}\n\n\t/**\n\t * Convert a comma delimited list (for example, a row from a CSV file) into an\n\t * array of strings.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @return an array of strings, or the empty array in case of empty input\n\t */\n\tpublic static String[] commaDelimitedListToStringArray(@Nullable String str) {\n\t\treturn delimitedListToStringArray(str, \",\");\n\t}\n\n\t/**\n\t * Convert a comma delimited list (for example, a row from a CSV file) into a set.\n\t * <p>Note that this will suppress duplicates, and as of 4.2, the elements in\n\t * the returned set will preserve the original order in a {@link LinkedHashSet}.\n\t * @param str the input {@code String} (potentially {@code null} or empty)\n\t * @return a set of {@code String} entries in the list\n\t * @see #removeDuplicateStrings(String[])\n\t */\n\tpublic static Set<String> commaDelimitedListToSet(@Nullable String str) {\n\t\tString[] tokens = commaDelimitedListToStringArray(str);\n\t\treturn new LinkedHashSet<>(Arrays.asList(tokens));\n\t}\n\n\t/**\n\t * Convert a {@link Collection} to a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @param prefix the {@code String} to start each element with\n\t * @param suffix the {@code String} to end each element with\n\t * @return the delimited {@code String}\n\t */\n\tpublic static String collectionToDelimitedString(\n\t\t\t@Nullable Collection<?> coll, String delim, String prefix, String suffix) {\n\n\t\tif (CollectionUtils.isEmpty(coll)) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tint totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\n\t\tfor (Object element : coll) {\n\t\t\ttotalLength += String.valueOf(element).length();\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder(totalLength);\n\t\tIterator<?> it = coll.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tsb.append(prefix).append(it.next()).append(suffix);\n\t\t\tif (it.hasNext()) {\n\t\t\t\tsb.append(delim);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\t/**\n\t * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @return the delimited {@code String}\n\t */\n\tpublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim) {\n\t\treturn collectionToDelimitedString(coll, delim, \"\", \"\");\n\t}\n\n\t/**\n\t * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\n\t * @return the delimited {@code String}\n\t */\n\tpublic static String collectionToCommaDelimitedString(@Nullable Collection<?> coll) {\n\t\treturn collectionToDelimitedString(coll, \",\");\n\t}\n\n\t/**\n\t * Convert a {@code String} array into a delimited {@code String} (for example, CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param arr the array to display (potentially {@code null} or empty)\n\t * @param delim the delimiter to use (typically a \",\")\n\t * @return the delimited {@code String}\n\t */\n\tpublic static String arrayToDelimitedString(@Nullable Object @Nullable [] arr, String delim) {\n\t\tif (ObjectUtils.isEmpty(arr)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (arr.length == 1) {\n\t\t\treturn ObjectUtils.nullSafeToString(arr[0]);\n\t\t}\n\n\t\tStringJoiner sj = new StringJoiner(delim);\n\t\tfor (Object elem : arr) {\n\t\t\tsj.add(String.valueOf(elem));\n\t\t}\n\t\treturn sj.toString();\n\t}\n\n\t/**\n\t * Convert a {@code String} array into a comma delimited {@code String}\n\t * (i.e., CSV).\n\t * <p>Useful for {@code toString()} implementations.\n\t * @param arr the array to display (potentially {@code null} or empty)\n\t * @return the delimited {@code String}\n\t */\n\tpublic static String arrayToCommaDelimitedString(@Nullable Object @Nullable [] arr) {\n\t\treturn arrayToDelimitedString(arr, \",\");\n\t}\n\n\t/**\n\t * Truncate the supplied {@link CharSequence}.\n\t * <p>Delegates to {@link #truncate(CharSequence, int)}, supplying {@code 100}\n\t * as the threshold.\n\t * @param charSequence the {@code CharSequence} to truncate\n\t * @return a truncated string, or a string representation of the original\n\t * {@code CharSequence} if its length does not exceed the threshold\n\t * @since 5.3.27\n\t */\n\tpublic static String truncate(CharSequence charSequence) {\n\t\treturn truncate(charSequence, DEFAULT_TRUNCATION_THRESHOLD);\n\t}\n\n\t/**\n\t * Truncate the supplied {@link CharSequence}.\n\t * <p>If the length of the {@code CharSequence} is greater than the threshold,\n\t * this method returns a {@linkplain CharSequence#subSequence(int, int)\n\t * subsequence} of the {@code CharSequence} (up to the threshold) appended\n\t * with the suffix {@code \" (truncated)...\"}. Otherwise, this method returns\n\t * {@code charSequence.toString()}.\n\t * @param charSequence the {@code CharSequence} to truncate\n\t * @param threshold the maximum length after which to truncate; must be a\n\t * positive number\n\t * @return a truncated string, or a string representation of the original\n\t * {@code CharSequence} if its length does not exceed the threshold\n\t * @since 5.3.27\n\t */\n\tpublic static String truncate(CharSequence charSequence, int threshold) {\n\t\tAssert.isTrue(threshold > 0,\n\t\t\t\t() -> \"Truncation threshold must be a positive number: \" + threshold);\n\t\tif (charSequence.length() > threshold) {\n\t\t\treturn charSequence.subSequence(0, threshold) + TRUNCATION_SUFFIX;\n\t\t}\n\t\treturn charSequence.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#EMPTY_STRING_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#EMPTY_STRING_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#FOLDER_SEPARATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#FOLDER_SEPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#FOLDER_SEPARATOR_CHAR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#FOLDER_SEPARATOR_CHAR",
    "headType": "field",
    "relation": "haveType",
    "tail": "char",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#WINDOWS_FOLDER_SEPARATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#WINDOWS_FOLDER_SEPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#WINDOWS_FOLDER_SEPARATOR_CHAR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#WINDOWS_FOLDER_SEPARATOR_CHAR",
    "headType": "field",
    "relation": "haveType",
    "tail": "char",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#DOUBLE_BACKSLASHES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#DOUBLE_BACKSLASHES",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#TOP_PATH",
    "tailType": "field"
  }
]