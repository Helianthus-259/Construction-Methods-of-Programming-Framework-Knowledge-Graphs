[
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumSetSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsInvalidElementTypeForEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsInvalidElementTypeForEnumSet() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> createCollection(EnumSet.class, Object.class, 0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#rejectsInvalidElementTypeForEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsInvalidElementTypeForEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsNullElementTypeForEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsNullElementTypeForEnumSet() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> createCollection(EnumSet.class, null, 0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#rejectsNullElementTypeForEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsNullElementTypeForEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsNullCollectionType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsNullCollectionType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> createCollection(null, Object.class, 0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#rejectsNullCollectionType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsNullCollectionType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsMapsCorrectly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createsMapsCorrectly() {\r\n    // interfaces\r\n    testMap(Map.class, LinkedHashMap.class);\r\n    // on JDK 21: testMap(SequencedMap.class, LinkedHashMap.class);\r\n    testMap(SortedMap.class, TreeMap.class);\r\n    testMap(NavigableMap.class, TreeMap.class);\r\n    testMap(MultiValueMap.class, LinkedMultiValueMap.class);\r\n    // concrete types\r\n    testMap(HashMap.class, HashMap.class);\r\n    testMap(LinkedHashMap.class, LinkedHashMap.class);\r\n    testMap(TreeMap.class, TreeMap.class);\r\n    testMap(LinkedMultiValueMap.class, LinkedMultiValueMap.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createsMapsCorrectly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsMapsCorrectly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#testMap(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testMap(Class<?> mapType, Class<?> resultType) {\r\n    assertThat(CollectionFactory.isApproximableMapType(mapType)).isTrue();\r\n    assertThat(createMap(mapType, 0)).isExactlyInstanceOf(resultType);\r\n    assertThat(createMap(mapType, String.class, 0)).isExactlyInstanceOf(resultType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#testMap(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createsEnumMap() {\r\n    assertThat(createMap(EnumMap.class, Color.class, 0)).isInstanceOf(EnumMap.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createsEnumMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createsEnumMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#rejectsInvalidKeyTypeForEnumMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid rejectsInvalidKeyTypeForEnumMap() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> createMap(EnumMap.class, Object.class, 0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#rejectsInvalidKeyTypeForEnumMap()",
    "tailType": "method"
  }
]