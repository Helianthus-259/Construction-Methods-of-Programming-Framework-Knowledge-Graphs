[
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber3()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocalizedBigDecimalNumber3() {\r\n    String bigDecimalAsString = \"3.14159265358979323846\";\r\n    NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber3()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber3()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseOverflow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseOverflow() {\r\n    String aLong = \"\" + Long.MAX_VALUE;\r\n    String aDouble = \"\" + Double.MAX_VALUE;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Byte.class));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Short.class));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Integer.class));\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.parseNumber(aDouble, Double.class)).isEqualTo(Double.valueOf(Double.MAX_VALUE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseOverflow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseOverflow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseNegativeOverflow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseNegativeOverflow() {\r\n    String aLong = \"\" + Long.MIN_VALUE;\r\n    String aDouble = \"\" + Double.MIN_VALUE;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Byte.class));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Short.class));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Integer.class));\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.parseNumber(aDouble, Double.class)).isEqualTo(Double.valueOf(Double.MIN_VALUE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseNegativeOverflow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseNegativeOverflow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseOverflowUsingNumberFormat()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseOverflowUsingNumberFormat() {\r\n    NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);\r\n    String aLong = \"\" + Long.MAX_VALUE;\r\n    String aDouble = \"\" + Double.MAX_VALUE;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Byte.class, nf));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Short.class, nf));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Integer.class, nf));\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class, nf)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.parseNumber(aDouble, Double.class, nf)).isEqualTo(Double.valueOf(Double.MAX_VALUE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseOverflowUsingNumberFormat()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseOverflowUsingNumberFormat()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseNegativeOverflowUsingNumberFormat()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseNegativeOverflowUsingNumberFormat() {\r\n    NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);\r\n    String aLong = \"\" + Long.MIN_VALUE;\r\n    String aDouble = \"\" + Double.MIN_VALUE;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Byte.class, nf));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Short.class, nf));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> NumberUtils.parseNumber(aLong, Integer.class, nf));\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class, nf)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.parseNumber(aDouble, Double.class, nf)).isEqualTo(Double.valueOf(Double.MIN_VALUE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseNegativeOverflowUsingNumberFormat()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseNegativeOverflowUsingNumberFormat()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertToInteger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertToInteger() {\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(-1), Integer.class)).isEqualTo(Integer.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(0), Integer.class)).isEqualTo(Integer.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(1), Integer.class)).isEqualTo(Integer.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MAX_VALUE), Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MAX_VALUE + 1), Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MIN_VALUE), Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MIN_VALUE - 1), Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) -1, Integer.class)).isEqualTo(Integer.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(0L, Integer.class)).isEqualTo(Integer.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(1L, Integer.class)).isEqualTo(Integer.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) Integer.MAX_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) (Integer.MAX_VALUE + 1), Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) Integer.MIN_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) (Integer.MIN_VALUE - 1), Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(-1, Integer.class)).isEqualTo(Integer.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(0, Integer.class)).isEqualTo(Integer.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(1, Integer.class)).isEqualTo(Integer.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MAX_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MAX_VALUE + 1, Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MIN_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MIN_VALUE - 1, Integer.class)).isEqualTo(Integer.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) -1, Integer.class)).isEqualTo(Integer.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) 0, Integer.class)).isEqualTo(Integer.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) 1, Integer.class)).isEqualTo(Integer.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Short.MAX_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Short.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) (Short.MAX_VALUE + 1), Integer.class)).isEqualTo(Integer.valueOf(Short.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Short.MIN_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Short.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) (Short.MIN_VALUE - 1), Integer.class)).isEqualTo(Integer.valueOf(Short.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) -1, Integer.class)).isEqualTo(Integer.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) 0, Integer.class)).isEqualTo(Integer.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) 1, Integer.class)).isEqualTo(Integer.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Byte.MAX_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Byte.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) (Byte.MAX_VALUE + 1), Integer.class)).isEqualTo(Integer.valueOf(Byte.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Byte.MIN_VALUE, Integer.class)).isEqualTo(Integer.valueOf(Byte.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) (Byte.MIN_VALUE - 1), Integer.class)).isEqualTo(Integer.valueOf(Byte.MAX_VALUE));\r\n    assertToNumberOverflow(Long.MAX_VALUE + 1, Integer.class);\r\n    assertToNumberOverflow(Long.MIN_VALUE - 1, Integer.class);\r\n    assertToNumberOverflow(BigInteger.valueOf(Integer.MAX_VALUE).add(BigInteger.ONE), Integer.class);\r\n    assertToNumberOverflow(BigInteger.valueOf(Integer.MIN_VALUE).subtract(BigInteger.ONE), Integer.class);\r\n    assertToNumberOverflow(new BigDecimal(\"18446744073709551611\"), Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#convertToInteger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertToInteger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertToLong()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertToLong() {\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(-1), Long.class)).isEqualTo(Long.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(0), Long.class)).isEqualTo(Long.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(1), Long.class)).isEqualTo(Long.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Long.MAX_VALUE), Long.class)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Long.MAX_VALUE + 1), Long.class)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Long.MIN_VALUE), Long.class)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Long.MIN_VALUE - 1), Long.class)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((long) -1, Long.class)).isEqualTo(Long.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(0L, Long.class)).isEqualTo(Long.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(1L, Long.class)).isEqualTo(Long.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Long.MAX_VALUE, Long.class)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Long.MAX_VALUE + 1, Long.class)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Long.MIN_VALUE, Long.class)).isEqualTo(Long.valueOf(Long.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Long.MIN_VALUE - 1, Long.class)).isEqualTo(Long.valueOf(Long.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(-1, Long.class)).isEqualTo(Long.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(0, Long.class)).isEqualTo(Long.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(1, Long.class)).isEqualTo(Long.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MAX_VALUE, Long.class)).isEqualTo(Long.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MAX_VALUE + 1, Long.class)).isEqualTo(Long.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MIN_VALUE, Long.class)).isEqualTo(Long.valueOf(Integer.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Integer.MIN_VALUE - 1, Long.class)).isEqualTo(Long.valueOf(Integer.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) -1, Long.class)).isEqualTo(Long.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) 0, Long.class)).isEqualTo(Long.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) 1, Long.class)).isEqualTo(Long.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Short.MAX_VALUE, Long.class)).isEqualTo(Long.valueOf(Short.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) (Short.MAX_VALUE + 1), Long.class)).isEqualTo(Long.valueOf(Short.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Short.MIN_VALUE, Long.class)).isEqualTo(Long.valueOf(Short.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((short) (Short.MIN_VALUE - 1), Long.class)).isEqualTo(Long.valueOf(Short.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) -1, Long.class)).isEqualTo(Long.valueOf(-1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) 0, Long.class)).isEqualTo(Long.valueOf(0));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) 1, Long.class)).isEqualTo(Long.valueOf(1));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Byte.MAX_VALUE, Long.class)).isEqualTo(Long.valueOf(Byte.MAX_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) (Byte.MAX_VALUE + 1), Long.class)).isEqualTo(Long.valueOf(Byte.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass(Byte.MIN_VALUE, Long.class)).isEqualTo(Long.valueOf(Byte.MIN_VALUE));\r\n    assertThat(NumberUtils.convertNumberToTargetClass((byte) (Byte.MIN_VALUE - 1), Long.class)).isEqualTo(Long.valueOf(Byte.MAX_VALUE));\r\n    assertToNumberOverflow(BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE), Long.class);\r\n    assertToNumberOverflow(BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.ONE), Long.class);\r\n    assertToNumberOverflow(new BigDecimal(\"18446744073709551611\"), Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#convertToLong()",
    "tailType": "method"
  }
]