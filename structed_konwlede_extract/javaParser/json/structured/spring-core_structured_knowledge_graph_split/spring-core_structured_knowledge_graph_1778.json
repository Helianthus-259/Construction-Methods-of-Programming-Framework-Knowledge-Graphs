[
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleInheritedComposedAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleInheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMultipleNoninheritedComposedAnnotationsOnClass() {\r\n    Class<?> element = MultipleNoninheritedComposedCachesClass.class;\r\n    Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).hasSize(2);\r\n    Iterator<Cacheable> iterator = cacheables.iterator();\r\n    Cacheable cacheable1 = iterator.next();\r\n    Cacheable cacheable2 = iterator.next();\r\n    assertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\r\n    assertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMultipleNoninheritedComposedAnnotationsOnSuperclass() {\r\n    Class<?> element = SubMultipleNoninheritedComposedCachesClass.class;\r\n    Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).hasSize(2);\r\n    Iterator<Cacheable> iterator = cacheables.iterator();\r\n    Cacheable cacheable1 = iterator.next();\r\n    Cacheable cacheable2 = iterator.next();\r\n    assertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\r\n    assertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findComposedPlusLocalAnnotationsOnClass() {\r\n    assertFindAllMergedAnnotationsBehavior(ComposedPlusLocalCachesClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMultipleComposedAnnotationsOnInterface() {\r\n    assertFindAllMergedAnnotationsBehavior(MultipleComposedCachesOnInterfaceClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedCacheOnInterfaceAndLocalCacheOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findComposedCacheOnInterfaceAndLocalCacheOnClass() {\r\n    assertFindAllMergedAnnotationsBehavior(ComposedCacheOnInterfaceAndLocalCacheClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedCacheOnInterfaceAndLocalCacheOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedCacheOnInterfaceAndLocalCacheOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMultipleComposedAnnotationsOnMethod() throws Exception {\r\n    AnnotatedElement element = getClass().getDeclaredMethod(\"multipleComposedCachesMethod\");\r\n    assertFindAllMergedAnnotationsBehavior(element);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]