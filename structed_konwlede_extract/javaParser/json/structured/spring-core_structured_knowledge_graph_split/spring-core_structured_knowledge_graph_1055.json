[
  {
    "head": "org.springframework.core.io.ResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceLoader#getClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.DefaultPropertySourceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.DefaultPropertySourceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.PropertySource;\n\n/**\n * The default implementation for {@link PropertySourceFactory},\n * wrapping every resource in a {@link ResourcePropertySource}.\n *\n * @author Juergen Hoeller\n * @since 4.3\n * @see PropertySourceFactory\n * @see ResourcePropertySource\n */\npublic class DefaultPropertySourceFactory implements PropertySourceFactory {\n\n\t@Override\n\tpublic PropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource) throws IOException {\n\t\treturn (name != null ? new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.DefaultPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource) throws IOException {\r\n    return (name != null ? new ResourcePropertySource(name, resource) : new ResourcePropertySource(resource));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.DefaultPropertySourceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.DefaultPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.DefaultPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.EncodedResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.nio.charset.Charset;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.InputStreamSource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Holder that combines a {@link Resource} descriptor with a specific encoding\n * or {@code Charset} to be used for reading from the resource.\n *\n * <p>Used as an argument for operations that support reading content with\n * a specific encoding, typically via a {@code java.io.Reader}.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Arjen Poutsma\n * @since 1.2.6\n * @see Resource#getInputStream()\n * @see java.io.Reader\n * @see java.nio.charset.Charset\n */\npublic class EncodedResource implements InputStreamSource {\n\n\tprivate final Resource resource;\n\n\tprivate final @Nullable String encoding;\n\n\tprivate final @Nullable Charset charset;\n\n\n\t/**\n\t * Create a new {@code EncodedResource} for the given {@code Resource},\n\t * not specifying an explicit encoding or {@code Charset}.\n\t * @param resource the {@code Resource} to hold (never {@code null})\n\t */\n\tpublic EncodedResource(Resource resource) {\n\t\tthis(resource, null, null);\n\t}\n\n\t/**\n\t * Create a new {@code EncodedResource} for the given {@code Resource},\n\t * using the specified {@code encoding}.\n\t * @param resource the {@code Resource} to hold (never {@code null})\n\t * @param encoding the encoding to use for reading from the resource\n\t */\n\tpublic EncodedResource(Resource resource, @Nullable String encoding) {\n\t\tthis(resource, encoding, null);\n\t}\n\n\t/**\n\t * Create a new {@code EncodedResource} for the given {@code Resource},\n\t * using the specified {@code Charset}.\n\t * @param resource the {@code Resource} to hold (never {@code null})\n\t * @param charset the {@code Charset} to use for reading from the resource\n\t */\n\tpublic EncodedResource(Resource resource, @Nullable Charset charset) {\n\t\tthis(resource, null, charset);\n\t}\n\n\tprivate EncodedResource(Resource resource, @Nullable String encoding, @Nullable Charset charset) {\n\t\tsuper();\n\t\tAssert.notNull(resource, \"Resource must not be null\");\n\t\tthis.resource = resource;\n\t\tthis.encoding = encoding;\n\t\tthis.charset = charset;\n\t}\n\n\n\t/**\n\t * Return the {@code Resource} held by this {@code EncodedResource}.\n\t */\n\tpublic final Resource getResource() {\n\t\treturn this.resource;\n\t}\n\n\t/**\n\t * Return the encoding to use for reading from the {@linkplain #getResource() resource},\n\t * or {@code null} if none specified.\n\t */\n\tpublic final @Nullable String getEncoding() {\n\t\treturn this.encoding;\n\t}\n\n\t/**\n\t * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},\n\t * or {@code null} if none specified.\n\t */\n\tpublic final @Nullable Charset getCharset() {\n\t\treturn this.charset;\n\t}\n\n\t/**\n\t * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},\n\t * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}\n\t * has been specified.\n\t * @see #getReader()\n\t * @see #getInputStream()\n\t */\n\tpublic boolean requiresReader() {\n\t\treturn (this.encoding != null || this.charset != null);\n\t}\n\n\t/**\n\t * Open a {@code java.io.Reader} for the specified resource, using the specified\n\t * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}\n\t * (if any).\n\t * @throws IOException if opening the Reader failed\n\t * @see #requiresReader()\n\t * @see #getInputStream()\n\t */\n\tpublic Reader getReader() throws IOException {\n\t\tif (this.charset != null) {\n\t\t\treturn new InputStreamReader(this.resource.getInputStream(), this.charset);\n\t\t}\n\t\telse if (this.encoding != null) {\n\t\t\treturn new InputStreamReader(this.resource.getInputStream(), this.encoding);\n\t\t}\n\t\telse {\n\t\t\treturn new InputStreamReader(this.resource.getInputStream());\n\t\t}\n\t}\n\n\t/**\n\t * Open an {@code InputStream} for the specified resource, ignoring any specified\n\t * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}.\n\t * @throws IOException if opening the InputStream failed\n\t * @see #requiresReader()\n\t * @see #getReader()\n\t */\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\treturn this.resource.getInputStream();\n\t}\n\n\t/**\n\t * Returns the contents of the specified resource as a string, using the specified\n\t * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding} (if any).\n\t * @throws IOException if opening the resource failed\n\t * @since 6.0.5\n\t * @see Resource#getContentAsString(Charset)\n\t */\n\tpublic String getContentAsString() throws IOException {\n\t\tCharset charset;\n\t\tif (this.charset != null) {\n\t\t\tcharset = this.charset;\n\t\t}\n\t\telse if (this.encoding != null) {\n\t\t\tcharset = Charset.forName(this.encoding);\n\t\t}\n\t\telse {\n\t\t\tcharset = Charset.defaultCharset();\n\t\t}\n\t\treturn this.resource.getContentAsString(charset);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof EncodedResource that &&\n\t\t\t\tthis.resource.equals(that.resource) &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.charset, that.charset) &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.encoding, that.encoding)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.resource.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.resource.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.EncodedResource#resource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#resource",
    "headType": "field",
    "relation": "haveType",
    "tail": "Resource",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.EncodedResource#encoding",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#encoding",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.EncodedResource#charset",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#charset",
    "headType": "field",
    "relation": "haveType",
    "tail": "Charset",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code Resource} held by this {@code EncodedResource}.\r\n */\r\npublic final Resource getResource() {\r\n    return this.resource;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.EncodedResource#getResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.EncodedResource#getEncoding()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the encoding to use for reading from the {@linkplain #getResource() resource},\r\n * or {@code null} if none specified.\r\n */\r\n@Nullable\r\npublic final String getEncoding() {\r\n    return this.encoding;\r\n}",
    "tailType": "method_code"
  }
]