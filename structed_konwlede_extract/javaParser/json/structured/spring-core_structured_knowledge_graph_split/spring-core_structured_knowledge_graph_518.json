[
  {
    "head": "org.springframework.asm.Type#getType(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the method {@link Type} corresponding to the given method.\r\n *\r\n * @param method a {@link Method} object.\r\n * @return the method {@link Type} corresponding to the given method.\r\n */\r\npublic static Type getType(final Method method) {\r\n    return getType(getMethodDescriptor(method));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getType(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getElementType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the type of the elements of this array type. This method should only be used for an\r\n * array type.\r\n *\r\n * @return Returns the type of the elements of this array type.\r\n */\r\npublic Type getElementType() {\r\n    final int numDimensions = getDimensions();\r\n    return getTypeInternal(valueBuffer, valueBegin + numDimensions, valueEnd);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getElementType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getObjectType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the given internal name.\r\n *\r\n * @param internalName an internal name (see {@link Type#getInternalName()}).\r\n * @return the {@link Type} corresponding to the given internal name.\r\n */\r\npublic static Type getObjectType(final String internalName) {\r\n    return new Type(internalName.charAt(0) == '[' ? ARRAY : INTERNAL, internalName, 0, internalName.length());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getObjectType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getMethodType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the given method descriptor. Equivalent to <code>\r\n * Type.getType(methodDescriptor)</code>.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the {@link Type} corresponding to the given method descriptor.\r\n */\r\npublic static Type getMethodType(final String methodDescriptor) {\r\n    return new Type(METHOD, methodDescriptor, 0, methodDescriptor.length());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getMethodType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getMethodType(Type,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the method {@link Type} corresponding to the given argument and return types.\r\n *\r\n * @param returnType the return type of the method.\r\n * @param argumentTypes the argument types of the method.\r\n * @return the method {@link Type} corresponding to the given argument and return types.\r\n */\r\npublic static Type getMethodType(final Type returnType, final Type... argumentTypes) {\r\n    return getType(getMethodDescriptor(returnType, argumentTypes));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getMethodType(Type,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the argument types of methods of this type. This method should only be used for method\r\n * types.\r\n *\r\n * @return the argument types of methods of this type.\r\n */\r\npublic Type[] getArgumentTypes() {\r\n    return getArgumentTypes(getDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentTypes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} values corresponding to the argument types of the given method\r\n * descriptor.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the {@link Type} values corresponding to the argument types of the given method\r\n *     descriptor.\r\n */\r\npublic static Type[] getArgumentTypes(final String methodDescriptor) {\r\n    // First step: compute the number of argument types in methodDescriptor.\r\n    int numArgumentTypes = getArgumentCount(methodDescriptor);\r\n    // Second step: create a Type instance for each argument type.\r\n    Type[] argumentTypes = new Type[numArgumentTypes];\r\n    // Skip the first character, which is always a '('.\r\n    int currentOffset = 1;\r\n    // Parse and create the argument types, one at each loop iteration.\r\n    int currentArgumentTypeIndex = 0;\r\n    while (methodDescriptor.charAt(currentOffset) != ')') {\r\n        final int currentArgumentTypeOffset = currentOffset;\r\n        while (methodDescriptor.charAt(currentOffset) == '[') {\r\n            currentOffset++;\r\n        }\r\n        if (methodDescriptor.charAt(currentOffset++) == 'L') {\r\n            // Skip the argument descriptor content.\r\n            int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);\r\n            currentOffset = Math.max(currentOffset, semiColumnOffset + 1);\r\n        }\r\n        argumentTypes[currentArgumentTypeIndex++] = getTypeInternal(methodDescriptor, currentArgumentTypeOffset, currentOffset);\r\n    }\r\n    return argumentTypes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentTypes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getArgumentTypes(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} values corresponding to the argument types of the given method.\r\n *\r\n * @param method a method.\r\n * @return the {@link Type} values corresponding to the argument types of the given method.\r\n */\r\npublic static Type[] getArgumentTypes(final Method method) {\r\n    Class<?>[] classes = method.getParameterTypes();\r\n    Type[] types = new Type[classes.length];\r\n    for (int i = classes.length - 1; i >= 0; --i) {\r\n        types[i] = getType(classes[i]);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getArgumentTypes(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the return type of methods of this type. This method should only be used for method\r\n * types.\r\n *\r\n * @return the return type of methods of this type.\r\n */\r\npublic Type getReturnType() {\r\n    return getReturnType(getDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getReturnType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the return type of the given method descriptor.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the {@link Type} corresponding to the return type of the given method descriptor.\r\n */\r\npublic static Type getReturnType(final String methodDescriptor) {\r\n    return getTypeInternal(methodDescriptor, getReturnTypeOffset(methodDescriptor), methodDescriptor.length());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getReturnType(String)",
    "tailType": "method"
  }
]