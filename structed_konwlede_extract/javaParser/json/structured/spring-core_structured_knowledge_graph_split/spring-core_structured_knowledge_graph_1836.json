[
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#canDecode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canDecode() {\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(byte[].class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(byte[].class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#canDecode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decode() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    testDecodeAll(input, byte[].class, step -> step.consumeNextWith(expectBytes(this.fooBytes)).consumeNextWith(expectBytes(this.barBytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#decode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decodeToMono() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    byte[] expected = new byte[this.fooBytes.length + this.barBytes.length];\r\n    System.arraycopy(this.fooBytes, 0, expected, 0, this.fooBytes.length);\r\n    System.arraycopy(this.barBytes, 0, expected, this.fooBytes.length, this.barBytes.length);\r\n    testDecodeToMonoAll(input, byte[].class, step -> step.consumeNextWith(expectBytes(expected)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#decodeToMono()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests#expectBytes(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private Consumer<byte[]> expectBytes(byte[] expected) {\r\n    return bytes -> assertThat(bytes).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoderTests#expectBytes(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  }
]