[
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNestingAndLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodParameterMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forMethodParameter(null)).withMessage(\"MethodParameter must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithSameSignatureAndGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16210\r\n@Test\r\nvoid forMethodParameterWithSameSignatureAndGenerics() throws Exception {\r\n    Method method = Methods.class.getMethod(\"list1\");\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, -1);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(((MethodParameter) type.getSource()).getMethod()).isEqualTo(method);\r\n    method = Methods.class.getMethod(\"list2\");\r\n    methodParameter = MethodParameter.forExecutable(method, -1);\r\n    type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(((MethodParameter) type.getSource()).getMethod()).isEqualTo(method);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithSameSignatureAndGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithSameSignatureAndGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodReturn()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodReturn() throws Exception {\r\n    Method method = Methods.class.getMethod(\"charSequenceReturn\");\r\n    ResolvableType type = ResolvableType.forMethodReturnType(method);\r\n    assertThat(type.getType()).isEqualTo(method.getGenericReturnType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodReturn()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodReturn()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodReturnMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodReturnMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forMethodReturnType(null)).withMessage(\"Method must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodReturnMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodReturnMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericMatchesReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-27748\r\n@Test\r\nvoid genericMatchesReturnType() throws Exception {\r\n    Method method = SomeRepository.class.getMethod(\"someMethod\", Class.class, Class.class, Class.class);\r\n    ResolvableType returnType = ResolvableType.forMethodReturnType(method, SomeRepository.class);\r\n    // generic[0]=T\r\n    ResolvableType arg0 = ResolvableType.forMethodParameter(method, 0, SomeRepository.class);\r\n    // generic[0]=?\r\n    ResolvableType arg1 = ResolvableType.forMethodParameter(method, 1, SomeRepository.class);\r\n    // generic[0]=java.lang.Object\r\n    ResolvableType arg2 = ResolvableType.forMethodParameter(method, 2, SomeRepository.class);\r\n    assertThat(returnType.equalsType(arg0.as(Class.class).getGeneric(0))).isTrue();\r\n    assertThat(returnType.equalsType(arg1.as(Class.class).getGeneric(0))).isFalse();\r\n    assertThat(returnType.equalsType(arg2.as(Class.class).getGeneric(0))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#genericMatchesReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericMatchesReturnType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#classType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid classType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"classType\"));\r\n    assertThat(type.getType().getClass()).isEqualTo(Class.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#classType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#classType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#parameterizedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterizedType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.getType()).isInstanceOf(ParameterizedType.class);\r\n}",
    "tailType": "method_code"
  }
]