[
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#expectByteBuffer(ByteBuf)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Consumer<ByteBuf> expectByteBuffer(ByteBuf expected) {\r\n    return actual -> assertThat(actual).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#expectByteBuffer(ByteBuf)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.StandardCharsets;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.codec.AbstractEncoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Vladislav Kisel\n */\nclass NettyByteBufEncoderTests extends AbstractEncoderTests<NettyByteBufEncoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\tNettyByteBufEncoderTests() {\n\t\tsuper(new NettyByteBufEncoder());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canEncode() {\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuf.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuf.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\n\t\t// gh-20024\n\t\tassertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void encode() {\n\t\tFlux<ByteBuf> input = Flux.just(this.fooBytes, this.barBytes).map(Unpooled::copiedBuffer);\n\n\t\ttestEncodeAll(input, ByteBuf.class, step -> step\n\t\t\t\t.consumeNextWith(expectBytes(this.fooBytes))\n\t\t\t\t.consumeNextWith(expectBytes(this.barBytes))\n\t\t\t\t.verifyComplete());\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.NettyByteBufEncoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.NettyByteBufEncoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuf.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuf.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    // gh-20024\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<ByteBuf> input = Flux.just(this.fooBytes, this.barBytes).map(Unpooled::copiedBuffer);\r\n    testEncodeAll(input, ByteBuf.class, step -> step.consumeNextWith(expectBytes(this.fooBytes)).consumeNextWith(expectBytes(this.barBytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufEncoderTests#encode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]