[
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#canEncode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#encode(Publisher<? extends CharSequence>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> encode(Publisher<? extends CharSequence> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(inputStream).map(charSequence -> encodeValue(charSequence, bufferFactory, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#encode(Publisher<? extends CharSequence>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#encode(Publisher<? extends CharSequence>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#encodeValue(CharSequence,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer encodeValue(CharSequence charSequence, DataBufferFactory bufferFactory, ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    if (!Hints.isLoggingSuppressed(hints)) {\r\n        LogFormatUtils.traceDebug(logger, traceOn -> {\r\n            String formatted = LogFormatUtils.formatValue(charSequence, !traceOn);\r\n            return Hints.getLogPrefix(hints) + \"Writing \" + formatted;\r\n        });\r\n    }\r\n    boolean release = true;\r\n    Charset charset = getCharset(mimeType);\r\n    int capacity = calculateCapacity(charSequence, charset);\r\n    DataBuffer dataBuffer = bufferFactory.allocateBuffer(capacity);\r\n    try {\r\n        dataBuffer.write(charSequence, charset);\r\n        release = false;\r\n    } catch (CoderMalfunctionError ex) {\r\n        throw new EncodingException(\"String encoding error: \" + ex.getMessage(), ex);\r\n    } finally {\r\n        if (release) {\r\n            DataBufferUtils.release(dataBuffer);\r\n        }\r\n    }\r\n    return dataBuffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#encodeValue(CharSequence,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#encodeValue(CharSequence,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#calculateCapacity(CharSequence,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "int calculateCapacity(CharSequence sequence, Charset charset) {\r\n    float maxBytesPerChar = this.charsetToMaxBytesPerChar.computeIfAbsent(charset, cs -> cs.newEncoder().maxBytesPerChar());\r\n    float maxBytesForSequence = sequence.length() * maxBytesPerChar;\r\n    return (int) Math.ceil(maxBytesForSequence);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#calculateCapacity(CharSequence,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#getCharset(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Charset getCharset(@Nullable MimeType mimeType) {\r\n    if (mimeType != null && mimeType.getCharset() != null) {\r\n        return mimeType.getCharset();\r\n    } else {\r\n        return DEFAULT_CHARSET;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#getCharset(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#textPlainOnly()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharSequenceEncoder} that supports only \"text/plain\".\r\n */\r\npublic static CharSequenceEncoder textPlainOnly() {\r\n    return new CharSequenceEncoder(new MimeType(\"text\", \"plain\", DEFAULT_CHARSET));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#textPlainOnly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#allMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharSequenceEncoder} that supports all MIME types.\r\n */\r\npublic static CharSequenceEncoder allMimeTypes() {\r\n    return new CharSequenceEncoder(new MimeType(\"text\", \"plain\", DEFAULT_CHARSET), MimeTypeUtils.ALL);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#allMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.CodecException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.CodecException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]