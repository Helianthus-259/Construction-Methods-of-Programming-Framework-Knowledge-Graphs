[
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#provides",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#provides",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteVector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#packageCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#packageCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#packageIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#packageIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteVector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ModuleWriter#mainClassIndex",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#mainClassIndex",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitMainClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitMainClass(final String mainClass) {\r\n    this.mainClassIndex = symbolTable.addConstantClass(mainClass).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitMainClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitMainClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitPackage(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitPackage(final String packaze) {\r\n    packageIndex.putShort(symbolTable.addConstantPackage(packaze).index);\r\n    packageCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitPackage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitPackage(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitRequire(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitRequire(final String module, final int access, final String version) {\r\n    requires.putShort(symbolTable.addConstantModule(module).index).putShort(access).putShort(version == null ? 0 : symbolTable.addConstantUtf8(version));\r\n    requiresCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitRequire(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitRequire(String,int,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitExport(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitExport(final String packaze, final int access, final String... modules) {\r\n    exports.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access);\r\n    if (modules == null) {\r\n        exports.putShort(0);\r\n    } else {\r\n        exports.putShort(modules.length);\r\n        for (String module : modules) {\r\n            exports.putShort(symbolTable.addConstantModule(module).index);\r\n        }\r\n    }\r\n    exportsCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitExport(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitExport(String,int,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]