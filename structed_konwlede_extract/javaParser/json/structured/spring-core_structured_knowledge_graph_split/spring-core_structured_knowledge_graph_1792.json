[
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenNonRepeatableReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenNonRepeatableReturnsNull() {\r\n    Object[] values = findRepeatedAnnotationValues(RepeatableContainers.of(ExplicitRepeatable.class, ExplicitContainer.class), NonRepeatableTestCase.class, NonRepeatable.class);\r\n    assertThat(values).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenNonRepeatableReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenNonRepeatableReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenStandardRepeatableContainerReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenStandardRepeatableContainerReturnsNull() {\r\n    Object[] values = findRepeatedAnnotationValues(RepeatableContainers.of(ExplicitRepeatable.class, ExplicitContainer.class), StandardRepeatablesTestCase.class, StandardContainer.class);\r\n    assertThat(values).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenStandardRepeatableContainerReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenStandardRepeatableContainerReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerReturnsRepeats()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenContainerReturnsRepeats() {\r\n    Object[] values = findRepeatedAnnotationValues(RepeatableContainers.of(ExplicitRepeatable.class, ExplicitContainer.class), ExplicitRepeatablesTestCase.class, ExplicitContainer.class);\r\n    assertThat(values).containsExactly(\"a\", \"b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerReturnsRepeats()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerReturnsRepeats()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerIsNullDeducesContainer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenContainerIsNullDeducesContainer() {\r\n    Object[] values = findRepeatedAnnotationValues(RepeatableContainers.of(StandardRepeatable.class, null), StandardRepeatablesTestCase.class, StandardContainer.class);\r\n    assertThat(values).containsExactly(\"a\", \"b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerIsNullDeducesContainer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenContainerIsNullDeducesContainer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenHasNoValueThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenHasNoValueThrowsException() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> RepeatableContainers.of(ExplicitRepeatable.class, InvalidNoValue.class)).withMessageContaining(\"Invalid declaration of container type [%s] for repeatable annotation [%s]\", InvalidNoValue.class.getName(), ExplicitRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenHasNoValueThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenHasNoValueThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenValueIsNotArrayThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenValueIsNotArrayThrowsException() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> RepeatableContainers.of(ExplicitRepeatable.class, InvalidNotArray.class)).withMessage(\"Container type [%s] must declare a 'value' attribute for an array of type [%s]\", InvalidNotArray.class.getName(), ExplicitRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenValueIsNotArrayThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenValueIsNotArrayThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenValueIsArrayOfWrongTypeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofExplicitWhenValueIsArrayOfWrongTypeThrowsException() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> RepeatableContainers.of(ExplicitRepeatable.class, InvalidWrongArrayType.class)).withMessage(\"Container type [%s] must declare a 'value' attribute for an array of type [%s]\", InvalidWrongArrayType.class.getName(), ExplicitRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ExplicitRepeatableContainerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ExplicitRepeatableContainerTests#ofExplicitWhenValueIsArrayOfWrongTypeThrowsException()",
    "tailType": "method"
  }
]