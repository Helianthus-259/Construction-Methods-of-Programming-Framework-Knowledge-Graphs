[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation.subpackage",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation.subpackage",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass",
    "headType": "class",
    "relation": "use",
    "tail": "@NonPublicAliasedAnnotation",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation.subpackage;\n\n/**\n * Class annotated with a non-public (i.e., package private) custom annotation\n * that uses {@code @AliasFor}.\n *\n * @author Sam Brannen\n * @since 4.2\n */\n@NonPublicAliasedAnnotation(name = \"test\", path = \"/test\")\nclass NonPublicAliasedAnnotatedClass {\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation.subpackage",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation.subpackage",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation.subpackage",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass",
    "headType": "class",
    "relation": "use",
    "tail": "@NonPublicAnnotation",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation.subpackage;\n\n/**\n * Class annotated with a non-public (i.e., package private) custom annotation.\n *\n * @author Sam Brannen\n * @since 4.0\n */\n@NonPublicAnnotation(42)\npublic class NonPublicAnnotatedClass {\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation.subpackage",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.MethodParameter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * @author Juergen Hoeller\n * @since 5.0\n */\nclass SynthesizingMethodParameterTests {\n\n\tprivate Method method;\n\n\tprivate SynthesizingMethodParameter stringParameter;\n\n\tprivate SynthesizingMethodParameter longParameter;\n\n\tprivate SynthesizingMethodParameter intReturnType;\n\n\n\t@BeforeEach\n\tvoid setUp() throws NoSuchMethodException {\n\t\tmethod = getClass().getMethod(\"method\", String.class, long.class);\n\t\tstringParameter = new SynthesizingMethodParameter(method, 0);\n\t\tlongParameter = new SynthesizingMethodParameter(method, 1);\n\t\tintReturnType = new SynthesizingMethodParameter(method, -1);\n\t}\n\n\n\t@Test\n\tvoid equals() throws NoSuchMethodException {\n\t\tassertThat(stringParameter).isEqualTo(stringParameter);\n\t\tassertThat(longParameter).isEqualTo(longParameter);\n\t\tassertThat(intReturnType).isEqualTo(intReturnType);\n\n\t\tassertThat(stringParameter).isNotEqualTo(longParameter);\n\t\tassertThat(stringParameter).isNotEqualTo(intReturnType);\n\t\tassertThat(longParameter).isNotEqualTo(stringParameter);\n\t\tassertThat(longParameter).isNotEqualTo(intReturnType);\n\t\tassertThat(intReturnType).isNotEqualTo(stringParameter);\n\t\tassertThat(intReturnType).isNotEqualTo(longParameter);\n\n\t\tMethod method = getClass().getMethod(\"method\", String.class, long.class);\n\t\tMethodParameter methodParameter = new SynthesizingMethodParameter(method, 0);\n\t\tassertThat(methodParameter).isEqualTo(stringParameter);\n\t\tassertThat(stringParameter).isEqualTo(methodParameter);\n\t\tassertThat(methodParameter).isNotEqualTo(longParameter);\n\t\tassertThat(longParameter).isNotEqualTo(methodParameter);\n\n\t\tmethodParameter = new MethodParameter(method, 0);\n\t\tassertThat(methodParameter).isEqualTo(stringParameter);\n\t\tassertThat(stringParameter).isEqualTo(methodParameter);\n\t\tassertThat(methodParameter).isNotEqualTo(longParameter);\n\t\tassertThat(longParameter).isNotEqualTo(methodParameter);\n\t}\n\n\t@Test\n\tvoid testHashCode() throws NoSuchMethodException {\n\t\tassertThat(stringParameter.hashCode()).isEqualTo(stringParameter.hashCode());\n\t\tassertThat(longParameter.hashCode()).isEqualTo(longParameter.hashCode());\n\t\tassertThat(intReturnType.hashCode()).isEqualTo(intReturnType.hashCode());\n\n\t\tMethod method = getClass().getMethod(\"method\", String.class, long.class);\n\t\tSynthesizingMethodParameter methodParameter = new SynthesizingMethodParameter(method, 0);\n\t\tassertThat(methodParameter.hashCode()).isEqualTo(stringParameter.hashCode());\n\t\tassertThat(methodParameter.hashCode()).isNotEqualTo(longParameter.hashCode());\n\t}\n\n\t@Test\n\tvoid factoryMethods() {\n\t\tassertThat(SynthesizingMethodParameter.forExecutable(method, 0)).isEqualTo(stringParameter);\n\t\tassertThat(SynthesizingMethodParameter.forExecutable(method, 1)).isEqualTo(longParameter);\n\n\t\tassertThat(SynthesizingMethodParameter.forParameter(method.getParameters()[0])).isEqualTo(stringParameter);\n\t\tassertThat(SynthesizingMethodParameter.forParameter(method.getParameters()[1])).isEqualTo(longParameter);\n\t}\n\n\t@Test\n\tvoid indexValidation() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew SynthesizingMethodParameter(method, 2));\n\t}\n\n\n\tpublic int method(String p1, long p2) {\n\t\treturn 42;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.SynthesizingMethodParameterTests#method",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests#method",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.SynthesizingMethodParameterTests#stringParameter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests#stringParameter",
    "headType": "field",
    "relation": "haveType",
    "tail": "SynthesizingMethodParameter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.SynthesizingMethodParameterTests#longParameter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests#longParameter",
    "headType": "field",
    "relation": "haveType",
    "tail": "SynthesizingMethodParameter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizingMethodParameterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.SynthesizingMethodParameterTests#intReturnType",
    "tailType": "field"
  }
]