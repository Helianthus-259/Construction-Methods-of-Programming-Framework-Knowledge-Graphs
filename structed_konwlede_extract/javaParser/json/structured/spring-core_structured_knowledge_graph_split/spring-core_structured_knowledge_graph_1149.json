[
  {
    "head": "org.springframework.core.WildcardBounds#kind",
    "headType": "field",
    "relation": "haveType",
    "tail": "Kind",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.WildcardBounds#bounds",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.WildcardBounds#bounds",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResolvableType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.WildcardBounds#isSameKind(WildcardBounds)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if these bounds are the same kind as the specified bounds.\r\n */\r\npublic boolean isSameKind(WildcardBounds bounds) {\r\n    return this.kind == bounds.kind;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#isSameKind(WildcardBounds)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#isAssignableFrom(ResolvableType[],Map<Type,Type>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if these bounds are assignable from all the specified types.\r\n * @param types the types to test against\r\n * @return {@code true} if these bounds are assignable from all types\r\n */\r\npublic boolean isAssignableFrom(ResolvableType[] types, @Nullable Map<Type, Type> matchedBefore) {\r\n    for (ResolvableType bound : this.bounds) {\r\n        boolean matched = false;\r\n        for (ResolvableType type : types) {\r\n            if (this.kind == Kind.UPPER ? bound.isAssignableFrom(type, false, matchedBefore, false) : type.isAssignableFrom(bound, false, matchedBefore, false)) {\r\n                matched = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!matched) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#isAssignableFrom(ResolvableType[],Map<Type,Type>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#isAssignableFrom(ResolvableType,Map<Type,Type>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if these bounds are assignable from the specified type.\r\n * @param type the type to test against\r\n * @return {@code true} if these bounds are assignable from the type\r\n * @since 6.2\r\n */\r\npublic boolean isAssignableFrom(ResolvableType type, @Nullable Map<Type, Type> matchedBefore) {\r\n    for (ResolvableType bound : this.bounds) {\r\n        if (this.kind == Kind.UPPER ? !bound.isAssignableFrom(type, false, matchedBefore, false) : !type.isAssignableFrom(bound, false, matchedBefore, false)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#isAssignableFrom(ResolvableType,Map<Type,Type>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#isAssignableTo(ResolvableType,Map<Type,Type>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if these bounds are assignable to the specified type.\r\n * @param type the type to test against\r\n * @return {@code true} if these bounds are assignable to the type\r\n * @since 6.2\r\n */\r\npublic boolean isAssignableTo(ResolvableType type, @Nullable Map<Type, Type> matchedBefore) {\r\n    if (this.kind == Kind.UPPER) {\r\n        for (ResolvableType bound : this.bounds) {\r\n            if (type.isAssignableFrom(bound, false, matchedBefore, false)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    } else {\r\n        return (type.resolve() == Object.class);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#isAssignableTo(ResolvableType,Map<Type,Type>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#equalsType(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if these bounds are equal to the specified type.\r\n * @param type the type to test against\r\n * @return {@code true} if these bounds are equal to the type\r\n * @since 6.2.3\r\n */\r\npublic boolean equalsType(ResolvableType type) {\r\n    for (ResolvableType bound : this.bounds) {\r\n        if (!type.equalsType(bound)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#equalsType(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#getBounds()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying bounds.\r\n */\r\npublic ResolvableType[] getBounds() {\r\n    return this.bounds;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#getBounds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#get(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a {@link WildcardBounds} instance for the specified type, returning\r\n * {@code null} if the specified type cannot be resolved to a {@link WildcardType}\r\n * or an equivalent unresolvable type variable.\r\n * @param type the source type\r\n * @return a {@link WildcardBounds} instance or {@code null}\r\n */\r\n@Nullable\r\npublic static WildcardBounds get(ResolvableType type) {\r\n    ResolvableType candidate = type;\r\n    while (!(candidate.getType() instanceof WildcardType || candidate.isUnresolvableTypeVariable())) {\r\n        if (candidate == NONE) {\r\n            return null;\r\n        }\r\n        candidate = candidate.resolveType();\r\n    }\r\n    Kind boundsType;\r\n    Type[] bounds;\r\n    if (candidate.getType() instanceof WildcardType wildcardType) {\r\n        boundsType = (wildcardType.getLowerBounds().length > 0 ? Kind.LOWER : Kind.UPPER);\r\n        bounds = (boundsType == Kind.UPPER ? wildcardType.getUpperBounds() : wildcardType.getLowerBounds());\r\n    } else {\r\n        boundsType = Kind.UPPER;\r\n        bounds = ((TypeVariable<?>) candidate.getType()).getBounds();\r\n    }\r\n    ResolvableType[] resolvableBounds = new ResolvableType[bounds.length];\r\n    for (int i = 0; i < bounds.length; i++) {\r\n        resolvableBounds[i] = ResolvableType.forType(bounds[i], type.variableResolver);\r\n    }\r\n    return new WildcardBounds(boundsType, resolvableBounds);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.WildcardBounds",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.WildcardBounds#get(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.WildcardBounds#get(ResolvableType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.EmptyType",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.EmptyType",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]