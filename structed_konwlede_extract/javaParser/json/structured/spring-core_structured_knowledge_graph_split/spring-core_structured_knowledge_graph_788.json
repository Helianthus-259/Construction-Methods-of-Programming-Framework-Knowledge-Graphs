[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(String annotationType) {\r\n    return get(annotationType, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(String annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate) {\r\n    return get(annotationType, predicate, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(String annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate, @Nullable MergedAnnotationSelector<A> selector) {\r\n    MergedAnnotation<A> result = find(annotationType, predicate, selector);\r\n    return (result != null ? result : MergedAnnotation.missing());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(String,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#find(Object,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nprivate <A extends Annotation> MergedAnnotation<A> find(Object requiredType, @Nullable Predicate<? super MergedAnnotation<A>> predicate, @Nullable MergedAnnotationSelector<A> selector) {\r\n    if (selector == null) {\r\n        selector = MergedAnnotationSelectors.nearest();\r\n    }\r\n    MergedAnnotation<A> result = null;\r\n    for (int i = 0; i < this.annotations.length; i++) {\r\n        MergedAnnotation<?> root = this.annotations[i];\r\n        if (root != null) {\r\n            AnnotationTypeMappings mappings = this.mappings[i];\r\n            for (int mappingIndex = 0; mappingIndex < mappings.size(); mappingIndex++) {\r\n                AnnotationTypeMapping mapping = mappings.get(mappingIndex);\r\n                if (!isMappingForType(mapping, requiredType)) {\r\n                    continue;\r\n                }\r\n                MergedAnnotation<A> candidate = (mappingIndex == 0 ? (MergedAnnotation<A>) root : TypeMappedAnnotation.createIfPossible(mapping, root, IntrospectionFailureLogger.INFO));\r\n                if (candidate != null && (predicate == null || predicate.test(candidate))) {\r\n                    if (selector.isBestCandidate(candidate)) {\r\n                        return candidate;\r\n                    }\r\n                    result = (result != null ? selector.select(result, candidate) : candidate);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#find(Object,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#find(Object,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#find(Object,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType) {\r\n    return StreamSupport.stream(spliterator(annotationType), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType) {\r\n    return StreamSupport.stream(spliterator(annotationType), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]