[
  {
    "head": "org.springframework.util.SimpleRouteMatcher#getPatternComparator(Route)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.DefaultRoute",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.DefaultRoute",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@code RouteMatcher} that delegates to a {@link PathMatcher}.\n *\n * <p><strong>Note:</strong> This implementation is not efficient since\n * {@code PathMatcher} treats paths and patterns as Strings. For more optimized\n * performance use the {@code PathPatternRouteMatcher} from {@code spring-web}\n * which enables use of parsed routes and patterns.\n *\n * @author Rossen Stoyanchev\n * @since 5.2\n */\npublic class SimpleRouteMatcher implements RouteMatcher {\n\n\tprivate final PathMatcher pathMatcher;\n\n\n\t/**\n\t * Create a new {@code SimpleRouteMatcher} for the given\n\t * {@link PathMatcher} delegate.\n\t */\n\tpublic SimpleRouteMatcher(PathMatcher pathMatcher) {\n\t\tAssert.notNull(pathMatcher, \"PathMatcher is required\");\n\t\tthis.pathMatcher = pathMatcher;\n\t}\n\n\t/**\n\t * Return the underlying {@link PathMatcher} delegate.\n\t */\n\tpublic PathMatcher getPathMatcher() {\n\t\treturn this.pathMatcher;\n\t}\n\n\n\t@Override\n\tpublic Route parseRoute(String route) {\n\t\treturn new DefaultRoute(route);\n\t}\n\n\t@Override\n\tpublic boolean isPattern(String route) {\n\t\treturn this.pathMatcher.isPattern(route);\n\t}\n\n\t@Override\n\tpublic String combine(String pattern1, String pattern2) {\n\t\treturn this.pathMatcher.combine(pattern1, pattern2);\n\t}\n\n\t@Override\n\tpublic boolean match(String pattern, Route route) {\n\t\treturn this.pathMatcher.match(pattern, route.value());\n\t}\n\n\t@Override\n\tpublic @Nullable Map<String, String> matchAndExtract(String pattern, Route route) {\n\t\tif (!match(pattern, route)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.pathMatcher.extractUriTemplateVariables(pattern, route.value());\n\t}\n\n\t@Override\n\tpublic Comparator<String> getPatternComparator(Route route) {\n\t\treturn this.pathMatcher.getPatternComparator(route.value());\n\t}\n\n\n\tprivate static class DefaultRoute implements Route {\n\n\t\tprivate final String path;\n\n\t\tDefaultRoute(String path) {\n\t\t\tthis.path = path;\n\t\t}\n\n\t\t@Override\n\t\tpublic String value() {\n\t\t\treturn this.path;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn value();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DefaultRoute",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DefaultRoute#path",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DefaultRoute#path",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DefaultRoute#value()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String value() {\r\n    return this.path;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultRoute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultRoute#value()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultRoute#value()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultRoute#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return value();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultRoute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultRoute#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultRoute#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.Serializable;\nimport java.util.AbstractCollection;\nimport java.util.AbstractMap;\nimport java.util.AbstractSet;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Adapts a given {@link MultiValueMap} to the {@link Map} contract. The\n * difference with {@link MultiValueMapAdapter} is that this class delegates to\n * a {@code Map<K, V>}, whereas {@link MultiValueMapAdapter} needs a\n * {@code Map<K, List<V>>}. {@link MultiToSingleValueMapAdapter} adapts in the\n * opposite direction as this class.\n *\n * @author Arjen Poutsma\n * @since 6.2\n * @param <K> the key type\n * @param <V> the value element type\n */\n@SuppressWarnings(\"serial\")\nfinal class SingleToMultiValueMapAdapter<K, V> implements MultiValueMap<K, V>, Serializable {\n\n\tprivate final Map<K, V> targetMap;\n\n\tprivate transient @Nullable Collection<List<V>> values;\n\n\tprivate transient @Nullable Set<Entry<K, List<V>>> entries;\n\n\n\t/**\n\t * Wrap the given target {@link Map} as a {@link MultiValueMap} adapter.\n\t * @param targetMap the plain target {@code Map}\n\t */\n\tpublic SingleToMultiValueMapAdapter(Map<K, V> targetMap) {\n\t\tAssert.notNull(targetMap, \"'targetMap' must not be null\");\n\t\tthis.targetMap = targetMap;\n\t}\n\n\n\t// MultiValueMap implementation\n\n\t@Override\n\tpublic @Nullable V getFirst(K key) {\n\t\treturn this.targetMap.get(key);\n\t}\n\n\t@Override\n\tpublic void add(K key, @Nullable V value) {\n\t\tif (!this.targetMap.containsKey(key)) {\n\t\t\tthis.targetMap.put(key, value);\n\t\t}\n\t\telse {\n\t\t\tthrow new UnsupportedOperationException(\"Duplicate key: \" + key);\n\t\t}\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void addAll(K key, List<? extends V> values) {\n\t\tif (!this.targetMap.containsKey(key)) {\n\t\t\tput(key, (List<V>) values);\n\t\t}\n\t\telse {\n\t\t\tthrow new UnsupportedOperationException(\"Duplicate key: \" + key);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void addAll(MultiValueMap<K, V> values) {\n\t\tvalues.forEach(this::addAll);\n\t}\n\n\t@Override\n\tpublic void set(K key, @Nullable V value) {\n\t\tthis.targetMap.put(key, value);\n\t}\n\n\t@Override\n\tpublic void setAll(Map<K, V> values) {\n\t\tthis.targetMap.putAll(values);\n\t}\n\n\t@Override\n\tpublic Map<K, V> toSingleValueMap() {\n\t\treturn Collections.unmodifiableMap(this.targetMap);\n\t}\n\n\n\t// Map implementation\n\n\t@Override\n\tpublic int size() {\n\t\treturn this.targetMap.size();\n\t}\n\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn this.targetMap.isEmpty();\n\t}\n\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn this.targetMap.containsKey(key);\n\t}\n\n\t@Override\n\tpublic boolean containsValue(@Nullable Object value) {\n\t\tIterator<Entry<K, List<V>>> i = entrySet().iterator();\n\t\tif (value == null) {\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tEntry<K, List<V>> e = i.next();\n\t\t\t\tif (e.getValue() == null || e.getValue().isEmpty()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (i.hasNext()) {\n\t\t\t\tEntry<K, List<V>> e = i.next();\n\t\t\t\tif (value.equals(e.getValue())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> get(Object key) {\n\t\tV value = this.targetMap.get(key);\n\t\treturn (value != null) ? Collections.singletonList(value) : null;\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> put(K key, List<V> values) {\n\t\tif (values.isEmpty()) {\n\t\t\tV result = this.targetMap.put(key, null);\n\t\t\treturn (result != null) ? Collections.singletonList(result) : null;\n\t\t}\n\t\telse if (values.size() == 1) {\n\t\t\tV result = this.targetMap.put(key, values.get(0));\n\t\t\treturn (result != null) ? Collections.singletonList(result) : null;\n\t\t}\n\t\telse {\n\t\t\tthrow new UnsupportedOperationException(\"Duplicate key: \" + key);\n\t\t}\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> remove(Object key) {\n\t\tV result = this.targetMap.remove(key);\n\t\treturn (result != null) ? Collections.singletonList(result) : null;\n\t}\n\n\t@Override\n\tpublic void putAll(Map<? extends K, ? extends List<V>> map) {\n\t\tfor (Entry<? extends K, ? extends List<V>> entry : map.entrySet()) {\n\t\t\tput(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthis.targetMap.clear();\n\t}\n\n\t@Override\n\tpublic Set<K> keySet() {\n\t\treturn this.targetMap.keySet();\n\t}\n\n\t@Override\n\tpublic Collection<List<V>> values() {\n\t\tCollection<List<V>> values = this.values;\n\t\tif (values == null) {\n\t\t\tCollection<V> targetValues = this.targetMap.values();\n\t\t\tvalues = new AbstractCollection<>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Iterator<List<V>> iterator() {\n\t\t\t\t\tIterator<V> targetIterator = targetValues.iterator();\n\t\t\t\t\treturn new Iterator<>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\t\t\treturn targetIterator.hasNext();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic List<V> next() {\n\t\t\t\t\t\t\treturn Collections.singletonList(targetIterator.next());\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn targetValues.size();\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.values = values;\n\t\t}\n\t\treturn values;\n\t}\n\n\t@Override\n\tpublic Set<Entry<K, List<V>>> entrySet() {\n\t\tSet<Entry<K, List<V>>> entries = this.entries;\n\t\tif (entries == null) {\n\t\t\tSet<Entry<K, V>> targetEntries = this.targetMap.entrySet();\n\t\t\tentries = new AbstractSet<>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Iterator<Entry<K, List<V>>> iterator() {\n\t\t\t\t\tIterator<Entry<K, V>> targetIterator = targetEntries.iterator();\n\t\t\t\t\treturn new Iterator<>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\t\t\treturn targetIterator.hasNext();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Entry<K, List<V>> next() {\n\t\t\t\t\t\t\tEntry<K, V> entry = targetIterator.next();\n\t\t\t\t\t\t\treturn new AbstractMap.SimpleImmutableEntry<>(entry.getKey(),\n\t\t\t\t\t\t\t\t\tCollections.singletonList(entry.getValue()));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn targetEntries.size();\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.entries = entries;\n\t\t}\n\t\treturn entries;\n\t}\n\n\t@Override\n\tpublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\n\t\tthis.targetMap.forEach((k, v) -> action.accept(k, Collections.singletonList(v)));\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\tif (this == other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (other instanceof Map<?,?> otherMap && size() == otherMap.size()) {\n\t\t\ttry {\n\t\t\t\tfor (Entry<K, List<V>> e : entrySet()) {\n\t\t\t\t\tK key = e.getKey();\n\t\t\t\t\tList<V> values = e.getValue();\n\t\t\t\t\tif (values == null) {\n\t\t\t\t\t\tif (otherMap.get(key) != null || !otherMap.containsKey(key)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!values.equals(otherMap.get(key))) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (ClassCastException | NullPointerException ignored) {\n\t\t\t\t// fall through\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.targetMap.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.targetMap.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapter#targetMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter#targetMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<K, V>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapter#values",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter#values",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<List<V>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapter#entries",
    "tailType": "field"
  }
]