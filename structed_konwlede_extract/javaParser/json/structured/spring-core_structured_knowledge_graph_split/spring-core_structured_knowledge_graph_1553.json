[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationDoesNotMatchInvokeDeclaredMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchInvokeDeclaredMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesTypeHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodIntrospectionMatchesTypeHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class);\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesTypeHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesTypeHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesMethodHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodIntrospectionMatchesMethodHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesMethodHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesMethodHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodIntrospectionMatchesIntrospectDeclaredMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS);\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesIntrospectDeclaredMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodIntrospectionMatchesInvokeDeclaredMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_METHODS);\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodIntrospectionMatchesInvokeDeclaredMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodInvocationDoesNotMatchMethodHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\r\n    assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationDoesNotMatchMethodHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesMethodInvocationHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateMethodInvocationMatchesMethodInvocationHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INVOKE));\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#privateMethodInvocationMatchesMethodInvocationHint()",
    "tailType": "method"
  }
]