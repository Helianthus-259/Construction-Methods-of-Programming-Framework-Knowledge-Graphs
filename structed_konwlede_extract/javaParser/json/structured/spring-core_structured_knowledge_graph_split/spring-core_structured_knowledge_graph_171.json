[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the method that matches the given selector.\r\n * This looks up a method on the given type with the expected name, if unique.\r\n * @param className the name of the class holding the method\r\n * @param methodName the method name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws ClassNotFoundException if the class cannot be resolved.\r\n * @throws IllegalArgumentException if the method cannot be found or if multiple methods are found with the same name.\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onMethodInvocation(String className, String methodName) throws ClassNotFoundException {\r\n    Assert.hasText(className, \"'className' must not be empty\");\r\n    Assert.hasText(methodName, \"'methodName' must not be empty\");\r\n    return onMethod(Class.forName(className), methodName).invoke();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#getMethod(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Method getMethod(Class<?> type, String methodName) {\r\n    ReflectionUtils.MethodFilter selector = method -> methodName.equals(method.getName());\r\n    Set<Method> methods = MethodIntrospector.selectMethods(type, selector);\r\n    if (methods.size() == 1) {\r\n        return methods.iterator().next();\r\n    } else if (methods.size() > 1) {\r\n        throw new IllegalArgumentException(\"Found multiple methods named '%s' on class %s\".formatted(methodName, type.getName()));\r\n    } else {\r\n        throw new IllegalArgumentException(\"No method named '%s' on class %s\".formatted(methodName, type.getName()));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#getMethod(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflective field access hint is registered for the field.\r\n * This looks up a field on the given type with the expected name, if present.\r\n * @param type the type holding the field\r\n * @param fieldName the field name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws IllegalArgumentException if a field cannot be found with the given name.\r\n * @deprecated since 7.0 in favor of {@link #onFieldAccess(Class, String)} with similar semantics.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic Predicate<RuntimeHints> onField(Class<?> type, String fieldName) {\r\n    return onFieldAccess(type, fieldName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflective field access hint is registered for the field.\r\n * This looks up a field on the given type with the expected name, if present.\r\n * @param type the type holding the field\r\n * @param fieldName the field name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws IllegalArgumentException if a field cannot be found with the given name.\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onFieldAccess(Class<?> type, String fieldName) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    Assert.hasText(fieldName, \"'fieldName' must not be empty\");\r\n    Field field = ReflectionUtils.findField(type, fieldName);\r\n    if (field == null) {\r\n        throw new IllegalArgumentException(\"No field named '%s' on class %s\".formatted(fieldName, type.getName()));\r\n    }\r\n    return new FieldHintPredicate(field);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflective field access hint is registered for the field.\r\n * This looks up a field on the given type with the expected name, if present.\r\n * @param className the name of the class holding the field\r\n * @param fieldName the field name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws ClassNotFoundException if the class cannot be resolved.\r\n * @throws IllegalArgumentException if a field cannot be found with the given name.\r\n * @deprecated since 7.0 in favor of {@link #onFieldAccess(String, String)} with similar semantics.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic Predicate<RuntimeHints> onField(String className, String fieldName) throws ClassNotFoundException {\r\n    return onFieldAccess(className, fieldName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the field.\r\n * This looks up a field on the given type with the expected name, if present.\r\n * @param className the name of the class holding the field\r\n * @param fieldName the field name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws ClassNotFoundException if the class cannot be resolved.\r\n * @throws IllegalArgumentException if a field cannot be found with the given name.\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onFieldAccess(String className, String fieldName) throws ClassNotFoundException {\r\n    Assert.hasText(className, \"'className' must not be empty\");\r\n    Assert.hasText(fieldName, \"'fieldName' must not be empty\");\r\n    return onFieldAccess(Class.forName(className), fieldName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Field)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflective field access hint is registered for the given field.\r\n * @param field the field\r\n * @return the {@link RuntimeHints} predicate\r\n * @deprecated since 7.0 in favor of {@link #onFieldAccess(Field)} with similar semantics.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic Predicate<RuntimeHints> onField(Field field) {\r\n    return onFieldAccess(field);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Field)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onField(Field)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(Field)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the given field.\r\n * @param field the field\r\n * @return the {@link RuntimeHints} predicate\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onFieldAccess(Field field) {\r\n    Assert.notNull(field, \"'field' must not be null\");\r\n    return new FieldHintPredicate(field);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onFieldAccess(Field)",
    "tailType": "method"
  }
]