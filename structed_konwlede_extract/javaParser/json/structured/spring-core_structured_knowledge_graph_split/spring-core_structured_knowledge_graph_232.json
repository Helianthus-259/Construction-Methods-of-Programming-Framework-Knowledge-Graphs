[
  {
    "head": "org.springframework.aot.hint.ExecutableKey#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FixedBackOffTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.backoff.BackOffExecution;\nimport org.springframework.util.backoff.FixedBackOff;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Stephane Nicoll\n */\nclass FixedBackOffTests {\n\n\t@Test\n\tvoid defaultInstance() {\n\t\tFixedBackOff backOff = new FixedBackOff();\n\t\tBackOffExecution execution = backOff.start();\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tassertThat(execution.nextBackOff()).isEqualTo(FixedBackOff.DEFAULT_INTERVAL);\n\t\t}\n\t}\n\n\t@Test\n\tvoid noAttemptAtAll() {\n\t\tFixedBackOff backOff = new FixedBackOff(100L, 0L);\n\t\tBackOffExecution execution = backOff.start();\n\t\tassertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\n\t}\n\n\t@Test\n\tvoid maxAttemptsReached() {\n\t\tFixedBackOff backOff = new FixedBackOff(200L, 2);\n\t\tBackOffExecution execution = backOff.start();\n\t\tassertThat(execution.nextBackOff()).isEqualTo(200L);\n\t\tassertThat(execution.nextBackOff()).isEqualTo(200L);\n\t\tassertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\n\t}\n\n\t@Test\n\tvoid startReturnDifferentInstances() {\n\t\tFixedBackOff backOff = new FixedBackOff(100L, 1);\n\t\tBackOffExecution execution = backOff.start();\n\t\tBackOffExecution execution2 = backOff.start();\n\n\t\tassertThat(execution.nextBackOff()).isEqualTo(100L);\n\t\tassertThat(execution2.nextBackOff()).isEqualTo(100L);\n\t\tassertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\n\t\tassertThat(execution2.nextBackOff()).isEqualTo(BackOffExecution.STOP);\n\t}\n\n\t@Test\n\tvoid liveUpdate() {\n\t\tFixedBackOff backOff = new FixedBackOff(100L, 1);\n\t\tBackOffExecution execution = backOff.start();\n\t\tassertThat(execution.nextBackOff()).isEqualTo(100L);\n\n\t\tbackOff.setInterval(200L);\n\t\tbackOff.setMaxAttempts(2);\n\n\t\tassertThat(execution.nextBackOff()).isEqualTo(200L);\n\t\tassertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\n\t}\n\n\t@Test\n\tvoid toStringContent() {\n\t\tFixedBackOff backOff = new FixedBackOff(200L, 10);\n\t\tBackOffExecution execution = backOff.start();\n\t\tassertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=0, maxAttempts=10}\");\n\t\texecution.nextBackOff();\n\t\tassertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=1, maxAttempts=10}\");\n\t\texecution.nextBackOff();\n\t\tassertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=2, maxAttempts=10}\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#defaultInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultInstance() {\r\n    FixedBackOff backOff = new FixedBackOff();\r\n    BackOffExecution execution = backOff.start();\r\n    for (int i = 0; i < 100; i++) {\r\n        assertThat(execution.nextBackOff()).isEqualTo(FixedBackOff.DEFAULT_INTERVAL);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#defaultInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#defaultInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#noAttemptAtAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noAttemptAtAll() {\r\n    FixedBackOff backOff = new FixedBackOff(100L, 0L);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#noAttemptAtAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#noAttemptAtAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#maxAttemptsReached()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxAttemptsReached() {\r\n    FixedBackOff backOff = new FixedBackOff(200L, 2);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(200L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(200L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#maxAttemptsReached()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#maxAttemptsReached()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#startReturnDifferentInstances()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startReturnDifferentInstances() {\r\n    FixedBackOff backOff = new FixedBackOff(100L, 1);\r\n    BackOffExecution execution = backOff.start();\r\n    BackOffExecution execution2 = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution2.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n    assertThat(execution2.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#startReturnDifferentInstances()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#startReturnDifferentInstances()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#liveUpdate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid liveUpdate() {\r\n    FixedBackOff backOff = new FixedBackOff(100L, 1);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    backOff.setInterval(200L);\r\n    backOff.setMaxAttempts(2);\r\n    assertThat(execution.nextBackOff()).isEqualTo(200L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#liveUpdate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#liveUpdate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#toStringContent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toStringContent() {\r\n    FixedBackOff backOff = new FixedBackOff(200L, 10);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=0, maxAttempts=10}\");\r\n    execution.nextBackOff();\r\n    assertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=1, maxAttempts=10}\");\r\n    execution.nextBackOff();\r\n    assertThat(execution.toString()).isEqualTo(\"FixedBackOff{interval=200, currentAttempts=2, maxAttempts=10}\");\r\n}",
    "tailType": "method_code"
  }
]