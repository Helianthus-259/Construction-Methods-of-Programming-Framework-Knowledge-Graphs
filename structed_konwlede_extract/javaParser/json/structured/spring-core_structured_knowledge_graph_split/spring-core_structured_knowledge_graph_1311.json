[
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.function.Predicate;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * {@link Iterator} that filters out values that do not match a predicate.\n *\n * <p>This type is used by {@link CompositeMap}.\n *\n * @author Arjen Poutsma\n * @since 6.2\n * @param <E> the type of elements returned by this iterator\n */\nfinal class FilteredIterator<E> implements Iterator<E> {\n\n\tprivate final Iterator<E> delegate;\n\n\tprivate final Predicate<E> filter;\n\n\tprivate @Nullable E next;\n\n\tprivate boolean hasNext;\n\n\n\tpublic FilteredIterator(Iterator<E> delegate, Predicate<E> filter) {\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\tAssert.notNull(filter, \"Filter must not be null\");\n\t\tthis.delegate = delegate;\n\t\tthis.filter = filter;\n\t}\n\n\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn (this.hasNext || setNext());\n\t}\n\n\t@Override\n\tpublic E next() {\n\t\tif (!this.hasNext && !setNext()) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\tthis.hasNext = false;\n\t\tAssert.state(this.next != null, \"Next should not be null\");\n\t\treturn this.next;\n\t}\n\n\tprivate boolean setNext() {\n\t\twhile (this.delegate.hasNext()) {\n\t\t\tE next = this.delegate.next();\n\t\t\tif (this.filter.test(next)) {\n\t\t\t\tthis.next = next;\n\t\t\t\tthis.hasNext = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FilteredIterator#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FilteredIterator#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "Iterator<E>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FilteredIterator#filter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FilteredIterator#filter",
    "headType": "field",
    "relation": "haveType",
    "tail": "Predicate<E>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FilteredIterator#next",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FilteredIterator#next",
    "headType": "field",
    "relation": "haveType",
    "tail": "E",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FilteredIterator#hasNext",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FilteredIterator#hasNext",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FilteredIterator#hasNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasNext() {\r\n    return (this.hasNext || setNext());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredIterator#hasNext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredIterator#hasNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredIterator#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic E next() {\r\n    if (!this.hasNext && !setNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    this.hasNext = false;\r\n    Assert.state(this.next != null, \"Next should not be null\");\r\n    return this.next;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredIterator#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredIterator#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredIterator#setNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean setNext() {\r\n    while (this.delegate.hasNext()) {\r\n        E next = this.delegate.next();\r\n        if (this.filter.test(next)) {\r\n            this.next = next;\r\n            this.hasNext = true;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredIterator#setNext()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FilteredMap",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.AbstractMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Predicate;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Map that filters out values that do not match a predicate.\n * This type is used by {@link CompositeMap}.\n *\n * @author Arjen Poutsma\n * @since 6.2\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n */\nfinal class FilteredMap<K, V> extends AbstractMap<K, V> {\n\n\tprivate final Map<K, V> delegate;\n\n\tprivate final Predicate<K> filter;\n\n\n\tpublic FilteredMap(Map<K, V> delegate, Predicate<K> filter) {\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\tAssert.notNull(filter, \"Filter must not be null\");\n\t\tthis.delegate = delegate;\n\t\tthis.filter = filter;\n\t}\n\n\n\t@Override\n\tpublic Set<Entry<K, V>> entrySet() {\n\t\treturn new FilteredSet<>(this.delegate.entrySet(), entry -> this.filter.test(entry.getKey()));\n\t}\n\n\t@Override\n\tpublic int size() {\n\t\tint size = 0;\n\t\tfor (K k : keySet()) {\n\t\t\tif (this.filter.test(k)) {\n\t\t\t\tsize++;\n\t\t\t}\n\t\t}\n\t\treturn size;\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic boolean containsKey(Object key) {\n\t\tif (this.delegate.containsKey(key)) {\n\t\t\treturn this.filter.test((K) key);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic @Nullable V get(Object key) {\n\t\tV value = this.delegate.get(key);\n\t\tif (value != null && this.filter.test((K) key)) {\n\t\t\treturn value;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\tpublic @Nullable V put(K key, V value) {\n\t\tV oldValue = this.delegate.put(key, value);\n\t\tif (oldValue != null && this.filter.test(key)) {\n\t\t\treturn oldValue;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic @Nullable V remove(Object key) {\n\t\tV oldValue = this.delegate.remove(key);\n\t\tif (oldValue != null && this.filter.test((K) key)) {\n\t\t\treturn oldValue;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthis.delegate.clear();\n\t}\n\n\t@Override\n\tpublic Set<K> keySet() {\n\t\treturn new FilteredSet<>(this.delegate.keySet(), this.filter);\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]