[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#forAnnotations(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the fully qualified class names of all meta-annotation types\r\n * <em>present</em> on the annotation (of the specified {@code annotationType})\r\n * on the supplied {@link AnnotatedElement}.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationType the annotation type on which to find meta-annotations\r\n * @return the names of all meta-annotations present on the annotation,\r\n * or an empty set if not found\r\n * @since 4.2\r\n * @see #getMetaAnnotationTypes(AnnotatedElement, String)\r\n * @see #hasMetaAnnotationTypes\r\n */\r\npublic static Set<String> getMetaAnnotationTypes(AnnotatedElement element, Class<? extends Annotation> annotationType) {\r\n    return getMetaAnnotationTypes(element, element.getAnnotation(annotationType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the fully qualified class names of all meta-annotation\r\n * types <em>present</em> on the annotation (of the specified\r\n * {@code annotationName}) on the supplied {@link AnnotatedElement}.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationName the fully qualified class name of the annotation\r\n * type on which to find meta-annotations\r\n * @return the names of all meta-annotations present on the annotation,\r\n * or an empty set if none found\r\n * @see #getMetaAnnotationTypes(AnnotatedElement, Class)\r\n * @see #hasMetaAnnotationTypes\r\n */\r\npublic static Set<String> getMetaAnnotationTypes(AnnotatedElement element, String annotationName) {\r\n    for (Annotation annotation : element.getAnnotations()) {\r\n        if (annotation.annotationType().getName().equals(annotationName)) {\r\n            return getMetaAnnotationTypes(element, annotation);\r\n        }\r\n    }\r\n    return Collections.emptySet();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Set<String> getMetaAnnotationTypes(AnnotatedElement element, @Nullable Annotation annotation) {\r\n    if (annotation == null) {\r\n        return Collections.emptySet();\r\n    }\r\n    return getAnnotations(annotation.annotationType()).stream().map(mergedAnnotation -> mergedAnnotation.getType().getName()).collect(Collectors.toCollection(LinkedHashSet::new));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getMetaAnnotationTypes(AnnotatedElement,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#hasMetaAnnotationTypes(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied {@link AnnotatedElement} is annotated with\r\n * a <em>composed annotation</em> that is meta-annotated with an\r\n * annotation of the specified {@code annotationType}.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationType the meta-annotation type to find\r\n * @return {@code true} if a matching meta-annotation is present\r\n * @since 4.2.3\r\n * @see #getMetaAnnotationTypes\r\n */\r\npublic static boolean hasMetaAnnotationTypes(AnnotatedElement element, Class<? extends Annotation> annotationType) {\r\n    return getAnnotations(element).stream(annotationType).anyMatch(MergedAnnotation::isMetaPresent);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#hasMetaAnnotationTypes(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#hasMetaAnnotationTypes(AnnotatedElement,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied {@link AnnotatedElement} is annotated with a\r\n * <em>composed annotation</em> that is meta-annotated with an annotation\r\n * of the specified {@code annotationName}.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationName the fully qualified class name of the\r\n * meta-annotation type to find\r\n * @return {@code true} if a matching meta-annotation is present\r\n * @see #getMetaAnnotationTypes\r\n */\r\npublic static boolean hasMetaAnnotationTypes(AnnotatedElement element, String annotationName) {\r\n    return getAnnotations(element).stream(annotationName).anyMatch(MergedAnnotation::isMetaPresent);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#hasMetaAnnotationTypes(AnnotatedElement,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#isAnnotated(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if an annotation of the specified {@code annotationType}\r\n * is <em>present</em> on the supplied {@link AnnotatedElement} or\r\n * within the annotation hierarchy <em>above</em> the specified element.\r\n * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}\r\n * will return a non-null value.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationType the annotation type to find\r\n * @return {@code true} if a matching annotation is present\r\n * @since 4.2.3\r\n * @see #hasAnnotation(AnnotatedElement, Class)\r\n */\r\npublic static boolean isAnnotated(AnnotatedElement element, Class<? extends Annotation> annotationType) {\r\n    // Shortcut: directly present on the element, with no merging needed?\r\n    if (AnnotationFilter.PLAIN.matches(annotationType) || AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {\r\n        return element.isAnnotationPresent(annotationType);\r\n    }\r\n    // Exhaustive retrieval of merged annotations...\r\n    return getAnnotations(element).isPresent(annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#isAnnotated(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#isAnnotated(AnnotatedElement,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if an annotation of the specified {@code annotationName} is\r\n * <em>present</em> on the supplied {@link AnnotatedElement} or within the\r\n * annotation hierarchy <em>above</em> the specified element.\r\n * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}\r\n * will return a non-null value.\r\n * <p>This method follows <em>get semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationName the fully qualified class name of the annotation type to find\r\n * @return {@code true} if a matching annotation is present\r\n */\r\npublic static boolean isAnnotated(AnnotatedElement element, String annotationName) {\r\n    return getAnnotations(element).isPresent(annotationName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#isAnnotated(AnnotatedElement,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the first annotation of the specified {@code annotationType} within\r\n * the annotation hierarchy <em>above</em> the supplied {@code element} and\r\n * merge that annotation's attributes with <em>matching</em> attributes from\r\n * annotations in lower levels of the annotation hierarchy.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both\r\n * within a single annotation and within the annotation hierarchy.\r\n * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}.\r\n * @param element the annotated element\r\n * @param annotationType the annotation type to find\r\n * @return the merged {@code AnnotationAttributes}, or {@code null} if not found\r\n * @since 4.2\r\n * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n * @see #getMergedAnnotation(AnnotatedElement, Class)\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n */\r\n@Nullable\r\npublic static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, Class<? extends Annotation> annotationType) {\r\n    MergedAnnotation<?> mergedAnnotation = getAnnotations(element).get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared());\r\n    return getAnnotationAttributes(mergedAnnotation, false, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getMergedAnnotationAttributes(AnnotatedElement,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the first annotation of the specified {@code annotationName} within\r\n * the annotation hierarchy <em>above</em> the supplied {@code element} and\r\n * merge that annotation's attributes with <em>matching</em> attributes from\r\n * annotations in lower levels of the annotation hierarchy.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both\r\n * within a single annotation and within the annotation hierarchy.\r\n * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)},\r\n * supplying {@code false} for {@code classValuesAsString} and {@code nestedAnnotationsAsMap}.\r\n * @param element the annotated element\r\n * @param annotationName the fully qualified class name of the annotation type to find\r\n * @return the merged {@code AnnotationAttributes}, or {@code null} if not found\r\n * @since 4.2\r\n * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #getAllAnnotationAttributes(AnnotatedElement, String)\r\n */\r\n@Nullable\r\npublic static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element, String annotationName) {\r\n    return getMergedAnnotationAttributes(element, annotationName, false, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getMergedAnnotationAttributes(AnnotatedElement,String)",
    "tailType": "method"
  }
]