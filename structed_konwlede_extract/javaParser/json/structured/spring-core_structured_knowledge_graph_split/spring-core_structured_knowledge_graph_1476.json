[
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetector#endComment(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Try to consume the {@link #END_COMMENT} token.\r\n * @see #commentToken(String, String, boolean)\r\n */\r\nprivate int endComment(String line) {\r\n    return commentToken(line, END_COMMENT, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XmlValidationModeDetector#endComment(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetector#commentToken(String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Try to consume the supplied token against the supplied content and update the\r\n * \"in comment\" parse state to the supplied value.\r\n * <p>Returns the index into the content which is after the token or -1 if the\r\n * token is not found.\r\n */\r\nprivate int commentToken(String line, String token, boolean inCommentIfPresent) {\r\n    int index = line.indexOf(token);\r\n    if (index > -1) {\r\n        this.inComment = inCommentIfPresent;\r\n    }\r\n    return (index == -1 ? index : index + token.length());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XmlValidationModeDetector#commentToken(String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.VirtualThreadDelegate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.ThreadFactory;\n\n/**\n * Internal delegate for virtual thread handling on JDK 21.\n * This is the actual version compiled against JDK 21.\n *\n * @author Juergen Hoeller\n * @since 6.1\n * @see VirtualThreadTaskExecutor\n */\nfinal class VirtualThreadDelegate {\n\n\tprivate final Thread.Builder threadBuilder = Thread.ofVirtual();\n\n\tpublic ThreadFactory virtualThreadFactory() {\n\t\treturn this.threadBuilder.factory();\n\t}\n\n\tpublic ThreadFactory virtualThreadFactory(String threadNamePrefix) {\n\t\treturn this.threadBuilder.name(threadNamePrefix, 0).factory();\n\t}\n\n\tpublic Thread newVirtualThread(String name, Runnable task) {\n\t\treturn this.threadBuilder.name(name).unstarted(task);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#threadBuilder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#threadBuilder",
    "headType": "field",
    "relation": "haveType",
    "tail": "Thread.Builder",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "public ThreadFactory virtualThreadFactory() {\r\n    return this.threadBuilder.factory();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public ThreadFactory virtualThreadFactory(String threadNamePrefix) {\r\n    return this.threadBuilder.name(threadNamePrefix, 0).factory();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#virtualThreadFactory(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate#newVirtualThread(String,Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "public Thread newVirtualThread(String name, Runnable task) {\r\n    return this.threadBuilder.name(name).unstarted(task);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.VirtualThreadDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.VirtualThreadDelegate#newVirtualThread(String,Runnable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "a",
    "tailType": "package"
  },
  {
    "head": "a",
    "headType": "package",
    "relation": "haveClass",
    "tail": "a.ClassHavingNestedClass",
    "tailType": "class"
  },
  {
    "head": "a.ClassHavingNestedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage a;\n\n/**\n * Test class for {@code org.springframework.util.ClassUtilsTests}.\n *\n * <p>The use case for this test class requires that the package name is a single\n * character (i.e., length of 1).\n *\n * @author Johnny Lim\n */\npublic class ClassHavingNestedClass {\n\n\tpublic static class NestedClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "a",
    "headType": "package",
    "relation": "haveClass",
    "tail": "a.NestedClass",
    "tailType": "class"
  },
  {
    "head": "a.NestedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage a;\n\n/**\n * Test class for {@code org.springframework.util.ClassUtilsTests}.\n *\n * <p>The use case for this test class requires that the package name is a single\n * character (i.e., length of 1).\n *\n * @author Johnny Lim\n */\npublic class ClassHavingNestedClass {\n\n\tpublic static class NestedClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]