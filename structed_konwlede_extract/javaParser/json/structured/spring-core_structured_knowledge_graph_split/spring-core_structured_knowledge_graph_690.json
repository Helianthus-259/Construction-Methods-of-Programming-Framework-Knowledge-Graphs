[
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform;\n\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic class ClassFilterTransformer extends AbstractClassFilterTransformer {\n    private ClassFilter filter;\n\n    public ClassFilterTransformer(ClassFilter filter, ClassTransformer pass) {\n        super(pass);\n        this.filter = filter;\n    }\n\n    @Override\n    protected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces) {\n        return filter.accept(name.replace('/', '.'));\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassFilterTransformer#filter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer#filter",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    return filter.accept(name.replace('/', '.'));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassFilterTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassFilterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.ClassReaderGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.ClassReader;\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.ClassGenerator;\n\npublic class ClassReaderGenerator implements ClassGenerator {\n    private final ClassReader r;\n    private final Attribute[] attrs;\n    private final int flags;\n\n    public ClassReaderGenerator(ClassReader r, int flags) {\n        this(r, null, flags);\n    }\n\n    public ClassReaderGenerator(ClassReader r, Attribute[] attrs, int flags) {\n        this.r = r;\n        this.attrs = (attrs != null) ? attrs : new Attribute[0];\n        this.flags = flags;\n    }\n\n    @Override\n\tpublic void generateClass(ClassVisitor v) {\n        r.accept(v, attrs, flags);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassReaderGenerator#r",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator#r",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassReader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassReaderGenerator#attrs",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator#attrs",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassReaderGenerator#flags",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator#flags",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    r.accept(v, attrs, flags);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassReaderGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  }
]