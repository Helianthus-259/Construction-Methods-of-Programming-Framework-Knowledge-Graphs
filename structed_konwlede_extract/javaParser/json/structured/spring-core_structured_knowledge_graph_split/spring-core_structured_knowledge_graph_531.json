[
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#setSource(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#setTarget(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setTarget(Class target) {\r\n    this.target = target;\r\n    // SPRING PATCH BEGIN\r\n    setContextClass(target);\r\n    setNamePrefix(target.getName());\r\n    // SPRING PATCH END\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#setTarget(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setUseConverter(boolean useConverter) {\r\n    this.useConverter = useConverter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#setUseConverter(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return source.getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness.marked.unmarked",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public BeanCopier create() {\r\n    Object key = KEY_FACTORY.newInstance(source.getName(), target.getName(), useConverter);\r\n    return (BeanCopier) super.create(key);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.nullness.marked.unmarked;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\n\npublic interface PackageUnmarkedJSpecifyProcessor {\n\n\tString process(String unspecified, @Nullable String nullable, @NonNull String nonNull);\n\n\t@Nullable String nullableProcess();\n\n\t@NonNull String nonNullProcess();\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#process(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "String process(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#process(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nullableProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nString nullableProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nullableProcess()",
    "tailType": "method"
  }
]