[
  {
    "head": "org.springframework.util.StringUtilsTests#matchesCharacter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startsWithIgnoreCase() {\r\n    String prefix = \"fOo\";\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"foo\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"Foo\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"foobar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"foobarbar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"Foobar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"FoobarBar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"foObar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"FOObar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"fOobar\", prefix)).isTrue();\r\n    assertThat(StringUtils.startsWithIgnoreCase(null, prefix)).isFalse();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"fOobar\", null)).isFalse();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"b\", prefix)).isFalse();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"barfoo\", prefix)).isFalse();\r\n    assertThat(StringUtils.startsWithIgnoreCase(\"barfoobar\", prefix)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#startsWithIgnoreCase()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * Exception thrown when the constant pool of a class produced by a {@link ClassWriter} is too\n * large.\n *\n * @author Jason Zaugg\n */\npublic final class ClassTooLargeException extends IndexOutOfBoundsException {\n  private static final long serialVersionUID = 160715609518896765L;\n\n  private final String className;\n  private final int constantPoolCount;\n\n  /**\n   * Constructs a new {@link ClassTooLargeException}.\n   *\n   * @param className the internal name of the class (see {@link\n   *     org.objectweb.asm.Type#getInternalName()}).\n   * @param constantPoolCount the number of constant pool items of the class.\n   */\n  public ClassTooLargeException(final String className, final int constantPoolCount) {\n    super(\"Class too large: \" + className);\n    this.className = className;\n    this.constantPoolCount = constantPoolCount;\n  }\n\n  /**\n   * Returns the internal name of the class (see {@link org.objectweb.asm.Type#getInternalName()}).\n   *\n   * @return the internal name of the class.\n   */\n  public String getClassName() {\n    return className;\n  }\n\n  /**\n   * Returns the number of constant pool items of the class.\n   *\n   * @return the number of constant pool items of the class.\n   */\n  public int getConstantPoolCount() {\n    return constantPoolCount;\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassTooLargeException#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassTooLargeException#className",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException#className",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassTooLargeException#constantPoolCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException#constantPoolCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException#getClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal name of the class (see {@link org.objectweb.asm.Type#getInternalName()}).\r\n *\r\n * @return the internal name of the class.\r\n */\r\npublic String getClassName() {\r\n    return className;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassTooLargeException#getClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException#getConstantPoolCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of constant pool items of the class.\r\n *\r\n * @return the number of constant pool items of the class.\r\n */\r\npublic int getConstantPoolCount() {\r\n    return constantPoolCount;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassTooLargeException#getConstantPoolCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassTooLargeException",
    "headType": "class",
    "relation": "extend",
    "tail": "IndexOutOfBoundsException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid endsWithIgnoreCase() {\r\n    String suffix = \"fOo\";\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"foo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"Foo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barfoo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barbarfoo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barFoo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barBarFoo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barfoO\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barFOO\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barfOo\", suffix)).isTrue();\r\n    assertThat(StringUtils.endsWithIgnoreCase(null, suffix)).isFalse();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barfOo\", null)).isFalse();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"b\", suffix)).isFalse();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"foobar\", suffix)).isFalse();\r\n    assertThat(StringUtils.endsWithIgnoreCase(\"barfoobar\", suffix)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#endsWithIgnoreCase()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#substringMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid substringMatch() {\r\n    assertThat(StringUtils.substringMatch(\"foo\", 0, \"foo\")).isTrue();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 1, \"oo\")).isTrue();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 2, \"o\")).isTrue();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 0, \"fOo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 1, \"fOo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 2, \"fOo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 3, \"fOo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 1, \"Oo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 2, \"Oo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 3, \"Oo\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 2, \"O\")).isFalse();\r\n    assertThat(StringUtils.substringMatch(\"foo\", 3, \"O\")).isFalse();\r\n}",
    "tailType": "method_code"
  }
]