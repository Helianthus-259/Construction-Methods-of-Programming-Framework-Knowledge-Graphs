[
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#assertMatch(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertMatch(String type, String typePattern) throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type);\r\n    AspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader());\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n    ClassloadingAssertions.assertClassNotLoaded(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#assertMatch(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#assertNoMatch(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertNoMatch(String type, String typePattern) throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type);\r\n    AspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader());\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isFalse();\r\n    ClassloadingAssertions.assertClassNotLoaded(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#assertNoMatch(String,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.AssignableTypeFilterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\nimport org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\nimport org.springframework.core.type.filter.AssignableTypeFilter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n */\nclass AssignableTypeFilterTests {\n\n\t@Test\n\tvoid directMatch() throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tString classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$TestNonInheritingClass\";\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n\n\t\tAssignableTypeFilter matchingFilter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestNonInheritingClass.class);\n\t\tAssignableTypeFilter notMatchingFilter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestInterface.class);\n\t\tassertThat(notMatchingFilter.match(metadataReader, metadataReaderFactory)).isFalse();\n\t\tassertThat(matchingFilter.match(metadataReader, metadataReaderFactory)).isTrue();\n\t}\n\n\t@Test\n\tvoid interfaceMatch() throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tString classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$TestInterfaceImpl\";\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n\n\t\tAssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestInterface.class);\n\t\tassertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\n\t\tClassloadingAssertions.assertClassNotLoaded(classUnderTest);\n\t}\n\n\t@Test\n\tvoid superClassMatch() throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tString classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$SomeDaoLikeImpl\";\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n\n\t\tAssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.SimpleJdbcDaoSupport.class);\n\t\tassertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\n\t\tClassloadingAssertions.assertClassNotLoaded(classUnderTest);\n\t}\n\n\t@Test\n\tvoid interfaceThroughSuperClassMatch() throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tString classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$SomeDaoLikeImpl\";\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n\n\t\tAssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.JdbcDaoSupport.class);\n\t\tassertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\n\t\tClassloadingAssertions.assertClassNotLoaded(classUnderTest);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#directMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directMatch() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    String classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$TestNonInheritingClass\";\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\r\n    AssignableTypeFilter matchingFilter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestNonInheritingClass.class);\r\n    AssignableTypeFilter notMatchingFilter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestInterface.class);\r\n    assertThat(notMatchingFilter.match(metadataReader, metadataReaderFactory)).isFalse();\r\n    assertThat(matchingFilter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AssignableTypeFilterTests#directMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#directMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#interfaceMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid interfaceMatch() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    String classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$TestInterfaceImpl\";\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\r\n    AssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.TestInterface.class);\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AssignableTypeFilterTests#interfaceMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#interfaceMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#superClassMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superClassMatch() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    String classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$SomeDaoLikeImpl\";\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\r\n    AssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.SimpleJdbcDaoSupport.class);\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AssignableTypeFilterTests#superClassMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#superClassMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#interfaceThroughSuperClassMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid interfaceThroughSuperClassMatch() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    String classUnderTest = \"example.type.AssignableTypeFilterTestsTypes$SomeDaoLikeImpl\";\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\r\n    AssignableTypeFilter filter = new AssignableTypeFilter(example.type.AssignableTypeFilterTestsTypes.JdbcDaoSupport.class);\r\n    assertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\r\n    ClassloadingAssertions.assertClassNotLoaded(classUnderTest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AssignableTypeFilterTests#interfaceThroughSuperClassMatch()",
    "tailType": "method"
  }
]