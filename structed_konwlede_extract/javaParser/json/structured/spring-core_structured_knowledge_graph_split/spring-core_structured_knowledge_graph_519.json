[
  {
    "head": "org.springframework.asm.Type#getReturnType(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the return type of the given method.\r\n *\r\n * @param method a method.\r\n * @return the {@link Type} corresponding to the return type of the given method.\r\n */\r\npublic static Type getReturnType(final Method method) {\r\n    return getType(method.getReturnType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getReturnType(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getReturnTypeOffset(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the start index of the return type of the given method descriptor.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return the start index of the return type of the given method descriptor.\r\n */\r\nstatic int getReturnTypeOffset(final String methodDescriptor) {\r\n    // Skip the first character, which is always a '('.\r\n    int currentOffset = 1;\r\n    // Skip the argument types, one at a each loop iteration.\r\n    while (methodDescriptor.charAt(currentOffset) != ')') {\r\n        while (methodDescriptor.charAt(currentOffset) == '[') {\r\n            currentOffset++;\r\n        }\r\n        if (methodDescriptor.charAt(currentOffset++) == 'L') {\r\n            // Skip the argument descriptor content.\r\n            int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);\r\n            currentOffset = Math.max(currentOffset, semiColumnOffset + 1);\r\n        }\r\n    }\r\n    return currentOffset + 1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getReturnTypeOffset(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the given field or method descriptor.\r\n *\r\n * @param descriptorBuffer a buffer containing the field or method descriptor.\r\n * @param descriptorBegin the beginning index, inclusive, of the field or method descriptor in\r\n *     descriptorBuffer.\r\n * @param descriptorEnd the end index, exclusive, of the field or method descriptor in\r\n *     descriptorBuffer.\r\n * @return the {@link Type} corresponding to the given type descriptor.\r\n */\r\nprivate static Type getTypeInternal(final String descriptorBuffer, final int descriptorBegin, final int descriptorEnd) {\r\n    switch(descriptorBuffer.charAt(descriptorBegin)) {\r\n        case 'V':\r\n            return VOID_TYPE;\r\n        case 'Z':\r\n            return BOOLEAN_TYPE;\r\n        case 'C':\r\n            return CHAR_TYPE;\r\n        case 'B':\r\n            return BYTE_TYPE;\r\n        case 'S':\r\n            return SHORT_TYPE;\r\n        case 'I':\r\n            return INT_TYPE;\r\n        case 'F':\r\n            return FLOAT_TYPE;\r\n        case 'J':\r\n            return LONG_TYPE;\r\n        case 'D':\r\n            return DOUBLE_TYPE;\r\n        case '[':\r\n            return new Type(ARRAY, descriptorBuffer, descriptorBegin, descriptorEnd);\r\n        case 'L':\r\n            return new Type(OBJECT, descriptorBuffer, descriptorBegin + 1, descriptorEnd - 1);\r\n        case '(':\r\n            return new Type(METHOD, descriptorBuffer, descriptorBegin, descriptorEnd);\r\n        default:\r\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptorBuffer);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getTypeInternal(String,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Methods to get class names, internal names or descriptors.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the binary name of the class corresponding to this type. This method must not be used\r\n * on method types.\r\n *\r\n * @return the binary name of the class corresponding to this type.\r\n */\r\npublic String getClassName() {\r\n    switch(sort) {\r\n        case VOID:\r\n            return \"void\";\r\n        case BOOLEAN:\r\n            return \"boolean\";\r\n        case CHAR:\r\n            return \"char\";\r\n        case BYTE:\r\n            return \"byte\";\r\n        case SHORT:\r\n            return \"short\";\r\n        case INT:\r\n            return \"int\";\r\n        case FLOAT:\r\n            return \"float\";\r\n        case LONG:\r\n            return \"long\";\r\n        case DOUBLE:\r\n            return \"double\";\r\n        case ARRAY:\r\n            StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName());\r\n            for (int i = getDimensions(); i > 0; --i) {\r\n                stringBuilder.append(\"[]\");\r\n            }\r\n            return stringBuilder.toString();\r\n        case OBJECT:\r\n        case INTERNAL:\r\n            return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.');\r\n        default:\r\n            throw new AssertionError();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getInternalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal name of the class corresponding to this object or array type. The internal\r\n * name of a class is its fully qualified name (as returned by Class.getName(), where '.' are\r\n * replaced by '/'). This method should only be used for an object or array type.\r\n *\r\n * @return the internal name of the class corresponding to this object type.\r\n */\r\npublic String getInternalName() {\r\n    return valueBuffer.substring(valueBegin, valueEnd);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getInternalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getInternalName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal name of the given class. The internal name of a class is its fully\r\n * qualified name, as returned by Class.getName(), where '.' are replaced by '/'.\r\n *\r\n * @param clazz an object or array class.\r\n * @return the internal name of the given class.\r\n */\r\npublic static String getInternalName(final Class<?> clazz) {\r\n    return clazz.getName().replace('.', '/');\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getInternalName(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor corresponding to this type.\r\n *\r\n * @return the descriptor corresponding to this type.\r\n */\r\npublic String getDescriptor() {\r\n    if (sort == OBJECT) {\r\n        return valueBuffer.substring(valueBegin - 1, valueEnd + 1);\r\n    } else if (sort == INTERNAL) {\r\n        return 'L' + valueBuffer.substring(valueBegin, valueEnd) + ';';\r\n    } else {\r\n        return valueBuffer.substring(valueBegin, valueEnd);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getDescriptor(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor corresponding to the given class.\r\n *\r\n * @param clazz an object class, a primitive class or an array class.\r\n * @return the descriptor corresponding to the given class.\r\n */\r\npublic static String getDescriptor(final Class<?> clazz) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    appendDescriptor(clazz, stringBuilder);\r\n    return stringBuilder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getDescriptor(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getConstructorDescriptor(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor corresponding to the given constructor.\r\n *\r\n * @param constructor a {@link Constructor} object.\r\n * @return the descriptor of the given constructor.\r\n */\r\npublic static String getConstructorDescriptor(final Constructor<?> constructor) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    stringBuilder.append('(');\r\n    Class<?>[] parameters = constructor.getParameterTypes();\r\n    for (Class<?> parameter : parameters) {\r\n        appendDescriptor(parameter, stringBuilder);\r\n    }\r\n    return stringBuilder.append(\")V\").toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getConstructorDescriptor(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getMethodDescriptor(Type,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor corresponding to the given argument and return types.\r\n *\r\n * @param returnType the return type of the method.\r\n * @param argumentTypes the argument types of the method.\r\n * @return the descriptor corresponding to the given argument and return types.\r\n */\r\npublic static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    stringBuilder.append('(');\r\n    for (Type argumentType : argumentTypes) {\r\n        argumentType.appendDescriptor(stringBuilder);\r\n    }\r\n    stringBuilder.append(')');\r\n    returnType.appendDescriptor(stringBuilder);\r\n    return stringBuilder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getMethodDescriptor(Type,Type)",
    "tailType": "method"
  }
]