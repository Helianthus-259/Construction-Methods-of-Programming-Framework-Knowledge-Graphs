[
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Method findMethod(String desc) {\r\n    return findMethod(desc, defaultLoader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findMethod(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findMethod(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Method findMethod(String desc, ClassLoader loader) {\r\n    try {\r\n        int lparen = desc.indexOf('(');\r\n        int dot = desc.lastIndexOf('.', lparen);\r\n        String className = desc.substring(0, dot).trim();\r\n        String methodName = desc.substring(dot + 1, lparen).trim();\r\n        return getClass(className, loader).getDeclaredMethod(methodName, parseTypes(desc, loader));\r\n    } catch (ClassNotFoundException | NoSuchMethodException ex) {\r\n        throw new CodeGenerationException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findMethod(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#parseTypes(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Class[] parseTypes(String desc, ClassLoader loader) throws ClassNotFoundException {\r\n    int lparen = desc.indexOf('(');\r\n    int rparen = desc.indexOf(')', lparen);\r\n    List params = new ArrayList();\r\n    int start = lparen + 1;\r\n    for (; ; ) {\r\n        int comma = desc.indexOf(',', start);\r\n        if (comma < 0) {\r\n            break;\r\n        }\r\n        params.add(desc.substring(start, comma).trim());\r\n        start = comma + 1;\r\n    }\r\n    if (start < rparen) {\r\n        params.add(desc.substring(start, rparen).trim());\r\n    }\r\n    Class[] types = new Class[params.size()];\r\n    for (int i = 0; i < types.length; i++) {\r\n        types[i] = getClass((String) params.get(i), loader);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#parseTypes(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Class getClass(String className, ClassLoader loader) throws ClassNotFoundException {\r\n    return getClass(className, loader, CGLIB_PACKAGES);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Class getClass(String className, ClassLoader loader, String[] packages) throws ClassNotFoundException {\r\n    String save = className;\r\n    int dimensions = 0;\r\n    int index = 0;\r\n    while ((index = className.indexOf(\"[]\", index) + 1) > 0) {\r\n        dimensions++;\r\n    }\r\n    StringBuilder brackets = new StringBuilder(className.length() - dimensions);\r\n    for (int i = 0; i < dimensions; i++) {\r\n        brackets.append('[');\r\n    }\r\n    className = className.substring(0, className.length() - 2 * dimensions);\r\n    String prefix = (dimensions > 0) ? brackets + \"L\" : \"\";\r\n    String suffix = (dimensions > 0) ? \";\" : \"\";\r\n    try {\r\n        return Class.forName(prefix + className + suffix, false, loader);\r\n    } catch (ClassNotFoundException ignore) ;\r\n    for (String pkg : packages) {\r\n        try {\r\n            return Class.forName(prefix + pkg + '.' + className + suffix, false, loader);\r\n        } catch (ClassNotFoundException ignore) ;\r\n    }\r\n    if (dimensions == 0) {\r\n        Class c = (Class) primitives.get(className);\r\n        if (c != null) {\r\n            return c;\r\n        }\r\n    } else {\r\n        String transform = (String) transforms.get(className);\r\n        if (transform != null) {\r\n            try {\r\n                return Class.forName(brackets + transform, false, loader);\r\n            } catch (ClassNotFoundException ignore) ;\r\n        }\r\n    }\r\n    throw new ClassNotFoundException(save);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getClass(String,ClassLoader,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Object newInstance(Class type) {\r\n    return newInstance(type, Constants.EMPTY_CLASS_ARRAY, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#newInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Object newInstance(Class type, Class[] parameterTypes, Object[] args) {\r\n    return newInstance(getConstructor(type, parameterTypes), args);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#newInstance(Class,Class[],Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"deprecation\")\r\npublic static Object newInstance(final Constructor cstruct, final Object[] args) {\r\n    boolean flag = cstruct.isAccessible();\r\n    try {\r\n        if (!flag) {\r\n            cstruct.setAccessible(true);\r\n        }\r\n        Object result = cstruct.newInstance(args);\r\n        return result;\r\n    } catch (InstantiationException | IllegalAccessException e) {\r\n        throw new CodeGenerationException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new CodeGenerationException(e.getTargetException());\r\n    } finally {\r\n        if (!flag) {\r\n            cstruct.setAccessible(flag);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#newInstance(Constructor,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getConstructor(Class,Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Constructor getConstructor(Class type, Class[] parameterTypes) {\r\n    try {\r\n        Constructor constructor = type.getDeclaredConstructor(parameterTypes);\r\n        constructor.setAccessible(true);\r\n        return constructor;\r\n    } catch (NoSuchMethodException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getConstructor(Class,Class[])",
    "tailType": "method"
  }
]