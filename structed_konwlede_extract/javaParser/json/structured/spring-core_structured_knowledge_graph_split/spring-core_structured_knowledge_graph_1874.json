[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumWithSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumEmptyString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Foo.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumEmptyString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumEmptyString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enumToString() {\r\n    assertThat(conversionService.convert(Foo.BAR, String.class)).isEqualTo(\"BAR\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid integerToEnum() {\r\n    assertThat(conversionService.convert(0, Foo.class)).isEqualTo(Foo.BAR);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumWithSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid integerToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(1, SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumWithSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumWithSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid integerToEnumNull() {\r\n    assertThat(conversionService.convert(null, Foo.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#integerToEnumNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToInteger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enumToInteger() {\r\n    assertThat(conversionService.convert(Foo.BAR, Integer.class)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToInteger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#enumToInteger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumSet() throws Exception {\r\n    assertThat(conversionService.convert(\"BAR\", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField(\"enumSet\")))).isEqualTo(EnumSet.of(Foo.BAR));\r\n}",
    "tailType": "method_code"
  }
]