[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\n/**\n * @author Juozas Baliuka, Chris Nokleberg\n */\npublic class AddStaticInitTransformer extends ClassEmitterTransformer {\n    private MethodInfo info;\n\n    public AddStaticInitTransformer(Method classInit) {\n        info = ReflectUtils.getMethodInfo(classInit);\n        if (!TypeUtils.isStatic(info.getModifiers())) {\n            throw new IllegalArgumentException(classInit + \" is not static\");\n        }\n        Type[] types = info.getSignature().getArgumentTypes();\n        if (types.length != 1 ||\n            !types[0].equals(Constants.TYPE_CLASS) ||\n            !info.getSignature().getReturnType().equals(Type.VOID_TYPE)) {\n            throw new IllegalArgumentException(classInit + \" illegal signature\");\n        }\n    }\n\n    @Override\n\tprotected void init() {\n        if (!TypeUtils.isInterface(getAccess())) {\n            CodeEmitter e = getStaticHook();\n            EmitUtils.load_class_this(e);\n            e.invoke(info);\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#info",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#info",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodInfo",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void init() {\r\n    if (!TypeUtils.isInterface(getAccess())) {\r\n        CodeEmitter e = getStaticHook();\r\n        EmitUtils.load_class_this(e);\r\n        e.invoke(info);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer#init()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddStaticInitTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.FieldProvider",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic interface FieldProvider {\n\n    String[] getFieldNames();\n\n    Class[]  getFieldTypes();\n\n    void setField(int index, Object value);\n\n    Object getField(int index);\n\n    void setField(String name, Object value);\n\n    Object getField(String name);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "String[] getFieldNames();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProvider#getFieldNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider#getFieldTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "Class[] getFieldTypes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProvider#getFieldTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider#setField(int,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "void setField(int index, Object value);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProvider#setField(int,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProvider#getField(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "Object getField(int index);",
    "tailType": "method_code"
  }
]