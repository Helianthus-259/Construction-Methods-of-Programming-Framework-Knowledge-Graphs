[
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#standardContentHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "ContentHandler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setUp() throws Exception {\r\n    inputFactory = XMLInputFactory.newInstance();\r\n    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\r\n    saxParserFactory.setNamespaceAware(true);\r\n    SAXParser saxParser = saxParserFactory.newSAXParser();\r\n    standardReader = saxParser.getXMLReader();\r\n    standardContentHandler = mockContentHandler();\r\n    standardReader.setContentHandler(standardContentHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerNamespacesNoPrefixes() throws Exception {\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\r\n    standardReader.parse(new InputSource(createTestInputStream()));\r\n    AbstractStaxXMLReader staxXmlReader = createStaxXmlReader(createTestInputStream());\r\n    ContentHandler contentHandler = mockContentHandler();\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", false);\r\n    staxXmlReader.setContentHandler(contentHandler);\r\n    staxXmlReader.parse(new InputSource());\r\n    verifyIdenticalInvocations(standardContentHandler, contentHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesNoPrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerNamespacesPrefixes() throws Exception {\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    standardReader.parse(new InputSource(createTestInputStream()));\r\n    AbstractStaxXMLReader staxXmlReader = createStaxXmlReader(createTestInputStream());\r\n    ContentHandler contentHandler = mockContentHandler();\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", true);\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    staxXmlReader.setContentHandler(contentHandler);\r\n    staxXmlReader.parse(new InputSource());\r\n    verifyIdenticalInvocations(standardContentHandler, contentHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNamespacesPrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerNoNamespacesPrefixes() throws Exception {\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespaces\", false);\r\n    standardReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    standardReader.parse(new InputSource(createTestInputStream()));\r\n    AbstractStaxXMLReader staxXmlReader = createStaxXmlReader(createTestInputStream());\r\n    ContentHandler contentHandler = mockContentHandler();\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", false);\r\n    staxXmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    staxXmlReader.setContentHandler(contentHandler);\r\n    staxXmlReader.parse(new InputSource());\r\n    verifyIdenticalInvocations(standardContentHandler, contentHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#contentHandlerNoNamespacesPrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid whitespace() throws Exception {\r\n    String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><test><node1> </node1><node2> Some text </node2></test>\";\r\n    Transformer transformer = TransformerFactory.newInstance().newTransformer();\r\n    AbstractStaxXMLReader staxXmlReader = createStaxXmlReader(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));\r\n    SAXSource source = new SAXSource(staxXmlReader, new InputSource());\r\n    DOMResult result = new DOMResult();\r\n    transformer.transform(source, result);\r\n    Node node1 = result.getNode().getFirstChild().getFirstChild();\r\n    assertThat(node1.getTextContent()).isEqualTo(\" \");\r\n    assertThat(node1.getNextSibling().getTextContent()).isEqualTo(\" Some text \");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#whitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#lexicalHandler()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid lexicalHandler() throws Exception {\r\n    Resource testLexicalHandlerXml = new ClassPathResource(\"testLexicalHandler.xml\", getClass());\r\n    LexicalHandler expectedLexicalHandler = mockLexicalHandler();\r\n    standardReader.setContentHandler(null);\r\n    standardReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", expectedLexicalHandler);\r\n    standardReader.parse(new InputSource(testLexicalHandlerXml.getInputStream()));\r\n    inputFactory.setProperty(\"javax.xml.stream.isCoalescing\", Boolean.FALSE);\r\n    inputFactory.setProperty(\"http://java.sun.com/xml/stream/properties/report-cdata-event\", Boolean.TRUE);\r\n    inputFactory.setProperty(\"javax.xml.stream.isReplacingEntityReferences\", Boolean.FALSE);\r\n    inputFactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", Boolean.FALSE);\r\n    LexicalHandler actualLexicalHandler = mockLexicalHandler();\r\n    willAnswer(invocation -> invocation.getArguments()[0] = \"element\").given(actualLexicalHandler).startDTD(anyString(), anyString(), anyString());\r\n    AbstractStaxXMLReader staxXmlReader = createStaxXmlReader(testLexicalHandlerXml.getInputStream());\r\n    staxXmlReader.setProperty(\"http://xml.org/sax/properties/lexical-handler\", actualLexicalHandler);\r\n    staxXmlReader.parse(new InputSource());\r\n    // TODO: broken comparison since Mockito 2.2 upgrade\r\n    // verifyIdenticalInvocations(expectedLexicalHandler, actualLexicalHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReaderTests#lexicalHandler()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#lexicalHandler()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReaderTests#mockLexicalHandler()",
    "headType": "method",
    "relation": "provide",
    "tail": "private LexicalHandler mockLexicalHandler() throws Exception {\r\n    LexicalHandler lexicalHandler = mock();\r\n    willAnswer(new CopyCharsAnswer()).given(lexicalHandler).comment(any(char[].class), anyInt(), anyInt());\r\n    return lexicalHandler;\r\n}",
    "tailType": "method_code"
  }
]