[
  {
    "head": "org.springframework.util.PathSeparatorPatternCache#getEndsOnDoubleWildCard()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String getEndsOnDoubleWildCard() {\r\n    return this.endsOnDoubleWildCard;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PathSeparatorPatternCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PathSeparatorPatternCache#getEndsOnDoubleWildCard()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.Assert",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.lang.Contract;\n\n/**\n * Assertion utility class that assists in validating arguments.\n *\n * <p>Useful for identifying programmer errors early and clearly at runtime.\n *\n * <p>For example, if the contract of a public method states it does not\n * allow {@code null} arguments, {@code Assert} can be used to validate that\n * contract. Doing this clearly indicates a contract violation when it\n * occurs and protects the class's invariants.\n *\n * <p>Typically used to validate method arguments rather than configuration\n * properties, to check for cases that are usually programmer errors rather\n * than configuration errors. In contrast to configuration initialization\n * code, there is usually no point in falling back to defaults in such methods.\n *\n * <p>This class is similar to JUnit's assertion library. If an argument value is\n * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).\n * For example:\n *\n * <pre class=\"code\">\n * Assert.notNull(clazz, \"The class must not be null\");\n * Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n *\n * <p>Mainly for internal use within the framework; for a more comprehensive suite\n * of assertion utilities consider {@code org.apache.commons.lang3.Validate} from\n * <a href=\"https://commons.apache.org/proper/commons-lang/\">Apache Commons Lang</a>,\n * Google Guava's\n * <a href=\"https://github.com/google/guava/wiki/PreconditionsExplained\">Preconditions</a>,\n * or similar third-party libraries.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Colin Sampaleanu\n * @author Rob Harrop\n * @author Sebastien Deleuze\n * @since 1.1.2\n */\npublic abstract class Assert {\n\n\t/**\n\t * Assert a boolean expression, throwing an {@code IllegalStateException}\n\t * if the expression evaluates to {@code false}.\n\t * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}\n\t * on an assertion failure.\n\t * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n\t * @param expression a boolean expression\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalStateException if {@code expression} is {@code false}\n\t */\n\t@Contract(\"false, _ -> fail\")\n\tpublic static void state(boolean expression, String message) {\n\t\tif (!expression) {\n\t\t\tthrow new IllegalStateException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert a boolean expression, throwing an {@code IllegalStateException}\n\t * if the expression evaluates to {@code false}.\n\t * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}\n\t * on an assertion failure.\n\t * <pre class=\"code\">\n\t * Assert.state(entity.getId() == null,\n\t *     () -&gt; \"ID for entity \" + entity.getName() + \" must not already be initialized\");\n\t * </pre>\n\t * @param expression a boolean expression\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalStateException if {@code expression} is {@code false}\n\t * @since 5.0\n\t */\n\t@Contract(\"false, _ -> fail\")\n\tpublic static void state(boolean expression, Supplier<String> messageSupplier) {\n\t\tif (!expression) {\n\t\t\tthrow new IllegalStateException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert a boolean expression, throwing an {@code IllegalArgumentException}\n\t * if the expression evaluates to {@code false}.\n\t * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n\t * @param expression a boolean expression\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if {@code expression} is {@code false}\n\t */\n\t@Contract(\"false, _ -> fail\")\n\tpublic static void isTrue(boolean expression, String message) {\n\t\tif (!expression) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert a boolean expression, throwing an {@code IllegalArgumentException}\n\t * if the expression evaluates to {@code false}.\n\t * <pre class=\"code\">\n\t * Assert.isTrue(i &gt; 0, () -&gt; \"The value '\" + i + \"' must be greater than zero\");\n\t * </pre>\n\t * @param expression a boolean expression\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if {@code expression} is {@code false}\n\t * @since 5.0\n\t */\n\t@Contract(\"false, _ -> fail\")\n\tpublic static void isTrue(boolean expression, Supplier<String> messageSupplier) {\n\t\tif (!expression) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an object is {@code null}.\n\t * <pre class=\"code\">Assert.isNull(value, \"The value must be null\");</pre>\n\t * @param object the object to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the object is not {@code null}\n\t */\n\t@Contract(\"!null, _ -> fail\")\n\tpublic static void isNull(@Nullable Object object, String message) {\n\t\tif (object != null) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an object is {@code null}.\n\t * <pre class=\"code\">\n\t * Assert.isNull(value, () -&gt; \"The value '\" + value + \"' must be null\");\n\t * </pre>\n\t * @param object the object to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the object is not {@code null}\n\t * @since 5.0\n\t */\n\t@Contract(\"!null, _ -> fail\")\n\tpublic static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {\n\t\tif (object != null) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an object is not {@code null}.\n\t * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n\t * @param object the object to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the object is {@code null}\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notNull(@Nullable Object object, String message) {\n\t\tif (object == null) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an object is not {@code null}.\n\t * <pre class=\"code\">\n\t * Assert.notNull(entity.getId(),\n\t *     () -&gt; \"ID for entity \" + entity.getName() + \" must not be null\");\n\t * </pre>\n\t * @param object the object to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the object is {@code null}\n\t * @since 5.0\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {\n\t\tif (object == null) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given String is not empty; that is,\n\t * it must not be {@code null} and not the empty String.\n\t * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n\t * @param text the String to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the text is empty\n\t * @see StringUtils#hasLength\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void hasLength(@Nullable String text, String message) {\n\t\tif (!StringUtils.hasLength(text)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given String is not empty; that is,\n\t * it must not be {@code null} and not the empty String.\n\t * <pre class=\"code\">\n\t * Assert.hasLength(account.getName(),\n\t *     () -&gt; \"Name for account '\" + account.getId() + \"' must not be empty\");\n\t * </pre>\n\t * @param text the String to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the text is empty\n\t * @since 5.0\n\t * @see StringUtils#hasLength\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {\n\t\tif (!StringUtils.hasLength(text)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given String contains valid text content; that is, it must not\n\t * be {@code null} and must contain at least one non-whitespace character.\n\t * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\n\t * @param text the String to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the text does not contain valid text content\n\t * @see StringUtils#hasText\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void hasText(@Nullable String text, String message) {\n\t\tif (!StringUtils.hasText(text)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given String contains valid text content; that is, it must not\n\t * be {@code null} and must contain at least one non-whitespace character.\n\t * <pre class=\"code\">\n\t * Assert.hasText(account.getName(),\n\t *     () -&gt; \"Name for account '\" + account.getId() + \"' must not be empty\");\n\t * </pre>\n\t * @param text the String to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the text does not contain valid text content\n\t * @since 5.0\n\t * @see StringUtils#hasText\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void hasText(@Nullable String text, Supplier<String> messageSupplier) {\n\t\tif (!StringUtils.hasText(text)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given text does not contain the given substring.\n\t * <pre class=\"code\">Assert.doesNotContain(name, \"rod\", \"Name must not contain 'rod'\");</pre>\n\t * @param textToSearch the text to search\n\t * @param substring the substring to find within the text\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the text contains the substring\n\t */\n\tpublic static void doesNotContain(@Nullable String textToSearch, String substring, String message) {\n\t\tif (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&\n\t\t\t\ttextToSearch.contains(substring)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the given text does not contain the given substring.\n\t * <pre class=\"code\">\n\t * Assert.doesNotContain(name, forbidden, () -&gt; \"Name must not contain '\" + forbidden + \"'\");\n\t * </pre>\n\t * @param textToSearch the text to search\n\t * @param substring the substring to find within the text\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the text contains the substring\n\t * @since 5.0\n\t */\n\tpublic static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {\n\t\tif (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&\n\t\t\t\ttextToSearch.contains(substring)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an array contains elements; that is, it must not be\n\t * {@code null} and must contain at least one element.\n\t * <pre class=\"code\">Assert.notEmpty(array, \"The array must contain elements\");</pre>\n\t * @param array the array to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the object array is {@code null} or contains no elements\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(@Nullable Object @Nullable [] array, String message) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an array contains elements; that is, it must not be\n\t * {@code null} and must contain at least one element.\n\t * <pre class=\"code\">\n\t * Assert.notEmpty(array, () -&gt; \"The \" + arrayType + \" array must contain elements\");\n\t * </pre>\n\t * @param array the array to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the object array is {@code null} or contains no elements\n\t * @since 5.0\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(Object @Nullable [] array, Supplier<String> messageSupplier) {\n\t\tif (ObjectUtils.isEmpty(array)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an array contains no {@code null} elements.\n\t * <p>Note: Does not complain if the array is empty!\n\t * <pre class=\"code\">Assert.noNullElements(array, \"The array must contain non-null elements\");</pre>\n\t * @param array the array to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the object array contains a {@code null} element\n\t */\n\tpublic static void noNullElements(Object @Nullable [] array, String message) {\n\t\tif (array != null) {\n\t\t\tfor (Object element : array) {\n\t\t\t\tif (element == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Assert that an array contains no {@code null} elements.\n\t * <p>Note: Does not complain if the array is empty!\n\t * <pre class=\"code\">\n\t * Assert.noNullElements(array, () -&gt; \"The \" + arrayType + \" array must contain non-null elements\");\n\t * </pre>\n\t * @param array the array to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the object array contains a {@code null} element\n\t * @since 5.0\n\t */\n\tpublic static void noNullElements(Object @Nullable [] array, Supplier<String> messageSupplier) {\n\t\tif (array != null) {\n\t\t\tfor (Object element : array) {\n\t\t\t\tif (element == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a collection contains elements; that is, it must not be\n\t * {@code null} and must contain at least one element.\n\t * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must contain elements\");</pre>\n\t * @param collection the collection to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the collection is {@code null} or\n\t * contains no elements\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(@Nullable Collection<?> collection, String message) {\n\t\tif (CollectionUtils.isEmpty(collection)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a collection contains elements; that is, it must not be\n\t * {@code null} and must contain at least one element.\n\t * <pre class=\"code\">\n\t * Assert.notEmpty(collection, () -&gt; \"The \" + collectionType + \" collection must contain elements\");\n\t * </pre>\n\t * @param collection the collection to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the collection is {@code null} or\n\t * contains no elements\n\t * @since 5.0\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {\n\t\tif (CollectionUtils.isEmpty(collection)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a collection contains no {@code null} elements.\n\t * <p>Note: Does not complain if the collection is empty!\n\t * <pre class=\"code\">Assert.noNullElements(collection, \"Collection must contain non-null elements\");</pre>\n\t * @param collection the collection to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the collection contains a {@code null} element\n\t * @since 5.2\n\t */\n\tpublic static void noNullElements(@Nullable Collection<?> collection, String message) {\n\t\tif (collection != null) {\n\t\t\tfor (Object element : collection) {\n\t\t\t\tif (element == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a collection contains no {@code null} elements.\n\t * <p>Note: Does not complain if the collection is empty!\n\t * <pre class=\"code\">\n\t * Assert.noNullElements(collection, () -&gt; \"Collection \" + collectionName + \" must contain non-null elements\");\n\t * </pre>\n\t * @param collection the collection to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the collection contains a {@code null} element\n\t * @since 5.2\n\t */\n\tpublic static void noNullElements(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {\n\t\tif (collection != null) {\n\t\t\tfor (Object element : collection) {\n\t\t\t\tif (element == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a Map contains entries; that is, it must not be {@code null}\n\t * and must contain at least one entry.\n\t * <pre class=\"code\">Assert.notEmpty(map, \"Map must contain entries\");</pre>\n\t * @param map the map to check\n\t * @param message the exception message to use if the assertion fails\n\t * @throws IllegalArgumentException if the map is {@code null} or contains no entries\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(@Nullable Map<?, ?> map, String message) {\n\t\tif (CollectionUtils.isEmpty(map)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that a Map contains entries; that is, it must not be {@code null}\n\t * and must contain at least one entry.\n\t * <pre class=\"code\">\n\t * Assert.notEmpty(map, () -&gt; \"The \" + mapType + \" map must contain entries\");\n\t * </pre>\n\t * @param map the map to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails\n\t * @throws IllegalArgumentException if the map is {@code null} or contains no entries\n\t * @since 5.0\n\t */\n\t@Contract(\"null, _ -> fail\")\n\tpublic static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {\n\t\tif (CollectionUtils.isEmpty(map)) {\n\t\t\tthrow new IllegalArgumentException(nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the provided object is an instance of the provided class.\n\t * <pre class=\"code\">Assert.instanceOf(Foo.class, foo, \"Foo expected\");</pre>\n\t * @param type the type to check against\n\t * @param obj the object to check\n\t * @param message a message which will be prepended to provide further context.\n\t * If it is empty or ends in \":\" or \";\" or \",\" or \".\", a full exception message\n\t * will be appended. If it ends in a space, the name of the offending object's\n\t * type will be appended. In any other case, a \":\" with a space and the name\n\t * of the offending object's type will be appended.\n\t * @throws IllegalArgumentException if the object is not an instance of type\n\t */\n\t@Contract(\"_, null, _ -> fail\")\n\tpublic static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {\n\t\tnotNull(type, \"Type to check against must not be null\");\n\t\tif (!type.isInstance(obj)) {\n\t\t\tinstanceCheckFailed(type, obj, message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the provided object is an instance of the provided class.\n\t * <pre class=\"code\">\n\t * Assert.instanceOf(Foo.class, foo, () -&gt; \"Processing \" + Foo.class.getSimpleName() + \":\");\n\t * </pre>\n\t * @param type the type to check against\n\t * @param obj the object to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details.\n\t * @throws IllegalArgumentException if the object is not an instance of type\n\t * @since 5.0\n\t */\n\t@Contract(\"_, null, _ -> fail\")\n\tpublic static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {\n\t\tnotNull(type, \"Type to check against must not be null\");\n\t\tif (!type.isInstance(obj)) {\n\t\t\tinstanceCheckFailed(type, obj, nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that the provided object is an instance of the provided class.\n\t * <pre class=\"code\">Assert.instanceOf(Foo.class, foo);</pre>\n\t * @param type the type to check against\n\t * @param obj the object to check\n\t * @throws IllegalArgumentException if the object is not an instance of type\n\t */\n\t@Contract(\"_, null -> fail\")\n\tpublic static void isInstanceOf(Class<?> type, @Nullable Object obj) {\n\t\tisInstanceOf(type, obj, \"\");\n\t}\n\n\t/**\n\t * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\n\t * <pre class=\"code\">Assert.isAssignable(Number.class, myClass, \"Number expected\");</pre>\n\t * @param superType the supertype to check against\n\t * @param subType the subtype to check\n\t * @param message a message which will be prepended to provide further context.\n\t * If it is empty or ends in \":\" or \";\" or \",\" or \".\", a full exception message\n\t * will be appended. If it ends in a space, the name of the offending subtype\n\t * will be appended. In any other case, a \":\" with a space and the name of the\n\t * offending subtype will be appended.\n\t * @throws IllegalArgumentException if the classes are not assignable\n\t */\n\t@Contract(\"_, null, _ -> fail\")\n\tpublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {\n\t\tnotNull(superType, \"Supertype to check against must not be null\");\n\t\tif (subType == null || !superType.isAssignableFrom(subType)) {\n\t\t\tassignableCheckFailed(superType, subType, message);\n\t\t}\n\t}\n\n\t/**\n\t * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\n\t * <pre class=\"code\">\n\t * Assert.isAssignable(Number.class, myClass, () -&gt; \"Processing \" + myAttributeName + \":\");\n\t * </pre>\n\t * @param superType the supertype to check against\n\t * @param subType the subtype to check\n\t * @param messageSupplier a supplier for the exception message to use if the\n\t * assertion fails. See {@link #isAssignable(Class, Class, String)} for details.\n\t * @throws IllegalArgumentException if the classes are not assignable\n\t * @since 5.0\n\t */\n\t@Contract(\"_, null, _ -> fail\")\n\tpublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {\n\t\tnotNull(superType, \"Supertype to check against must not be null\");\n\t\tif (subType == null || !superType.isAssignableFrom(subType)) {\n\t\t\tassignableCheckFailed(superType, subType, nullSafeGet(messageSupplier));\n\t\t}\n\t}\n\n\t/**\n\t * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\n\t * <pre class=\"code\">Assert.isAssignable(Number.class, myClass);</pre>\n\t * @param superType the supertype to check\n\t * @param subType the subtype to check\n\t * @throws IllegalArgumentException if the classes are not assignable\n\t */\n\t@Contract(\"_, null -> fail\")\n\tpublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType) {\n\t\tisAssignable(superType, subType, \"\");\n\t}\n\n\n\tprivate static void instanceCheckFailed(Class<?> type, @Nullable Object obj, @Nullable String msg) {\n\t\tString className = (obj != null ? obj.getClass().getName() : \"null\");\n\t\tString result = \"\";\n\t\tboolean defaultMessage = true;\n\t\tif (StringUtils.hasLength(msg)) {\n\t\t\tif (endsWithSeparator(msg)) {\n\t\t\t\tresult = msg + \" \";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = messageWithTypeName(msg, className);\n\t\t\t\tdefaultMessage = false;\n\t\t\t}\n\t\t}\n\t\tif (defaultMessage) {\n\t\t\tresult = result + (\"Object of class [\" + className + \"] must be an instance of \" + type);\n\t\t}\n\t\tthrow new IllegalArgumentException(result);\n\t}\n\n\tprivate static void assignableCheckFailed(Class<?> superType, @Nullable Class<?> subType, @Nullable String msg) {\n\t\tString result = \"\";\n\t\tboolean defaultMessage = true;\n\t\tif (StringUtils.hasLength(msg)) {\n\t\t\tif (endsWithSeparator(msg)) {\n\t\t\t\tresult = msg + \" \";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = messageWithTypeName(msg, subType);\n\t\t\t\tdefaultMessage = false;\n\t\t\t}\n\t\t}\n\t\tif (defaultMessage) {\n\t\t\tresult = result + (subType + \" is not assignable to \" + superType);\n\t\t}\n\t\tthrow new IllegalArgumentException(result);\n\t}\n\n\tprivate static boolean endsWithSeparator(String msg) {\n\t\treturn (msg.endsWith(\":\") || msg.endsWith(\";\") || msg.endsWith(\",\") || msg.endsWith(\".\"));\n\t}\n\n\tprivate static String messageWithTypeName(String msg, @Nullable Object typeName) {\n\t\treturn msg + (msg.endsWith(\" \") ? \"\" : \": \") + typeName;\n\t}\n\n\tprivate static @Nullable String nullSafeGet(@Nullable Supplier<String> messageSupplier) {\n\t\treturn (messageSupplier != null ? messageSupplier.get() : null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.Assert#state(boolean,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert a boolean expression, throwing an {@code IllegalStateException}\r\n * if the expression evaluates to {@code false}.\r\n * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}\r\n * on an assertion failure.\r\n * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\r\n * @param expression a boolean expression\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalStateException if {@code expression} is {@code false}\r\n */\r\n@Contract(\"false, _ -> fail\")\r\npublic static void state(boolean expression, String message) {\r\n    if (!expression) {\r\n        throw new IllegalStateException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#state(boolean,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#state(boolean,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#state(boolean,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert a boolean expression, throwing an {@code IllegalStateException}\r\n * if the expression evaluates to {@code false}.\r\n * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}\r\n * on an assertion failure.\r\n * <pre class=\"code\">\r\n * Assert.state(entity.getId() == null,\r\n *     () -&gt; \"ID for entity \" + entity.getName() + \" must not already be initialized\");\r\n * </pre>\r\n * @param expression a boolean expression\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalStateException if {@code expression} is {@code false}\r\n * @since 5.0\r\n */\r\n@Contract(\"false, _ -> fail\")\r\npublic static void state(boolean expression, Supplier<String> messageSupplier) {\r\n    if (!expression) {\r\n        throw new IllegalStateException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#state(boolean,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#state(boolean,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isTrue(boolean,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert a boolean expression, throwing an {@code IllegalArgumentException}\r\n * if the expression evaluates to {@code false}.\r\n * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\r\n * @param expression a boolean expression\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if {@code expression} is {@code false}\r\n */\r\n@Contract(\"false, _ -> fail\")\r\npublic static void isTrue(boolean expression, String message) {\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isTrue(boolean,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isTrue(boolean,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isTrue(boolean,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert a boolean expression, throwing an {@code IllegalArgumentException}\r\n * if the expression evaluates to {@code false}.\r\n * <pre class=\"code\">\r\n * Assert.isTrue(i &gt; 0, () -&gt; \"The value '\" + i + \"' must be greater than zero\");\r\n * </pre>\r\n * @param expression a boolean expression\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if {@code expression} is {@code false}\r\n * @since 5.0\r\n */\r\n@Contract(\"false, _ -> fail\")\r\npublic static void isTrue(boolean expression, Supplier<String> messageSupplier) {\r\n    if (!expression) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isTrue(boolean,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isTrue(boolean,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isNull(Object,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an object is {@code null}.\r\n * <pre class=\"code\">Assert.isNull(value, \"The value must be null\");</pre>\r\n * @param object the object to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the object is not {@code null}\r\n */\r\n@Contract(\"!null, _ -> fail\")\r\npublic static void isNull(@Nullable Object object, String message) {\r\n    if (object != null) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isNull(Object,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isNull(Object,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  }
]