[
  {
    "head": "org.springframework.util.StringUtilsTests#quoteIfString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid quoteIfString() {\r\n    assertThat(StringUtils.quoteIfString(\"myString\")).isEqualTo(\"'myString'\");\r\n    assertThat(StringUtils.quoteIfString(\"\")).isEqualTo(\"''\");\r\n    assertThat(StringUtils.quoteIfString(5)).isEqualTo(5);\r\n    assertThat(StringUtils.quoteIfString(null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#quoteIfString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#quoteIfString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#unqualify()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid unqualify() {\r\n    String qualified = \"i.am.not.unqualified\";\r\n    assertThat(StringUtils.unqualify(qualified)).isEqualTo(\"unqualified\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#unqualify()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#unqualify()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#capitalize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid capitalize() {\r\n    String capitalized = \"i am not capitalized\";\r\n    assertThat(StringUtils.capitalize(capitalized)).isEqualTo(\"I am not capitalized\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#capitalize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#capitalize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#uncapitalize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid uncapitalize() {\r\n    String capitalized = \"I am capitalized\";\r\n    assertThat(StringUtils.uncapitalize(capitalized)).isEqualTo(\"i am capitalized\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#uncapitalize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#uncapitalize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFilename() {\r\n    assertThat(StringUtils.getFilename(null)).isNull();\r\n    assertThat(StringUtils.getFilename(\"\")).isEmpty();\r\n    assertThat(StringUtils.getFilename(\"myfile\")).isEqualTo(\"myfile\");\r\n    assertThat(StringUtils.getFilename(\"mypath/myfile\")).isEqualTo(\"myfile\");\r\n    assertThat(StringUtils.getFilename(\"myfile.\")).isEqualTo(\"myfile.\");\r\n    assertThat(StringUtils.getFilename(\"mypath/myfile.\")).isEqualTo(\"myfile.\");\r\n    assertThat(StringUtils.getFilename(\"myfile.txt\")).isEqualTo(\"myfile.txt\");\r\n    assertThat(StringUtils.getFilename(\"mypath/myfile.txt\")).isEqualTo(\"myfile.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#getFilename()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#getFilenameExtension()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFilenameExtension() {\r\n    assertThat(StringUtils.getFilenameExtension(null)).isNull();\r\n    assertThat(StringUtils.getFilenameExtension(\"\")).isNull();\r\n    assertThat(StringUtils.getFilenameExtension(\"myfile\")).isNull();\r\n    assertThat(StringUtils.getFilenameExtension(\"myPath/myfile\")).isNull();\r\n    assertThat(StringUtils.getFilenameExtension(\"/home/user/.m2/settings/myfile\")).isNull();\r\n    assertThat(StringUtils.getFilenameExtension(\"myfile.\")).isEmpty();\r\n    assertThat(StringUtils.getFilenameExtension(\"myPath/myfile.\")).isEmpty();\r\n    assertThat(StringUtils.getFilenameExtension(\"myfile.txt\")).isEqualTo(\"txt\");\r\n    assertThat(StringUtils.getFilenameExtension(\"mypath/myfile.txt\")).isEqualTo(\"txt\");\r\n    assertThat(StringUtils.getFilenameExtension(\"/home/user/.m2/settings/myfile.txt\")).isEqualTo(\"txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#getFilenameExtension()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#getFilenameExtension()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#stripFilenameExtension()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stripFilenameExtension() {\r\n    assertThat(StringUtils.stripFilenameExtension(\"\")).isEmpty();\r\n    assertThat(StringUtils.stripFilenameExtension(\"myfile\")).isEqualTo(\"myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"myfile.\")).isEqualTo(\"myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"myfile.txt\")).isEqualTo(\"myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"mypath/myfile\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"mypath/myfile.\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"mypath/myfile.txt\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"/home/user/.m2/settings/myfile\")).isEqualTo(\"/home/user/.m2/settings/myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"/home/user/.m2/settings/myfile.\")).isEqualTo(\"/home/user/.m2/settings/myfile\");\r\n    assertThat(StringUtils.stripFilenameExtension(\"/home/user/.m2/settings/myfile.txt\")).isEqualTo(\"/home/user/.m2/settings/myfile\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#stripFilenameExtension()",
    "tailType": "method"
  }
]