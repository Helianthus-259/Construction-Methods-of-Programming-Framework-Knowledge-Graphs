[
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_addNewKeyPostConstruction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_addNewKeyPostConstruction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getPropertySources_replacePropertySource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPropertySources_replacePropertySource() {\r\n    propertySources = new MutablePropertySources();\r\n    propertyResolver = new PropertySourcesPropertyResolver(propertySources);\r\n    propertySources.addLast(new MockPropertySource(\"local\").withProperty(\"foo\", \"localValue\"));\r\n    propertySources.addLast(new MockPropertySource(\"system\").withProperty(\"foo\", \"systemValue\"));\r\n    // 'local' was added first so has precedence\r\n    assertThat(propertyResolver.getProperty(\"foo\")).isEqualTo(\"localValue\");\r\n    // replace 'local' with new property source\r\n    propertySources.replace(\"local\", new MockPropertySource(\"new\").withProperty(\"foo\", \"newValue\"));\r\n    // 'system' now has precedence\r\n    assertThat(propertyResolver.getProperty(\"foo\")).isEqualTo(\"newValue\");\r\n    assertThat(propertySources).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getPropertySources_replacePropertySource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getPropertySources_replacePropertySource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRequiredProperty() {\r\n    testProperties.put(\"exists\", \"xyz\");\r\n    assertThat(propertyResolver.getRequiredProperty(\"exists\")).isEqualTo(\"xyz\");\r\n    assertThatIllegalStateException().isThrownBy(() -> propertyResolver.getRequiredProperty(\"bogus\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty_withStringArrayConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRequiredProperty_withStringArrayConversion() {\r\n    testProperties.put(\"exists\", \"abc,123\");\r\n    assertThat(propertyResolver.getRequiredProperty(\"exists\", String[].class)).isEqualTo(new String[] { \"abc\", \"123\" });\r\n    assertThatIllegalStateException().isThrownBy(() -> propertyResolver.getRequiredProperty(\"bogus\", String[].class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty_withStringArrayConversion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getRequiredProperty_withStringArrayConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolvePlaceholders() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(resolver.resolvePlaceholders(\"Replace this ${key}\")).isEqualTo(\"Replace this value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withUnresolvable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolvePlaceholders_withUnresolvable() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(resolver.resolvePlaceholders(\"Replace this ${key} plus ${unknown}\")).isEqualTo(\"Replace this value plus ${unknown}\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withUnresolvable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withUnresolvable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withDefaultValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolvePlaceholders_withDefaultValue() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(resolver.resolvePlaceholders(\"Replace this ${key} plus ${unknown:defaultValue}\")).isEqualTo(\"Replace this value plus defaultValue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withDefaultValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withDefaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]