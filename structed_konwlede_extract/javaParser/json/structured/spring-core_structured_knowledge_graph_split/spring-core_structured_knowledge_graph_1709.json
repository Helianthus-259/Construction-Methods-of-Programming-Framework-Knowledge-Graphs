[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWrongComponentTypeThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenWrongComponentTypeThrowsException() {\r\n    assertThatAnnotationConfigurationException().isThrownBy(() -> getAnnotations(ContainerWithArrayValueAttributeButWrongComponentType.class, InvalidRepeatable.class, INHERITED_ANNOTATIONS, getClass())).satisfies(this::wrongComponentTypeRequirements);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWrongComponentTypeThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWrongComponentTypeThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, INHERITED_ANNOTATIONS, RepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWhenOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenWhenOnSuperclassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, INHERITED_ANNOTATIONS, SubRepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWhenOnSuperclassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenWhenOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenComposedOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, INHERITED_ANNOTATIONS, ComposedRepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenComposedMixedWithContainerOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, INHERITED_ANNOTATIONS, ComposedRepeatableMixedWithContainerClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenComposedContainerForRepeatableOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, INHERITED_ANNOTATIONS, ComposedContainerClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations() {\r\n    Set<Noninherited> annotations = getAnnotations(null, Noninherited.class, INHERITED_ANNOTATIONS, NoninheritedRepeatableClass.class);\r\n    assertThat(annotations.stream().map(Noninherited::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#inheritedAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "tailType": "method"
  }
]