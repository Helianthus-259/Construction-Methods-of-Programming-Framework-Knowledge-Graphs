[
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getDeclaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getMember()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the wrapped member.\r\n * @return the Method or Constructor as Member\r\n */\r\npublic Member getMember() {\r\n    return this.executable;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getMember()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getAnnotatedElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the wrapped annotated element.\r\n * <p>Note: This method exposes the annotations declared on the method/constructor\r\n * itself (i.e. at the method/constructor level, not at the parameter level).\r\n * <p>To get the {@link AnnotatedElement} at the parameter level, use\r\n * {@link #getParameter()}.\r\n * @return the Method or Constructor as AnnotatedElement\r\n */\r\npublic AnnotatedElement getAnnotatedElement() {\r\n    return this.executable;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getAnnotatedElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getExecutable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the wrapped executable.\r\n * @return the Method or Constructor as Executable\r\n * @since 5.0\r\n */\r\npublic Executable getExecutable() {\r\n    return this.executable;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getExecutable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link Parameter} descriptor for method/constructor parameter.\r\n * @since 5.0\r\n */\r\npublic Parameter getParameter() {\r\n    if (this.parameterIndex < 0) {\r\n        throw new IllegalStateException(\"Cannot retrieve Parameter descriptor for method return type\");\r\n    }\r\n    Parameter parameter = this.parameter;\r\n    if (parameter == null) {\r\n        parameter = getExecutable().getParameters()[this.parameterIndex];\r\n        this.parameter = parameter;\r\n    }\r\n    return parameter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the index of the method/constructor parameter.\r\n * @return the parameter index (-1 in case of the return type)\r\n */\r\npublic int getParameterIndex() {\r\n    return this.parameterIndex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameterIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#increaseNestingLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Increase this parameter's nesting level.\r\n * @see #getNestingLevel()\r\n * @deprecated since 5.2 in favor of {@link #nested(Integer)}\r\n */\r\n@Deprecated\r\npublic void increaseNestingLevel() {\r\n    this.nestingLevel++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#increaseNestingLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#increaseNestingLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#decreaseNestingLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decrease this parameter's nesting level.\r\n * @see #getNestingLevel()\r\n * @deprecated since 5.2 in favor of retaining the original MethodParameter and\r\n * using {@link #nested(Integer)} if nesting is required\r\n */\r\n@Deprecated\r\npublic void decreaseNestingLevel() {\r\n    getTypeIndexesPerLevel().remove(this.nestingLevel);\r\n    this.nestingLevel--;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#decreaseNestingLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#decreaseNestingLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getNestingLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the nesting level of the target type\r\n * (typically 1; for example, in case of a List of Lists, 1 would indicate the\r\n * nested List, whereas 2 would indicate the element of the nested List).\r\n */\r\npublic int getNestingLevel() {\r\n    return this.nestingLevel;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getNestingLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#withTypeIndex(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a variant of this {@code MethodParameter} with the type\r\n * for the current level set to the specified value.\r\n * @param typeIndex the new type index\r\n * @since 5.2\r\n */\r\npublic MethodParameter withTypeIndex(int typeIndex) {\r\n    return nested(this.nestingLevel, typeIndex);\r\n}",
    "tailType": "method_code"
  }
]