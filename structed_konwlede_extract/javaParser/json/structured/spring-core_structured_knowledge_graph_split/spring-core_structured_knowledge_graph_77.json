[
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#doTestMetadataForInterfaceClass(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestMetadataForInterfaceClass(AnnotationMetadata metadata) {\r\n    assertThat(metadata.getClassName()).isEqualTo(AnnotationMetadata.class.getName());\r\n    assertThat(metadata.isInterface()).isTrue();\r\n    assertThat(metadata.isAnnotation()).isFalse();\r\n    assertThat(metadata.isAbstract()).isTrue();\r\n    assertThat(metadata.isConcrete()).isFalse();\r\n    assertThat(metadata.hasSuperClass()).isFalse();\r\n    assertThat(metadata.getSuperClassName()).isNull();\r\n    assertThat(metadata.getInterfaceNames()).hasSize(2);\r\n    assertThat(metadata.getInterfaceNames()[0]).isEqualTo(ClassMetadata.class.getName());\r\n    assertThat(metadata.getInterfaceNames()[1]).isEqualTo(AnnotatedTypeMetadata.class.getName());\r\n    assertThat(metadata.getAnnotationTypes()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#doTestMetadataForInterfaceClass(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid standardAnnotationMetadataForAnnotation() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(Component.class);\r\n    doTestMetadataForAnnotationClass(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asmAnnotationMetadataForAnnotation() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(Component.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    doTestMetadataForAnnotationClass(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#doTestMetadataForAnnotationClass(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestMetadataForAnnotationClass(AnnotationMetadata metadata) {\r\n    assertThat(metadata.getClassName()).isEqualTo(Component.class.getName());\r\n    assertThat(metadata.isInterface()).isTrue();\r\n    assertThat(metadata.isAnnotation()).isTrue();\r\n    assertThat(metadata.isAbstract()).isTrue();\r\n    assertThat(metadata.isConcrete()).isFalse();\r\n    assertThat(metadata.hasSuperClass()).isFalse();\r\n    assertThat(metadata.getSuperClassName()).isNull();\r\n    assertThat(metadata.getInterfaceNames()).hasSize(1);\r\n    assertThat(metadata.getInterfaceNames()[0]).isEqualTo(Annotation.class.getName());\r\n    assertThat(metadata.isAnnotated(Documented.class.getName())).isFalse();\r\n    assertThat(metadata.isAnnotated(Scope.class.getName())).isFalse();\r\n    assertThat(metadata.isAnnotated(SpecialAttr.class.getName())).isFalse();\r\n    assertThat(metadata.hasAnnotation(Documented.class.getName())).isFalse();\r\n    assertThat(metadata.hasAnnotation(Scope.class.getName())).isFalse();\r\n    assertThat(metadata.hasAnnotation(SpecialAttr.class.getName())).isFalse();\r\n    assertThat(metadata.getAnnotationTypes()).hasSize(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#doTestMetadataForAnnotationClass(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata_nestedAnnotationsAsMap_false()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * In order to preserve backward-compatibility, {@link StandardAnnotationMetadata}\r\n * defaults to return nested annotations and annotation arrays as actual\r\n * Annotation instances. It is recommended for compatibility with ASM-based\r\n * AnnotationMetadata implementations to set the 'nestedAnnotationsAsMap' flag to\r\n * 'true' as is done in the main test above.\r\n */\r\n@Test\r\nvoid standardAnnotationMetadata_nestedAnnotationsAsMap_false() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class);\r\n    AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName());\r\n    Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get(\"nestedAnnoArray\");\r\n    assertThat(nestedAnnoArray[0]).isInstanceOf(NestedAnno.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata_nestedAnnotationsAsMap_false()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata_nestedAnnotationsAsMap_false()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid metaAnnotationOverridesUsingStandardAnnotationMetadata() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    AnnotationMetadata metadata = new StandardAnnotationMetadata(ComposedConfigurationWithAttributeOverridesClass.class);\r\n    assertMetaAnnotationOverrides(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingStandardAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid metaAnnotationOverridesUsingSimpleAnnotationMetadata() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(ComposedConfigurationWithAttributeOverridesClass.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    assertMetaAnnotationOverrides(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingSimpleAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#metaAnnotationOverridesUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#assertMetaAnnotationOverrides(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertMetaAnnotationOverrides(AnnotationMetadata metadata) {\r\n    AnnotationAttributes attributes = (AnnotationAttributes) metadata.getAnnotationAttributes(TestComponentScan.class.getName(), false);\r\n    assertThat(attributes.getStringArray(\"value\")).containsExactly(\"org.example.componentscan\");\r\n    assertThat(attributes.getStringArray(\"basePackages\")).containsExactly(\"org.example.componentscan\");\r\n    assertThat(attributes.getClassArray(\"basePackageClasses\")).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]