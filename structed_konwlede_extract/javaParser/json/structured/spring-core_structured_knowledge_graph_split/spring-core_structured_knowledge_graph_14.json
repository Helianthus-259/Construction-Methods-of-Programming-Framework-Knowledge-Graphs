[
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.BenchmarkData#generator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.BenchmarkData#generator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Function<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.BenchmarkData#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Iteration)\r\npublic void setup() {\r\n    this.generator = key -> key + \"value\";\r\n    this.lruCache = new ConcurrentLruCache<>(this.capacity, this.generator);\r\n    Assert.isTrue(this.cacheMissRate < 1, \"cache miss rate should be < 1\");\r\n    Random random = new Random();\r\n    int elementsCount = Math.round(this.capacity * (1 + this.cacheMissRate));\r\n    this.elements = new ArrayList<>(elementsCount);\r\n    random.ints(elementsCount).forEach(value -> this.elements.add(String.valueOf(value)));\r\n    this.elements.sort(String::compareTo);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.BenchmarkData#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.BenchmarkData#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "use",
    "tail": "@DisabledForJreRange",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.condition.DisabledForJreRange;\nimport reactor.blockhound.BlockHound;\nimport reactor.core.scheduler.ReactorBlockHoundIntegration;\nimport reactor.core.scheduler.Schedulers;\n\nimport org.springframework.util.ConcurrentReferenceHashMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.junit.jupiter.api.condition.JRE.JAVA_18;\n\n/**\n * Tests to verify the spring-core BlockHound integration rules.\n *\n * <p>NOTE: to run this test class in the IDE, you need to specify the following\n * JVM argument. For details, see\n * <a href=\"https://github.com/reactor/BlockHound/issues/33\">BlockHound issue 33</a>.\n *\n * <pre style=\"code\">\n * -XX:+AllowRedefinitionToAddDeleteMethods\n * </pre>\n *\n * @author Rossen Stoyanchev\n * @author Sam Brannen\n * @since 5.2.4\n */\n@DisabledForJreRange(min = JAVA_18, disabledReason = \"BlockHound is not compatible with Java 18+\")\nclass SpringCoreBlockHoundIntegrationTests {\n\n\t@BeforeAll\n\tstatic void setup() {\n\t\tBlockHound.builder()\n\t\t\t\t.with(new ReactorBlockHoundIntegration())  // Reactor non-blocking thread predicate\n\t\t\t\t.with(new ReactiveAdapterRegistry.SpringCoreBlockHoundIntegration())\n\t\t\t\t.install();\n\t}\n\n\n\t@Test\n\tvoid blockHoundIsInstalled() {\n\t\tassertThatThrownBy(() -> testNonBlockingTask(() -> Thread.sleep(10)))\n\t\t\t\t.hasMessageContaining(\"Blocking call!\");\n\t}\n\n\t@Test\n\tvoid concurrentReferenceHashMapSegmentDoTask() {\n\t\tint size = 10000;\n\t\tMap<String, String> map = new ConcurrentReferenceHashMap<>(size);\n\n\t\tCompletableFuture<Object> future1 = new CompletableFuture<>();\n\t\ttestNonBlockingTask(() -> {\n\t\t\tfor (int i = 0; i < size / 2; i++) {\n\t\t\t\tmap.put(\"a\" + i, \"bar\");\n\t\t\t}\n\t\t}, future1);\n\n\t\tCompletableFuture<Object> future2 = new CompletableFuture<>();\n\t\ttestNonBlockingTask(() -> {\n\t\t\tfor (int i = 0; i < size / 2; i++) {\n\t\t\t\tmap.put(\"b\" + i, \"bar\");\n\t\t\t}\n\t\t}, future2);\n\n\t\tCompletableFuture.allOf(future1, future2).join();\n\t\tassertThat(map).hasSize(size);\n\t}\n\n\t@Test\n\tvoid concurrentReferenceHashMapSegmentClear() {\n\t\tint size = 10000;\n\t\tMap<String, String> map = new ConcurrentReferenceHashMap<>(size);\n\n\t\tCompletableFuture<Object> future1 = new CompletableFuture<>();\n\t\ttestNonBlockingTask(() -> {\n\t\t\tfor (int i = 0; i < size / 2; i++) {\n\t\t\t\tmap.put(\"a\" + i, \"bar\");\n\t\t\t}\n\t\t}, future1);\n\n\t\tCompletableFuture<Object> future2 = new CompletableFuture<>();\n\t\ttestNonBlockingTask(() -> {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tmap.clear();\n\t\t\t}\n\t\t}, future2);\n\n\t\t//ensure blockhound doesn't trigger\n\t\tfinal CompletableFuture<Void> allOf = CompletableFuture.allOf(future1, future2);\n\t\tassertThatNoException().isThrownBy(allOf::join);\n\t}\n\n\tprivate void testNonBlockingTask(NonBlockingTask task) {\n\t\tCompletableFuture<Object> future = new CompletableFuture<>();\n\t\ttestNonBlockingTask(task, future);\n\t\tfuture.join();\n\t}\n\n\tprivate void testNonBlockingTask(NonBlockingTask task, CompletableFuture<Object> future) {\n\t\tSchedulers.parallel().schedule(() -> {\n\t\t\ttry {\n\t\t\t\ttask.run();\n\t\t\t\tfuture.complete(null);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tfuture.completeExceptionally(ex);\n\t\t\t}\n\t\t});\n\t}\n\n\n\t@FunctionalInterface\n\tprivate interface NonBlockingTask {\n\n\t\tvoid run() throws Exception;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeAll\r\nstatic void setup() {\r\n    BlockHound.builder().with(// Reactor non-blocking thread predicate\r\n    new ReactorBlockHoundIntegration()).with(new ReactiveAdapterRegistry.SpringCoreBlockHoundIntegration()).install();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeAll",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#blockHoundIsInstalled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid blockHoundIsInstalled() {\r\n    assertThatThrownBy(() -> testNonBlockingTask(() -> Thread.sleep(10))).hasMessageContaining(\"Blocking call!\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#blockHoundIsInstalled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#blockHoundIsInstalled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#concurrentReferenceHashMapSegmentDoTask()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid concurrentReferenceHashMapSegmentDoTask() {\r\n    int size = 10000;\r\n    Map<String, String> map = new ConcurrentReferenceHashMap<>(size);\r\n    CompletableFuture<Object> future1 = new CompletableFuture<>();\r\n    testNonBlockingTask(() -> {\r\n        for (int i = 0; i < size / 2; i++) {\r\n            map.put(\"a\" + i, \"bar\");\r\n        }\r\n    }, future1);\r\n    CompletableFuture<Object> future2 = new CompletableFuture<>();\r\n    testNonBlockingTask(() -> {\r\n        for (int i = 0; i < size / 2; i++) {\r\n            map.put(\"b\" + i, \"bar\");\r\n        }\r\n    }, future2);\r\n    CompletableFuture.allOf(future1, future2).join();\r\n    assertThat(map).hasSize(size);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#concurrentReferenceHashMapSegmentDoTask()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#concurrentReferenceHashMapSegmentDoTask()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#concurrentReferenceHashMapSegmentClear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid concurrentReferenceHashMapSegmentClear() {\r\n    int size = 10000;\r\n    Map<String, String> map = new ConcurrentReferenceHashMap<>(size);\r\n    CompletableFuture<Object> future1 = new CompletableFuture<>();\r\n    testNonBlockingTask(() -> {\r\n        for (int i = 0; i < size / 2; i++) {\r\n            map.put(\"a\" + i, \"bar\");\r\n        }\r\n    }, future1);\r\n    CompletableFuture<Object> future2 = new CompletableFuture<>();\r\n    testNonBlockingTask(() -> {\r\n        for (int i = 0; i < size; i++) {\r\n            map.clear();\r\n        }\r\n    }, future2);\r\n    //ensure blockhound doesn't trigger\r\n    final CompletableFuture<Void> allOf = CompletableFuture.allOf(future1, future2);\r\n    assertThatNoException().isThrownBy(allOf::join);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringCoreBlockHoundIntegrationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringCoreBlockHoundIntegrationTests#concurrentReferenceHashMapSegmentClear()",
    "tailType": "method"
  }
]