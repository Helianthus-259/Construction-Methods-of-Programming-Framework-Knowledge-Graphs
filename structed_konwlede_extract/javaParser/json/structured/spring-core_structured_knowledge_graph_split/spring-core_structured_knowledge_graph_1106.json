[
  {
    "head": "org.springframework.core.MethodParameter#nestedIfOptional()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a variant of this {@code MethodParameter} which points to\r\n * the same parameter but one nesting level deeper in case of a\r\n * {@link java.util.Optional} declaration.\r\n * @since 4.3\r\n * @see #isOptional()\r\n * @see #nested()\r\n */\r\npublic MethodParameter nestedIfOptional() {\r\n    return (getParameterType() == Optional.class ? nested() : this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#nestedIfOptional()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#withContainingClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a variant of this {@code MethodParameter} which refers to the\r\n * given containing class.\r\n * @param containingClass a specific containing class (potentially a\r\n * subclass of the declaring class, for example, substituting a type variable)\r\n * @since 5.2\r\n * @see #getParameterType()\r\n */\r\npublic MethodParameter withContainingClass(@Nullable Class<?> containingClass) {\r\n    MethodParameter result = clone();\r\n    result.containingClass = containingClass;\r\n    result.parameterType = null;\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#withContainingClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setContainingClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set a containing class to resolve the parameter type against.\r\n */\r\n@Deprecated\r\nvoid setContainingClass(Class<?> containingClass) {\r\n    this.containingClass = containingClass;\r\n    this.parameterType = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#setContainingClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setContainingClass(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getContainingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the containing class for this method parameter.\r\n * @return a specific containing class (potentially a subclass of the\r\n * declaring class), or otherwise simply the declaring class itself\r\n * @see #getDeclaringClass()\r\n */\r\npublic Class<?> getContainingClass() {\r\n    Class<?> containingClass = this.containingClass;\r\n    return (containingClass != null ? containingClass : getDeclaringClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getContainingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setParameterType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set a resolved (generic) parameter type.\r\n */\r\n@Deprecated\r\nvoid setParameterType(@Nullable Class<?> parameterType) {\r\n    this.parameterType = parameterType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#setParameterType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setParameterType(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the type of the method/constructor parameter.\r\n * @return the parameter type (never {@code null})\r\n */\r\npublic Class<?> getParameterType() {\r\n    Class<?> paramType = this.parameterType;\r\n    if (paramType != null) {\r\n        return paramType;\r\n    }\r\n    if (getContainingClass() != getDeclaringClass()) {\r\n        paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();\r\n    }\r\n    if (paramType == null) {\r\n        paramType = computeParameterType();\r\n    }\r\n    this.parameterType = paramType;\r\n    return paramType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameterType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getGenericParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the generic type of the method/constructor parameter.\r\n * @return the parameter type (never {@code null})\r\n * @since 3.0\r\n */\r\npublic Type getGenericParameterType() {\r\n    Type paramType = this.genericParameterType;\r\n    if (paramType == null) {\r\n        if (this.parameterIndex < 0) {\r\n            Method method = getMethod();\r\n            paramType = (method != null ? (KotlinDetector.isKotlinType(getContainingClass()) ? KotlinDelegate.getGenericReturnType(method) : method.getGenericReturnType()) : void.class);\r\n        } else {\r\n            Type[] genericParameterTypes = this.executable.getGenericParameterTypes();\r\n            int index = this.parameterIndex;\r\n            if (this.executable instanceof Constructor && ClassUtils.isInnerClass(this.executable.getDeclaringClass()) && genericParameterTypes.length == this.executable.getParameterCount() - 1) {\r\n                // Bug in javac: type array excludes enclosing instance parameter\r\n                // for inner classes with at least one generic constructor parameter,\r\n                // so access it with the actual parameter index lowered by 1\r\n                index = this.parameterIndex - 1;\r\n            }\r\n            paramType = (index >= 0 && index < genericParameterTypes.length ? genericParameterTypes[index] : computeParameterType());\r\n        }\r\n        this.genericParameterType = paramType;\r\n    }\r\n    return paramType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getGenericParameterType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#computeParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<?> computeParameterType() {\r\n    if (this.parameterIndex < 0) {\r\n        Method method = getMethod();\r\n        if (method == null) {\r\n            return void.class;\r\n        }\r\n        if (KotlinDetector.isKotlinType(getContainingClass())) {\r\n            return KotlinDelegate.getReturnType(method);\r\n        }\r\n        return method.getReturnType();\r\n    }\r\n    return this.executable.getParameterTypes()[this.parameterIndex];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#computeParameterType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getNestedParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the nested type of the method/constructor parameter.\r\n * @return the parameter type (never {@code null})\r\n * @since 3.1\r\n * @see #getNestingLevel()\r\n */\r\npublic Class<?> getNestedParameterType() {\r\n    if (this.nestingLevel > 1) {\r\n        Type type = getGenericParameterType();\r\n        for (int i = 2; i <= this.nestingLevel; i++) {\r\n            if (type instanceof ParameterizedType parameterizedType) {\r\n                Type[] args = parameterizedType.getActualTypeArguments();\r\n                Integer index = getTypeIndexForLevel(i);\r\n                type = args[index != null ? index : args.length - 1];\r\n            }\r\n            // TODO: Object.class if unresolvable\r\n        }\r\n        if (type instanceof Class<?> clazz) {\r\n            return clazz;\r\n        } else if (type instanceof ParameterizedType parameterizedType) {\r\n            Type arg = parameterizedType.getRawType();\r\n            if (arg instanceof Class<?> clazz) {\r\n                return clazz;\r\n            }\r\n        }\r\n        return Object.class;\r\n    } else {\r\n        return getParameterType();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getNestedParameterType()",
    "tailType": "method"
  }
]