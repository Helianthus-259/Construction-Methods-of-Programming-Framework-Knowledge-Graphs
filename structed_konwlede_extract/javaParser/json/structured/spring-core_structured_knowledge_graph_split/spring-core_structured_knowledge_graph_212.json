[
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#canonicalName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#canonicalName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#of(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "static SimpleTypeReference of(String className) {\r\n    Assert.notNull(className, \"'className' must not be null\");\r\n    if (!isValidClassName(className)) {\r\n        throw new IllegalStateException(\"Invalid class name '\" + className + \"'\");\r\n    }\r\n    if (!className.contains(\"$\")) {\r\n        return createTypeReference(className);\r\n    }\r\n    String[] elements = className.split(\"(?<!\\\\$)\\\\$(?!\\\\$)\");\r\n    SimpleTypeReference typeReference = createTypeReference(elements[0]);\r\n    for (int i = 1; i < elements.length; i++) {\r\n        typeReference = new SimpleTypeReference(typeReference.getPackageName(), elements[i], typeReference);\r\n    }\r\n    return typeReference;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#of(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#isValidClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isValidClassName(String className) {\r\n    for (String s : className.split(\"\\\\.\", -1)) {\r\n        String candidate = s.replace(\"[\", \"\").replace(\"]\", \"\");\r\n        if (!SourceVersion.isIdentifier(candidate)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#isValidClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#createTypeReference(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static SimpleTypeReference createTypeReference(String className) {\r\n    int i = className.lastIndexOf('.');\r\n    if (i != -1) {\r\n        return new SimpleTypeReference(className.substring(0, i), className.substring(i + 1), null);\r\n    } else {\r\n        String packageName = (isPrimitive(className) ? \"java.lang\" : \"\");\r\n        return new SimpleTypeReference(packageName, className, null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#createTypeReference(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getCanonicalName() {\r\n    if (this.canonicalName == null) {\r\n        StringBuilder names = new StringBuilder();\r\n        buildName(this, names);\r\n        this.canonicalName = addPackageIfNecessary(names.toString());\r\n    }\r\n    return this.canonicalName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#getCanonicalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean isPrimitive() {\r\n    return isPrimitive(getSimpleName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#isPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#isPrimitive(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isPrimitive(String name) {\r\n    return PRIMITIVE_NAMES.stream().anyMatch(name::startsWith);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#isPrimitive(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#buildName(TypeReference,StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void buildName(@Nullable TypeReference type, StringBuilder sb) {\r\n    if (type == null) {\r\n        return;\r\n    }\r\n    String typeName = (type.getEnclosingType() != null ? \".\" + type.getSimpleName() : type.getSimpleName());\r\n    sb.insert(0, typeName);\r\n    buildName(type.getEnclosingType(), sb);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#buildName(TypeReference,StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractTypeReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]