[
  {
    "head": "org.springframework.core.type.classreading.Source#toStringValue",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    int result = 1;\r\n    result = 31 * result + this.declaringClassName.hashCode();\r\n    result = 31 * result + this.methodName.hashCode();\r\n    result = 31 * result + this.descriptor.hashCode();\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.Source",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.Source#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || getClass() != other.getClass()) {\r\n        return false;\r\n    }\r\n    Source otherSource = (Source) other;\r\n    return (this.declaringClassName.equals(otherSource.declaringClassName) && this.methodName.equals(otherSource.methodName) && this.descriptor.equals(otherSource.descriptor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.Source",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.Source#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    String value = this.toStringValue;\r\n    if (value == null) {\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(this.declaringClassName);\r\n        builder.append('.');\r\n        builder.append(this.methodName);\r\n        Type[] argumentTypes = Type.getArgumentTypes(this.descriptor);\r\n        builder.append('(');\r\n        for (int i = 0; i < argumentTypes.length; i++) {\r\n            if (i != 0) {\r\n                builder.append(',');\r\n            }\r\n            builder.append(argumentTypes[i].getClassName());\r\n        }\r\n        builder.append(')');\r\n        value = builder.toString();\r\n        this.toStringValue = value;\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.Source",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.Source#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.Source#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.filter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport java.io.IOException;\n\nimport org.springframework.core.type.ClassMetadata;\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\n\n/**\n * Type filter that exposes a\n * {@link org.springframework.core.type.ClassMetadata} object\n * to subclasses, for class testing purposes.\n *\n * @author Rod Johnson\n * @author Costin Leau\n * @author Juergen Hoeller\n * @since 2.5\n * @see #match(org.springframework.core.type.ClassMetadata)\n */\npublic abstract class AbstractClassTestingTypeFilter implements TypeFilter {\n\n\t@Override\n\tpublic final boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)\n\t\t\tthrows IOException {\n\n\t\treturn match(metadataReader.getClassMetadata());\n\t}\n\n\t/**\n\t * Determine a match based on the given ClassMetadata object.\n\t * @param metadata the ClassMetadata object\n\t * @return whether this filter matches on the specified type\n\t */\n\tprotected abstract boolean match(ClassMetadata metadata);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\r\n    return match(metadataReader.getClassMetadata());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter#match(ClassMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine a match based on the given ClassMetadata object.\r\n * @param metadata the ClassMetadata object\r\n * @return whether this filter matches on the specified type\r\n */\r\nprotected abstract boolean match(ClassMetadata metadata);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AbstractClassTestingTypeFilter#match(ClassMetadata)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.filter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter",
    "tailType": "class"
  }
]