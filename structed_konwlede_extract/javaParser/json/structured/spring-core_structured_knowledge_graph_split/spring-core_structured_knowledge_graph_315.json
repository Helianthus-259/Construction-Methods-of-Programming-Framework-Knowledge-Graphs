[
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithReader() throws IOException {\r\n    String propString = \"code1=message1\\ncode2:message2\";\r\n    Properties props = loadProperties(propString, true);\r\n    String propCopy = storeProperties(props, null, true);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ByteVector#put11(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\r\n *\r\n * @param byteValue1 a byte.\r\n * @param byteValue2 another byte.\r\n * @return this byte vector.\r\n */\r\nfinal ByteVector put11(final int byteValue1, final int byteValue2) {\r\n    int currentLength = length;\r\n    if (currentLength + 2 > data.length) {\r\n        enlarge(2);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) byteValue1;\r\n    currentData[currentLength++] = (byte) byteValue2;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#put11(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithReaderAndWhitespace() throws IOException {\r\n    String propString = \" code1\\t= \\tmessage1\\n  code2 \\t  :\\t mess\\\\\\n \\t  age2\";\r\n    Properties props = loadProperties(propString, true);\r\n    String propCopy = storeProperties(props, null, true);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndHeader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithReaderAndHeader() throws IOException {\r\n    String propString = \"code1\\t=\\tmessage1\\n  code2 \\t  : \\t message2\";\r\n    Properties props = loadProperties(propString, true);\r\n    String propCopy = storeProperties(props, \"myHeader\", true);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndHeader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndHeader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndEmptyValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertiesPersisterWithReaderAndEmptyValue() throws IOException {\r\n    String propString = \"code1=message1\\ncode2:message2\\ncode3=\";\r\n    Properties props = loadProperties(propString, true);\r\n    String propCopy = storeProperties(props, null, true);\r\n    loadProperties(propCopy, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndEmptyValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#propertiesPersisterWithReaderAndEmptyValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ByteVector#putShort(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\r\n *\r\n * @param shortValue a short.\r\n * @return this byte vector.\r\n */\r\npublic ByteVector putShort(final int shortValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 2 > data.length) {\r\n        enlarge(2);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) (shortValue >>> 8);\r\n    currentData[currentLength++] = (byte) shortValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putShort(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests#loadProperties(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Properties loadProperties(String propString, boolean useReader) throws IOException {\r\n    DefaultPropertiesPersister persister = new DefaultPropertiesPersister();\r\n    Properties props = new Properties();\r\n    if (useReader) {\r\n        persister.load(props, new StringReader(propString));\r\n    } else {\r\n        persister.load(props, new ByteArrayInputStream(propString.getBytes()));\r\n    }\r\n    assertThat(props.getProperty(\"code1\")).isEqualTo(\"message1\");\r\n    assertThat(props.getProperty(\"code2\")).isEqualTo(\"message2\");\r\n    return props;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#loadProperties(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#put12(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\r\n * necessary.\r\n *\r\n * @param byteValue a byte.\r\n * @param shortValue a short.\r\n * @return this byte vector.\r\n */\r\nfinal ByteVector put12(final int byteValue, final int shortValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 3 > data.length) {\r\n        enlarge(3);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) byteValue;\r\n    currentData[currentLength++] = (byte) (shortValue >>> 8);\r\n    currentData[currentLength++] = (byte) shortValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#put12(int,int)",
    "tailType": "method"
  }
]