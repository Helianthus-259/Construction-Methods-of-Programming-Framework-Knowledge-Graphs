[
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendTopLevelMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendNestedMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid appendNestedMethod() throws Exception {\r\n    SomeObject object = new SomeObject();\r\n    String str = new ToStringCreator(object).append(\"myMethod\", SomeObject.class.getDeclaredMethod(\"someMethod\")).toString();\r\n    assertThat(str).isEqualTo(\"[ToStringCreatorTests.SomeObject@%s myMethod = someMethod@ToStringCreatorTests.SomeObject]\", ObjectUtils.getIdentityHexString(object));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.ToStringCreatorTests#appendNestedMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendNestedMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid appendList() {\r\n    SomeObject object = new SomeObject();\r\n    List<SomeObject> list = List.of(s1, s2, s3);\r\n    String str = new ToStringCreator(object).append(\"myLetters\", list).toString();\r\n    assertThat(str).isEqualTo(\"[ToStringCreatorTests.SomeObject@%s myLetters = list[A, B, C]]\", ObjectUtils.getIdentityHexString(object));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.ToStringCreatorTests#appendList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid appendSet() {\r\n    SomeObject object = new SomeObject();\r\n    Set<SomeObject> set = new LinkedHashSet<>();\r\n    set.add(s1);\r\n    set.add(s2);\r\n    set.add(s3);\r\n    String str = new ToStringCreator(object).append(\"myLetters\", set).toString();\r\n    assertThat(str).isEqualTo(\"[ToStringCreatorTests.SomeObject@%s myLetters = set[A, B, C]]\", ObjectUtils.getIdentityHexString(object));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.ToStringCreatorTests#appendSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid appendMap() {\r\n    Map<String, String> map = new LinkedHashMap<>() {\r\n\r\n        {\r\n            put(\"Keri\", \"Softball\");\r\n            put(\"Scot\", \"Fishing\");\r\n            put(\"Keith\", \"Flag Football\");\r\n        }\r\n    };\r\n    Object stringy = new Object() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return new ToStringCreator(this).append(\"familyFavoriteSport\", map).toString();\r\n        }\r\n    };\r\n    assertThat(stringy.toString()).containsSubsequence(\"[\", ClassUtils.getShortName(stringy.getClass().getName()), \"@\", ObjectUtils.getIdentityHexString(stringy), \"familyFavoriteSport = map['Keri' -> 'Softball', 'Scot' -> 'Fishing', 'Keith' -> 'Flag Football']\", \"]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.ToStringCreatorTests#appendMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#appendMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#someMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unused\")\r\nprivate static void someMethod() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.ToStringCreatorTests#someMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests#someMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.style.SomeObject",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.style.SomeObject",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ToStringCreator}.\n *\n * @author Keith Donald\n * @author Sam Brannen\n */\nclass ToStringCreatorTests {\n\n\tprivate final SomeObject s1 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"A\";\n\t\t}\n\t};\n\n\tprivate final SomeObject s2 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"B\";\n\t\t}\n\t};\n\n\tprivate final SomeObject s3 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"C\";\n\t\t}\n\t};\n\n\n\t@Test\n\tvoid primitiveArray() {\n\t\tint[] integers = {0, 1, 2, 3, 4};\n\t\tString str = new ToStringCreator(integers).toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[@%s array<Integer>[0, 1, 2, 3, 4]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(integers));\n\t}\n\n\t@Test\n\tvoid objectArray() {\n\t\tSomeObject[] array = new SomeObject[] {s1, s2, s3};\n\t\tString str = new ToStringCreator(array).toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[@%s array<ToStringCreatorTests.SomeObject>[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(array));\n\t}\n\n\t@Test\n\tvoid appendTopLevelClass() {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myClass\", Integer.class)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myClass = Integer]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendNestedClass() {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myClass\", object.getClass())\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myClass = ToStringCreatorTests.SomeObject]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendTopLevelMethod() throws Exception {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myMethod\", ToStringCreatorTests.class.getDeclaredMethod(\"someMethod\"))\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myMethod = someMethod@ToStringCreatorTests]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendNestedMethod() throws Exception {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myMethod\", SomeObject.class.getDeclaredMethod(\"someMethod\"))\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myMethod = someMethod@ToStringCreatorTests.SomeObject]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendList() {\n\t\tSomeObject object = new SomeObject();\n\t\tList<SomeObject> list = List.of(s1, s2, s3);\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myLetters\", list)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myLetters = list[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendSet() {\n\t\tSomeObject object = new SomeObject();\n\t\tSet<SomeObject> set = new LinkedHashSet<>();\n\t\tset.add(s1);\n\t\tset.add(s2);\n\t\tset.add(s3);\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myLetters\", set)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myLetters = set[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendMap() {\n\t\tMap<String, String> map = new LinkedHashMap<>() {{\n\t\t\tput(\"Keri\", \"Softball\");\n\t\t\tput(\"Scot\", \"Fishing\");\n\t\t\tput(\"Keith\", \"Flag Football\");\n\t\t}};\n\t\tObject stringy = new Object() {\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn new ToStringCreator(this)\n\t\t\t\t\t\t.append(\"familyFavoriteSport\", map)\n\t\t\t\t\t\t.toString();\n\t\t\t}\n\t\t};\n\t\tassertThat(stringy.toString())\n\t\t\t.containsSubsequence(\n\t\t\t\t\"[\",\n\t\t\t\tClassUtils.getShortName(stringy.getClass().getName()),\n\t\t\t\t\"@\",\n\t\t\t\tObjectUtils.getIdentityHexString(stringy),\n\t\t\t\t\"familyFavoriteSport = map['Keri' -> 'Softball', 'Scot' -> 'Fishing', 'Keith' -> 'Flag Football']\",\n\t\t\t\t\"]\"\n\t\t\t);\n\t}\n\n\n\tprivate static class SomeObject {\n\t\t@SuppressWarnings(\"unused\")\n\t\tprivate static void someMethod() {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static void someMethod() {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.style.SomeObject#someMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unused\")\r\nprivate static void someMethod() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.SomeObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.SomeObject#someMethod()",
    "tailType": "method"
  }
]