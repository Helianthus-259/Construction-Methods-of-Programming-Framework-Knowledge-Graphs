[
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySource#getPropertyNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getPropertyNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getOptionValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic List<String> getOptionValues(String name) {\r\n    List<?> argValues = this.source.valuesOf(name);\r\n    List<String> stringArgValues = new ArrayList<>();\r\n    for (Object argValue : argValues) {\r\n        stringArgValues.add(argValue.toString());\r\n    }\r\n    if (stringArgValues.isEmpty()) {\r\n        return (this.source.has(name) ? Collections.emptyList() : null);\r\n    }\r\n    return Collections.unmodifiableList(stringArgValues);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySource#getOptionValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getOptionValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getOptionValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getNonOptionArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected List<String> getNonOptionArgs() {\r\n    List<?> argValues = this.source.nonOptionArguments();\r\n    List<String> stringArgValues = new ArrayList<>();\r\n    for (Object argValue : argValues) {\r\n        stringArgValues.add(argValue.toString());\r\n    }\r\n    return (stringArgValues.isEmpty() ? Collections.emptyList() : Collections.unmodifiableList(stringArgValues));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySource#getNonOptionArgs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getNonOptionArgs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "CommandLinePropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.MapPropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link PropertySource} that reads keys and values from a {@code Map} object.\n * The underlying map should not contain any {@code null} values in order to\n * comply with {@link #getProperty} and {@link #containsProperty} semantics.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see PropertiesPropertySource\n */\npublic class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n\n\t/**\n\t * Create a new {@code MapPropertySource} with the given name and {@code Map}.\n\t * @param name the associated name\n\t * @param source the Map source (without {@code null} values in order to get\n\t * consistent {@link #getProperty} and {@link #containsProperty} behavior)\n\t */\n\tpublic MapPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\n\t@Override\n\tpublic @Nullable Object getProperty(String name) {\n\t\treturn this.source.get(name);\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn this.source.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.keySet());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object getProperty(String name) {\r\n    return this.source.get(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MapPropertySource#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean containsProperty(String name) {\r\n    return this.source.containsKey(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MapPropertySource#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MapPropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]