[
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#computeIfAbsentWithExistingValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#computeIfAbsentWithExistingValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#computeIfAbsentWithComputedValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid computeIfAbsentWithComputedValue() {\r\n    assertThat(map.computeIfAbsent(\"key\", key2 -> \"value1\")).isEqualTo(\"value1\");\r\n    assertThat(map.computeIfAbsent(\"KEY\", key1 -> \"value2\")).isEqualTo(\"value1\");\r\n    assertThat(map.computeIfAbsent(\"Key\", key -> \"value3\")).isEqualTo(\"value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#computeIfAbsentWithComputedValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#computeIfAbsentWithComputedValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#mapClone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapClone() {\r\n    assertThat(map.put(\"key\", \"value1\")).isNull();\r\n    LinkedCaseInsensitiveMap<String> copy = map.clone();\r\n    assertThat(copy.getLocale()).isEqualTo(map.getLocale());\r\n    assertThat(map.get(\"key\")).isEqualTo(\"value1\");\r\n    assertThat(map.get(\"KEY\")).isEqualTo(\"value1\");\r\n    assertThat(map.get(\"Key\")).isEqualTo(\"value1\");\r\n    assertThat(copy.get(\"key\")).isEqualTo(\"value1\");\r\n    assertThat(copy.get(\"KEY\")).isEqualTo(\"value1\");\r\n    assertThat(copy.get(\"Key\")).isEqualTo(\"value1\");\r\n    copy.put(\"Key\", \"value2\");\r\n    assertThat(map).hasSize(1);\r\n    assertThat(copy).hasSize(1);\r\n    assertThat(map.get(\"key\")).isEqualTo(\"value1\");\r\n    assertThat(map.get(\"KEY\")).isEqualTo(\"value1\");\r\n    assertThat(map.get(\"Key\")).isEqualTo(\"value1\");\r\n    assertThat(copy.get(\"key\")).isEqualTo(\"value2\");\r\n    assertThat(copy.get(\"KEY\")).isEqualTo(\"value2\");\r\n    assertThat(copy.get(\"Key\")).isEqualTo(\"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#mapClone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#mapClone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromKeySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clearFromKeySet() {\r\n    map.put(\"key\", \"value\");\r\n    map.keySet().clear();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromKeySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromKeySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromKeySet() {\r\n    map.put(\"key\", \"value\");\r\n    map.keySet().remove(\"key\");\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySetViaIterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromKeySetViaIterator() {\r\n    map.put(\"key\", \"value\");\r\n    nextAndRemove(map.keySet().iterator());\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySetViaIterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromKeySetViaIterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clearFromValues() {\r\n    map.put(\"key\", \"value\");\r\n    map.values().clear();\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]