[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2024-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.core.io.buffer.DataBufferUtils.release;\n\n/**\n * Tests for {@link DefaultDataBuffer}.\n *\n * @author Injae Kim\n * @since 6.2\n */\nclass DefaultDataBufferTests {\n\n\tprivate final DefaultDataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n\n\t@Test // gh-30967\n\tvoid getNativeBuffer() {\n\t\tDefaultDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(256);\n\t\tdataBuffer.write(\"0123456789\", StandardCharsets.UTF_8);\n\n\t\tbyte[] result = new byte[7];\n\t\tdataBuffer.read(result);\n\t\tassertThat(result).isEqualTo(\"0123456\".getBytes(StandardCharsets.UTF_8));\n\n\t\tByteBuffer nativeBuffer = dataBuffer.getNativeBuffer();\n\t\tassertThat(nativeBuffer.position()).isEqualTo(7);\n\t\tassertThat(dataBuffer.readPosition()).isEqualTo(7);\n\t\tassertThat(nativeBuffer.limit()).isEqualTo(10);\n\t\tassertThat(dataBuffer.writePosition()).isEqualTo(10);\n\t\tassertThat(nativeBuffer.capacity()).isEqualTo(256);\n\t\tassertThat(dataBuffer.capacity()).isEqualTo(256);\n\n\n\t\trelease(dataBuffer);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferTests#bufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests#getNativeBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-30967\r\n@Test\r\nvoid getNativeBuffer() {\r\n    DefaultDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(256);\r\n    dataBuffer.write(\"0123456789\", StandardCharsets.UTF_8);\r\n    byte[] result = new byte[7];\r\n    dataBuffer.read(result);\r\n    assertThat(result).isEqualTo(\"0123456\".getBytes(StandardCharsets.UTF_8));\r\n    ByteBuffer nativeBuffer = dataBuffer.getNativeBuffer();\r\n    assertThat(nativeBuffer.position()).isEqualTo(7);\r\n    assertThat(dataBuffer.readPosition()).isEqualTo(7);\r\n    assertThat(nativeBuffer.limit()).isEqualTo(10);\r\n    assertThat(dataBuffer.writePosition()).isEqualTo(10);\r\n    assertThat(nativeBuffer.capacity()).isEqualTo(256);\r\n    assertThat(dataBuffer.capacity()).isEqualTo(256);\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferTests#getNativeBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferTests#getNativeBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\n\nimport org.eclipse.jetty.io.Content;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.BDDMockito.then;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\n\n/**\n * @author Arjen Poutsma\n */\npublic class JettyDataBufferTests {\n\n\tprivate final JettyDataBufferFactory dataBufferFactory = new JettyDataBufferFactory();\n\n\t@Test\n\tvoid releaseRetainChunk() {\n\t\tByteBuffer buffer = ByteBuffer.allocate(3);\n\t\tContent.Chunk mockChunk = mock();\n\t\tgiven(mockChunk.getByteBuffer()).willReturn(buffer);\n\t\tgiven(mockChunk.release()).willReturn(false, false, true);\n\n\n\n\t\tJettyDataBuffer dataBuffer = this.dataBufferFactory.wrap(mockChunk);\n\t\tdataBuffer.retain();\n\t\tdataBuffer.retain();\n\t\tassertThat(dataBuffer.release()).isFalse();\n\t\tassertThat(dataBuffer.release()).isFalse();\n\t\tassertThat(dataBuffer.release()).isTrue();\n\n\t\tassertThatIllegalStateException().isThrownBy(dataBuffer::release);\n\n\t\tthen(mockChunk).should(times(3)).retain();\n\t\tthen(mockChunk).should(times(3)).release();\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferTests#dataBufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests#dataBufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "JettyDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests#releaseRetainChunk()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid releaseRetainChunk() {\r\n    ByteBuffer buffer = ByteBuffer.allocate(3);\r\n    Content.Chunk mockChunk = mock();\r\n    given(mockChunk.getByteBuffer()).willReturn(buffer);\r\n    given(mockChunk.release()).willReturn(false, false, true);\r\n    JettyDataBuffer dataBuffer = this.dataBufferFactory.wrap(mockChunk);\r\n    dataBuffer.retain();\r\n    dataBuffer.retain();\r\n    assertThat(dataBuffer.release()).isFalse();\r\n    assertThat(dataBuffer.release()).isFalse();\r\n    assertThat(dataBuffer.release()).isTrue();\r\n    assertThatIllegalStateException().isThrownBy(dataBuffer::release);\r\n    then(mockChunk).should(times(3)).retain();\r\n    then(mockChunk).should(times(3)).release();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferTests#releaseRetainChunk()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferTests#releaseRetainChunk()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory;\n\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.springframework.core.io.buffer.DataBufferUtils.release;\n\n/**\n * @author Arjen Poutsma\n */\nclass LeakAwareDataBufferFactoryTests {\n\n\tprivate final LeakAwareDataBufferFactory bufferFactory = new LeakAwareDataBufferFactory();\n\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid leak() {\n\t\tDataBuffer dataBuffer = this.bufferFactory.allocateBuffer();\n\t\ttry {\n\t\t\tassertThatExceptionOfType(AssertionError.class).isThrownBy(this.bufferFactory::checkForLeaks);\n\t\t}\n\t\tfinally {\n\t\t\trelease(dataBuffer);\n\t\t}\n\t}\n\n\t@Test\n\tvoid noLeak() {\n\t\tDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(256);\n\t\trelease(dataBuffer);\n\t\tthis.bufferFactory.checkForLeaks();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#bufferFactory",
    "tailType": "field"
  }
]