[
  {
    "head": "org.springframework.core.convert.support.StringToNumberConverterFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToNumber",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\nimport org.springframework.util.NumberUtils;\n\n/**\n * Converts from a String any JDK-standard Number implementation.\n *\n * <p>Support Number classes including Byte, Short, Integer, Float, Double, Long, BigInteger, BigDecimal. This class\n * delegates to {@link NumberUtils#parseNumber(String, Class)} to perform the conversion.\n *\n * @author Keith Donald\n * @since 3.0\n * @see java.lang.Byte\n * @see java.lang.Short\n * @see java.lang.Integer\n * @see java.lang.Long\n * @see java.math.BigInteger\n * @see java.lang.Float\n * @see java.lang.Double\n * @see java.math.BigDecimal\n * @see NumberUtils\n */\nfinal class StringToNumberConverterFactory implements ConverterFactory<String, Number> {\n\n\t@Override\n\tpublic <T extends Number> Converter<String, T> getConverter(Class<T> targetType) {\n\t\treturn new StringToNumber<>(targetType);\n\t}\n\n\n\tprivate static final class StringToNumber<T extends Number> implements Converter<String, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic StringToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable T convert(String source) {\n\t\t\tif (source.isEmpty()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn NumberUtils.parseNumber(source, this.targetType);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToNumber#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic T convert(String source) {\r\n    if (source.isEmpty()) {\r\n        return null;\r\n    }\r\n    return NumberUtils.parseNumber(source, this.targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToNumber#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToNumber#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToPatternConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPatternConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.regex.Pattern;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts from a String to a {@link java.util.regex.Pattern}.\n *\n * @author Valery Yatsynovich\n * @author Stephane Nicoll\n * @since 6.1\n */\nfinal class StringToPatternConverter implements Converter<String, Pattern> {\n\n\t@Override\n\tpublic @Nullable Pattern convert(String source) {\n\t\tif (source.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn Pattern.compile(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPatternConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Pattern convert(String source) {\r\n    if (source.isEmpty()) {\r\n        return null;\r\n    }\r\n    return Pattern.compile(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPatternConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToPatternConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPatternConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPatternConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToPropertiesConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPropertiesConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.io.ByteArrayInputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Properties;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts a String to a Properties by calling Properties#load(java.io.InputStream).\n * Uses ISO-8559-1 encoding required by Properties.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class StringToPropertiesConverter implements Converter<String, Properties> {\n\n\t@Override\n\tpublic Properties convert(String source) {\n\t\ttry {\n\t\t\tProperties props = new Properties();\n\t\t\t// Must use the ISO-8859-1 encoding because Properties.load(stream) expects it.\n\t\t\tprops.load(new ByteArrayInputStream(source.getBytes(StandardCharsets.ISO_8859_1)));\n\t\t\treturn props;\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\t// Should never happen.\n\t\t\tthrow new IllegalArgumentException(\"Failed to parse [\" + source + \"] into Properties\", ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPropertiesConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Properties convert(String source) {\r\n    try {\r\n        Properties props = new Properties();\r\n        // Must use the ISO-8859-1 encoding because Properties.load(stream) expects it.\r\n        props.load(new ByteArrayInputStream(source.getBytes(StandardCharsets.ISO_8859_1)));\r\n        return props;\r\n    } catch (Exception ex) {\r\n        // Should never happen.\r\n        throw new IllegalArgumentException(\"Failed to parse [\" + source + \"] into Properties\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]