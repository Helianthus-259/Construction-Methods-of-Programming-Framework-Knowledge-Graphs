[
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#getReactiveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the reactive type for this descriptor.\r\n */\r\npublic Class<?> getReactiveType() {\r\n    return this.reactiveType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#getReactiveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#isMultiValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if the reactive type can produce more than 1 value\r\n * can be produced and is therefore a good fit to adapt to {@code Flux}.\r\n * A {@code false} return value implies the reactive type can produce 1\r\n * value at most and is therefore a good fit to adapt to {@code Mono}.\r\n */\r\npublic boolean isMultiValue() {\r\n    return this.multiValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#isMultiValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#isNoValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if the reactive type does not produce any values and\r\n * only provides completion and error signals.\r\n */\r\npublic boolean isNoValue() {\r\n    return this.noValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#isNoValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#supportsEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if the reactive type can complete with no values.\r\n */\r\npublic boolean supportsEmpty() {\r\n    return (this.emptySupplier != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#supportsEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#getEmptyValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an empty-value instance for the underlying reactive or async type.\r\n * <p>Use of this type implies {@link #supportsEmpty()} is {@code true}.\r\n */\r\npublic Object getEmptyValue() {\r\n    Assert.state(this.emptySupplier != null, \"Empty values not supported\");\r\n    Object emptyValue = this.emptySupplier.get();\r\n    Assert.notNull(emptyValue, \"Invalid null return value from emptySupplier\");\r\n    return emptyValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#getEmptyValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#isDeferred()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether the underlying operation is deferred and needs to be started\r\n * explicitly, for example, via subscribing (or similar), or whether it is triggered\r\n * without the consumer having any control.\r\n * @since 5.2.7\r\n */\r\npublic boolean isDeferred() {\r\n    return this.deferred;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#isDeferred()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || getClass() != other.getClass()) {\r\n        return false;\r\n    }\r\n    return this.reactiveType.equals(((ReactiveTypeDescriptor) other).reactiveType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.reactiveType.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor#multiValue(Class<?>,Supplier<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Descriptor for a reactive type that can produce {@code 0..N} values.\r\n * @param type the reactive type\r\n * @param emptySupplier a supplier of an empty-value instance of the reactive type\r\n */\r\npublic static ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier) {\r\n    return new ReactiveTypeDescriptor(type, true, false, emptySupplier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveTypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveTypeDescriptor#multiValue(Class<?>,Supplier<?>)",
    "tailType": "method"
  }
]