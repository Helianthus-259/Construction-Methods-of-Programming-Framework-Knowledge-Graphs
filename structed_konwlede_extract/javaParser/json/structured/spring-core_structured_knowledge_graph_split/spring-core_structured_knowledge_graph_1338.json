[
  {
    "head": "org.springframework.util.MimeType#parametersAreEqual(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the parameters in this {@code MimeType} and the supplied\r\n * {@code MimeType} are equal, performing case-insensitive comparisons\r\n * for {@link Charset Charsets}.\r\n * @since 4.2\r\n */\r\nprivate boolean parametersAreEqual(MimeType other) {\r\n    if (this.parameters.size() != other.parameters.size()) {\r\n        return false;\r\n    }\r\n    for (Map.Entry<String, String> entry : this.parameters.entrySet()) {\r\n        String key = entry.getKey();\r\n        if (!other.parameters.containsKey(key)) {\r\n            return false;\r\n        }\r\n        if (PARAM_CHARSET.equals(key)) {\r\n            if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {\r\n                return false;\r\n            }\r\n        } else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#parametersAreEqual(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    int result = this.type.hashCode();\r\n    result = 31 * result + this.subtype.hashCode();\r\n    result = 31 * result + this.parameters.hashCode();\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    String value = this.toStringValue;\r\n    if (value == null) {\r\n        StringBuilder builder = new StringBuilder();\r\n        appendTo(builder);\r\n        value = builder.toString();\r\n        this.toStringValue = value;\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#appendTo(StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void appendTo(StringBuilder builder) {\r\n    builder.append(this.type);\r\n    builder.append('/');\r\n    builder.append(this.subtype);\r\n    appendTo(this.parameters, builder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#appendTo(StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#appendTo(Map<String,String>,StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void appendTo(Map<String, String> map, StringBuilder builder) {\r\n    map.forEach((key, val) -> {\r\n        builder.append(';');\r\n        builder.append(key);\r\n        builder.append('=');\r\n        builder.append(val);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#appendTo(Map<String,String>,StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#compareTo(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Compares this MIME Type to another alphabetically.\r\n * @param other the MIME Type to compare to\r\n */\r\n@Override\r\npublic int compareTo(MimeType other) {\r\n    int comp = getType().compareToIgnoreCase(other.getType());\r\n    if (comp != 0) {\r\n        return comp;\r\n    }\r\n    comp = getSubtype().compareToIgnoreCase(other.getSubtype());\r\n    if (comp != 0) {\r\n        return comp;\r\n    }\r\n    comp = getParameters().size() - other.getParameters().size();\r\n    if (comp != 0) {\r\n        return comp;\r\n    }\r\n    TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\r\n    thisAttributes.addAll(getParameters().keySet());\r\n    TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\r\n    otherAttributes.addAll(other.getParameters().keySet());\r\n    Iterator<String> thisAttributesIterator = thisAttributes.iterator();\r\n    Iterator<String> otherAttributesIterator = otherAttributes.iterator();\r\n    while (thisAttributesIterator.hasNext()) {\r\n        String thisAttribute = thisAttributesIterator.next();\r\n        String otherAttribute = otherAttributesIterator.next();\r\n        comp = thisAttribute.compareToIgnoreCase(otherAttribute);\r\n        if (comp != 0) {\r\n            return comp;\r\n        }\r\n        if (PARAM_CHARSET.equals(thisAttribute)) {\r\n            Charset thisCharset = getCharset();\r\n            Charset otherCharset = other.getCharset();\r\n            if (thisCharset != otherCharset) {\r\n                if (thisCharset == null) {\r\n                    return -1;\r\n                }\r\n                if (otherCharset == null) {\r\n                    return 1;\r\n                }\r\n                comp = thisCharset.compareTo(otherCharset);\r\n                if (comp != 0) {\r\n                    return comp;\r\n                }\r\n            }\r\n        } else {\r\n            String thisValue = getParameters().get(thisAttribute);\r\n            String otherValue = other.getParameters().get(otherAttribute);\r\n            Assert.notNull(thisValue, \"Parameter for \" + thisAttribute + \" must not be null\");\r\n            if (otherValue == null) {\r\n                otherValue = \"\";\r\n            }\r\n            comp = thisValue.compareTo(otherValue);\r\n            if (comp != 0) {\r\n                return comp;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#compareTo(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#compareTo(MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#isMoreSpecific(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether this {@code MimeType} is more specific than the given\r\n * type.\r\n * <ol>\r\n * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does not, then this method returns {@code false}.</li>\r\n * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does, then this method returns {@code true}.</li>\r\n * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does not, then this method returns {@code false}.</li>\r\n * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does, then this method returns {@code true}.</li>\r\n * <li>if the two mime types have identical {@linkplain #getType() type} and\r\n * {@linkplain #getSubtype() subtype}, then the mime type with the most\r\n * parameters is more specific than the other.</li>\r\n * <li>Otherwise, this method returns {@code false}.</li>\r\n * </ol>\r\n * @param other the {@code MimeType} to be compared\r\n * @return the result of the comparison\r\n * @since 6.0\r\n * @see #isLessSpecific(MimeType)\r\n * @see <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.2\">HTTP 1.1: Semantics\r\n * and Content, section 5.3.2</a>\r\n */\r\npublic boolean isMoreSpecific(MimeType other) {\r\n    Assert.notNull(other, \"Other must not be null\");\r\n    boolean thisWildcard = isWildcardType();\r\n    boolean otherWildcard = other.isWildcardType();\r\n    if (thisWildcard && !otherWildcard) {\r\n        // */* > audio/*\r\n        return false;\r\n    } else if (!thisWildcard && otherWildcard) {\r\n        // audio/* < */*\r\n        return true;\r\n    } else {\r\n        boolean thisWildcardSubtype = isWildcardSubtype();\r\n        boolean otherWildcardSubtype = other.isWildcardSubtype();\r\n        if (thisWildcardSubtype && !otherWildcardSubtype) {\r\n            // audio/* > audio/basic\r\n            return false;\r\n        } else if (!thisWildcardSubtype && otherWildcardSubtype) {\r\n            // audio/basic < audio/*\r\n            return true;\r\n        } else if (getType().equals(other.getType()) && getSubtype().equals(other.getSubtype())) {\r\n            int paramsSize1 = getParameters().size();\r\n            int paramsSize2 = other.getParameters().size();\r\n            return paramsSize1 > paramsSize2;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isMoreSpecific(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isLessSpecific(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether this {@code MimeType} is less specific than the given type.\r\n * <ol>\r\n * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does not, then this method returns {@code true}.</li>\r\n * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does, then this method returns {@code false}.</li>\r\n * <li>if this mime type has a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does not, then this method returns {@code true}.</li>\r\n * <li>if this mime type does not have a {@linkplain #isWildcardType() wildcard type},\r\n * and the other does, then this method returns {@code false}.</li>\r\n * <li>if the two mime types have identical {@linkplain #getType() type} and\r\n * {@linkplain #getSubtype() subtype}, then the mime type with the least\r\n * parameters is less specific than the other.</li>\r\n * <li>Otherwise, this method returns {@code false}.</li>\r\n * </ol>\r\n * @param other the {@code MimeType} to be compared\r\n * @return the result of the comparison\r\n * @since 6.0\r\n * @see #isMoreSpecific(MimeType)\r\n * @see <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.2\">HTTP 1.1: Semantics\r\n * and Content, section 5.3.2</a>\r\n */\r\npublic boolean isLessSpecific(MimeType other) {\r\n    Assert.notNull(other, \"Other must not be null\");\r\n    return other.isMoreSpecific(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isLessSpecific(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#readObject(ObjectInputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\r\n    // Rely on default serialization, just initialize state after deserialization.\r\n    ois.defaultReadObject();\r\n    // Initialize transient fields.\r\n    String charsetName = getParameter(PARAM_CHARSET);\r\n    if (charsetName != null) {\r\n        this.resolvedCharset = Charset.forName(unquote(charsetName));\r\n    }\r\n}",
    "tailType": "method_code"
  }
]