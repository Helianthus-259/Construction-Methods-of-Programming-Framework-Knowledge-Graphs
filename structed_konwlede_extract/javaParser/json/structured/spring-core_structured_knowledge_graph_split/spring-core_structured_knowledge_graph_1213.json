[
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#getDeclaringClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#getReturnTypeName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the fully-qualified name of the underlying method's declared return type.\r\n * @since 4.2\r\n */\r\nString getReturnTypeName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#getReturnTypeName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#isAbstract()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying method is effectively abstract:\r\n * i.e. marked as abstract in a class or declared as a regular,\r\n * non-default method in an interface.\r\n * @since 4.2\r\n */\r\nboolean isAbstract();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#isAbstract()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#isStatic()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying method is declared as 'static'.\r\n */\r\nboolean isStatic();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#isStatic()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#isFinal()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying method is marked as 'final'.\r\n */\r\nboolean isFinal();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#isFinal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#isOverridable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying method is overridable,\r\n * i.e. not marked as static, final, or private.\r\n */\r\nboolean isOverridable();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#isOverridable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "extend",
    "tail": "AnnotatedTypeMetadata",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.core.annotation.RepeatableContainers;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * {@link AnnotationMetadata} implementation that uses standard reflection\n * to introspect a given {@link Class}.\n *\n * @author Juergen Hoeller\n * @author Mark Fisher\n * @author Chris Beams\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 2.5\n */\npublic class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata {\n\n\tprivate final MergedAnnotations mergedAnnotations;\n\n\tprivate final boolean nestedAnnotationsAsMap;\n\n\tprivate @Nullable Set<String> annotationTypes;\n\n\n\t/**\n\t * Create a new {@code StandardAnnotationMetadata} wrapper for the given Class.\n\t * @param introspectedClass the Class to introspect\n\t * @see #StandardAnnotationMetadata(Class, boolean)\n\t * @deprecated since 5.2 in favor of the factory method {@link AnnotationMetadata#introspect(Class)}\n\t */\n\t@Deprecated\n\tpublic StandardAnnotationMetadata(Class<?> introspectedClass) {\n\t\tthis(introspectedClass, false);\n\t}\n\n\t/**\n\t * Create a new {@link StandardAnnotationMetadata} wrapper for the given Class,\n\t * providing the option to return any nested annotations or annotation arrays in the\n\t * form of {@link org.springframework.core.annotation.AnnotationAttributes} instead\n\t * of actual {@link Annotation} instances.\n\t * @param introspectedClass the Class to introspect\n\t * @param nestedAnnotationsAsMap return nested annotations and annotation arrays as\n\t * {@link org.springframework.core.annotation.AnnotationAttributes} for compatibility\n\t * with ASM-based {@link AnnotationMetadata} implementations\n\t * @since 3.1.1\n\t * @deprecated since 5.2 in favor of the factory method {@link AnnotationMetadata#introspect(Class)}.\n\t * Use {@link MergedAnnotation#asMap(org.springframework.core.annotation.MergedAnnotation.Adapt...) MergedAnnotation.asMap}\n\t * from {@link #getAnnotations()} rather than {@link #getAnnotationAttributes(String)}\n\t * if {@code nestedAnnotationsAsMap} is {@code false}\n\t */\n\t@Deprecated\n\tpublic StandardAnnotationMetadata(Class<?> introspectedClass, boolean nestedAnnotationsAsMap) {\n\t\tsuper(introspectedClass);\n\t\tthis.mergedAnnotations = MergedAnnotations.from(introspectedClass,\n\t\t\t\tSearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none());\n\t\tthis.nestedAnnotationsAsMap = nestedAnnotationsAsMap;\n\t}\n\n\n\t@Override\n\tpublic MergedAnnotations getAnnotations() {\n\t\treturn this.mergedAnnotations;\n\t}\n\n\t@Override\n\tpublic Set<String> getAnnotationTypes() {\n\t\tSet<String> annotationTypes = this.annotationTypes;\n\t\tif (annotationTypes == null) {\n\t\t\tannotationTypes = Collections.unmodifiableSet(AnnotationMetadata.super.getAnnotationTypes());\n\t\t\tthis.annotationTypes = annotationTypes;\n\t\t}\n\t\treturn annotationTypes;\n\t}\n\n\t@Override\n\tpublic @Nullable Map<String, @Nullable Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString) {\n\t\tif (this.nestedAnnotationsAsMap) {\n\t\t\treturn AnnotationMetadata.super.getAnnotationAttributes(annotationName, classValuesAsString);\n\t\t}\n\t\treturn AnnotatedElementUtils.getMergedAnnotationAttributes(\n\t\t\t\tgetIntrospectedClass(), annotationName, classValuesAsString, false);\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"NullAway\") // Null-safety of Java super method not yet managed\n\tpublic @Nullable MultiValueMap<String, @Nullable Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {\n\t\tif (this.nestedAnnotationsAsMap) {\n\t\t\treturn AnnotationMetadata.super.getAllAnnotationAttributes(annotationName, classValuesAsString);\n\t\t}\n\t\treturn AnnotatedElementUtils.getAllAnnotationAttributes(\n\t\t\t\tgetIntrospectedClass(), annotationName, classValuesAsString, false);\n\t}\n\n\t@Override\n\tpublic boolean hasAnnotatedMethods(String annotationName) {\n\t\tif (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {\n\t\t\ttry {\n\t\t\t\tMethod[] methods = ReflectionUtils.getDeclaredMethods(getIntrospectedClass());\n\t\t\t\tfor (Method method : methods) {\n\t\t\t\t\tif (isAnnotatedMethod(method, annotationName)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalStateException(\"Failed to introspect annotated methods on \" + getIntrospectedClass(), ex);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Set<MethodMetadata> getAnnotatedMethods(String annotationName) {\n\t\tSet<MethodMetadata> result = new LinkedHashSet<>(4);\n\t\tif (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {\n\t\t\tReflectionUtils.doWithLocalMethods(getIntrospectedClass(), method -> {\n\t\t\t\tif (isAnnotatedMethod(method, annotationName)) {\n\t\t\t\t\tresult.add(new StandardMethodMetadata(method, this.nestedAnnotationsAsMap));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic Set<MethodMetadata> getDeclaredMethods() {\n\t\tSet<MethodMetadata> result = new LinkedHashSet<>(16);\n\t\tReflectionUtils.doWithLocalMethods(getIntrospectedClass(), method ->\n\t\t\t\tresult.add(new StandardMethodMetadata(method, this.nestedAnnotationsAsMap)));\n\t\treturn result;\n\t}\n\n\n\tprivate static boolean isAnnotatedMethod(Method method, String annotationName) {\n\t\treturn !method.isBridge() && method.getAnnotations().length > 0 &&\n\t\t\t\tAnnotatedElementUtils.isAnnotated(method, annotationName);\n\t}\n\n\tstatic AnnotationMetadata from(Class<?> introspectedClass) {\n\t\treturn new StandardAnnotationMetadata(introspectedClass, true);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#mergedAnnotations",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#mergedAnnotations",
    "headType": "field",
    "relation": "haveType",
    "tail": "MergedAnnotations",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#nestedAnnotationsAsMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#nestedAnnotationsAsMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  }
]