[
  {
    "head": "example.type.SomeDaoLikeImpl",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage example.type;\n\n/**\n * We must use a standalone set of types to ensure that no one else is loading\n * them and interfering with\n * {@link org.springframework.core.type.ClassloadingAssertions#assertClassNotLoaded(String)}.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @see org.springframework.core.type.AssignableTypeFilterTests\n */\npublic class AssignableTypeFilterTestsTypes {\n\n\tpublic static class TestNonInheritingClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic static class TestInterfaceImpl implements TestInterface {\n\t}\n\n\tpublic interface SomeDaoLikeInterface {\n\t}\n\n\tpublic static class SomeDaoLikeImpl extends SimpleJdbcDaoSupport implements SomeDaoLikeInterface {\n\t}\n\n\tpublic interface JdbcDaoSupport {\n\t}\n\n\tpublic static class SimpleJdbcDaoSupport implements JdbcDaoSupport {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "example.type.SomeDaoLikeImpl",
    "headType": "class",
    "relation": "extend",
    "tail": "SimpleJdbcDaoSupport",
    "tailType": "class"
  },
  {
    "head": "example.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "example.type.JdbcDaoSupport",
    "tailType": "class"
  },
  {
    "head": "example.type.JdbcDaoSupport",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage example.type;\n\n/**\n * We must use a standalone set of types to ensure that no one else is loading\n * them and interfering with\n * {@link org.springframework.core.type.ClassloadingAssertions#assertClassNotLoaded(String)}.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @see org.springframework.core.type.AssignableTypeFilterTests\n */\npublic class AssignableTypeFilterTestsTypes {\n\n\tpublic static class TestNonInheritingClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic static class TestInterfaceImpl implements TestInterface {\n\t}\n\n\tpublic interface SomeDaoLikeInterface {\n\t}\n\n\tpublic static class SomeDaoLikeImpl extends SimpleJdbcDaoSupport implements SomeDaoLikeInterface {\n\t}\n\n\tpublic interface JdbcDaoSupport {\n\t}\n\n\tpublic static class SimpleJdbcDaoSupport implements JdbcDaoSupport {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "example.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "example.type.SimpleJdbcDaoSupport",
    "tailType": "class"
  },
  {
    "head": "example.type.SimpleJdbcDaoSupport",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage example.type;\n\n/**\n * We must use a standalone set of types to ensure that no one else is loading\n * them and interfering with\n * {@link org.springframework.core.type.ClassloadingAssertions#assertClassNotLoaded(String)}.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @see org.springframework.core.type.AssignableTypeFilterTests\n */\npublic class AssignableTypeFilterTestsTypes {\n\n\tpublic static class TestNonInheritingClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic static class TestInterfaceImpl implements TestInterface {\n\t}\n\n\tpublic interface SomeDaoLikeInterface {\n\t}\n\n\tpublic static class SomeDaoLikeImpl extends SimpleJdbcDaoSupport implements SomeDaoLikeInterface {\n\t}\n\n\tpublic interface JdbcDaoSupport {\n\t}\n\n\tpublic static class SimpleJdbcDaoSupport implements JdbcDaoSupport {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "example.type",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "example.type",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "example.type",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "example.type",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.AccessControlTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.AccessControl.Visibility;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.aot.generator.visibility.ProtectedGenericParameter;\nimport org.springframework.core.testfixture.aot.generator.visibility.ProtectedParameter;\nimport org.springframework.core.testfixture.aot.generator.visibility.PublicFactoryBean;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AccessControl}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass AccessControlTests {\n\n\t@Test\n\tvoid isAccessibleWhenPublicVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPublicVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenProtectedVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PROTECTED);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenProtectedVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PROTECTED);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPackagePrivateVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PACKAGE_PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPackagePrivateVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PACKAGE_PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPrivateVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPrivateVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicConstructor() throws NoSuchMethodException {\n\t\tMember member = PublicClass.class.getConstructor();\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PUBLIC);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateConstructor() {\n\t\tMember member = ProtectedAccessor.class.getDeclaredConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateClassWithPublicConstructor() {\n\t\tMember member = PackagePrivateClass.class.getDeclaredConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateClassWithPublicMethod() {\n\t\tMember member = method(PackagePrivateClass.class, \"stringBean\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateConstructorParameter() {\n\t\tMember member = ProtectedParameter.class.getConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter() {\n\t\tMember member = ProtectedGenericParameter.class.getConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethod() {\n\t\tMember member = method(PublicClass.class, \"getProtectedMethod\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethodReturnType() {\n\t\tMember member = method(ProtectedAccessor.class, \"methodWithProtectedReturnType\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethodParameter() {\n\t\tMember member = method(ProtectedAccessor.class, \"methodWithProtectedParameter\",\n\t\t\t\tPackagePrivateClass.class);\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateField() {\n\t\tField member = field(PublicClass.class, \"protectedField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType() {\n\t\tMember member = field(PublicClass.class, \"protectedClassField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPrivateField() {\n\t\tMember member = field(PublicClass.class, \"privateField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType() {\n\t\tMember member = method(PublicFactoryBean.class, \"protectedTypeFactoryBean\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateArrayComponent() {\n\t\tMember member = field(PublicClass.class, \"packagePrivateClasses\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forResolvableTypeWhenPackagePrivateGeneric() {\n\t\tResolvableType resolvableType = PublicFactoryBean\n\t\t\t\t.resolveToProtectedGenericParameter();\n\t\tAccessControl accessControl = AccessControl.forResolvableType(resolvableType);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forResolvableTypeWhenRecursiveType() {\n\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t.forClassWithGenerics(SelfReference.class, SelfReference.class);\n\t\tAccessControl accessControl = AccessControl.forResolvableType(resolvableType);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\n\tprivate static Method method(Class<?> type, String name, Class<?>... parameterTypes) {\n\t\tMethod method = ReflectionUtils.findMethod(type, name, parameterTypes);\n\t\tassertThat(method).isNotNull();\n\t\treturn method;\n\t}\n\n\tprivate static Field field(Class<?> type, String name) {\n\t\tField field = ReflectionUtils.findField(type, name);\n\t\tassertThat(field).isNotNull();\n\t\treturn field;\n\t}\n\n\tstatic class SelfReference<T extends SelfReference<T>> {\n\n\t\t@SuppressWarnings({ \"unchecked\", \"unused\" })\n\t\tT getThis() {\n\t\t\treturn (T) this;\n\t\t}\n\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInSamePackage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAccessibleWhenPublicVisibilityInSamePackage() {\r\n    AccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\r\n    assertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInSamePackage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInSamePackage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInDifferentPackage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAccessibleWhenPublicVisibilityInDifferentPackage() {\r\n    AccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\r\n    assertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInDifferentPackage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenPublicVisibilityInDifferentPackage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#isAccessibleWhenProtectedVisibilityInSamePackage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAccessibleWhenProtectedVisibilityInSamePackage() {\r\n    AccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PROTECTED);\r\n    assertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\r\n}",
    "tailType": "method_code"
  }
]