[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.util.Arrays;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link AnnotationFilter} implementation used for\n * {@link AnnotationFilter#packages(String...)}.\n *\n * @author Phillip Webb\n * @since 5.2\n */\nfinal class PackagesAnnotationFilter implements AnnotationFilter {\n\n\tprivate final String[] prefixes;\n\n\tprivate final int hashCode;\n\n\n\tPackagesAnnotationFilter(String... packages) {\n\t\tAssert.notNull(packages, \"Packages array must not be null\");\n\t\tthis.prefixes = new String[packages.length];\n\t\tfor (int i = 0; i < packages.length; i++) {\n\t\t\tString pkg = packages[i];\n\t\t\tAssert.hasText(pkg, \"Packages array must not have empty elements\");\n\t\t\tthis.prefixes[i] = pkg + \".\";\n\t\t}\n\t\tArrays.sort(this.prefixes);\n\t\tthis.hashCode = Arrays.hashCode(this.prefixes);\n\t}\n\n\n\t@Override\n\tpublic boolean matches(String annotationType) {\n\t\tfor (String prefix : this.prefixes) {\n\t\t\tif (annotationType.startsWith(prefix)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\tif (this == other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (other == null || getClass() != other.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Arrays.equals(this.prefixes, ((PackagesAnnotationFilter) other).prefixes);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.hashCode;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Packages annotation filter: \" +\n\t\t\t\tStringUtils.arrayToCommaDelimitedString(this.prefixes);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#prefixes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#prefixes",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#hashCode",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#hashCode",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#matches(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(String annotationType) {\r\n    for (String prefix : this.prefixes) {\r\n        if (annotationType.startsWith(prefix)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#matches(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#matches(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || getClass() != other.getClass()) {\r\n        return false;\r\n    }\r\n    return Arrays.equals(this.prefixes, ((PackagesAnnotationFilter) other).prefixes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.hashCode;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"Packages annotation filter: \" + StringUtils.arrayToCommaDelimitedString(this.prefixes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilter#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilter#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]