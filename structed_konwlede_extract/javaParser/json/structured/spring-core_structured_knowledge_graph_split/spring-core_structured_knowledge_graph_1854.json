[
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimit()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxInMemoryLimit() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"abc\\n\"), stringBuffer(\"defg\\n\"), stringBuffer(\"hi\"), stringBuffer(\"jkl\"), stringBuffer(\"mnop\"));\r\n    this.decoder.setMaxInMemorySize(5);\r\n    testDecode(input, String.class, step -> step.expectNext(\"abc\", \"defg\").verifyError(DataBufferLimitException.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitDoesNotApplyToParsedItemsThatDontRequireBuffering()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxInMemoryLimitDoesNotApplyToParsedItemsThatDontRequireBuffering() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"TOO MUCH DATA\\nanother line\\n\\nand another\\n\"));\r\n    this.decoder.setMaxInMemorySize(5);\r\n    testDecode(input, String.class, step -> step.expectNext(\"TOO MUCH DATA\").expectNext(\"another line\").expectNext(\"\").expectNext(\"and another\").expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitDoesNotApplyToParsedItemsThatDontRequireBuffering()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitDoesNotApplyToParsedItemsThatDontRequireBuffering()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitReleaseUnprocessedLinesWhenUnlimited()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-24339\r\n@Test\r\nvoid maxInMemoryLimitReleaseUnprocessedLinesWhenUnlimited() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"Line 1\\nLine 2\\nLine 3\\n\"));\r\n    this.decoder.setMaxInMemorySize(-1);\r\n    testDecodeCancel(input, ResolvableType.forClass(String.class), null, Collections.emptyMap());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitReleaseUnprocessedLinesWhenUnlimited()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#maxInMemoryLimitReleaseUnprocessedLinesWhenUnlimited()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeNewLineIncludeDelimiters()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeNewLineIncludeDelimiters() {\r\n    this.decoder = StringDecoder.allMimeTypes(StringDecoder.DEFAULT_DELIMITERS, false);\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"\\r\\nabc\\n\"), stringBuffer(\"def\"), stringBuffer(\"ghi\\r\\n\\n\"), stringBuffer(\"jkl\"), stringBuffer(\"mno\\npqr\\n\"), stringBuffer(\"stu\"), stringBuffer(\"vw\"), stringBuffer(\"xyz\"));\r\n    testDecode(input, String.class, step -> step.expectNext(\"\\r\\n\").expectNext(\"abc\\n\").expectNext(\"defghi\\r\\n\").expectNext(\"\\n\").expectNext(\"jklmno\\n\").expectNext(\"pqr\\n\").expectNext(\"stuvwxyz\").expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#decodeNewLineIncludeDelimiters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeNewLineIncludeDelimiters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeEmptyFlux()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeEmptyFlux() {\r\n    Flux<DataBuffer> input = Flux.empty();\r\n    testDecode(input, String.class, step -> step.expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#decodeEmptyFlux()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeEmptyFlux()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeEmptyDataBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeEmptyDataBuffer() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"\"));\r\n    Flux<String> output = this.decoder.decode(input, TYPE, null, Collections.emptyMap());\r\n    StepVerifier.create(output).expectNext(\"\").expectComplete().verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#decodeEmptyDataBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeEmptyDataBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decodeToMono() {\r\n    Flux<DataBuffer> input = Flux.just(stringBuffer(\"foo\"), stringBuffer(\"bar\"), stringBuffer(\"baz\"));\r\n    testDecodeToMonoAll(input, String.class, step -> step.expectNext(\"foobarbaz\").expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#decodeToMono()",
    "tailType": "method"
  }
]