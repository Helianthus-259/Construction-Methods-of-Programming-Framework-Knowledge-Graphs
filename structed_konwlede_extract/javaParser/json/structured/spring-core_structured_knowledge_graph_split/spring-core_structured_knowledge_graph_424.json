[
  {
    "head": "org.springframework.asm.Handler#startPc",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#endPc",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handler#endPc",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#handlerPc",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handler#handlerPc",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#catchType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handler#catchType",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#catchTypeDescriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handler#catchTypeDescriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handler#nextHandler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handler#nextHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "Handler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Removes the range between start and end from the Handler list that begins with the given\r\n * element.\r\n *\r\n * @param firstHandler the beginning of a Handler list. May be {@literal null}.\r\n * @param start the start of the range to be removed.\r\n * @param end the end of the range to be removed. Maybe {@literal null}.\r\n * @return the exception handler list with the start-end range removed.\r\n */\r\nstatic Handler removeRange(final Handler firstHandler, final Label start, final Label end) {\r\n    if (firstHandler == null) {\r\n        return null;\r\n    } else {\r\n        firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end);\r\n    }\r\n    int handlerStart = firstHandler.startPc.bytecodeOffset;\r\n    int handlerEnd = firstHandler.endPc.bytecodeOffset;\r\n    int rangeStart = start.bytecodeOffset;\r\n    int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset;\r\n    // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect.\r\n    if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) {\r\n        return firstHandler;\r\n    }\r\n    if (rangeStart <= handlerStart) {\r\n        if (rangeEnd >= handlerEnd) {\r\n            // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler.\r\n            return firstHandler.nextHandler;\r\n        } else {\r\n            // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[\r\n            return new Handler(firstHandler, end, firstHandler.endPc);\r\n        }\r\n    } else if (rangeEnd >= handlerEnd) {\r\n        // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[\r\n        return new Handler(firstHandler, firstHandler.startPc, start);\r\n    } else {\r\n        // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ =\r\n        //     [handlerStart,rangeStart[ + [rangeEnd,handerEnd[\r\n        firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc);\r\n        return new Handler(firstHandler, firstHandler.startPc, start);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handler#removeRange(Handler,Label,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of elements of the Handler list that begins with the given element.\r\n *\r\n * @param firstHandler the beginning of a Handler list. May be {@literal null}.\r\n * @return the number of elements of the Handler list that begins with 'handler'.\r\n */\r\nstatic int getExceptionTableLength(final Handler firstHandler) {\r\n    int length = 0;\r\n    Handler handler = firstHandler;\r\n    while (handler != null) {\r\n        length++;\r\n        handler = handler.nextHandler;\r\n    }\r\n    return length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handler#getExceptionTableLength(Handler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that\r\n * begins with the given element. <i>This includes the exception_table_length field.</i>\r\n *\r\n * @param firstHandler the beginning of a Handler list. May be {@literal null}.\r\n * @return the size in bytes of the exception_table_length and exception_table structures.\r\n */\r\nstatic int getExceptionTableSize(final Handler firstHandler) {\r\n    return 2 + 8 * getExceptionTableLength(firstHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handler#getExceptionTableSize(Handler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the JVMS exception_table corresponding to the Handler list that begins with the given\r\n * element. <i>This includes the exception_table_length field.</i>\r\n *\r\n * @param firstHandler the beginning of a Handler list. May be {@literal null}.\r\n * @param output where the exception_table_length and exception_table structures must be put.\r\n */\r\nstatic void putExceptionTable(final Handler firstHandler, final ByteVector output) {\r\n    output.putShort(getExceptionTableLength(firstHandler));\r\n    Handler handler = firstHandler;\r\n    while (handler != null) {\r\n        output.putShort(handler.startPc.bytecodeOffset).putShort(handler.endPc.bytecodeOffset).putShort(handler.handlerPc.bytecodeOffset).putShort(handler.catchType);\r\n        handler = handler.nextHandler;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handler#putExceptionTable(Handler,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  }
]