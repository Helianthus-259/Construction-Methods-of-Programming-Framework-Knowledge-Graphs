[
  {
    "head": "org.springframework.core.MethodParameter#getNestedGenericParameterType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the nested generic type of the method/constructor parameter.\r\n * @return the parameter type (never {@code null})\r\n * @since 4.2\r\n * @see #getNestingLevel()\r\n */\r\npublic Type getNestedGenericParameterType() {\r\n    if (this.nestingLevel > 1) {\r\n        Type type = getGenericParameterType();\r\n        for (int i = 2; i <= this.nestingLevel; i++) {\r\n            if (type instanceof ParameterizedType parameterizedType) {\r\n                Type[] args = parameterizedType.getActualTypeArguments();\r\n                Integer index = getTypeIndexForLevel(i);\r\n                type = args[index != null ? index : args.length - 1];\r\n            }\r\n        }\r\n        return type;\r\n    } else {\r\n        return getGenericParameterType();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getNestedGenericParameterType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getMethodAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the annotations associated with the target method/constructor itself.\r\n */\r\npublic Annotation[] getMethodAnnotations() {\r\n    return adaptAnnotationArray(getAnnotatedElement().getAnnotations());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getMethodAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the method/constructor annotation of the given type, if available.\r\n * @param annotationType the annotation type to look for\r\n * @return the annotation object, or {@code null} if not found\r\n */\r\n@Nullable\r\npublic <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {\r\n    A annotation = getAnnotatedElement().getAnnotation(annotationType);\r\n    return (annotation != null ? adaptAnnotation(annotation) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getMethodAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#hasMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the method/constructor is annotated with the given type.\r\n * @param annotationType the annotation type to look for\r\n * @since 4.3\r\n * @see #getMethodAnnotation(Class)\r\n */\r\npublic <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {\r\n    return getAnnotatedElement().isAnnotationPresent(annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#hasMethodAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the annotations associated with the specific method/constructor parameter.\r\n */\r\npublic Annotation[] getParameterAnnotations() {\r\n    Annotation[] paramAnns = this.parameterAnnotations;\r\n    if (paramAnns == null) {\r\n        Annotation[][] annotationArray = this.executable.getParameterAnnotations();\r\n        int index = this.parameterIndex;\r\n        if (this.executable instanceof Constructor && ClassUtils.isInnerClass(this.executable.getDeclaringClass()) && annotationArray.length == this.executable.getParameterCount() - 1) {\r\n            // Bug in javac in JDK <9: annotation array excludes enclosing instance parameter\r\n            // for inner classes, so access it with the actual parameter index lowered by 1\r\n            index = this.parameterIndex - 1;\r\n        }\r\n        paramAnns = (index >= 0 && index < annotationArray.length && annotationArray[index].length > 0 ? adaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);\r\n        this.parameterAnnotations = paramAnns;\r\n    }\r\n    return paramAnns;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameterAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#hasParameterAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if the parameter has at least one annotation,\r\n * {@code false} if it has none.\r\n * @see #getParameterAnnotations()\r\n */\r\npublic boolean hasParameterAnnotations() {\r\n    return (getParameterAnnotations().length != 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#hasParameterAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the parameter annotation of the given type, if available.\r\n * @param annotationType the annotation type to look for\r\n * @return the annotation object, or {@code null} if not found\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\npublic <A extends Annotation> A getParameterAnnotation(Class<A> annotationType) {\r\n    Annotation[] anns = getParameterAnnotations();\r\n    for (Annotation ann : anns) {\r\n        if (annotationType.isInstance(ann)) {\r\n            return (A) ann;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameterAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterAnnotation(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterAnnotation(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#hasParameterAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the parameter is declared with the given annotation type.\r\n * @param annotationType the annotation type to look for\r\n * @see #getParameterAnnotation(Class)\r\n */\r\npublic <A extends Annotation> boolean hasParameterAnnotation(Class<A> annotationType) {\r\n    return (getParameterAnnotation(annotationType) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#hasParameterAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#initParameterNameDiscovery(ParameterNameDiscoverer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Initialize parameter name discovery for this method parameter.\r\n * <p>This method does not actually try to retrieve the parameter name at\r\n * this point; it just allows discovery to happen when the application calls\r\n * {@link #getParameterName()} (if ever).\r\n */\r\npublic void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {\r\n    this.parameterNameDiscoverer = parameterNameDiscoverer;\r\n}",
    "tailType": "method_code"
  }
]