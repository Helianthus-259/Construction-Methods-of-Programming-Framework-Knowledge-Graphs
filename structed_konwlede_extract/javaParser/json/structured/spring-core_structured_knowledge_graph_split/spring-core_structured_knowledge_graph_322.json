[
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingProtectedFilter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodsUsingProtectedFilter() {\r\n    ListSavingMethodCallback mc = new ListSavingMethodCallback();\r\n    ReflectionUtils.doWithMethods(TestObject.class, mc, method -> Modifier.isProtected(method.getModifiers()));\r\n    assertThat(mc.getMethodNames()).hasSizeGreaterThanOrEqualTo(2).as(\"Must find protected methods on Object\").contains(\"clone\", \"finalize\").as(\"Public, not protected\").doesNotContain(\"hashCode\", \"absquatulate\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingProtectedFilter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingProtectedFilter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodsUsingUserDeclaredMethodsFilterStartingWithObject() {\r\n    ListSavingMethodCallback mc = new ListSavingMethodCallback();\r\n    ReflectionUtils.doWithMethods(Object.class, mc, ReflectionUtils.USER_DECLARED_METHODS);\r\n    assertThat(mc.getMethodNames()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithTestObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodsUsingUserDeclaredMethodsFilterStartingWithTestObject() {\r\n    ListSavingMethodCallback mc = new ListSavingMethodCallback();\r\n    ReflectionUtils.doWithMethods(TestObject.class, mc, ReflectionUtils.USER_DECLARED_METHODS);\r\n    assertThat(mc.getMethodNames()).as(\"user declared methods\").contains(\"absquatulate\", \"compareTo\", \"getName\", \"setName\", \"getAge\", \"setAge\", \"getSpouse\", \"setSpouse\").as(\"methods on Object\").doesNotContain(\"equals\", \"hashCode\", \"toString\", \"clone\", \"finalize\", \"getClass\", \"notify\", \"notifyAll\", \"wait\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithTestObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsFilterStartingWithTestObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsComposedFilter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodsUsingUserDeclaredMethodsComposedFilter() {\r\n    ListSavingMethodCallback mc = new ListSavingMethodCallback();\r\n    // \"q\" because both absquatulate() and equals() contain \"q\"\r\n    MethodFilter isSetterMethodOrNameContainsQ = m -> m.getName().startsWith(\"set\") || m.getName().contains(\"q\");\r\n    MethodFilter methodFilter = ReflectionUtils.USER_DECLARED_METHODS.and(isSetterMethodOrNameContainsQ);\r\n    ReflectionUtils.doWithMethods(TestObject.class, mc, methodFilter);\r\n    assertThat(mc.getMethodNames()).containsExactlyInAnyOrder(\"setName\", \"setAge\", \"setSpouse\", \"absquatulate\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsComposedFilter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsUsingUserDeclaredMethodsComposedFilter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsFindsDuplicatesInClassHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doWithMethodsFindsDuplicatesInClassHierarchy() {\r\n    ListSavingMethodCallback mc = new ListSavingMethodCallback();\r\n    ReflectionUtils.doWithMethods(TestObjectSubclass.class, mc);\r\n    assertThat(mc.getMethodNames().stream()).filteredOn(\"absquatulate\"::equals).as(\"Found 2 absquatulates\").hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#doWithMethodsFindsDuplicatesInClassHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#doWithMethodsFindsDuplicatesInClassHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#findMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethod() {\r\n    assertThat(ReflectionUtils.findMethod(B.class, \"bar\", String.class)).isNotNull();\r\n    assertThat(ReflectionUtils.findMethod(B.class, \"foo\", Integer.class)).isNotNull();\r\n    assertThat(ReflectionUtils.findMethod(B.class, \"getClass\")).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#findMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#findMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests#findMethodWithVarArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethodWithVarArgs() {\r\n    assertThat(ReflectionUtils.findMethod(B.class, \"add\", int[].class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsTests#findMethodWithVarArgs()",
    "tailType": "method"
  }
]