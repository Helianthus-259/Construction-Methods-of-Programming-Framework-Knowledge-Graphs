[
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#getContentAsString(Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a description that includes the passed-in\r\n * {@code description}, if any.\r\n */\r\n@Override\r\npublic String getDescription() {\r\n    return \"Byte array resource [\" + this.description + \"]\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#getDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getDescription()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation compares the underlying byte array.\r\n * @see java.util.Arrays#equals(byte[], byte[])\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof ByteArrayResource that && Arrays.equals(this.byteArray, that.byteArray)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the hash code based on the\r\n * underlying byte array.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return Arrays.hashCode(this.byteArray);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ClassPathResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link Resource} implementation for class path resources. Uses either a\n * given {@link ClassLoader} or a given {@link Class} for loading resources.\n *\n * <p>Supports resolution as {@code java.io.File} if the class path\n * resource resides in the file system, but not for resources in a JAR.\n * Always supports resolution as {@code java.net.URL}.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 28.12.2003\n * @see ClassLoader#getResourceAsStream(String)\n * @see ClassLoader#getResource(String)\n * @see Class#getResourceAsStream(String)\n * @see Class#getResource(String)\n */\npublic class ClassPathResource extends AbstractFileResolvingResource {\n\n\t/**\n\t * Internal representation of the original path supplied by the user,\n\t * used for creating relative paths and resolving URLs and InputStreams.\n\t */\n\tprivate final String path;\n\n\tprivate final String absolutePath;\n\n\tprivate final @Nullable ClassLoader classLoader;\n\n\tprivate final @Nullable Class<?> clazz;\n\n\n\t/**\n\t * Create a new {@code ClassPathResource} for {@code ClassLoader} usage.\n\t * <p>A leading slash will be removed, as the {@code ClassLoader} resource\n\t * access methods will not accept it.\n\t * <p>The default class loader will be used for loading the resource.\n\t * @param path the absolute path within the class path\n\t * @see ClassUtils#getDefaultClassLoader()\n\t */\n\tpublic ClassPathResource(String path) {\n\t\tthis(path, (ClassLoader) null);\n\t}\n\n\t/**\n\t * Create a new {@code ClassPathResource} for {@code ClassLoader} usage.\n\t * <p>A leading slash will be removed, as the {@code ClassLoader} resource\n\t * access methods will not accept it.\n\t * <p>If the supplied {@code ClassLoader} is {@code null}, the default class\n\t * loader will be used for loading the resource.\n\t * @param path the absolute path within the class path\n\t * @param classLoader the class loader to load the resource with\n\t * @see ClassUtils#getDefaultClassLoader()\n\t */\n\tpublic ClassPathResource(String path, @Nullable ClassLoader classLoader) {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tString pathToUse = StringUtils.cleanPath(path);\n\t\tif (pathToUse.startsWith(\"/\")) {\n\t\t\tpathToUse = pathToUse.substring(1);\n\t\t}\n\t\tthis.path = pathToUse;\n\t\tthis.absolutePath = pathToUse;\n\t\tthis.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());\n\t\tthis.clazz = null;\n\t}\n\n\t/**\n\t * Create a new {@code ClassPathResource} for {@code Class} usage.\n\t * <p>The path can be relative to the given class, or absolute within\n\t * the class path via a leading slash.\n\t * <p>If the supplied {@code Class} is {@code null}, the default class\n\t * loader will be used for loading the resource.\n\t * <p>This is also useful for resource access within the module system,\n\t * loading a resource from the containing module of a given {@code Class}.\n\t * See {@link ModuleResource} and its javadoc.\n\t * @param path relative or absolute path within the class path\n\t * @param clazz the class to load resources with\n\t * @see ClassUtils#getDefaultClassLoader()\n\t * @see ModuleResource\n\t */\n\tpublic ClassPathResource(String path, @Nullable Class<?> clazz) {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tthis.path = StringUtils.cleanPath(path);\n\n\t\tString absolutePath = this.path;\n\t\tif (clazz != null && !absolutePath.startsWith(\"/\")) {\n\t\t\tabsolutePath = ClassUtils.classPackageAsResourcePath(clazz) + \"/\" + absolutePath;\n\t\t}\n\t\telse if (absolutePath.startsWith(\"/\")) {\n\t\t\tabsolutePath = absolutePath.substring(1);\n\t\t}\n\t\tthis.absolutePath = absolutePath;\n\n\t\tthis.classLoader = null;\n\t\tthis.clazz = clazz;\n\t}\n\n\n\t/**\n\t * Return the <em>absolute path</em> for this resource, as a\n\t * {@linkplain StringUtils#cleanPath(String) cleaned} resource path within\n\t * the class path.\n\t * <p>The path returned by this method does not have a leading slash and is\n\t * suitable for use with {@link ClassLoader#getResource(String)}.\n\t */\n\tpublic final String getPath() {\n\t\treturn this.absolutePath;\n\t}\n\n\t/**\n\t * Return the {@link ClassLoader} that this resource will be obtained from.\n\t */\n\tpublic final @Nullable ClassLoader getClassLoader() {\n\t\treturn (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);\n\t}\n\n\n\t/**\n\t * This implementation checks for the resolution of a resource URL.\n\t * @see ClassLoader#getResource(String)\n\t * @see Class#getResource(String)\n\t */\n\t@Override\n\tpublic boolean exists() {\n\t\treturn (resolveURL() != null);\n\t}\n\n\t/**\n\t * This implementation checks for the resolution of a resource URL upfront,\n\t * then proceeding with {@link AbstractFileResolvingResource}'s length check.\n\t * @see ClassLoader#getResource(String)\n\t * @see Class#getResource(String)\n\t */\n\t@Override\n\tpublic boolean isReadable() {\n\t\tURL url = resolveURL();\n\t\treturn (url != null && checkReadable(url));\n\t}\n\n\t/**\n\t * Resolves a {@link URL} for the underlying class path resource.\n\t * @return the resolved URL, or {@code null} if not resolvable\n\t */\n\tprotected @Nullable URL resolveURL() {\n\t\ttry {\n\t\t\tif (this.clazz != null) {\n\t\t\t\treturn this.clazz.getResource(this.path);\n\t\t\t}\n\t\t\telse if (this.classLoader != null) {\n\t\t\t\treturn this.classLoader.getResource(this.absolutePath);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ClassLoader.getSystemResource(this.absolutePath);\n\t\t\t}\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t// Should not happen according to the JDK's contract:\n\t\t\t// see https://github.com/openjdk/jdk/pull/2662\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * This implementation opens an {@link InputStream} for the underlying class\n\t * path resource, if available.\n\t * @see ClassLoader#getResourceAsStream(String)\n\t * @see Class#getResourceAsStream(String)\n\t * @see ClassLoader#getSystemResourceAsStream(String)\n\t */\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\tInputStream is;\n\t\tif (this.clazz != null) {\n\t\t\tis = this.clazz.getResourceAsStream(this.path);\n\t\t}\n\t\telse if (this.classLoader != null) {\n\t\t\tis = this.classLoader.getResourceAsStream(this.absolutePath);\n\t\t}\n\t\telse {\n\t\t\tis = ClassLoader.getSystemResourceAsStream(this.absolutePath);\n\t\t}\n\t\tif (is == null) {\n\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be opened because it does not exist\");\n\t\t}\n\t\treturn is;\n\t}\n\n\t/**\n\t * This implementation returns a URL for the underlying class path resource,\n\t * if available.\n\t * @see ClassLoader#getResource(String)\n\t * @see Class#getResource(String)\n\t */\n\t@Override\n\tpublic URL getURL() throws IOException {\n\t\tURL url = resolveURL();\n\t\tif (url == null) {\n\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be resolved to URL because it does not exist\");\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * This implementation creates a {@code ClassPathResource}, applying the given\n\t * path relative to the path used to create this descriptor.\n\t * @see StringUtils#applyRelativePath(String, String)\n\t */\n\t@Override\n\tpublic Resource createRelative(String relativePath) {\n\t\tString pathToUse = StringUtils.applyRelativePath(this.path, relativePath);\n\t\treturn (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :\n\t\t\t\tnew ClassPathResource(pathToUse, this.classLoader));\n\t}\n\n\t/**\n\t * This implementation returns the name of the file that this class path\n\t * resource refers to.\n\t * @see StringUtils#getFilename(String)\n\t */\n\t@Override\n\tpublic @Nullable String getFilename() {\n\t\treturn StringUtils.getFilename(this.absolutePath);\n\t}\n\n\t/**\n\t * This implementation returns a description that includes the absolute\n\t * class path location.\n\t */\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"class path resource [\" + this.absolutePath + \"]\";\n\t}\n\n\n\t/**\n\t * This implementation compares the underlying class path locations and\n\t * associated class loaders.\n\t * @see #getPath()\n\t * @see #getClassLoader()\n\t */\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof ClassPathResource that &&\n\t\t\t\tthis.absolutePath.equals(that.absolutePath) &&\n\t\t\t\tObjectUtils.nullSafeEquals(getClassLoader(), that.getClassLoader())));\n\t}\n\n\t/**\n\t * This implementation returns the hash code of the underlying class path location.\n\t * @see #getPath()\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.absolutePath.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassPathResource#path",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#path",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassPathResource#absolutePath",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#absolutePath",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassPathResource#classLoader",
    "tailType": "field"
  }
]