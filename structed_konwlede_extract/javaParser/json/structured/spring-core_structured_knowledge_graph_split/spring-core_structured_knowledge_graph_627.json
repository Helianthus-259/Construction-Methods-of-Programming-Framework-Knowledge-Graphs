[
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean evaluate(Object arg) {\r\n    Member member = (Member) arg;\r\n    int mod = member.getModifiers();\r\n    if (Modifier.isPrivate(mod)) {\r\n        return false;\r\n    } else if (Modifier.isPublic(mod)) {\r\n        return true;\r\n    } else if (Modifier.isProtected(mod) && protectedOk) {\r\n        // protected is fine if 'protectedOk' is true (for subclasses)\r\n        return true;\r\n    } else {\r\n        // protected/package private if the member is in the same package as the source class\r\n        // and we are generating into the same classloader.\r\n        return samePackageOk && pkg.equals(TypeUtils.getPackageName(Type.getType(member.getDeclaringClass())));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.VisibilityPredicate#evaluate(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.WeakCacheKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "provide",
    "tail": "package org.springframework.cglib.core;\n\nimport java.lang.ref.WeakReference;\n\n/**\n * Allows to check for object equality, yet the class does not keep strong reference to the target.\n * {@link #equals(Object)} returns true if and only if the reference is not yet expired and target\n * objects are equal in terms of {@link #equals(Object)}.\n * <p>\n * This an internal class, thus it might disappear in future cglib releases.\n *\n * @param <T> type of the reference\n */\npublic class WeakCacheKey<T> extends WeakReference<T> {\n    private final int hash;\n\n    public WeakCacheKey(T referent) {\n        super(referent);\n        this.hash = referent.hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof WeakCacheKey<?> weakCacheKey)) {\n            return false;\n        }\n        Object ours = get();\n        Object theirs = weakCacheKey.get();\n        return ours != null && theirs != null && ours.equals(theirs);\n    }\n\n    @Override\n    public int hashCode() {\n        return hash;\n    }\n\n    @Override\n    public String toString() {\n        T t = get();\n        return t == null ? \"Clean WeakIdentityKey, hash: \" + hash : t.toString();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.WeakCacheKey#hash",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#hash",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(Object obj) {\r\n    if (!(obj instanceof WeakCacheKey<?> weakCacheKey)) {\r\n        return false;\r\n    }\r\n    Object ours = get();\r\n    Object theirs = weakCacheKey.get();\r\n    return ours != null && theirs != null && ours.equals(theirs);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return hash;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    T t = get();\r\n    return t == null ? \"Clean WeakIdentityKey, hash: \" + hash : t.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.WeakCacheKey#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.WeakCacheKey",
    "headType": "class",
    "relation": "extend",
    "tail": "WeakReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  }
]