[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromAnnotationType() {\r\n    assertThat(getDefaultValue(Order.class, VALUE)).isEqualTo(Ordered.LOWEST_PRECEDENCE);\r\n    assertThat(getDefaultValue(Order.class)).isEqualTo(Ordered.LOWEST_PRECEDENCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotationType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findRepeatableAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findRepeatableAnnotation() {\r\n    Repeatable repeatable = findAnnotation(MyRepeatable.class, Repeatable.class);\r\n    assertThat(repeatable).isNotNull();\r\n    assertThat(repeatable.value()).isEqualTo(MyRepeatableContainer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findRepeatableAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findRepeatableAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnMethod() throws Exception {\r\n    Method method = InterfaceWithRepeated.class.getMethod(\"foo\");\r\n    Set<MyRepeatable> annotations = getRepeatableAnnotations(method, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(annotations).isNotNull();\r\n    List<String> values = annotations.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(asList(\"A\", \"B\", \"C\", \"meta1\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases() {\r\n    final List<String> expectedLocations = asList(\"A\", \"B\");\r\n    Set<ContextConfig> annotations = getRepeatableAnnotations(ConfigHierarchyTestCase.class, ContextConfig.class, null);\r\n    assertThat(annotations).isNotNull();\r\n    assertThat(annotations).as(\"size if container type is omitted: \").isEmpty();\r\n    annotations = getRepeatableAnnotations(ConfigHierarchyTestCase.class, ContextConfig.class, Hierarchy.class);\r\n    assertThat(annotations).isNotNull();\r\n    List<String> locations = annotations.stream().map(ContextConfig::location).collect(toList());\r\n    assertThat(locations).isEqualTo(expectedLocations);\r\n    List<String> values = annotations.stream().map(ContextConfig::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedLocations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnClass() {\r\n    final List<String> expectedValuesJava = asList(\"A\", \"B\", \"C\");\r\n    final List<String> expectedValuesSpring = asList(\"A\", \"B\", \"C\", \"meta1\");\r\n    // Java 8\r\n    MyRepeatable[] array = MyRepeatableClass.class.getAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    List<String> values = stream(array).map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesJava);\r\n    // Spring\r\n    Set<MyRepeatable> set = getRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnSuperclass() {\r\n    final Class<?> clazz = SubMyRepeatableClass.class;\r\n    final List<String> expectedValuesJava = asList(\"A\", \"B\", \"C\");\r\n    final List<String> expectedValuesSpring = asList(\"A\", \"B\", \"C\", \"meta1\");\r\n    // Java 8\r\n    MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    List<String> values = stream(array).map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesJava);\r\n    // Spring\r\n    Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getRepeatableAnnotations(clazz, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnClassAndSuperclass() {\r\n    final Class<?> clazz = SubMyRepeatableWithAdditionalLocalDeclarationsClass.class;\r\n    final List<String> expectedValuesJava = asList(\"X\", \"Y\", \"Z\");\r\n    final List<String> expectedValuesSpring = asList(\"X\", \"Y\", \"Z\", \"meta2\");\r\n    // Java 8\r\n    MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    List<String> values = stream(array).map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesJava);\r\n    // Spring\r\n    Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getRepeatableAnnotations(clazz, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
    "tailType": "method"
  }
]