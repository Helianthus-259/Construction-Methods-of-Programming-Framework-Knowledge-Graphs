[
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getContentAsByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getContentAsString(Charset charset) throws IOException {\r\n    try {\r\n        return Files.readString(this.path, charset);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getContentAsString(Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#isWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks whether the underlying file is marked as writable\r\n * (and corresponds to an actual file with content, not to a directory).\r\n * @see java.nio.file.Files#isWritable(Path)\r\n * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic boolean isWritable() {\r\n    return (Files.isWritable(this.path) && !Files.isDirectory(this.path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#isWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#isWritable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens an {@link OutputStream} for the underlying file.\r\n * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)\r\n */\r\n@Override\r\npublic OutputStream getOutputStream() throws IOException {\r\n    if (Files.isDirectory(this.path)) {\r\n        throw new FileNotFoundException(getPath() + \" (is a directory)\");\r\n    }\r\n    return Files.newOutputStream(this.path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getOutputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getOutputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a {@link URL} for the underlying file.\r\n * @see java.nio.file.Path#toUri()\r\n * @see java.net.URI#toURL()\r\n */\r\n@Override\r\npublic URL getURL() throws IOException {\r\n    return this.path.toUri().toURL();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a {@link URI} for the underlying file.\r\n * @see java.nio.file.Path#toUri()\r\n */\r\n@Override\r\npublic URI getURI() throws IOException {\r\n    return this.path.toUri();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#isFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always indicates a file.\r\n */\r\n@Override\r\npublic boolean isFile() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#isFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#isFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]