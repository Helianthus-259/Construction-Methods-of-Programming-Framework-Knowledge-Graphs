[
  {
    "head": "org.springframework.cglib.core.HashCodeCustomizer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.HashCodeCustomizer",
    "headType": "class",
    "relation": "extend",
    "tail": "KeyFactoryCustomizer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core.internal",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core.internal",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "provide",
    "tail": "package org.springframework.cglib.core.internal;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.cglib.core.Customizer;\nimport org.springframework.cglib.core.KeyFactoryCustomizer;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class CustomizerRegistry {\n    private final Class[] customizerTypes;\n    private Map<Class, List<KeyFactoryCustomizer>> customizers = new HashMap<>();\n\n    public CustomizerRegistry(Class[] customizerTypes) {\n        this.customizerTypes = customizerTypes;\n    }\n\n    public void add(KeyFactoryCustomizer customizer) {\n        Class<? extends KeyFactoryCustomizer> klass = customizer.getClass();\n        for (Class type : customizerTypes) {\n            if (type.isAssignableFrom(klass)) {\n                List<KeyFactoryCustomizer> list = customizers.computeIfAbsent(type, k -> new ArrayList<>());\n                list.add(customizer);\n            }\n        }\n    }\n\n    public <T> List<T> get(Class<T> klass) {\n        List<KeyFactoryCustomizer> list = customizers.get(klass);\n        if (list == null) {\n            return Collections.emptyList();\n        }\n        return (List<T>) list;\n    }\n\n    /**\n     * @deprecated Only to keep backward compatibility.\n     */\n    @Deprecated\n    public static CustomizerRegistry singleton(Customizer customizer)\n    {\n        CustomizerRegistry registry = new CustomizerRegistry(new Class[]{Customizer.class});\n        registry.add(customizer);\n        return registry;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#customizerTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#customizerTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#customizers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#customizers",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class, List<KeyFactoryCustomizer>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void add(KeyFactoryCustomizer customizer) {\r\n    Class<? extends KeyFactoryCustomizer> klass = customizer.getClass();\r\n    for (Class type : customizerTypes) {\r\n        if (type.isAssignableFrom(klass)) {\r\n            List<KeyFactoryCustomizer> list = customizers.computeIfAbsent(type, k -> new ArrayList<>());\r\n            list.add(customizer);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#add(KeyFactoryCustomizer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public <T> List<T> get(Class<T> klass) {\r\n    List<KeyFactoryCustomizer> list = customizers.get(klass);\r\n    if (list == null) {\r\n        return Collections.emptyList();\r\n    }\r\n    return (List<T>) list;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#get(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @deprecated Only to keep backward compatibility.\r\n */\r\n@Deprecated\r\npublic static CustomizerRegistry singleton(Customizer customizer) {\r\n    CustomizerRegistry registry = new CustomizerRegistry(new Class[] { Customizer.class });\r\n    registry.add(customizer);\r\n    return registry;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.internal.CustomizerRegistry#singleton(Customizer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core.internal",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core.internal",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.internal.Function",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.internal.Function",
    "headType": "class",
    "relation": "provide",
    "tail": "package org.springframework.cglib.core.internal;\n\npublic interface Function<K, V> {\n    V apply(K key);\n}\n",
    "tailType": "class_code"
  }
]