[
  {
    "head": "org.springframework.core.io.ResourceTests#resourceIsValid(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceIsValid(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelative(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelative(Resource resource) throws Exception {\r\n    Resource relative1 = resource.createRelative(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getFilename()).isEqualTo(\"ClassPathResourceTests.class\");\r\n    assertThat(relative1.getURL().getFile().endsWith(\"ClassPathResourceTests.class\")).isTrue();\r\n    assertThat(relative1.exists()).isTrue();\r\n    assertThat(relative1.isReadable()).isTrue();\r\n    assertThat(relative1.contentLength()).isGreaterThan(0);\r\n    assertThat(relative1.lastModified()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceTests#resourceCreateRelative(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelative(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelative(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithFolder(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithFolder(Resource resource) throws Exception {\r\n    Resource relative2 = resource.createRelative(\"support/PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getFilename()).isEqualTo(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.getURL().getFile()).endsWith(\"PathMatchingResourcePatternResolverTests.class\");\r\n    assertThat(relative2.exists()).isTrue();\r\n    assertThat(relative2.isReadable()).isTrue();\r\n    assertThat(relative2.contentLength()).isGreaterThan(0);\r\n    assertThat(relative2.lastModified()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithFolder(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithFolder(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithFolder(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithDotPath(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeWithDotPath(Resource resource) throws Exception {\r\n    Resource relative3 = resource.createRelative(\"../CollectionFactoryTests.class\");\r\n    assertThat(relative3.getFilename()).isEqualTo(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.getURL().getFile()).endsWith(\"CollectionFactoryTests.class\");\r\n    assertThat(relative3.exists()).isTrue();\r\n    assertThat(relative3.isReadable()).isTrue();\r\n    assertThat(relative3.contentLength()).isGreaterThan(0);\r\n    assertThat(relative3.lastModified()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithDotPath(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithDotPath(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeWithDotPath(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeUnknown(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"resource\")\r\nvoid resourceCreateRelativeUnknown(Resource resource) throws Exception {\r\n    Resource relative4 = resource.createRelative(\"X.class\");\r\n    assertThat(relative4.exists()).isFalse();\r\n    assertThat(relative4.isReadable()).isFalse();\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::contentLength);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::lastModified);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getInputStream);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::readableChannel);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(relative4::getContentAsByteArray);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(() -> relative4.getContentAsString(UTF_8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceTests#resourceCreateRelativeUnknown(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeUnknown(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resourceCreateRelativeUnknown(Resource)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceTests#resource()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Stream<Arguments> resource() throws URISyntaxException {\r\n    URL resourceClass = ResourceTests.class.getResource(\"ResourceTests.class\");\r\n    Path resourceClassFilePath = Paths.get(resourceClass.toURI());\r\n    return Stream.of(argumentSet(\"ClassPathResource\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\")), argumentSet(\"ClassPathResource with ClassLoader\", new ClassPathResource(\"org/springframework/core/io/ResourceTests.class\", ResourceTests.class.getClassLoader())), argumentSet(\"ClassPathResource with Class\", new ClassPathResource(\"ResourceTests.class\", ResourceTests.class)), argumentSet(\"FileSystemResource\", new FileSystemResource(resourceClass.getFile())), argumentSet(\"FileSystemResource with File\", new FileSystemResource(new File(resourceClass.getFile()))), argumentSet(\"FileSystemResource with File path\", new FileSystemResource(resourceClassFilePath)), argumentSet(\"UrlResource\", new UrlResource(resourceClass)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceTests#resource()",
    "tailType": "method"
  }
]