[
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\r\n    assertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasMemberClassesReturnsNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\r\n    assertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(TestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasMemberClassesReturnsNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasMemberClassesReturnsNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\r\n    assertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationsReturnsDirectAnnotations() {\r\n    assertThat(get(WithDirectAnnotations.class).getAnnotations().stream()).filteredOn(MergedAnnotation::isDirectlyPresent).extracting(a -> a.getType().getName()).containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getAnnotationsReturnsDirectAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\r\n    assertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesDirectAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\r\n    assertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenMatchesMetaAnnotationReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\r\n    assertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse()",
    "tailType": "method"
  }
]