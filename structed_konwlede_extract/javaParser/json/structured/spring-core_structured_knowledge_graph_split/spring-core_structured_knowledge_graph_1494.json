[
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#emptyTypeCustomizer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#emptyTypeCustomizer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<TypeSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#generatedClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#generatedClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedClasses",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#createWhenClassNameGeneratorIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenClassNameGeneratorIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new GeneratedClasses(null)).withMessage(\"'classNameGenerator' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#createWhenClassNameGeneratorIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#createWhenClassNameGeneratorIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenFeatureNameIsEmptyThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addForFeatureComponentWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"\", TestComponent.class, emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenFeatureNameIsEmptyThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenFeatureNameIsEmptyThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureWhenFeatureNameIsEmptyThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addForFeatureWhenFeatureNameIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeature(\"\", emptyTypeCustomizer)).withMessage(\"'featureName' must not be empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureWhenFeatureNameIsEmptyThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureWhenFeatureNameIsEmptyThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"test\", TestComponent.class, null)).withMessage(\"'type' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureUsesDefaultTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addForFeatureUsesDefaultTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeature(\"Test\", emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName()).hasToString(\"com.example.Test__Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureUsesDefaultTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureUsesDefaultTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests#addForFeatureComponentUsesTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addForFeatureComponentUsesTarget() {\r\n    GeneratedClass generatedClass = this.generatedClasses.addForFeatureComponent(\"Test\", TestComponent.class, emptyTypeCustomizer);\r\n    assertThat(generatedClass.getName().toString()).endsWith(\"TestComponent__Test\");\r\n}",
    "tailType": "method_code"
  }
]