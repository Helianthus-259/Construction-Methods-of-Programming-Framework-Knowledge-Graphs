[
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithMatchingArgs() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\").and(Integer.class, \"integerArg\");\r\n    assertThat(methodReference.toInvokeCodeBlock(argCodeGenerator)).isEqualTo(CodeBlock.of(\"methodName(integerArg, stringArg)\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArgs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithMatchingArgs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingArg()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithNonMatchingArg() {\r\n    MethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(Integer.class), ClassName.get(String.class));\r\n    ArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(Integer.class, \"integerArg\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> methodReference.toInvokeCodeBlock(argCodeGenerator)).withMessageContaining(\"parameter 1 of type java.lang.String is not supported\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingArg()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithNonMatchingArg()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME)).isEqualTo(CodeBlock.of(\"methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass() {\r\n    MethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\r\n    assertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME)).isEqualTo(CodeBlock.of(\"com.example.Test.methodName()\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createLocalMethodReference(String,TypeName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodReference createLocalMethodReference(String name, TypeName... argumentTypes) {\r\n    return createMethodReference(name, argumentTypes, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createLocalMethodReference(String,TypeName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createMethodReference(String,TypeName[],ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodReference createMethodReference(String name, TypeName[] argumentTypes, @Nullable ClassName declaringClass) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createMethodReference(String,TypeName[],ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createStaticMethodReference(String,ClassName,TypeName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodReference createStaticMethodReference(String name, ClassName declaringClass, TypeName... argumentTypes) {\r\n    MethodSpec method = createTestMethod(name, argumentTypes, Modifier.STATIC);\r\n    return new DefaultMethodReference(method, declaringClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createStaticMethodReference(String,ClassName,TypeName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#createTestMethod(String,TypeName[],Modifier)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodSpec createTestMethod(String name, TypeName[] argumentTypes, Modifier... modifiers) {\r\n    Builder method = MethodSpec.methodBuilder(name);\r\n    for (int i = 0; i < argumentTypes.length; i++) {\r\n        method.addParameter(argumentTypes[i], \"args\" + i);\r\n    }\r\n    method.addModifiers(modifiers);\r\n    return method.build();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#createTestMethod(String,TypeName[],Modifier)",
    "tailType": "method"
  }
]