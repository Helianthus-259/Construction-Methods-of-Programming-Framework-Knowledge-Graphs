[
  {
    "head": "org.springframework.core.AliasRegistry#removeAlias(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove the specified alias from this registry.\r\n * @param alias the alias to remove\r\n * @throws IllegalStateException if no such alias was found\r\n */\r\nvoid removeAlias(String alias);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AliasRegistry#removeAlias(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AliasRegistry#isAlias(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given name is defined as an alias\r\n * (as opposed to the name of an actually registered component).\r\n * @param name the name to check\r\n * @return whether the given name is an alias\r\n */\r\nboolean isAlias(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AliasRegistry#isAlias(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AliasRegistry#getAliases(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the aliases for the given name, if defined.\r\n * @param name the name to check for aliases\r\n * @return the aliases, or an empty array if none\r\n */\r\nString[] getAliases(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AliasRegistry#getAliases(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\nimport java.util.function.Predicate;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Abstract base class for {@link MergedAnnotation} implementations.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @since 5.2\n * @param <A> the annotation type\n */\nabstract class AbstractMergedAnnotation<A extends Annotation> implements MergedAnnotation<A> {\n\n\tprivate volatile @Nullable A synthesizedAnnotation;\n\n\n\t@Override\n\tpublic boolean isDirectlyPresent() {\n\t\treturn isPresent() && getDistance() == 0;\n\t}\n\n\t@Override\n\tpublic boolean isMetaPresent() {\n\t\treturn isPresent() && getDistance() > 0;\n\t}\n\n\t@Override\n\tpublic boolean hasNonDefaultValue(String attributeName) {\n\t\treturn !hasDefaultValue(attributeName);\n\t}\n\n\t@Override\n\tpublic byte getByte(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Byte.class);\n\t}\n\n\t@Override\n\tpublic byte[] getByteArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, byte[].class);\n\t}\n\n\t@Override\n\tpublic boolean getBoolean(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Boolean.class);\n\t}\n\n\t@Override\n\tpublic boolean[] getBooleanArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, boolean[].class);\n\t}\n\n\t@Override\n\tpublic char getChar(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Character.class);\n\t}\n\n\t@Override\n\tpublic char[] getCharArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, char[].class);\n\t}\n\n\t@Override\n\tpublic short getShort(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Short.class);\n\t}\n\n\t@Override\n\tpublic short[] getShortArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, short[].class);\n\t}\n\n\t@Override\n\tpublic int getInt(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Integer.class);\n\t}\n\n\t@Override\n\tpublic int[] getIntArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, int[].class);\n\t}\n\n\t@Override\n\tpublic long getLong(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Long.class);\n\t}\n\n\t@Override\n\tpublic long[] getLongArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, long[].class);\n\t}\n\n\t@Override\n\tpublic double getDouble(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Double.class);\n\t}\n\n\t@Override\n\tpublic double[] getDoubleArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, double[].class);\n\t}\n\n\t@Override\n\tpublic float getFloat(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Float.class);\n\t}\n\n\t@Override\n\tpublic float[] getFloatArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, float[].class);\n\t}\n\n\t@Override\n\tpublic String getString(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, String.class);\n\t}\n\n\t@Override\n\tpublic String[] getStringArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, String[].class);\n\t}\n\n\t@Override\n\tpublic Class<?> getClass(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Class.class);\n\t}\n\n\t@Override\n\tpublic Class<?>[] getClassArray(String attributeName) {\n\t\treturn getRequiredAttributeValue(attributeName, Class[].class);\n\t}\n\n\t@Override\n\tpublic <E extends Enum<E>> E getEnum(String attributeName, Class<E> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn getRequiredAttributeValue(attributeName, type);\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <E extends Enum<E>> E[] getEnumArray(String attributeName, Class<E> type) {\n\t\tAssert.notNull(type, \"Type must not be null\");\n\t\treturn (E[]) getRequiredAttributeValue(attributeName, type.arrayType());\n\t}\n\n\t@Override\n\tpublic Optional<Object> getValue(String attributeName) {\n\t\treturn getValue(attributeName, Object.class);\n\t}\n\n\t@Override\n\tpublic <T> Optional<T> getValue(String attributeName, Class<T> type) {\n\t\treturn Optional.ofNullable(getAttributeValue(attributeName, type));\n\t}\n\n\t@Override\n\tpublic Optional<Object> getDefaultValue(String attributeName) {\n\t\treturn getDefaultValue(attributeName, Object.class);\n\t}\n\n\t@Override\n\tpublic MergedAnnotation<A> filterDefaultValues() {\n\t\treturn filterAttributes(this::hasNonDefaultValue);\n\t}\n\n\t@Override\n\tpublic AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {\n\t\treturn asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType()), adaptations);\n\t}\n\n\t@Override\n\tpublic Optional<A> synthesize(Predicate<? super MergedAnnotation<A>> condition)\n\t\t\tthrows NoSuchElementException {\n\n\t\treturn (condition.test(this) ? Optional.of(synthesize()) : Optional.empty());\n\t}\n\n\t@Override\n\tpublic A synthesize() {\n\t\tif (!isPresent()) {\n\t\t\tthrow new NoSuchElementException(\"Unable to synthesize missing annotation\");\n\t\t}\n\t\tA synthesized = this.synthesizedAnnotation;\n\t\tif (synthesized == null) {\n\t\t\tsynthesized = createSynthesizedAnnotation();\n\t\t\tthis.synthesizedAnnotation = synthesized;\n\t\t}\n\t\treturn synthesized;\n\t}\n\n\tprivate <T> T getRequiredAttributeValue(String attributeName, Class<T> type) {\n\t\tT value = getAttributeValue(attributeName, type);\n\t\tif (value == null) {\n\t\t\tthrow new NoSuchElementException(\"No attribute named '\" + attributeName +\n\t\t\t\t\t\"' present in merged annotation \" + getType().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Get the underlying attribute value.\n\t * @param attributeName the attribute name\n\t * @param type the type to return (see {@link MergedAnnotation} class\n\t * documentation for details)\n\t * @return the attribute value or {@code null} if the value is not found and\n\t * is not required\n\t * @throws IllegalArgumentException if the source type is not compatible\n\t * @throws NoSuchElementException if the value is required but not found\n\t */\n\tprotected abstract <T> @Nullable T getAttributeValue(String attributeName, Class<T> type);\n\n\t/**\n\t * Factory method used to create the synthesized annotation.\n\t * <p>If the source is an annotation that is not <em>synthesizable</em>, it\n\t * will be returned unmodified.\n\t * <p>Consult the documentation for {@link MergedAnnotation#synthesize()}\n\t * for an explanation of what is considered synthesizable.\n\t */\n\tprotected abstract A createSynthesizedAnnotation();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#synthesizedAnnotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#synthesizedAnnotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "A",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#isDirectlyPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirectlyPresent() {\r\n    return isPresent() && getDistance() == 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#isDirectlyPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#isDirectlyPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#isMetaPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isMetaPresent() {\r\n    return isPresent() && getDistance() > 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#isMetaPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#isMetaPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#hasNonDefaultValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasNonDefaultValue(String attributeName) {\r\n    return !hasDefaultValue(attributeName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#hasNonDefaultValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#hasNonDefaultValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]