[
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isFinal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#isIndependent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying class is independent, i.e. whether\r\n * it is a top-level class or a nested class (static inner class) that\r\n * can be constructed independently of an enclosing class.\r\n */\r\nboolean isIndependent();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#isIndependent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#hasEnclosingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class is declared within an enclosing\r\n * class (i.e. the underlying class is an inner/nested class or a\r\n * local class within a method).\r\n * <p>If this method returns {@code false}, then the underlying\r\n * class is a top-level class.\r\n */\r\ndefault boolean hasEnclosingClass() {\r\n    return (getEnclosingClassName() != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#hasEnclosingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getEnclosingClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the enclosing class of the underlying class,\r\n * or {@code null} if the underlying class is a top-level class.\r\n */\r\n@Nullable\r\nString getEnclosingClassName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#getEnclosingClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getEnclosingClassName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#hasSuperClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the underlying class has a superclass.\r\n */\r\ndefault boolean hasSuperClass() {\r\n    return (getSuperClassName() != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#hasSuperClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getSuperClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the superclass of the underlying class,\r\n * or {@code null} if there is no superclass defined.\r\n */\r\n@Nullable\r\nString getSuperClassName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#getSuperClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getSuperClassName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getInterfaceNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the names of all interfaces that the underlying class\r\n * implements, or an empty array if there are none.\r\n */\r\nString[] getInterfaceNames();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#getInterfaceNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata#getMemberClassNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the names of all classes declared as members of the class represented by\r\n * this ClassMetadata object. This includes public, protected, default (package)\r\n * access, and private classes and interfaces declared by the class, but excludes\r\n * inherited classes and interfaces. An empty array is returned if no member classes\r\n * or interfaces exist.\r\n * @since 3.1\r\n */\r\nString[] getMemberClassNames();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.ClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.ClassMetadata#getMemberClassNames()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.CachingMetadataReaderFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\n\n/**\n * Caching implementation of the {@link MetadataReaderFactory} interface,\n * caching a {@link MetadataReader} instance per Spring {@link Resource} handle\n * (i.e. per \".class\" file).\n *\n * @author Juergen Hoeller\n * @author Costin Leau\n * @since 2.5\n */\npublic class CachingMetadataReaderFactory extends SimpleMetadataReaderFactory {\n\n\t/** Default maximum number of entries for a local MetadataReader cache: 256. */\n\tpublic static final int DEFAULT_CACHE_LIMIT = 256;\n\n\t/** MetadataReader cache: either local or shared at the ResourceLoader level. */\n\tprivate @Nullable Map<Resource, MetadataReader> metadataReaderCache;\n\n\n\t/**\n\t * Create a new CachingMetadataReaderFactory for the default class loader,\n\t * using a local resource cache.\n\t */\n\tpublic CachingMetadataReaderFactory() {\n\t\tsuper();\n\t\tsetCacheLimit(DEFAULT_CACHE_LIMIT);\n\t}\n\n\t/**\n\t * Create a new CachingMetadataReaderFactory for the given {@link ClassLoader},\n\t * using a local resource cache.\n\t * @param classLoader the ClassLoader to use\n\t */\n\tpublic CachingMetadataReaderFactory(@Nullable ClassLoader classLoader) {\n\t\tsuper(classLoader);\n\t\tsetCacheLimit(DEFAULT_CACHE_LIMIT);\n\t}\n\n\t/**\n\t * Create a new CachingMetadataReaderFactory for the given {@link ResourceLoader},\n\t * using a shared resource cache if supported or a local resource cache otherwise.\n\t * @param resourceLoader the Spring ResourceLoader to use\n\t * (also determines the ClassLoader to use)\n\t * @see DefaultResourceLoader#getResourceCache\n\t */\n\tpublic CachingMetadataReaderFactory(@Nullable ResourceLoader resourceLoader) {\n\t\tsuper(resourceLoader);\n\t\tif (resourceLoader instanceof DefaultResourceLoader defaultResourceLoader) {\n\t\t\tthis.metadataReaderCache = defaultResourceLoader.getResourceCache(MetadataReader.class);\n\t\t}\n\t\telse {\n\t\t\tsetCacheLimit(DEFAULT_CACHE_LIMIT);\n\t\t}\n\t}\n\n\n\t/**\n\t * Specify the maximum number of entries for the MetadataReader cache.\n\t * <p>Default is 256 for a local cache, whereas a shared cache is\n\t * typically unbounded. This method enforces a local resource cache,\n\t * even if the {@link ResourceLoader} supports a shared resource cache.\n\t */\n\tpublic void setCacheLimit(int cacheLimit) {\n\t\tif (cacheLimit <= 0) {\n\t\t\tthis.metadataReaderCache = null;\n\t\t}\n\t\telse if (this.metadataReaderCache instanceof LocalResourceCache localResourceCache) {\n\t\t\tlocalResourceCache.setCacheLimit(cacheLimit);\n\t\t}\n\t\telse {\n\t\t\tthis.metadataReaderCache = new LocalResourceCache(cacheLimit);\n\t\t}\n\t}\n\n\t/**\n\t * Return the maximum number of entries for the MetadataReader cache.\n\t */\n\tpublic int getCacheLimit() {\n\t\tif (this.metadataReaderCache instanceof LocalResourceCache localResourceCache) {\n\t\t\treturn localResourceCache.getCacheLimit();\n\t\t}\n\t\telse {\n\t\t\treturn (this.metadataReaderCache != null ? Integer.MAX_VALUE : 0);\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic MetadataReader getMetadataReader(Resource resource) throws IOException {\n\t\tif (this.metadataReaderCache instanceof ConcurrentMap) {\n\t\t\t// No synchronization necessary...\n\t\t\tMetadataReader metadataReader = this.metadataReaderCache.get(resource);\n\t\t\tif (metadataReader == null) {\n\t\t\t\tmetadataReader = super.getMetadataReader(resource);\n\t\t\t\tthis.metadataReaderCache.put(resource, metadataReader);\n\t\t\t}\n\t\t\treturn metadataReader;\n\t\t}\n\t\telse if (this.metadataReaderCache != null) {\n\t\t\tsynchronized (this.metadataReaderCache) {\n\t\t\t\tMetadataReader metadataReader = this.metadataReaderCache.get(resource);\n\t\t\t\tif (metadataReader == null) {\n\t\t\t\t\tmetadataReader = super.getMetadataReader(resource);\n\t\t\t\t\tthis.metadataReaderCache.put(resource, metadataReader);\n\t\t\t\t}\n\t\t\t\treturn metadataReader;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn super.getMetadataReader(resource);\n\t\t}\n\t}\n\n\t/**\n\t * Clear the local MetadataReader cache, if any, removing all cached class metadata.\n\t */\n\tpublic void clearCache() {\n\t\tif (this.metadataReaderCache instanceof LocalResourceCache) {\n\t\t\tsynchronized (this.metadataReaderCache) {\n\t\t\t\tthis.metadataReaderCache.clear();\n\t\t\t}\n\t\t}\n\t\telse if (this.metadataReaderCache != null) {\n\t\t\t// Shared resource cache -> reset to local cache.\n\t\t\tsetCacheLimit(DEFAULT_CACHE_LIMIT);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static class LocalResourceCache extends LinkedHashMap<Resource, MetadataReader> {\n\n\t\tprivate volatile int cacheLimit;\n\n\t\tpublic LocalResourceCache(int cacheLimit) {\n\t\t\tsuper(cacheLimit, 0.75f, true);\n\t\t\tthis.cacheLimit = cacheLimit;\n\t\t}\n\n\t\tpublic void setCacheLimit(int cacheLimit) {\n\t\t\tthis.cacheLimit = cacheLimit;\n\t\t}\n\n\t\tpublic int getCacheLimit() {\n\t\t\treturn this.cacheLimit;\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean removeEldestEntry(Map.Entry<Resource, MetadataReader> eldest) {\n\t\t\treturn size() > this.cacheLimit;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]