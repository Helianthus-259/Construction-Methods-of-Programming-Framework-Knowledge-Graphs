[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesForAliasPair()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithTransitiveImplicitAliases() {\r\n    TransitiveImplicitAliasesTestConfiguration config = TransitiveImplicitAliasesTestConfigurationClass.class.getAnnotation(TransitiveImplicitAliasesTestConfiguration.class);\r\n    TransitiveImplicitAliasesTestConfiguration synthesized = MergedAnnotation.from(config).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized.xml()).isEqualTo(\"test.xml\");\r\n    assertThat(synthesized.groovy()).isEqualTo(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliasesForAliasPair()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithTransitiveImplicitAliasesForAliasPair() {\r\n    TransitiveImplicitAliasesForAliasPairTestConfiguration config = TransitiveImplicitAliasesForAliasPairTestConfigurationClass.class.getAnnotation(TransitiveImplicitAliasesForAliasPairTestConfiguration.class);\r\n    TransitiveImplicitAliasesForAliasPairTestConfiguration synthesized = MergedAnnotation.from(config).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized.xml()).isEqualTo(\"test.xml\");\r\n    assertThat(synthesized.groovy()).isEqualTo(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliasesForAliasPair()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithTransitiveImplicitAliasesForAliasPair()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithMissingDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliasesWithMissingDefaultValues() {\r\n    Class<?> clazz = ImplicitAliasesWithMissingDefaultValuesTestConfigurationClass.class;\r\n    Class<ImplicitAliasesWithMissingDefaultValuesTestConfiguration> annotationType = ImplicitAliasesWithMissingDefaultValuesTestConfiguration.class;\r\n    ImplicitAliasesWithMissingDefaultValuesTestConfiguration config = clazz.getAnnotation(annotationType);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(clazz, config)).withMessageStartingWith(\"Misconfigured aliases:\").withMessageContaining(\"attribute 'location1' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"attribute 'location2' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"default values\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithMissingDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithMissingDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDifferentDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliasesWithDifferentDefaultValues() {\r\n    Class<?> clazz = ImplicitAliasesWithDifferentDefaultValuesTestConfigurationClass.class;\r\n    Class<ImplicitAliasesWithDifferentDefaultValuesTestConfiguration> annotationType = ImplicitAliasesWithDifferentDefaultValuesTestConfiguration.class;\r\n    ImplicitAliasesWithDifferentDefaultValuesTestConfiguration config = clazz.getAnnotation(annotationType);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(clazz, config)).withMessageStartingWith(\"Misconfigured aliases:\").withMessageContaining(\"attribute 'location1' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"attribute 'location2' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"same default value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDifferentDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDifferentDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDuplicateValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithImplicitAliasesWithDuplicateValues() {\r\n    Class<?> clazz = ImplicitAliasesWithDuplicateValuesTestConfigurationClass.class;\r\n    Class<ImplicitAliasesWithDuplicateValuesTestConfiguration> annotationType = ImplicitAliasesWithDuplicateValuesTestConfiguration.class;\r\n    ImplicitAliasesWithDuplicateValuesTestConfiguration config = clazz.getAnnotation(annotationType);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(clazz, config)).withMessageStartingWith(\"Different @AliasFor mirror values for annotation\").withMessageContaining(annotationType.getName()).withMessageContaining(\"declared on class\").withMessageContaining(clazz.getName()).withMessageContaining(\"are declared with values of\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDuplicateValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithImplicitAliasesWithDuplicateValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromMapWithoutAttributeAliases() {\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    Map<String, Object> map = Collections.singletonMap(\"value\", \"webController\");\r\n    MergedAnnotation<Component> annotation = MergedAnnotation.of(Component.class, map);\r\n    Component synthesizedComponent = annotation.synthesize();\r\n    assertSynthesized(synthesizedComponent);\r\n    assertThat(synthesizedComponent.value()).isEqualTo(\"webController\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromMapWithNestedMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid synthesizeFromMapWithNestedMap() {\r\n    ComponentScanSingleFilter componentScan = ComponentScanSingleFilterClass.class.getAnnotation(ComponentScanSingleFilter.class);\r\n    assertThat(componentScan).isNotNull();\r\n    assertThat(componentScan.value().pattern()).isEqualTo(\"*Foo\");\r\n    Map<String, Object> map = MergedAnnotation.from(componentScan).asMap(annotation -> new LinkedHashMap<>(), Adapt.ANNOTATION_TO_MAP);\r\n    Map<String, Object> filterMap = (Map<String, Object>) map.get(\"value\");\r\n    assertThat(filterMap.get(\"pattern\")).isEqualTo(\"*Foo\");\r\n    filterMap.put(\"pattern\", \"newFoo\");\r\n    filterMap.put(\"enigma\", 42);\r\n    MergedAnnotation<ComponentScanSingleFilter> annotation = MergedAnnotation.of(ComponentScanSingleFilter.class, map);\r\n    ComponentScanSingleFilter synthesizedComponentScan = annotation.synthesize();\r\n    assertSynthesized(synthesizedComponentScan);\r\n    assertThat(synthesizedComponentScan.value().pattern()).isEqualTo(\"newFoo\");\r\n}",
    "tailType": "method_code"
  }
]