[
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgeMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnBridgedMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\r\n    assertThat(source.isBridge()).isTrue();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgeMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\r\n    Method source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\r\n    assertThat(source.isBridge()).isFalse();\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnBridgedMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\r\n    Method source = methodFrom(Ignorable.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\r\n    Method source = methodFrom(MultipleMethods.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\r\n    Method source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations()",
    "tailType": "method"
  }
]