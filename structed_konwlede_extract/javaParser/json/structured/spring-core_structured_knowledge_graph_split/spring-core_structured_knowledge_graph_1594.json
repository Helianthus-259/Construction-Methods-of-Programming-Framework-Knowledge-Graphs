[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.cglib.reflect.FastClass;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SpringNamingPolicy}.\n *\n * @author Sam Brannen\n * @since 6.0.13\n */\nclass SpringNamingPolicyTests {\n\n\tprivate final Set<String> reservedClassNames = new HashSet<>();\n\n\n\t@Test\n\tvoid nullPrefix() {\n\t\tassertThat(getClassName(null)).isEqualTo(\"org.springframework.cglib.empty.Object$$SpringCGLIB$$0\");\n\t\tassertThat(getClassName(null)).isEqualTo(\"org.springframework.cglib.empty.Object$$SpringCGLIB$$1\");\n\t}\n\n\t@Test\n\tvoid javaPrefix() {\n\t\tassertThat(getClassName(\"java.util.ArrayList\")).isEqualTo(\"_java.util.ArrayList$$SpringCGLIB$$0\");\n\t\tassertThat(getClassName(\"java.util.ArrayList\")).isEqualTo(\"_java.util.ArrayList$$SpringCGLIB$$1\");\n\t}\n\n\t@Test\n\tvoid javaxPrefix() {\n\t\tassertThat(getClassName(\"javax.sql.RowSet\")).isEqualTo(\"_javax.sql.RowSet$$SpringCGLIB$$0\");\n\t\tassertThat(getClassName(\"javax.sql.RowSet\")).isEqualTo(\"_javax.sql.RowSet$$SpringCGLIB$$1\");\n\t}\n\n\t@Test\n\tvoid examplePrefix() {\n\t\tassertThat(getClassName(\"example.MyComponent\")).isEqualTo(\"example.MyComponent$$SpringCGLIB$$0\");\n\t\tassertThat(getClassName(\"example.MyComponent\")).isEqualTo(\"example.MyComponent$$SpringCGLIB$$1\");\n\t}\n\n\t@Test\n\tvoid prefixContainingSpringLabel() {\n\t\tString generated1 = \"example.MyComponent$$SpringCGLIB$$0\";\n\t\tString generated2 = \"example.MyComponent$$SpringCGLIB$$1\";\n\n\t\tassertThat(getClassName(generated1)).isEqualTo(generated1);\n\t\tassertThat(getClassName(generated1)).isEqualTo(generated2);\n\t}\n\n\t@Test\n\tvoid fastClass() {\n\t\tString prefix = \"example.MyComponent\";\n\t\tString source = FastClass.class.getName();\n\t\tassertThat(getClassName(prefix, \"a.b.c\", null)).isEqualTo(\"example.MyComponent$$SpringCGLIB$$0\");\n\t\tassertThat(getClassName(prefix, source, null)).isEqualTo(\"example.MyComponent$$SpringCGLIB$$FastClass$$0\");\n\t\tassertThat(getClassName(prefix, source, null)).isEqualTo(\"example.MyComponent$$SpringCGLIB$$FastClass$$1\");\n\t}\n\n\tprivate String getClassName(String prefix) {\n\t\treturn getClassName(prefix, null, null);\n\t}\n\n\tprivate String getClassName(String prefix, String source, Object key) {\n\t\tString className = SpringNamingPolicy.INSTANCE.getClassName(prefix, source, key, reservedClassNames::contains);\n\t\treservedClassNames.add(className);\n\t\treturn className;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#reservedClassNames",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#reservedClassNames",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullPrefix() {\r\n    assertThat(getClassName(null)).isEqualTo(\"org.springframework.cglib.empty.Object$$SpringCGLIB$$0\");\r\n    assertThat(getClassName(null)).isEqualTo(\"org.springframework.cglib.empty.Object$$SpringCGLIB$$1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#nullPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaPrefix() {\r\n    assertThat(getClassName(\"java.util.ArrayList\")).isEqualTo(\"_java.util.ArrayList$$SpringCGLIB$$0\");\r\n    assertThat(getClassName(\"java.util.ArrayList\")).isEqualTo(\"_java.util.ArrayList$$SpringCGLIB$$1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#javaPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaxPrefix() {\r\n    assertThat(getClassName(\"javax.sql.RowSet\")).isEqualTo(\"_javax.sql.RowSet$$SpringCGLIB$$0\");\r\n    assertThat(getClassName(\"javax.sql.RowSet\")).isEqualTo(\"_javax.sql.RowSet$$SpringCGLIB$$1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#javaxPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid examplePrefix() {\r\n    assertThat(getClassName(\"example.MyComponent\")).isEqualTo(\"example.MyComponent$$SpringCGLIB$$0\");\r\n    assertThat(getClassName(\"example.MyComponent\")).isEqualTo(\"example.MyComponent$$SpringCGLIB$$1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#examplePrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid prefixContainingSpringLabel() {\r\n    String generated1 = \"example.MyComponent$$SpringCGLIB$$0\";\r\n    String generated2 = \"example.MyComponent$$SpringCGLIB$$1\";\r\n    assertThat(getClassName(generated1)).isEqualTo(generated1);\r\n    assertThat(getClassName(generated1)).isEqualTo(generated2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.SpringNamingPolicyTests#prefixContainingSpringLabel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]