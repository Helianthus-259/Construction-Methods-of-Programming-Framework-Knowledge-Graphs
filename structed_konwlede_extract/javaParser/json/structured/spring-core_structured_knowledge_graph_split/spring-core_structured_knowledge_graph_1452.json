[
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter#getCharacterOffset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter#getPublicId()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPublicId() {\r\n    return this.locator.getPublicId();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.LocatorLocationAdapter#getPublicId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter#getPublicId()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter#getSystemId()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getSystemId() {\r\n    return this.locator.getSystemId();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.LocatorLocationAdapter#getSystemId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.LocatorLocationAdapter#getSystemId()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxEventXMLReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.Iterator;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.Location;\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLStreamConstants;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.events.Attribute;\nimport javax.xml.stream.events.Characters;\nimport javax.xml.stream.events.Comment;\nimport javax.xml.stream.events.DTD;\nimport javax.xml.stream.events.EndElement;\nimport javax.xml.stream.events.EntityDeclaration;\nimport javax.xml.stream.events.EntityReference;\nimport javax.xml.stream.events.Namespace;\nimport javax.xml.stream.events.NotationDeclaration;\nimport javax.xml.stream.events.ProcessingInstruction;\nimport javax.xml.stream.events.StartDocument;\nimport javax.xml.stream.events.StartElement;\nimport javax.xml.stream.events.XMLEvent;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.ext.Locator2;\nimport org.xml.sax.helpers.AttributesImpl;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * SAX {@code XMLReader} that reads from a StAX {@code XMLEventReader}. Consumes {@code XMLEvents} from\n * an {@code XMLEventReader}, and calls the corresponding methods on the SAX callback interfaces.\n *\n * @author Arjen Poutsma\n * @since 3.0\n * @see XMLEventReader\n * @see #setContentHandler(org.xml.sax.ContentHandler)\n * @see #setDTDHandler(org.xml.sax.DTDHandler)\n * @see #setEntityResolver(org.xml.sax.EntityResolver)\n * @see #setErrorHandler(org.xml.sax.ErrorHandler)\n */\n@SuppressWarnings(\"rawtypes\")\nclass StaxEventXMLReader extends AbstractStaxXMLReader {\n\n\tprivate static final String DEFAULT_XML_VERSION = \"1.0\";\n\n\tprivate final XMLEventReader reader;\n\n\tprivate String xmlVersion = DEFAULT_XML_VERSION;\n\n\tprivate @Nullable String encoding;\n\n\n\t/**\n\t * Constructs a new instance of the {@code StaxEventXmlReader} that reads from\n\t * the given {@code XMLEventReader}. The supplied event reader must be in\n\t * {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state.\n\t * @param reader the {@code XMLEventReader} to read from\n\t * @throws IllegalStateException if the reader is not at the start of a document or element\n\t */\n\tStaxEventXMLReader(XMLEventReader reader) {\n\t\ttry {\n\t\t\tXMLEvent event = reader.peek();\n\t\t\tif (event != null && !(event.isStartDocument() || event.isStartElement())) {\n\t\t\t\tthrow new IllegalStateException(\"XMLEventReader not at start of document or element\");\n\t\t\t}\n\t\t}\n\t\tcatch (XMLStreamException ex) {\n\t\t\tthrow new IllegalStateException(\"Could not read first element: \" + ex.getMessage());\n\t\t}\n\t\tthis.reader = reader;\n\t}\n\n\n\t@Override\n\tprotected void parseInternal() throws SAXException, XMLStreamException {\n\t\tboolean documentStarted = false;\n\t\tboolean documentEnded = false;\n\t\tint elementDepth = 0;\n\t\twhile (this.reader.hasNext() && elementDepth >= 0) {\n\t\t\tXMLEvent event = this.reader.nextEvent();\n\t\t\tif (!event.isStartDocument() && !event.isEndDocument() && !documentStarted) {\n\t\t\t\thandleStartDocument(event);\n\t\t\t\tdocumentStarted = true;\n\t\t\t}\n\t\t\tswitch (event.getEventType()) {\n\t\t\t\tcase XMLStreamConstants.START_DOCUMENT -> {\n\t\t\t\t\thandleStartDocument(event);\n\t\t\t\t\tdocumentStarted = true;\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.START_ELEMENT -> {\n\t\t\t\t\telementDepth++;\n\t\t\t\t\thandleStartElement(event.asStartElement());\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.END_ELEMENT -> {\n\t\t\t\t\telementDepth--;\n\t\t\t\t\tif (elementDepth >= 0) {\n\t\t\t\t\t\thandleEndElement(event.asEndElement());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.PROCESSING_INSTRUCTION ->\n\t\t\t\t\t\thandleProcessingInstruction((ProcessingInstruction) event);\n\t\t\t\tcase XMLStreamConstants.CHARACTERS, XMLStreamConstants.SPACE, XMLStreamConstants.CDATA ->\n\t\t\t\t\t\thandleCharacters(event.asCharacters());\n\t\t\t\tcase XMLStreamConstants.END_DOCUMENT -> {\n\t\t\t\t\thandleEndDocument();\n\t\t\t\t\tdocumentEnded = true;\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.NOTATION_DECLARATION -> handleNotationDeclaration((NotationDeclaration) event);\n\t\t\t\tcase XMLStreamConstants.ENTITY_DECLARATION -> handleEntityDeclaration((EntityDeclaration) event);\n\t\t\t\tcase XMLStreamConstants.COMMENT -> handleComment((Comment) event);\n\t\t\t\tcase XMLStreamConstants.DTD -> handleDtd((DTD) event);\n\t\t\t\tcase XMLStreamConstants.ENTITY_REFERENCE -> handleEntityReference((EntityReference) event);\n\t\t\t}\n\t\t}\n\t\tif (documentStarted && !documentEnded) {\n\t\t\thandleEndDocument();\n\t\t}\n\n\t}\n\n\tprivate void handleStartDocument(final XMLEvent event) throws SAXException {\n\t\tif (event.isStartDocument()) {\n\t\t\tStartDocument startDocument = (StartDocument) event;\n\t\t\tString xmlVersion = startDocument.getVersion();\n\t\t\tif (StringUtils.hasLength(xmlVersion)) {\n\t\t\t\tthis.xmlVersion = xmlVersion;\n\t\t\t}\n\t\t\tif (startDocument.encodingSet()) {\n\t\t\t\tthis.encoding = startDocument.getCharacterEncodingScheme();\n\t\t\t}\n\t\t}\n\n\t\tContentHandler contentHandler = getContentHandler();\n\t\tif (contentHandler != null) {\n\t\t\tfinal Location location = event.getLocation();\n\t\t\tcontentHandler.setDocumentLocator(new Locator2() {\n\t\t\t\t@Override\n\t\t\t\tpublic int getColumnNumber() {\n\t\t\t\t\treturn (location != null ? location.getColumnNumber() : -1);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic int getLineNumber() {\n\t\t\t\t\treturn (location != null ? location.getLineNumber() : -1);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getPublicId() {\n\t\t\t\t\treturn (location != null ? location.getPublicId() : null);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getSystemId() {\n\t\t\t\t\treturn (location != null ? location.getSystemId() : null);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic String getXMLVersion() {\n\t\t\t\t\treturn xmlVersion;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getEncoding() {\n\t\t\t\t\treturn encoding;\n\t\t\t\t}\n\t\t\t});\n\t\t\tcontentHandler.startDocument();\n\t\t}\n\t}\n\n\tprivate void handleStartElement(StartElement startElement) throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tQName qName = startElement.getName();\n\t\t\tif (hasNamespacesFeature()) {\n\t\t\t\tfor (Iterator i = startElement.getNamespaces(); i.hasNext();) {\n\t\t\t\t\tNamespace namespace = (Namespace) i.next();\n\t\t\t\t\tstartPrefixMapping(namespace.getPrefix(), namespace.getNamespaceURI());\n\t\t\t\t}\n\t\t\t\tfor (Iterator i = startElement.getAttributes(); i.hasNext();){\n\t\t\t\t\tAttribute attribute = (Attribute) i.next();\n\t\t\t\t\tQName attributeName = attribute.getName();\n\t\t\t\t\tstartPrefixMapping(attributeName.getPrefix(), attributeName.getNamespaceURI());\n\t\t\t\t}\n\n\t\t\t\tgetContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName),\n\t\t\t\t\t\tgetAttributes(startElement));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetContentHandler().startElement(\"\", \"\", toQualifiedName(qName), getAttributes(startElement));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void handleCharacters(Characters characters) throws SAXException {\n\t\tchar[] data = characters.getData().toCharArray();\n\t\tif (getContentHandler() != null && characters.isIgnorableWhiteSpace()) {\n\t\t\tgetContentHandler().ignorableWhitespace(data, 0, data.length);\n\t\t\treturn;\n\t\t}\n\t\tif (characters.isCData() && getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().startCDATA();\n\t\t}\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().characters(data, 0, data.length);\n\t\t}\n\t\tif (characters.isCData() && getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endCDATA();\n\t\t}\n\t}\n\n\tprivate void handleEndElement(EndElement endElement) throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tQName qName = endElement.getName();\n\t\t\tif (hasNamespacesFeature()) {\n\t\t\t\tgetContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName));\n\t\t\t\tfor (Iterator i = endElement.getNamespaces(); i.hasNext();) {\n\t\t\t\t\tNamespace namespace = (Namespace) i.next();\n\t\t\t\t\tendPrefixMapping(namespace.getPrefix());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetContentHandler().endElement(\"\", \"\", toQualifiedName(qName));\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate void handleEndDocument() throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().endDocument();\n\t\t}\n\t}\n\n\tprivate void handleNotationDeclaration(NotationDeclaration declaration) throws SAXException {\n\t\tif (getDTDHandler() != null) {\n\t\t\tgetDTDHandler().notationDecl(declaration.getName(), declaration.getPublicId(), declaration.getSystemId());\n\t\t}\n\t}\n\n\tprivate void handleEntityDeclaration(EntityDeclaration entityDeclaration) throws SAXException {\n\t\tif (getDTDHandler() != null) {\n\t\t\tgetDTDHandler().unparsedEntityDecl(entityDeclaration.getName(), entityDeclaration.getPublicId(),\n\t\t\t\t\tentityDeclaration.getSystemId(), entityDeclaration.getNotationName());\n\t\t}\n\t}\n\n\tprivate void handleProcessingInstruction(ProcessingInstruction pi) throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().processingInstruction(pi.getTarget(), pi.getData());\n\t\t}\n\t}\n\n\tprivate void handleComment(Comment comment) throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tchar[] ch = comment.getText().toCharArray();\n\t\t\tgetLexicalHandler().comment(ch, 0, ch.length);\n\t\t}\n\t}\n\n\tprivate void handleDtd(DTD dtd) throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tLocation location = dtd.getLocation();\n\t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n\t\t}\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endDTD();\n\t\t}\n\n\t}\n\n\tprivate void handleEntityReference(EntityReference reference) throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().startEntity(reference.getName());\n\t\t}\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endEntity(reference.getName());\n\t\t}\n\n\t}\n\n\tprivate Attributes getAttributes(StartElement event) {\n\t\tAttributesImpl attributes = new AttributesImpl();\n\t\tfor (Iterator i = event.getAttributes(); i.hasNext();) {\n\t\t\tAttribute attribute = (Attribute) i.next();\n\t\t\tQName qName = attribute.getName();\n\t\t\tString namespace = qName.getNamespaceURI();\n\t\t\tif (namespace == null || !hasNamespacesFeature()) {\n\t\t\t\tnamespace = \"\";\n\t\t\t}\n\t\t\tString type = attribute.getDTDType();\n\t\t\tif (type == null) {\n\t\t\t\ttype = \"CDATA\";\n\t\t\t}\n\t\t\tattributes.addAttribute(namespace, qName.getLocalPart(), toQualifiedName(qName), type, attribute.getValue());\n\t\t}\n\t\tif (hasNamespacePrefixesFeature()) {\n\t\t\tfor (Iterator i = event.getNamespaces(); i.hasNext();) {\n\t\t\t\tNamespace namespace = (Namespace) i.next();\n\t\t\t\tString prefix = namespace.getPrefix();\n\t\t\t\tString namespaceUri = namespace.getNamespaceURI();\n\t\t\t\tString qName;\n\t\t\t\tif (StringUtils.hasLength(prefix)) {\n\t\t\t\t\tqName = \"xmlns:\" + prefix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tqName = \"xmlns\";\n\t\t\t\t}\n\t\t\t\tattributes.addAttribute(\"\", \"\", qName, \"CDATA\", namespaceUri);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#DEFAULT_XML_VERSION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#DEFAULT_XML_VERSION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#reader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#reader",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLEventReader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#xmlVersion",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#xmlVersion",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#encoding",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#encoding",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#parseInternal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void parseInternal() throws SAXException, XMLStreamException {\r\n    boolean documentStarted = false;\r\n    boolean documentEnded = false;\r\n    int elementDepth = 0;\r\n    while (this.reader.hasNext() && elementDepth >= 0) {\r\n        XMLEvent event = this.reader.nextEvent();\r\n        if (!event.isStartDocument() && !event.isEndDocument() && !documentStarted) {\r\n            handleStartDocument(event);\r\n            documentStarted = true;\r\n        }\r\n        switch(event.getEventType()) {\r\n            case XMLStreamConstants.START_DOCUMENT ->\r\n                {\r\n                    handleStartDocument(event);\r\n                    documentStarted = true;\r\n                }\r\n            case XMLStreamConstants.START_ELEMENT ->\r\n                {\r\n                    elementDepth++;\r\n                    handleStartElement(event.asStartElement());\r\n                }\r\n            case XMLStreamConstants.END_ELEMENT ->\r\n                {\r\n                    elementDepth--;\r\n                    if (elementDepth >= 0) {\r\n                        handleEndElement(event.asEndElement());\r\n                    }\r\n                }\r\n            case XMLStreamConstants.PROCESSING_INSTRUCTION ->\r\n                handleProcessingInstruction((ProcessingInstruction) event);\r\n            case XMLStreamConstants.CHARACTERS, XMLStreamConstants.SPACE, XMLStreamConstants.CDATA ->\r\n                handleCharacters(event.asCharacters());\r\n            case XMLStreamConstants.END_DOCUMENT ->\r\n                {\r\n                    handleEndDocument();\r\n                    documentEnded = true;\r\n                }\r\n            case XMLStreamConstants.NOTATION_DECLARATION ->\r\n                handleNotationDeclaration((NotationDeclaration) event);\r\n            case XMLStreamConstants.ENTITY_DECLARATION ->\r\n                handleEntityDeclaration((EntityDeclaration) event);\r\n            case XMLStreamConstants.COMMENT ->\r\n                handleComment((Comment) event);\r\n            case XMLStreamConstants.DTD ->\r\n                handleDtd((DTD) event);\r\n            case XMLStreamConstants.ENTITY_REFERENCE ->\r\n                handleEntityReference((EntityReference) event);\r\n        }\r\n    }\r\n    if (documentStarted && !documentEnded) {\r\n        handleEndDocument();\r\n    }\r\n}",
    "tailType": "method_code"
  }
]