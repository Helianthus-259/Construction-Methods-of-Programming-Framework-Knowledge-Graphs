[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.nio.ByteBuffer;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.convert.converter.Converter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ByteBufferConverter}.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n */\nclass ByteBufferConverterTests {\n\n\tprivate final GenericConversionService conversionService = new DefaultConversionService();\n\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tconversionService.addConverter(new ByteArrayToOtherTypeConverter());\n\t\tconversionService.addConverter(new OtherTypeToByteArrayConverter());\n\t}\n\n\n\t@Test\n\tvoid byteArrayToByteBuffer() {\n\t\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\t\tByteBuffer convert = conversionService.convert(bytes, ByteBuffer.class);\n\t\tassertThat(convert.array()).isNotSameAs(bytes);\n\t\tassertThat(convert.array()).isEqualTo(bytes);\n\t}\n\n\t@Test\n\tvoid byteBufferToByteArray() {\n\t\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\t\tByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n\t\tbyte[] convert = conversionService.convert(byteBuffer, byte[].class);\n\t\tassertThat(convert).isNotSameAs(bytes);\n\t\tassertThat(convert).isEqualTo(bytes);\n\t}\n\n\t@Test\n\tvoid byteBufferToOtherType() {\n\t\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\t\tByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n\t\tOtherType convert = conversionService.convert(byteBuffer, OtherType.class);\n\t\tassertThat(convert.bytes).isNotSameAs(bytes);\n\t\tassertThat(convert.bytes).isEqualTo(bytes);\n\t}\n\n\t@Test\n\tvoid otherTypeToByteBuffer() {\n\t\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\t\tOtherType otherType = new OtherType(bytes);\n\t\tByteBuffer convert = conversionService.convert(otherType, ByteBuffer.class);\n\t\tassertThat(convert.array()).isNotSameAs(bytes);\n\t\tassertThat(convert.array()).isEqualTo(bytes);\n\t}\n\n\t@Test\n\tvoid byteBufferToByteBuffer() {\n\t\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\t\tByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n\t\tByteBuffer convert = conversionService.convert(byteBuffer, ByteBuffer.class);\n\t\tassertThat(convert).isNotSameAs(byteBuffer.rewind());\n\t\tassertThat(convert).isEqualTo(byteBuffer.rewind());\n\t\tassertThat(convert).isEqualTo(ByteBuffer.wrap(bytes));\n\t\tassertThat(convert.array()).isEqualTo(bytes);\n\t}\n\n\n\tprivate static class OtherType {\n\n\t\tprivate byte[] bytes;\n\n\t\tpublic OtherType(byte[] bytes) {\n\t\t\tthis.bytes = bytes;\n\t\t}\n\n\t}\n\n\tprivate static class ByteArrayToOtherTypeConverter implements Converter<byte[], OtherType> {\n\n\t\t@Override\n\t\tpublic OtherType convert(byte[] source) {\n\t\t\treturn new OtherType(source);\n\t\t}\n\t}\n\n\n\tprivate static class OtherTypeToByteArrayConverter implements Converter<OtherType, byte[]> {\n\n\t\t@Override\n\t\tpublic byte[] convert(OtherType source) {\n\t\t\treturn source.bytes;\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "GenericConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    conversionService.addConverter(new ByteArrayToOtherTypeConverter());\r\n    conversionService.addConverter(new OtherTypeToByteArrayConverter());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteArrayToByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid byteArrayToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer convert = conversionService.convert(bytes, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#byteArrayToByteBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteArrayToByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid byteBufferToByteArray() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    byte[] convert = conversionService.convert(byteBuffer, byte[].class);\r\n    assertThat(convert).isNotSameAs(bytes);\r\n    assertThat(convert).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToOtherType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid byteBufferToOtherType() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    OtherType convert = conversionService.convert(byteBuffer, OtherType.class);\r\n    assertThat(convert.bytes).isNotSameAs(bytes);\r\n    assertThat(convert.bytes).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToOtherType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToOtherType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#otherTypeToByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid otherTypeToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    OtherType otherType = new OtherType(bytes);\r\n    ByteBuffer convert = conversionService.convert(otherType, ByteBuffer.class);\r\n    assertThat(convert.array()).isNotSameAs(bytes);\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverterTests#otherTypeToByteBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#otherTypeToByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverterTests#byteBufferToByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid byteBufferToByteBuffer() {\r\n    byte[] bytes = new byte[] { 1, 2, 3 };\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    ByteBuffer convert = conversionService.convert(byteBuffer, ByteBuffer.class);\r\n    assertThat(convert).isNotSameAs(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(byteBuffer.rewind());\r\n    assertThat(convert).isEqualTo(ByteBuffer.wrap(bytes));\r\n    assertThat(convert.array()).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  }
]