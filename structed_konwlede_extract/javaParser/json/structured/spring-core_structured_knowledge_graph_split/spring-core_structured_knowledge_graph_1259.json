[
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#lastElement(List<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#lastElement(List<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#toArray(Enumeration<E>,A[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Marshal the elements from the given enumeration into an array of the given type.\r\n * Enumeration elements must be assignable to the type of the given array. The array\r\n * returned will be a different instance than the array given.\r\n */\r\npublic static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {\r\n    ArrayList<A> elements = new ArrayList<>();\r\n    while (enumeration.hasMoreElements()) {\r\n        elements.add(enumeration.nextElement());\r\n    }\r\n    return elements.toArray(array);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#toArray(Enumeration<E>,A[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#toIterator(Enumeration<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adapt an {@link Enumeration} to an {@link Iterator}.\r\n * @param enumeration the original {@code Enumeration}\r\n * @return the adapted {@code Iterator}\r\n */\r\npublic static <E> Iterator<E> toIterator(@Nullable Enumeration<E> enumeration) {\r\n    return (enumeration != null ? enumeration.asIterator() : Collections.emptyIterator());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#toIterator(Enumeration<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#toMultiValueMap(Map<K,List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}.\r\n * @param targetMap the original map\r\n * @return the adapted multi-value map (wrapping the original map)\r\n * @since 3.1\r\n */\r\npublic static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> targetMap) {\r\n    return new MultiValueMapAdapter<>(targetMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#toMultiValueMap(Map<K,List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#unmodifiableMultiValueMap(MultiValueMap<? extends K,? extends V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an unmodifiable view of the specified multi-value map.\r\n * @param targetMap the map for which an unmodifiable view is to be returned.\r\n * @return an unmodifiable view of the specified multi-value map\r\n * @since 3.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> targetMap) {\r\n    Assert.notNull(targetMap, \"'targetMap' must not be null\");\r\n    if (targetMap instanceof UnmodifiableMultiValueMap) {\r\n        return (MultiValueMap<K, V>) targetMap;\r\n    }\r\n    return new UnmodifiableMultiValueMap<>(targetMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#unmodifiableMultiValueMap(MultiValueMap<? extends K,? extends V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#unmodifiableMultiValueMap(MultiValueMap<? extends K,? extends V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#compositeMap(Map<K,V>,Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a (partially unmodifiable) map that combines the provided two\r\n * maps. Invoking {@link Map#put(Object, Object)} or {@link Map#putAll(Map)}\r\n * on the returned map results in an {@link UnsupportedOperationException}.\r\n * <p>In the case of a key collision, {@code first} takes precedence over\r\n * {@code second}. In other words, entries in {@code second} with a key\r\n * that is also mapped by {@code first} are effectively ignored.\r\n * @param first the first map to compose\r\n * @param second the second map to compose\r\n * @return a new map that composes the given two maps\r\n * @since 6.2\r\n */\r\npublic static <K, V> Map<K, V> compositeMap(Map<K, V> first, Map<K, V> second) {\r\n    return new CompositeMap<>(first, second);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#compositeMap(Map<K,V>,Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#compositeMap(Map<K,V>,Map<K,V>,BiFunction<K,V,V>,Consumer<Map<K,V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a map that combines the provided maps. Invoking\r\n * {@link Map#put(Object, Object)} on the returned map will apply\r\n * {@code putFunction}, or will throw an\r\n * {@link UnsupportedOperationException} {@code putFunction} is\r\n * {@code null}. The same applies to {@link Map#putAll(Map)} and\r\n * {@code putAllFunction}.\r\n * <p>In the case of a key collision, {@code first} takes precedence over\r\n * {@code second}. In other words, entries in {@code second} with a key\r\n * that is also mapped by {@code first} are effectively ignored.\r\n * @param first the first map to compose\r\n * @param second the second map to compose\r\n * @param putFunction applied when {@code Map::put} is invoked. If\r\n * {@code null}, {@code Map::put} throws an\r\n * {@code UnsupportedOperationException}.\r\n * @param putAllFunction applied when {@code Map::putAll} is invoked. If\r\n * {@code null}, {@code Map::putAll} throws an\r\n * {@code UnsupportedOperationException}.\r\n * @return a new map that composes the give maps\r\n * @since 6.2\r\n */\r\npublic static <K, V> Map<K, V> compositeMap(Map<K, V> first, Map<K, V> second, @Nullable BiFunction<K, V, V> putFunction, @Nullable Consumer<Map<K, V>> putAllFunction) {\r\n    return new CompositeMap<>(first, second, putFunction, putAllFunction);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#compositeMap(Map<K,V>,Map<K,V>,BiFunction<K,V,V>,Consumer<Map<K,V>>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CommonsLogWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.Writer;\n\nimport org.apache.commons.logging.Log;\n\n/**\n * {@code java.io.Writer} adapter for a Commons Logging {@code Log}.\n *\n * @author Juergen Hoeller\n * @since 2.5.1\n */\npublic class CommonsLogWriter extends Writer {\n\n\tprivate final Log logger;\n\n\tprivate final StringBuilder buffer = new StringBuilder();\n\n\n\t/**\n\t * Create a new CommonsLogWriter for the given Commons Logging logger.\n\t * @param logger the Commons Logging logger to write to\n\t */\n\tpublic CommonsLogWriter(Log logger) {\n\t\tAssert.notNull(logger, \"Logger must not be null\");\n\t\tthis.logger = logger;\n\t}\n\n\n\tpublic void write(char ch) {\n\t\tif (ch == '\\n' && this.buffer.length() > 0) {\n\t\t\tlogger.debug(this.buffer.toString());\n\t\t\tthis.buffer.setLength(0);\n\t\t}\n\t\telse {\n\t\t\tthis.buffer.append(ch);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void write(char[] buffer, int offset, int length) {\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\twrite(buffer[offset + i]);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void flush() {\n\t}\n\n\t@Override\n\tpublic void close() {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CommonsLogWriter#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  }
]