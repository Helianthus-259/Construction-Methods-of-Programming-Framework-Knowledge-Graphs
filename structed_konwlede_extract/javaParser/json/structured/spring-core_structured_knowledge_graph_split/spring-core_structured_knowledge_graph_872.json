[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ConfigurableConversionService",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ConfigurableConversionService",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.ConverterRegistry;\n\n/**\n * Configuration interface to be implemented by most if not all {@link ConversionService}\n * types. Consolidates the read-only operations exposed by {@link ConversionService} and\n * the mutating operations of {@link ConverterRegistry} to allow for convenient ad-hoc\n * addition and removal of {@link org.springframework.core.convert.converter.Converter\n * Converters} through. The latter is particularly useful when working against a\n * {@link org.springframework.core.env.ConfigurableEnvironment ConfigurableEnvironment}\n * instance in application context bootstrapping code.\n *\n * @author Chris Beams\n * @since 3.1\n * @see org.springframework.core.env.ConfigurablePropertyResolver#getConversionService()\n * @see org.springframework.core.env.ConfigurableEnvironment\n * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment()\n */\npublic interface ConfigurableConversionService extends ConversionService, ConverterRegistry {\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConfigurableConversionService",
    "headType": "class",
    "relation": "extend",
    "tail": "ConversionService",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ConfigurableConversionService",
    "headType": "class",
    "relation": "extend",
    "tail": "ConverterRegistry",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ConversionServiceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionServiceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\nimport org.springframework.core.convert.converter.ConverterRegistry;\nimport org.springframework.core.convert.converter.GenericConverter;\n\n/**\n * A factory for common {@link org.springframework.core.convert.ConversionService}\n * configurations.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Chris Beams\n * @since 3.0\n */\npublic final class ConversionServiceFactory {\n\n\tprivate ConversionServiceFactory() {\n\t}\n\n\n\t/**\n\t * Register the given Converter objects with the given target ConverterRegistry.\n\t * @param converters the converter objects: implementing {@link Converter},\n\t * {@link ConverterFactory}, or {@link GenericConverter}\n\t * @param registry the target registry\n\t */\n\tpublic static void registerConverters(@Nullable Set<?> converters, ConverterRegistry registry) {\n\t\tif (converters != null) {\n\t\t\tfor (Object candidate : converters) {\n\t\t\t\tif (candidate instanceof GenericConverter genericConverter) {\n\t\t\t\t\tregistry.addConverter(genericConverter);\n\t\t\t\t}\n\t\t\t\telse if (candidate instanceof Converter<?, ?> converter) {\n\t\t\t\t\tregistry.addConverter(converter);\n\t\t\t\t}\n\t\t\t\telse if (candidate instanceof ConverterFactory<?, ?> converterFactory) {\n\t\t\t\t\tregistry.addConverterFactory(converterFactory);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Each converter object must implement one of the \" +\n\t\t\t\t\t\t\t\"Converter, ConverterFactory, or GenericConverter interfaces\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionServiceFactory#registerConverters(Set<?>,ConverterRegistry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the given Converter objects with the given target ConverterRegistry.\r\n * @param converters the converter objects: implementing {@link Converter},\r\n * {@link ConverterFactory}, or {@link GenericConverter}\r\n * @param registry the target registry\r\n */\r\npublic static void registerConverters(@Nullable Set<?> converters, ConverterRegistry registry) {\r\n    if (converters != null) {\r\n        for (Object candidate : converters) {\r\n            if (candidate instanceof GenericConverter genericConverter) {\r\n                registry.addConverter(genericConverter);\r\n            } else if (candidate instanceof Converter<?, ?> converter) {\r\n                registry.addConverter(converter);\r\n            } else if (candidate instanceof ConverterFactory<?, ?> converterFactory) {\r\n                registry.addConverterFactory(converterFactory);\r\n            } else {\r\n                throw new IllegalArgumentException(\"Each converter object must implement one of the \" + \"Converter, ConverterFactory, or GenericConverter interfaces\");\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionServiceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConversionServiceFactory#registerConverters(Set<?>,ConverterRegistry)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ConversionUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.GenericConverter;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\n/**\n * Internal utilities for the conversion package.\n *\n * @author Keith Donald\n * @author Stephane Nicoll\n * @since 3.0\n */\nabstract class ConversionUtils {\n\n\tpublic static @Nullable Object invokeConverter(GenericConverter converter, @Nullable Object source,\n\t\t\tTypeDescriptor sourceType, TypeDescriptor targetType) {\n\n\t\ttry {\n\t\t\treturn converter.convert(source, sourceType, targetType);\n\t\t}\n\t\tcatch (ConversionFailedException ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new ConversionFailedException(sourceType, targetType, source, ex);\n\t\t}\n\t}\n\n\tpublic static boolean canConvertElements(@Nullable TypeDescriptor sourceElementType,\n\t\t\t@Nullable TypeDescriptor targetElementType, ConversionService conversionService) {\n\n\t\tif (targetElementType == null) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tif (sourceElementType == null) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\tif (conversionService.canConvert(sourceElementType, targetElementType)) {\n\t\t\t// yes\n\t\t\treturn true;\n\t\t}\n\t\tif (ClassUtils.isAssignable(sourceElementType.getType(), targetElementType.getType())) {\n\t\t\t// maybe\n\t\t\treturn true;\n\t\t}\n\t\t// no\n\t\treturn false;\n\t}\n\n\tpublic static Class<?> getEnumType(Class<?> targetType) {\n\t\tClass<?> enumType = targetType;\n\t\twhile (enumType != null && !enumType.isEnum()) {\n\t\t\tenumType = enumType.getSuperclass();\n\t\t}\n\t\tAssert.notNull(enumType, () -> \"The target type \" + targetType.getName() + \" does not refer to an enum\");\n\t\treturn enumType;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils#invokeConverter(GenericConverter,Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\npublic static Object invokeConverter(GenericConverter converter, @Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    try {\r\n        return converter.convert(source, sourceType, targetType);\r\n    } catch (ConversionFailedException ex) {\r\n        throw ex;\r\n    } catch (Throwable ex) {\r\n        throw new ConversionFailedException(sourceType, targetType, source, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConversionUtils#invokeConverter(GenericConverter,Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils#invokeConverter(GenericConverter,Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils#canConvertElements(TypeDescriptor,TypeDescriptor,ConversionService)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean canConvertElements(@Nullable TypeDescriptor sourceElementType, @Nullable TypeDescriptor targetElementType, ConversionService conversionService) {\r\n    if (targetElementType == null) {\r\n        // yes\r\n        return true;\r\n    }\r\n    if (sourceElementType == null) {\r\n        // maybe\r\n        return true;\r\n    }\r\n    if (conversionService.canConvert(sourceElementType, targetElementType)) {\r\n        // yes\r\n        return true;\r\n    }\r\n    if (ClassUtils.isAssignable(sourceElementType.getType(), targetElementType.getType())) {\r\n        // maybe\r\n        return true;\r\n    }\r\n    // no\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConversionUtils#canConvertElements(TypeDescriptor,TypeDescriptor,ConversionService)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils#getEnumType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Class<?> getEnumType(Class<?> targetType) {\r\n    Class<?> enumType = targetType;\r\n    while (enumType != null && !enumType.isEnum()) {\r\n        enumType = enumType.getSuperclass();\r\n    }\r\n    Assert.notNull(enumType, () -> \"The target type \" + targetType.getName() + \" does not refer to an enum\");\r\n    return enumType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ConversionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ConversionUtils#getEnumType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  }
]