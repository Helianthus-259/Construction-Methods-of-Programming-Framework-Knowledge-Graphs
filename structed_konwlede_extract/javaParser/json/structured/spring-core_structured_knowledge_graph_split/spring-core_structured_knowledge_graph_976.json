[
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DataBufferMapper#bufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "DataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper#map(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer map(int b) {\r\n    DataBuffer buffer = this.bufferFactory.allocateBuffer(1);\r\n    buffer.write((byte) b);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferMapper#map(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper#map(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper#map(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer map(byte[] b, int off, int len) {\r\n    DataBuffer buffer = this.bufferFactory.allocateBuffer(len);\r\n    buffer.write(b, off, len);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferMapper#map(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferMapper#map(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.DataBufferWrapper",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.function.IntPredicate;\n\nimport org.springframework.util.Assert;\n\n/**\n * Provides a convenient implementation of the {@link DataBuffer} interface\n * that can be overridden to adapt the delegate.\n *\n * <p>These methods default to calling through to the wrapped delegate object.\n *\n * @author Arjen Poutsma\n * @since 5.2\n */\npublic class DataBufferWrapper implements DataBuffer {\n\n\tprivate final DataBuffer delegate;\n\n\n\t/**\n\t * Create a new {@code DataBufferWrapper} that wraps the given buffer.\n\t * @param delegate the buffer to wrap\n\t */\n\tpublic DataBufferWrapper(DataBuffer delegate) {\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\tthis.delegate = delegate;\n\t}\n\n\t/**\n\t * Return the wrapped delegate.\n\t */\n\tpublic DataBuffer dataBuffer() {\n\t\treturn this.delegate;\n\t}\n\n\t@Override\n\tpublic DataBufferFactory factory() {\n\t\treturn this.delegate.factory();\n\t}\n\n\t@Override\n\tpublic int indexOf(IntPredicate predicate, int fromIndex) {\n\t\treturn this.delegate.indexOf(predicate, fromIndex);\n\t}\n\n\t@Override\n\tpublic int lastIndexOf(IntPredicate predicate, int fromIndex) {\n\t\treturn this.delegate.lastIndexOf(predicate, fromIndex);\n\t}\n\n\t@Override\n\tpublic int readableByteCount() {\n\t\treturn this.delegate.readableByteCount();\n\t}\n\n\t@Override\n\tpublic int writableByteCount() {\n\t\treturn this.delegate.writableByteCount();\n\t}\n\n\t@Override\n\tpublic int capacity() {\n\t\treturn this.delegate.capacity();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer capacity(int capacity) {\n\t\treturn this.delegate.capacity(capacity);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer ensureCapacity(int capacity) {\n\t\treturn this.delegate.ensureCapacity(capacity);\n\t}\n\n\t@Override\n\tpublic DataBuffer ensureWritable(int capacity) {\n\t\treturn this.delegate.ensureWritable(capacity);\n\t}\n\n\t@Override\n\tpublic int readPosition() {\n\t\treturn this.delegate.readPosition();\n\t}\n\n\t@Override\n\tpublic DataBuffer readPosition(int readPosition) {\n\t\treturn this.delegate.readPosition(readPosition);\n\t}\n\n\t@Override\n\tpublic int writePosition() {\n\t\treturn this.delegate.writePosition();\n\t}\n\n\t@Override\n\tpublic DataBuffer writePosition(int writePosition) {\n\t\treturn this.delegate.writePosition(writePosition);\n\t}\n\n\t@Override\n\tpublic byte getByte(int index) {\n\t\treturn this.delegate.getByte(index);\n\t}\n\n\t@Override\n\tpublic byte read() {\n\t\treturn this.delegate.read();\n\t}\n\n\t@Override\n\tpublic DataBuffer read(byte[] destination) {\n\t\treturn this.delegate.read(destination);\n\t}\n\n\t@Override\n\tpublic DataBuffer read(byte[] destination, int offset, int length) {\n\t\treturn this.delegate.read(destination, offset, length);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte b) {\n\t\treturn this.delegate.write(b);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte[] source) {\n\t\treturn this.delegate.write(source);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(byte[] source, int offset, int length) {\n\t\treturn this.delegate.write(source, offset, length);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(DataBuffer... buffers) {\n\t\treturn this.delegate.write(buffers);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(ByteBuffer... buffers) {\n\t\treturn this.delegate.write(buffers);\n\t}\n\n\t@Override\n\tpublic DataBuffer write(CharSequence charSequence,\n\t\t\tCharset charset) {\n\t\treturn this.delegate.write(charSequence, charset);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer slice(int index, int length) {\n\t\treturn this.delegate.slice(index, length);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer retainedSlice(int index, int length) {\n\t\treturn this.delegate.retainedSlice(index, length);\n\t}\n\n\t@Override\n\tpublic DataBuffer split(int index) {\n\t\treturn this.delegate.split(index);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer() {\n\t\treturn this.delegate.asByteBuffer();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer(int index, int length) {\n\t\treturn this.delegate.asByteBuffer(index, length);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer toByteBuffer() {\n\t\treturn this.delegate.toByteBuffer();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer toByteBuffer(int index, int length) {\n\t\treturn this.delegate.toByteBuffer(index, length);\n\t}\n\n\t@Override\n\tpublic void toByteBuffer(ByteBuffer dest) {\n\t\tthis.delegate.toByteBuffer(dest);\n\t}\n\n\t@Override\n\tpublic void toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length) {\n\t\tthis.delegate.toByteBuffer(srcPos, dest, destPos, length);\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator readableByteBuffers() {\n\t\treturn this.delegate.readableByteBuffers();\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator writableByteBuffers() {\n\t\treturn this.delegate.writableByteBuffers();\n\t}\n\n\t@Override\n\tpublic InputStream asInputStream() {\n\t\treturn this.delegate.asInputStream();\n\t}\n\n\t@Override\n\tpublic InputStream asInputStream(boolean releaseOnClose) {\n\t\treturn this.delegate.asInputStream(releaseOnClose);\n\t}\n\n\t@Override\n\tpublic OutputStream asOutputStream() {\n\t\treturn this.delegate.asOutputStream();\n\t}\n\n\t@Override\n\tpublic String toString(Charset charset) {\n\t\treturn this.delegate.toString(charset);\n\t}\n\n\t@Override\n\tpublic String toString(int index, int length, Charset charset) {\n\t\treturn this.delegate.toString(index, length, charset);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DataBufferWrapper#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "DataBuffer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper#dataBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the wrapped delegate.\r\n */\r\npublic DataBuffer dataBuffer() {\r\n    return this.delegate;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferWrapper#dataBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper#factory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBufferFactory factory() {\r\n    return this.delegate.factory();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferWrapper#factory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper#factory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper#indexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int indexOf(IntPredicate predicate, int fromIndex) {\r\n    return this.delegate.indexOf(predicate, fromIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferWrapper#indexOf(IntPredicate,int)",
    "tailType": "method"
  }
]