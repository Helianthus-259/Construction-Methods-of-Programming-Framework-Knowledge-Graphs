[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithAnyMemberCategoryMatchesCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS, MemberCategory.INVOKE_PUBLIC_METHODS);\r\n    assertPredicateMatches(reflection.onType(SampleClass.class).withAnyMemberCategory(MemberCategory.INTROSPECT_PUBLIC_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryMatchesCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithAnyMemberCategoryDoesNotMatchOtherCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS, MemberCategory.INVOKE_PUBLIC_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onType(SampleClass.class).withAnyMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryDoesNotMatchOtherCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.function.Predicate;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.ExecutableMode;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeReference;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link ReflectionHintsPredicates}\n *\n * @author Brian Clozel\n */\n@SuppressWarnings(\"removal\")\nclass ReflectionHintsPredicatesTests {\n\n\tprivate static Constructor<?> privateConstructor;\n\n\tprivate static Constructor<?> publicConstructor;\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static Method publicMethod;\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static Field publicField;\n\n\tprivate final ReflectionHintsPredicates reflection = new ReflectionHintsPredicates();\n\n\tprivate final RuntimeHints runtimeHints = new RuntimeHints();\n\n\n\t@BeforeAll\n\tstatic void setupAll() throws Exception {\n\t\tprivateConstructor = SampleClass.class.getDeclaredConstructor(String.class);\n\t\tpublicConstructor = SampleClass.class.getConstructor();\n\t\tpublicMethod = SampleClass.class.getMethod(\"publicMethod\");\n\t\tpublicField = SampleClass.class.getField(\"publicField\");\n\t}\n\n\t@Nested\n\tclass ReflectionOnType {\n\n\t\t@Test\n\t\tvoid shouldFailForNullType() {\n\t\t\tassertThatIllegalArgumentException().isThrownBy(() -> reflection.onType((TypeReference) null));\n\t\t}\n\n\t\t@Test\n\t\tvoid reflectionOnClassShouldMatchIntrospection() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateMatches(reflection.onType(SampleClass.class));\n\t\t}\n\n\t\t@Test\n\t\tvoid reflectionOnTypeReferenceShouldMatchIntrospection() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateMatches(reflection.onType(TypeReference.of(SampleClass.class)));\n\t\t}\n\n\t\t@Test\n\t\tvoid reflectionOnDifferentClassShouldNotMatchIntrospection() {\n\t\t\truntimeHints.reflection().registerType(Integer.class);\n\t\t\tassertPredicateDoesNotMatch(reflection.onType(TypeReference.of(SampleClass.class)));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithMemberCategoryFailsWithNullCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\t\treflection.onType(SampleClass.class).withMemberCategory(null));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithMemberCategoryMatchesCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withMemberCategory(MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithMemberCategoryDoesNotMatchOtherCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withMemberCategory(MemberCategory.INVOKE_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithMemberCategoriesMatchesCategories() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS,\n\t\t\t\t\tMemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withMemberCategories(MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithMemberCategoriesDoesNotMatchMissingCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withMemberCategories(MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithAnyMemberCategoryFailsWithNullCategories() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\t\treflection.onType(SampleClass.class).withAnyMemberCategory(new MemberCategory[0]));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithAnyMemberCategoryMatchesCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS,\n\t\t\t\t\tMemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withAnyMemberCategory(MemberCategory.INTROSPECT_PUBLIC_METHODS));\n\t\t}\n\n\t\t@Test\n\t\tvoid typeWithAnyMemberCategoryDoesNotMatchOtherCategory() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS,\n\t\t\t\t\tMemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onType(SampleClass.class)\n\t\t\t\t\t.withAnyMemberCategory(MemberCategory.INVOKE_DECLARED_METHODS));\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ReflectionOnConstructor {\n\n\t\t@Test\n\t\tvoid constructorInvocationDoesNotMatchConstructorHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.\n\t\t\t\t\twithConstructor(Collections.emptyList(), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid constructorInvocationMatchesConstructorInvocationHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.\n\t\t\t\t\twithConstructor(Collections.emptyList(), ExecutableMode.INVOKE));\n\t\t\tassertPredicateMatches(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid constructorInvocationDoesNotMatchIntrospectPublicConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid constructorInvocationMatchesInvokePublicConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\n\t\t\tassertPredicateMatches(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid constructorInvocationDoesNotMatchIntrospectDeclaredConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid constructorInvocationMatchesInvokeDeclaredConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\tassertPredicateMatches(reflection.onConstructorInvocation(publicConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationDoesNotMatchConstructorHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withConstructor(TypeReference.listOf(String.class), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationMatchesConstructorInvocationHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withConstructor(TypeReference.listOf(String.class), ExecutableMode.INVOKE));\n\t\t\tassertPredicateMatches(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationDoesNotMatchIntrospectPublicConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationDoesNotMatchInvokePublicConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationDoesNotMatchIntrospectDeclaredConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_CONSTRUCTORS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateConstructorInvocationMatchesInvokeDeclaredConstructors() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\tassertPredicateMatches(reflection.onConstructorInvocation(privateConstructor));\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ReflectionOnMethod {\n\n\t\t@Test\n\t\tvoid methodIntrospectionMatchesTypeHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodIntrospectionMatchesMethodHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodIntrospectionFailsForUnknownType() {\n\t\t\tassertThatThrownBy(() -> reflection.onMethod(\"com.example.DoesNotExist\", \"publicMethod\").introspect())\n\t\t\t\t\t.isInstanceOf(ClassNotFoundException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid methodIntrospectionMatchesIntrospectPublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodIntrospectionMatchesInvokePublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationDoesNotMatchMethodHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationMatchesMethodInvocationHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INVOKE));\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationDoesNotMatchIntrospectPublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationMatchesInvokePublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationDoesNotMatchIntrospectDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid methodInvocationDoesNotMatchInvokeDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodIntrospectionMatchesTypeHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodIntrospectionMatchesMethodHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodIntrospectionMatchesIntrospectDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodIntrospectionMatchesInvokeDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").introspect());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationDoesNotMatchMethodHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationMatchesMethodInvocationHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint ->\n\t\t\t\t\ttypeHint.withMethod(\"privateMethod\", Collections.emptyList(), ExecutableMode.INVOKE));\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationDoesNotMatchIntrospectPublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationDoesNotMatchInvokePublicMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationDoesNotMatchIntrospectDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS);\n\t\t\tassertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t\t@Test\n\t\tvoid privateMethodInvocationMatchesInvokeDeclaredMethods() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_DECLARED_METHODS);\n\t\t\tassertPredicateMatches(reflection.onMethod(SampleClass.class, \"privateMethod\").invoke());\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ReflectionOnField {\n\n\t\t@Test\n\t\tvoid shouldFailForMissingField() {\n\t\t\tassertThatIllegalArgumentException().isThrownBy(() -> reflection.onField(SampleClass.class, \"missingField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid shouldFailForUnknownClass() {\n\t\t\tassertThatThrownBy(() -> reflection.onFieldAccess(\"com.example.DoesNotExist\", \"missingField\"))\n\t\t\t\t\t.isInstanceOf(ClassNotFoundException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid publicFieldAccessMatchesFieldHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withField(\"publicField\"));\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid publicFieldAccessMatchesPublicFieldsHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.PUBLIC_FIELDS);\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid publicFieldAccessMatchesAccessPublicFieldsHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.ACCESS_PUBLIC_FIELDS);\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid fieldAccessDoesNotMatchTypeHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"publicField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateFieldAccessDoesNotMatchTypeHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class);\n\t\t\tassertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"privateField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateFieldAccessMatchesFieldHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withField(\"privateField\"));\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"privateField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateFieldAccessMatchesDeclaredFieldsHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.DECLARED_FIELDS);\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"privateField\"));\n\t\t}\n\n\t\t@Test\n\t\tvoid privateFieldAccessMatchesAccessDeclaredFieldsHint() {\n\t\t\truntimeHints.reflection().registerType(SampleClass.class, MemberCategory.ACCESS_DECLARED_FIELDS);\n\t\t\tassertPredicateMatches(reflection.onField(SampleClass.class, \"privateField\"));\n\t\t}\n\n\t}\n\n\tprivate void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\n\t\tassertThat(predicate).accepts(this.runtimeHints);\n\t}\n\n\tprivate void assertPredicateDoesNotMatch(Predicate<RuntimeHints> predicate) {\n\t\tassertThat(predicate).rejects(this.runtimeHints);\n\t}\n\n\n\t@SuppressWarnings(\"unused\")\n\tstatic class SampleClass {\n\n\t\tprivate String privateField;\n\n\t\tpublic String publicField;\n\n\t\tpublic SampleClass() {\n\t\t}\n\n\t\tprivate SampleClass(String message) {\n\t\t}\n\n\t\tpublic void publicMethod() {\n\t\t}\n\n\t\tprivate void privateMethod() {\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid constructorInvocationDoesNotMatchConstructorHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withConstructor(Collections.emptyList(), ExecutableMode.INTROSPECT));\r\n    assertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchConstructorHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid constructorInvocationMatchesConstructorInvocationHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withConstructor(Collections.emptyList(), ExecutableMode.INVOKE));\r\n    assertPredicateMatches(reflection.onConstructorInvocation(publicConstructor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationMatchesConstructorInvocationHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchIntrospectPublicConstructors()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid constructorInvocationDoesNotMatchIntrospectPublicConstructors() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS);\r\n    assertPredicateDoesNotMatch(reflection.onConstructorInvocation(publicConstructor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchIntrospectPublicConstructors()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnConstructor#constructorInvocationDoesNotMatchIntrospectPublicConstructors()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]