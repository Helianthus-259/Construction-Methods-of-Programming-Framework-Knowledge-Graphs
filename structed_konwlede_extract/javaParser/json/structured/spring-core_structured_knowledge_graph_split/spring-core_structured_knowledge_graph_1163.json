[
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Properties;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Static holder for local Spring properties, i.e. defined at the Spring library level.\n *\n * <p>Reads a {@code spring.properties} file from the root of the Spring library classpath,\n * and also allows for programmatically setting properties through {@link #setProperty}.\n * When checking a property, local entries are being checked first, then falling back\n * to JVM-level system properties through a {@link System#getProperty} check.\n *\n * <p>This is an alternative way to set Spring-related system properties such as\n * \"spring.getenv.ignore\" and \"spring.beaninfo.ignore\", in particular for scenarios\n * where JVM system properties are locked on the target platform (for example, WebSphere).\n * See {@link #setFlag} for a convenient way to locally set such flags to \"true\".\n *\n * @author Juergen Hoeller\n * @since 3.2.7\n * @see org.springframework.beans.StandardBeanInfoFactory#IGNORE_BEANINFO_PROPERTY_NAME\n * @see org.springframework.core.env.AbstractEnvironment#IGNORE_GETENV_PROPERTY_NAME\n * @see org.springframework.expression.spel.SpelParserConfiguration#SPRING_EXPRESSION_COMPILER_MODE_PROPERTY_NAME\n * @see org.springframework.jdbc.core.StatementCreatorUtils#IGNORE_GETPARAMETERTYPE_PROPERTY_NAME\n * @see org.springframework.jndi.JndiLocatorDelegate#IGNORE_JNDI_PROPERTY_NAME\n * @see org.springframework.objenesis.SpringObjenesis#IGNORE_OBJENESIS_PROPERTY_NAME\n * @see org.springframework.test.context.NestedTestConfiguration#ENCLOSING_CONFIGURATION_PROPERTY_NAME\n * @see org.springframework.test.context.TestConstructor#TEST_CONSTRUCTOR_AUTOWIRE_MODE_PROPERTY_NAME\n * @see org.springframework.test.context.cache.ContextCache#MAX_CONTEXT_CACHE_SIZE_PROPERTY_NAME\n */\npublic final class SpringProperties {\n\n\tprivate static final String PROPERTIES_RESOURCE_LOCATION = \"spring.properties\";\n\n\tprivate static final Properties localProperties = new Properties();\n\n\n\tstatic {\n\t\ttry {\n\t\t\tClassLoader cl = SpringProperties.class.getClassLoader();\n\t\t\tURL url = (cl != null ? cl.getResource(PROPERTIES_RESOURCE_LOCATION) :\n\t\t\t\t\tClassLoader.getSystemResource(PROPERTIES_RESOURCE_LOCATION));\n\t\t\tif (url != null) {\n\t\t\t\ttry (InputStream is = url.openStream()) {\n\t\t\t\t\tlocalProperties.load(is);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tSystem.err.println(\"Could not load 'spring.properties' file from local classpath: \" + ex);\n\t\t}\n\t}\n\n\n\tprivate SpringProperties() {\n\t}\n\n\n\t/**\n\t * Programmatically set a local property, overriding an entry in the\n\t * {@code spring.properties} file (if any).\n\t * @param key the property key\n\t * @param value the associated property value, or {@code null} to reset it\n\t */\n\tpublic static void setProperty(String key, @Nullable String value) {\n\t\tif (value != null) {\n\t\t\tlocalProperties.setProperty(key, value);\n\t\t}\n\t\telse {\n\t\t\tlocalProperties.remove(key);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the property value for the given key, checking local Spring\n\t * properties first and falling back to JVM-level system properties.\n\t * @param key the property key\n\t * @return the associated property value, or {@code null} if none found\n\t */\n\tpublic static @Nullable String getProperty(String key) {\n\t\tString value = localProperties.getProperty(key);\n\t\tif (value == null) {\n\t\t\ttry {\n\t\t\t\tvalue = System.getProperty(key);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tSystem.err.println(\"Could not retrieve system property '\" + key + \"': \" + ex);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Programmatically set a local flag to \"true\", overriding an\n\t * entry in the {@code spring.properties} file (if any).\n\t * @param key the property key\n\t */\n\tpublic static void setFlag(String key) {\n\t\tlocalProperties.put(key, Boolean.TRUE.toString());\n\t}\n\n\t/**\n\t * Retrieve the flag for the given property key.\n\t * @param key the property key\n\t * @return {@code true} if the property is set to the string \"true\"\n\t * (ignoring case), {@code false} otherwise\n\t */\n\tpublic static boolean getFlag(String key) {\n\t\treturn Boolean.parseBoolean(getProperty(key));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.SpringProperties#PROPERTIES_RESOURCE_LOCATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.SpringProperties#PROPERTIES_RESOURCE_LOCATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.SpringProperties#localProperties",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.SpringProperties#localProperties",
    "headType": "field",
    "relation": "haveType",
    "tail": "Properties",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.SpringProperties#setProperty(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Programmatically set a local property, overriding an entry in the\r\n * {@code spring.properties} file (if any).\r\n * @param key the property key\r\n * @param value the associated property value, or {@code null} to reset it\r\n */\r\npublic static void setProperty(String key, @Nullable String value) {\r\n    if (value != null) {\r\n        localProperties.setProperty(key, value);\r\n    } else {\r\n        localProperties.remove(key);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringProperties#setProperty(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringProperties#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the property value for the given key, checking local Spring\r\n * properties first and falling back to JVM-level system properties.\r\n * @param key the property key\r\n * @return the associated property value, or {@code null} if none found\r\n */\r\n@Nullable\r\npublic static String getProperty(String key) {\r\n    String value = localProperties.getProperty(key);\r\n    if (value == null) {\r\n        try {\r\n            value = System.getProperty(key);\r\n        } catch (Throwable ex) {\r\n            System.err.println(\"Could not retrieve system property '\" + key + \"': \" + ex);\r\n        }\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringProperties#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringProperties#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SpringProperties#setFlag(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Programmatically set a local flag to \"true\", overriding an\r\n * entry in the {@code spring.properties} file (if any).\r\n * @param key the property key\r\n */\r\npublic static void setFlag(String key) {\r\n    localProperties.put(key, Boolean.TRUE.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringProperties#setFlag(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringProperties#getFlag(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the flag for the given property key.\r\n * @param key the property key\r\n * @return {@code true} if the property is set to the string \"true\"\r\n * (ignoring case), {@code false} otherwise\r\n */\r\npublic static boolean getFlag(String key) {\r\n    return Boolean.parseBoolean(getProperty(key));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringProperties",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringProperties#getFlag(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.SpringVersion",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.SpringVersion",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Class that exposes the Spring version. Fetches the\n * \"Implementation-Version\" manifest attribute from the jar file.\n *\n * <p>Note that some ClassLoaders do not expose the package metadata,\n * hence this class might not be able to determine the Spring version\n * in all environments. Consider using a reflection-based check instead &mdash;\n * for example, checking for the presence of a specific Spring method that you\n * intend to call.\n *\n * @author Juergen Hoeller\n * @since 1.1\n */\npublic final class SpringVersion {\n\n\tprivate SpringVersion() {\n\t}\n\n\n\t/**\n\t * Return the full version string of the present Spring codebase,\n\t * or {@code null} if it cannot be determined.\n\t * @see Package#getImplementationVersion()\n\t */\n\tpublic static @Nullable String getVersion() {\n\t\tPackage pkg = SpringVersion.class.getPackage();\n\t\treturn (pkg != null ? pkg.getImplementationVersion() : null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.SpringVersion#getVersion()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the full version string of the present Spring codebase,\r\n * or {@code null} if it cannot be determined.\r\n * @see Package#getImplementationVersion()\r\n */\r\n@Nullable\r\npublic static String getVersion() {\r\n    Package pkg = SpringVersion.class.getPackage();\r\n    return (pkg != null ? pkg.getImplementationVersion() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SpringVersion",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SpringVersion#getVersion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SpringVersion#getVersion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]