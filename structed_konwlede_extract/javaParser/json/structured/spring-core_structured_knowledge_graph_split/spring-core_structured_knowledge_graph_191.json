[
  {
    "head": "org.springframework.util.CollisionTests#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollisionTests#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid keySet() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\", \"baz\", \"qux\");\r\n    Map<String, String> second = Map.of(\"baz\", \"quux\", \"corge\", \"grault\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    Set<String> keySet = composite.keySet();\r\n    assertThat(keySet).containsExactlyInAnyOrder(\"foo\", \"baz\", \"corge\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollisionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollisionTests#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollisionTests#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollisionTests#values()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid values() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\", \"baz\", \"qux\");\r\n    Map<String, String> second = Map.of(\"baz\", \"quux\", \"corge\", \"grault\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    Collection<String> values = composite.values();\r\n    assertThat(values).containsExactlyInAnyOrder(\"bar\", \"qux\", \"grault\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollisionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollisionTests#values()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollisionTests#values()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollisionTests#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid entrySet() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\", \"baz\", \"qux\");\r\n    Map<String, String> second = Map.of(\"baz\", \"quux\", \"corge\", \"grault\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    Set<Map.Entry<String, String>> entries = composite.entrySet();\r\n    assertThat(entries).containsExactlyInAnyOrder(entry(\"foo\", \"bar\"), entry(\"baz\", \"qux\"), entry(\"corge\", \"grault\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollisionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollisionTests#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollisionTests#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ResourceBundleHint",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Objects;\nimport java.util.ResourceBundle;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A hint that describes the need to access a {@link ResourceBundle}.\n *\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 6.0\n */\npublic final class ResourceBundleHint implements ConditionalHint {\n\n\tprivate final String baseName;\n\n\tprivate final @Nullable TypeReference reachableType;\n\n\n\tResourceBundleHint(Builder builder) {\n\t\tthis.baseName = builder.baseName;\n\t\tthis.reachableType = builder.reachableType;\n\t}\n\n\n\t/**\n\t * Return the {@code baseName} of the resource bundle.\n\t */\n\tpublic String getBaseName() {\n\t\treturn this.baseName;\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getReachableType() {\n\t\treturn this.reachableType;\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof ResourceBundleHint that &&\n\t\t\t\tthis.baseName.equals(that.baseName) && Objects.equals(this.reachableType, that.reachableType)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.baseName, this.reachableType);\n\t}\n\n\n\t/**\n\t * Builder for {@link ResourceBundleHint}.\n\t */\n\tpublic static class Builder {\n\n\t\tprivate String baseName;\n\n\t\tprivate @Nullable TypeReference reachableType;\n\n\t\tBuilder(String baseName) {\n\t\t\tthis.baseName = baseName;\n\t\t}\n\n\t\t/**\n\t\t * Make this hint conditional on the fact that the specified type can be resolved.\n\t\t * @param reachableType the type that should be reachable for this hint to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder onReachableType(TypeReference reachableType) {\n\t\t\tthis.reachableType = reachableType;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Use the {@code baseName} of the resource bundle.\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder baseName(String baseName) {\n\t\t\tthis.baseName = baseName;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link ResourceBundleHint} based on the state of this builder.\n\t\t * @return a resource bundle hint\n\t\t */\n\t\tResourceBundleHint build() {\n\t\t\treturn new ResourceBundleHint(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourceBundleHint#baseName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint#baseName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourceBundleHint#reachableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint#reachableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint#getBaseName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code baseName} of the resource bundle.\r\n */\r\npublic String getBaseName() {\r\n    return this.baseName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceBundleHint#getBaseName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceBundleHint#getReachableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic TypeReference getReachableType() {\r\n    return this.reachableType;\r\n}",
    "tailType": "method_code"
  }
]