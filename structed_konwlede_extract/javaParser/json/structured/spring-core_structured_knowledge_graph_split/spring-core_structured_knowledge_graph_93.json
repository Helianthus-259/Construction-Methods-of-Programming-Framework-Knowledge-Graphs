[
  {
    "head": "org.springframework.aot.generate.MethodReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodReference#toCodeBlock()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodReference#toInvokeCodeBlock(ArgumentCodeGenerator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return this method reference as a {@link CodeBlock} using the specified\r\n * {@link ArgumentCodeGenerator}.\r\n * @param argumentCodeGenerator the argument code generator to use\r\n * @return a code block to invoke the method\r\n */\r\ndefault CodeBlock toInvokeCodeBlock(ArgumentCodeGenerator argumentCodeGenerator) {\r\n    return toInvokeCodeBlock(argumentCodeGenerator, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodReference#toInvokeCodeBlock(ArgumentCodeGenerator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodReference#toInvokeCodeBlock(ArgumentCodeGenerator,ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return this method reference as a {@link CodeBlock} using the specified\r\n * {@link ArgumentCodeGenerator}. The {@code targetClassName} defines the\r\n * context in which the method invocation is added.\r\n * <p>If the caller has an instance of the type in which this method is\r\n * defined, it can hint that by specifying the type as a target class.\r\n * @param argumentCodeGenerator the argument code generator to use\r\n * @param targetClassName the target class name\r\n * @return a code block to invoke the method\r\n */\r\nCodeBlock toInvokeCodeBlock(ArgumentCodeGenerator argumentCodeGenerator, @Nullable ClassName targetClassName);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodReference#toInvokeCodeBlock(ArgumentCodeGenerator,ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Function;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.TypeName;\n\n/**\n * A reference to a method with convenient code generation for\n * referencing, or invoking it.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @since 6.0\n */\npublic interface MethodReference {\n\n\t/**\n\t * Return this method reference as a {@link CodeBlock}. If the reference is\n\t * to an instance method then {@code this::<method name>} will be returned.\n\t * @return a code block for the method reference.\n\t */\n\tCodeBlock toCodeBlock();\n\n\t/**\n\t * Return this method reference as a {@link CodeBlock} using the specified\n\t * {@link ArgumentCodeGenerator}.\n\t * @param argumentCodeGenerator the argument code generator to use\n\t * @return a code block to invoke the method\n\t */\n\tdefault CodeBlock toInvokeCodeBlock(ArgumentCodeGenerator argumentCodeGenerator) {\n\t\treturn toInvokeCodeBlock(argumentCodeGenerator, null);\n\t}\n\n\t/**\n\t * Return this method reference as a {@link CodeBlock} using the specified\n\t * {@link ArgumentCodeGenerator}. The {@code targetClassName} defines the\n\t * context in which the method invocation is added.\n\t * <p>If the caller has an instance of the type in which this method is\n\t * defined, it can hint that by specifying the type as a target class.\n\t * @param argumentCodeGenerator the argument code generator to use\n\t * @param targetClassName the target class name\n\t * @return a code block to invoke the method\n\t */\n\tCodeBlock toInvokeCodeBlock(ArgumentCodeGenerator argumentCodeGenerator, @Nullable ClassName targetClassName);\n\n\n\t/**\n\t * Strategy for generating code for arguments based on their type.\n\t */\n\tinterface ArgumentCodeGenerator {\n\n\t\t/**\n\t\t * Generate the code for the given argument type. If this type is\n\t\t * not supported, return {@code null}.\n\t\t * @param argumentType the argument type\n\t\t * @return the code for this argument, or {@code null}\n\t\t */\n\t\t@Nullable CodeBlock generateCode(TypeName argumentType);\n\n\t\t/**\n\t\t * Factory method that returns an {@link ArgumentCodeGenerator} that\n\t\t * always returns {@code null}.\n\t\t * @return a new {@link ArgumentCodeGenerator} instance\n\t\t */\n\t\tstatic ArgumentCodeGenerator none() {\n\t\t\treturn from(type -> null);\n\t\t}\n\n\t\t/**\n\t\t * Factory method that can be used to create an {@link ArgumentCodeGenerator}\n\t\t * that support only the given argument type.\n\t\t * @param argumentType the argument type\n\t\t * @param argumentCode the code for an argument of that type\n\t\t * @return a new {@link ArgumentCodeGenerator} instance\n\t\t */\n\t\tstatic ArgumentCodeGenerator of(Class<?> argumentType, String argumentCode) {\n\t\t\treturn from(candidateType -> candidateType.equals(ClassName.get(argumentType)) ?\n\t\t\t\t\tCodeBlock.of(argumentCode) : null);\n\t\t}\n\n\t\t/**\n\t\t * Factory method that creates a new {@link ArgumentCodeGenerator} from\n\t\t * a lambda friendly function. The given function is provided with the\n\t\t * argument type and must provide the code to use or {@code null} if\n\t\t * the type is not supported.\n\t\t * @param function the resolver function\n\t\t * @return a new {@link ArgumentCodeGenerator} instance backed by the function\n\t\t */\n\t\tstatic ArgumentCodeGenerator from(Function<TypeName, @Nullable CodeBlock> function) {\n\t\t\treturn function::apply;\n\t\t}\n\n\t\t/**\n\t\t * Create a new composed {@link ArgumentCodeGenerator} by combining this\n\t\t * generator with supporting the given argument type.\n\t\t * @param argumentType the argument type\n\t\t * @param argumentCode the code for an argument of that type\n\t\t * @return a new composite {@link ArgumentCodeGenerator} instance\n\t\t */\n\t\tdefault ArgumentCodeGenerator and(Class<?> argumentType, String argumentCode) {\n\t\t\treturn and(ArgumentCodeGenerator.of(argumentType, argumentCode));\n\t\t}\n\n\t\t/**\n\t\t * Create a new composed {@link ArgumentCodeGenerator} by combining this\n\t\t * generator with the given generator.\n\t\t * @param argumentCodeGenerator the argument generator to add\n\t\t * @return a new composite {@link ArgumentCodeGenerator} instance\n\t\t */\n\t\tdefault ArgumentCodeGenerator and(ArgumentCodeGenerator argumentCodeGenerator) {\n\t\t\treturn from(type -> {\n\t\t\t\tCodeBlock code = generateCode(type);\n\t\t\t\treturn (code != null ? code : argumentCodeGenerator.generateCode(type));\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#generateCode(TypeName)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate the code for the given argument type. If this type is\r\n * not supported, return {@code null}.\r\n * @param argumentType the argument type\r\n * @return the code for this argument, or {@code null}\r\n */\r\n@Nullable\r\nCodeBlock generateCode(TypeName argumentType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#generateCode(TypeName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#generateCode(TypeName)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#none()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method that returns an {@link ArgumentCodeGenerator} that\r\n * always returns {@code null}.\r\n * @return a new {@link ArgumentCodeGenerator} instance\r\n */\r\nstatic ArgumentCodeGenerator none() {\r\n    return from(type -> null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#none()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#of(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method that can be used to create an {@link ArgumentCodeGenerator}\r\n * that support only the given argument type.\r\n * @param argumentType the argument type\r\n * @param argumentCode the code for an argument of that type\r\n * @return a new {@link ArgumentCodeGenerator} instance\r\n */\r\nstatic ArgumentCodeGenerator of(Class<?> argumentType, String argumentCode) {\r\n    return from(candidateType -> candidateType.equals(ClassName.get(argumentType)) ? CodeBlock.of(argumentCode) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#of(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#from(Function<TypeName,CodeBlock>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method that creates a new {@link ArgumentCodeGenerator} from\r\n * a lambda friendly function. The given function is provided with the\r\n * argument type and must provide the code to use or {@code null} if\r\n * the type is not supported.\r\n * @param function the resolver function\r\n * @return a new {@link ArgumentCodeGenerator} instance backed by the function\r\n */\r\nstatic ArgumentCodeGenerator from(Function<TypeName, @Nullable CodeBlock> function) {\r\n    return function::apply;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#from(Function<TypeName,CodeBlock>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#and(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new composed {@link ArgumentCodeGenerator} by combining this\r\n * generator with supporting the given argument type.\r\n * @param argumentType the argument type\r\n * @param argumentCode the code for an argument of that type\r\n * @return a new composite {@link ArgumentCodeGenerator} instance\r\n */\r\ndefault ArgumentCodeGenerator and(Class<?> argumentType, String argumentCode) {\r\n    return and(ArgumentCodeGenerator.of(argumentType, argumentCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#and(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator#and(ArgumentCodeGenerator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new composed {@link ArgumentCodeGenerator} by combining this\r\n * generator with the given generator.\r\n * @param argumentCodeGenerator the argument generator to add\r\n * @return a new composite {@link ArgumentCodeGenerator} instance\r\n */\r\ndefault ArgumentCodeGenerator and(ArgumentCodeGenerator argumentCodeGenerator) {\r\n    return from(type -> {\r\n        CodeBlock code = generateCode(type);\r\n        return (code != null ? code : argumentCodeGenerator.generateCode(type));\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ArgumentCodeGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ArgumentCodeGenerator#and(ArgumentCodeGenerator)",
    "tailType": "method"
  }
]