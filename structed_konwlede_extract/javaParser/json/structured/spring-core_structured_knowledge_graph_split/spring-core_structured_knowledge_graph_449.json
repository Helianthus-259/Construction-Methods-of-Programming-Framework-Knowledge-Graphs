[
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodWriter#hasSubroutines",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodWriter#hasSubroutines",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodWriter#hasAsmInstructions",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodWriter#hasAsmInstructions",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodWriter#lastBytecodeOffset",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodWriter#lastBytecodeOffset",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodWriter#sourceOffset",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodWriter#sourceOffset",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.MethodWriter#sourceLength",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.MethodWriter#sourceLength",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.MethodWriter#hasFrames()",
    "headType": "method",
    "relation": "provide",
    "tail": "boolean hasFrames() {\r\n    return stackMapTableNumberOfEntries > 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#hasFrames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#hasAsmInstructions()",
    "headType": "method",
    "relation": "provide",
    "tail": "boolean hasAsmInstructions() {\r\n    return hasAsmInstructions;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#hasAsmInstructions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitParameter(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Implementation of the MethodVisitor abstract class\r\n// -----------------------------------------------------------------------------------------------\r\n@Override\r\npublic void visitParameter(final String name, final int access) {\r\n    if (parameters == null) {\r\n        parameters = new ByteVector();\r\n    }\r\n    ++parametersCount;\r\n    parameters.putShort((name == null) ? 0 : symbolTable.addConstantUtf8(name)).putShort(access);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitParameter(String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitParameter(String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotationDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotationDefault() {\r\n    defaultValue = new ByteVector();\r\n    return new AnnotationWriter(symbolTable, /* useNamedValues= */\r\n    false, defaultValue, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitAnnotationDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitAnnotationDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]