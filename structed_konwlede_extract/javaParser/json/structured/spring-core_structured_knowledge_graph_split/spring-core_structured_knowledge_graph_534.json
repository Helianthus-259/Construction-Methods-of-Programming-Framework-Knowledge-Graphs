[
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#props",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.beans.BeanGenerator#classOnly",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#classOnly",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the class which the generated class will extend. The class\r\n * must not be declared as final, and must have a non-private\r\n * no-argument constructor.\r\n * @param superclass class to extend, or null to extend Object\r\n */\r\npublic void setSuperclass(Class superclass) {\r\n    if (superclass != null && superclass.equals(Object.class)) {\r\n        superclass = null;\r\n    }\r\n    this.superclass = superclass;\r\n    // SPRING PATCH BEGIN\r\n    setContextClass(superclass);\r\n    // SPRING PATCH END\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#setSuperclass(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void addProperty(String name, Class type) {\r\n    if (props.containsKey(name)) {\r\n        throw new IllegalArgumentException(\"Duplicate property name \\\"\" + name + \"\\\"\");\r\n    }\r\n    props.put(name, Type.getType(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#addProperty(String,Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    if (superclass != null) {\r\n        return superclass.getClassLoader();\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(superclass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object create() {\r\n    classOnly = false;\r\n    return createHelper();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#createClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object createClass() {\r\n    classOnly = true;\r\n    return createHelper();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#createClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object createHelper() {\r\n    if (superclass != null) {\r\n        setNamePrefix(superclass.getName());\r\n    }\r\n    String superName = (superclass != null) ? superclass.getName() : \"java.lang.Object\";\r\n    Object key = KEY_FACTORY.newInstance(superName, props);\r\n    return super.create(key);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#createHelper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    int size = props.size();\r\n    String[] names = (String[]) props.keySet().toArray(new String[size]);\r\n    Type[] types = new Type[size];\r\n    for (int i = 0; i < size; i++) {\r\n        types[i] = (Type) props.get(names[i]);\r\n    }\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), superclass != null ? Type.getType(superclass) : Constants.TYPE_OBJECT, null, null);\r\n    EmitUtils.null_constructor(ce);\r\n    EmitUtils.add_properties(ce, names, types);\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  }
]