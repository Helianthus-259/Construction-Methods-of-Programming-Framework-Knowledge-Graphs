[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertCollectionToCollection() throws Exception {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(foo, new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertCollectionToCollectionNull() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(null, TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNotGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\nvoid convertCollectionToCollectionNotGeneric() {\r\n    Set<String> foo = new LinkedHashSet<>();\r\n    foo.add(\"1\");\r\n    foo.add(\"2\");\r\n    foo.add(\"3\");\r\n    List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor.valueOf(List.class));\r\n    assertThat(bar).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNotGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNotGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionNotGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionSpecialCaseSourceImpl()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid convertCollectionToCollectionSpecialCaseSourceImpl() throws Exception {\r\n    Map map = new LinkedHashMap();\r\n    map.put(\"1\", \"1\");\r\n    map.put(\"2\", \"2\");\r\n    map.put(\"3\", \"3\");\r\n    Collection values = map.values();\r\n    List<Integer> bar = (List<Integer>) conversionService.convert(values, TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField(\"genericList\")));\r\n    assertThat(bar).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionSpecialCaseSourceImpl()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionSpecialCaseSourceImpl()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertCollectionToCollectionSpecialCaseSourceImpl()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#collection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collection() {\r\n    List<String> strings = List.of(\"3\", \"9\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Integer> integers = (List<Integer>) conversionService.convert(strings, TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(integers).containsExactly(3, 9);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#collection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#collection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertMapToMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertMapToMap() throws Exception {\r\n    Map<String, String> foo = Map.of(\"1\", \"BAR\", \"2\", \"BAZ\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Integer, Foo> map = (Map<Integer, Foo>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField(\"genericMap\")));\r\n    assertThat(map).contains(entry(1, Foo.BAR), entry(2, Foo.BAZ));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertMapToMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertMapToMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]