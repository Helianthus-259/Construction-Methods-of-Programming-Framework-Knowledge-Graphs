[
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.CallbackHelper",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.cglib.core.ReflectUtils;\n\n/**\n * @version $Id: CallbackHelper.java,v 1.2 2004/06/24 21:15:20 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nabstract public class CallbackHelper\nimplements CallbackFilter\n{\n    private Map methodMap = new HashMap();\n    private List callbacks = new ArrayList();\n\n    public CallbackHelper(Class superclass, Class[] interfaces) {\n        List methods = new ArrayList();\n        Enhancer.getMethods(superclass, interfaces, methods);\n        Map indexes = new HashMap();\n        for (int i = 0, size = methods.size(); i < size; i++) {\n            Method method = (Method)methods.get(i);\n            Object callback = getCallback(method);\n            if (callback == null) {\n                throw new IllegalStateException(\"getCallback cannot return null\");\n            }\n            boolean isCallback = callback instanceof Callback;\n            if (!(isCallback || (callback instanceof Class))) {\n                throw new IllegalStateException(\"getCallback must return a Callback or a Class\");\n            }\n            if (i > 0 && ((callbacks.get(i - 1) instanceof Callback) ^ isCallback)) {\n                throw new IllegalStateException(\"getCallback must return a Callback or a Class consistently for every Method\");\n            }\n            Integer index = (Integer)indexes.get(callback);\n            if (index == null) {\n                index = callbacks.size();\n                indexes.put(callback, index);\n            }\n            methodMap.put(method, index);\n            callbacks.add(callback);\n        }\n    }\n\n    abstract protected Object getCallback(Method method);\n\n    public Callback[] getCallbacks() {\n        if (callbacks.size() == 0) {\n            return new Callback[0];\n        }\n        if (callbacks.get(0) instanceof Callback) {\n            return (Callback[])callbacks.toArray(new Callback[callbacks.size()]);\n        }\n        else {\n            throw new IllegalStateException(\"getCallback returned classes, not callbacks; call getCallbackTypes instead\");\n        }\n    }\n\n    public Class[] getCallbackTypes() {\n        if (callbacks.size() == 0) {\n            return new Class[0];\n        }\n        if (callbacks.get(0) instanceof Callback) {\n            return ReflectUtils.getClasses(getCallbacks());\n        }\n        else {\n            return (Class[])callbacks.toArray(new Class[callbacks.size()]);\n        }\n    }\n\n    @Override\n    public int accept(Method method) {\n        return ((Integer)methodMap.get(method)).intValue();\n    }\n\n    @Override\n    public int hashCode() {\n        return methodMap.hashCode();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false;\n        }\n        if (!(o instanceof CallbackHelper other)) {\n            return false;\n        }\n        return this.methodMap.equals(other.methodMap);\n    }\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#methodMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#methodMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#callbacks",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#callbacks",
    "headType": "field",
    "relation": "haveType",
    "tail": "List",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#getCallback(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected Object getCallback(Method method);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#getCallback(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#getCallbacks()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Callback[] getCallbacks() {\r\n    if (callbacks.size() == 0) {\r\n        return new Callback[0];\r\n    }\r\n    if (callbacks.get(0) instanceof Callback) {\r\n        return (Callback[]) callbacks.toArray(new Callback[callbacks.size()]);\r\n    } else {\r\n        throw new IllegalStateException(\"getCallback returned classes, not callbacks; call getCallbackTypes instead\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#getCallbacks()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#getCallbackTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Class[] getCallbackTypes() {\r\n    if (callbacks.size() == 0) {\r\n        return new Class[0];\r\n    }\r\n    if (callbacks.get(0) instanceof Callback) {\r\n        return ReflectUtils.getClasses(getCallbacks());\r\n    } else {\r\n        return (Class[]) callbacks.toArray(new Class[callbacks.size()]);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#getCallbackTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#accept(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int accept(Method method) {\r\n    return ((Integer) methodMap.get(method)).intValue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#accept(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#accept(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return methodMap.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackHelper#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackHelper#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(Object o) {\r\n    if (o == null) {\r\n        return false;\r\n    }\r\n    if (!(o instanceof CallbackHelper other)) {\r\n        return false;\r\n    }\r\n    return this.methodMap.equals(other.methodMap);\r\n}",
    "tailType": "method_code"
  }
]