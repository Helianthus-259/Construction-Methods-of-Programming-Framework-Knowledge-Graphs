[
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withWildcardTypes() throws Exception {\r\n    ParameterizedType openObjectsType = (ParameterizedType) getClass().getField(\"openObjects\").getGenericType();\r\n    ParameterizedType openNumbersType = (ParameterizedType) getClass().getField(\"openNumbers\").getGenericType();\r\n    Type storableObjectListType = getClass().getField(\"storableObjectList\").getGenericType();\r\n    Type objectType = getClass().getField(\"object\").getGenericType();\r\n    Type numberType = getClass().getField(\"number\").getGenericType();\r\n    Type stringType = getClass().getField(\"string\").getGenericType();\r\n    // '?'\r\n    Type openWildcard = openObjectsType.getActualTypeArguments()[0];\r\n    // '? extends number'\r\n    Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0];\r\n    assertThat(TypeUtils.isAssignable(openWildcard, objectType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openNumbersWildcard, numberType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openNumbersWildcard, stringType)).isFalse();\r\n    assertThat(TypeUtils.isAssignable(storableObjectListType, openObjectsType)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withWildcardTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withGenericArrayTypes() throws Exception {\r\n    Type arrayType = getClass().getField(\"array\").getGenericType();\r\n    Type openArrayType = getClass().getField(\"openArray\").getGenericType();\r\n    assertThat(TypeUtils.isAssignable(Object.class, arrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(Object.class, openArrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List[].class, arrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List[].class, openArrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(arrayType, List[].class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openArrayType, List[].class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(arrayType, arrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openArrayType, openArrayType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openArrayType, arrayType)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withGenericArrayTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ClassWriter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.unit",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.unit",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.unit.DataSizeTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.unit;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link DataSize}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass DataSizeTests {\n\n\t@Test\n\tvoid ofBytesToBytes() {\n\t\tassertThat(DataSize.ofBytes(1024).toBytes()).isEqualTo(1024);\n\t}\n\n\t@Test\n\tvoid ofBytesToKilobytes() {\n\t\tassertThat(DataSize.ofBytes(1024).toKilobytes()).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid ofKilobytesToKilobytes() {\n\t\tassertThat(DataSize.ofKilobytes(1024).toKilobytes()).isEqualTo(1024);\n\t}\n\n\t@Test\n\tvoid ofKilobytesToMegabytes() {\n\t\tassertThat(DataSize.ofKilobytes(1024).toMegabytes()).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid ofMegabytesToMegabytes() {\n\t\tassertThat(DataSize.ofMegabytes(1024).toMegabytes()).isEqualTo(1024);\n\t}\n\n\t@Test\n\tvoid ofMegabytesToGigabytes() {\n\t\tassertThat(DataSize.ofMegabytes(2048).toGigabytes()).isEqualTo(2);\n\t}\n\n\t@Test\n\tvoid ofGigabytesToGigabytes() {\n\t\tassertThat(DataSize.ofGigabytes(4096).toGigabytes()).isEqualTo(4096);\n\t}\n\n\t@Test\n\tvoid ofGigabytesToTerabytes() {\n\t\tassertThat(DataSize.ofGigabytes(4096).toTerabytes()).isEqualTo(4);\n\t}\n\n\t@Test\n\tvoid ofTerabytesToGigabytes() {\n\t\tassertThat(DataSize.ofTerabytes(1).toGigabytes()).isEqualTo(1024);\n\t}\n\n\t@Test\n\tvoid ofWithBytesUnit() {\n\t\tassertThat(DataSize.of(10, DataUnit.BYTES)).isEqualTo(DataSize.ofBytes(10));\n\t}\n\n\t@Test\n\tvoid ofWithKilobytesUnit() {\n\t\tassertThat(DataSize.of(20, DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(20));\n\t}\n\n\t@Test\n\tvoid ofWithMegabytesUnit() {\n\t\tassertThat(DataSize.of(30, DataUnit.MEGABYTES)).isEqualTo(DataSize.ofMegabytes(30));\n\t}\n\n\t@Test\n\tvoid ofWithGigabytesUnit() {\n\t\tassertThat(DataSize.of(40, DataUnit.GIGABYTES)).isEqualTo(DataSize.ofGigabytes(40));\n\t}\n\n\t@Test\n\tvoid ofWithTerabytesUnit() {\n\t\tassertThat(DataSize.of(50, DataUnit.TERABYTES)).isEqualTo(DataSize.ofTerabytes(50));\n\t}\n\n\t@Test\n\tvoid parseWithDefaultUnitUsesBytes() {\n\t\tassertThat(DataSize.parse(\"1024\")).isEqualTo(DataSize.ofKilobytes(1));\n\t}\n\n\t@Test\n\tvoid parseNegativeNumberWithDefaultUnitUsesBytes() {\n\t\tassertThat(DataSize.parse(\"-1\")).isEqualTo(DataSize.ofBytes(-1));\n\t}\n\n\t@Test\n\tvoid parseWithNullDefaultUnitUsesBytes() {\n\t\tassertThat(DataSize.parse(\"1024\", null)).isEqualTo(DataSize.ofKilobytes(1));\n\t}\n\n\t@Test\n\tvoid parseNegativeNumberWithNullDefaultUnitUsesBytes() {\n\t\tassertThat(DataSize.parse(\"-1024\", null)).isEqualTo(DataSize.ofKilobytes(-1));\n\t}\n\n\t@Test\n\tvoid parseWithCustomDefaultUnit() {\n\t\tassertThat(DataSize.parse(\"1\", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(1));\n\t}\n\n\t@Test\n\tvoid parseNegativeNumberWithCustomDefaultUnit() {\n\t\tassertThat(DataSize.parse(\"-1\", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(-1));\n\t}\n\n\t@ParameterizedTest(name = \"[{index}] text = ''{0}''\")\n\t@ValueSource(strings = {\n\t\t\"1024B\",\n\t\t\"1024 B\",\n\t\t\"1024B   \",\n\t\t\"   1024B\",\n\t\t\" 1024B \",\n\t\t\"\\t1024   B\\t\"\n\t})\n\tvoid parseWithBytes(CharSequence text) {\n\t\tassertThat(DataSize.parse(text)).isEqualTo(DataSize.ofKilobytes(1));\n\t}\n\n\t@Test\n\tvoid parseWithNegativeBytes() {\n\t\tassertThat(DataSize.parse(\"-1024B\")).isEqualTo(DataSize.ofKilobytes(-1));\n\t}\n\n\t@Test\n\tvoid parseWithPositiveBytes() {\n\t\tassertThat(DataSize.parse(\"+1024B\")).isEqualTo(DataSize.ofKilobytes(1));\n\t}\n\n\t@Test\n\tvoid parseWithKilobytes() {\n\t\tassertThat(DataSize.parse(\"1KB\")).isEqualTo(DataSize.ofBytes(1024));\n\t}\n\n\t@Test\n\tvoid parseWithNegativeKilobytes() {\n\t\tassertThat(DataSize.parse(\"-1KB\")).isEqualTo(DataSize.ofBytes(-1024));\n\t}\n\n\t@Test\n\tvoid parseWithMegabytes() {\n\t\tassertThat(DataSize.parse(\"4MB\")).isEqualTo(DataSize.ofMegabytes(4));\n\t}\n\n\t@Test\n\tvoid parseWithNegativeMegabytes() {\n\t\tassertThat(DataSize.parse(\"-4MB\")).isEqualTo(DataSize.ofMegabytes(-4));\n\t}\n\n\t@Test\n\tvoid parseWithGigabytes() {\n\t\tassertThat(DataSize.parse(\"1GB\")).isEqualTo(DataSize.ofMegabytes(1024));\n\t}\n\n\t@Test\n\tvoid parseWithNegativeGigabytes() {\n\t\tassertThat(DataSize.parse(\"-1GB\")).isEqualTo(DataSize.ofMegabytes(-1024));\n\t}\n\n\t@Test\n\tvoid parseWithTerabytes() {\n\t\tassertThat(DataSize.parse(\"1TB\")).isEqualTo(DataSize.ofTerabytes(1));\n\t}\n\n\t@Test\n\tvoid parseWithNegativeTerabytes() {\n\t\tassertThat(DataSize.parse(\"-1TB\")).isEqualTo(DataSize.ofTerabytes(-1));\n\t}\n\n\t@Test\n\tvoid isNegativeWithPositive() {\n\t\tassertThat(DataSize.ofBytes(50).isNegative()).isFalse();\n\t}\n\n\t@Test\n\tvoid isNegativeWithZero() {\n\t\tassertThat(DataSize.ofBytes(0).isNegative()).isFalse();\n\t}\n\n\t@Test\n\tvoid isNegativeWithNegative() {\n\t\tassertThat(DataSize.ofBytes(-1).isNegative()).isTrue();\n\t}\n\n\t@Test\n\tvoid toStringUsesBytes() {\n\t\tassertThat(DataSize.ofKilobytes(1).toString()).isEqualTo(\"1024B\");\n\t}\n\n\t@Test\n\tvoid toStringWithNegativeBytes() {\n\t\tassertThat(DataSize.ofKilobytes(-1).toString()).isEqualTo(\"-1024B\");\n\t}\n\n\t@Test\n\tvoid parseWithUnsupportedUnit() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> DataSize.parse(\"3WB\"))\n\t\t\t.withMessage(\"'3WB' is not a valid data size\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> DataSize.parse(\"3 WB\"))\n\t\t\t.withMessage(\"'3 WB' is not a valid data size\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests#ofBytesToBytes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofBytesToBytes() {\r\n    assertThat(DataSize.ofBytes(1024).toBytes()).isEqualTo(1024);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSizeTests#ofBytesToBytes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests#ofBytesToBytes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofBytesToKilobytes() {\r\n    assertThat(DataSize.ofBytes(1024).toKilobytes()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests#ofBytesToKilobytes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.unit.DataSizeTests#ofKilobytesToKilobytes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofKilobytesToKilobytes() {\r\n    assertThat(DataSize.ofKilobytes(1024).toKilobytes()).isEqualTo(1024);\r\n}",
    "tailType": "method_code"
  }
]