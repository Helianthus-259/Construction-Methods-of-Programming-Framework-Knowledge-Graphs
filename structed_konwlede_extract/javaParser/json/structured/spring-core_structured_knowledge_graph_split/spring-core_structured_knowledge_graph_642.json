[
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#filterConstructors(Class,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Filter the list of constructors from the superclass. The\r\n * constructors which remain will be included in the generated\r\n * class. The default implementation is to filter out all private\r\n * constructors, but subclasses may extend Enhancer to override this\r\n * behavior.\r\n * @param sc the superclass\r\n * @param constructors the list of all declared constructors from the superclass\r\n * @throws IllegalArgumentException if there are no non-private constructors\r\n */\r\nprotected void filterConstructors(Class sc, List constructors) {\r\n    CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true));\r\n    if (constructors.size() == 0) {\r\n        throw new IllegalArgumentException(\"No visible constructors in \" + sc);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#filterConstructors(Class,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This method should not be called in regular flow.\r\n * Technically speaking {@link #wrapCachedClass(Class)} uses {@link Enhancer.EnhancerFactoryData} as a cache value,\r\n * and the latter enables faster instantiation than plain old reflection lookup and invoke.\r\n * This method is left intact for backward compatibility reasons: just in case it was ever used.\r\n * @param type class to instantiate\r\n * @return newly created proxy instance\r\n * @throws Exception if something goes wrong\r\n */\r\n@Override\r\nprotected Object firstInstance(Class type) throws Exception {\r\n    if (classOnly) {\r\n        return type;\r\n    } else {\r\n        return createUsingReflection(type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    EnhancerFactoryData data = (EnhancerFactoryData) instance;\r\n    if (classOnly) {\r\n        return data.generatedClass;\r\n    }\r\n    Class[] argumentTypes = this.argumentTypes;\r\n    Object[] arguments = this.arguments;\r\n    if (argumentTypes == null) {\r\n        argumentTypes = Constants.EMPTY_CLASS_ARRAY;\r\n        arguments = null;\r\n    }\r\n    return data.newInstance(argumentTypes, arguments, callbacks);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#wrapCachedClass(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object wrapCachedClass(Class klass) {\r\n    Class[] argumentTypes = this.argumentTypes;\r\n    if (argumentTypes == null) {\r\n        argumentTypes = Constants.EMPTY_CLASS_ARRAY;\r\n    }\r\n    EnhancerFactoryData factoryData = new EnhancerFactoryData(klass, argumentTypes, classOnly);\r\n    Field factoryDataField = null;\r\n    try {\r\n        // The subsequent dance is performed just once for each class,\r\n        // so it does not matter much how fast it goes\r\n        factoryDataField = klass.getField(FACTORY_DATA_FIELD);\r\n        factoryDataField.set(null, factoryData);\r\n        Field callbackFilterField = klass.getDeclaredField(CALLBACK_FILTER_FIELD);\r\n        callbackFilterField.setAccessible(true);\r\n        callbackFilterField.set(null, this.filter);\r\n    } catch (NoSuchFieldException | IllegalAccessException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n    return new WeakReference<>(factoryData);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#wrapCachedClass(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#wrapCachedClass(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#unwrapCachedValue(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object unwrapCachedValue(Object cached) {\r\n    if (currentKey instanceof EnhancerKey) {\r\n        EnhancerFactoryData data = ((WeakReference<EnhancerFactoryData>) cached).get();\r\n        return data;\r\n    }\r\n    return super.unwrapCachedValue(cached);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#unwrapCachedValue(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#unwrapCachedValue(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#registerCallbacks(Class,Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Call this method to register the {@link Callback} array to use before\r\n * creating a new instance of the generated class via reflection. If you are using\r\n * an instance of <code>Enhancer</code> or the {@link Factory} interface to create\r\n * new instances, this method is unnecessary. Its primary use is for when you want to\r\n * cache and reuse a generated class yourself, and the generated class does\r\n * <i>not</i> implement the {@link Factory} interface.\r\n * <p>\r\n * Note that this method only registers the callbacks on the current thread.\r\n * If you want to register callbacks for instances created by multiple threads,\r\n * use {@link #registerStaticCallbacks}.\r\n * <p>\r\n * The registered callbacks are overwritten and subsequently cleared\r\n * when calling any of the <code>create</code> methods (such as\r\n * {@link #create}), or any {@link Factory} <code>newInstance</code> method.\r\n * Otherwise they are <i>not</i> cleared, and you should be careful to set them\r\n * back to <code>null</code> after creating new instances via reflection if\r\n * memory leakage is a concern.\r\n * @param generatedClass a class previously created by {@link Enhancer}\r\n * @param callbacks the array of callbacks to use when instances of the generated\r\n * class are created\r\n * @see #setUseFactory\r\n */\r\npublic static void registerCallbacks(Class generatedClass, Callback[] callbacks) {\r\n    setThreadCallbacks(generatedClass, callbacks);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#registerCallbacks(Class,Callback[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#registerStaticCallbacks(Class,Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Similar to {@link #registerCallbacks}, but suitable for use\r\n * when multiple threads will be creating instances of the generated class.\r\n * The thread-level callbacks will always override the static callbacks.\r\n * Static callbacks are never cleared.\r\n * @param generatedClass a class previously created by {@link Enhancer}\r\n * @param callbacks the array of callbacks to use when instances of the generated\r\n * class are created\r\n */\r\npublic static void registerStaticCallbacks(Class generatedClass, Callback[] callbacks) {\r\n    setCallbacksHelper(generatedClass, callbacks, SET_STATIC_CALLBACKS_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#registerStaticCallbacks(Class,Callback[])",
    "tailType": "method"
  }
]