[
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamHandler#commentInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#commentInternal(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#setDocumentLocator(Locator)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Ignored\r\n@Override\r\npublic void setDocumentLocator(Locator locator) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamHandler#setDocumentLocator(Locator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#setDocumentLocator(Locator)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#startEntity(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void startEntity(String name) throws SAXException ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamHandler#startEntity(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#startEntity(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#endEntity(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void endEntity(String name) throws SAXException ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamHandler#endEntity(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#endEntity(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#skippedEntityInternal(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void skippedEntityInternal(String name) throws XMLStreamException ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamHandler#skippedEntityInternal(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler#skippedEntityInternal(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamHandler",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxHandler",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.Location;\nimport javax.xml.stream.XMLStreamConstants;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.ext.Locator2;\nimport org.xml.sax.helpers.AttributesImpl;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * SAX {@code XMLReader} that reads from a StAX {@code XMLStreamReader}. Reads from an\n * {@code XMLStreamReader}, and calls the corresponding methods on the SAX callback interfaces.\n *\n * @author Arjen Poutsma\n * @since 3.0\n * @see XMLStreamReader\n * @see #setContentHandler(org.xml.sax.ContentHandler)\n * @see #setDTDHandler(org.xml.sax.DTDHandler)\n * @see #setEntityResolver(org.xml.sax.EntityResolver)\n * @see #setErrorHandler(org.xml.sax.ErrorHandler)\n */\nclass StaxStreamXMLReader extends AbstractStaxXMLReader {\n\n\tprivate static final String DEFAULT_XML_VERSION = \"1.0\";\n\n\tprivate final XMLStreamReader reader;\n\n\tprivate String xmlVersion = DEFAULT_XML_VERSION;\n\n\tprivate @Nullable String encoding;\n\n\n\t/**\n\t * Construct a new instance of the {@code StaxStreamXmlReader} that reads from the given\n\t * {@code XMLStreamReader}. The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT}\n\t * or {@code XMLStreamConstants.START_ELEMENT} state.\n\t * @param reader the {@code XMLEventReader} to read from\n\t * @throws IllegalStateException if the reader is not at the start of a document or element\n\t */\n\tStaxStreamXMLReader(XMLStreamReader reader) {\n\t\tint event = reader.getEventType();\n\t\tif (!(event == XMLStreamConstants.START_DOCUMENT || event == XMLStreamConstants.START_ELEMENT)) {\n\t\t\tthrow new IllegalStateException(\"XMLEventReader not at start of document or element\");\n\t\t}\n\t\tthis.reader = reader;\n\t}\n\n\n\t@Override\n\tprotected void parseInternal() throws SAXException, XMLStreamException {\n\t\tboolean documentStarted = false;\n\t\tboolean documentEnded = false;\n\t\tint elementDepth = 0;\n\t\tint eventType = this.reader.getEventType();\n\t\twhile (true) {\n\t\t\tif (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.END_DOCUMENT &&\n\t\t\t\t\t!documentStarted) {\n\t\t\t\thandleStartDocument();\n\t\t\t\tdocumentStarted = true;\n\t\t\t}\n\t\t\tswitch (eventType) {\n\t\t\t\tcase XMLStreamConstants.START_ELEMENT -> {\n\t\t\t\t\telementDepth++;\n\t\t\t\t\thandleStartElement();\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.END_ELEMENT -> {\n\t\t\t\t\telementDepth--;\n\t\t\t\t\tif (elementDepth >= 0) {\n\t\t\t\t\t\thandleEndElement();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.PROCESSING_INSTRUCTION -> handleProcessingInstruction();\n\t\t\t\tcase XMLStreamConstants.CHARACTERS, XMLStreamConstants.SPACE, XMLStreamConstants.CDATA -> handleCharacters();\n\t\t\t\tcase XMLStreamConstants.START_DOCUMENT -> {\n\t\t\t\t\thandleStartDocument();\n\t\t\t\t\tdocumentStarted = true;\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.END_DOCUMENT -> {\n\t\t\t\t\thandleEndDocument();\n\t\t\t\t\tdocumentEnded = true;\n\t\t\t\t}\n\t\t\t\tcase XMLStreamConstants.COMMENT -> handleComment();\n\t\t\t\tcase XMLStreamConstants.DTD -> handleDtd();\n\t\t\t\tcase XMLStreamConstants.ENTITY_REFERENCE -> handleEntityReference();\n\t\t\t}\n\t\t\tif (this.reader.hasNext() && elementDepth >= 0) {\n\t\t\t\teventType = this.reader.next();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!documentEnded) {\n\t\t\thandleEndDocument();\n\t\t}\n\t}\n\n\tprivate void handleStartDocument() throws SAXException {\n\t\tif (XMLStreamConstants.START_DOCUMENT == this.reader.getEventType()) {\n\t\t\tString xmlVersion = this.reader.getVersion();\n\t\t\tif (StringUtils.hasLength(xmlVersion)) {\n\t\t\t\tthis.xmlVersion = xmlVersion;\n\t\t\t}\n\t\t\tthis.encoding = this.reader.getCharacterEncodingScheme();\n\t\t}\n\n\t\tContentHandler contentHandler = getContentHandler();\n\t\tif (contentHandler != null) {\n\t\t\tfinal Location location = this.reader.getLocation();\n\t\t\tcontentHandler.setDocumentLocator(new Locator2() {\n\t\t\t\t@Override\n\t\t\t\tpublic int getColumnNumber() {\n\t\t\t\t\treturn (location != null ? location.getColumnNumber() : -1);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic int getLineNumber() {\n\t\t\t\t\treturn (location != null ? location.getLineNumber() : -1);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getPublicId() {\n\t\t\t\t\treturn (location != null ? location.getPublicId() : null);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getSystemId() {\n\t\t\t\t\treturn (location != null ? location.getSystemId() : null);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic String getXMLVersion() {\n\t\t\t\t\treturn xmlVersion;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getEncoding() {\n\t\t\t\t\treturn encoding;\n\t\t\t\t}\n\t\t\t});\n\t\t\tcontentHandler.startDocument();\n\t\t\tif (this.reader.standaloneSet()) {\n\t\t\t\tsetStandalone(this.reader.isStandalone());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void handleStartElement() throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tQName qName = this.reader.getName();\n\t\t\tif (hasNamespacesFeature()) {\n\t\t\t\tfor (int i = 0; i < this.reader.getNamespaceCount(); i++) {\n\t\t\t\t\tstartPrefixMapping(this.reader.getNamespacePrefix(i), this.reader.getNamespaceURI(i));\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < this.reader.getAttributeCount(); i++) {\n\t\t\t\t\tString prefix = this.reader.getAttributePrefix(i);\n\t\t\t\t\tString namespace = this.reader.getAttributeNamespace(i);\n\t\t\t\t\tif (StringUtils.hasLength(namespace)) {\n\t\t\t\t\t\tstartPrefixMapping(prefix, namespace);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgetContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(),\n\t\t\t\t\t\ttoQualifiedName(qName), getAttributes());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetContentHandler().startElement(\"\", \"\", toQualifiedName(qName), getAttributes());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void handleEndElement() throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tQName qName = this.reader.getName();\n\t\t\tif (hasNamespacesFeature()) {\n\t\t\t\tgetContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName));\n\t\t\t\tfor (int i = 0; i < this.reader.getNamespaceCount(); i++) {\n\t\t\t\t\tString prefix = this.reader.getNamespacePrefix(i);\n\t\t\t\t\tif (prefix == null) {\n\t\t\t\t\t\tprefix = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tendPrefixMapping(prefix);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetContentHandler().endElement(\"\", \"\", toQualifiedName(qName));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void handleCharacters() throws SAXException {\n\t\tif (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().startCDATA();\n\t\t}\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().characters(this.reader.getTextCharacters(),\n\t\t\t\t\tthis.reader.getTextStart(), this.reader.getTextLength());\n\t\t}\n\t\tif (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endCDATA();\n\t\t}\n\t}\n\n\tprivate void handleComment() throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().comment(this.reader.getTextCharacters(),\n\t\t\t\t\tthis.reader.getTextStart(), this.reader.getTextLength());\n\t\t}\n\t}\n\n\tprivate void handleDtd() throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tLocation location = this.reader.getLocation();\n\t\t\tgetLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\n\t\t}\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endDTD();\n\t\t}\n\t}\n\n\tprivate void handleEntityReference() throws SAXException {\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().startEntity(this.reader.getLocalName());\n\t\t}\n\t\tif (getLexicalHandler() != null) {\n\t\t\tgetLexicalHandler().endEntity(this.reader.getLocalName());\n\t\t}\n\t}\n\n\tprivate void handleEndDocument() throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().endDocument();\n\t\t}\n\t}\n\n\tprivate void handleProcessingInstruction() throws SAXException {\n\t\tif (getContentHandler() != null) {\n\t\t\tgetContentHandler().processingInstruction(this.reader.getPITarget(), this.reader.getPIData());\n\t\t}\n\t}\n\n\tprivate Attributes getAttributes() {\n\t\tAttributesImpl attributes = new AttributesImpl();\n\t\tfor (int i = 0; i < this.reader.getAttributeCount(); i++) {\n\t\t\tString namespace = this.reader.getAttributeNamespace(i);\n\t\t\tif (namespace == null || !hasNamespacesFeature()) {\n\t\t\t\tnamespace = \"\";\n\t\t\t}\n\t\t\tString type = this.reader.getAttributeType(i);\n\t\t\tif (type == null) {\n\t\t\t\ttype = \"CDATA\";\n\t\t\t}\n\t\t\tattributes.addAttribute(namespace, this.reader.getAttributeLocalName(i),\n\t\t\t\t\ttoQualifiedName(this.reader.getAttributeName(i)), type, this.reader.getAttributeValue(i));\n\t\t}\n\t\tif (hasNamespacePrefixesFeature()) {\n\t\t\tfor (int i = 0; i < this.reader.getNamespaceCount(); i++) {\n\t\t\t\tString prefix = this.reader.getNamespacePrefix(i);\n\t\t\t\tString namespaceUri = this.reader.getNamespaceURI(i);\n\t\t\t\tString qName;\n\t\t\t\tif (StringUtils.hasLength(prefix)) {\n\t\t\t\t\tqName = \"xmlns:\" + prefix;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tqName = \"xmlns\";\n\t\t\t\t}\n\t\t\t\tattributes.addAttribute(\"\", \"\", qName, \"CDATA\", namespaceUri);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#DEFAULT_XML_VERSION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader#DEFAULT_XML_VERSION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]