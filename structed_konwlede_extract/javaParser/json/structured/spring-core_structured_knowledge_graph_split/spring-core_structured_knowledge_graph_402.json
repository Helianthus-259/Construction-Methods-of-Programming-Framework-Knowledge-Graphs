[
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#inputFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#inputFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLInputFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#outputFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#outputFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLOutputFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid standard() throws Exception {\r\n    String xml = \"<foo><bar>baz</bar></foo>\";\r\n    List<XMLEvent> events = readEvents(xml);\r\n    ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\r\n    StringWriter resultWriter = new StringWriter();\r\n    XMLEventWriter writer = this.outputFactory.createXMLEventWriter(resultWriter);\r\n    writer.add(reader);\r\n    assertThat(XmlContent.from(resultWriter)).isSimilarTo(xml);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#standard()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getElementText() throws Exception {\r\n    String xml = \"<foo><bar>baz</bar></foo>\";\r\n    List<XMLEvent> events = readEvents(xml);\r\n    ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(START_DOCUMENT);\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(START_ELEMENT);\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(START_ELEMENT);\r\n    assertThat(reader.getElementText()).isEqualTo(\"baz\");\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(END_ELEMENT);\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(END_DOCUMENT);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.FieldVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementTextThrowsExceptionAtWrongPosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getElementTextThrowsExceptionAtWrongPosition() throws Exception {\r\n    String xml = \"<foo><bar>baz</bar></foo>\";\r\n    List<XMLEvent> events = readEvents(xml);\r\n    ListBasedXMLEventReader reader = new ListBasedXMLEventReader(events);\r\n    assertThat(reader.nextEvent().getEventType()).isEqualTo(START_DOCUMENT);\r\n    assertThatExceptionOfType(XMLStreamException.class).isThrownBy(reader::getElementText).withMessageStartingWith(\"Not at START_ELEMENT\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementTextThrowsExceptionAtWrongPosition()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#getElementTextThrowsExceptionAtWrongPosition()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests#readEvents(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<XMLEvent> readEvents(String xml) throws XMLStreamException {\r\n    XMLEventReader reader = this.inputFactory.createXMLEventReader(new StringReader(xml));\r\n    List<XMLEvent> events = new ArrayList<>();\r\n    while (reader.hasNext()) {\r\n        events.add(reader.nextEvent());\r\n    }\r\n    return events;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.ListBasedXMLEventReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.ListBasedXMLEventReaderTests#readEvents(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * A visitor to visit a Java field. The methods of this class must be called in the following order:\n * ( {@code visitAnnotation} | {@code visitTypeAnnotation} | {@code visitAttribute} )* {@code\n * visitEnd}.\n *\n * @author Eric Bruneton\n */\npublic abstract class FieldVisitor {\n\n  /**\n   * The ASM API version implemented by this visitor. The value of this field must be one of the\n   * {@code ASM}<i>x</i> values in {@link Opcodes}.\n   */\n  protected final int api;\n\n  /** The field visitor to which this visitor must delegate method calls. May be {@literal null}. */\n  protected FieldVisitor fv;\n\n  /**\n   * Constructs a new {@link FieldVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n   *     ASM}<i>x</i> values in {@link Opcodes}.\n   */\n  protected FieldVisitor(final int api) {\n    this(api, null);\n  }\n\n  /**\n   * Constructs a new {@link FieldVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n   *     ASM}<i>x</i> values in {@link Opcodes}.\n   * @param fieldVisitor the field visitor to which this visitor must delegate method calls. May be\n   *     null.\n   */\n  protected FieldVisitor(final int api, final FieldVisitor fieldVisitor) {\n    if (api != Opcodes.ASM9\n        && api != Opcodes.ASM8\n        && api != Opcodes.ASM7\n        && api != Opcodes.ASM6\n        && api != Opcodes.ASM5\n        && api != Opcodes.ASM4\n        && api != Opcodes.ASM10_EXPERIMENTAL) {\n      throw new IllegalArgumentException(\"Unsupported api \" + api);\n    }\n    // SPRING PATCH: no preview mode check for ASM experimental\n    this.api = api;\n    this.fv = fieldVisitor;\n  }\n\n  /**\n   * The field visitor to which this visitor must delegate method calls. May be {@literal null}.\n   *\n   * @return the field visitor to which this visitor must delegate method calls, or {@literal null}.\n   */\n  public FieldVisitor getDelegate() {\n    return fv;\n  }\n\n  /**\n   * Visits an annotation of the field.\n   *\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n    if (fv != null) {\n      return fv.visitAnnotation(descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits an annotation on the type of the field.\n   *\n   * @param typeRef a reference to the annotated type. The sort of this type reference must be\n   *     {@link TypeReference#FIELD}. See {@link TypeReference}.\n   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n   *     'typeRef' as a whole.\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    if (api < Opcodes.ASM5) {\n      throw new UnsupportedOperationException(\"This feature requires ASM5\");\n    }\n    if (fv != null) {\n      return fv.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits a non standard attribute of the field.\n   *\n   * @param attribute an attribute.\n   */\n  public void visitAttribute(final Attribute attribute) {\n    if (fv != null) {\n      fv.visitAttribute(attribute);\n    }\n  }\n\n  /**\n   * Visits the end of the field. This method, which is the last one to be called, is used to inform\n   * the visitor that all the annotations and attributes of the field have been visited.\n   */\n  public void visitEnd() {\n    if (fv != null) {\n      fv.visitEnd();\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldVisitor#api",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#api",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]