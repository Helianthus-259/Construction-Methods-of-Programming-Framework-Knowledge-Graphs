[
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#parameterNameDiscoverer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#parameterNameDiscoverer",
    "headType": "field",
    "relation": "haveType",
    "tail": "ParameterNameDiscoverer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    parameterNameDiscoverer = new StandardReflectionParameterNameDiscoverer();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#getParameterNamesOnInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getParameterNamesOnInterface() {\r\n    Method method = ReflectionUtils.findMethod(MessageService.class, \"sendMessage\", String.class);\r\n    String[] actualParams = parameterNameDiscoverer.getParameterNames(method);\r\n    assertThat(actualParams).isEqualTo(new String[] { \"message\" });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#getParameterNamesOnInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapBenchmark#synchronizedMap(SynchronizedMapBenchmarkData,Blackhole)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Benchmark\r\npublic void synchronizedMap(SynchronizedMapBenchmarkData data, Blackhole bh) {\r\n    for (String element : data.elements) {\r\n        WeakReference<String> value = data.map.get(element);\r\n        bh.consume(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StandardReflectionParameterNameDiscoverTests#getParameterNamesOnInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapBenchmark",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapBenchmark#synchronizedMap(SynchronizedMapBenchmarkData,Blackhole)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.MessageService",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapBenchmark#synchronizedMap(SynchronizedMapBenchmarkData,Blackhole)",
    "headType": "method",
    "relation": "use",
    "tail": "@Benchmark",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ConcurrentMapBenchmarkData",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ConcurrentMapBenchmarkData",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MessageService",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for StandardReflectionParameterNameDiscoverer\n *\n * @author Rob Winch\n */\nclass StandardReflectionParameterNameDiscoverTests {\n\n\tprivate ParameterNameDiscoverer parameterNameDiscoverer;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tparameterNameDiscoverer = new StandardReflectionParameterNameDiscoverer();\n\t}\n\n\t@Test\n\tvoid getParameterNamesOnInterface() {\n\t\tMethod method = ReflectionUtils.findMethod(MessageService.class,\"sendMessage\", String.class);\n\t\tString[] actualParams = parameterNameDiscoverer.getParameterNames(method);\n\t\tassertThat(actualParams).isEqualTo(new String[]{\"message\"});\n\t}\n\n\tpublic interface MessageService {\n\t\tvoid sendMessage(String message);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.MessageService#sendMessage(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "void sendMessage(String message);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MessageService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MessageService#sendMessage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentMapBenchmarkData",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\n\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.WeakHashMap;\nimport java.util.function.Function;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\n/**\n * Benchmarks for {@link ConcurrentReferenceHashMap}.\n * <p>This benchmark ensures that {@link ConcurrentReferenceHashMap} performs\n * better than {@link java.util.Collections#synchronizedMap(Map)} with\n * concurrent read operations.\n * <p>Typically this can be run with {@code \"java -jar spring-core-jmh.jar -t 30 -f 2 ConcurrentReferenceHashMapBenchmark\"}.\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class ConcurrentReferenceHashMapBenchmark {\n\n\t@Benchmark\n\tpublic void concurrentMap(ConcurrentMapBenchmarkData data, Blackhole bh) {\n\t\tfor (String element : data.elements) {\n\t\t\tWeakReference<String> value = data.map.get(element);\n\t\t\tbh.consume(value);\n\t\t}\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class ConcurrentMapBenchmarkData {\n\n\t\t@Param({\"500\"})\n\t\tpublic int capacity;\n\t\tprivate final Function<String, String> generator = key -> key + \"value\";\n\n\t\tpublic List<String> elements;\n\n\t\tpublic Map<String, WeakReference<String>> map;\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tthis.elements = new ArrayList<>(this.capacity);\n\t\t\tthis.map = new ConcurrentReferenceHashMap<>();\n\t\t\tRandom random = new Random();\n\t\t\trandom.ints(this.capacity).forEach(value -> {\n\t\t\t\tString element = String.valueOf(value);\n\t\t\t\tthis.elements.add(element);\n\t\t\t\tthis.map.put(element, new WeakReference<>(this.generator.apply(element)));\n\t\t\t});\n\t\t\tthis.elements.sort(String::compareTo);\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void synchronizedMap(SynchronizedMapBenchmarkData data, Blackhole bh) {\n\t\tfor (String element : data.elements) {\n\t\t\tWeakReference<String> value = data.map.get(element);\n\t\t\tbh.consume(value);\n\t\t}\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class SynchronizedMapBenchmarkData {\n\n\t\t@Param({\"500\"})\n\t\tpublic int capacity;\n\n\t\tprivate Function<String, String> generator = key -> key + \"value\";\n\n\t\tpublic List<String> elements;\n\n\t\tpublic Map<String, WeakReference<String>> map;\n\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tthis.elements = new ArrayList<>(this.capacity);\n\t\t\tthis.map = Collections.synchronizedMap(new WeakHashMap<>());\n\t\t\tRandom random = new Random();\n\t\t\trandom.ints(this.capacity).forEach(value -> {\n\t\t\t\tString element = String.valueOf(value);\n\t\t\t\tthis.elements.add(element);\n\t\t\t\tthis.map.put(element, new WeakReference<>(this.generator.apply(element)));\n\t\t\t});\n\t\t\tthis.elements.sort(String::compareTo);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ConcurrentMapBenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ConcurrentMapBenchmarkData#capacity",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ConcurrentMapBenchmarkData#capacity",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]