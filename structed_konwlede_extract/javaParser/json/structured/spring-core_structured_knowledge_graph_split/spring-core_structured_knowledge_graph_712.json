[
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.Handle;\nimport org.springframework.asm.Label;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.asm.TypePath;\nimport org.springframework.cglib.core.Constants;\n\n@SuppressWarnings(\"deprecation\")\npublic class MethodVisitorTee extends MethodVisitor {\n    private final MethodVisitor mv1;\n    private final MethodVisitor mv2;\n\n    public MethodVisitorTee(MethodVisitor mv1, MethodVisitor mv2) {\n\tsuper(Constants.ASM_API);\n\tthis.mv1 = mv1;\n        this.mv2 = mv2;\n    }\n\n    @Override\n\tpublic void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack) {\n        mv1.visitFrame(type, nLocal, local, nStack, stack);\n        mv2.visitFrame(type, nLocal, local, nStack, stack);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotationDefault() {\n        return AnnotationVisitorTee.getInstance(mv1.visitAnnotationDefault(),\n                                                mv2.visitAnnotationDefault());\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitAnnotation(desc, visible),\n                                                mv2.visitAnnotation(desc, visible));\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitParameterAnnotation(int parameter,\n                                                      String desc,\n                                                      boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitParameterAnnotation(parameter, desc, visible),\n                                                mv2.visitParameterAnnotation(parameter, desc, visible));\n    }\n\n    @Override\n\tpublic void visitAttribute(Attribute attr) {\n        mv1.visitAttribute(attr);\n        mv2.visitAttribute(attr);\n    }\n\n    @Override\n\tpublic void visitCode() {\n        mv1.visitCode();\n        mv2.visitCode();\n    }\n\n    @Override\n\tpublic void visitInsn(int opcode) {\n        mv1.visitInsn(opcode);\n        mv2.visitInsn(opcode);\n    }\n\n    @Override\n\tpublic void visitIntInsn(int opcode, int operand) {\n        mv1.visitIntInsn(opcode, operand);\n        mv2.visitIntInsn(opcode, operand);\n    }\n\n    @Override\n\tpublic void visitVarInsn(int opcode, int var) {\n        mv1.visitVarInsn(opcode, var);\n        mv2.visitVarInsn(opcode, var);\n    }\n\n    @Override\n\tpublic void visitTypeInsn(int opcode, String desc) {\n        mv1.visitTypeInsn(opcode, desc);\n        mv2.visitTypeInsn(opcode, desc);\n    }\n\n    @Override\n\tpublic void visitFieldInsn(int opcode, String owner, String name, String desc) {\n        mv1.visitFieldInsn(opcode, owner, name, desc);\n        mv2.visitFieldInsn(opcode, owner, name, desc);\n    }\n\n    @Override\n\tpublic void visitMethodInsn(int opcode, String owner, String name, String desc) {\n        mv1.visitMethodInsn(opcode, owner, name, desc);\n        mv2.visitMethodInsn(opcode, owner, name, desc);\n    }\n\n    @Override\n\tpublic void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n        mv1.visitMethodInsn(opcode, owner, name, desc, itf);\n        mv2.visitMethodInsn(opcode, owner, name, desc, itf);\n    }\n\n    @Override\n\tpublic void visitJumpInsn(int opcode, Label label) {\n        mv1.visitJumpInsn(opcode, label);\n        mv2.visitJumpInsn(opcode, label);\n    }\n\n    @Override\n\tpublic void visitLabel(Label label) {\n        mv1.visitLabel(label);\n        mv2.visitLabel(label);\n    }\n\n    @Override\n\tpublic void visitLdcInsn(Object cst) {\n        mv1.visitLdcInsn(cst);\n        mv2.visitLdcInsn(cst);\n    }\n\n    @Override\n\tpublic void visitIincInsn(int var, int increment) {\n        mv1.visitIincInsn(var, increment);\n        mv2.visitIincInsn(var, increment);\n    }\n\n    @Override\n\tpublic void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels) {\n        mv1.visitTableSwitchInsn(min, max, dflt, labels);\n        mv2.visitTableSwitchInsn(min, max, dflt, labels);\n    }\n\n    @Override\n\tpublic void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {\n        mv1.visitLookupSwitchInsn(dflt, keys, labels);\n        mv2.visitLookupSwitchInsn(dflt, keys, labels);\n    }\n\n    @Override\n\tpublic void visitMultiANewArrayInsn(String desc, int dims) {\n        mv1.visitMultiANewArrayInsn(desc, dims);\n        mv2.visitMultiANewArrayInsn(desc, dims);\n    }\n\n    @Override\n\tpublic void visitTryCatchBlock(Label start, Label end, Label handler, String type) {\n        mv1.visitTryCatchBlock(start, end, handler, type);\n        mv2.visitTryCatchBlock(start, end, handler, type);\n    }\n\n    @Override\n\tpublic void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index) {\n        mv1.visitLocalVariable(name, desc, signature, start, end, index);\n        mv2.visitLocalVariable(name, desc, signature, start, end, index);\n    }\n\n    @Override\n\tpublic void visitLineNumber(int line, Label start) {\n        mv1.visitLineNumber(line, start);\n        mv2.visitLineNumber(line, start);\n    }\n\n    @Override\n\tpublic void visitMaxs(int maxStack, int maxLocals) {\n        mv1.visitMaxs(maxStack, maxLocals);\n        mv2.visitMaxs(maxStack, maxLocals);\n    }\n\n    @Override\n\tpublic void visitEnd() {\n        mv1.visitEnd();\n        mv2.visitEnd();\n    }\n\n    @Override\n\tpublic void visitParameter(String name, int access) {\n        mv1.visitParameter(name, access);\n        mv2.visitParameter(name, access);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitTypeAnnotation(typeRef, typePath, desc, visible),\n                                                mv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\n    }\n\n    @Override\n\tpublic void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs) {\n        mv1.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);\n        mv2.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitInsnAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitInsnAnnotation(typeRef, typePath, desc, visible),\n                                                mv2.visitInsnAnnotation(typeRef, typePath, desc, visible));\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitTryCatchAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitTryCatchAnnotation(typeRef, typePath, desc, visible),\n                                                mv2.visitTryCatchAnnotation(typeRef, typePath, desc, visible));\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitLocalVariableAnnotation(int typeRef, TypePath typePath, Label[] start, Label[] end, int[] index, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(mv1.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, desc, visible),\n                                                mv2.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, desc, visible));\n    }\n}\n\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#mv1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#mv1",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#mv2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#mv2",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack) {\r\n    mv1.visitFrame(type, nLocal, local, nStack, stack);\r\n    mv2.visitFrame(type, nLocal, local, nStack, stack);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitFrame(int,int,Object[],int,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotationDefault() {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitAnnotationDefault(), mv2.visitAnnotationDefault());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotationDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitAnnotation(desc, visible), mv2.visitAnnotation(desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameterAnnotation(int,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitParameterAnnotation(int parameter, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitParameterAnnotation(parameter, desc, visible), mv2.visitParameterAnnotation(parameter, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitParameterAnnotation(int,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameterAnnotation(int,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    mv1.visitAttribute(attr);\r\n    mv2.visitAttribute(attr);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]