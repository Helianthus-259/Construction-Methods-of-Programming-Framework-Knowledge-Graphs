[
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForVariableThatResolvesToGenericArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComponentTypeForVariableThatResolvesToGenericArray() {\r\n    ResolvableType type = ResolvableType.forClass(ListOfGenericArray.class).asCollection().getGeneric();\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.getType()).isInstanceOf(TypeVariable.class);\r\n    assertThat(type.getComponentType().getType().toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getComponentTypeForVariableThatResolvesToGenericArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForVariableThatResolvesToGenericArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForNonArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComponentTypeForNonArray() {\r\n    ResolvableType type = ResolvableType.forClass(String.class);\r\n    assertThat(type.isArray()).isFalse();\r\n    assertThat(type.getComponentType()).isEqualTo(ResolvableType.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getComponentTypeForNonArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForNonArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asCollection() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).asCollection();\r\n    assertThat(type.resolve()).isEqualTo(Collection.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asMap() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsMap.class).asMap();\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.resolveGeneric(0)).isEqualTo(String.class);\r\n    assertThat(type.resolveGeneric(1)).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asFromInterface() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).as(List.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"java.util.List<E>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asFromInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInheritedInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asFromInheritedInterface() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).as(Collection.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"java.util.Collection<E>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asFromInheritedInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromInheritedInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#asFromSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asFromSuperType() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class).as(ArrayList.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"java.util.ArrayList<java.lang.CharSequence>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#asFromSuperType()",
    "tailType": "method"
  }
]