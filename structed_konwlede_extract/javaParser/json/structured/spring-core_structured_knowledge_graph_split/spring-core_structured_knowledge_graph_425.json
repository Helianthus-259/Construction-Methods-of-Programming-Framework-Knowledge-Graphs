[
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.TransformerUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.Properties;\n\nimport javax.xml.transform.ErrorListener;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.URIResolver;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link TransformerUtils}.\n *\n * @author Rick Evans\n * @author Arjen Poutsma\n */\nclass TransformerUtilsTests {\n\n\t@Test\n\tvoid enableIndentingSunnyDay() {\n\t\tTransformer transformer = new StubTransformer();\n\t\tTransformerUtils.enableIndenting(transformer);\n\t\tString indent = transformer.getOutputProperty(OutputKeys.INDENT);\n\t\tassertThat(indent).isNotNull();\n\t\tassertThat(indent).isEqualTo(\"yes\");\n\t\tString indentAmount = transformer.getOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\");\n\t\tassertThat(indentAmount).isNotNull();\n\t\tassertThat(indentAmount).isEqualTo(String.valueOf(TransformerUtils.DEFAULT_INDENT_AMOUNT));\n\t}\n\n\t@Test\n\tvoid enableIndentingSunnyDayWithCustomKosherIndentAmount() {\n\t\tfinal String indentAmountProperty = \"10\";\n\t\tTransformer transformer = new StubTransformer();\n\t\tTransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty));\n\t\tString indent = transformer.getOutputProperty(OutputKeys.INDENT);\n\t\tassertThat(indent).isNotNull();\n\t\tassertThat(indent).isEqualTo(\"yes\");\n\t\tString indentAmount = transformer.getOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\");\n\t\tassertThat(indentAmount).isNotNull();\n\t\tassertThat(indentAmount).isEqualTo(indentAmountProperty);\n\t}\n\n\t@Test\n\tvoid disableIndentingSunnyDay() {\n\t\tTransformer transformer = new StubTransformer();\n\t\tTransformerUtils.disableIndenting(transformer);\n\t\tString indent = transformer.getOutputProperty(OutputKeys.INDENT);\n\t\tassertThat(indent).isNotNull();\n\t\tassertThat(indent).isEqualTo(\"no\");\n\t}\n\n\t@Test\n\tvoid enableIndentingWithNullTransformer() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tTransformerUtils.enableIndenting(null));\n\t}\n\n\t@Test\n\tvoid disableIndentingWithNullTransformer() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tTransformerUtils.disableIndenting(null));\n\t}\n\n\t@Test\n\tvoid enableIndentingWithNegativeIndentAmount() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tTransformerUtils.enableIndenting(new StubTransformer(), -21938));\n\t}\n\n\t@Test\n\tvoid enableIndentingWithZeroIndentAmount() {\n\t\tTransformerUtils.enableIndenting(new StubTransformer(), 0);\n\t}\n\n\tprivate static class StubTransformer extends Transformer {\n\n\t\tprivate Properties outputProperties = new Properties();\n\n\t\t@Override\n\t\tpublic void transform(Source xmlSource, Result outputTarget) throws TransformerException {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setParameter(String name, Object value) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getParameter(String name) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void clearParameters() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setURIResolver(URIResolver resolver) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic URIResolver getURIResolver() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void setOutputProperties(Properties oformat) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic Properties getOutputProperties() {\n\t\t\treturn this.outputProperties;\n\t\t}\n\n\t\t@Override\n\t\tpublic void setOutputProperty(String name, String value) throws IllegalArgumentException {\n\t\t\tthis.outputProperties.setProperty(name, value);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getOutputProperty(String name) throws IllegalArgumentException {\n\t\t\treturn this.outputProperties.getProperty(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic void setErrorListener(ErrorListener listener) throws IllegalArgumentException {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic ErrorListener getErrorListener() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enableIndentingSunnyDay() {\r\n    Transformer transformer = new StubTransformer();\r\n    TransformerUtils.enableIndenting(transformer);\r\n    String indent = transformer.getOutputProperty(OutputKeys.INDENT);\r\n    assertThat(indent).isNotNull();\r\n    assertThat(indent).isEqualTo(\"yes\");\r\n    String indentAmount = transformer.getOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\");\r\n    assertThat(indentAmount).isNotNull();\r\n    assertThat(indentAmount).isEqualTo(String.valueOf(TransformerUtils.DEFAULT_INDENT_AMOUNT));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDay()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enableIndentingSunnyDayWithCustomKosherIndentAmount() {\r\n    final String indentAmountProperty = \"10\";\r\n    Transformer transformer = new StubTransformer();\r\n    TransformerUtils.enableIndenting(transformer, Integer.parseInt(indentAmountProperty));\r\n    String indent = transformer.getOutputProperty(OutputKeys.INDENT);\r\n    assertThat(indent).isNotNull();\r\n    assertThat(indent).isEqualTo(\"yes\");\r\n    String indentAmount = transformer.getOutputProperty(\"{http://xml.apache.org/xalan}indent-amount\");\r\n    assertThat(indentAmount).isNotNull();\r\n    assertThat(indentAmount).isEqualTo(indentAmountProperty);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingSunnyDayWithCustomKosherIndentAmount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid disableIndentingSunnyDay() {\r\n    Transformer transformer = new StubTransformer();\r\n    TransformerUtils.disableIndenting(transformer);\r\n    String indent = transformer.getOutputProperty(OutputKeys.INDENT);\r\n    assertThat(indent).isNotNull();\r\n    assertThat(indent).isEqualTo(\"no\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingSunnyDay()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enableIndentingWithNullTransformer() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TransformerUtils.enableIndenting(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNullTransformer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid disableIndentingWithNullTransformer() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TransformerUtils.disableIndenting(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#disableIndentingWithNullTransformer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enableIndentingWithNegativeIndentAmount() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TransformerUtils.enableIndenting(new StubTransformer(), -21938));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.TransformerUtilsTests#enableIndentingWithNegativeIndentAmount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]