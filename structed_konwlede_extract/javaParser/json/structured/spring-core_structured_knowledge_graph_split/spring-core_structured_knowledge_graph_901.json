[
  {
    "head": "org.springframework.core.convert.support.StringToPropertiesConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToPropertiesConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToPropertiesConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToRegexConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToRegexConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport kotlin.text.Regex;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts from a String to a Kotlin {@link Regex}.\n *\n * @author Stephane Nicoll\n * @author Sebastien Deleuze\n * @since 6.1\n */\nfinal class StringToRegexConverter implements Converter<String, Regex> {\n\n\t@Override\n\tpublic @Nullable Regex convert(String source) {\n\t\tif (source.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Regex(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToRegexConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Regex convert(String source) {\r\n    if (source.isEmpty()) {\r\n        return null;\r\n    }\r\n    return new Regex(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToRegexConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToRegexConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToRegexConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToRegexConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToTimeZoneConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToTimeZoneConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.TimeZone;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Convert a String to a {@link TimeZone}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 4.2\n */\nclass StringToTimeZoneConverter implements Converter<String, TimeZone> {\n\n\t@Override\n\tpublic TimeZone convert(String source) {\n\t\tif (StringUtils.hasText(source)) {\n\t\t\tsource = source.trim();\n\t\t}\n\t\treturn StringUtils.parseTimeZoneString(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToTimeZoneConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic TimeZone convert(String source) {\r\n    if (StringUtils.hasText(source)) {\r\n        source = source.trim();\r\n    }\r\n    return StringUtils.parseTimeZoneString(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToTimeZoneConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToTimeZoneConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToTimeZoneConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToUUIDConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToUUIDConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.UUID;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Converts from a String to a {@link java.util.UUID}.\n *\n * @author Phillip Webb\n * @since 3.2\n * @see UUID#fromString\n */\nfinal class StringToUUIDConverter implements Converter<String, UUID> {\n\n\t@Override\n\tpublic @Nullable UUID convert(String source) {\n\t\treturn (StringUtils.hasText(source) ? UUID.fromString(source.trim()) : null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToUUIDConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic UUID convert(String source) {\r\n    return (StringUtils.hasText(source) ? UUID.fromString(source.trim()) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToUUIDConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToUUIDConverter#convert(String)",
    "tailType": "method"
  }
]