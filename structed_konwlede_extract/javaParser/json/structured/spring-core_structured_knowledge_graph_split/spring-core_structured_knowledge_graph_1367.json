[
  {
    "head": "org.springframework.util.PlaceholderResolutionException#getValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a contextualized list of the resolution attempts that led to this\r\n * exception, where the first element is the value that generated this\r\n * exception.\r\n * @return the stack of values that led to this exception\r\n */\r\npublic List<String> getValues() {\r\n    return this.values;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PlaceholderResolutionException#getValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PlaceholderResolutionException",
    "headType": "class",
    "relation": "extend",
    "tail": "IllegalArgumentException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PropertiesPersister",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.Properties;\n\n/**\n * Strategy interface for persisting {@code java.util.Properties},\n * allowing for pluggable parsing strategies.\n *\n * <p>The default implementation is DefaultPropertiesPersister,\n * providing the native parsing of {@code java.util.Properties},\n * but allowing for reading from any Reader and writing to any Writer\n * (which allows to specify an encoding for a properties file).\n *\n * @author Juergen Hoeller\n * @since 10.03.2004\n * @see DefaultPropertiesPersister\n * @see java.util.Properties\n */\npublic interface PropertiesPersister {\n\n\t/**\n\t * Load properties from the given InputStream into the given\n\t * Properties object.\n\t * @param props the Properties object to load into\n\t * @param is the InputStream to load from\n\t * @throws IOException in case of I/O errors\n\t * @see java.util.Properties#load\n\t */\n\tvoid load(Properties props, InputStream is) throws IOException;\n\n\t/**\n\t * Load properties from the given Reader into the given\n\t * Properties object.\n\t * @param props the Properties object to load into\n\t * @param reader the Reader to load from\n\t * @throws IOException in case of I/O errors\n\t */\n\tvoid load(Properties props, Reader reader) throws IOException;\n\n\t/**\n\t * Write the contents of the given Properties object to the\n\t * given OutputStream.\n\t * @param props the Properties object to store\n\t * @param os the OutputStream to write to\n\t * @param header the description of the property list\n\t * @throws IOException in case of I/O errors\n\t * @see java.util.Properties#store\n\t */\n\tvoid store(Properties props, OutputStream os, String header) throws IOException;\n\n\t/**\n\t * Write the contents of the given Properties object to the\n\t * given Writer.\n\t * @param props the Properties object to store\n\t * @param writer the Writer to write to\n\t * @param header the description of the property list\n\t * @throws IOException in case of I/O errors\n\t */\n\tvoid store(Properties props, Writer writer, String header) throws IOException;\n\n\t/**\n\t * Load properties from the given XML InputStream into the\n\t * given Properties object.\n\t * @param props the Properties object to load into\n\t * @param is the InputStream to load from\n\t * @throws IOException in case of I/O errors\n\t * @see java.util.Properties#loadFromXML(java.io.InputStream)\n\t */\n\tvoid loadFromXml(Properties props, InputStream is) throws IOException;\n\n\t/**\n\t * Write the contents of the given Properties object to the\n\t * given XML OutputStream.\n\t * @param props the Properties object to store\n\t * @param os the OutputStream to write to\n\t * @param header the description of the property list\n\t * @throws IOException in case of I/O errors\n\t * @see java.util.Properties#storeToXML(java.io.OutputStream, String)\n\t */\n\tvoid storeToXml(Properties props, OutputStream os, String header) throws IOException;\n\n\t/**\n\t * Write the contents of the given Properties object to the\n\t * given XML OutputStream.\n\t * @param props the Properties object to store\n\t * @param os the OutputStream to write to\n\t * @param encoding the encoding to use\n\t * @param header the description of the property list\n\t * @throws IOException in case of I/O errors\n\t * @see java.util.Properties#storeToXML(java.io.OutputStream, String, String)\n\t */\n\tvoid storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#load(Properties,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load properties from the given InputStream into the given\r\n * Properties object.\r\n * @param props the Properties object to load into\r\n * @param is the InputStream to load from\r\n * @throws IOException in case of I/O errors\r\n * @see java.util.Properties#load\r\n */\r\nvoid load(Properties props, InputStream is) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#load(Properties,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#load(Properties,Reader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load properties from the given Reader into the given\r\n * Properties object.\r\n * @param props the Properties object to load into\r\n * @param reader the Reader to load from\r\n * @throws IOException in case of I/O errors\r\n */\r\nvoid load(Properties props, Reader reader) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#load(Properties,Reader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#store(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write the contents of the given Properties object to the\r\n * given OutputStream.\r\n * @param props the Properties object to store\r\n * @param os the OutputStream to write to\r\n * @param header the description of the property list\r\n * @throws IOException in case of I/O errors\r\n * @see java.util.Properties#store\r\n */\r\nvoid store(Properties props, OutputStream os, String header) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#store(Properties,OutputStream,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#store(Properties,Writer,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write the contents of the given Properties object to the\r\n * given Writer.\r\n * @param props the Properties object to store\r\n * @param writer the Writer to write to\r\n * @param header the description of the property list\r\n * @throws IOException in case of I/O errors\r\n */\r\nvoid store(Properties props, Writer writer, String header) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#store(Properties,Writer,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#loadFromXml(Properties,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load properties from the given XML InputStream into the\r\n * given Properties object.\r\n * @param props the Properties object to load into\r\n * @param is the InputStream to load from\r\n * @throws IOException in case of I/O errors\r\n * @see java.util.Properties#loadFromXML(java.io.InputStream)\r\n */\r\nvoid loadFromXml(Properties props, InputStream is) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#loadFromXml(Properties,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#storeToXml(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write the contents of the given Properties object to the\r\n * given XML OutputStream.\r\n * @param props the Properties object to store\r\n * @param os the OutputStream to write to\r\n * @param header the description of the property list\r\n * @throws IOException in case of I/O errors\r\n * @see java.util.Properties#storeToXML(java.io.OutputStream, String)\r\n */\r\nvoid storeToXml(Properties props, OutputStream os, String header) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#storeToXml(Properties,OutputStream,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PropertiesPersister#storeToXml(Properties,OutputStream,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write the contents of the given Properties object to the\r\n * given XML OutputStream.\r\n * @param props the Properties object to store\r\n * @param os the OutputStream to write to\r\n * @param encoding the encoding to use\r\n * @param header the description of the property list\r\n * @throws IOException in case of I/O errors\r\n * @see java.util.Properties#storeToXML(java.io.OutputStream, String, String)\r\n */\r\nvoid storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersister#storeToXml(Properties,OutputStream,String,String)",
    "tailType": "method"
  }
]