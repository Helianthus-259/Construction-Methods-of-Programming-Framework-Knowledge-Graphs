[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMethodAnnotationOnLeaf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMethodAnnotationOnLeaf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithAnnotationOnMethodInInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithAnnotationOnMethodInInterface() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"fromInterfaceImplementedByRoot\");\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithAnnotationOnMethodInInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithAnnotationOnMethodInInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithMetaAnnotationOnLeaf() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"metaAnnotatedOnLeaf\");\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnLeaf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithMetaMetaAnnotationOnLeaf() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"metaMetaAnnotatedOnLeaf\");\r\n    assertThat(method.getAnnotation(Component.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Component.class).getDistance()).isEqualTo(2);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Component.class).getDistance()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaMetaAnnotationOnLeaf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithAnnotationOnRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithAnnotationOnRoot() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"annotatedOnRoot\");\r\n    assertThat(method.getAnnotation(Order.class)).isNotNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithAnnotationOnRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithAnnotationOnRoot()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithMetaAnnotationOnRoot() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"metaAnnotatedOnRoot\");\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMetaAnnotationOnRoot()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithOnRootButOverridden()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithOnRootButOverridden() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"overrideWithoutNewAnnotation\");\r\n    assertThat(method.getAnnotation(Order.class)).isNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithOnRootButOverridden()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithOnRootButOverridden()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]