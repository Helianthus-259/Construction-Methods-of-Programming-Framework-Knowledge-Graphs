[
  {
    "head": "org.springframework.core.TestSourceProvider#target",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.TestSourceProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.TestSourceProvider#orderSource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.TestSourceProvider#orderSource",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.TestSourceProvider#getOrderSource(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object getOrderSource(Object obj) {\r\n    if (target.equals(obj)) {\r\n        return orderSource;\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TestSourceProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TestSourceProvider#getOrderSource(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TestSourceProvider#getOrderSource(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Test fixture for {@link ParameterizedTypeReference}.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n */\nclass ParameterizedTypeReferenceTests {\n\n\t@Test\n\tvoid stringTypeReference() {\n\t\tParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() {};\n\t\tassertThat(typeReference.getType()).isEqualTo(String.class);\n\t}\n\n\t@Test\n\tvoid mapTypeReference() throws Exception {\n\t\tType mapType = getClass().getMethod(\"mapMethod\").getGenericReturnType();\n\t\tParameterizedTypeReference<Map<Object,String>> typeReference = new ParameterizedTypeReference<>() {};\n\t\tassertThat(typeReference.getType()).isEqualTo(mapType);\n\t}\n\n\t@Test\n\tvoid listTypeReference() throws Exception {\n\t\tType listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\n\t\tParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<>() {};\n\t\tassertThat(typeReference.getType()).isEqualTo(listType);\n\t}\n\n\t@Test\n\tvoid reflectiveTypeReferenceWithSpecificDeclaration() throws Exception{\n\t\tType listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\n\t\tParameterizedTypeReference<List<String>> typeReference = ParameterizedTypeReference.forType(listType);\n\t\tassertThat(typeReference.getType()).isEqualTo(listType);\n\t}\n\n\t@Test\n\tvoid reflectiveTypeReferenceWithGenericDeclaration() throws Exception{\n\t\tType listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\n\t\tParameterizedTypeReference<?> typeReference = ParameterizedTypeReference.forType(listType);\n\t\tassertThat(typeReference.getType()).isEqualTo(listType);\n\t}\n\n\n\tpublic static Map<Object, String> mapMethod() {\n\t\treturn null;\n\t}\n\n\tpublic static List<String> listMethod() {\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#stringTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringTypeReference() {\r\n    ParameterizedTypeReference<String> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#stringTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#stringTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#mapTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapTypeReference() throws Exception {\r\n    Type mapType = getClass().getMethod(\"mapMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<Map<Object, String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(mapType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#mapTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#mapTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#listTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid listTypeReference() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = new ParameterizedTypeReference<>() ;;\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#listTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#listTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithSpecificDeclaration()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reflectiveTypeReferenceWithSpecificDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<List<String>> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithSpecificDeclaration()",
    "tailType": "method"
  }
]