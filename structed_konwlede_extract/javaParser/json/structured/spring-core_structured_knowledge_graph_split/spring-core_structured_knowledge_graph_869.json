[
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CollectionToArrayConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Collection.class, Object[].class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToArrayConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    Collection<?> sourceCollection = (Collection<?>) source;\r\n    TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\r\n    Assert.state(targetElementType != null, \"No target element type\");\r\n    Object array = Array.newInstance(targetElementType.getType(), sourceCollection.size());\r\n    int i = 0;\r\n    for (Object sourceElement : sourceCollection) {\r\n        Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetElementType);\r\n        Array.set(array, i++, targetElement);\r\n    }\r\n    return array;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.CollectionFactory;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\n\n/**\n * Converts from a Collection to another Collection.\n *\n * <p>First, creates a new Collection of the requested targetType with a size equal to the\n * size of the source Collection. Then copies each element in the source collection to the\n * target collection. Will perform an element conversion from the source collection's\n * parameterized type to the target collection's parameterized type if necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\nfinal class CollectionToCollectionConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic CollectionToCollectionConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Collection.class, Collection.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(\n\t\t\t\tsourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\tCollection<?> sourceCollection = (Collection<?>) source;\n\n\t\t// Shortcut if possible...\n\t\tboolean copyRequired = !targetType.getType().isInstance(source);\n\t\tif (!copyRequired && sourceCollection.isEmpty()) {\n\t\t\treturn source;\n\t\t}\n\t\tTypeDescriptor elementDesc = targetType.getElementTypeDescriptor();\n\t\tif (elementDesc == null && !copyRequired) {\n\t\t\treturn source;\n\t\t}\n\n\t\t// At this point, we need a collection copy in any case, even if just for finding out about element copies...\n\t\tCollection<Object> target = CollectionFactory.createCollection(targetType.getType(),\n\t\t\t\t(elementDesc != null ? elementDesc.getType() : null), sourceCollection.size());\n\n\t\tif (elementDesc == null) {\n\t\t\ttarget.addAll(sourceCollection);\n\t\t}\n\t\telse {\n\t\t\tfor (Object sourceElement : sourceCollection) {\n\t\t\t\tObject targetElement = this.conversionService.convert(sourceElement,\n\t\t\t\t\t\tsourceType.elementTypeDescriptor(sourceElement), elementDesc);\n\t\t\t\ttarget.add(targetElement);\n\t\t\t\tif (sourceElement != targetElement) {\n\t\t\t\t\tcopyRequired = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (copyRequired ? target : source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Collection.class, Collection.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]