[
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#objectToCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#objectToCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid stringToCollection() throws Exception {\r\n    List<List<String>> list = new ArrayList<>();\r\n    list.add(List.of(\"9,12\"));\r\n    list.add(List.of(\"37,23\"));\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    conversionService.addConverter(new StringToCollectionConverter(conversionService));\r\n    conversionService.addConverter(new ObjectToCollectionConverter(conversionService));\r\n    conversionService.addConverter(new CollectionToObjectConverter(conversionService));\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(list);\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"objectToCollection\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType);\r\n    assertThat(result).satisfiesExactly(zero -> assertThat(zero.get(0)).containsExactly(9, 12), one -> assertThat(one.get(0)).containsExactly(37, 23));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#stringToCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertEmptyVector_shouldReturnEmptyArrayList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertEmptyVector_shouldReturnEmptyArrayList() {\r\n    Vector<String> vector = new Vector<>();\r\n    vector.add(\"Element\");\r\n    testCollectionConversionToArrayList(vector);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertEmptyVector_shouldReturnEmptyArrayList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertEmptyVector_shouldReturnEmptyArrayList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertNonEmptyVector_shouldReturnNonEmptyArrayList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNonEmptyVector_shouldReturnNonEmptyArrayList() {\r\n    Vector<String> vector = new Vector<>();\r\n    vector.add(\"Element\");\r\n    testCollectionConversionToArrayList(vector);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertNonEmptyVector_shouldReturnNonEmptyArrayList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#convertNonEmptyVector_shouldReturnNonEmptyArrayList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#collectionsEmptyList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionsEmptyList() throws Exception {\r\n    CollectionToCollectionConverter converter = new CollectionToCollectionConverter(new GenericConversionService());\r\n    TypeDescriptor type = new TypeDescriptor(getClass().getField(\"list\"));\r\n    converter.convert(list, type, TypeDescriptor.valueOf(Class.forName(\"java.util.Collections$EmptyList\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#collectionsEmptyList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#collectionsEmptyList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#testCollectionConversionToArrayList(Collection<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"rawtypes\")\r\nprivate void testCollectionConversionToArrayList(Collection<String> aSource) {\r\n    Object myConverted = (new CollectionToCollectionConverter(new GenericConversionService())).convert(aSource, TypeDescriptor.forObject(aSource), TypeDescriptor.forObject(new ArrayList()));\r\n    boolean condition = myConverted instanceof ArrayList<?>;\r\n    assertThat(condition).isTrue();\r\n    assertThat(((ArrayList<?>) myConverted)).hasSameSizeAs(aSource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#testCollectionConversionToArrayList(Collection<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#testCollectionConversionToArrayList(Collection<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#listToCollectionNoCopyRequired()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid listToCollectionNoCopyRequired() throws NoSuchFieldException {\r\n    List<?> input = new ArrayList<>(Arrays.asList(\"foo\", \"bar\"));\r\n    assertThat(conversionService.convert(input, new TypeDescriptor(getClass().getField(\"wildcardCollection\")))).isSameAs(input);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverterTests#listToCollectionNoCopyRequired()",
    "tailType": "method"
  }
]