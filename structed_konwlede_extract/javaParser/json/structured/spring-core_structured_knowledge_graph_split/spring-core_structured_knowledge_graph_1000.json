[
  {
    "head": "org.springframework.core.io.buffer.JettyByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyByteBufferIterator#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyByteBufferIterator#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\nimport org.eclipse.jetty.io.Content;\n\n/**\n * Implementation of the {@code DataBufferFactory} interface that creates\n * {@link JettyDataBuffer} instances.\n *\n * @author Arjen Poutsma\n * @since 6.2\n */\npublic class JettyDataBufferFactory implements DataBufferFactory {\n\n\tprivate final DefaultDataBufferFactory delegate;\n\n\n\t/**\n\t * Creates a new {@code JettyDataBufferFactory} with default settings.\n\t */\n\tpublic JettyDataBufferFactory() {\n\t\tthis(false);\n\t}\n\n\t/**\n\t * Creates a new {@code JettyDataBufferFactory}, indicating whether direct\n\t * buffers should be created by {@link #allocateBuffer()} and\n\t * {@link #allocateBuffer(int)}.\n\t * @param preferDirect {@code true} if direct buffers are to be preferred;\n\t * {@code false} otherwise\n\t */\n\tpublic JettyDataBufferFactory(boolean preferDirect) {\n\t\tthis(preferDirect, DefaultDataBufferFactory.DEFAULT_INITIAL_CAPACITY);\n\t}\n\n\t/**\n\t * Creates a new {@code JettyDataBufferFactory}, indicating whether direct\n\t * buffers should be created by {@link #allocateBuffer()} and\n\t * {@link #allocateBuffer(int)}, and what the capacity is to be used for\n\t * {@link #allocateBuffer()}.\n\t * @param preferDirect {@code true} if direct buffers are to be preferred;\n\t * {@code false} otherwise\n\t */\n\tpublic JettyDataBufferFactory(boolean preferDirect, int defaultInitialCapacity) {\n\t\tthis.delegate = new DefaultDataBufferFactory(preferDirect, defaultInitialCapacity);\n\t}\n\n\n\t@Override\n\t@Deprecated\n\tpublic JettyDataBuffer allocateBuffer() {\n\t\tDefaultDataBuffer delegate = this.delegate.allocateBuffer();\n\t\treturn new JettyDataBuffer(this, delegate);\n\t}\n\n\t@Override\n\tpublic JettyDataBuffer allocateBuffer(int initialCapacity) {\n\t\tDefaultDataBuffer delegate = this.delegate.allocateBuffer(initialCapacity);\n\t\treturn new JettyDataBuffer(this, delegate);\n\t}\n\n\t@Override\n\tpublic JettyDataBuffer wrap(ByteBuffer byteBuffer) {\n\t\tDefaultDataBuffer delegate = this.delegate.wrap(byteBuffer);\n\t\treturn new JettyDataBuffer(this, delegate);\n\t}\n\n\t@Override\n\tpublic JettyDataBuffer wrap(byte[] bytes) {\n\t\tDefaultDataBuffer delegate = this.delegate.wrap(bytes);\n\t\treturn new JettyDataBuffer(this, delegate);\n\t}\n\n\tpublic JettyDataBuffer wrap(Content.Chunk chunk) {\n\t\tByteBuffer byteBuffer = chunk.getByteBuffer();\n\t\tDefaultDataBuffer delegate = this.delegate.wrap(byteBuffer);\n\t\treturn new JettyDataBuffer(this, delegate, chunk);\n\t}\n\n\t@Override\n\tpublic JettyDataBuffer join(List<? extends DataBuffer> dataBuffers) {\n\t\tDefaultDataBuffer delegate = this.delegate.join(dataBuffers);\n\t\treturn new JettyDataBuffer(this, delegate);\n\t}\n\n\t@Override\n\tpublic boolean isDirect() {\n\t\treturn this.delegate.isDirect();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic JettyDataBuffer allocateBuffer() {\r\n    DefaultDataBuffer delegate = this.delegate.allocateBuffer();\r\n    return new JettyDataBuffer(this, delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic JettyDataBuffer allocateBuffer(int initialCapacity) {\r\n    DefaultDataBuffer delegate = this.delegate.allocateBuffer(initialCapacity);\r\n    return new JettyDataBuffer(this, delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic JettyDataBuffer wrap(ByteBuffer byteBuffer) {\r\n    DefaultDataBuffer delegate = this.delegate.wrap(byteBuffer);\r\n    return new JettyDataBuffer(this, delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic JettyDataBuffer wrap(byte[] bytes) {\r\n    DefaultDataBuffer delegate = this.delegate.wrap(bytes);\r\n    return new JettyDataBuffer(this, delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]