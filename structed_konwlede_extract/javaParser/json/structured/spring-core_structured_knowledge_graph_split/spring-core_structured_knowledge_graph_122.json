[
  {
    "head": "org.springframework.util.AntPathMatcherTests#combineWithTwoFileExtensionPatterns()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid patternComparator() {\r\n    Comparator<String> comparator = pathMatcher.getPatternComparator(\"/hotels/new\");\r\n    assertThat(comparator.compare(null, null)).isEqualTo(0);\r\n    assertThat(comparator.compare(null, \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/new\", null)).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/new\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/*\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/{hotel}\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/new\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/{hotel}\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/booking\", \"/hotels/{hotel}/bookings/{booking}\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}\", \"/hotels/{hotel}/booking\")).isEqualTo(1);\r\n    // SPR-10550\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\", \"/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/**\", \"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/**\", \"/**\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/*\", \"/hotels/*/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/*/**\", \"/hotels/*\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/new\", \"/hotels/new.*\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/{hotel}.*\")).isEqualTo(2);\r\n    // SPR-6741\r\n    assertThat(comparator.compare(\"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\", \"/hotels/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"/hotels/**\", \"/hotels/{hotel}/bookings/{booking}/cutomers/{customer}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/foo/bar/**\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    assertThat(comparator.compare(\"/hotels/{hotel}\", \"/hotels/foo/bar/**\")).isEqualTo(-1);\r\n    // gh-23125\r\n    assertThat(comparator.compare(\"/hotels/*/bookings/**\", \"/hotels/**\")).isEqualTo(-11);\r\n    // SPR-8683\r\n    assertThat(comparator.compare(\"/**\", \"/hotels/{hotel}\")).isEqualTo(1);\r\n    // longer is better\r\n    assertThat(comparator.compare(\"/hotels\", \"/hotels2\")).isEqualTo(1);\r\n    // SPR-13139\r\n    assertThat(comparator.compare(\"*\", \"*/**\")).isEqualTo(-1);\r\n    assertThat(comparator.compare(\"*/**\", \"*\")).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#patternComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparatorWithDotSeparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid patternComparatorWithDotSeparator() {\r\n    Comparator<String> comparator = dotSeparatedPathMatcher.getPatternComparator(\"price.stock.spring\");\r\n    assertThat(comparator.compare(null, null)).isEqualTo(0);\r\n    assertThat(comparator.compare(\"price.stock.ticker/symbol\", \"price.stock.ticker/symbol\")).isEqualTo(0);\r\n    assertThat(comparator.compare(\"price.stock.**\", \"price.stock.ticker\")).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#patternComparatorWithDotSeparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparatorWithDotSeparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparatorSort()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid patternComparatorSort() {\r\n    Comparator<String> comparator = pathMatcher.getPatternComparator(\"/hotels/new\");\r\n    List<String> paths = new ArrayList<>(3);\r\n    paths.add(null);\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", null);\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(null);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", null);\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(\"/hotels/*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/**\");\r\n    paths.add(\"/hotels/*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/*\", \"/hotels/**\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/**\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/*\", \"/hotels/**\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/new\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/*\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    paths.add(\"/hotels/new\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new\", \"/hotels/{hotel}\", \"/hotels/*\");\r\n    paths.clear();\r\n    paths.add(\"/hotels/ne*\");\r\n    paths.add(\"/hotels/n*\");\r\n    Collections.shuffle(paths);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/ne*\", \"/hotels/n*\");\r\n    paths.clear();\r\n    comparator = pathMatcher.getPatternComparator(\"/hotels/new.html\");\r\n    paths.add(\"/hotels/new.*\");\r\n    paths.add(\"/hotels/{hotel}\");\r\n    Collections.shuffle(paths);\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/hotels/new.*\", \"/hotels/{hotel}\");\r\n    paths.clear();\r\n    comparator = pathMatcher.getPatternComparator(\"/web/endUser/action/login.html\");\r\n    paths.add(\"/**/login.*\");\r\n    paths.add(\"/**/endUser/action/login.*\");\r\n    paths.sort(comparator);\r\n    assertThat(paths).containsExactly(\"/**/endUser/action/login.*\", \"/**/login.*\");\r\n    paths.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#patternComparatorSort()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#patternComparatorSort()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#trimTokensOff()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-8687\r\n@Test\r\nvoid trimTokensOff() {\r\n    pathMatcher.setTrimTokens(false);\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/  sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/Group/  Sales/Members\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#trimTokensOff()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#trimTokensOff()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#caseInsensitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-13286\r\n@Test\r\nvoid caseInsensitive() {\r\n    pathMatcher.setCaseSensitive(false);\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/group/sales/members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/group/{groupName}/members\", \"/Group/Sales/Members\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/Group/{groupName}/Members\", \"/group/Sales/members\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#caseInsensitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#caseInsensitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#defaultCacheSetting()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultCacheSetting() {\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(20);\r\n    for (int i = 0; i < 65536; i++) {\r\n        pathMatcher.match(\"test\" + i, \"test\");\r\n    }\r\n    // Cache turned off because it went beyond the threshold\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#defaultCacheSetting()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#defaultCacheSetting()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid cachePatternsSetToTrue() {\r\n    pathMatcher.setCachePatterns(true);\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(20);\r\n    for (int i = 0; i < 65536; i++) {\r\n        pathMatcher.match(\"test\" + i, \"test\" + i);\r\n    }\r\n    // Cache keeps being alive due to the explicit cache setting\r\n    assertThat(pathMatcher.stringMatcherCache).hasSizeGreaterThan(65536);\r\n}",
    "tailType": "method_code"
  }
]