[
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return canConvertKey(sourceType, targetType) && canConvertValue(sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<Object, Object> sourceMap = (Map<Object, Object>) source;\r\n    // Shortcut if possible...\r\n    boolean copyRequired = !targetType.getType().isInstance(source);\r\n    if (!copyRequired && sourceMap.isEmpty()) {\r\n        return sourceMap;\r\n    }\r\n    TypeDescriptor keyDesc = targetType.getMapKeyTypeDescriptor();\r\n    TypeDescriptor valueDesc = targetType.getMapValueTypeDescriptor();\r\n    List<MapEntry> targetEntries = new ArrayList<>(sourceMap.size());\r\n    for (Map.Entry<Object, Object> entry : sourceMap.entrySet()) {\r\n        Object sourceKey = entry.getKey();\r\n        Object sourceValue = entry.getValue();\r\n        Object targetKey = convertKey(sourceKey, sourceType, keyDesc);\r\n        Object targetValue = convertValue(sourceValue, sourceType, valueDesc);\r\n        targetEntries.add(new MapEntry(targetKey, targetValue));\r\n        if (sourceKey != targetKey || sourceValue != targetValue) {\r\n            copyRequired = true;\r\n        }\r\n    }\r\n    if (!copyRequired) {\r\n        return sourceMap;\r\n    }\r\n    Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(), (keyDesc != null ? keyDesc.getType() : null), sourceMap.size());\r\n    for (MapEntry entry : targetEntries) {\r\n        entry.addToMap(targetMap);\r\n    }\r\n    return targetMap;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#canConvertKey(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "// internal helpers\r\nprivate boolean canConvertKey(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getMapKeyTypeDescriptor(), targetType.getMapKeyTypeDescriptor(), this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#canConvertKey(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#canConvertValue(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean canConvertValue(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getMapValueTypeDescriptor(), targetType.getMapValueTypeDescriptor(), this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#canConvertValue(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convertKey(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object convertKey(Object sourceKey, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {\r\n    if (targetType == null) {\r\n        return sourceKey;\r\n    }\r\n    return this.conversionService.convert(sourceKey, sourceType.getMapKeyTypeDescriptor(sourceKey), targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#convertKey(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convertKey(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convertValue(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object convertValue(Object sourceValue, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {\r\n    if (targetType == null) {\r\n        return sourceValue;\r\n    }\r\n    return this.conversionService.convert(sourceValue, sourceType.getMapValueTypeDescriptor(sourceValue), targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverter#convertValue(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverter#convertValue(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.MapEntry",
    "tailType": "class"
  }
]