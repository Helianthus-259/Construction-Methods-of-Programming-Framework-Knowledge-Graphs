[
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ExceptionTypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ExceptionTypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collection;\n\n/**\n * An {@link InstanceFilter} implementation that handles exception types. A type\n * will match against a given candidate if it is assignable to that candidate.\n *\n * @author Stephane Nicoll\n * @since 4.1\n */\npublic class ExceptionTypeFilter extends InstanceFilter<Class<? extends Throwable>> {\n\n\tpublic ExceptionTypeFilter(Collection<? extends Class<? extends Throwable>> includes,\n\t\t\tCollection<? extends Class<? extends Throwable>> excludes, boolean matchIfEmpty) {\n\n\t\tsuper(includes, excludes, matchIfEmpty);\n\t}\n\n\t@Override\n\tprotected boolean match(Class<? extends Throwable> instance, Class<? extends Throwable> candidate) {\n\t\treturn candidate.isAssignableFrom(instance);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ExceptionTypeFilter#match(Class<? extends Throwable>,Class<? extends Throwable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean match(Class<? extends Throwable> instance, Class<? extends Throwable> candidate) {\r\n    return candidate.isAssignableFrom(instance);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExceptionTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExceptionTypeFilter#match(Class<? extends Throwable>,Class<? extends Throwable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExceptionTypeFilter#match(Class<? extends Throwable>,Class<? extends Throwable>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExceptionTypeFilter",
    "headType": "class",
    "relation": "extend",
    "tail": "InstanceFilter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FastByteArrayOutputStream",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.charset.Charset;\nimport java.security.MessageDigest;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.Iterator;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A speedy alternative to {@link java.io.ByteArrayOutputStream}. Note that\n * this variant does <i>not</i> extend {@code ByteArrayOutputStream}, unlike\n * its sibling {@link ResizableByteArrayOutputStream}.\n *\n * <p>Unlike {@link java.io.ByteArrayOutputStream}, this implementation is backed\n * by a {@link java.util.ArrayDeque} of {@code byte[]} buffers instead of one\n * constantly resizing {@code byte[]}. It does not copy buffers when it gets expanded.\n *\n * <p>The initial buffer is only created when the stream is first written.\n * There is also no copying of the internal buffers if the stream's content is\n * extracted via the {@link #writeTo(OutputStream)} method.\n *\n * @author Craig Andrews\n * @author Juergen Hoeller\n * @since 4.2\n * @see #resize\n * @see ResizableByteArrayOutputStream\n */\npublic class FastByteArrayOutputStream extends OutputStream {\n\n\tprivate static final int DEFAULT_BLOCK_SIZE = 256;\n\n\n\t// The buffers used to store the content bytes\n\tprivate final Deque<byte[]> buffers = new ArrayDeque<>();\n\n\t// The size, in bytes, to use when allocating the first byte[]\n\tprivate final int initialBlockSize;\n\n\t// The size, in bytes, to use when allocating the next byte[]\n\tprivate int nextBlockSize = 0;\n\n\t// The number of bytes in previous buffers.\n\t// (The number of bytes in the current buffer is in 'index'.)\n\tprivate int alreadyBufferedSize = 0;\n\n\t// The index in the byte[] found at buffers.getLast() to be written next\n\tprivate int index = 0;\n\n\t// Is the stream closed?\n\tprivate boolean closed = false;\n\n\n\t/**\n\t * Create a new {@code FastByteArrayOutputStream} with the default initial\n\t * capacity of 256 bytes.\n\t */\n\tpublic FastByteArrayOutputStream() {\n\t\tthis(DEFAULT_BLOCK_SIZE);\n\t}\n\n\t/**\n\t * Create a new {@code FastByteArrayOutputStream} with the specified initial\n\t * capacity.\n\t * @param initialBlockSize the initial buffer size in bytes\n\t */\n\tpublic FastByteArrayOutputStream(int initialBlockSize) {\n\t\tAssert.isTrue(initialBlockSize > 0, \"Initial block size must be greater than 0\");\n\t\tthis.initialBlockSize = initialBlockSize;\n\t\tthis.nextBlockSize = initialBlockSize;\n\t}\n\n\n\t// Overridden methods\n\n\t@Override\n\tpublic void write(int datum) throws IOException {\n\t\tif (this.closed) {\n\t\t\tthrow new IOException(\"Stream closed\");\n\t\t}\n\t\tif (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {\n\t\t\taddBuffer(1);\n\t\t}\n\t\t// store the byte\n\t\tthis.buffers.getLast()[this.index++] = (byte) datum;\n\t}\n\n\t@Override\n\tpublic void write(byte[] data, int offset, int length) throws IOException {\n\t\tif (offset < 0 || offset + length > data.length || length < 0) {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t}\n\t\telse if (this.closed) {\n\t\t\tthrow new IOException(\"Stream closed\");\n\t\t}\n\t\telse {\n\t\t\tif (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {\n\t\t\t\taddBuffer(length);\n\t\t\t}\n\t\t\tif (this.index + length > this.buffers.getLast().length) {\n\t\t\t\tint pos = offset;\n\t\t\t\tdo {\n\t\t\t\t\tif (this.index == this.buffers.getLast().length) {\n\t\t\t\t\t\taddBuffer(length);\n\t\t\t\t\t}\n\t\t\t\t\tint copyLength = this.buffers.getLast().length - this.index;\n\t\t\t\t\tif (length < copyLength) {\n\t\t\t\t\t\tcopyLength = length;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.arraycopy(data, pos, this.buffers.getLast(), this.index, copyLength);\n\t\t\t\t\tpos += copyLength;\n\t\t\t\t\tthis.index += copyLength;\n\t\t\t\t\tlength -= copyLength;\n\t\t\t\t}\n\t\t\t\twhile (length > 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// copy in the sub-array\n\t\t\t\tSystem.arraycopy(data, offset, this.buffers.getLast(), this.index, length);\n\t\t\t\tthis.index += length;\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tthis.closed = true;\n\t}\n\n\t/**\n\t * Convert this stream's contents to a string by decoding the bytes using the\n\t * platform's default character set. The length of the new {@code String}\n\t * is a function of the character set, and hence may not be equal to the\n\t * size of the buffers.\n\t * <p>This method always replaces malformed-input and unmappable-character\n\t * sequences with the default replacement string for the platform's\n\t * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n\t * class should be used when more control over the decoding process is\n\t * required.\n\t * @return a String decoded from this stream's contents\n\t * @see #toString(Charset)\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn toString(Charset.defaultCharset());\n\t}\n\n\t/**\n\t * Convert this stream's contents to a string by decoding the bytes using the\n\t * specified {@link Charset}.\n\t * @param charset the {@link Charset} to use to decode the bytes\n\t * @return a String decoded from this stream's contents\n\t * @since 6.1.2\n\t * @see #toString()\n\t */\n\tpublic String toString(Charset charset) {\n\t\tif (size() == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (this.buffers.size() == 1) {\n\t\t\treturn new String(this.buffers.getFirst(), 0, this.index, charset);\n\t\t}\n\t\treturn new String(toByteArrayUnsafe(), charset);\n\t}\n\n\t// Custom methods\n\n\t/**\n\t * Return the number of bytes stored in this {@code FastByteArrayOutputStream}.\n\t */\n\tpublic int size() {\n\t\treturn (this.alreadyBufferedSize + this.index);\n\t}\n\n\t/**\n\t * Convert this stream's contents to a byte array and return the byte array.\n\t * <p>Also replaces the internal structures with the byte array to\n\t * conserve memory: if the byte array is being created anyway, we might\n\t * as well as use it. This approach also means that if this method is\n\t * called twice without any writes in the interim, the second call is\n\t * a no-op.\n\t * <p>This method is \"unsafe\" as it returns the internal buffer.\n\t * Callers should not modify the returned buffer.\n\t * @return the current contents of this stream as a byte array\n\t * @see #size()\n\t * @see #toByteArray()\n\t */\n\tpublic byte[] toByteArrayUnsafe() {\n\t\tint totalSize = size();\n\t\tif (totalSize == 0) {\n\t\t\treturn new byte[0];\n\t\t}\n\t\tresize(totalSize);\n\t\treturn this.buffers.getFirst();\n\t}\n\n\t/**\n\t * Create a newly allocated byte array.\n\t * <p>Its size is the current size of this output stream, and it will\n\t * contain the valid contents of the internal buffers.\n\t * @return the current contents of this stream as a byte array\n\t * @see #size()\n\t * @see #toByteArrayUnsafe()\n\t */\n\tpublic byte[] toByteArray() {\n\t\tbyte[] bytesUnsafe = toByteArrayUnsafe();\n\t\treturn bytesUnsafe.clone();\n\t}\n\n\t/**\n\t * Reset the contents of this {@code FastByteArrayOutputStream}.\n\t * <p>All currently accumulated output in the output stream is discarded.\n\t * The output stream can be used again.\n\t */\n\tpublic void reset() {\n\t\tthis.buffers.clear();\n\t\tthis.nextBlockSize = this.initialBlockSize;\n\t\tthis.closed = false;\n\t\tthis.index = 0;\n\t\tthis.alreadyBufferedSize = 0;\n\t}\n\n\t/**\n\t * Get an {@link InputStream} to retrieve the contents of this\n\t * {@code FastByteArrayOutputStream}.\n\t * <p>Note that if any methods are called on this {@code FastByteArrayOutputStream}\n\t * (including, but not limited to, any of the write methods, {@link #reset()},\n\t * {@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the\n\t * {@code InputStream}'s behavior is undefined.\n\t * @return {@code  InputStream} of the contents of this {@code FastByteArrayOutputStream}\n\t */\n\tpublic InputStream getInputStream() {\n\t\treturn new FastByteArrayInputStream(this);\n\t}\n\n\t/**\n\t * Write the contents of this {@code FastByteArrayOutputStream} to the given\n\t * {@link OutputStream}.\n\t * @param out the OutputStream to write to\n\t */\n\tpublic void writeTo(OutputStream out) throws IOException {\n\t\tIterator<byte[]> it = this.buffers.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tbyte[] bytes = it.next();\n\t\t\tif (it.hasNext()) {\n\t\t\t\tout.write(bytes, 0, bytes.length);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tout.write(bytes, 0, this.index);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resize the internal buffer size to the specified capacity.\n\t * @param targetCapacity the desired size of the buffer\n\t * @throws IllegalArgumentException if the given capacity is smaller than\n\t * the actual size of the content stored in the buffer already\n\t * @see FastByteArrayOutputStream#size()\n\t */\n\tpublic void resize(int targetCapacity) {\n\t\tAssert.isTrue(targetCapacity >= size(), \"New capacity must not be smaller than current size\");\n\t\tif (this.buffers.peekFirst() == null) {\n\t\t\tthis.nextBlockSize = targetCapacity - size();\n\t\t}\n\t\telse if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {\n\t\t\t// do nothing - already at the targetCapacity\n\t\t}\n\t\telse {\n\t\t\tint totalSize = size();\n\t\t\tbyte[] data = new byte[targetCapacity];\n\t\t\tint pos = 0;\n\t\t\tIterator<byte[]> it = this.buffers.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tbyte[] bytes = it.next();\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tSystem.arraycopy(bytes, 0, data, pos, bytes.length);\n\t\t\t\t\tpos += bytes.length;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.arraycopy(bytes, 0, data, pos, this.index);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.buffers.clear();\n\t\t\tthis.buffers.add(data);\n\t\t\tthis.index = totalSize;\n\t\t\tthis.alreadyBufferedSize = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Create a new buffer and store it in the ArrayDeque.\n\t * <p>Adds a new buffer that can store at least {@code minCapacity} bytes.\n\t */\n\tprivate void addBuffer(int minCapacity) {\n\t\tif (this.buffers.peekLast() != null) {\n\t\t\tthis.alreadyBufferedSize += this.index;\n\t\t\tthis.index = 0;\n\t\t}\n\t\tif (this.nextBlockSize < minCapacity) {\n\t\t\tthis.nextBlockSize = nextPowerOf2(minCapacity);\n\t\t}\n\t\tthis.buffers.add(new byte[this.nextBlockSize]);\n\t\tthis.nextBlockSize *= 2;  // block size doubles each time\n\t}\n\n\t/**\n\t * Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128).\n\t */\n\tprivate static int nextPowerOf2(int val) {\n\t\tval--;\n\t\tval = (val >> 1) | val;\n\t\tval = (val >> 2) | val;\n\t\tval = (val >> 4) | val;\n\t\tval = (val >> 8) | val;\n\t\tval = (val >> 16) | val;\n\t\tval++;\n\t\treturn val;\n\t}\n\n\n\t/**\n\t * An implementation of {@link java.io.InputStream} that reads from a given\n\t * {@code FastByteArrayOutputStream}.\n\t */\n\tprivate static final class FastByteArrayInputStream extends UpdateMessageDigestInputStream {\n\n\t\tprivate final FastByteArrayOutputStream fastByteArrayOutputStream;\n\n\t\tprivate final Iterator<byte[]> buffersIterator;\n\n\t\tprivate byte @Nullable [] currentBuffer;\n\n\t\tprivate int currentBufferLength = 0;\n\n\t\tprivate int nextIndexInCurrentBuffer = 0;\n\n\t\tprivate int totalBytesRead = 0;\n\n\t\t/**\n\t\t * Create a new {@code FastByteArrayInputStream} backed by the given\n\t\t * {@code FastByteArrayOutputStream}.\n\t\t */\n\t\tpublic FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {\n\t\t\tthis.fastByteArrayOutputStream = fastByteArrayOutputStream;\n\t\t\tthis.buffersIterator = fastByteArrayOutputStream.buffers.iterator();\n\t\t\tif (this.buffersIterator.hasNext()) {\n\t\t\t\tthis.currentBuffer = this.buffersIterator.next();\n\t\t\t\tif (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {\n\t\t\t\t\tthis.currentBufferLength = fastByteArrayOutputStream.index;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic int read() {\n\t\t\tif (this.currentBuffer == null) {\n\t\t\t\t// This stream doesn't have any data in it...\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\n\t\t\t\tthis.totalBytesRead++;\n\t\t\t\treturn this.currentBuffer[this.nextIndexInCurrentBuffer++] & 0xFF;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.buffersIterator.hasNext()) {\n\t\t\t\t\tthis.currentBuffer = this.buffersIterator.next();\n\t\t\t\t\tupdateCurrentBufferLength();\n\t\t\t\t\tthis.nextIndexInCurrentBuffer = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.currentBuffer = null;\n\t\t\t\t}\n\t\t\t\treturn read();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic int read(byte[] b) {\n\t\t\treturn read(b, 0, b.length);\n\t\t}\n\n\t\t@Override\n\t\tpublic int read(byte[] b, int off, int len) {\n\t\t\tif (off < 0 || len < 0 || len > b.length - off) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\telse if (len == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.currentBuffer == null) {\n\t\t\t\t\t// This stream doesn't have any data in it...\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\n\t\t\t\t\t\tint bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\n\t\t\t\t\t\tSystem.arraycopy(this.currentBuffer, this.nextIndexInCurrentBuffer, b, off, bytesToCopy);\n\t\t\t\t\t\tthis.totalBytesRead += bytesToCopy;\n\t\t\t\t\t\tthis.nextIndexInCurrentBuffer += bytesToCopy;\n\t\t\t\t\t\tint remaining = read(b, off + bytesToCopy, len - bytesToCopy);\n\t\t\t\t\t\treturn bytesToCopy + Math.max(remaining, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (this.buffersIterator.hasNext()) {\n\t\t\t\t\t\t\tthis.currentBuffer = this.buffersIterator.next();\n\t\t\t\t\t\t\tupdateCurrentBufferLength();\n\t\t\t\t\t\t\tthis.nextIndexInCurrentBuffer = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.currentBuffer = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn read(b, off, len);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic long skip(long n) throws IOException {\n\t\t\tif (n > Integer.MAX_VALUE) {\n\t\t\t\tthrow new IllegalArgumentException(\"n exceeds maximum (\" + Integer.MAX_VALUE + \"): \" + n);\n\t\t\t}\n\t\t\telse if (n == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse if (n < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"n must be 0 or greater: \" + n);\n\t\t\t}\n\t\t\tint len = (int) n;\n\t\t\tif (this.currentBuffer == null) {\n\t\t\t\t// This stream doesn't have any data in it...\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\n\t\t\t\t\tint bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\n\t\t\t\t\tthis.totalBytesRead += bytesToSkip;\n\t\t\t\t\tthis.nextIndexInCurrentBuffer += bytesToSkip;\n\t\t\t\t\treturn (bytesToSkip + skip(len - bytesToSkip));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.buffersIterator.hasNext()) {\n\t\t\t\t\t\tthis.currentBuffer = this.buffersIterator.next();\n\t\t\t\t\t\tupdateCurrentBufferLength();\n\t\t\t\t\t\tthis.nextIndexInCurrentBuffer = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.currentBuffer = null;\n\t\t\t\t\t}\n\t\t\t\t\treturn skip(len);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic int available() {\n\t\t\treturn (this.fastByteArrayOutputStream.size() - this.totalBytesRead);\n\t\t}\n\n\t\t/**\n\t\t * Update the message digest with the remaining bytes in this stream.\n\t\t * @param messageDigest the message digest to update\n\t\t */\n\t\t@Override\n\t\tpublic void updateMessageDigest(MessageDigest messageDigest) {\n\t\t\tupdateMessageDigest(messageDigest, available());\n\t\t}\n\n\t\t/**\n\t\t * Update the message digest with the next len bytes in this stream.\n\t\t * Avoids creating new byte arrays and use internal buffers for performance.\n\t\t * @param messageDigest the message digest to update\n\t\t * @param len how many bytes to read from this stream and use to update the message digest\n\t\t */\n\t\t@Override\n\t\tpublic void updateMessageDigest(MessageDigest messageDigest, int len) {\n\t\t\tif (this.currentBuffer == null) {\n\t\t\t\t// This stream doesn't have any data in it...\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (len == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (len < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"len must be 0 or greater: \" + len);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\n\t\t\t\t\tint bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\n\t\t\t\t\tmessageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy);\n\t\t\t\t\tthis.nextIndexInCurrentBuffer += bytesToCopy;\n\t\t\t\t\tupdateMessageDigest(messageDigest, len - bytesToCopy);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.buffersIterator.hasNext()) {\n\t\t\t\t\t\tthis.currentBuffer = this.buffersIterator.next();\n\t\t\t\t\t\tupdateCurrentBufferLength();\n\t\t\t\t\t\tthis.nextIndexInCurrentBuffer = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.currentBuffer = null;\n\t\t\t\t\t}\n\t\t\t\t\tupdateMessageDigest(messageDigest, len);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void updateCurrentBufferLength() {\n\t\t\tif (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {\n\t\t\t\tthis.currentBufferLength = this.fastByteArrayOutputStream.index;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0);\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#DEFAULT_BLOCK_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#DEFAULT_BLOCK_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#buffers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#buffers",
    "headType": "field",
    "relation": "haveType",
    "tail": "Deque<byte[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#initialBlockSize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#initialBlockSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#nextBlockSize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#nextBlockSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#alreadyBufferedSize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#alreadyBufferedSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#index",
    "tailType": "field"
  }
]