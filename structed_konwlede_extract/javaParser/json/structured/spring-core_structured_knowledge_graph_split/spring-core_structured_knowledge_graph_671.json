[
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.reflect;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.ProtectionDomain;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.AbstractClassGenerator;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.ReflectUtils;\nimport org.springframework.cglib.core.Signature;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nabstract public class FastClass\n{\n    private Class type;\n\n    protected FastClass() {\n        throw new Error(\"Using the FastClass empty constructor--please report to the cglib-devel mailing list\");\n    }\n\n    protected FastClass(Class type) {\n        this.type = type;\n    }\n\n    public static FastClass create(Class type) {\n\n        return create(type.getClassLoader(),type);\n\n    }\n    public static FastClass create(ClassLoader loader, Class type) {\n        Generator gen = new Generator();\n        gen.setType(type);\n        gen.setClassLoader(loader);\n        return gen.create();\n    }\n\n    public static class Generator extends AbstractClassGenerator\n    {\n        private static final Source SOURCE = new Source(FastClass.class.getName());\n        private Class type;\n\n        public Generator() {\n            super(SOURCE);\n        }\n\n        public void setType(Class type) {\n            this.type = type;\n        }\n\n        public FastClass create() {\n            setNamePrefix(type.getName());\n            return (FastClass)super.create(type.getName());\n        }\n\n        @Override\n\t\tprotected ClassLoader getDefaultClassLoader() {\n            return type.getClassLoader();\n        }\n\n        @Override\n\t\tprotected ProtectionDomain getProtectionDomain() {\n        \treturn ReflectUtils.getProtectionDomain(type);\n        }\n\n        @Override\n\t\tpublic void generateClass(ClassVisitor v) throws Exception {\n            new FastClassEmitter(v, getClassName(), type);\n        }\n\n        @Override\n\t\tprotected Object firstInstance(Class type) {\n            return ReflectUtils.newInstance(type,\n                                            new Class[]{ Class.class },\n                                            new Object[]{ this.type });\n        }\n\n        @Override\n\t\tprotected Object nextInstance(Object instance) {\n            return instance;\n        }\n    }\n\n    public Object invoke(String name, Class[] parameterTypes, Object obj, Object[] args) throws InvocationTargetException {\n        return invoke(getIndex(name, parameterTypes), obj, args);\n    }\n\n    public Object newInstance() throws InvocationTargetException {\n        return newInstance(getIndex(Constants.EMPTY_CLASS_ARRAY), null);\n    }\n\n    public Object newInstance(Class[] parameterTypes, Object[] args) throws InvocationTargetException {\n        return newInstance(getIndex(parameterTypes), args);\n    }\n\n    public FastMethod getMethod(Method method) {\n        return new FastMethod(this, method);\n    }\n\n    public FastConstructor getConstructor(Constructor constructor) {\n        return new FastConstructor(this, constructor);\n    }\n\n    public FastMethod getMethod(String name, Class[] parameterTypes) {\n        try {\n            return getMethod(type.getMethod(name, parameterTypes));\n        } catch (NoSuchMethodException e) {\n            throw new NoSuchMethodError(e.getMessage());\n        }\n    }\n\n    public FastConstructor getConstructor(Class[] parameterTypes) {\n        try {\n            return getConstructor(type.getConstructor(parameterTypes));\n        } catch (NoSuchMethodException e) {\n            throw new NoSuchMethodError(e.getMessage());\n        }\n    }\n\n    public String getName() {\n        return type.getName();\n    }\n\n    public Class getJavaClass() {\n        return type;\n    }\n\n    @Override\n\tpublic String toString() {\n        return type.toString();\n    }\n\n    @Override\n\tpublic int hashCode() {\n        return type.hashCode();\n    }\n\n    @Override\n\tpublic boolean equals(Object o) {\n        if (o == null || !(o instanceof FastClass that)) {\n            return false;\n        }\n        return type.equals(that.type);\n    }\n\n    /**\n     * Return the index of the matching method. The index may be used\n     * later to invoke the method with less overhead. If more than one\n     * method matches (i.e. they differ by return type only), one is\n     * chosen arbitrarily.\n     * @see #invoke(int, Object, Object[])\n     * @param name the method name\n     * @param parameterTypes the parameter array\n     * @return the index, or <code>-1</code> if none is found.\n     */\n    abstract public int getIndex(String name, Class[] parameterTypes);\n\n    /**\n     * Return the index of the matching constructor. The index may be used\n     * later to create a new instance with less overhead.\n     * @see #newInstance(int, Object[])\n     * @param parameterTypes the parameter array\n     * @return the constructor index, or <code>-1</code> if none is found.\n     */\n    abstract public int getIndex(Class[] parameterTypes);\n\n    /**\n     * Invoke the method with the specified index.\n     * @see getIndex(name, Class[])\n     * @param index the method index\n     * @param obj the object the underlying method is invoked from\n     * @param args the arguments used for the method call\n     * @throws java.lang.reflect.InvocationTargetException if the underlying method throws an exception\n     */\n    abstract public Object invoke(int index, Object obj, Object[] args) throws InvocationTargetException;\n\n    /**\n     * Create a new instance using the specified constructor index and arguments.\n     * @see getIndex(Class[])\n     * @param index the constructor index\n     * @param args the arguments passed to the constructor\n     * @throws java.lang.reflect.InvocationTargetException if the constructor throws an exception\n     */\n    abstract public Object newInstance(int index, Object[] args) throws InvocationTargetException;\n\n    abstract public int getIndex(Signature sig);\n\n    /**\n     * Returns the maximum method index for this class.\n     */\n    abstract public int getMaxIndex();\n\n    protected static String getSignatureWithoutReturnType(String name, Class[] parameterTypes) {\n\t\tStringBuilder sb = new StringBuilder();\n        sb.append(name);\n        sb.append('(');\n        for (Class parameterType : parameterTypes) {\n            sb.append(Type.getDescriptor(parameterType));\n        }\n        sb.append(')');\n        return sb.toString();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.Generator#SOURCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#SOURCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Source",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.Generator#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#setType(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setType(Class type) {\r\n    this.type = type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#setType(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public FastClass create() {\r\n    setNamePrefix(type.getName());\r\n    return (FastClass) super.create(type.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return type.getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    new FastClassEmitter(v, getClassName(), type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return ReflectUtils.newInstance(type, new Class[] { Class.class }, new Object[] { this.type });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#firstInstance(Class)",
    "tailType": "method"
  }
]