[
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsAttributes#toAttributes(ExecutableHint)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes#handleCategories(Map<String,Object>,Set<MemberCategory>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"removal\")\r\nprivate void handleCategories(Map<String, Object> attributes, Set<MemberCategory> categories) {\r\n    categories.stream().sorted().forEach(category -> {\r\n        switch(category) {\r\n            case ACCESS_PUBLIC_FIELDS, PUBLIC_FIELDS ->\r\n                attributes.put(\"allPublicFields\", true);\r\n            case ACCESS_DECLARED_FIELDS, DECLARED_FIELDS ->\r\n                attributes.put(\"allDeclaredFields\", true);\r\n            case INVOKE_PUBLIC_CONSTRUCTORS ->\r\n                attributes.put(\"allPublicConstructors\", true);\r\n            case INVOKE_DECLARED_CONSTRUCTORS ->\r\n                attributes.put(\"allDeclaredConstructors\", true);\r\n            case INVOKE_PUBLIC_METHODS ->\r\n                attributes.put(\"allPublicMethods\", true);\r\n            case INVOKE_DECLARED_METHODS ->\r\n                attributes.put(\"allDeclaredMethods\", true);\r\n            case PUBLIC_CLASSES ->\r\n                attributes.put(\"allPublicClasses\", true);\r\n            case DECLARED_CLASSES ->\r\n                attributes.put(\"allDeclaredClasses\", true);\r\n            case UNSAFE_ALLOCATED ->\r\n                attributes.put(\"unsafeAllocated\", true);\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsAttributes#handleCategories(Map<String,Object>,Set<MemberCategory>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes#handleCategories(Map<String,Object>,Set<MemberCategory>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes#addIfNotEmpty(Map<String,Object>,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addIfNotEmpty(Map<String, Object> attributes, String name, @Nullable Object value) {\r\n    if (value != null && (value instanceof Collection<?> collection && !collection.isEmpty())) {\r\n        attributes.put(name, value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsAttributes#addIfNotEmpty(Map<String,Object>,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes#toAttributes(JdkProxyHint)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Map<String, Object> toAttributes(JdkProxyHint hint) {\r\n    Map<String, Object> attributes = new LinkedHashMap<>();\r\n    handleCondition(attributes, hint);\r\n    attributes.put(\"type\", Map.of(\"proxy\", hint.getProxiedInterfaces()));\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsAttributes#toAttributes(JdkProxyHint)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * @author Arjen Poutsma\n */\nclass MultiToSingleValueMapAdapterTests {\n\n\tprivate LinkedMultiValueMap<String, String> delegate;\n\n\tprivate Map<String, String> adapter;\n\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tthis.delegate = new LinkedMultiValueMap<>();\n\t\tthis.delegate.add(\"foo\", \"bar\");\n\t\tthis.delegate.add(\"foo\", \"baz\");\n\t\tthis.delegate.add(\"qux\", \"quux\");\n\n\t\tthis.adapter = new MultiToSingleValueMapAdapter<>(this.delegate);\n\t}\n\n\t@Test\n\tvoid size() {\n\t\tassertThat(this.adapter.size()).isEqualTo(this.delegate.size()).isEqualTo(2);\n\t}\n\n\t@Test\n\tvoid isEmpty() {\n\t\tassertThat(this.adapter.isEmpty()).isFalse();\n\n\t\tthis.adapter = new MultiToSingleValueMapAdapter<>(new LinkedMultiValueMap<>());\n\t\tassertThat(this.adapter.isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid containsKey() {\n\t\tassertThat(this.adapter.containsKey(\"foo\")).isTrue();\n\t\tassertThat(this.adapter.containsKey(\"qux\")).isTrue();\n\t\tassertThat(this.adapter.containsKey(\"corge\")).isFalse();\n\t}\n\n\t@Test\n\tvoid containsValue() {\n\t\tassertThat(this.adapter.containsValue(\"bar\")).isTrue();\n\t\tassertThat(this.adapter.containsValue(\"quux\")).isTrue();\n\t\tassertThat(this.adapter.containsValue(\"corge\")).isFalse();\n\t}\n\n\t@Test\n\tvoid get() {\n\t\tassertThat(this.adapter.get(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(this.adapter.get(\"qux\")).isEqualTo(\"quux\");\n\t\tassertThat(this.adapter.get(\"corge\")).isNull();\n\t}\n\n\t@Test\n\tvoid put() {\n\t\tString result = this.adapter.put(\"foo\", \"bar\");\n\t\tassertThat(result).isEqualTo(\"bar\");\n\t\tassertThat(this.delegate.get(\"foo\")).containsExactly(\"bar\");\n\t}\n\n\t@Test\n\tvoid remove() {\n\t\tthis.adapter.remove(\"foo\");\n\t\tassertThat(this.adapter.containsKey(\"foo\")).isFalse();\n\t\tassertThat(this.delegate.containsKey(\"foo\")).isFalse();\n\t}\n\n\t@Test\n\tvoid putAll() {\n\t\tLinkedHashMap<String, String> map = new LinkedHashMap<>();\n\t\tmap.put(\"foo\", \"bar\");\n\t\tmap.put(\"qux\", null);\n\t\tthis.adapter.putAll(map);\n\t\tassertThat(this.adapter.get(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(this.adapter.get(\"qux\")).isNull();\n\n\t\tassertThat(this.delegate.get(\"foo\")).isEqualTo(List.of(\"bar\"));\n\t\tassertThat(this.adapter.get(\"qux\")).isNull();\n\t}\n\n\t@Test\n\tvoid clear() {\n\t\tthis.adapter.clear();\n\t\tassertThat(this.adapter).isEmpty();\n\t\tassertThat(this.delegate).isEmpty();\n\t}\n\n\t@Test\n\tvoid keySet() {\n\t\tassertThat(this.adapter.keySet()).containsExactly(\"foo\", \"qux\");\n\t}\n\n\t@Test\n\tvoid values() {\n\t\tassertThat(this.adapter.values()).containsExactly(\"bar\", \"quux\");\n\t}\n\n\t@Test\n\tvoid entrySet() {\n\t\tassertThat(this.adapter.entrySet()).containsExactly(entry(\"foo\", \"bar\"), entry(\"qux\", \"quux\"));\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "LinkedMultiValueMap<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#adapter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#adapter",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setUp() {\r\n    this.delegate = new LinkedMultiValueMap<>();\r\n    this.delegate.add(\"foo\", \"bar\");\r\n    this.delegate.add(\"foo\", \"baz\");\r\n    this.delegate.add(\"qux\", \"quux\");\r\n    this.adapter = new MultiToSingleValueMapAdapter<>(this.delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid size() {\r\n    assertThat(this.adapter.size()).isEqualTo(this.delegate.size()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#size()",
    "tailType": "method"
  }
]