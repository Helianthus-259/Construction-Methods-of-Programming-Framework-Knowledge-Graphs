[
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleDtd(DTD)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleDtd(DTD dtd) throws SAXException {\r\n    if (getLexicalHandler() != null) {\r\n        Location location = dtd.getLocation();\r\n        getLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());\r\n    }\r\n    if (getLexicalHandler() != null) {\r\n        getLexicalHandler().endDTD();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleDtd(DTD)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleEntityReference(EntityReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEntityReference(EntityReference reference) throws SAXException {\r\n    if (getLexicalHandler() != null) {\r\n        getLexicalHandler().startEntity(reference.getName());\r\n    }\r\n    if (getLexicalHandler() != null) {\r\n        getLexicalHandler().endEntity(reference.getName());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleEntityReference(EntityReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#getAttributes(StartElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Attributes getAttributes(StartElement event) {\r\n    AttributesImpl attributes = new AttributesImpl();\r\n    for (Iterator i = event.getAttributes(); i.hasNext(); ) {\r\n        Attribute attribute = (Attribute) i.next();\r\n        QName qName = attribute.getName();\r\n        String namespace = qName.getNamespaceURI();\r\n        if (namespace == null || !hasNamespacesFeature()) {\r\n            namespace = \"\";\r\n        }\r\n        String type = attribute.getDTDType();\r\n        if (type == null) {\r\n            type = \"CDATA\";\r\n        }\r\n        attributes.addAttribute(namespace, qName.getLocalPart(), toQualifiedName(qName), type, attribute.getValue());\r\n    }\r\n    if (hasNamespacePrefixesFeature()) {\r\n        for (Iterator i = event.getNamespaces(); i.hasNext(); ) {\r\n            Namespace namespace = (Namespace) i.next();\r\n            String prefix = namespace.getPrefix();\r\n            String namespaceUri = namespace.getNamespaceURI();\r\n            String qName;\r\n            if (StringUtils.hasLength(prefix)) {\r\n                qName = \"xmlns:\" + prefix;\r\n            } else {\r\n                qName = \"xmlns\";\r\n            }\r\n            attributes.addAttribute(\"\", \"\", qName, \"CDATA\", namespaceUri);\r\n        }\r\n    }\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#getAttributes(StartElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxXMLReader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxResult",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.sax.SAXResult;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.ext.LexicalHandler;\n\n/**\n * Implementation of the {@code Result} tagging interface for StAX writers. Can be constructed with\n * an {@code XMLEventConsumer} or an {@code XMLStreamWriter}.\n *\n * <p>This class is necessary because there is no implementation of {@code Source} for StaxReaders\n * in JAXP 1.3. There is a {@code StAXResult} in JAXP 1.4 (JDK 1.6), but this class is kept around\n * for backwards compatibility reasons.\n *\n * <p>Even though {@code StaxResult} extends from {@code SAXResult}, calling the methods of\n * {@code SAXResult} is <strong>not supported</strong>. In general, the only supported operation\n * on this class is to use the {@code ContentHandler} obtained via {@link #getHandler()} to parse an\n * input source using an {@code XMLReader}. Calling {@link #setHandler(org.xml.sax.ContentHandler)}\n * or {@link #setLexicalHandler(org.xml.sax.ext.LexicalHandler)} will result in\n * {@code UnsupportedOperationException}s.\n *\n * @author Arjen Poutsma\n * @since 3.0\n * @see XMLEventWriter\n * @see XMLStreamWriter\n * @see javax.xml.transform.Transformer\n */\nclass StaxResult extends SAXResult {\n\n\tprivate @Nullable XMLEventWriter eventWriter;\n\n\tprivate @Nullable XMLStreamWriter streamWriter;\n\n\n\t/**\n\t * Construct a new instance of the {@code StaxResult} with the specified {@code XMLEventWriter}.\n\t * @param eventWriter the {@code XMLEventWriter} to write to\n\t */\n\tpublic StaxResult(XMLEventWriter eventWriter) {\n\t\tStaxEventHandler handler = new StaxEventHandler(eventWriter);\n\t\tsuper.setHandler(handler);\n\t\tsuper.setLexicalHandler(handler);\n\t\tthis.eventWriter = eventWriter;\n\t}\n\n\t/**\n\t * Construct a new instance of the {@code StaxResult} with the specified {@code XMLStreamWriter}.\n\t * @param streamWriter the {@code XMLStreamWriter} to write to\n\t */\n\tpublic StaxResult(XMLStreamWriter streamWriter) {\n\t\tStaxStreamHandler handler = new StaxStreamHandler(streamWriter);\n\t\tsuper.setHandler(handler);\n\t\tsuper.setLexicalHandler(handler);\n\t\tthis.streamWriter = streamWriter;\n\t}\n\n\n\t/**\n\t * Return the {@code XMLEventWriter} used by this {@code StaxResult}.\n\t * <p>If this {@code StaxResult} was created with an {@code XMLStreamWriter},\n\t * the result will be {@code null}.\n\t * @return the StAX event writer used by this result\n\t * @see #StaxResult(javax.xml.stream.XMLEventWriter)\n\t */\n\tpublic @Nullable XMLEventWriter getXMLEventWriter() {\n\t\treturn this.eventWriter;\n\t}\n\n\t/**\n\t * Return the {@code XMLStreamWriter} used by this {@code StaxResult}.\n\t * <p>If this {@code StaxResult} was created with an {@code XMLEventConsumer},\n\t * the result will be {@code null}.\n\t * @return the StAX stream writer used by this result\n\t * @see #StaxResult(javax.xml.stream.XMLStreamWriter)\n\t */\n\tpublic @Nullable XMLStreamWriter getXMLStreamWriter() {\n\t\treturn this.streamWriter;\n\t}\n\n\n\t/**\n\t * Throws an {@code UnsupportedOperationException}.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setHandler(ContentHandler handler) {\n\t\tthrow new UnsupportedOperationException(\"setHandler is not supported\");\n\t}\n\n\t/**\n\t * Throws an {@code UnsupportedOperationException}.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setLexicalHandler(LexicalHandler handler) {\n\t\tthrow new UnsupportedOperationException(\"setLexicalHandler is not supported\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxResult#eventWriter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#eventWriter",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLEventWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxResult#streamWriter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#streamWriter",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLStreamWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#getXMLEventWriter()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code XMLEventWriter} used by this {@code StaxResult}.\r\n * <p>If this {@code StaxResult} was created with an {@code XMLStreamWriter},\r\n * the result will be {@code null}.\r\n * @return the StAX event writer used by this result\r\n * @see #StaxResult(javax.xml.stream.XMLEventWriter)\r\n */\r\n@Nullable\r\npublic XMLEventWriter getXMLEventWriter() {\r\n    return this.eventWriter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResult#getXMLEventWriter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#getXMLEventWriter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#getXMLStreamWriter()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code XMLStreamWriter} used by this {@code StaxResult}.\r\n * <p>If this {@code StaxResult} was created with an {@code XMLEventConsumer},\r\n * the result will be {@code null}.\r\n * @return the StAX stream writer used by this result\r\n * @see #StaxResult(javax.xml.stream.XMLStreamWriter)\r\n */\r\n@Nullable\r\npublic XMLStreamWriter getXMLStreamWriter() {\r\n    return this.streamWriter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResult#getXMLStreamWriter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#getXMLStreamWriter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]