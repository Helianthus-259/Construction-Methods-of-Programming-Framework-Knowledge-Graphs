[
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.Generator#CONSTRUCTOR_DELEGATE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#CONSTRUCTOR_DELEGATE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.Generator#iface",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#iface",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.reflect.Generator#targetClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#targetClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setInterface(Class iface) {\r\n    this.iface = iface;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#setInterface(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setTargetClass(Class targetClass) {\r\n    this.targetClass = targetClass;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#setTargetClass(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public ConstructorDelegate create() {\r\n    setNamePrefix(targetClass.getName());\r\n    Object key = KEY_FACTORY.newInstance(iface.getName(), targetClass.getName());\r\n    return (ConstructorDelegate) super.create(key);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return targetClass.getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(targetClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    setNamePrefix(targetClass.getName());\r\n    final Method newInstance = ReflectUtils.findNewInstance(iface);\r\n    if (!newInstance.getReturnType().isAssignableFrom(targetClass)) {\r\n        throw new IllegalArgumentException(\"incompatible return type\");\r\n    }\r\n    final Constructor constructor;\r\n    try {\r\n        constructor = targetClass.getDeclaredConstructor(newInstance.getParameterTypes());\r\n    } catch (NoSuchMethodException e) {\r\n        throw new IllegalArgumentException(\"interface does not match any known constructor\");\r\n    }\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), CONSTRUCTOR_DELEGATE, new Type[] { Type.getType(iface) }, Constants.SOURCE_FILE);\r\n    Type declaring = Type.getType(constructor.getDeclaringClass());\r\n    EmitUtils.null_constructor(ce);\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, ReflectUtils.getSignature(newInstance), ReflectUtils.getExceptionTypes(newInstance));\r\n    e.new_instance(declaring);\r\n    e.dup();\r\n    e.load_args();\r\n    e.invoke_constructor(declaring, ReflectUtils.getSignature(constructor));\r\n    e.return_value();\r\n    e.end_method();\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  }
]