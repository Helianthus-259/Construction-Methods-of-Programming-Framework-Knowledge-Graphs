[
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.NumberUtils#LONG_MAX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.NumberUtils#LONG_MAX",
    "headType": "field",
    "relation": "haveType",
    "tail": "BigInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.NumberUtils#STANDARD_NUMBER_TYPES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.NumberUtils#STANDARD_NUMBER_TYPES",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.NumberUtils#convertNumberToTargetClass(Number,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given number into an instance of the given target class.\r\n * @param number the number to convert\r\n * @param targetClass the target class to convert to\r\n * @return the converted number\r\n * @throws IllegalArgumentException if the target class is not supported\r\n * (i.e. not a standard Number subclass as included in the JDK)\r\n * @see java.lang.Byte\r\n * @see java.lang.Short\r\n * @see java.lang.Integer\r\n * @see java.lang.Long\r\n * @see java.math.BigInteger\r\n * @see java.lang.Float\r\n * @see java.lang.Double\r\n * @see java.math.BigDecimal\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException {\r\n    Assert.notNull(number, \"Number must not be null\");\r\n    Assert.notNull(targetClass, \"Target class must not be null\");\r\n    if (targetClass.isInstance(number)) {\r\n        return (T) number;\r\n    } else if (Byte.class == targetClass) {\r\n        long value = checkedLongValue(number, targetClass);\r\n        if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {\r\n            raiseOverflowException(number, targetClass);\r\n        }\r\n        return (T) Byte.valueOf(number.byteValue());\r\n    } else if (Short.class == targetClass) {\r\n        long value = checkedLongValue(number, targetClass);\r\n        if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\r\n            raiseOverflowException(number, targetClass);\r\n        }\r\n        return (T) Short.valueOf(number.shortValue());\r\n    } else if (Integer.class == targetClass) {\r\n        long value = checkedLongValue(number, targetClass);\r\n        if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {\r\n            raiseOverflowException(number, targetClass);\r\n        }\r\n        return (T) Integer.valueOf(number.intValue());\r\n    } else if (Long.class == targetClass) {\r\n        long value = checkedLongValue(number, targetClass);\r\n        return (T) Long.valueOf(value);\r\n    } else if (BigInteger.class == targetClass) {\r\n        if (number instanceof BigDecimal bigDecimal) {\r\n            // do not lose precision - use BigDecimal's own conversion\r\n            return (T) bigDecimal.toBigInteger();\r\n        }\r\n        // original value is not a Big* number - use standard long conversion\r\n        return (T) BigInteger.valueOf(number.longValue());\r\n    } else if (Float.class == targetClass) {\r\n        return (T) Float.valueOf(number.floatValue());\r\n    } else if (Double.class == targetClass) {\r\n        return (T) Double.valueOf(number.doubleValue());\r\n    } else if (BigDecimal.class == targetClass) {\r\n        // always use BigDecimal(String) here to avoid unpredictability of BigDecimal(double)\r\n        // (see BigDecimal javadoc for details)\r\n        return (T) new BigDecimal(number.toString());\r\n    } else {\r\n        throw new IllegalArgumentException(\"Could not convert number [\" + number + \"] of type [\" + number.getClass().getName() + \"] to unsupported target class [\" + targetClass.getName() + \"]\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#convertNumberToTargetClass(Number,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#convertNumberToTargetClass(Number,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtils#checkedLongValue(Number,Class<? extends Number>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check for a {@code BigInteger}/{@code BigDecimal} long overflow\r\n * before returning the given number as a long value.\r\n * @param number the number to convert\r\n * @param targetClass the target class to convert to\r\n * @return the long value, if convertible without overflow\r\n * @throws IllegalArgumentException if there is an overflow\r\n * @see #raiseOverflowException\r\n */\r\nprivate static long checkedLongValue(Number number, Class<? extends Number> targetClass) {\r\n    BigInteger bigInt = null;\r\n    if (number instanceof BigInteger bigInteger) {\r\n        bigInt = bigInteger;\r\n    } else if (number instanceof BigDecimal bigDecimal) {\r\n        bigInt = bigDecimal.toBigInteger();\r\n    }\r\n    // Effectively analogous to JDK 8's BigInteger.longValueExact()\r\n    if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {\r\n        raiseOverflowException(number, targetClass);\r\n    }\r\n    return number.longValue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#checkedLongValue(Number,Class<? extends Number>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#raiseOverflowException(Number,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Raise an <em>overflow</em> exception for the given number and target class.\r\n * @param number the number we tried to convert\r\n * @param targetClass the target class we tried to convert to\r\n * @throws IllegalArgumentException if there is an overflow\r\n */\r\nprivate static void raiseOverflowException(Number number, Class<?> targetClass) {\r\n    throw new IllegalArgumentException(\"Could not convert number [\" + number + \"] of type [\" + number.getClass().getName() + \"] to target class [\" + targetClass.getName() + \"]: overflow\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#raiseOverflowException(Number,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given {@code text} into a {@link Number} instance of the given\r\n * target class, using the corresponding {@code decode} / {@code valueOf} method.\r\n * <p>Trims all whitespace (leading, trailing, and in between characters) from\r\n * the input {@code String} before attempting to parse the number.\r\n * <p>Supports numbers in hex format (with leading \"0x\", \"0X\", or \"#\") as well.\r\n * @param text the text to convert\r\n * @param targetClass the target class to parse into\r\n * @return the parsed number\r\n * @throws IllegalArgumentException if the target class is not supported\r\n * (i.e. not a standard Number subclass as included in the JDK)\r\n * @see Byte#decode\r\n * @see Short#decode\r\n * @see Integer#decode\r\n * @see Long#decode\r\n * @see #decodeBigInteger(String)\r\n * @see Float#valueOf\r\n * @see Double#valueOf\r\n * @see java.math.BigDecimal#BigDecimal(String)\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <T extends Number> T parseNumber(String text, Class<T> targetClass) {\r\n    Assert.notNull(text, \"Text must not be null\");\r\n    Assert.notNull(targetClass, \"Target class must not be null\");\r\n    String trimmed = StringUtils.trimAllWhitespace(text);\r\n    if (Byte.class == targetClass) {\r\n        return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));\r\n    } else if (Short.class == targetClass) {\r\n        return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));\r\n    } else if (Integer.class == targetClass) {\r\n        return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));\r\n    } else if (Long.class == targetClass) {\r\n        return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));\r\n    } else if (BigInteger.class == targetClass) {\r\n        return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));\r\n    } else if (Float.class == targetClass) {\r\n        return (T) Float.valueOf(trimmed);\r\n    } else if (Double.class == targetClass) {\r\n        return (T) Double.valueOf(trimmed);\r\n    } else if (BigDecimal.class == targetClass || Number.class == targetClass) {\r\n        return (T) new BigDecimal(trimmed);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Cannot convert String [\" + text + \"] to target class [\" + targetClass.getName() + \"]\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>,NumberFormat)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given {@code text} into a {@link Number} instance of the\r\n * given target class, using the supplied {@link NumberFormat}.\r\n * <p>Trims the input {@code String} before attempting to parse the number.\r\n * @param text the text to convert\r\n * @param targetClass the target class to parse into\r\n * @param numberFormat the {@code NumberFormat} to use for parsing (if\r\n * {@code null}, this method falls back to {@link #parseNumber(String, Class)})\r\n * @return the parsed number\r\n * @throws IllegalArgumentException if the target class is not supported\r\n * (i.e. not a standard Number subclass as included in the JDK)\r\n * @see java.text.NumberFormat#parse\r\n * @see #convertNumberToTargetClass\r\n * @see #parseNumber(String, Class)\r\n */\r\n// Dataflow analysis limitation\r\n@SuppressWarnings(\"NullAway\")\r\npublic static <T extends Number> T parseNumber(String text, Class<T> targetClass, @Nullable NumberFormat numberFormat) {\r\n    if (numberFormat != null) {\r\n        Assert.notNull(text, \"Text must not be null\");\r\n        Assert.notNull(targetClass, \"Target class must not be null\");\r\n        DecimalFormat decimalFormat = null;\r\n        boolean resetBigDecimal = false;\r\n        if (numberFormat instanceof DecimalFormat dc) {\r\n            decimalFormat = dc;\r\n            if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {\r\n                decimalFormat.setParseBigDecimal(true);\r\n                resetBigDecimal = true;\r\n            }\r\n        }\r\n        try {\r\n            Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text));\r\n            return convertNumberToTargetClass(number, targetClass);\r\n        } catch (ParseException ex) {\r\n            throw new IllegalArgumentException(\"Could not parse number: \" + ex.getMessage());\r\n        } finally {\r\n            if (resetBigDecimal) {\r\n                decimalFormat.setParseBigDecimal(false);\r\n            }\r\n        }\r\n    } else {\r\n        return parseNumber(text, targetClass);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>,NumberFormat)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#parseNumber(String,Class<T>,NumberFormat)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtils#isHexNumber(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given {@code value} String indicates a hex number,\r\n * i.e. needs to be passed into {@code Integer.decode} instead of\r\n * {@code Integer.valueOf}, etc.\r\n */\r\nprivate static boolean isHexNumber(String value) {\r\n    int index = (value.startsWith(\"-\") ? 1 : 0);\r\n    return (value.startsWith(\"0x\", index) || value.startsWith(\"0X\", index) || value.startsWith(\"#\", index));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtils#isHexNumber(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtils#decodeBigInteger(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decode a {@link java.math.BigInteger} from the supplied {@link String} value.\r\n * <p>Supports decimal, hex, and octal notation.\r\n * @see BigInteger#BigInteger(String, int)\r\n */\r\nprivate static BigInteger decodeBigInteger(String value) {\r\n    int radix = 10;\r\n    int index = 0;\r\n    boolean negative = false;\r\n    // Handle minus sign, if present.\r\n    if (value.startsWith(\"-\")) {\r\n        negative = true;\r\n        index++;\r\n    }\r\n    // Handle radix specifier, if present.\r\n    if (value.startsWith(\"0x\", index) || value.startsWith(\"0X\", index)) {\r\n        index += 2;\r\n        radix = 16;\r\n    } else if (value.startsWith(\"#\", index)) {\r\n        index++;\r\n        radix = 16;\r\n    } else if (value.startsWith(\"0\", index) && value.length() > 1 + index) {\r\n        index++;\r\n        radix = 8;\r\n    }\r\n    BigInteger result = new BigInteger(value.substring(index), radix);\r\n    return (negative ? result.negate() : result);\r\n}",
    "tailType": "method_code"
  }
]