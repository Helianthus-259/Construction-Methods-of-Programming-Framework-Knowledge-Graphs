[
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#INTERCEPT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#INTERCEPT",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#FIND_PROXY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#FIND_PROXY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#TO_STRING",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#TO_STRING",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#METHOD_TO_CLASS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#METHOD_TO_CLASS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Transformer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodField(Signature)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String getMethodField(Signature impl) {\r\n    return impl.getName() + \"$Method\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodField(Signature)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodProxyField(Signature)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String getMethodProxyField(Signature impl) {\r\n    return impl.getName() + \"$Proxy\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#getMethodProxyField(Signature)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generate(ClassEmitter ce, Context context, List methods) {\r\n    Map sigMap = new HashMap();\r\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\r\n        MethodInfo method = (MethodInfo) it.next();\r\n        Signature sig = method.getSignature();\r\n        Signature impl = context.getImplSignature(method);\r\n        String methodField = getMethodField(impl);\r\n        String methodProxyField = getMethodProxyField(impl);\r\n        sigMap.put(sig.toString(), methodProxyField);\r\n        ce.declare_field(Constants.PRIVATE_FINAL_STATIC, methodField, METHOD, null);\r\n        ce.declare_field(Constants.PRIVATE_FINAL_STATIC, methodProxyField, METHOD_PROXY, null);\r\n        ce.declare_field(Constants.PRIVATE_FINAL_STATIC, EMPTY_ARGS_NAME, Constants.TYPE_OBJECT_ARRAY, null);\r\n        CodeEmitter e;\r\n        // access method\r\n        e = ce.begin_method(Constants.ACC_FINAL, impl, method.getExceptionTypes());\r\n        superHelper(e, method, context);\r\n        e.return_value();\r\n        e.end_method();\r\n        // around method\r\n        e = context.beginMethod(ce, method);\r\n        Label nullInterceptor = e.make_label();\r\n        context.emitCallback(e, context.getIndex(method));\r\n        e.dup();\r\n        e.ifnull(nullInterceptor);\r\n        e.load_this();\r\n        e.getfield(methodField);\r\n        if (sig.getArgumentTypes().length == 0) {\r\n            e.getfield(EMPTY_ARGS_NAME);\r\n        } else {\r\n            e.create_arg_array();\r\n        }\r\n        e.getfield(methodProxyField);\r\n        e.invoke_interface(METHOD_INTERCEPTOR, INTERCEPT);\r\n        e.unbox_or_zero(sig.getReturnType());\r\n        e.return_value();\r\n        e.mark(nullInterceptor);\r\n        superHelper(e, method, context);\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n    generateFindProxy(ce, sigMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void superHelper(CodeEmitter e, MethodInfo method, Context context) {\r\n    if (TypeUtils.isAbstract(method.getModifiers())) {\r\n        e.throw_exception(ABSTRACT_METHOD_ERROR, method.toString() + \" is abstract\");\r\n    } else {\r\n        e.load_this();\r\n        context.emitLoadArgsAndInvoke(e, method);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#superHelper(CodeEmitter,MethodInfo,Context)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateStatic(CodeEmitter e, Context context, List methods) throws Exception {\r\n    /* generates:\r\n           static {\r\n             Class thisClass = Class.forName(\"NameOfThisClass\");\r\n             Class cls = Class.forName(\"java.lang.Object\");\r\n             String[] sigs = new String[]{ \"toString\", \"()Ljava/lang/String;\", ... };\r\n             Method[] methods = cls.getDeclaredMethods();\r\n             methods = ReflectUtils.findMethods(sigs, methods);\r\n             METHOD_0 = methods[0];\r\n             CGLIB$ACCESS_0 = MethodProxy.create(cls, thisClass, \"()Ljava/lang/String;\", \"toString\", \"CGLIB$ACCESS_0\");\r\n             ...\r\n           }\r\n        */\r\n    e.push(0);\r\n    e.newarray();\r\n    e.putfield(EMPTY_ARGS_NAME);\r\n    Local thisclass = e.make_local();\r\n    Local declaringclass = e.make_local();\r\n    EmitUtils.load_class_this(e);\r\n    e.store_local(thisclass);\r\n    Map methodsByClass = CollectionUtils.bucket(methods, METHOD_TO_CLASS);\r\n    for (Iterator i = methodsByClass.keySet().iterator(); i.hasNext(); ) {\r\n        ClassInfo classInfo = (ClassInfo) i.next();\r\n        List classMethods = (List) methodsByClass.get(classInfo);\r\n        e.push(2 * classMethods.size());\r\n        e.newarray(Constants.TYPE_STRING);\r\n        for (int index = 0; index < classMethods.size(); index++) {\r\n            MethodInfo method = (MethodInfo) classMethods.get(index);\r\n            Signature sig = method.getSignature();\r\n            e.dup();\r\n            e.push(2 * index);\r\n            e.push(sig.getName());\r\n            e.aastore();\r\n            e.dup();\r\n            e.push(2 * index + 1);\r\n            e.push(sig.getDescriptor());\r\n            e.aastore();\r\n        }\r\n        EmitUtils.load_class(e, classInfo.getType());\r\n        e.dup();\r\n        e.store_local(declaringclass);\r\n        e.invoke_virtual(Constants.TYPE_CLASS, GET_DECLARED_METHODS);\r\n        e.invoke_static(REFLECT_UTILS, FIND_METHODS);\r\n        for (int index = 0; index < classMethods.size(); index++) {\r\n            MethodInfo method = (MethodInfo) classMethods.get(index);\r\n            Signature sig = method.getSignature();\r\n            Signature impl = context.getImplSignature(method);\r\n            e.dup();\r\n            e.push(index);\r\n            e.array_load(METHOD);\r\n            e.putfield(getMethodField(impl));\r\n            e.load_local(declaringclass);\r\n            e.load_local(thisclass);\r\n            e.push(sig.getDescriptor());\r\n            e.push(sig.getName());\r\n            e.push(impl.getName());\r\n            e.invoke_static(METHOD_PROXY, MAKE_PROXY);\r\n            e.putfield(getMethodProxyField(impl));\r\n        }\r\n        e.pop();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.MethodInterceptorGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]