[
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueHigh()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparatorTests#shouldCompareFromTrueHigh()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.ResourcePatternHint;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.util.AntPathMatcher;\nimport org.springframework.util.Assert;\n\n/**\n * Generator of {@link ResourceHints} predicates, testing whether the given hints\n * match the expected behavior for resources.\n *\n * @author Brian Clozel\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 6.0\n */\npublic class ResourceHintsPredicates {\n\n\tprivate static final AntPathMatcher PATH_MATCHER = new AntPathMatcher();\n\n\tResourceHintsPredicates() {\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a resource hint is registered for the given bundle name.\n\t * @param bundleName the resource bundle name\n\t * @return the {@link RuntimeHints} predicate\n\t */\n\tpublic Predicate<RuntimeHints> forBundle(String bundleName) {\n\t\tAssert.hasText(bundleName, \"resource bundle name should not be empty\");\n\t\treturn runtimeHints -> runtimeHints.resources().resourceBundleHints()\n\t\t\t\t.anyMatch(bundleHint -> bundleName.equals(bundleHint.getBaseName()));\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a resource hint is registered for the given\n\t * resource name, located in the given type's package.\n\t * <p>For example, {@code forResource(org.example.MyClass, \"myResource.txt\")}\n\t * will match against {@code \"org/example/myResource.txt\"}.\n\t * <p>If the given resource name is an absolute path (i.e., starts with a\n\t * leading slash), the supplied type will be ignored. For example,\n\t * {@code forResource(org.example.MyClass, \"/myResource.txt\")} will match against\n\t * {@code \"myResource.txt\"}.\n\t * @param type the type's package where to look for the resource\n\t * @param resourceName the resource name\n\t * @return the {@link RuntimeHints} predicate\n\t */\n\tpublic Predicate<RuntimeHints> forResource(TypeReference type, String resourceName) {\n\t\tString absoluteName = resolveAbsoluteResourceName(type, resourceName);\n\t\treturn forResource(absoluteName);\n\t}\n\n\tprivate String resolveAbsoluteResourceName(TypeReference type, String resourceName) {\n\t\t// absolute path\n\t\tif (resourceName.startsWith(\"/\")) {\n\t\t\treturn resourceName.substring(1);\n\t\t}\n\t\t// default package\n\t\telse if (type.getPackageName().isEmpty()) {\n\t\t\treturn resourceName;\n\t\t}\n\t\t// relative path\n\t\telse {\n\t\t\treturn type.getPackageName().replace('.', '/') + \"/\" + resourceName;\n\t\t}\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a resource hint is registered for\n\t * the given resource name.\n\t * <p>A leading slash will be removed.\n\t * @param resourceName the absolute resource name\n\t * @return the {@link RuntimeHints} predicate\n\t */\n\tpublic Predicate<RuntimeHints> forResource(String resourceName) {\n\t\tString resourceNameToUse = (resourceName.startsWith(\"/\") ? resourceName.substring(1) : resourceName);\n\t\treturn hints -> {\n\t\t\tAggregatedResourcePatternHints aggregatedResourcePatternHints = AggregatedResourcePatternHints.of(\n\t\t\t\t\thints.resources());\n\t\t\treturn aggregatedResourcePatternHints.includes().stream().anyMatch(included ->\n\t\t\t\t\tPATH_MATCHER.match(included.getPattern(), resourceNameToUse));\n\t\t};\n\t}\n\n\tprivate record AggregatedResourcePatternHints(List<ResourcePatternHint> includes) {\n\n\t\tstatic AggregatedResourcePatternHints of(ResourceHints resourceHints) {\n\t\t\tList<ResourcePatternHint> includes = new ArrayList<>();\n\t\t\tresourceHints.resourcePatternHints().forEach(resourcePatternHint ->\n\t\t\t\t\tincludes.addAll(resourcePatternHint.getIncludes()));\n\t\t\treturn new AggregatedResourcePatternHints(includes);\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#PATH_MATCHER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#PATH_MATCHER",
    "headType": "field",
    "relation": "haveType",
    "tail": "AntPathMatcher",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forBundle(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a resource hint is registered for the given bundle name.\r\n * @param bundleName the resource bundle name\r\n * @return the {@link RuntimeHints} predicate\r\n */\r\npublic Predicate<RuntimeHints> forBundle(String bundleName) {\r\n    Assert.hasText(bundleName, \"resource bundle name should not be empty\");\r\n    return runtimeHints -> runtimeHints.resources().resourceBundleHints().anyMatch(bundleHint -> bundleName.equals(bundleHint.getBaseName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forBundle(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forResource(TypeReference,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a resource hint is registered for the given\r\n * resource name, located in the given type's package.\r\n * <p>For example, {@code forResource(org.example.MyClass, \"myResource.txt\")}\r\n * will match against {@code \"org/example/myResource.txt\"}.\r\n * <p>If the given resource name is an absolute path (i.e., starts with a\r\n * leading slash), the supplied type will be ignored. For example,\r\n * {@code forResource(org.example.MyClass, \"/myResource.txt\")} will match against\r\n * {@code \"myResource.txt\"}.\r\n * @param type the type's package where to look for the resource\r\n * @param resourceName the resource name\r\n * @return the {@link RuntimeHints} predicate\r\n */\r\npublic Predicate<RuntimeHints> forResource(TypeReference type, String resourceName) {\r\n    String absoluteName = resolveAbsoluteResourceName(type, resourceName);\r\n    return forResource(absoluteName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forResource(TypeReference,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#resolveAbsoluteResourceName(TypeReference,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String resolveAbsoluteResourceName(TypeReference type, String resourceName) {\r\n    // absolute path\r\n    if (resourceName.startsWith(\"/\")) {\r\n        return resourceName.substring(1);\r\n    } else // default package\r\n    if (type.getPackageName().isEmpty()) {\r\n        return resourceName;\r\n    } else // relative path\r\n    {\r\n        return type.getPackageName().replace('.', '/') + \"/\" + resourceName;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#resolveAbsoluteResourceName(TypeReference,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a resource hint is registered for\r\n * the given resource name.\r\n * <p>A leading slash will be removed.\r\n * @param resourceName the absolute resource name\r\n * @return the {@link RuntimeHints} predicate\r\n */\r\npublic Predicate<RuntimeHints> forResource(String resourceName) {\r\n    String resourceNameToUse = (resourceName.startsWith(\"/\") ? resourceName.substring(1) : resourceName);\r\n    return hints -> {\r\n        AggregatedResourcePatternHints aggregatedResourcePatternHints = AggregatedResourcePatternHints.of(hints.resources());\r\n        return aggregatedResourcePatternHints.includes().stream().anyMatch(included -> PATH_MATCHER.match(included.getPattern(), resourceNameToUse));\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ResourceHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ResourceHintsPredicates#forResource(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.ComparableComparatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests for {@link ComparableComparator}.\n *\n * @author Keith Donald\n * @author Chris Beams\n * @author Phillip Webb\n */\n@Deprecated\nclass ComparableComparatorTests {\n\n\t@Test\n\tvoid comparableComparator() {\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tComparator<String> c = new ComparableComparator<>();\n\t\tassertThat(c.compare(\"abc\", \"cde\")).isLessThan(0);\n\t}\n\n\t@Test\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tvoid shouldNeedComparable() {\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tComparator c = new ComparableComparator();\n\t\tObject o1 = new Object();\n\t\tObject o2 = new Object();\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> c.compare(o1, o2));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests#comparableComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid comparableComparator() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    Comparator<String> c = new ComparableComparator<>();\r\n    assertThat(c.compare(\"abc\", \"cde\")).isLessThan(0);\r\n}",
    "tailType": "method_code"
  }
]