[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesIntrospectPublicMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesIntrospectPublicMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodIntrospectionMatchesInvokePublicMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_METHODS);\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").introspect());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodIntrospectionMatchesInvokePublicMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationDoesNotMatchMethodHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INTROSPECT));\r\n    assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchMethodHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationMatchesMethodInvocationHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withMethod(\"publicMethod\", Collections.emptyList(), ExecutableMode.INVOKE));\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesMethodInvocationHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectPublicMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationDoesNotMatchIntrospectPublicMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectPublicMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectPublicMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationMatchesInvokePublicMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INVOKE_PUBLIC_METHODS);\r\n    assertPredicateMatches(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationMatchesInvokePublicMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodInvocationDoesNotMatchIntrospectDeclaredMethods() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_DECLARED_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onMethod(SampleClass.class, \"publicMethod\").invoke());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnMethod#methodInvocationDoesNotMatchIntrospectDeclaredMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]