[
  {
    "head": "org.springframework.util.MimeType#getSubtypeSuffix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#getCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the character set, as indicated by a {@code charset} parameter, if any.\r\n * @return the character set, or {@code null} if not available\r\n * @since 4.3\r\n */\r\n@Nullable\r\npublic Charset getCharset() {\r\n    return this.resolvedCharset;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#getCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#getParameter(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a generic parameter value, given a parameter name.\r\n * @param name the parameter name\r\n * @return the parameter value, or {@code null} if not present\r\n */\r\n@Nullable\r\npublic String getParameter(String name) {\r\n    return this.parameters.get(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getParameter(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#getParameter(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeType#getParameters()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all generic parameter values.\r\n * @return a read-only map (possibly empty, never {@code null})\r\n */\r\npublic Map<String, String> getParameters() {\r\n    return this.parameters;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#getParameters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#includes(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicate whether this MIME Type includes the given MIME Type.\r\n * <p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},\r\n * and {@code application/*+xml} includes {@code application/soap+xml}, etc.\r\n * This method is <b>not</b> symmetric.\r\n * @param other the reference MIME Type with which to compare\r\n * @return {@code true} if this MIME Type includes the given MIME Type;\r\n * {@code false} otherwise\r\n */\r\npublic boolean includes(@Nullable MimeType other) {\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (isWildcardType()) {\r\n        // */* includes anything\r\n        return true;\r\n    } else if (getType().equals(other.getType())) {\r\n        if (getSubtype().equals(other.getSubtype())) {\r\n            return true;\r\n        }\r\n        if (isWildcardSubtype()) {\r\n            // Wildcard with suffix, for example, application/*+xml\r\n            int thisPlusIdx = getSubtype().lastIndexOf('+');\r\n            if (thisPlusIdx == -1) {\r\n                return true;\r\n            } else {\r\n                // application/*+xml includes application/soap+xml\r\n                int otherPlusIdx = other.getSubtype().lastIndexOf('+');\r\n                if (otherPlusIdx != -1) {\r\n                    String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx);\r\n                    String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1);\r\n                    String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1);\r\n                    if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#includes(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isCompatibleWith(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicate whether this MIME Type is compatible with the given MIME Type.\r\n * <p>For instance, {@code text/*} is compatible with {@code text/plain},\r\n * {@code text/html}, and vice versa. In effect, this method is similar to\r\n * {@link #includes}, except that it <b>is</b> symmetric.\r\n * @param other the reference MIME Type with which to compare\r\n * @return {@code true} if this MIME Type is compatible with the given MIME Type;\r\n * {@code false} otherwise\r\n */\r\npublic boolean isCompatibleWith(@Nullable MimeType other) {\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (isWildcardType() || other.isWildcardType()) {\r\n        return true;\r\n    } else if (getType().equals(other.getType())) {\r\n        if (getSubtype().equals(other.getSubtype())) {\r\n            return true;\r\n        }\r\n        if (isWildcardSubtype() || other.isWildcardSubtype()) {\r\n            String thisSuffix = getSubtypeSuffix();\r\n            String otherSuffix = other.getSubtypeSuffix();\r\n            if (getSubtype().equals(WILDCARD_TYPE) || other.getSubtype().equals(WILDCARD_TYPE)) {\r\n                return true;\r\n            } else if (isWildcardSubtype() && thisSuffix != null) {\r\n                return (thisSuffix.equals(other.getSubtype()) || thisSuffix.equals(otherSuffix));\r\n            } else if (other.isWildcardSubtype() && otherSuffix != null) {\r\n                return (getSubtype().equals(otherSuffix) || otherSuffix.equals(thisSuffix));\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isCompatibleWith(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#equalsTypeAndSubtype(MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Similar to {@link #equals(Object)} but based on the type and subtype\r\n * only, i.e. ignoring parameters.\r\n * @param other the other mime type to compare to\r\n * @return whether the two mime types have the same type and subtype\r\n * @since 5.1.4\r\n */\r\npublic boolean equalsTypeAndSubtype(@Nullable MimeType other) {\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#equalsTypeAndSubtype(MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#isPresentIn(Collection<? extends MimeType>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Unlike {@link Collection#contains(Object)} which relies on\r\n * {@link MimeType#equals(Object)}, this method only checks the type and the\r\n * subtype, but otherwise ignores parameters.\r\n * @param mimeTypes the list of mime types to perform the check against\r\n * @return whether the list contains the given mime type\r\n * @since 5.1.4\r\n */\r\npublic boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {\r\n    for (MimeType mimeType : mimeTypes) {\r\n        if (mimeType.equalsTypeAndSubtype(this)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#isPresentIn(Collection<? extends MimeType>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof MimeType otherType && this.type.equalsIgnoreCase(otherType.type) && this.subtype.equalsIgnoreCase(otherType.subtype) && parametersAreEqual(otherType)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeType#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeType#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]