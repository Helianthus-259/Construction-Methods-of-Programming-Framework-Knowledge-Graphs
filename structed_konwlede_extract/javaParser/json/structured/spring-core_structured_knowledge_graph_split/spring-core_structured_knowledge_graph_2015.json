[
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#bufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "LeakAwareDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#leak()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid leak() {\r\n    DataBuffer dataBuffer = this.bufferFactory.allocateBuffer();\r\n    try {\r\n        assertThatExceptionOfType(AssertionError.class).isThrownBy(this.bufferFactory::checkForLeaks);\r\n    } finally {\r\n        release(dataBuffer);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#leak()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#leak()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#leak()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#noLeak()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noLeak() {\r\n    DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(256);\r\n    release(dataBuffer);\r\n    this.bufferFactory.checkForLeaks();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#noLeak()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LeakAwareDataBufferFactoryTests#noLeak()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferListTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link LimitedDataBufferList}.\n *\n * @author Rossen Stoyanchev\n * @since 5.1.11\n */\nclass LimitedDataBufferListTests {\n\n\t@Test\n\tvoid limitEnforced() {\n\t\tLimitedDataBufferList list = new LimitedDataBufferList(5);\n\n\t\tassertThatThrownBy(() -> list.add(toDataBuffer(\"123456\"))).isInstanceOf(DataBufferLimitException.class);\n\t\tassertThat(list).isEmpty();\n\t}\n\n\t@Test\n\tvoid limitIgnored() {\n\t\tnew LimitedDataBufferList(-1).add(toDataBuffer(\"123456\"));\n\t}\n\n\t@Test\n\tvoid clearResetsCount() {\n\t\tLimitedDataBufferList list = new LimitedDataBufferList(5);\n\t\tlist.add(toDataBuffer(\"12345\"));\n\t\tlist.clear();\n\t\tlist.add(toDataBuffer(\"12345\"));\n\t}\n\n\n\tprivate static DataBuffer toDataBuffer(String value) {\n\t\tbyte[] bytes = value.getBytes(StandardCharsets.UTF_8);\n\t\treturn DefaultDataBufferFactory.sharedInstance.wrap(bytes);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitEnforced()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid limitEnforced() {\r\n    LimitedDataBufferList list = new LimitedDataBufferList(5);\r\n    assertThatThrownBy(() -> list.add(toDataBuffer(\"123456\"))).isInstanceOf(DataBufferLimitException.class);\r\n    assertThat(list).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitEnforced()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitEnforced()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitIgnored()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid limitIgnored() {\r\n    new LimitedDataBufferList(-1).add(toDataBuffer(\"123456\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitIgnored()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#limitIgnored()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#clearResetsCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clearResetsCount() {\r\n    LimitedDataBufferList list = new LimitedDataBufferList(5);\r\n    list.add(toDataBuffer(\"12345\"));\r\n    list.clear();\r\n    list.add(toDataBuffer(\"12345\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferListTests#clearResetsCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferListTests#clearResetsCount()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]