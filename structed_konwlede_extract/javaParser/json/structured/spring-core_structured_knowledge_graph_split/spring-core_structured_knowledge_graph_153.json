[
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#determineCommonAncestor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#determineCommonAncestor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getMostSpecificMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMostSpecificMethod() throws NoSuchMethodException {\r\n    Method defaultPrintMethod = ClassUtils.getMethod(MethodsInterface.class, \"defaultPrint\");\r\n    assertThat(ClassUtils.getMostSpecificMethod(defaultPrintMethod, MethodsInterfaceImplementation.class)).isEqualTo(defaultPrintMethod);\r\n    assertThat(ClassUtils.getMostSpecificMethod(defaultPrintMethod, SubMethodsInterfaceImplementation.class)).isEqualTo(defaultPrintMethod);\r\n    Method printMethod = ClassUtils.getMethod(MethodsInterface.class, \"print\", String.class);\r\n    assertThat(ClassUtils.getMostSpecificMethod(printMethod, MethodsInterfaceImplementation.class)).isNotEqualTo(printMethod);\r\n    assertThat(ClassUtils.getMostSpecificMethod(printMethod, MethodsInterfaceImplementation.class)).isEqualTo(ClassUtils.getMethod(MethodsInterfaceImplementation.class, \"print\", String.class));\r\n    assertThat(ClassUtils.getMostSpecificMethod(printMethod, SubMethodsInterfaceImplementation.class)).isEqualTo(ClassUtils.getMethod(MethodsInterfaceImplementation.class, \"print\", String.class));\r\n    Method protectedPrintMethod = MethodsInterfaceImplementation.class.getDeclaredMethod(\"protectedPrint\");\r\n    assertThat(ClassUtils.getMostSpecificMethod(protectedPrintMethod, MethodsInterfaceImplementation.class)).isEqualTo(protectedPrintMethod);\r\n    assertThat(ClassUtils.getMostSpecificMethod(protectedPrintMethod, SubMethodsInterfaceImplementation.class)).isEqualTo(SubMethodsInterfaceImplementation.class.getDeclaredMethod(\"protectedPrint\"));\r\n    Method packageAccessiblePrintMethod = MethodsInterfaceImplementation.class.getDeclaredMethod(\"packageAccessiblePrint\");\r\n    assertThat(ClassUtils.getMostSpecificMethod(packageAccessiblePrintMethod, MethodsInterfaceImplementation.class)).isEqualTo(packageAccessiblePrintMethod);\r\n    assertThat(ClassUtils.getMostSpecificMethod(packageAccessiblePrintMethod, SubMethodsInterfaceImplementation.class)).isEqualTo(ClassUtils.getMethod(SubMethodsInterfaceImplementation.class, \"packageAccessiblePrint\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getMostSpecificMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getMostSpecificMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveWrapper(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@WrapperTypes\r\nvoid isPrimitiveWrapper(Class<?> type) {\r\n    assertThat(ClassUtils.isPrimitiveWrapper(type)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isPrimitiveWrapper(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveWrapper(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveWrapper(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@WrapperTypes",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithPrimitive(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@PrimitiveTypes\r\nvoid isPrimitiveOrWrapperWithPrimitive(Class<?> type) {\r\n    assertThat(ClassUtils.isPrimitiveOrWrapper(type)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithPrimitive(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithPrimitive(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithPrimitive(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@PrimitiveTypes",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithWrapper(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@WrapperTypes\r\nvoid isPrimitiveOrWrapperWithWrapper(Class<?> type) {\r\n    assertThat(ClassUtils.isPrimitiveOrWrapper(type)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithWrapper(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithWrapper(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isPrimitiveOrWrapperWithWrapper(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@WrapperTypes",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isLambda()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isLambda() {\r\n    assertIsLambda(ClassUtilsTests.staticLambdaExpression);\r\n    assertIsLambda(ClassUtilsTests::staticStringFactory);\r\n    assertIsLambda(this.instanceLambdaExpression);\r\n    assertIsLambda(this::instanceStringFactory);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isLambda()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]