[
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NamedInheritableThreadLocal",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link InheritableThreadLocal} subclass that exposes a specified name\n * as {@link #toString()} result (allowing for introspection).\n *\n * @author Juergen Hoeller\n * @since 2.5.2\n * @param <T> the value type\n * @see NamedThreadLocal\n */\npublic class NamedInheritableThreadLocal<T> extends InheritableThreadLocal<T> {\n\n\tprivate final String name;\n\n\n\t/**\n\t * Create a new NamedInheritableThreadLocal with the given name.\n\t * @param name a descriptive name for this ThreadLocal\n\t */\n\tpublic NamedInheritableThreadLocal(String name) {\n\t\tAssert.hasText(name, \"Name must not be empty\");\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NamedInheritableThreadLocal#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NamedInheritableThreadLocal#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NamedInheritableThreadLocal",
    "headType": "class",
    "relation": "extend",
    "tail": "InheritableThreadLocal",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NamedThreadLocal",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.function.Supplier;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link ThreadLocal} subclass that exposes a specified name\n * as {@link #toString()} result (allowing for introspection).\n *\n * @author Juergen Hoeller\n * @author Qimiao Chen\n * @since 2.5.2\n * @param <T> the value type\n * @see NamedInheritableThreadLocal\n */\npublic class NamedThreadLocal<T> extends ThreadLocal<T> {\n\n\tprivate final String name;\n\n\n\t/**\n\t * Create a new NamedThreadLocal with the given name.\n\t * @param name a descriptive name for this ThreadLocal\n\t */\n\tpublic NamedThreadLocal(String name) {\n\t\tAssert.hasText(name, \"Name must not be empty\");\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\n\n\t/**\n\t * Create a named thread local variable. The initial value of the variable is\n\t * determined by invoking the {@code get} method on the {@code Supplier}.\n\t * @param <S> the type of the named thread local's value\n\t * @param name a descriptive name for the thread local\n\t * @param supplier the supplier to be used to determine the initial value\n\t * @return a new named thread local\n\t * @since 6.1\n\t */\n\tpublic static <S> ThreadLocal<S> withInitial(String name, Supplier<? extends S> supplier) {\n\t\treturn new SuppliedNamedThreadLocal<>(name, supplier);\n\t}\n\n\n\t/**\n\t * An extension of NamedThreadLocal that obtains its initial value from\n\t * the specified {@code Supplier}.\n\t * @param <T> the type of the named thread local's value\n\t */\n\tprivate static final class SuppliedNamedThreadLocal<T> extends NamedThreadLocal<T> {\n\n\t\tprivate final Supplier<? extends T> supplier;\n\n\t\tSuppliedNamedThreadLocal(String name, Supplier<? extends T> supplier) {\n\t\t\tsuper(name);\n\t\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\t\tthis.supplier = supplier;\n\t\t}\n\n\t\t@Override\n\t\tprotected T initialValue() {\n\t\t\treturn this.supplier.get();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NamedThreadLocal#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NamedThreadLocal#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal#withInitial(String,Supplier<? extends S>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a named thread local variable. The initial value of the variable is\r\n * determined by invoking the {@code get} method on the {@code Supplier}.\r\n * @param <S> the type of the named thread local's value\r\n * @param name a descriptive name for the thread local\r\n * @param supplier the supplier to be used to determine the initial value\r\n * @return a new named thread local\r\n * @since 6.1\r\n */\r\npublic static <S> ThreadLocal<S> withInitial(String name, Supplier<? extends S> supplier) {\r\n    return new SuppliedNamedThreadLocal<>(name, supplier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NamedThreadLocal#withInitial(String,Supplier<? extends S>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NamedThreadLocal",
    "headType": "class",
    "relation": "extend",
    "tail": "ThreadLocal",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.SuppliedNamedThreadLocal",
    "tailType": "class"
  }
]