[
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid setDefaultProfiles() {\r\n    environment.setDefaultProfiles();\r\n    assertThat(environment.getDefaultProfiles()).isEmpty();\r\n    environment.setDefaultProfiles(\"pd1\");\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(\"pd1\");\r\n    environment.setDefaultProfiles(\"pd2\", \"pd3\");\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(\"pd2\", \"pd3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#environmentSubclass_withCustomProfileValidation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid environmentSubclass_withCustomProfileValidation() {\r\n    ConfigurableEnvironment env = new AbstractEnvironment() {\r\n\r\n        @Override\r\n        protected void validateProfile(String profile) {\r\n            super.validateProfile(profile);\r\n            if (profile.contains(\"-\")) {\r\n                throw new IllegalArgumentException(\"Invalid profile [\" + profile + \"]: must not contain dash character\");\r\n            }\r\n        }\r\n    };\r\n    // succeeds\r\n    env.addActiveProfile(\"validProfile\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> env.addActiveProfile(\"invalid-profile\")).withMessage(\"Invalid profile [invalid-profile]: must not contain dash character\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#environmentSubclass_withCustomProfileValidation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#environmentSubclass_withCustomProfileValidation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSystemProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid suppressGetenvAccessThroughSystemProperty() {\r\n    try {\r\n        System.setProperty(\"spring.getenv.ignore\", \"true\");\r\n        assertThat(environment.getSystemEnvironment()).isEmpty();\r\n    } finally {\r\n        System.clearProperty(\"spring.getenv.ignore\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSystemProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSystemProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid suppressGetenvAccessThroughSpringProperty() {\r\n    try {\r\n        SpringProperties.setProperty(\"spring.getenv.ignore\", \"true\");\r\n        assertThat(environment.getSystemEnvironment()).isEmpty();\r\n    } finally {\r\n        SpringProperties.setProperty(\"spring.getenv.ignore\", null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringFlag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid suppressGetenvAccessThroughSpringFlag() {\r\n    try {\r\n        SpringProperties.setFlag(\"spring.getenv.ignore\");\r\n        assertThat(environment.getSystemEnvironment()).isEmpty();\r\n    } finally {\r\n        SpringProperties.setProperty(\"spring.getenv.ignore\", null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringFlag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#suppressGetenvAccessThroughSpringFlag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#getSystemProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSystemProperties() {\r\n    try {\r\n        System.setProperty(ALLOWED_PROPERTY_NAME, ALLOWED_PROPERTY_VALUE);\r\n        System.setProperty(DISALLOWED_PROPERTY_NAME, DISALLOWED_PROPERTY_VALUE);\r\n        System.getProperties().put(STRING_PROPERTY_NAME, NON_STRING_PROPERTY_VALUE);\r\n        System.getProperties().put(NON_STRING_PROPERTY_NAME, STRING_PROPERTY_VALUE);\r\n        Map<?, ?> systemProperties = environment.getSystemProperties();\r\n        assertThat(systemProperties).isNotNull();\r\n        assertThat(System.getProperties()).isSameAs(systemProperties);\r\n        assertThat(systemProperties.get(ALLOWED_PROPERTY_NAME)).isEqualTo(ALLOWED_PROPERTY_VALUE);\r\n        assertThat(systemProperties.get(DISALLOWED_PROPERTY_NAME)).isEqualTo(DISALLOWED_PROPERTY_VALUE);\r\n        assertThat(systemProperties.get(STRING_PROPERTY_NAME)).isEqualTo(NON_STRING_PROPERTY_VALUE);\r\n        assertThat(systemProperties.get(NON_STRING_PROPERTY_NAME)).isEqualTo(STRING_PROPERTY_VALUE);\r\n        PropertiesPropertySource systemPropertySource = (PropertiesPropertySource) environment.getPropertySources().get(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);\r\n        Set<String> expectedKeys = new HashSet<>(System.getProperties().stringPropertyNames());\r\n        // filtered out by stringPropertyNames due to non-String value\r\n        expectedKeys.add(STRING_PROPERTY_NAME);\r\n        assertThat(Set.of(systemPropertySource.getPropertyNames())).isEqualTo(expectedKeys);\r\n    } finally {\r\n        System.clearProperty(ALLOWED_PROPERTY_NAME);\r\n        System.clearProperty(DISALLOWED_PROPERTY_NAME);\r\n        System.getProperties().remove(STRING_PROPERTY_NAME);\r\n        System.getProperties().remove(NON_STRING_PROPERTY_NAME);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#getSystemProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#getSystemProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#getSystemEnvironment()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSystemEnvironment() {\r\n    Map<String, Object> systemEnvironment = environment.getSystemEnvironment();\r\n    assertThat(systemEnvironment).isNotNull();\r\n    assertThat(System.getenv()).isSameAs(systemEnvironment);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#getSystemEnvironment()",
    "tailType": "method"
  }
]