[
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithEmptyArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNullElementsWithEmptyArray() {\r\n    Assert.noNullElements(new String[] ;, \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElementsWithEmptyArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithEmptyArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNullElementsWithMessageSupplier() {\r\n    Assert.noNullElements(new String[] { \"1234\" }, () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElementsWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithEmptyArrayAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNullElementsWithEmptyArrayAndMessageSupplier() {\r\n    Assert.noNullElements(new String[] ;, () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElementsWithEmptyArrayAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithEmptyArrayAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithNullArrayAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNullElementsWithNullArrayAndMessageSupplier() {\r\n    Assert.noNullElements((Object[]) null, () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElementsWithNullArrayAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithNullArrayAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.FieldHint",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithNullElementsAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noNullElementsWithNullElementsAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.noNullElements(new String[] { \"foo\", null, \"bar\" }, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#noNullElementsWithNullElementsAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#noNullElementsWithNullElementsAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.FieldHint",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Field;\n\n/**\n * A hint that describes the need for reflection on a {@link Field}.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic final class FieldHint extends MemberHint {\n\n\tFieldHint(String name) {\n\t\tsuper(name);\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]