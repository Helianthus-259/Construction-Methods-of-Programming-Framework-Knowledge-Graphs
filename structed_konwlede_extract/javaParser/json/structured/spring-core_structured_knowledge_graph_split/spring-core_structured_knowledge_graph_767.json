[
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isAnnotationInherited(Class<? extends Annotation>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isAnnotationMetaPresent(Class<? extends Annotation>,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if an annotation of type {@code metaAnnotationType} is\r\n * <em>meta-present</em> on the supplied {@code annotationType}.\r\n * @param annotationType the annotation type to search on\r\n * @param metaAnnotationType the type of meta-annotation to search for\r\n * @return {@code true} if such an annotation is meta-present\r\n * @since 4.2.1\r\n * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API\r\n */\r\n@Deprecated\r\npublic static boolean isAnnotationMetaPresent(Class<? extends Annotation> annotationType, @Nullable Class<? extends Annotation> metaAnnotationType) {\r\n    if (metaAnnotationType == null) {\r\n        return false;\r\n    }\r\n    // Shortcut: directly present on the element, with no merging needed?\r\n    if (AnnotationFilter.PLAIN.matches(metaAnnotationType) || AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotationType)) {\r\n        return annotationType.isAnnotationPresent(metaAnnotationType);\r\n    }\r\n    // Exhaustive retrieval of merged annotations...\r\n    return MergedAnnotations.from(annotationType, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none()).isPresent(metaAnnotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isAnnotationMetaPresent(Class<? extends Annotation>,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isAnnotationMetaPresent(Class<? extends Annotation>,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isInJavaLangAnnotationPackage(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied {@link Annotation} is defined in the core JDK\r\n * {@code java.lang.annotation} package.\r\n * @param annotation the annotation to check\r\n * @return {@code true} if the annotation is in the {@code java.lang.annotation} package\r\n */\r\npublic static boolean isInJavaLangAnnotationPackage(@Nullable Annotation annotation) {\r\n    return (annotation != null && JAVA_LANG_ANNOTATION_FILTER.matches(annotation));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isInJavaLangAnnotationPackage(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isInJavaLangAnnotationPackage(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the {@link Annotation} with the supplied name is defined\r\n * in the core JDK {@code java.lang.annotation} package.\r\n * @param annotationType the name of the annotation type to check\r\n * @return {@code true} if the annotation is in the {@code java.lang.annotation} package\r\n * @since 4.2\r\n */\r\npublic static boolean isInJavaLangAnnotationPackage(@Nullable String annotationType) {\r\n    return (annotationType != null && JAVA_LANG_ANNOTATION_FILTER.matches(annotationType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isInJavaLangAnnotationPackage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#validateAnnotation(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check the declared attributes of the given annotation, in particular covering\r\n * Google App Engine's late arrival of {@code TypeNotPresentExceptionProxy} for\r\n * {@code Class} values (instead of early {@code Class.getAnnotations() failure}).\r\n * <p>This method not failing indicates that {@link #getAnnotationAttributes(Annotation)}\r\n * won't fail either (when attempted later on).\r\n * @param annotation the annotation to validate\r\n * @throws IllegalStateException if a declared {@code Class} attribute could not be read\r\n * @since 4.3.15\r\n * @see Class#getAnnotations()\r\n * @see #getAnnotationAttributes(Annotation)\r\n */\r\npublic static void validateAnnotation(Annotation annotation) {\r\n    AttributeMethods.forAnnotationType(annotation.annotationType()).validate(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#validateAnnotation(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the given annotation's attributes as a {@link Map}, preserving all\r\n * attribute types.\r\n * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}\r\n * with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters\r\n * set to {@code false}.\r\n * <p>Note: This method actually returns an {@link AnnotationAttributes} instance.\r\n * However, the {@code Map} signature has been preserved for binary compatibility.\r\n * @param annotation the annotation to retrieve the attributes for\r\n * @return the Map of annotation attributes, with attribute names as keys and\r\n * corresponding attribute values as values (never {@code null})\r\n * @see #getAnnotationAttributes(AnnotatedElement, Annotation)\r\n * @see #getAnnotationAttributes(Annotation, boolean, boolean)\r\n * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)\r\n */\r\npublic static Map<String, @Nullable Object> getAnnotationAttributes(Annotation annotation) {\r\n    return getAnnotationAttributes(null, annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the given annotation's attributes as a {@link Map}.\r\n * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}\r\n * with the {@code nestedAnnotationsAsMap} parameter set to {@code false}.\r\n * <p>Note: This method actually returns an {@link AnnotationAttributes} instance.\r\n * However, the {@code Map} signature has been preserved for binary compatibility.\r\n * @param annotation the annotation to retrieve the attributes for\r\n * @param classValuesAsString whether to convert Class references into Strings (for\r\n * compatibility with {@link org.springframework.core.type.AnnotationMetadata})\r\n * or to preserve them as Class references\r\n * @return the Map of annotation attributes, with attribute names as keys and\r\n * corresponding attribute values as values (never {@code null})\r\n * @see #getAnnotationAttributes(Annotation, boolean, boolean)\r\n */\r\npublic static Map<String, @Nullable Object> getAnnotationAttributes(Annotation annotation, boolean classValuesAsString) {\r\n    return getAnnotationAttributes(annotation, classValuesAsString, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map.\r\n * <p>This method provides fully recursive annotation reading capabilities on par with\r\n * the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}.\r\n * @param annotation the annotation to retrieve the attributes for\r\n * @param classValuesAsString whether to convert Class references into Strings (for\r\n * compatibility with {@link org.springframework.core.type.AnnotationMetadata})\r\n * or to preserve them as Class references\r\n * @param nestedAnnotationsAsMap whether to convert nested annotations into\r\n * {@link AnnotationAttributes} maps (for compatibility with\r\n * {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as\r\n * {@code Annotation} instances\r\n * @return the annotation attributes (a specialized Map) with attribute names as keys\r\n * and corresponding attribute values as values (never {@code null})\r\n * @since 3.1.1\r\n */\r\npublic static AnnotationAttributes getAnnotationAttributes(Annotation annotation, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {\r\n    return getAnnotationAttributes(null, annotation, classValuesAsString, nestedAnnotationsAsMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(Annotation,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(AnnotatedElement,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map.\r\n * <p>Equivalent to calling {@link #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)}\r\n * with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters\r\n * set to {@code false}.\r\n * @param annotatedElement the element that is annotated with the supplied annotation;\r\n * may be {@code null} if unknown\r\n * @param annotation the annotation to retrieve the attributes for\r\n * @return the annotation attributes (a specialized Map) with attribute names as keys\r\n * and corresponding attribute values as values (never {@code null})\r\n * @since 4.2\r\n * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)\r\n */\r\npublic static AnnotationAttributes getAnnotationAttributes(@Nullable AnnotatedElement annotatedElement, Annotation annotation) {\r\n    return getAnnotationAttributes(annotatedElement, annotation, false, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(AnnotatedElement,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(AnnotatedElement,Annotation,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map.\r\n * <p>This method provides fully recursive annotation reading capabilities on par with\r\n * the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}.\r\n * @param annotatedElement the element that is annotated with the supplied annotation;\r\n * may be {@code null} if unknown\r\n * @param annotation the annotation to retrieve the attributes for\r\n * @param classValuesAsString whether to convert Class references into Strings (for\r\n * compatibility with {@link org.springframework.core.type.AnnotationMetadata})\r\n * or to preserve them as Class references\r\n * @param nestedAnnotationsAsMap whether to convert nested annotations into\r\n * {@link AnnotationAttributes} maps (for compatibility with\r\n * {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as\r\n * {@code Annotation} instances\r\n * @return the annotation attributes (a specialized Map) with attribute names as keys\r\n * and corresponding attribute values as values (never {@code null})\r\n * @since 4.2\r\n */\r\npublic static AnnotationAttributes getAnnotationAttributes(@Nullable AnnotatedElement annotatedElement, Annotation annotation, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {\r\n    Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);\r\n    return MergedAnnotation.from(annotatedElement, annotation).withNonMergedAttributes().asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType(), true), adaptations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotationAttributes(AnnotatedElement,Annotation,boolean,boolean)",
    "tailType": "method"
  }
]