[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#addIfPossible(Deque<AnnotationTypeMapping>,AnnotationTypeMapping,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#addIfPossible(Deque<AnnotationTypeMapping>,AnnotationTypeMapping,Class<? extends Annotation>,Annotation,Set<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addIfPossible(Deque<AnnotationTypeMapping> queue, @Nullable AnnotationTypeMapping source, Class<? extends Annotation> annotationType, @Nullable Annotation ann, Set<Class<? extends Annotation>> visitedAnnotationTypes) {\r\n    try {\r\n        queue.addLast(new AnnotationTypeMapping(source, annotationType, ann, visitedAnnotationTypes));\r\n    } catch (Exception ex) {\r\n        AnnotationUtils.rethrowAnnotationConfigurationException(ex);\r\n        if (failureLogger.isEnabled()) {\r\n            failureLogger.log(\"Failed to introspect meta-annotation \" + annotationType.getName(), (source != null ? source.getAnnotationType() : null), ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#addIfPossible(Deque<AnnotationTypeMapping>,AnnotationTypeMapping,Class<? extends Annotation>,Annotation,Set<Class<? extends Annotation>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#isMappable(AnnotationTypeMapping,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Contract(\"_, null -> false\")\r\nprivate boolean isMappable(AnnotationTypeMapping source, @Nullable Annotation metaAnnotation) {\r\n    return (metaAnnotation != null && !this.filter.matches(metaAnnotation) && !AnnotationFilter.PLAIN.matches(source.getAnnotationType()) && !isAlreadyMapped(source, metaAnnotation));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#isMappable(AnnotationTypeMapping,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#isMappable(AnnotationTypeMapping,Annotation)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#isAlreadyMapped(AnnotationTypeMapping,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isAlreadyMapped(AnnotationTypeMapping source, Annotation metaAnnotation) {\r\n    Class<? extends Annotation> annotationType = metaAnnotation.annotationType();\r\n    AnnotationTypeMapping mapping = source;\r\n    while (mapping != null) {\r\n        if (mapping.getAnnotationType() == annotationType) {\r\n            return true;\r\n        }\r\n        mapping = mapping.getSource();\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#isAlreadyMapped(AnnotationTypeMapping,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the total number of contained mappings.\r\n * @return the total number of mappings\r\n */\r\nint size() {\r\n    return this.mappings.size();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#get(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get an individual mapping from this instance.\r\n * <p>Index {@code 0} will always return the root mapping; higher indexes\r\n * will return meta-annotation mappings.\r\n * @param index the index to return\r\n * @return the {@link AnnotationTypeMapping}\r\n * @throws IndexOutOfBoundsException if the index is out of range\r\n * ({@code index < 0 || index >= size()})\r\n */\r\nAnnotationTypeMapping get(int index) {\r\n    return this.mappings.get(index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#get(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create {@link AnnotationTypeMappings} for the specified annotation type.\r\n * @param annotationType the source annotation type\r\n * @return type mappings for the annotation type\r\n */\r\nstatic AnnotationTypeMappings forAnnotationType(Class<? extends Annotation> annotationType) {\r\n    return forAnnotationType(annotationType, new HashSet<>());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,Set<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create {@link AnnotationTypeMappings} for the specified annotation type.\r\n * @param annotationType the source annotation type\r\n * @param visitedAnnotationTypes the set of annotations that we have already\r\n * visited; used to avoid infinite recursion for recursive annotations which\r\n * some JVM languages support (such as Kotlin)\r\n * @return type mappings for the annotation type\r\n */\r\nstatic AnnotationTypeMappings forAnnotationType(Class<? extends Annotation> annotationType, Set<Class<? extends Annotation>> visitedAnnotationTypes) {\r\n    return forAnnotationType(annotationType, RepeatableContainers.standardRepeatables(), AnnotationFilter.PLAIN, visitedAnnotationTypes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,Set<Class<? extends Annotation>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,RepeatableContainers,AnnotationFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create {@link AnnotationTypeMappings} for the specified annotation type.\r\n * @param annotationType the source annotation type\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * the meta-annotations\r\n * @param annotationFilter the annotation filter used to limit which\r\n * annotations are considered\r\n * @return type mappings for the annotation type\r\n */\r\nstatic AnnotationTypeMappings forAnnotationType(Class<? extends Annotation> annotationType, RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {\r\n    return forAnnotationType(annotationType, repeatableContainers, annotationFilter, new HashSet<>());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,RepeatableContainers,AnnotationFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,RepeatableContainers,AnnotationFilter,Set<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create {@link AnnotationTypeMappings} for the specified annotation type.\r\n * @param annotationType the source annotation type\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * the meta-annotations\r\n * @param annotationFilter the annotation filter used to limit which\r\n * annotations are considered\r\n * @param visitedAnnotationTypes the set of annotations that we have already\r\n * visited; used to avoid infinite recursion for recursive annotations which\r\n * some JVM languages support (such as Kotlin)\r\n * @return type mappings for the annotation type\r\n */\r\nstatic AnnotationTypeMappings forAnnotationType(Class<? extends Annotation> annotationType, RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter, Set<Class<? extends Annotation>> visitedAnnotationTypes) {\r\n    if (repeatableContainers == RepeatableContainers.standardRepeatables()) {\r\n        return standardRepeatablesCache.computeIfAbsent(annotationFilter, key -> new Cache(repeatableContainers, key)).get(annotationType, visitedAnnotationTypes);\r\n    }\r\n    if (repeatableContainers == RepeatableContainers.none()) {\r\n        return noRepeatablesCache.computeIfAbsent(annotationFilter, key -> new Cache(repeatableContainers, key)).get(annotationType, visitedAnnotationTypes);\r\n    }\r\n    return new AnnotationTypeMappings(repeatableContainers, annotationFilter, annotationType, visitedAnnotationTypes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappings",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappings#forAnnotationType(Class<? extends Annotation>,RepeatableContainers,AnnotationFilter,Set<Class<? extends Annotation>>)",
    "tailType": "method"
  }
]