[
  {
    "head": "org.springframework.util.ResourceUtilsTests#isJarURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests#extractJarFileURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extractJarFileURL() throws Exception {\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtilsTests#extractJarFileURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests#extractJarFileURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests#extractArchiveURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extractArchiveURL() throws Exception {\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\r\n    assertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtilsTests#extractArchiveURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests#extractArchiveURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.DummyURLStreamHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.DummyURLStreamHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLStreamHandler;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n */\nclass ResourceUtilsTests {\n\n\t@Test\n\tvoid isJarURL() throws Exception {\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"file:myjar.jar\"))).isFalse();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"http:myserver/myjar.jar\"))).isFalse();\n\t}\n\n\t@Test\n\tvoid extractJarFileURL() throws Exception {\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t}\n\n\t@Test\n\tvoid extractArchiveURL() throws Exception {\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\n\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\n\t}\n\n\n\t/**\n\t * Dummy URLStreamHandler that's just specified to suppress the standard\n\t * {@code java.net.URL} URLStreamHandler lookup, to be able to\n\t * use the standard URL class for parsing \"rmi:...\" URLs.\n\t */\n\tprivate static class DummyURLStreamHandler extends URLStreamHandler {\n\n\t\t@Override\n\t\tprotected URLConnection openConnection(URL url) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DummyURLStreamHandler#openConnection(URL)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected URLConnection openConnection(URL url) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DummyURLStreamHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DummyURLStreamHandler#openConnection(URL)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DummyURLStreamHandler#openConnection(URL)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DummyURLStreamHandler",
    "headType": "class",
    "relation": "extend",
    "tail": "URLStreamHandler",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SerializationUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.NotSerializableException;\nimport java.io.Serializable;\nimport java.math.BigInteger;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link SerializationUtils}.\n *\n * @author Dave Syer\n * @author Sam Brannen\n * @since 3.0.5\n */\nclass SerializationUtilsTests {\n\n\tprivate static final BigInteger FOO = new BigInteger(\n\t\t\t\"-9702942423549012526722364838327831379660941553432801565505143675386108883970811292563757558516603356009681061\" +\n\t\t\t\"5697574744209306031461371833798723505120163874786203211176873686513374052845353833564048\");\n\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid serializeCycleSunnyDay() {\n\t\tassertThat(SerializationUtils.deserialize(SerializationUtils.serialize(\"foo\"))).isEqualTo(\"foo\");\n\t}\n\n\t@Test\n\tvoid serializeNonSerializableRecord() {\n\t\trecord Person(String firstName, String lastName) {}\n\t\tPerson jane = new Person(\"Jane\", \"Doe\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> SerializationUtils.serialize(jane))\n\t\t\t.withCauseExactlyInstanceOf(NotSerializableException.class);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid serializeAndDeserializeSerializableRecord() {\n\t\trecord Person(String firstName, String lastName) implements Serializable {}\n\t\tPerson jane = new Person(\"Jane\", \"Doe\");\n\t\tassertThat(SerializationUtils.deserialize(SerializationUtils.serialize(jane))).isEqualTo(jane);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid deserializeUndefined() {\n\t\tassertThatIllegalStateException().isThrownBy(() -> SerializationUtils.deserialize(FOO.toByteArray()));\n\t}\n\n\t@Test\n\tvoid serializeNonSerializable() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> SerializationUtils.serialize(new Object()));\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid deserializeNonSerializable() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> SerializationUtils.deserialize(\"foo\".getBytes()));\n\t}\n\n\t@Test\n\tvoid serializeNull() {\n\t\tassertThat(SerializationUtils.serialize(null)).isNull();\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid deserializeNull() {\n\t\tassertThat(SerializationUtils.deserialize(null)).isNull();\n\t}\n\n\t@Test\n\tvoid cloneException() {\n\t\tIllegalArgumentException ex = new IllegalArgumentException(\"foo\");\n\t\tassertThat(SerializationUtils.clone(ex)).hasMessage(\"foo\").isNotSameAs(ex);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SerializationUtilsTests#FOO",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#FOO",
    "headType": "field",
    "relation": "haveType",
    "tail": "BigInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#serializeCycleSunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid serializeCycleSunnyDay() {\r\n    assertThat(SerializationUtils.deserialize(SerializationUtils.serialize(\"foo\"))).isEqualTo(\"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtilsTests#serializeCycleSunnyDay()",
    "tailType": "method"
  }
]