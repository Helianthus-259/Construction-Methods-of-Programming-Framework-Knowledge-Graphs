[
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.AbstractEnvironment#propertySources",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#propertySources",
    "headType": "field",
    "relation": "haveType",
    "tail": "MutablePropertySources",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.AbstractEnvironment#propertyResolver",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#propertyResolver",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConfigurablePropertyResolver",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#createPropertyResolver(MutablePropertySources)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method used to create the {@link ConfigurablePropertyResolver}\r\n * instance used by the Environment.\r\n * @since 5.3.4\r\n * @see #getPropertyResolver()\r\n */\r\nprotected ConfigurablePropertyResolver createPropertyResolver(MutablePropertySources propertySources) {\r\n    return new PropertySourcesPropertyResolver(propertySources);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#createPropertyResolver(MutablePropertySources)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getPropertyResolver()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link ConfigurablePropertyResolver} being used by the\r\n * {@link Environment}.\r\n * @since 5.3.4\r\n * @see #createPropertyResolver(MutablePropertySources)\r\n */\r\nprotected final ConfigurablePropertyResolver getPropertyResolver() {\r\n    return this.propertyResolver;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getPropertyResolver()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#customizePropertySources(MutablePropertySources)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Customize the set of {@link PropertySource} objects to be searched by this\r\n * {@code Environment} during calls to {@link #getProperty(String)} and related\r\n * methods.\r\n *\r\n * <p>Subclasses that override this method are encouraged to add property\r\n * sources using {@link MutablePropertySources#addLast(PropertySource)} such that\r\n * further subclasses may call {@code super.customizePropertySources()} with\r\n * predictable results. For example:\r\n *\r\n * <pre class=\"code\">\r\n * public class Level1Environment extends AbstractEnvironment {\r\n *     &#064;Override\r\n *     protected void customizePropertySources(MutablePropertySources propertySources) {\r\n *         super.customizePropertySources(propertySources); // no-op from base class\r\n *         propertySources.addLast(new PropertySourceA(...));\r\n *         propertySources.addLast(new PropertySourceB(...));\r\n *     }\r\n * }\r\n *\r\n * public class Level2Environment extends Level1Environment {\r\n *     &#064;Override\r\n *     protected void customizePropertySources(MutablePropertySources propertySources) {\r\n *         super.customizePropertySources(propertySources); // add all from superclass\r\n *         propertySources.addLast(new PropertySourceC(...));\r\n *         propertySources.addLast(new PropertySourceD(...));\r\n *     }\r\n * }\r\n * </pre>\r\n *\r\n * <p>In this arrangement, properties will be resolved against sources A, B, C, D in that\r\n * order. That is to say that property source \"A\" has precedence over property source\r\n * \"D\". If the {@code Level2Environment} subclass wished to give property sources C\r\n * and D higher precedence than A and B, it could simply call\r\n * {@code super.customizePropertySources} after, rather than before adding its own:\r\n *\r\n * <pre class=\"code\">\r\n * public class Level2Environment extends Level1Environment {\r\n *     &#064;Override\r\n *     protected void customizePropertySources(MutablePropertySources propertySources) {\r\n *         propertySources.addLast(new PropertySourceC(...));\r\n *         propertySources.addLast(new PropertySourceD(...));\r\n *         super.customizePropertySources(propertySources); // add all from superclass\r\n *     }\r\n * }\r\n * </pre>\r\n *\r\n * <p>The search order is now C, D, A, B as desired.\r\n *\r\n * <p>Beyond these recommendations, subclasses may use any of the {@code add*},\r\n * {@code remove}, or {@code replace} methods exposed by {@link MutablePropertySources}\r\n * in order to create the exact arrangement of property sources desired.\r\n *\r\n * <p>The base implementation registers no property sources.\r\n *\r\n * <p>Note that clients of any {@link ConfigurableEnvironment} may further customize\r\n * property sources via the {@link #getPropertySources()} accessor, typically within\r\n * an {@link org.springframework.context.ApplicationContextInitializer\r\n * ApplicationContextInitializer}. For example:\r\n *\r\n * <pre class=\"code\">\r\n * ConfigurableEnvironment env = new StandardEnvironment();\r\n * env.getPropertySources().addLast(new PropertySourceX(...));\r\n * </pre>\r\n *\r\n * <h2>A warning about instance variable access</h2>\r\n * <p>Instance variables declared in subclasses and having default initial values should\r\n * <em>not</em> be accessed from within this method. Due to Java object creation\r\n * lifecycle constraints, any initial value will not yet be assigned when this\r\n * callback is invoked by the {@link #AbstractEnvironment()} constructor, which may\r\n * lead to a {@code NullPointerException} or other problems. If you need to access\r\n * default values of instance variables, leave this method as a no-op and perform\r\n * property source manipulation and instance variable access directly within the\r\n * subclass constructor. Note that <em>assigning</em> values to instance variables is\r\n * not problematic; it is only attempting to read default values that must be avoided.\r\n * @see MutablePropertySources\r\n * @see PropertySourcesPropertyResolver\r\n * @see org.springframework.context.ApplicationContextInitializer\r\n */\r\nprotected void customizePropertySources(MutablePropertySources propertySources) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#customizePropertySources(MutablePropertySources)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getReservedDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of reserved default profile names. This implementation returns\r\n * {@value #RESERVED_DEFAULT_PROFILE_NAME}. Subclasses may override in order to\r\n * customize the set of reserved names.\r\n * @see #RESERVED_DEFAULT_PROFILE_NAME\r\n * @see #doGetDefaultProfiles()\r\n */\r\nprotected Set<String> getReservedDefaultProfiles() {\r\n    return Collections.singleton(RESERVED_DEFAULT_PROFILE_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getReservedDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getActiveProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Implementation of ConfigurableEnvironment interface\r\n//---------------------------------------------------------------------\r\n@Override\r\npublic String[] getActiveProfiles() {\r\n    return StringUtils.toStringArray(doGetActiveProfiles());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getActiveProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getActiveProfiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetActiveProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of active profiles as explicitly set through\r\n * {@link #setActiveProfiles} or if the current set of active profiles\r\n * is empty, check for the presence of {@link #doGetActiveProfilesProperty()}\r\n * and assign its value to the set of active profiles.\r\n * @see #getActiveProfiles()\r\n * @see #doGetActiveProfilesProperty()\r\n */\r\nprotected Set<String> doGetActiveProfiles() {\r\n    synchronized (this.activeProfiles) {\r\n        if (this.activeProfiles.isEmpty()) {\r\n            String profiles = doGetActiveProfilesProperty();\r\n            if (StringUtils.hasText(profiles)) {\r\n                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(profiles)));\r\n            }\r\n        }\r\n        return this.activeProfiles;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#doGetActiveProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetActiveProfilesProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property value for the active profiles.\r\n * @since 5.3.4\r\n * @see #ACTIVE_PROFILES_PROPERTY_NAME\r\n */\r\n@Nullable\r\nprotected String doGetActiveProfilesProperty() {\r\n    return getProperty(ACTIVE_PROFILES_PROPERTY_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#doGetActiveProfilesProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetActiveProfilesProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]