[
  {
    "head": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitSource(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitSource(final String file, final String debug) {\r\n    if (file != null) {\r\n        sourceFileIndex = symbolTable.addConstantUtf8(file);\r\n    }\r\n    if (debug != null) {\r\n        debugExtension = new ByteVector().encodeUtf8(debug, 0, Integer.MAX_VALUE);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitSource(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitSource(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final ModuleVisitor visitModule(final String name, final int access, final String version) {\r\n    return moduleWriter = new ModuleWriter(symbolTable, symbolTable.addConstantModule(name).index, access, version == null ? 0 : symbolTable.addConstantUtf8(version));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitModule(String,int,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitNestHost(final String nestHost) {\r\n    nestHostClassIndex = symbolTable.addConstantClass(nestHost).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitNestHost(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitNestHost(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitOuterClass(final String owner, final String name, final String descriptor) {\r\n    enclosingClassIndex = symbolTable.addConstantClass(owner).index;\r\n    if (name != null && descriptor != null) {\r\n        enclosingMethodIndex = symbolTable.addConstantNameAndType(name, descriptor);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitOuterClass(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void visitAttribute(final Attribute attribute) {\r\n    // Store the attributes in the <i>reverse</i> order of their visit by this method.\r\n    attribute.nextAttribute = firstAttribute;\r\n    firstAttribute = attribute;\r\n}",
    "tailType": "method_code"
  }
]