[
  {
    "head": "org.springframework.core.style",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.style.StylerUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.style.StylerUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\n/**\n * Simple utility class to allow for convenient access to value\n * styling logic, mainly to support descriptive logging messages.\n *\n * <p>For more sophisticated needs, use the {@link ValueStyler} abstraction\n * directly. This class simply uses a shared {@link DefaultValueStyler}\n * instance underneath.\n *\n * @author Keith Donald\n * @since 1.2.2\n * @see ValueStyler\n * @see DefaultValueStyler\n */\npublic abstract class StylerUtils {\n\n\t/**\n\t * Default ValueStyler instance used by the {@code style} method.\n\t * Also available for the {@link ToStringCreator} class in this package.\n\t */\n\tstatic final ValueStyler DEFAULT_VALUE_STYLER = new DefaultValueStyler();\n\n\t/**\n\t * Style the specified value according to default conventions.\n\t * @param value the Object value to style\n\t * @return the styled String\n\t * @see DefaultValueStyler\n\t */\n\tpublic static String style(Object value) {\n\t\treturn DEFAULT_VALUE_STYLER.style(value);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.style.StylerUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.StylerUtils#DEFAULT_VALUE_STYLER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.StylerUtils#DEFAULT_VALUE_STYLER",
    "headType": "field",
    "relation": "haveType",
    "tail": "ValueStyler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.StylerUtils#style(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Style the specified value according to default conventions.\r\n * @param value the Object value to style\r\n * @return the styled String\r\n * @see DefaultValueStyler\r\n */\r\npublic static String style(Object value) {\r\n    return DEFAULT_VALUE_STYLER.style(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.StylerUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.StylerUtils#style(Object)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.style",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.style",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.style.ToStringCreator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Utility class that builds pretty-printing {@code toString()} methods\n * with pluggable styling conventions. By default, ToStringCreator adheres\n * to Spring's {@code toString()} styling conventions.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 1.2.2\n */\npublic class ToStringCreator {\n\n\t/**\n\t * Default ToStringStyler instance used by this ToStringCreator.\n\t */\n\tprivate static final ToStringStyler DEFAULT_TO_STRING_STYLER =\n\t\t\tnew DefaultToStringStyler(StylerUtils.DEFAULT_VALUE_STYLER);\n\n\n\tprivate final StringBuilder buffer = new StringBuilder(256);\n\n\tprivate final ToStringStyler styler;\n\n\tprivate final Object object;\n\n\tprivate boolean styledFirstField;\n\n\n\t/**\n\t * Create a ToStringCreator for the given object.\n\t * @param obj the object to be stringified\n\t */\n\tpublic ToStringCreator(Object obj) {\n\t\tthis(obj, (ToStringStyler) null);\n\t}\n\n\t/**\n\t * Create a ToStringCreator for the given object, using the provided style.\n\t * @param obj the object to be stringified\n\t * @param styler the ValueStyler encapsulating pretty-print instructions\n\t */\n\tpublic ToStringCreator(Object obj, @Nullable ValueStyler styler) {\n\t\tthis(obj, new DefaultToStringStyler(styler != null ? styler : StylerUtils.DEFAULT_VALUE_STYLER));\n\t}\n\n\t/**\n\t * Create a ToStringCreator for the given object, using the provided style.\n\t * @param obj the object to be stringified\n\t * @param styler the ToStringStyler encapsulating pretty-print instructions\n\t */\n\tpublic ToStringCreator(Object obj, @Nullable ToStringStyler styler) {\n\t\tAssert.notNull(obj, \"The object to be styled must not be null\");\n\t\tthis.object = obj;\n\t\tthis.styler = (styler != null ? styler : DEFAULT_TO_STRING_STYLER);\n\t\tthis.styler.styleStart(this.buffer, this.object);\n\t}\n\n\n\t/**\n\t * Append a byte field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, byte value) {\n\t\treturn append(fieldName, Byte.valueOf(value));\n\t}\n\n\t/**\n\t * Append a short field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, short value) {\n\t\treturn append(fieldName, Short.valueOf(value));\n\t}\n\n\t/**\n\t * Append a integer field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, int value) {\n\t\treturn append(fieldName, Integer.valueOf(value));\n\t}\n\n\t/**\n\t * Append a long field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, long value) {\n\t\treturn append(fieldName, Long.valueOf(value));\n\t}\n\n\t/**\n\t * Append a float field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, float value) {\n\t\treturn append(fieldName, Float.valueOf(value));\n\t}\n\n\t/**\n\t * Append a double field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, double value) {\n\t\treturn append(fieldName, Double.valueOf(value));\n\t}\n\n\t/**\n\t * Append a boolean field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, boolean value) {\n\t\treturn append(fieldName, Boolean.valueOf(value));\n\t}\n\n\t/**\n\t * Append a field value.\n\t * @param fieldName the name of the field, usually the member variable name\n\t * @param value the field value\n\t * @return this, to support call-chaining\n\t */\n\tpublic ToStringCreator append(String fieldName, @Nullable Object value) {\n\t\tprintFieldSeparatorIfNecessary();\n\t\tthis.styler.styleField(this.buffer, fieldName, value);\n\t\treturn this;\n\t}\n\n\tprivate void printFieldSeparatorIfNecessary() {\n\t\tif (this.styledFirstField) {\n\t\t\tthis.styler.styleFieldSeparator(this.buffer);\n\t\t}\n\t\telse {\n\t\t\tthis.styledFirstField = true;\n\t\t}\n\t}\n\n\t/**\n\t * Append the provided value.\n\t * @param value the value to append\n\t * @return this, to support call-chaining.\n\t */\n\tpublic ToStringCreator append(Object value) {\n\t\tthis.styler.styleValue(this.buffer, value);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Return the String representation that this ToStringCreator built.\n\t */\n\t@Override\n\tpublic String toString() {\n\t\tthis.styler.styleEnd(this.buffer, this.object);\n\t\treturn this.buffer.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.ToStringCreator#DEFAULT_TO_STRING_STYLER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#DEFAULT_TO_STRING_STYLER",
    "headType": "field",
    "relation": "haveType",
    "tail": "ToStringStyler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.ToStringCreator#buffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#buffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "StringBuilder",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.ToStringCreator#styler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#styler",
    "headType": "field",
    "relation": "haveType",
    "tail": "ToStringStyler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.ToStringCreator#object",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#object",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.ToStringCreator#styledFirstField",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#styledFirstField",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.ToStringCreator#append(String,byte)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Append a byte field value.\r\n * @param fieldName the name of the field, usually the member variable name\r\n * @param value the field value\r\n * @return this, to support call-chaining\r\n */\r\npublic ToStringCreator append(String fieldName, byte value) {\r\n    return append(fieldName, Byte.valueOf(value));\r\n}",
    "tailType": "method_code"
  }
]