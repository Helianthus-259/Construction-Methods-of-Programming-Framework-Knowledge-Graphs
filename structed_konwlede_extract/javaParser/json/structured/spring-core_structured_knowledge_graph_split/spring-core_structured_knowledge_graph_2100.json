[
  {
    "head": "org.springframework.core.ResolvableTypeTests#noGetGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getResolvedGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getResolvedGenerics() {\r\n    ResolvableType type = ResolvableType.forClass(List.class, ExtendsList.class);\r\n    Class<?>[] generics = type.resolveGenerics();\r\n    assertThat(generics).hasSize(1);\r\n    assertThat(generics[0]).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getResolvedGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getResolvedGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveClassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveClassType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"classType\"));\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveClassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveClassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveParameterizedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveParameterizedType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveParameterizedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveParameterizedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveArrayClassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveArrayClassType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"arrayClassType\"));\r\n    assertThat(type.resolve()).isEqualTo(List[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveArrayClassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveArrayClassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveGenericArrayType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\r\n    assertThat(type.resolve()).isEqualTo(List[].class);\r\n    assertThat(type.getComponentType().resolve()).isEqualTo(List.class);\r\n    assertThat(type.getComponentType().getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericMultiArrayType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveGenericMultiArrayType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericMultiArrayType\"));\r\n    assertThat(type.resolve()).isEqualTo(List[][][].class);\r\n    assertThat(type.getComponentType().resolve()).isEqualTo(List[][].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveGenericMultiArrayType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericMultiArrayType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayFromGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveGenericArrayFromGeneric() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringArrayList\"));\r\n    ResolvableType generic = type.asCollection().getGeneric();\r\n    assertThat(generic.getType().toString()).isEqualTo(\"E\");\r\n    assertThat(generic.isArray()).isTrue();\r\n    assertThat(generic.resolve()).isEqualTo(String[].class);\r\n}",
    "tailType": "method_code"
  }
]