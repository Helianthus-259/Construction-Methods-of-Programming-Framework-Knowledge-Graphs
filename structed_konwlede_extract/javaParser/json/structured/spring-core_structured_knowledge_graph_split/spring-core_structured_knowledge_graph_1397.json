[
  {
    "head": "org.springframework.util.StringUtils#trimTrailingWhitespace(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#trimLeadingCharacter(String,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim all occurrences of the supplied leading character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param leadingCharacter the leading character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimLeadingCharacter(String str, char leadingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int beginIdx = 0;\r\n    while (beginIdx < str.length() && leadingCharacter == str.charAt(beginIdx)) {\r\n        beginIdx++;\r\n    }\r\n    return str.substring(beginIdx);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimLeadingCharacter(String,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimTrailingCharacter(String,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim all occurrences of the supplied trailing character from the given {@code String}.\r\n * @param str the {@code String} to check\r\n * @param trailingCharacter the trailing character to be trimmed\r\n * @return the trimmed {@code String}\r\n */\r\npublic static String trimTrailingCharacter(String str, char trailingCharacter) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    int endIdx = str.length() - 1;\r\n    while (endIdx >= 0 && trailingCharacter == str.charAt(endIdx)) {\r\n        endIdx--;\r\n    }\r\n    return str.substring(0, endIdx + 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimTrailingCharacter(String,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#matchesCharacter(String,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given {@code String} matches the given single character.\r\n * @param str the {@code String} to check\r\n * @param singleCharacter the character to compare to\r\n * @since 5.2.9\r\n */\r\npublic static boolean matchesCharacter(@Nullable String str, char singleCharacter) {\r\n    return (str != null && str.length() == 1 && str.charAt(0) == singleCharacter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#matchesCharacter(String,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#startsWithIgnoreCase(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given {@code String} starts with the specified prefix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param prefix the prefix to look for\r\n * @see java.lang.String#startsWith\r\n */\r\npublic static boolean startsWithIgnoreCase(@Nullable String str, @Nullable String prefix) {\r\n    return (str != null && prefix != null && str.length() >= prefix.length() && str.regionMatches(true, 0, prefix, 0, prefix.length()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#startsWithIgnoreCase(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#endsWithIgnoreCase(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given {@code String} ends with the specified suffix,\r\n * ignoring upper/lower case.\r\n * @param str the {@code String} to check\r\n * @param suffix the suffix to look for\r\n * @see java.lang.String#endsWith\r\n */\r\npublic static boolean endsWithIgnoreCase(@Nullable String str, @Nullable String suffix) {\r\n    return (str != null && suffix != null && str.length() >= suffix.length() && str.regionMatches(true, str.length() - suffix.length(), suffix, 0, suffix.length()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#endsWithIgnoreCase(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#substringMatch(CharSequence,int,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test whether the given string matches the given substring\r\n * at the given index.\r\n * @param str the original string (or StringBuilder)\r\n * @param index the index in the original string to start matching against\r\n * @param substring the substring to match at the given index\r\n */\r\npublic static boolean substringMatch(CharSequence str, int index, CharSequence substring) {\r\n    if (index + substring.length() > str.length()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < substring.length(); i++) {\r\n        if (str.charAt(index + i) != substring.charAt(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#substringMatch(CharSequence,int,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#countOccurrencesOf(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Count the occurrences of the substring {@code sub} in string {@code str}.\r\n * @param str string to search in\r\n * @param sub string to search for\r\n */\r\npublic static int countOccurrencesOf(String str, String sub) {\r\n    if (!hasLength(str) || !hasLength(sub)) {\r\n        return 0;\r\n    }\r\n    int count = 0;\r\n    int pos = 0;\r\n    int idx;\r\n    while ((idx = str.indexOf(sub, pos)) != -1) {\r\n        ++count;\r\n        pos = idx + sub.length();\r\n    }\r\n    return count;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#countOccurrencesOf(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#replace(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Replace all occurrences of a substring within a string with another string.\r\n * @param inString {@code String} to examine\r\n * @param oldPattern {@code String} to replace\r\n * @param newPattern {@code String} to insert\r\n * @return a {@code String} with the replacements\r\n */\r\npublic static String replace(String inString, String oldPattern, @Nullable String newPattern) {\r\n    if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {\r\n        return inString;\r\n    }\r\n    int index = inString.indexOf(oldPattern);\r\n    if (index == -1) {\r\n        // no occurrence -> can return input as-is\r\n        return inString;\r\n    }\r\n    int capacity = inString.length();\r\n    if (newPattern.length() > oldPattern.length()) {\r\n        capacity += 16;\r\n    }\r\n    StringBuilder sb = new StringBuilder(capacity);\r\n    // our position in the old string\r\n    int pos = 0;\r\n    int patLen = oldPattern.length();\r\n    while (index >= 0) {\r\n        sb.append(inString, pos, index);\r\n        sb.append(newPattern);\r\n        pos = index + patLen;\r\n        index = inString.indexOf(oldPattern, pos);\r\n    }\r\n    // append any characters to the right of a match\r\n    sb.append(inString, pos, inString.length());\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#replace(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#delete(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Delete all occurrences of the given substring.\r\n * @param inString the original {@code String}\r\n * @param pattern the pattern to delete all occurrences of\r\n * @return the resulting {@code String}\r\n */\r\npublic static String delete(String inString, String pattern) {\r\n    return replace(inString, pattern, \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#delete(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#deleteAny(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Delete any character in a given {@code String}.\r\n * @param inString the original {@code String}\r\n * @param charsToDelete a set of characters to delete.\r\n * For example, \"az\\n\" will delete 'a's, 'z's and new lines.\r\n * @return the resulting {@code String}\r\n */\r\npublic static String deleteAny(String inString, @Nullable String charsToDelete) {\r\n    if (!hasLength(inString) || !hasLength(charsToDelete)) {\r\n        return inString;\r\n    }\r\n    int lastCharIndex = 0;\r\n    char[] result = new char[inString.length()];\r\n    for (int i = 0; i < inString.length(); i++) {\r\n        char c = inString.charAt(i);\r\n        if (charsToDelete.indexOf(c) == -1) {\r\n            result[lastCharIndex++] = c;\r\n        }\r\n    }\r\n    if (lastCharIndex == inString.length()) {\r\n        return inString;\r\n    }\r\n    return new String(result, 0, lastCharIndex);\r\n}",
    "tailType": "method_code"
  }
]