[
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#decodeInternal(DataBuffer,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected CharBuffer decodeInternal(DataBuffer dataBuffer, Charset charset) {\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(dataBuffer.readableByteCount());\r\n    dataBuffer.toByteBuffer(byteBuffer);\r\n    return charset.decode(byteBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#decodeInternal(DataBuffer,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#decodeInternal(DataBuffer,Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#textPlainOnly()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharBufferDecoder} for {@code \"text/plain\"}.\r\n */\r\npublic static CharBufferDecoder textPlainOnly() {\r\n    return textPlainOnly(DEFAULT_DELIMITERS, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#textPlainOnly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#textPlainOnly(List<String>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharBufferDecoder} for {@code \"text/plain\"}.\r\n * @param delimiters delimiter strings to use to split the input stream\r\n * @param stripDelimiter whether to remove delimiters from the resulting input strings\r\n */\r\npublic static CharBufferDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter) {\r\n    var textPlain = new MimeType(\"text\", \"plain\", DEFAULT_CHARSET);\r\n    return new CharBufferDecoder(delimiters, stripDelimiter, textPlain);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#textPlainOnly(List<String>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#allMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharBufferDecoder} that supports all MIME types.\r\n */\r\npublic static CharBufferDecoder allMimeTypes() {\r\n    return allMimeTypes(DEFAULT_DELIMITERS, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#allMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder#allMimeTypes(List<String>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code CharBufferDecoder} that supports all MIME types.\r\n * @param delimiters delimiter strings to use to split the input stream\r\n * @param stripDelimiter whether to remove delimiters from the resulting input strings\r\n */\r\npublic static CharBufferDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter) {\r\n    var textPlain = new MimeType(\"text\", \"plain\", DEFAULT_CHARSET);\r\n    return new CharBufferDecoder(delimiters, stripDelimiter, textPlain, MimeTypeUtils.ALL);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoder#allMimeTypes(List<String>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractCharSequenceDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.CharSequenceEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.Charset;\nimport java.nio.charset.CoderMalfunctionError;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.log.LogFormatUtils;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Encode from a {@code CharSequence} stream to a bytes stream.\n *\n * @author Sebastien Deleuze\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @since 5.0\n * @see StringDecoder\n */\npublic final class CharSequenceEncoder extends AbstractEncoder<CharSequence> {\n\n\t/**\n\t * The default charset used by the encoder.\n\t */\n\tpublic static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;\n\n\tprivate final ConcurrentMap<Charset, Float> charsetToMaxBytesPerChar = new ConcurrentHashMap<>(3);\n\n\n\tprivate CharSequenceEncoder(MimeType... mimeTypes) {\n\t\tsuper(mimeTypes);\n\t}\n\n\n\t@Override\n\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\tClass<?> clazz = elementType.toClass();\n\t\treturn super.canEncode(elementType, mimeType) && CharSequence.class.isAssignableFrom(clazz);\n\t}\n\n\t@Override\n\tpublic Flux<DataBuffer> encode(Publisher<? extends CharSequence> inputStream,\n\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(inputStream).map(charSequence ->\n\t\t\t\tencodeValue(charSequence, bufferFactory, elementType, mimeType, hints));\n\t}\n\n\t@Override\n\tpublic DataBuffer encodeValue(CharSequence charSequence, DataBufferFactory bufferFactory,\n\t\t\tResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (!Hints.isLoggingSuppressed(hints)) {\n\t\t\tLogFormatUtils.traceDebug(logger, traceOn -> {\n\t\t\t\tString formatted = LogFormatUtils.formatValue(charSequence, !traceOn);\n\t\t\t\treturn Hints.getLogPrefix(hints) + \"Writing \" + formatted;\n\t\t\t});\n\t\t}\n\t\tboolean release = true;\n\t\tCharset charset = getCharset(mimeType);\n\t\tint capacity = calculateCapacity(charSequence, charset);\n\t\tDataBuffer dataBuffer = bufferFactory.allocateBuffer(capacity);\n\t\ttry {\n\t\t\tdataBuffer.write(charSequence, charset);\n\t\t\trelease = false;\n\t\t}\n\t\tcatch (CoderMalfunctionError ex) {\n\t\t\tthrow new EncodingException(\"String encoding error: \" + ex.getMessage(), ex);\n\t\t}\n\t\tfinally {\n\t\t\tif (release) {\n\t\t\t\tDataBufferUtils.release(dataBuffer);\n\t\t\t}\n\t\t}\n\t\treturn dataBuffer;\n\t}\n\n\tint calculateCapacity(CharSequence sequence, Charset charset) {\n\t\tfloat maxBytesPerChar = this.charsetToMaxBytesPerChar.computeIfAbsent(charset,\n\t\t\t\tcs -> cs.newEncoder().maxBytesPerChar());\n\t\tfloat maxBytesForSequence = sequence.length() * maxBytesPerChar;\n\t\treturn (int) Math.ceil(maxBytesForSequence);\n\t}\n\n\tprivate Charset getCharset(@Nullable MimeType mimeType) {\n\t\tif (mimeType != null && mimeType.getCharset() != null) {\n\t\t\treturn mimeType.getCharset();\n\t\t}\n\t\telse {\n\t\t\treturn DEFAULT_CHARSET;\n\t\t}\n\t}\n\n\n\t/**\n\t * Create a {@code CharSequenceEncoder} that supports only \"text/plain\".\n\t */\n\tpublic static CharSequenceEncoder textPlainOnly() {\n\t\treturn new CharSequenceEncoder(new MimeType(\"text\", \"plain\", DEFAULT_CHARSET));\n\t}\n\n\t/**\n\t * Create a {@code CharSequenceEncoder} that supports all MIME types.\n\t */\n\tpublic static CharSequenceEncoder allMimeTypes() {\n\t\treturn new CharSequenceEncoder(new MimeType(\"text\", \"plain\", DEFAULT_CHARSET), MimeTypeUtils.ALL);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#DEFAULT_CHARSET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#DEFAULT_CHARSET",
    "headType": "field",
    "relation": "haveType",
    "tail": "Charset",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.CharSequenceEncoder#charsetToMaxBytesPerChar",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#charsetToMaxBytesPerChar",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConcurrentMap<Charset, Float>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    Class<?> clazz = elementType.toClass();\r\n    return super.canEncode(elementType, mimeType) && CharSequence.class.isAssignableFrom(clazz);\r\n}",
    "tailType": "method_code"
  }
]