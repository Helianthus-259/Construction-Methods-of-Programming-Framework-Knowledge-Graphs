[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isPresent(String annotationType) {\r\n    return isPresent(annotationType, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType) {\r\n    return isPresent(annotationType, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirectlyPresent(String annotationType) {\r\n    return isPresent(annotationType, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isDirectlyPresent(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(Object,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isPresent(Object requiredType, boolean directOnly) {\r\n    for (MergedAnnotation<?> annotation : this.annotations) {\r\n        Class<? extends Annotation> type = annotation.getType();\r\n        if (type == requiredType || type.getName().equals(requiredType)) {\r\n            return true;\r\n        }\r\n    }\r\n    if (!directOnly) {\r\n        for (AnnotationTypeMappings mappings : this.mappings) {\r\n            for (int i = 1; i < mappings.size(); i++) {\r\n                AnnotationTypeMapping mapping = mappings.get(i);\r\n                if (isMappingForType(mapping, requiredType)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#isPresent(Object,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType) {\r\n    return get(annotationType, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate) {\r\n    return get(annotationType, predicate, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType, @Nullable Predicate<? super MergedAnnotation<A>> predicate, @Nullable MergedAnnotationSelector<A> selector) {\r\n    MergedAnnotation<A> result = find(annotationType, predicate, selector);\r\n    return (result != null ? result : MergedAnnotation.missing());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#get(Class<A>,Predicate<? super MergedAnnotation<A>>,MergedAnnotationSelector<A>)",
    "tailType": "method"
  }
]