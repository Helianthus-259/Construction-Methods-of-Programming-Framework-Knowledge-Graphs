[
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#cursor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#cursor",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#hasNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasNext() {\r\n    return this.cursor < this.byteBuffers.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#hasNext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#hasNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic ByteBuffer next() {\r\n    int index = this.cursor;\r\n    if (index < this.byteBuffers.length) {\r\n        this.cursor = index + 1;\r\n        ByteBuffer next = this.byteBuffers[index];\r\n        return this.readOnly ? next.asReadOnlyBuffer() : next;\r\n    } else {\r\n        throw new NoSuchElementException();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.CompositeByteBuf;\nimport io.netty.buffer.Unpooled;\n\nimport org.springframework.util.Assert;\n\n/**\n * Implementation of the {@code DataBufferFactory} interface based on a\n * Netty 4 {@link ByteBufAllocator}.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 5.0\n * @see io.netty.buffer.PooledByteBufAllocator\n * @see io.netty.buffer.UnpooledByteBufAllocator\n */\npublic class NettyDataBufferFactory implements DataBufferFactory {\n\n\tprivate final ByteBufAllocator byteBufAllocator;\n\n\n\t/**\n\t * Create a new {@code NettyDataBufferFactory} based on the given factory.\n\t * @param byteBufAllocator the factory to use\n\t * @see io.netty.buffer.PooledByteBufAllocator\n\t * @see io.netty.buffer.UnpooledByteBufAllocator\n\t */\n\tpublic NettyDataBufferFactory(ByteBufAllocator byteBufAllocator) {\n\t\tAssert.notNull(byteBufAllocator, \"ByteBufAllocator must not be null\");\n\t\tthis.byteBufAllocator = byteBufAllocator;\n\t}\n\n\n\t/**\n\t * Return the {@code ByteBufAllocator} used by this factory.\n\t */\n\tpublic ByteBufAllocator getByteBufAllocator() {\n\t\treturn this.byteBufAllocator;\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic NettyDataBuffer allocateBuffer() {\n\t\tByteBuf byteBuf = this.byteBufAllocator.buffer();\n\t\treturn new NettyDataBuffer(byteBuf, this);\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer allocateBuffer(int initialCapacity) {\n\t\tByteBuf byteBuf = this.byteBufAllocator.buffer(initialCapacity);\n\t\treturn new NettyDataBuffer(byteBuf, this);\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer wrap(ByteBuffer byteBuffer) {\n\t\tByteBuf byteBuf = Unpooled.wrappedBuffer(byteBuffer);\n\t\treturn new NettyDataBuffer(byteBuf, this);\n\t}\n\n\t@Override\n\tpublic DataBuffer wrap(byte[] bytes) {\n\t\tByteBuf byteBuf = Unpooled.wrappedBuffer(bytes);\n\t\treturn new NettyDataBuffer(byteBuf, this);\n\t}\n\n\t/**\n\t * Wrap the given Netty {@link ByteBuf} in a {@code NettyDataBuffer}.\n\t * @param byteBuf the Netty byte buffer to wrap\n\t * @return the wrapped buffer\n\t */\n\tpublic NettyDataBuffer wrap(ByteBuf byteBuf) {\n\t\tbyteBuf.touch();\n\t\treturn new NettyDataBuffer(byteBuf, this);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * <p>This implementation uses Netty's {@link CompositeByteBuf}.\n\t */\n\t@Override\n\tpublic DataBuffer join(List<? extends DataBuffer> dataBuffers) {\n\t\tAssert.notEmpty(dataBuffers, \"DataBuffer List must not be empty\");\n\t\tint bufferCount = dataBuffers.size();\n\t\tif (bufferCount == 1) {\n\t\t\treturn dataBuffers.get(0);\n\t\t}\n\t\tCompositeByteBuf composite = this.byteBufAllocator.compositeBuffer(bufferCount);\n\t\tfor (DataBuffer dataBuffer : dataBuffers) {\n\t\t\tAssert.isInstanceOf(NettyDataBuffer.class, dataBuffer);\n\t\t\tcomposite.addComponent(true, ((NettyDataBuffer) dataBuffer).getNativeBuffer());\n\t\t}\n\t\treturn new NettyDataBuffer(composite, this);\n\t}\n\n\t@Override\n\tpublic boolean isDirect() {\n\t\treturn this.byteBufAllocator.isDirectBufferPooled();\n\t}\n\n\t/**\n\t * Return the given Netty {@link DataBuffer} as a {@link ByteBuf}.\n\t * <p>Returns the {@linkplain NettyDataBuffer#getNativeBuffer() native buffer}\n\t * if {@code dataBuffer} is a {@link NettyDataBuffer}; returns\n\t * {@link Unpooled#wrappedBuffer(ByteBuffer)} otherwise.\n\t * @param dataBuffer the {@code DataBuffer} to return a {@code ByteBuf} for\n\t * @return the netty {@code ByteBuf}\n\t */\n\tpublic static ByteBuf toByteBuf(DataBuffer dataBuffer) {\n\t\tif (dataBuffer instanceof NettyDataBuffer nettyDataBuffer) {\n\t\t\treturn nettyDataBuffer.getNativeBuffer();\n\t\t}\n\t\telse {\n\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(dataBuffer.readableByteCount());\n\t\t\tdataBuffer.toByteBuffer(byteBuffer);\n\t\t\treturn Unpooled.wrappedBuffer(byteBuffer);\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"NettyDataBufferFactory (\" + this.byteBufAllocator + \")\";\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#byteBufAllocator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#byteBufAllocator",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteBufAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#getByteBufAllocator()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code ByteBufAllocator} used by this factory.\r\n */\r\npublic ByteBufAllocator getByteBufAllocator() {\r\n    return this.byteBufAllocator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#getByteBufAllocator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic NettyDataBuffer allocateBuffer() {\r\n    ByteBuf byteBuf = this.byteBufAllocator.buffer();\r\n    return new NettyDataBuffer(byteBuf, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#allocateBuffer()",
    "tailType": "method"
  }
]