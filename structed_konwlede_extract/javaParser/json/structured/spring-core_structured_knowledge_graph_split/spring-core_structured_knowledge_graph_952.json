[
  {
    "head": "org.springframework.core.io.AbstractResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always returns {@code true} for a resource\r\n * that {@link #exists() exists} (revised as of 5.1).\r\n */\r\n@Override\r\npublic boolean isReadable() {\r\n    return exists();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isOpen()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always returns {@code false}.\r\n */\r\n@Override\r\npublic boolean isOpen() {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#isOpen()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isOpen()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always returns {@code false}.\r\n */\r\n@Override\r\npublic boolean isFile() {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#isFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#isFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation throws a FileNotFoundException, assuming\r\n * that the resource cannot be resolved to a URL.\r\n */\r\n@Override\r\npublic URL getURL() throws IOException {\r\n    throw new FileNotFoundException(getDescription() + \" cannot be resolved to URL\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#getURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation builds a URI based on the URL returned\r\n * by {@link #getURL()}.\r\n */\r\n@Override\r\npublic URI getURI() throws IOException {\r\n    URL url = getURL();\r\n    try {\r\n        return ResourceUtils.toURI(url);\r\n    } catch (URISyntaxException ex) {\r\n        throw new IOException(\"Invalid URI [\" + url + \"]\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#getURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation throws a FileNotFoundException, assuming\r\n * that the resource cannot be resolved to an absolute file path.\r\n */\r\n@Override\r\npublic File getFile() throws IOException {\r\n    throw new FileNotFoundException(getDescription() + \" cannot be resolved to absolute file path\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#getFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#getFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#readableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns {@link Channels#newChannel(InputStream)}\r\n * with the result of {@link #getInputStream()}.\r\n * <p>This is the same as in {@link Resource}'s corresponding default method\r\n * but mirrored here for efficient JVM-level dispatching in a class hierarchy.\r\n */\r\n@Override\r\npublic ReadableByteChannel readableChannel() throws IOException {\r\n    return Channels.newChannel(getInputStream());\r\n}",
    "tailType": "method_code"
  }
]