[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FileSystemUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.File;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Rob Harrop\n */\nclass FileSystemUtilsTests {\n\n\t@Test\n\tvoid deleteRecursively() throws Exception {\n\t\tFile root = new File(\"./tmp/root\");\n\t\tFile child = new File(root, \"child\");\n\t\tFile grandchild = new File(child, \"grandchild\");\n\n\t\tgrandchild.mkdirs();\n\n\t\tFile bar = new File(child, \"bar.txt\");\n\t\tbar.createNewFile();\n\n\t\tassertThat(root).exists();\n\t\tassertThat(child).exists();\n\t\tassertThat(grandchild).exists();\n\t\tassertThat(bar).exists();\n\n\t\tFileSystemUtils.deleteRecursively(root);\n\n\t\tassertThat(root).doesNotExist();\n\t\tassertThat(child).doesNotExist();\n\t\tassertThat(grandchild).doesNotExist();\n\t\tassertThat(bar).doesNotExist();\n\t}\n\n\t@Test\n\tvoid copyRecursively() throws Exception {\n\t\tFile src = new File(\"./tmp/src\");\n\t\tFile child = new File(src, \"child\");\n\t\tFile grandchild = new File(child, \"grandchild\");\n\n\t\tgrandchild.mkdirs();\n\n\t\tFile bar = new File(child, \"bar.txt\");\n\t\tbar.createNewFile();\n\n\t\tassertThat(src).exists();\n\t\tassertThat(child).exists();\n\t\tassertThat(grandchild).exists();\n\t\tassertThat(bar).exists();\n\n\t\tFile dest = new File(\"./dest\");\n\t\tFileSystemUtils.copyRecursively(src, dest);\n\n\t\tassertThat(dest).exists();\n\t\tassertThat(new File(dest, child.getName())).exists();\n\n\t\tFileSystemUtils.deleteRecursively(src);\n\t\tassertThat(src).doesNotExist();\n\t}\n\n\n\t@AfterEach\n\tvoid tearDown() {\n\t\tFile tmp = new File(\"./tmp\");\n\t\tif (tmp.exists()) {\n\t\t\tFileSystemUtils.deleteRecursively(tmp);\n\t\t}\n\t\tFile dest = new File(\"./dest\");\n\t\tif (dest.exists()) {\n\t\t\tFileSystemUtils.deleteRecursively(dest);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#deleteRecursively()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deleteRecursively() throws Exception {\r\n    File root = new File(\"./tmp/root\");\r\n    File child = new File(root, \"child\");\r\n    File grandchild = new File(child, \"grandchild\");\r\n    grandchild.mkdirs();\r\n    File bar = new File(child, \"bar.txt\");\r\n    bar.createNewFile();\r\n    assertThat(root).exists();\r\n    assertThat(child).exists();\r\n    assertThat(grandchild).exists();\r\n    assertThat(bar).exists();\r\n    FileSystemUtils.deleteRecursively(root);\r\n    assertThat(root).doesNotExist();\r\n    assertThat(child).doesNotExist();\r\n    assertThat(grandchild).doesNotExist();\r\n    assertThat(bar).doesNotExist();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileSystemUtilsTests#deleteRecursively()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#deleteRecursively()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#copyRecursively()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyRecursively() throws Exception {\r\n    File src = new File(\"./tmp/src\");\r\n    File child = new File(src, \"child\");\r\n    File grandchild = new File(child, \"grandchild\");\r\n    grandchild.mkdirs();\r\n    File bar = new File(child, \"bar.txt\");\r\n    bar.createNewFile();\r\n    assertThat(src).exists();\r\n    assertThat(child).exists();\r\n    assertThat(grandchild).exists();\r\n    assertThat(bar).exists();\r\n    File dest = new File(\"./dest\");\r\n    FileSystemUtils.copyRecursively(src, dest);\r\n    assertThat(dest).exists();\r\n    assertThat(new File(dest, child.getName())).exists();\r\n    FileSystemUtils.deleteRecursively(src);\r\n    assertThat(src).doesNotExist();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileSystemUtilsTests#copyRecursively()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#copyRecursively()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#tearDown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@AfterEach\r\nvoid tearDown() {\r\n    File tmp = new File(\"./tmp\");\r\n    if (tmp.exists()) {\r\n        FileSystemUtils.deleteRecursively(tmp);\r\n    }\r\n    File dest = new File(\"./dest\");\r\n    if (dest.exists()) {\r\n        FileSystemUtils.deleteRecursively(dest);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileSystemUtilsTests#tearDown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileSystemUtilsTests#tearDown()",
    "headType": "method",
    "relation": "use",
    "tail": "@AfterEach",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n\n/**\n * {@link RuntimeHintsRegistrar} for {@link PathMatchingResourcePatternResolver}.\n * @author Brian Clozel\n */\nclass PathMatchingResourcePatternResolverRuntimeHints implements RuntimeHintsRegistrar {\n\n\t@Override\n\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\thints.reflection().registerType(TypeReference.of(\"org.eclipse.core.runtime.FileLocator\"));\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\r\n    hints.reflection().registerType(TypeReference.of(\"org.eclipse.core.runtime.FileLocator\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]