[
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\n\n/**\n * Callback interface that can be used to filter specific annotation types.\n *\n * <p>Note that the {@link MergedAnnotations} model (which this interface has been\n * designed for) always ignores lang annotations according to the {@link #PLAIN}\n * filter (for efficiency reasons). Any additional filters and even custom filter\n * implementations apply within this boundary and may only narrow further from here.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @since 5.2\n * @see MergedAnnotations\n */\n@FunctionalInterface\npublic interface AnnotationFilter {\n\n\t/**\n\t * {@link AnnotationFilter} that matches annotations in the\n\t * {@code java.lang} and {@code org.springframework.lang} packages\n\t * and their subpackages.\n\t * <p>This is the default filter in the {@link MergedAnnotations} model.\n\t */\n\tAnnotationFilter PLAIN = packages(\"java.lang\", \"org.springframework.lang\");\n\n\t/**\n\t * {@link AnnotationFilter} that matches annotations in the\n\t * {@code java} and {@code javax} packages and their subpackages.\n\t */\n\tAnnotationFilter JAVA = packages(\"java\", \"javax\");\n\n\t/**\n\t * {@link AnnotationFilter} that always matches and can be used when no\n\t * relevant annotation types are expected to be present at all.\n\t */\n\tAnnotationFilter ALL = new AnnotationFilter() {\n\t\t@Override\n\t\tpublic boolean matches(Annotation annotation) {\n\t\t\treturn true;\n\t\t}\n\t\t@Override\n\t\tpublic boolean matches(Class<?> type) {\n\t\t\treturn true;\n\t\t}\n\t\t@Override\n\t\tpublic boolean matches(String typeName) {\n\t\t\treturn true;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"All annotations filtered\";\n\t\t}\n\t};\n\n\t/**\n\t * {@link AnnotationFilter} that never matches and can be used when no\n\t * filtering is needed (allowing for any annotation types to be present).\n\t * @see #PLAIN\n\t * @deprecated as of 5.2.6 since the {@link MergedAnnotations} model\n\t * always ignores lang annotations according to the {@link #PLAIN} filter\n\t * (for efficiency reasons)\n\t */\n\t@Deprecated\n\tAnnotationFilter NONE = new AnnotationFilter() {\n\t\t@Override\n\t\tpublic boolean matches(Annotation annotation) {\n\t\t\treturn false;\n\t\t}\n\t\t@Override\n\t\tpublic boolean matches(Class<?> type) {\n\t\t\treturn false;\n\t\t}\n\t\t@Override\n\t\tpublic boolean matches(String typeName) {\n\t\t\treturn false;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"No annotation filtering\";\n\t\t}\n\t};\n\n\n\t/**\n\t * Test if the given annotation matches the filter.\n\t * @param annotation the annotation to test\n\t * @return {@code true} if the annotation matches\n\t */\n\tdefault boolean matches(Annotation annotation) {\n\t\treturn matches(annotation.annotationType());\n\t}\n\n\t/**\n\t * Test if the given type matches the filter.\n\t * @param type the annotation type to test\n\t * @return {@code true} if the annotation matches\n\t */\n\tdefault boolean matches(Class<?> type) {\n\t\treturn matches(type.getName());\n\t}\n\n\t/**\n\t * Test if the given type name matches the filter.\n\t * @param typeName the fully qualified class name of the annotation type to test\n\t * @return {@code true} if the annotation matches\n\t */\n\tboolean matches(String typeName);\n\n\n\t/**\n\t * Create a new {@link AnnotationFilter} that matches annotations in the\n\t * specified packages.\n\t * @param packages the annotation packages that should match\n\t * @return a new {@link AnnotationFilter} instance\n\t */\n\tstatic AnnotationFilter packages(String... packages) {\n\t\treturn new PackagesAnnotationFilter(packages);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationFilter#PLAIN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#PLAIN",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationFilter#JAVA",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#JAVA",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationFilter#ALL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#ALL",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationFilter#NONE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#NONE",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#matches(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given annotation matches the filter.\r\n * @param annotation the annotation to test\r\n * @return {@code true} if the annotation matches\r\n */\r\ndefault boolean matches(Annotation annotation) {\r\n    return matches(annotation.annotationType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilter#matches(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#matches(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given type matches the filter.\r\n * @param type the annotation type to test\r\n * @return {@code true} if the annotation matches\r\n */\r\ndefault boolean matches(Class<?> type) {\r\n    return matches(type.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilter#matches(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#matches(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test if the given type name matches the filter.\r\n * @param typeName the fully qualified class name of the annotation type to test\r\n * @return {@code true} if the annotation matches\r\n */\r\nboolean matches(String typeName);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilter#matches(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter#packages(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link AnnotationFilter} that matches annotations in the\r\n * specified packages.\r\n * @param packages the annotation packages that should match\r\n * @return a new {@link AnnotationFilter} instance\r\n */\r\nstatic AnnotationFilter packages(String... packages) {\r\n    return new PackagesAnnotationFilter(packages);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilter#packages(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  }
]