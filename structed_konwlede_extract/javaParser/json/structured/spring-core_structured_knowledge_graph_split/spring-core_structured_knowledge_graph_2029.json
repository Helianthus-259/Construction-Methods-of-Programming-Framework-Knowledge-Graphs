[
  {
    "head": "org.springframework.core.io.PathResourceTests#description()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileIsWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fileIsWritable() {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    assertThat(resource.isWritable()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#fileIsWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#fileIsWritable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#directoryIsNotWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directoryIsNotWritable() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThat(resource.isWritable()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#directoryIsNotWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#directoryIsNotWritable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#equalsAndHashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsAndHashCode() {\r\n    Resource resource1 = new PathResource(TEST_FILE);\r\n    Resource resource2 = new PathResource(TEST_FILE);\r\n    Resource resource3 = new PathResource(TEST_DIR);\r\n    assertThat(resource1).isEqualTo(resource1);\r\n    assertThat(resource1).isEqualTo(resource2);\r\n    assertThat(resource2).isEqualTo(resource1);\r\n    assertThat(resource1).isNotEqualTo(resource3);\r\n    assertThat(resource1).hasSameHashCodeAs(resource2);\r\n    assertThat(resource1).doesNotHaveSameHashCodeAs(resource3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#equalsAndHashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#equalsAndHashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForExistingFile(Path)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getOutputStreamForExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    PathResource resource = new PathResource(temporaryFolder.resolve(\"test\"));\r\n    FileCopyUtils.copy(\"test\".getBytes(StandardCharsets.UTF_8), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getOutputStreamForExistingFile(Path)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForExistingFile(Path)",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForNonExistingFile(Path)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getOutputStreamForNonExistingFile(@TempDir Path temporaryFolder) throws IOException {\r\n    File file = temporaryFolder.resolve(\"test\").toFile();\r\n    file.delete();\r\n    PathResource resource = new PathResource(file.toPath());\r\n    FileCopyUtils.copy(\"test\".getBytes(), resource.getOutputStream());\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getOutputStreamForNonExistingFile(Path)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForNonExistingFile(Path)",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForDirectory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getOutputStreamForDirectory() {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::getOutputStream);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getOutputStreamForDirectory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getOutputStreamForDirectory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getReadableByteChannel() throws IOException {\r\n    PathResource resource = new PathResource(TEST_FILE);\r\n    try (ReadableByteChannel channel = resource.readableChannel()) {\r\n        ByteBuffer buffer = ByteBuffer.allocate((int) resource.contentLength());\r\n        channel.read(buffer);\r\n        buffer.rewind();\r\n        assertThat(buffer.limit()).isGreaterThan(0);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]