[
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#sequenceGenerator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#sequenceGenerator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, AtomicInteger>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#getFeatureNamePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "String getFeatureNamePrefix() {\r\n    return this.featureNamePrefix;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#getFeatureNamePrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#generateClassName(String,ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a unique {@link ClassName} based on the specified\r\n * {@code featureName} and {@code target}. If the {@code target} is\r\n * {@code null}, the configured main target of this instance is used.\r\n * <p>The class name is a suffixed version of the target. For instance, a\r\n * {@code com.example.Demo} target with an {@code Initializer} feature name\r\n * leads to a {@code com.example.Demo__Initializer} generated class name.\r\n * The feature name is qualified by the configured feature name prefix,\r\n * if any.\r\n * <p>Generated class names are unique. If such a feature was already\r\n * requested for this target, a counter is used to ensure uniqueness.\r\n * @param featureName the name of the feature that the generated class\r\n * supports\r\n * @param target the class the newly generated class relates to, or\r\n * {@code null} to use the main target\r\n * @return a unique generated class name\r\n */\r\npublic ClassName generateClassName(String featureName, @Nullable ClassName target) {\r\n    return generateSequencedClassName(getRootName(featureName, target));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#generateClassName(String,ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#getRootName(String,ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String getRootName(String featureName, @Nullable ClassName target) {\r\n    Assert.hasLength(featureName, \"'featureName' must not be empty\");\r\n    featureName = clean(featureName);\r\n    ClassName targetToUse = (target != null ? target : this.defaultTarget);\r\n    String featureNameToUse = this.featureNamePrefix + featureName;\r\n    return toName(targetToUse).replace(\"$\", \"_\") + SEPARATOR + StringUtils.capitalize(featureNameToUse);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#getRootName(String,ClassName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#clean(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String clean(String name) {\r\n    StringBuilder clean = new StringBuilder();\r\n    boolean lastNotLetter = true;\r\n    for (char ch : name.toCharArray()) {\r\n        if (!Character.isLetter(ch)) {\r\n            lastNotLetter = true;\r\n            continue;\r\n        }\r\n        clean.append(lastNotLetter ? Character.toUpperCase(ch) : ch);\r\n        lastNotLetter = false;\r\n    }\r\n    return (!clean.isEmpty()) ? clean.toString() : AOT_FEATURE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#clean(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#generateSequencedClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private ClassName generateSequencedClassName(String name) {\r\n    int sequence = this.sequenceGenerator.computeIfAbsent(name, key -> new AtomicInteger()).getAndIncrement();\r\n    if (sequence > 0) {\r\n        name = name + sequence;\r\n    }\r\n    return ClassName.get(ClassUtils.getPackageName(name), ClassUtils.getShortName(name));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#generateSequencedClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#withFeatureNamePrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link ClassNameGenerator} instance for the specified\r\n * feature name prefix, keeping track of all the class names generated\r\n * by this instance.\r\n * @param featureNamePrefix the feature name prefix to use\r\n * @return a new instance for the specified feature name prefix\r\n */\r\nClassNameGenerator withFeatureNamePrefix(String featureNamePrefix) {\r\n    return new ClassNameGenerator(this.defaultTarget, featureNamePrefix, this.sequenceGenerator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#withFeatureNamePrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator#toName(ClassName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String toName(ClassName className) {\r\n    return GeneratedTypeReference.of(className).getName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGenerator#toName(ClassName)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.TestGroupParsingTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture;\n\nimport java.util.Collections;\nimport java.util.EnumSet;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link TestGroup} parsing.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\nclass TestGroupParsingTests {\n\n\t@Test\n\tvoid parseNull() {\n\t\tassertThat(TestGroup.parse(null)).isEqualTo(Collections.emptySet());\n\t}\n\n\t@Test\n\tvoid parseEmptyString() {\n\t\tassertThat(TestGroup.parse(\"\")).isEqualTo(Collections.emptySet());\n\t}\n\n\t@Test\n\tvoid parseBlankString() {\n\t\tassertThat(TestGroup.parse(\"     \")).isEqualTo(Collections.emptySet());\n\t}\n\n\t@Test\n\tvoid parseWithSpaces() {\n\t\tassertThat(TestGroup.parse(\" LONG_RUNNING,  LONG_RUNNING \")).containsOnly(TestGroup.LONG_RUNNING);\n\t}\n\n\t@Test\n\tvoid parseInMixedCase() {\n\t\tassertThat(TestGroup.parse(\"long_running,  LonG_RunnING\")).containsOnly(TestGroup.LONG_RUNNING);\n\t}\n\n\t@Test\n\tvoid parseMissing() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> TestGroup.parse(\"long_running, missing\"))\n\t\t\t.withMessageContaining(\"Unable to find test group 'missing' when parsing \" +\n\t\t\t\t\t\"testGroups value: 'long_running, missing'. Available groups include: \" +\n\t\t\t\t\t\"[LONG_RUNNING]\");\n\t}\n\n\t@Test\n\tvoid parseAll() {\n\t\tassertThat(TestGroup.parse(\"all\")).isEqualTo(EnumSet.allOf(TestGroup.class));\n\t}\n\n\t@Test\n\tvoid parseAllExceptLongRunning() {\n\t\tSet<TestGroup> expected = EnumSet.allOf(TestGroup.class);\n\t\texpected.remove(TestGroup.LONG_RUNNING);\n\t\tassertThat(TestGroup.parse(\"all-long_running\")).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid parseAllExceptMissing() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> TestGroup.parse(\"all-missing\"))\n\t\t\t.withMessageContaining(\"Unable to find test group 'missing' when parsing \" +\n\t\t\t\t\t\"testGroups value: 'all-missing'. Available groups include: \" +\n\t\t\t\t\t\"[LONG_RUNNING]\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests#parseNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseNull() {\r\n    assertThat(TestGroup.parse(null)).isEqualTo(Collections.emptySet());\r\n}",
    "tailType": "method_code"
  }
]