[
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\r\n * <pre class=\"code\">Assert.isAssignable(Number.class, myClass, \"Number expected\");</pre>\r\n * @param superType the supertype to check against\r\n * @param subType the subtype to check\r\n * @param message a message which will be prepended to provide further context.\r\n * If it is empty or ends in \":\" or \";\" or \",\" or \".\", a full exception message\r\n * will be appended. If it ends in a space, the name of the offending subtype\r\n * will be appended. In any other case, a \":\" with a space and the name of the\r\n * offending subtype will be appended.\r\n * @throws IllegalArgumentException if the classes are not assignable\r\n */\r\n@Contract(\"_, null, _ -> fail\")\r\npublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {\r\n    notNull(superType, \"Supertype to check against must not be null\");\r\n    if (subType == null || !superType.isAssignableFrom(subType)) {\r\n        assignableCheckFailed(superType, subType, message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\r\n * <pre class=\"code\">\r\n * Assert.isAssignable(Number.class, myClass, () -&gt; \"Processing \" + myAttributeName + \":\");\r\n * </pre>\r\n * @param superType the supertype to check against\r\n * @param subType the subtype to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails. See {@link #isAssignable(Class, Class, String)} for details.\r\n * @throws IllegalArgumentException if the classes are not assignable\r\n * @since 5.0\r\n */\r\n@Contract(\"_, null, _ -> fail\")\r\npublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {\r\n    notNull(superType, \"Supertype to check against must not be null\");\r\n    if (subType == null || !superType.isAssignableFrom(subType)) {\r\n        assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.\r\n * <pre class=\"code\">Assert.isAssignable(Number.class, myClass);</pre>\r\n * @param superType the supertype to check\r\n * @param subType the subtype to check\r\n * @throws IllegalArgumentException if the classes are not assignable\r\n */\r\n@Contract(\"_, null -> fail\")\r\npublic static void isAssignable(Class<?> superType, @Nullable Class<?> subType) {\r\n    isAssignable(superType, subType, \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isAssignable(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#instanceCheckFailed(Class<?>,Object,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void instanceCheckFailed(Class<?> type, @Nullable Object obj, @Nullable String msg) {\r\n    String className = (obj != null ? obj.getClass().getName() : \"null\");\r\n    String result = \"\";\r\n    boolean defaultMessage = true;\r\n    if (StringUtils.hasLength(msg)) {\r\n        if (endsWithSeparator(msg)) {\r\n            result = msg + \" \";\r\n        } else {\r\n            result = messageWithTypeName(msg, className);\r\n            defaultMessage = false;\r\n        }\r\n    }\r\n    if (defaultMessage) {\r\n        result = result + (\"Object of class [\" + className + \"] must be an instance of \" + type);\r\n    }\r\n    throw new IllegalArgumentException(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#instanceCheckFailed(Class<?>,Object,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#assignableCheckFailed(Class<?>,Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assignableCheckFailed(Class<?> superType, @Nullable Class<?> subType, @Nullable String msg) {\r\n    String result = \"\";\r\n    boolean defaultMessage = true;\r\n    if (StringUtils.hasLength(msg)) {\r\n        if (endsWithSeparator(msg)) {\r\n            result = msg + \" \";\r\n        } else {\r\n            result = messageWithTypeName(msg, subType);\r\n            defaultMessage = false;\r\n        }\r\n    }\r\n    if (defaultMessage) {\r\n        result = result + (subType + \" is not assignable to \" + superType);\r\n    }\r\n    throw new IllegalArgumentException(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#assignableCheckFailed(Class<?>,Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#endsWithSeparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean endsWithSeparator(String msg) {\r\n    return (msg.endsWith(\":\") || msg.endsWith(\";\") || msg.endsWith(\",\") || msg.endsWith(\".\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#endsWithSeparator(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#messageWithTypeName(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String messageWithTypeName(String msg, @Nullable Object typeName) {\r\n    return msg + (msg.endsWith(\" \") ? \"\" : \": \") + typeName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#messageWithTypeName(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#nullSafeGet(Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static String nullSafeGet(@Nullable Supplier<String> messageSupplier) {\r\n    return (messageSupplier != null ? messageSupplier.get() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#nullSafeGet(Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#nullSafeGet(Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]