[
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#COLLECTION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#COLLECTION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ObjectUtils#MAP",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ObjectUtils#MAP",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isCheckedException(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the given throwable is a checked exception:\r\n * that is, neither a RuntimeException nor an Error.\r\n * @param ex the throwable to check\r\n * @return whether the throwable is a checked exception\r\n * @see java.lang.Exception\r\n * @see java.lang.RuntimeException\r\n * @see java.lang.Error\r\n */\r\npublic static boolean isCheckedException(Throwable ex) {\r\n    return !(ex instanceof RuntimeException || ex instanceof Error);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#isCheckedException(Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isCompatibleWithThrowsClause(Throwable,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given exception is compatible with the specified\r\n * exception types, as declared in a {@code throws} clause.\r\n * @param ex the exception to check\r\n * @param declaredExceptions the exception types declared in the throws clause\r\n * @return whether the given exception is compatible\r\n */\r\npublic static boolean isCompatibleWithThrowsClause(Throwable ex, Class<?>@Nullable ... declaredExceptions) {\r\n    if (!isCheckedException(ex)) {\r\n        return true;\r\n    }\r\n    if (declaredExceptions != null) {\r\n        for (Class<?> declaredException : declaredExceptions) {\r\n            if (declaredException.isInstance(ex)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#isCompatibleWithThrowsClause(Throwable,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isArray(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given object is an array:\r\n * either an Object array or a primitive array.\r\n * @param obj the object to check\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean isArray(@Nullable Object obj) {\r\n    return (obj != null && obj.getClass().isArray());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#isArray(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isArray(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isEmpty(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given array is empty:\r\n * i.e. {@code null} or of zero length.\r\n * @param array the array to check\r\n * @see #isEmpty(Object)\r\n */\r\n@Contract(\"null -> true\")\r\npublic static boolean isEmpty(@Nullable Object @Nullable [] array) {\r\n    return (array == null || array.length == 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#isEmpty(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isEmpty(Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isEmpty(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given object is empty.\r\n * <p>This method supports the following object types.\r\n * <ul>\r\n * <li>{@code Optional}: considered empty if not {@link Optional#isPresent()}</li>\r\n * <li>{@code Array}: considered empty if its length is zero</li>\r\n * <li>{@link CharSequence}: considered empty if its length is zero</li>\r\n * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>\r\n * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>\r\n * </ul>\r\n * <p>If the given object is non-null and not one of the aforementioned\r\n * supported types, this method returns {@code false}.\r\n * @param obj the object to check\r\n * @return {@code true} if the object is {@code null} or <em>empty</em>\r\n * @since 4.2\r\n * @see Optional#isPresent()\r\n * @see ObjectUtils#isEmpty(Object[])\r\n * @see StringUtils#hasLength(CharSequence)\r\n * @see CollectionUtils#isEmpty(java.util.Collection)\r\n * @see CollectionUtils#isEmpty(java.util.Map)\r\n */\r\n@Contract(\"null -> true\")\r\npublic static boolean isEmpty(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return true;\r\n    }\r\n    if (obj instanceof Optional<?> optional) {\r\n        return optional.isEmpty();\r\n    }\r\n    if (obj instanceof CharSequence charSequence) {\r\n        return charSequence.isEmpty();\r\n    }\r\n    if (obj.getClass().isArray()) {\r\n        return Array.getLength(obj) == 0;\r\n    }\r\n    if (obj instanceof Collection<?> collection) {\r\n        return collection.isEmpty();\r\n    }\r\n    if (obj instanceof Map<?, ?> map) {\r\n        return map.isEmpty();\r\n    }\r\n    // else\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#isEmpty(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#isEmpty(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#unwrapOptional(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Unwrap the given object which is potentially a {@link java.util.Optional}.\r\n * @param obj the candidate object\r\n * @return either the value held within the {@code Optional}, {@code null}\r\n * if the {@code Optional} is empty, or simply the given object as-is\r\n * @since 5.0\r\n */\r\n@Nullable\r\npublic static Object unwrapOptional(@Nullable Object obj) {\r\n    if (obj instanceof Optional<?> optional) {\r\n        Object result = optional.orElse(null);\r\n        Assert.isTrue(!(result instanceof Optional), \"Multi-level Optional usage not supported\");\r\n        return result;\r\n    }\r\n    return obj;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#unwrapOptional(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#unwrapOptional(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]