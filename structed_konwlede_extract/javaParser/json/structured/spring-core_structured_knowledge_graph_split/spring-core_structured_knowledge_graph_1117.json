[
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTag#key",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#key",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTag#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#getKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getKey() {\r\n    return this.key;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTag#getKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#getKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getValue() {\r\n    return this.value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderTag#getValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderTag#getValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.metrics.jfr",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.metrics",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.metrics",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.metrics",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.metrics.StartupStep",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.metrics;\n\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Step recording metrics about a particular phase or action happening during the {@link ApplicationStartup}.\n *\n * <p>The lifecycle of a {@code StartupStep} goes as follows:\n * <ol>\n * <li>the step is created and starts by calling {@link ApplicationStartup#start(String) the application startup}\n * and is assigned a unique {@link StartupStep#getId() id}.\n * <li>we can then attach information with {@link Tags} during processing\n * <li>we then need to mark the {@link #end()} of the step\n * </ol>\n *\n * <p>Implementations can track the \"execution time\" or other metrics for steps.\n *\n * @author Brian Clozel\n * @since 5.3\n */\npublic interface StartupStep {\n\n\t/**\n\t * Return the name of the startup step.\n\t * <p>A step name describes the current action or phase. This technical\n\t * name should be \".\" namespaced and can be reused to describe other instances of\n\t * similar steps during application startup.\n\t */\n\tString getName();\n\n\t/**\n\t * Return the unique id for this step within the application startup.\n\t */\n\tlong getId();\n\n\t/**\n\t * Return, if available, the id of the parent step.\n\t * <p>The parent step is the step that was started the most recently\n\t * when the current step was created.\n\t */\n\t@Nullable Long getParentId();\n\n\t/**\n\t * Add a {@link Tag} to the step.\n\t * @param key tag key\n\t * @param value tag value\n\t */\n\tStartupStep tag(String key, String value);\n\n\t/**\n\t * Add a {@link Tag} to the step.\n\t * @param key tag key\n\t * @param value {@link Supplier} for the tag value\n\t */\n\tStartupStep tag(String key, Supplier<String> value);\n\n\t/**\n\t * Return the {@link Tag} collection for this step.\n\t */\n\tTags getTags();\n\n\t/**\n\t * Record the state of the step and possibly other metrics like execution time.\n\t * <p>Once ended, changes on the step state are not allowed.\n\t */\n\tvoid end();\n\n\n\t/**\n\t * Immutable collection of {@link Tag}.\n\t */\n\tinterface Tags extends Iterable<Tag> {\n\t}\n\n\n\t/**\n\t * Simple key/value association for storing step metadata.\n\t */\n\tinterface Tag {\n\n\t\t/**\n\t\t * Return the {@code Tag} name.\n\t\t */\n\t\tString getKey();\n\n\t\t/**\n\t\t * Return the {@code Tag} value.\n\t\t */\n\t\tString getValue();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the startup step.\r\n * <p>A step name describes the current action or phase. This technical\r\n * name should be \".\" namespaced and can be reused to describe other instances of\r\n * similar steps during application startup.\r\n */\r\nString getName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.StartupStep#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep#getId()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the unique id for this step within the application startup.\r\n */\r\nlong getId();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.StartupStep#getId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.StartupStep#getParentId()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return, if available, the id of the parent step.\r\n * <p>The parent step is the step that was started the most recently\r\n * when the current step was created.\r\n */\r\n@Nullable\r\nLong getParentId();",
    "tailType": "method_code"
  }
]