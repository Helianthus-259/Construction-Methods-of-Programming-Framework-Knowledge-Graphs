[
  {
    "head": "org.springframework.core.io.PathResource#getFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying {@link File} reference.\r\n */\r\n@Override\r\npublic File getFile() throws IOException {\r\n    try {\r\n        return this.path.toFile();\r\n    } catch (UnsupportedOperationException ex) {\r\n        // Only paths on the default file system can be converted to a File:\r\n        // Do exception translation for cases where conversion is not possible.\r\n        throw new FileNotFoundException(this.path + \" cannot be resolved to absolute file path\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#readableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens a {@link ReadableByteChannel} for the underlying file.\r\n * @see Files#newByteChannel(Path, OpenOption...)\r\n */\r\n@Override\r\npublic ReadableByteChannel readableChannel() throws IOException {\r\n    try {\r\n        return Files.newByteChannel(this.path, StandardOpenOption.READ);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#readableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#readableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#writableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens a {@link WritableByteChannel} for the underlying file.\r\n * @see Files#newByteChannel(Path, OpenOption...)\r\n */\r\n@Override\r\npublic WritableByteChannel writableChannel() throws IOException {\r\n    return Files.newByteChannel(this.path, StandardOpenOption.WRITE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#writableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#writableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#contentLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying file's length.\r\n */\r\n@Override\r\npublic long contentLength() throws IOException {\r\n    return Files.size(this.path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#contentLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#contentLength()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#lastModified()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying file's timestamp.\r\n * @see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic long lastModified() throws IOException {\r\n    // We can not use the superclass method since it uses conversion to a File and\r\n    // only a Path on the default file system can be converted to a File...\r\n    return Files.getLastModifiedTime(this.path).toMillis();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#lastModified()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#lastModified()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation creates a {@link PathResource}, applying the given path\r\n * relative to the path of the underlying file of this resource descriptor.\r\n * @see java.nio.file.Path#resolve(String)\r\n */\r\n@Override\r\npublic Resource createRelative(String relativePath) {\r\n    return new PathResource(this.path.resolve(relativePath));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the name of the file.\r\n * @see java.nio.file.Path#getFileName()\r\n */\r\n@Override\r\npublic String getFilename() {\r\n    return this.path.getFileName().toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getFilename()",
    "tailType": "method"
  }
]