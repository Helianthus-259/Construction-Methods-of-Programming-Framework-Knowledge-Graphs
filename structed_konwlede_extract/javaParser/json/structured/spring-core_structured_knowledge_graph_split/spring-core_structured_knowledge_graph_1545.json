[
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport java.util.function.Predicate;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\n/**\n * Tests for {@link ProxyHintsPredicates}.\n *\n * @author Brian Clozel\n */\nclass ProxyHintsPredicatesTests {\n\n\tprivate final ProxyHintsPredicates proxy = new ProxyHintsPredicates();\n\n\tprivate RuntimeHints runtimeHints;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.runtimeHints = new RuntimeHints();\n\t}\n\n\t@Test\n\tvoid shouldFailForEmptyInterfacesArray() {\n\t\tassertThatThrownBy(() -> this.proxy.forInterfaces(new Class<?>[] {})).isInstanceOf(IllegalArgumentException.class);\n\t}\n\n\t@Test\n\tvoid proxyForInterfacesMatchesProxyHint() {\n\t\tthis.runtimeHints.proxies().registerJdkProxy(FirstTestInterface.class, SecondTestInterface.class);\n\t\tassertPredicateMatches(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));\n\t}\n\n\t@Test\n\tvoid proxyForInterfacesDoesNotMatchProxyHintDifferentOrder() {\n\t\tthis.runtimeHints.proxies().registerJdkProxy(SecondTestInterface.class, FirstTestInterface.class);\n\t\tassertPredicateDoesNotMatch(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));\n\t}\n\n\tinterface FirstTestInterface {\n\n\t}\n\n\tinterface SecondTestInterface {\n\n\t}\n\n\tprivate void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\n\t\tassertThat(predicate.test(this.runtimeHints)).isTrue();\n\t}\n\n\tprivate void assertPredicateDoesNotMatch(Predicate<RuntimeHints> predicate) {\n\t\tassertThat(predicate.test(this.runtimeHints)).isFalse();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxy",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxy",
    "headType": "field",
    "relation": "haveType",
    "tail": "ProxyHintsPredicates",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#runtimeHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#runtimeHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    this.runtimeHints = new RuntimeHints();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldFailForEmptyInterfacesArray() {\r\n    assertThatThrownBy(() -> this.proxy.forInterfaces(new Class<?>[] ;)).isInstanceOf(IllegalArgumentException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#shouldFailForEmptyInterfacesArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesMatchesProxyHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid proxyForInterfacesMatchesProxyHint() {\r\n    this.runtimeHints.proxies().registerJdkProxy(FirstTestInterface.class, SecondTestInterface.class);\r\n    assertPredicateMatches(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesMatchesProxyHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesMatchesProxyHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid proxyForInterfacesDoesNotMatchProxyHintDifferentOrder() {\r\n    this.runtimeHints.proxies().registerJdkProxy(SecondTestInterface.class, FirstTestInterface.class);\r\n    assertPredicateDoesNotMatch(this.proxy.forInterfaces(FirstTestInterface.class, SecondTestInterface.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#proxyForInterfacesDoesNotMatchProxyHintDifferentOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertPredicateMatches(Predicate<RuntimeHints> predicate) {\r\n    assertThat(predicate.test(this.runtimeHints)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ProxyHintsPredicatesTests#assertPredicateMatches(Predicate<RuntimeHints>)",
    "tailType": "method"
  }
]