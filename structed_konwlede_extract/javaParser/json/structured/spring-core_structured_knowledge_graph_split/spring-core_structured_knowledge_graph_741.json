[
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#hasMethodAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getInheritedParameterAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<Annotation[][]> getInheritedParameterAnnotations() {\r\n    List<Annotation[][]> parameterAnnotations = this.inheritedParameterAnnotations;\r\n    if (parameterAnnotations == null) {\r\n        parameterAnnotations = new ArrayList<>();\r\n        Class<?> clazz = this.method.getDeclaringClass();\r\n        while (clazz != null) {\r\n            for (Class<?> ifc : clazz.getInterfaces()) {\r\n                for (Method candidate : ifc.getMethods()) {\r\n                    if (isOverrideFor(candidate)) {\r\n                        parameterAnnotations.add(candidate.getParameterAnnotations());\r\n                    }\r\n                }\r\n            }\r\n            clazz = clazz.getSuperclass();\r\n            if (clazz == Object.class) {\r\n                clazz = null;\r\n            }\r\n            if (clazz != null) {\r\n                for (Method candidate : clazz.getMethods()) {\r\n                    if (isOverrideFor(candidate)) {\r\n                        parameterAnnotations.add(candidate.getParameterAnnotations());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inheritedParameterAnnotations = parameterAnnotations;\r\n    }\r\n    return parameterAnnotations;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getInheritedParameterAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#isOverrideFor(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isOverrideFor(Method candidate) {\r\n    if (!candidate.getName().equals(this.method.getName()) || candidate.getParameterCount() != this.method.getParameterCount()) {\r\n        return false;\r\n    }\r\n    Class<?>[] paramTypes = this.method.getParameterTypes();\r\n    if (Arrays.equals(candidate.getParameterTypes(), paramTypes)) {\r\n        return true;\r\n    }\r\n    for (int i = 0; i < paramTypes.length; i++) {\r\n        if (paramTypes[i] != ResolvableType.forMethodParameter(candidate, i, this.method.getDeclaringClass()).resolve()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#isOverrideFor(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other != null && getClass() == other.getClass() && this.method.equals(((AnnotatedMethod) other).method)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.method.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.method.toGenericString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#findProvidedArgument(MethodParameter,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Support methods for use in subclass variants\r\n@Nullable\r\nprotected static Object findProvidedArgument(MethodParameter parameter, @Nullable Object... providedArgs) {\r\n    if (!ObjectUtils.isEmpty(providedArgs)) {\r\n        for (Object providedArg : providedArgs) {\r\n            if (parameter.getParameterType().isInstance(providedArg)) {\r\n                return providedArg;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#findProvidedArgument(MethodParameter,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#findProvidedArgument(MethodParameter,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#formatArgumentError(MethodParameter,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected static String formatArgumentError(MethodParameter param, String message) {\r\n    return \"Could not resolve parameter [\" + param.getParameterIndex() + \"] in \" + param.getExecutable().toGenericString() + (StringUtils.hasText(message) ? \": \" + message : \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#formatArgumentError(MethodParameter,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotatedMethodParameter",
    "tailType": "class"
  }
]