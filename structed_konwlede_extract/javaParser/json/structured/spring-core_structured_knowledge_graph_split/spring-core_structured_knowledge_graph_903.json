[
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptor#CACHED_COMMON_TYPES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#CACHED_COMMON_TYPES",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptor#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptor#resolvableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#resolvableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResolvableType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptor#annotatedElement",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#annotatedElement",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotatedElementAdapter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getObjectType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Variation of {@link #getType()} that accounts for a primitive type by\r\n * returning its object wrapper type.\r\n * <p>This is useful for conversion service implementations that wish to\r\n * normalize to object-based types and not work with primitive types directly.\r\n */\r\npublic Class<?> getObjectType() {\r\n    return ClassUtils.resolvePrimitiveIfNecessary(getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getObjectType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The type of the backing class, method parameter, field, or property\r\n * described by this TypeDescriptor.\r\n * <p>Returns primitive types as-is. See {@link #getObjectType()} for a\r\n * variation of this operation that resolves primitive types to their\r\n * corresponding Object types if necessary.\r\n * @see #getObjectType()\r\n */\r\npublic Class<?> getType() {\r\n    return this.type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getResolvableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying {@link ResolvableType}.\r\n * @since 4.0\r\n */\r\npublic ResolvableType getResolvableType() {\r\n    return this.resolvableType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getResolvableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying source of the descriptor. Will return a {@link Field},\r\n * {@link MethodParameter} or {@link Type} depending on how the {@link TypeDescriptor}\r\n * was constructed. This method is primarily to provide access to additional\r\n * type information or meta-data that alternative JVM languages may provide.\r\n * @since 4.0\r\n */\r\npublic Object getSource() {\r\n    return this.resolvableType.getSource();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#nested(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a type descriptor for a nested type declared within this descriptor.\r\n * @param nestingLevel the nesting level of the collection/array element or\r\n * map key/value declaration within the property\r\n * @return the nested type descriptor at the specified nesting level, or\r\n * {@code null} if it could not be obtained\r\n * @since 6.1\r\n */\r\n@Nullable\r\npublic TypeDescriptor nested(int nestingLevel) {\r\n    ResolvableType nested = this.resolvableType;\r\n    for (int i = 0; i < nestingLevel; i++) {\r\n        if (Object.class == nested.getType()) {\r\n            // Could be a collection type but we don't know about its element type,\r\n            // so let's just assume there is an element type of type Object...\r\n        } else {\r\n            nested = nested.getNested(2);\r\n        }\r\n    }\r\n    if (nested == ResolvableType.NONE) {\r\n        return null;\r\n    }\r\n    return getRelatedIfResolvable(nested);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#nested(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#nested(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#narrow(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Narrows this {@link TypeDescriptor} by setting its type to the class of the\r\n * provided value.\r\n * <p>If the value is {@code null}, no narrowing is performed and this TypeDescriptor\r\n * is returned unchanged.\r\n * <p>Designed to be called by binding frameworks when they read property, field,\r\n * or method return values. Allows such frameworks to narrow a TypeDescriptor built\r\n * from a declared property, field, or method return value type. For example, a field\r\n * declared as {@code java.lang.Object} would be narrowed to {@code java.util.HashMap}\r\n * if it was set to a {@code java.util.HashMap} value. The narrowed TypeDescriptor\r\n * can then be used to convert the HashMap to some other type. Annotation and nested\r\n * type context is preserved by the narrowed copy.\r\n * @param value the value to use for narrowing this type descriptor\r\n * @return this TypeDescriptor narrowed (returns a copy with its type updated to the\r\n * class of the provided value)\r\n */\r\npublic TypeDescriptor narrow(@Nullable Object value) {\r\n    if (value == null) {\r\n        return this;\r\n    }\r\n    ResolvableType narrowed = ResolvableType.forType(value.getClass(), getResolvableType());\r\n    return new TypeDescriptor(narrowed, value.getClass(), getAnnotations());\r\n}",
    "tailType": "method_code"
  }
]