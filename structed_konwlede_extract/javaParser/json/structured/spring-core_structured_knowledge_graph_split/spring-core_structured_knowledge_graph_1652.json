[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationTypeReturnsAnnotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationTypeReturnsAnnotationType() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(Mapped.class);\r\n    assertThat(mappings.get(0).getAnnotationType()).isEqualTo(Mapped.class);\r\n    assertThat(mappings.get(1).getAnnotationType()).isEqualTo(MappedTarget.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationTypeReturnsAnnotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationTypeReturnsAnnotationType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMetaTypeReturnsTypes() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(ThreeDeepA.class);\r\n    AnnotationTypeMapping mappingC = mappings.get(2);\r\n    assertThat(mappingC.getMetaTypes()).containsExactly(ThreeDeepA.class, ThreeDeepB.class, ThreeDeepC.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getMetaTypeReturnsTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenRootReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationWhenRootReturnsNull() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(Mapped.class);\r\n    assertThat(mappings.get(0).getAnnotation()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenRootReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenRootReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenMetaAnnotationReturnsAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationWhenMetaAnnotationReturnsAnnotation() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(Mapped.class);\r\n    assertThat(mappings.get(1).getAnnotation()).isEqualTo(Mapped.class.getAnnotation(MappedTarget.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenMetaAnnotationReturnsAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAnnotationWhenMetaAnnotationReturnsAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAttributesReturnsAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAttributesReturnsAttributes() {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(Mapped.class).get(0);\r\n    AttributeMethods attributes = mapping.getAttributes();\r\n    assertThat(attributes.size()).isEqualTo(2);\r\n    assertThat(attributes.get(0).getName()).isEqualTo(\"alias\");\r\n    assertThat(attributes.get(1).getName()).isEqualTo(\"convention\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAttributesReturnsAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAttributesReturnsAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingReturnsAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasMappingReturnsAttributes() throws Exception {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(Mapped.class).get(1);\r\n    assertThat(getAliasMapping(mapping, 0)).isEqualTo(Mapped.class.getDeclaredMethod(\"alias\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingReturnsAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getAliasMappingReturnsAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingReturnsAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getConventionMappingReturnsAttributes() throws Exception {\r\n    AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(Mapped.class).get(1);\r\n    assertThat(getConventionMapping(mapping, 1)).isEqualTo(Mapped.class.getDeclaredMethod(\"convention\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getConventionMappingReturnsAttributes()",
    "tailType": "method"
  }
]