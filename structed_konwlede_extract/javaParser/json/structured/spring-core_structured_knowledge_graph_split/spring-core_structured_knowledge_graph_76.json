[
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid standardAnnotationMetadata() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(AnnotatedComponent.class);\r\n    doTestAnnotationInfo(metadata);\r\n    doTestMethodAnnotationInfo(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asmAnnotationMetadata() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(AnnotatedComponent.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    doTestAnnotationInfo(metadata);\r\n    doTestMethodAnnotationInfo(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid standardAnnotationMetadataForSubclass() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(AnnotatedComponentSubClass.class);\r\n    doTestSubClassAnnotationInfo(metadata, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asmAnnotationMetadataForSubclass() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(AnnotatedComponentSubClass.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    doTestSubClassAnnotationInfo(metadata, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#doTestSubClassAnnotationInfo(AnnotationMetadata,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestSubClassAnnotationInfo(AnnotationMetadata metadata, boolean asm) {\r\n    assertThat(metadata.getClassName()).isEqualTo(AnnotatedComponentSubClass.class.getName());\r\n    assertThat(metadata.isInterface()).isFalse();\r\n    assertThat(metadata.isAnnotation()).isFalse();\r\n    assertThat(metadata.isAbstract()).isFalse();\r\n    assertThat(metadata.isConcrete()).isTrue();\r\n    assertThat(metadata.hasSuperClass()).isTrue();\r\n    assertThat(metadata.getSuperClassName()).isEqualTo(AnnotatedComponent.class.getName());\r\n    assertThat(metadata.getInterfaceNames()).isEmpty();\r\n    assertThat(metadata.isAnnotated(Component.class.getName())).isFalse();\r\n    assertThat(metadata.isAnnotated(Scope.class.getName())).isFalse();\r\n    assertThat(metadata.isAnnotated(SpecialAttr.class.getName())).isFalse();\r\n    if (asm) {\r\n        assertThat(metadata.isAnnotated(NamedComposedAnnotation.class.getName())).isFalse();\r\n        assertThat(metadata.hasAnnotation(NamedComposedAnnotation.class.getName())).isFalse();\r\n        assertThat(metadata.getAnnotationTypes()).isEmpty();\r\n    } else {\r\n        assertThat(metadata.isAnnotated(NamedComposedAnnotation.class.getName())).isTrue();\r\n        assertThat(metadata.hasAnnotation(NamedComposedAnnotation.class.getName())).isTrue();\r\n        assertThat(metadata.getAnnotationTypes()).containsExactly(NamedComposedAnnotation.class.getName());\r\n    }\r\n    assertThat(metadata.hasAnnotation(Component.class.getName())).isFalse();\r\n    assertThat(metadata.hasAnnotation(Scope.class.getName())).isFalse();\r\n    assertThat(metadata.hasAnnotation(SpecialAttr.class.getName())).isFalse();\r\n    assertThat(metadata.hasMetaAnnotation(Component.class.getName())).isFalse();\r\n    assertThat(metadata.hasMetaAnnotation(MetaAnnotation.class.getName())).isFalse();\r\n    assertThat(metadata.getAnnotationAttributes(Component.class.getName())).isNull();\r\n    assertThat(metadata.getAnnotationAttributes(MetaAnnotation.class.getName(), false)).isNull();\r\n    assertThat(metadata.getAnnotationAttributes(MetaAnnotation.class.getName(), true)).isNull();\r\n    assertThat(metadata.getAnnotatedMethods(DirectAnnotation.class.getName())).isEmpty();\r\n    assertThat(metadata.isAnnotated(IsAnnotatedAnnotation.class.getName())).isFalse();\r\n    assertThat(metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName())).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#doTestSubClassAnnotationInfo(AnnotationMetadata,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid standardAnnotationMetadataForInterface() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(AnnotationMetadata.class);\r\n    doTestMetadataForInterfaceClass(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#standardAnnotationMetadataForInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asmAnnotationMetadataForInterface() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(AnnotationMetadata.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    doTestMetadataForInterfaceClass(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#asmAnnotationMetadataForInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]