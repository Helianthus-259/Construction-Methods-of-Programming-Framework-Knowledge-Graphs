[
  {
    "head": "org.springframework.cglib.transform.MethodFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodFilter#accept(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic class MethodFilterTransformer extends AbstractClassTransformer {\n    private MethodFilter filter;\n    private ClassTransformer pass;\n    private ClassVisitor direct;\n\n    public MethodFilterTransformer(MethodFilter filter, ClassTransformer pass) {\n        this.filter = filter;\n        this.pass = pass;\n        super.setTarget(pass);\n    }\n\n    @Override\n\tpublic MethodVisitor visitMethod(int access,\n                                     String name,\n                                     String desc,\n                                     String signature,\n                                     String[] exceptions) {\n        return (filter.accept(access, name, desc, signature, exceptions) ? pass : direct).visitMethod(access, name, desc, signature, exceptions);\n    }\n\n    @Override\n\tpublic void setTarget(ClassVisitor target) {\n        pass.setTarget(target);\n        direct = target;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer#filter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#filter",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer#pass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#pass",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassTransformer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer#direct",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#direct",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return (filter.accept(access, name, desc, signature, exceptions) ? pass : direct).visitMethod(access, name, desc, signature, exceptions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    pass.setTarget(target);\r\n    direct = target;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodFilterTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]