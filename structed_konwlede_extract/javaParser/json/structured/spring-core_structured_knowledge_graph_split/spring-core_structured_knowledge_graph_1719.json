[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubClassWithInheritedComposedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.getBoolean(\"readOnly\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInterfaceImplementedBySuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromInterfaceImplementedBySuperclass() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ConcreteClassWithInheritedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInterfaceImplementedBySuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInterfaceImplementedBySuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(InheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromNonInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(NonInheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withInheritedAnnotationsFromAliasedComposedAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(AliasedComposedContextConfigurationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(ContextConfiguration.class);\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"test.xml\");\r\n    assertThat(annotation.getStringArray(\"locations\")).containsExactly(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withInheritedAnnotationsFromAliasedValueComposedAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(AliasedValueComposedContextConfigurationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(ContextConfiguration.class);\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"test.xml\");\r\n    assertThat(annotation.getStringArray(\"locations\")).containsExactly(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedValueComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#withInheritedAnnotationsFromAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]