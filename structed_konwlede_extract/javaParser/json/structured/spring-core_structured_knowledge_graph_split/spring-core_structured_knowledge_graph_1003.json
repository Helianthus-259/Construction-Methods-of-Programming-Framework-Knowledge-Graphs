[
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeRange(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeAll(Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean removeAll(Collection<?> c) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#removeAll(Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeAll(Collection<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeIf(Predicate<? super DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean removeIf(Predicate<? super DataBuffer> filter) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#removeIf(Predicate<? super DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#removeIf(Predicate<? super DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#set(int,DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer set(int index, DataBuffer element) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#set(int,DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#set(int,DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void clear() {\r\n    this.byteCount = 0;\r\n    super.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList#releaseAndClear()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Shortcut to {@link DataBufferUtils#release release} all data buffers and\r\n * then {@link #clear()}.\r\n */\r\npublic void releaseAndClear() {\r\n    forEach(buf -> {\r\n        try {\r\n            DataBufferUtils.release(buf);\r\n        } catch (Throwable ex) {\r\n            // Keep going..\r\n        }\r\n    });\r\n    clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.LimitedDataBufferList#releaseAndClear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.LimitedDataBufferList",
    "headType": "class",
    "relation": "extend",
    "tail": "ArrayList",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.Netty5DataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.NoSuchElementException;\nimport java.util.function.IntPredicate;\n\nimport io.netty5.buffer.Buffer;\nimport io.netty5.buffer.BufferComponent;\nimport io.netty5.buffer.ComponentIterator;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Implementation of the {@code DataBuffer} interface that wraps a Netty 5\n * {@link Buffer}. Typically constructed with {@link Netty5DataBufferFactory}.\n *\n * @author Violeta Georgieva\n * @author Arjen Poutsma\n * @since 6.0\n */\npublic final class Netty5DataBuffer implements CloseableDataBuffer, TouchableDataBuffer {\n\n\tprivate final Buffer buffer;\n\n\tprivate final Netty5DataBufferFactory dataBufferFactory;\n\n\n\t/**\n\t * Create a new {@code Netty5DataBuffer} based on the given {@code Buffer}.\n\t * @param buffer the buffer to base this buffer on\n\t */\n\tNetty5DataBuffer(Buffer buffer, Netty5DataBufferFactory dataBufferFactory) {\n\t\tAssert.notNull(buffer, \"Buffer must not be null\");\n\t\tAssert.notNull(dataBufferFactory, \"Netty5DataBufferFactory must not be null\");\n\t\tthis.buffer = buffer;\n\t\tthis.dataBufferFactory = dataBufferFactory;\n\t}\n\n\t/**\n\t * Directly exposes the native {@code Buffer} that this buffer is based on.\n\t * @return the wrapped buffer\n\t */\n\tpublic Buffer getNativeBuffer() {\n\t\treturn this.buffer;\n\t}\n\n\t@Override\n\tpublic DataBufferFactory factory() {\n\t\treturn this.dataBufferFactory;\n\t}\n\n\t@Override\n\tpublic int indexOf(IntPredicate predicate, int fromIndex) {\n\t\tAssert.notNull(predicate, \"IntPredicate must not be null\");\n\t\tif (fromIndex < 0) {\n\t\t\tfromIndex = 0;\n\t\t}\n\t\telse if (fromIndex >= this.buffer.writerOffset()) {\n\t\t\treturn -1;\n\t\t}\n\t\tint length = this.buffer.writerOffset() - fromIndex;\n\t\tint bytes = this.buffer.openCursor(fromIndex, length).process(predicate.negate()::test);\n\t\treturn bytes == -1 ? -1 : fromIndex + bytes;\n\t}\n\n\t@Override\n\tpublic int lastIndexOf(IntPredicate predicate, int fromIndex) {\n\t\tAssert.notNull(predicate, \"IntPredicate must not be null\");\n\t\tif (fromIndex < 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tfromIndex = Math.min(fromIndex, this.buffer.writerOffset() - 1);\n\t\treturn this.buffer.openCursor(0, fromIndex + 1).process(predicate.negate()::test);\n\t}\n\n\t@Override\n\tpublic int readableByteCount() {\n\t\treturn this.buffer.readableBytes();\n\t}\n\n\t@Override\n\tpublic int writableByteCount() {\n\t\treturn this.buffer.writableBytes();\n\t}\n\n\t@Override\n\tpublic int readPosition() {\n\t\treturn this.buffer.readerOffset();\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer readPosition(int readPosition) {\n\t\tthis.buffer.readerOffset(readPosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic int writePosition() {\n\t\treturn this.buffer.writerOffset();\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer writePosition(int writePosition) {\n\t\tthis.buffer.writerOffset(writePosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic byte getByte(int index) {\n\t\treturn this.buffer.getByte(index);\n\t}\n\n\t@Override\n\tpublic int capacity() {\n\t\treturn this.buffer.capacity();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic Netty5DataBuffer capacity(int capacity) {\n\t\tif (capacity <= 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"'newCapacity' %d must be higher than 0\", capacity));\n\t\t}\n\t\tint diff = capacity - capacity();\n\t\tif (diff > 0) {\n\t\t\tthis.buffer.ensureWritable(this.buffer.writableBytes() + diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer ensureWritable(int capacity) {\n\t\tAssert.isTrue(capacity >= 0, \"Capacity must be >= 0\");\n\t\tthis.buffer.ensureWritable(capacity);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic byte read() {\n\t\treturn this.buffer.readByte();\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer read(byte[] destination) {\n\t\treturn read(destination, 0, destination.length);\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer read(byte[] destination, int offset, int length) {\n\t\tthis.buffer.readBytes(destination, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer write(byte b) {\n\t\tthis.buffer.writeByte(b);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer write(byte[] source) {\n\t\tthis.buffer.writeBytes(source);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer write(byte[] source, int offset, int length) {\n\t\tthis.buffer.writeBytes(source, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer write(DataBuffer... dataBuffers) {\n\t\tif (!ObjectUtils.isEmpty(dataBuffers)) {\n\t\t\tif (hasNetty5DataBuffers(dataBuffers)) {\n\t\t\t\tBuffer[] nativeBuffers = new Buffer[dataBuffers.length];\n\t\t\t\tfor (int i = 0; i < dataBuffers.length; i++) {\n\t\t\t\t\tnativeBuffers[i] = ((Netty5DataBuffer) dataBuffers[i]).getNativeBuffer();\n\t\t\t\t}\n\t\t\t\treturn write(nativeBuffers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tByteBuffer[] byteBuffers = new ByteBuffer[dataBuffers.length];\n\t\t\t\tfor (int i = 0; i < dataBuffers.length; i++) {\n\t\t\t\t\tbyteBuffers[i] = ByteBuffer.allocate(dataBuffers[i].readableByteCount());\n\t\t\t\t\tdataBuffers[i].toByteBuffer(byteBuffers[i]);\n\t\t\t\t}\n\t\t\t\treturn write(byteBuffers);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate static boolean hasNetty5DataBuffers(DataBuffer[] buffers) {\n\t\tfor (DataBuffer buffer : buffers) {\n\t\t\tif (!(buffer instanceof Netty5DataBuffer)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer write(ByteBuffer... buffers) {\n\t\tif (!ObjectUtils.isEmpty(buffers)) {\n\t\t\tfor (ByteBuffer buffer : buffers) {\n\t\t\t\tthis.buffer.writeBytes(buffer);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Writes one or more Netty 5 {@link Buffer Buffers} to this buffer,\n\t * starting at the current writing position.\n\t * @param buffers the buffers to write into this buffer\n\t * @return this buffer\n\t */\n\tpublic Netty5DataBuffer write(Buffer... buffers) {\n\t\tif (!ObjectUtils.isEmpty(buffers)) {\n\t\t\tfor (Buffer buffer : buffers) {\n\t\t\t\tthis.buffer.writeBytes(buffer);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(CharSequence charSequence, Charset charset) {\n\t\tAssert.notNull(charSequence, \"CharSequence must not be null\");\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\n\t\tthis.buffer.writeCharSequence(charSequence, charset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * <p><strong>Note</strong> that due to the lack of a {@code slice} method\n\t * in Netty 5's {@link Buffer}, this implementation returns a copy that\n\t * does <strong>not</strong> share its contents with this buffer.\n\t */\n\t@Override\n\t@Deprecated\n\tpublic DataBuffer slice(int index, int length) {\n\t\tBuffer copy = this.buffer.copy(index, length);\n\t\treturn new Netty5DataBuffer(copy, this.dataBufferFactory);\n\t}\n\n\t@Override\n\tpublic DataBuffer split(int index) {\n\t\tBuffer split = this.buffer.split(index);\n\t\treturn new Netty5DataBuffer(split, this.dataBufferFactory);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer() {\n\t\treturn toByteBuffer();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer(int index, int length) {\n\t\treturn toByteBuffer(index, length);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer toByteBuffer(int index, int length) {\n\t\tByteBuffer copy = this.buffer.isDirect() ?\n\t\t\t\tByteBuffer.allocateDirect(length) :\n\t\t\t\tByteBuffer.allocate(length);\n\n\t\tthis.buffer.copyInto(index, copy, 0, length);\n\t\treturn copy;\n\t}\n\n\t@Override\n\tpublic void toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length) {\n\t\tthis.buffer.copyInto(srcPos, dest, destPos, length);\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator readableByteBuffers() {\n\t\treturn new BufferComponentIterator<>(this.buffer.forEachComponent(), true);\n\t}\n\n\t@Override\n\tpublic ByteBufferIterator writableByteBuffers() {\n\t\treturn new BufferComponentIterator<>(this.buffer.forEachComponent(), false);\n\t}\n\n\t@Override\n\tpublic String toString(Charset charset) {\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\treturn this.buffer.toString(charset);\n\t}\n\n\t@Override\n\tpublic String toString(int index, int length, Charset charset) {\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\tbyte[] data = new byte[length];\n\t\tthis.buffer.copyInto(index, data, 0, length);\n\t\treturn new String(data, 0, length, charset);\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer touch(Object hint) {\n\t\tthis.buffer.touch(hint);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tthis.buffer.close();\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof Netty5DataBuffer that && this.buffer.equals(that.buffer)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.buffer.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.buffer.toString();\n\t}\n\n\n\tprivate static final class BufferComponentIterator<T extends BufferComponent & ComponentIterator.Next>\n\t\t\timplements ByteBufferIterator {\n\n\t\tprivate final ComponentIterator<T> delegate;\n\n\t\tprivate final boolean readable;\n\n\t\tprivate @Nullable T next;\n\n\t\tpublic BufferComponentIterator(ComponentIterator<T> delegate, boolean readable) {\n\t\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\t\tthis.delegate = delegate;\n\t\t\tthis.readable = readable;\n\t\t\tthis.next = readable ? this.delegate.firstReadable() : this.delegate.firstWritable();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn this.next != null;\n\t\t}\n\n\t\t@Override\n\t\tpublic ByteBuffer next() {\n\t\t\tif (this.next != null) {\n\t\t\t\tByteBuffer result;\n\t\t\t\tif (this.readable) {\n\t\t\t\t\tresult = this.next.readableBuffer();\n\t\t\t\t\tthis.next = this.next.nextReadable();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = this.next.writableBuffer();\n\t\t\t\t\tthis.next = this.next.nextWritable();\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() {\n\t\t\tthis.delegate.close();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.Netty5DataBuffer#buffer",
    "tailType": "field"
  }
]