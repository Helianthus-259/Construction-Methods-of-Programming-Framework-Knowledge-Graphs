[
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#hasLengthForInvalidValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasLengthForInvalidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasLengthForInvalidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@NullAndEmptySource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForValidValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@ValueSource(strings = { \"text\", \"  text  \", \"\\n text\" })\r\nvoid hasTextForValidValues(String value) {\r\n    assertThat(StringUtils.hasText(value)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#hasTextForValidValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForValidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForValidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForInvalidValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@NullAndEmptySource\r\n@ValueSource(strings = { \"  \", \"\\t\" })\r\nvoid hasTextForInvalidValues(String value) {\r\n    assertThat(StringUtils.hasText(value)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#hasTextForInvalidValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForInvalidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForInvalidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@NullAndEmptySource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#hasTextForInvalidValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#containsWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsWhitespace() {\r\n    assertThat(StringUtils.containsWhitespace(null)).isFalse();\r\n    assertThat(StringUtils.containsWhitespace(\"\")).isFalse();\r\n    assertThat(StringUtils.containsWhitespace(\"a\")).isFalse();\r\n    assertThat(StringUtils.containsWhitespace(\"abc\")).isFalse();\r\n    assertThat(StringUtils.containsWhitespace(\" \")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\"\\t\")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\"\\n\")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\" a\")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\"abc \")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\"a b\")).isTrue();\r\n    assertThat(StringUtils.containsWhitespace(\"a  b\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#containsWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#containsWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@Deprecated\r\nvoid trimWhitespace() {\r\n    assertThat(StringUtils.trimWhitespace(null)).isNull();\r\n    assertThat(StringUtils.trimWhitespace(\"\")).isEmpty();\r\n    assertThat(StringUtils.trimWhitespace(\" \")).isEmpty();\r\n    assertThat(StringUtils.trimWhitespace(\"\\t\")).isEmpty();\r\n    assertThat(StringUtils.trimWhitespace(\"\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimWhitespace(\" \\t\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimWhitespace(\" a\")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimWhitespace(\"a \")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimWhitespace(\" a \")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimWhitespace(\" a b \")).isEqualTo(\"a b\");\r\n    assertThat(StringUtils.trimWhitespace(\" a b  c \")).isEqualTo(\"a b  c\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimAllWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid trimAllWhitespace() {\r\n    assertThat(StringUtils.trimAllWhitespace(null)).isNull();\r\n    assertThat(StringUtils.trimAllWhitespace(\"\")).isEmpty();\r\n    assertThat(StringUtils.trimAllWhitespace(\" \")).isEmpty();\r\n    assertThat(StringUtils.trimAllWhitespace(\"\\t\")).isEmpty();\r\n    assertThat(StringUtils.trimAllWhitespace(\"\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimAllWhitespace(\" \\t\\n\")).isEmpty();\r\n    assertThat(StringUtils.trimAllWhitespace(\" a\")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimAllWhitespace(\"a \")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimAllWhitespace(\" a \")).isEqualTo(\"a\");\r\n    assertThat(StringUtils.trimAllWhitespace(\" a b \")).isEqualTo(\"ab\");\r\n    assertThat(StringUtils.trimAllWhitespace(\" a b  c \")).isEqualTo(\"abc\");\r\n}",
    "tailType": "method_code"
  }
]