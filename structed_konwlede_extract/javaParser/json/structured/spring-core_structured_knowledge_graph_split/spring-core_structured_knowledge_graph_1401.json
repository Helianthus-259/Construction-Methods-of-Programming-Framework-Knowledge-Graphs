[
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#removeDuplicateStrings(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#split(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Split a {@code String} at the first occurrence of the delimiter.\r\n * Does not include the delimiter in the result.\r\n * @param toSplit the string to split (potentially {@code null} or empty)\r\n * @param delimiter to split the string up with (potentially {@code null} or empty)\r\n * @return a two element array with index 0 being before the delimiter, and\r\n * index 1 being after the delimiter (neither element includes the delimiter);\r\n * or {@code null} if the delimiter wasn't found in the given input {@code String}\r\n */\r\npublic static String @Nullable [] split(@Nullable String toSplit, @Nullable String delimiter) {\r\n    if (!hasLength(toSplit) || !hasLength(delimiter)) {\r\n        return null;\r\n    }\r\n    int offset = toSplit.indexOf(delimiter);\r\n    if (offset < 0) {\r\n        return null;\r\n    }\r\n    String beforeDelimiter = toSplit.substring(0, offset);\r\n    String afterDelimiter = toSplit.substring(offset + delimiter.length());\r\n    return new String[] { beforeDelimiter, afterDelimiter };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#split(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the delimiter\r\n * providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the {@code Properties}.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {\r\n    return splitArrayElementsIntoProperties(array, delimiter, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Take an array of strings and split each element based on the given delimiter.\r\n * A {@code Properties} instance is then generated, with the left of the\r\n * delimiter providing the key, and the right of the delimiter providing the value.\r\n * <p>Will trim both the key and value before adding them to the\r\n * {@code Properties} instance.\r\n * @param array the array to process\r\n * @param delimiter to split each element using (typically the equals symbol)\r\n * @param charsToDelete one or more characters to remove from each element\r\n * prior to attempting the split operation (typically the quotation mark\r\n * symbol), or {@code null} if no removal should occur\r\n * @return a {@code Properties} instance representing the array contents,\r\n * or {@code null} if the array to process was {@code null} or empty\r\n */\r\n@Nullable\r\npublic static Properties splitArrayElementsIntoProperties(String[] array, String delimiter, @Nullable String charsToDelete) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return null;\r\n    }\r\n    Properties result = new Properties();\r\n    for (String element : array) {\r\n        if (charsToDelete != null) {\r\n            element = deleteAny(element, charsToDelete);\r\n        }\r\n        String[] splittedElement = split(element, delimiter);\r\n        if (splittedElement == null) {\r\n            continue;\r\n        }\r\n        result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#splitArrayElementsIntoProperties(String[],String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>Trims tokens and omits empty tokens.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters) {\r\n    return tokenizeToStringArray(str, delimiters, true, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tokenize the given {@code String} into a {@code String} array via a\r\n * {@link StringTokenizer}.\r\n * <p>The given {@code delimiters} string can consist of any number of\r\n * delimiter characters. Each of those characters can be used to separate\r\n * tokens. A delimiter is always a single character; for multi-character\r\n * delimiters, consider using {@link #delimitedListToStringArray}.\r\n * @param str the {@code String} to tokenize (potentially {@code null} or empty)\r\n * @param delimiters the delimiter characters, assembled as a {@code String}\r\n * (each of the characters is individually considered as a delimiter)\r\n * @param trimTokens trim the tokens via {@link String#trim()}\r\n * @param ignoreEmptyTokens omit empty tokens from the result array\r\n * (only applies to tokens that are empty after trimming; StringTokenizer\r\n * will not consider subsequent delimiters as token in the first place).\r\n * @return an array of the tokens\r\n * @see java.util.StringTokenizer\r\n * @see String#trim()\r\n * @see #delimitedListToStringArray\r\n */\r\npublic static String[] tokenizeToStringArray(@Nullable String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    StringTokenizer st = new StringTokenizer(str, delimiters);\r\n    List<String> tokens = new ArrayList<>();\r\n    while (st.hasMoreTokens()) {\r\n        String token = st.nextToken();\r\n        if (trimTokens) {\r\n            token = token.trim();\r\n        }\r\n        if (!ignoreEmptyTokens || !token.isEmpty()) {\r\n            tokens.add(token);\r\n        }\r\n    }\r\n    return toStringArray(tokens);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#tokenizeToStringArray(String,String,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Take a {@code String} that is a delimited list and convert it into a\r\n * {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter) {\r\n    return delimitedListToStringArray(str, delimiter, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Take a {@code String} that is a delimited list and convert it into\r\n * a {@code String} array.\r\n * <p>A single {@code delimiter} may consist of more than one character,\r\n * but it will still be considered as a single delimiter string, rather\r\n * than as a bunch of potential delimiter characters, in contrast to\r\n * {@link #tokenizeToStringArray}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @param delimiter the delimiter between elements (this is a single delimiter,\r\n * rather than a bunch individual delimiter characters)\r\n * @param charsToDelete a set of characters to delete; useful for deleting unwanted\r\n * line breaks: for example, \"\\r\\n\\f\" will delete all new lines and line feeds in a {@code String}\r\n * @return an array of the tokens in the list\r\n * @see #tokenizeToStringArray\r\n */\r\npublic static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter, @Nullable String charsToDelete) {\r\n    if (str == null) {\r\n        return EMPTY_STRING_ARRAY;\r\n    }\r\n    if (delimiter == null) {\r\n        return new String[] { str };\r\n    }\r\n    List<String> result = new ArrayList<>();\r\n    if (delimiter.isEmpty()) {\r\n        for (int i = 0; i < str.length(); i++) {\r\n            result.add(deleteAny(str.substring(i, i + 1), charsToDelete));\r\n        }\r\n    } else {\r\n        int pos = 0;\r\n        int delPos;\r\n        while ((delPos = str.indexOf(delimiter, pos)) != -1) {\r\n            result.add(deleteAny(str.substring(pos, delPos), charsToDelete));\r\n            pos = delPos + delimiter.length();\r\n        }\r\n        if (!str.isEmpty() && pos <= str.length()) {\r\n            // Add rest of String, but not in case of empty input.\r\n            result.add(deleteAny(str.substring(pos), charsToDelete));\r\n        }\r\n    }\r\n    return toStringArray(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#delimitedListToStringArray(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#commaDelimitedListToStringArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into an\r\n * array of strings.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return an array of strings, or the empty array in case of empty input\r\n */\r\npublic static String[] commaDelimitedListToStringArray(@Nullable String str) {\r\n    return delimitedListToStringArray(str, \",\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#commaDelimitedListToStringArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#commaDelimitedListToSet(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a comma delimited list (for example, a row from a CSV file) into a set.\r\n * <p>Note that this will suppress duplicates, and as of 4.2, the elements in\r\n * the returned set will preserve the original order in a {@link LinkedHashSet}.\r\n * @param str the input {@code String} (potentially {@code null} or empty)\r\n * @return a set of {@code String} entries in the list\r\n * @see #removeDuplicateStrings(String[])\r\n */\r\npublic static Set<String> commaDelimitedListToSet(@Nullable String str) {\r\n    String[] tokens = commaDelimitedListToStringArray(str);\r\n    return new LinkedHashSet<>(Arrays.asList(tokens));\r\n}",
    "tailType": "method_code"
  }
]