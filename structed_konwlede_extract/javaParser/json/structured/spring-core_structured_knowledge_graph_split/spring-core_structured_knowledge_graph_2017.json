[
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectTrueTests#createDataBufferFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBufferFactory createDataBufferFactory() {\r\n    return new NettyDataBufferFactory(new PooledByteBufAllocator(true));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectTrueTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectTrueTests#createDataBufferFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectTrueTests#createDataBufferFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * @author Arjen Poutsma\n * @author Sam Brannen\n */\nclass PooledDataBufferTests {\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\t@Nested\n\tclass Jetty implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new JettyDataBufferFactory();\n\t\t}\n\t}\n\n\n\tinterface PooledDataBufferTestingTrait {\n\n\t\tDataBufferFactory createDataBufferFactory();\n\n\t\tdefault PooledDataBuffer createDataBuffer(int capacity) {\n\t\t\treturn (PooledDataBuffer) createDataBufferFactory().allocateBuffer(capacity);\n\t\t}\n\n\t\t@Test\n\t\tdefault void retainAndRelease() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\n\t\t\tbuffer.retain();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isFalse();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isTrue();\n\t\t\tassertThat(buffer.isAllocated()).isFalse();\n\t\t}\n\n\t\t@Test\n\t\tdefault void tooManyReleases() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\n\t\t\tbuffer.release();\n\t\t\tassertThatIllegalStateException().isThrownBy(buffer::release);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests#createDataBufferFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBufferFactory createDataBufferFactory() {\r\n    return new NettyDataBufferFactory(new PooledByteBufAllocator(true));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests#createDataBufferFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledByteBufAllocatorWithPreferDirectFalseTests#createDataBufferFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.Jetty",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.Jetty",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.Jetty",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * @author Arjen Poutsma\n * @author Sam Brannen\n */\nclass PooledDataBufferTests {\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\t@Nested\n\tclass Jetty implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new JettyDataBufferFactory();\n\t\t}\n\t}\n\n\n\tinterface PooledDataBufferTestingTrait {\n\n\t\tDataBufferFactory createDataBufferFactory();\n\n\t\tdefault PooledDataBuffer createDataBuffer(int capacity) {\n\t\t\treturn (PooledDataBuffer) createDataBufferFactory().allocateBuffer(capacity);\n\t\t}\n\n\t\t@Test\n\t\tdefault void retainAndRelease() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\n\t\t\tbuffer.retain();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isFalse();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isTrue();\n\t\t\tassertThat(buffer.isAllocated()).isFalse();\n\t\t}\n\n\t\t@Test\n\t\tdefault void tooManyReleases() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\n\t\t\tbuffer.release();\n\t\t\tassertThatIllegalStateException().isThrownBy(buffer::release);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Jetty#createDataBufferFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBufferFactory createDataBufferFactory() {\r\n    return new JettyDataBufferFactory();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Jetty",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.Jetty#createDataBufferFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.Jetty#createDataBufferFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * @author Arjen Poutsma\n * @author Sam Brannen\n */\nclass PooledDataBufferTests {\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass UnpooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new UnpooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectTrueTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass PooledByteBufAllocatorWithPreferDirectFalseTests implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new NettyDataBufferFactory(new PooledByteBufAllocator(true));\n\t\t}\n\t}\n\n\t@Nested\n\tclass Jetty implements PooledDataBufferTestingTrait {\n\n\t\t@Override\n\t\tpublic DataBufferFactory createDataBufferFactory() {\n\t\t\treturn new JettyDataBufferFactory();\n\t\t}\n\t}\n\n\n\tinterface PooledDataBufferTestingTrait {\n\n\t\tDataBufferFactory createDataBufferFactory();\n\n\t\tdefault PooledDataBuffer createDataBuffer(int capacity) {\n\t\t\treturn (PooledDataBuffer) createDataBufferFactory().allocateBuffer(capacity);\n\t\t}\n\n\t\t@Test\n\t\tdefault void retainAndRelease() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\n\t\t\tbuffer.retain();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isFalse();\n\t\t\tassertThat(buffer.isAllocated()).isTrue();\n\t\t\tassertThat(buffer.release()).isTrue();\n\t\t\tassertThat(buffer.isAllocated()).isFalse();\n\t\t}\n\n\t\t@Test\n\t\tdefault void tooManyReleases() {\n\t\t\tPooledDataBuffer buffer = createDataBuffer(1);\n\t\t\tbuffer.write((byte) 'a');\n\n\t\t\tbuffer.release();\n\t\t\tassertThatIllegalStateException().isThrownBy(buffer::release);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait#createDataBufferFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "DataBufferFactory createDataBufferFactory();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait#createDataBufferFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.PooledDataBufferTestingTrait#createDataBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "default PooledDataBuffer createDataBuffer(int capacity) {\r\n    return (PooledDataBuffer) createDataBufferFactory().allocateBuffer(capacity);\r\n}",
    "tailType": "method_code"
  }
]