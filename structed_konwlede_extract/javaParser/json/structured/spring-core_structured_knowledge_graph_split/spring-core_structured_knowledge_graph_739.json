[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotation(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotation(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotation(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Annotation[] getAnnotations() {\r\n    return this.annotations.clone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getDeclaredAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Annotation[] getDeclaredAnnotations() {\r\n    return this.annotations.clone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getDeclaredAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementForAnnotations#getDeclaredAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotatedMethod",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.BridgeMethodResolver;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * A convenient wrapper for a {@link Method} handle, providing deep annotation\n * introspection on methods and method parameters, including the exposure of\n * interface-declared parameter annotations from the concrete target method.\n *\n * @author Juergen Hoeller\n * @since 6.1\n * @see #getMethodAnnotation(Class)\n * @see #getMethodParameters()\n * @see AnnotatedElementUtils\n * @see SynthesizingMethodParameter\n */\npublic class AnnotatedMethod {\n\n\tprivate final Method method;\n\n\tprivate final Method bridgedMethod;\n\n\tprivate final MethodParameter[] parameters;\n\n\tprivate volatile @Nullable List<Annotation[][]> inheritedParameterAnnotations;\n\n\n\t/**\n\t * Create an instance that wraps the given {@link Method}.\n\t * @param method the {@code Method} handle to wrap\n\t */\n\tpublic AnnotatedMethod(Method method) {\n\t\tAssert.notNull(method, \"Method is required\");\n\t\tthis.method = method;\n\t\tthis.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);\n\t\tReflectionUtils.makeAccessible(this.bridgedMethod);\n\t\tthis.parameters = initMethodParameters();\n\t}\n\n\t/**\n\t * Copy constructor for use in subclasses.\n\t */\n\tprotected AnnotatedMethod(AnnotatedMethod annotatedMethod) {\n\t\tAssert.notNull(annotatedMethod, \"AnnotatedMethod is required\");\n\t\tthis.method = annotatedMethod.method;\n\t\tthis.bridgedMethod = annotatedMethod.bridgedMethod;\n\t\tthis.parameters = annotatedMethod.parameters;\n\t\tthis.inheritedParameterAnnotations = annotatedMethod.inheritedParameterAnnotations;\n\t}\n\n\n\t/**\n\t * Return the annotated method.\n\t */\n\tpublic final Method getMethod() {\n\t\treturn this.method;\n\t}\n\n\t/**\n\t * If the annotated method is a bridge method, this method returns the bridged\n\t * (user-defined) method. Otherwise, it returns the same method as {@link #getMethod()}.\n\t */\n\tprotected final Method getBridgedMethod() {\n\t\treturn this.bridgedMethod;\n\t}\n\n\t/**\n\t * Expose the containing class for method parameters.\n\t * @see MethodParameter#getContainingClass()\n\t */\n\tprotected Class<?> getContainingClass() {\n\t\treturn this.method.getDeclaringClass();\n\t}\n\n\t/**\n\t * Return the method parameters for this {@code AnnotatedMethod}.\n\t */\n\tpublic final MethodParameter[] getMethodParameters() {\n\t\treturn this.parameters;\n\t}\n\n\tprivate MethodParameter[] initMethodParameters() {\n\t\tint count = this.bridgedMethod.getParameterCount();\n\t\tMethodParameter[] result = new MethodParameter[count];\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tresult[i] = new AnnotatedMethodParameter(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Return a {@link MethodParameter} for the declared return type.\n\t */\n\tpublic MethodParameter getReturnType() {\n\t\treturn new AnnotatedMethodParameter(-1);\n\t}\n\n\t/**\n\t * Return a {@link MethodParameter} for the actual return value type.\n\t */\n\tpublic MethodParameter getReturnValueType(@Nullable Object returnValue) {\n\t\treturn new ReturnValueMethodParameter(returnValue);\n\t}\n\n\t/**\n\t * Return {@code true} if the method's return type is void, {@code false} otherwise.\n\t */\n\tpublic boolean isVoid() {\n\t\treturn (getReturnType().getParameterType() == void.class);\n\t}\n\n\t/**\n\t * Return a single annotation on the underlying method, traversing its super methods\n\t * if no annotation can be found on the given method itself.\n\t * <p>Supports <em>merged</em> composed annotations with attribute overrides.\n\t * @param annotationType the annotation type to look for\n\t * @return the annotation, or {@code null} if none found\n\t * @see AnnotatedElementUtils#findMergedAnnotation\n\t */\n\tpublic <A extends Annotation> @Nullable A getMethodAnnotation(Class<A> annotationType) {\n\t\treturn AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType);\n\t}\n\n\t/**\n\t * Determine if an annotation of the given type is <em>present</em> or\n\t * <em>meta-present</em> on the method.\n\t * @param annotationType the annotation type to look for\n\t * @see AnnotatedElementUtils#hasAnnotation\n\t */\n\tpublic <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {\n\t\treturn AnnotatedElementUtils.hasAnnotation(this.method, annotationType);\n\t}\n\n\tprivate List<Annotation[][]> getInheritedParameterAnnotations() {\n\t\tList<Annotation[][]> parameterAnnotations = this.inheritedParameterAnnotations;\n\t\tif (parameterAnnotations == null) {\n\t\t\tparameterAnnotations = new ArrayList<>();\n\t\t\tClass<?> clazz = this.method.getDeclaringClass();\n\t\t\twhile (clazz != null) {\n\t\t\t\tfor (Class<?> ifc : clazz.getInterfaces()) {\n\t\t\t\t\tfor (Method candidate : ifc.getMethods()) {\n\t\t\t\t\t\tif (isOverrideFor(candidate)) {\n\t\t\t\t\t\t\tparameterAnnotations.add(candidate.getParameterAnnotations());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclazz = clazz.getSuperclass();\n\t\t\t\tif (clazz == Object.class) {\n\t\t\t\t\tclazz = null;\n\t\t\t\t}\n\t\t\t\tif (clazz != null) {\n\t\t\t\t\tfor (Method candidate : clazz.getMethods()) {\n\t\t\t\t\t\tif (isOverrideFor(candidate)) {\n\t\t\t\t\t\t\tparameterAnnotations.add(candidate.getParameterAnnotations());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.inheritedParameterAnnotations = parameterAnnotations;\n\t\t}\n\t\treturn parameterAnnotations;\n\t}\n\n\tprivate boolean isOverrideFor(Method candidate) {\n\t\tif (!candidate.getName().equals(this.method.getName()) ||\n\t\t\t\tcandidate.getParameterCount() != this.method.getParameterCount()) {\n\t\t\treturn false;\n\t\t}\n\t\tClass<?>[] paramTypes = this.method.getParameterTypes();\n\t\tif (Arrays.equals(candidate.getParameterTypes(), paramTypes)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < paramTypes.length; i++) {\n\t\t\tif (paramTypes[i] !=\n\t\t\t\t\tResolvableType.forMethodParameter(candidate, i, this.method.getDeclaringClass()).resolve()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other != null && getClass() == other.getClass() &&\n\t\t\t\tthis.method.equals(((AnnotatedMethod) other).method)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.method.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.method.toGenericString();\n\t}\n\n\n\t// Support methods for use in subclass variants\n\n\tprotected static @Nullable Object findProvidedArgument(MethodParameter parameter, @Nullable Object... providedArgs) {\n\t\tif (!ObjectUtils.isEmpty(providedArgs)) {\n\t\t\tfor (Object providedArg : providedArgs) {\n\t\t\t\tif (parameter.getParameterType().isInstance(providedArg)) {\n\t\t\t\t\treturn providedArg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected static String formatArgumentError(MethodParameter param, String message) {\n\t\treturn \"Could not resolve parameter [\" + param.getParameterIndex() + \"] in \" +\n\t\t\t\tparam.getExecutable().toGenericString() + (StringUtils.hasText(message) ? \": \" + message : \"\");\n\t}\n\n\n\t/**\n\t * A MethodParameter with AnnotatedMethod-specific behavior.\n\t */\n\tprotected class AnnotatedMethodParameter extends SynthesizingMethodParameter {\n\n\t\tprivate volatile Annotation @Nullable [] combinedAnnotations;\n\n\t\tpublic AnnotatedMethodParameter(int index) {\n\t\t\tsuper(AnnotatedMethod.this.getBridgedMethod(), index);\n\t\t}\n\n\t\tprotected AnnotatedMethodParameter(AnnotatedMethodParameter original) {\n\t\t\tsuper(original);\n\t\t\tthis.combinedAnnotations = original.combinedAnnotations;\n\t\t}\n\n\t\t@Override\n\t\tpublic Method getMethod() {\n\t\t\treturn AnnotatedMethod.this.getBridgedMethod();\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getContainingClass() {\n\t\t\treturn AnnotatedMethod.this.getContainingClass();\n\t\t}\n\n\t\t@Override\n\t\tpublic <T extends Annotation> @Nullable T getMethodAnnotation(Class<T> annotationType) {\n\t\t\treturn AnnotatedMethod.this.getMethodAnnotation(annotationType);\n\t\t}\n\n\t\t@Override\n\t\tpublic <T extends Annotation> boolean hasMethodAnnotation(Class<T> annotationType) {\n\t\t\treturn AnnotatedMethod.this.hasMethodAnnotation(annotationType);\n\t\t}\n\n\t\t@Override\n\t\tpublic Annotation[] getParameterAnnotations() {\n\t\t\tAnnotation[] anns = this.combinedAnnotations;\n\t\t\tif (anns == null) {\n\t\t\t\tanns = super.getParameterAnnotations();\n\t\t\t\tint index = getParameterIndex();\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tfor (Annotation[][] ifcAnns : getInheritedParameterAnnotations()) {\n\t\t\t\t\t\tif (index < ifcAnns.length) {\n\t\t\t\t\t\t\tAnnotation[] paramAnns = ifcAnns[index];\n\t\t\t\t\t\t\tif (paramAnns.length > 0) {\n\t\t\t\t\t\t\t\tList<Annotation> merged = new ArrayList<>(anns.length + paramAnns.length);\n\t\t\t\t\t\t\t\tmerged.addAll(Arrays.asList(anns));\n\t\t\t\t\t\t\t\tfor (Annotation paramAnn : paramAnns) {\n\t\t\t\t\t\t\t\t\tboolean existingType = false;\n\t\t\t\t\t\t\t\t\tfor (Annotation ann : anns) {\n\t\t\t\t\t\t\t\t\t\tif (ann.annotationType() == paramAnn.annotationType()) {\n\t\t\t\t\t\t\t\t\t\t\texistingType = true;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!existingType) {\n\t\t\t\t\t\t\t\t\t\tmerged.add(adaptAnnotation(paramAnn));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tanns = merged.toArray(new Annotation[0]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.combinedAnnotations = anns;\n\t\t\t}\n\t\t\treturn anns;\n\t\t}\n\n\t\t@Override\n\t\tpublic AnnotatedMethodParameter clone() {\n\t\t\treturn new AnnotatedMethodParameter(this);\n\t\t}\n\t}\n\n\n\t/**\n\t * A MethodParameter for an AnnotatedMethod return type based on an actual return value.\n\t */\n\tprivate class ReturnValueMethodParameter extends AnnotatedMethodParameter {\n\n\t\tprivate final @Nullable Class<?> returnValueType;\n\n\t\tpublic ReturnValueMethodParameter(@Nullable Object returnValue) {\n\t\t\tsuper(-1);\n\t\t\tthis.returnValueType = (returnValue != null ? returnValue.getClass() : null);\n\t\t}\n\n\t\tprotected ReturnValueMethodParameter(ReturnValueMethodParameter original) {\n\t\t\tsuper(original);\n\t\t\tthis.returnValueType = original.returnValueType;\n\t\t}\n\n\t\t@Override\n\t\tpublic Class<?> getParameterType() {\n\t\t\treturn (this.returnValueType != null ? this.returnValueType : super.getParameterType());\n\t\t}\n\n\t\t@Override\n\t\tpublic ReturnValueMethodParameter clone() {\n\t\t\treturn new ReturnValueMethodParameter(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#method",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#method",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#bridgedMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#bridgedMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#parameters",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#parameters",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodParameter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#inheritedParameterAnnotations",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#inheritedParameterAnnotations",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Annotation[][]>",
    "tailType": "type"
  }
]