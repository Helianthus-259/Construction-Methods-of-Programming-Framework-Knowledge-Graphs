[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#collection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#collectionNested()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionNested() {\r\n    TypeDescriptor desc = TypeDescriptor.collection(List.class, TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(List.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.List\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.List<java.util.List<java.lang.Integer>>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isTrue();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor()).isEqualTo(TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#collectionNested()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#collectionNested()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#map()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid map() {\r\n    TypeDescriptor desc = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(desc.getType()).isEqualTo(Map.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(Map.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.Map\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.Map<java.lang.String, java.lang.Integer>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.isMap()).isTrue();\r\n    assertThat(desc.getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#map()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#map()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapNested()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapNested() {\r\n    TypeDescriptor desc = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));\r\n    assertThat(desc.getType()).isEqualTo(Map.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(Map.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.Map\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Integer>>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.isMap()).isTrue();\r\n    assertThat(desc.getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getMapValueTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#mapNested()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapNested()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#narrow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid narrow() {\r\n    TypeDescriptor desc = TypeDescriptor.valueOf(Number.class);\r\n    Integer value = 3;\r\n    desc = desc.narrow(value);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#narrow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#narrow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid elementType() {\r\n    TypeDescriptor desc = TypeDescriptor.valueOf(List.class);\r\n    Integer value = 3;\r\n    desc = desc.elementTypeDescriptor(value);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#elementType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypePreserveContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid elementTypePreserveContext() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(getClass().getField(\"listPreserveContext\"));\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    List<Integer> value = new ArrayList<>(3);\r\n    desc = desc.elementTypeDescriptor(value);\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getAnnotation(FieldAnnotation.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#elementTypePreserveContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypePreserveContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapKeyType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapKeyType() {\r\n    TypeDescriptor desc = TypeDescriptor.valueOf(Map.class);\r\n    Integer value = 3;\r\n    desc = desc.getMapKeyTypeDescriptor(value);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  }
]