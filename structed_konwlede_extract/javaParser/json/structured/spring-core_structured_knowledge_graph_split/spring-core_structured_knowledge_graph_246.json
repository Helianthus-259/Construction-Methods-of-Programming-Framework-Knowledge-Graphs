[
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromValues() {\r\n    map.put(\"key\", \"value\");\r\n    map.values().remove(\"value\");\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValuesViaIterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromValuesViaIterator() {\r\n    map.put(\"key\", \"value\");\r\n    nextAndRemove(map.values().iterator());\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValuesViaIterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromValuesViaIterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clearFromEntrySet() {\r\n    map.put(\"key\", \"value\");\r\n    map.entrySet().clear();\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#clearFromEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromEntrySet() {\r\n    map.put(\"key\", \"value\");\r\n    map.entrySet().remove(map.entrySet().iterator().next());\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySetViaIterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeFromEntrySetViaIterator() {\r\n    map.put(\"key\", \"value\");\r\n    nextAndRemove(map.entrySet().iterator());\r\n    assertThat(map).isEmpty();\r\n    map.computeIfAbsent(\"key\", k -> \"newvalue\");\r\n    assertThat(map.get(\"key\")).isEqualTo(\"newvalue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySetViaIterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#removeFromEntrySetViaIterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests#nextAndRemove(Iterator<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void nextAndRemove(Iterator<?> iterator) {\r\n    iterator.next();\r\n    iterator.remove();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMapTests#nextAndRemove(Iterator<?>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex.feature",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex.feature",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex.feature;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\n/**\n * {@link ClassLoader} used to load classes without causing build-time\n * initialization.\n *\n * @author Phillip Webb\n * @since 6.0\n */\nclass ThrowawayClassLoader extends ClassLoader {\n\n\tstatic {\n\t\tregisterAsParallelCapable();\n\t}\n\n\tprivate final ClassLoader resourceLoader;\n\n\n\tThrowawayClassLoader(ClassLoader parent) {\n\t\tsuper(parent.getParent());\n\t\tthis.resourceLoader = parent;\n\t}\n\n\n\t@Override\n\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n\t\tsynchronized (getClassLoadingLock(name)) {\n\t\t\tClass<?> loaded = findLoadedClass(name);\n\t\t\tif (loaded != null) {\n\t\t\t\treturn loaded;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn super.loadClass(name, true);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\treturn loadClassFromResource(name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate Class<?> loadClassFromResource(String name) throws ClassNotFoundException, ClassFormatError {\n\t\tString resourceName = name.replace('.', '/') + \".class\";\n\t\tInputStream inputStream = this.resourceLoader.getResourceAsStream(resourceName);\n\t\tif (inputStream == null) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\t\tinputStream.transferTo(outputStream);\n\t\t\tbyte[] bytes = outputStream.toByteArray();\n\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new ClassNotFoundException(\"Cannot load resource for class [\" + name + \"]\", ex);\n\t\t}\n\t}\n\n\t@Override\n\tprotected URL findResource(String name) {\n\t\treturn this.resourceLoader.getResource(name);\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]