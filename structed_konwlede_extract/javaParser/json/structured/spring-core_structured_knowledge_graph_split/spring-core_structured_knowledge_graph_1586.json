[
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid writeWithTypeReferenceForDoubleInnerClass() {\r\n    assertStringAttribute(TypeReference.of(Inner.class), \"org.springframework.aot.nativex.BasicJsonWriterTests$Nested$Inner\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#writeWithTypeReferenceForDoubleInnerClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#assertStringAttribute(Object,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "void assertStringAttribute(Object value, String expectedValue) {\r\n    Map<String, Object> attributes = new LinkedHashMap<>();\r\n    attributes.put(\"test\", value);\r\n    this.json.writeObject(attributes);\r\n    assertThat(out.toString()).contains(\"\\\"test\\\": \\\"\" + expectedValue + \"\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#assertStringAttribute(Object,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests#orderedMap(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\r\n    LinkedHashMap<String, Object> map = new LinkedHashMap<>();\r\n    map.put(key, value);\r\n    return map;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriterTests#orderedMap(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.Nested",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.Nested",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.StringWriter;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.nativex.BasicJsonWriterTests.Nested.Inner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BasicJsonWriter}.\n *\n * @author Stephane Nicoll\n */\nclass BasicJsonWriterTests {\n\n\tprivate final StringWriter out = new StringWriter();\n\n\tprivate final BasicJsonWriter json = new BasicJsonWriter(out, \"\\t\");\n\n\t@Test\n\tvoid writeObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"another\", true);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"another\": true\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", orderedMap(\"enabled\", false));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": {\n\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfString() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", List.of(\"test\", \"value\", \"another\"));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\"test\",\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t\t\"another\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tLinkedHashMap<String, Object> secondNested = orderedMap(\"name\", \"second\");\n\t\tsecondNested.put(\"enabled\", false);\n\t\tattributes.put(\"nested\", List.of(orderedMap(\"name\", \"first\"), secondNested, orderedMap(\"name\", \"third\")));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"first\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"second\",\n\t\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"third\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyArray() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyList());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [ ]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyMap());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": { }\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeDoubleQuote() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackslash() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackspace() {\n\t\tassertStringAttribute(\"foo\\bbar\", \"foo\\\\bbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeFormFeed() {\n\t\tassertStringAttribute(\"foo\\fbar\", \"foo\\\\fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeNewline() {\n\t\tassertStringAttribute(\"foo\\nbar\", \"foo\\\\nbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeCarriageReturn() {\n\t\tassertStringAttribute(\"foo\\rbar\", \"foo\\\\rbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeTab() {\n\t\tassertStringAttribute(\"foo\\tbar\", \"foo\\\\tbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeUnicode() {\n\t\tassertStringAttribute(\"foo\\u001Fbar\", \"foo\\\\u001fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForSimpleClass() {\n\t\tassertStringAttribute(TypeReference.of(String.class), \"java.lang.String\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Nested.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForDoubleInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Inner.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested$Inner\");\n\t}\n\n\tvoid assertStringAttribute(Object value, String expectedValue) {\n\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n\t\tattributes.put(\"test\", value);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).contains(\"\\\"test\\\": \\\"\" + expectedValue + \"\\\"\");\n\t}\n\n\tprivate static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\n\t\tLinkedHashMap<String, Object> map = new LinkedHashMap<>();\n\t\tmap.put(key, value);\n\t\treturn map;\n\t}\n\n\n\tstatic class Nested {\n\n\t\tstatic class Inner {\n\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.Inner",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.Inner",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.StringWriter;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.nativex.BasicJsonWriterTests.Nested.Inner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BasicJsonWriter}.\n *\n * @author Stephane Nicoll\n */\nclass BasicJsonWriterTests {\n\n\tprivate final StringWriter out = new StringWriter();\n\n\tprivate final BasicJsonWriter json = new BasicJsonWriter(out, \"\\t\");\n\n\t@Test\n\tvoid writeObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"another\", true);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"another\": true\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", orderedMap(\"enabled\", false));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": {\n\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfString() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", List.of(\"test\", \"value\", \"another\"));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t\"test\",\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t\t\"another\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedArrayOfObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tLinkedHashMap<String, Object> secondNested = orderedMap(\"name\", \"second\");\n\t\tsecondNested.put(\"enabled\", false);\n\t\tattributes.put(\"nested\", List.of(orderedMap(\"name\", \"first\"), secondNested, orderedMap(\"name\", \"third\")));\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"first\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"second\",\n\t\t\t\t\t\t\t\"enabled\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"third\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyArray() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyList());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": [ ]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeObjectWithNestedEmptyObject() {\n\t\tMap<String, Object> attributes = orderedMap(\"test\", \"value\");\n\t\tattributes.put(\"nested\", Collections.emptyMap());\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).isEqualToNormalizingNewlines(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"test\": \"value\",\n\t\t\t\t\t\"nested\": { }\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeDoubleQuote() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackslash() {\n\t\tassertStringAttribute(\"foo\\\"bar\", \"foo\\\\\\\"bar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeBackspace() {\n\t\tassertStringAttribute(\"foo\\bbar\", \"foo\\\\bbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeFormFeed() {\n\t\tassertStringAttribute(\"foo\\fbar\", \"foo\\\\fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeNewline() {\n\t\tassertStringAttribute(\"foo\\nbar\", \"foo\\\\nbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeCarriageReturn() {\n\t\tassertStringAttribute(\"foo\\rbar\", \"foo\\\\rbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeTab() {\n\t\tassertStringAttribute(\"foo\\tbar\", \"foo\\\\tbar\");\n\t}\n\n\t@Test\n\tvoid writeWithEscapeUnicode() {\n\t\tassertStringAttribute(\"foo\\u001Fbar\", \"foo\\\\u001fbar\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForSimpleClass() {\n\t\tassertStringAttribute(TypeReference.of(String.class), \"java.lang.String\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Nested.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested\");\n\t}\n\n\t@Test\n\tvoid writeWithTypeReferenceForDoubleInnerClass() {\n\t\tassertStringAttribute(TypeReference.of(Inner.class),\n\t\t\t\t\"org.springframework.aot.nativex.BasicJsonWriterTests$Nested$Inner\");\n\t}\n\n\tvoid assertStringAttribute(Object value, String expectedValue) {\n\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n\t\tattributes.put(\"test\", value);\n\t\tthis.json.writeObject(attributes);\n\t\tassertThat(out.toString()).contains(\"\\\"test\\\": \\\"\" + expectedValue + \"\\\"\");\n\t}\n\n\tprivate static LinkedHashMap<String, Object> orderedMap(String key, Object value) {\n\t\tLinkedHashMap<String, Object> map = new LinkedHashMap<>();\n\t\tmap.put(key, value);\n\t\treturn map;\n\t}\n\n\n\tstatic class Nested {\n\n\t\tstatic class Inner {\n\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport org.json.JSONException;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\nimport org.skyscreamer.jsonassert.JSONAssert;\nimport org.skyscreamer.jsonassert.JSONCompareMode;\n\nimport org.springframework.aot.hint.ExecutableMode;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.ProxyHints;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.SerializationHints;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.core.codec.StringDecoder;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link FileNativeConfigurationWriter}.\n *\n * @author Sebastien Deleuze\n * @author Janne Valkealahti\n * @author Sam Brannen\n */\nclass FileNativeConfigurationWriterTests {\n\n\t@TempDir\n\tstatic Path tempDir;\n\n\n\t@Test\n\tvoid emptyConfig() {\n\t\tPath empty = tempDir.resolve(\"empty\");\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(empty);\n\t\tgenerator.write(new RuntimeHints());\n\t\tassertThat(empty.toFile().listFiles()).isNull();\n\t}\n\n\t@Test\n\tvoid serializationConfig() throws IOException, JSONException {\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tSerializationHints serializationHints = hints.serialization();\n\t\tserializationHints.registerType(Integer.class);\n\t\tserializationHints.registerType(Long.class);\n\t\tgenerator.write(hints);\n\t\tassertEquals(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"serialization\": [\n\t\t\t\t\t\t{ \"type\": \"java.lang.Integer\" },\n\t\t\t\t\t\t{ \"type\": \"java.lang.Long\" }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid proxyConfig() throws IOException, JSONException {\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tProxyHints proxyHints = hints.proxies();\n\t\tproxyHints.registerJdkProxy(Function.class);\n\t\tproxyHints.registerJdkProxy(Function.class, Consumer.class);\n\t\tgenerator.write(hints);\n\t\tassertEquals(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"reflection\": [\n\t\t\t\t\t\t{ type: {\"proxy\": [ \"java.util.function.Function\" ] } },\n\t\t\t\t\t\t{ type: {\"proxy\": [ \"java.util.function.Function\", \"java.util.function.Consumer\" ] } }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid reflectionConfig() throws IOException, JSONException {\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tReflectionHints reflectionHints = hints.reflection();\n\t\treflectionHints.registerType(StringDecoder.class, builder -> builder\n\t\t\t\t.onReachableType(String.class)\n\t\t\t\t.withMembers(MemberCategory.ACCESS_PUBLIC_FIELDS, MemberCategory.ACCESS_DECLARED_FIELDS,\n\t\t\t\t\t\tMemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,\n\t\t\t\t\t\tMemberCategory.INVOKE_PUBLIC_METHODS, MemberCategory.INVOKE_DECLARED_METHODS)\n\t\t\t\t.withField(\"DEFAULT_CHARSET\")\n\t\t\t\t.withField(\"defaultCharset\")\n\t\t\t\t.withMethod(\"setDefaultCharset\", TypeReference.listOf(Charset.class), ExecutableMode.INVOKE));\n\t\tgenerator.write(hints);\n\t\tassertEquals(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"reflection\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"org.springframework.core.codec.StringDecoder\",\n\t\t\t\t\t\t\t\"condition\": { \"typeReached\": \"java.lang.String\" },\n\t\t\t\t\t\t\t\"allPublicFields\": true,\n\t\t\t\t\t\t\t\"allDeclaredFields\": true,\n\t\t\t\t\t\t\t\"allPublicConstructors\": true,\n\t\t\t\t\t\t\t\"allDeclaredConstructors\": true,\n\t\t\t\t\t\t\t\"allPublicMethods\": true,\n\t\t\t\t\t\t\t\"allDeclaredMethods\": true,\n\t\t\t\t\t\t\t\"fields\": [\n\t\t\t\t\t\t\t\t{ \"name\": \"DEFAULT_CHARSET\" },\n\t\t\t\t\t\t\t\t{ \"name\": \"defaultCharset\" }\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"methods\": [\n\t\t\t\t\t\t\t\t{ \"name\": \"setDefaultCharset\", \"parameterTypes\": [ \"java.nio.charset.Charset\" ] }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\");\n\t}\n\n\t@Test\n\tvoid jniConfig() throws IOException, JSONException {\n\t\t// same format as reflection so just test basic file generation\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tReflectionHints jniHints = hints.jni();\n\t\tjniHints.registerType(StringDecoder.class, builder -> builder.onReachableType(String.class));\n\t\tgenerator.write(hints);\n\t\tassertEquals(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"jni\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"org.springframework.core.codec.StringDecoder\",\n\t\t\t\t\t\t\t\"condition\": { \"typeReached\": \"java.lang.String\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\"\"\");\n\t}\n\n\t@Test\n\tvoid resourceConfig() throws IOException, JSONException {\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tResourceHints resourceHints = hints.resources();\n\t\tresourceHints.registerPattern(\"com/example/test.properties\");\n\t\tresourceHints.registerPattern(\"com/example/another.properties\");\n\t\tgenerator.write(hints);\n\t\tassertEquals(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"resources\": [\n\t\t\t\t\t\t\t{\"glob\": \"com/example/test.properties\"},\n\t\t\t\t\t\t\t{\"glob\": \"/\"},\n\t\t\t\t\t\t\t{\"glob\": \"com\"},\n\t\t\t\t\t\t\t{\"glob\": \"com/example\"},\n\t\t\t\t\t\t\t{\"glob\": \"com/example/another.properties\"}\n\t\t\t\t\t]\n\t\t\t\t}\"\"\");\n\t}\n\n\t@Test\n\tvoid namespace() {\n\t\tString groupId = \"foo.bar\";\n\t\tString artifactId = \"baz\";\n\t\tString filename = \"reachability-metadata.json\";\n\t\tFileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir, groupId, artifactId);\n\t\tRuntimeHints hints = new RuntimeHints();\n\t\tResourceHints resourceHints = hints.resources();\n\t\tresourceHints.registerPattern(\"com/example/test.properties\");\n\t\tgenerator.write(hints);\n\t\tPath jsonFile = tempDir.resolve(\"META-INF\").resolve(\"native-image\").resolve(groupId).resolve(artifactId).resolve(filename);\n\t\tassertThat(jsonFile.toFile()).exists();\n\t}\n\n\tprivate void assertEquals(String expectedString) throws IOException, JSONException {\n\t\tPath jsonFile = tempDir.resolve(\"META-INF\").resolve(\"native-image\").resolve(\"reachability-metadata.json\");\n\t\tString content = Files.readString(jsonFile);\n\t\tJSONAssert.assertEquals(expectedString, content, JSONCompareMode.NON_EXTENSIBLE);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#tempDir",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#tempDir",
    "headType": "field",
    "relation": "haveType",
    "tail": "Path",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyConfig() {\r\n    Path empty = tempDir.resolve(\"empty\");\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(empty);\r\n    generator.write(new RuntimeHints());\r\n    assertThat(empty.toFile().listFiles()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#emptyConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriterTests#serializationConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializationConfig() throws IOException, JSONException {\r\n    FileNativeConfigurationWriter generator = new FileNativeConfigurationWriter(tempDir);\r\n    RuntimeHints hints = new RuntimeHints();\r\n    SerializationHints serializationHints = hints.serialization();\r\n    serializationHints.registerType(Integer.class);\r\n    serializationHints.registerType(Long.class);\r\n    generator.write(hints);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"serialization\": [\r\n        \t\t{ \"type\": \"java.lang.Integer\" },\r\n        \t\t{ \"type\": \"java.lang.Long\" }\r\n        \t]\r\n        }\r\n        \"\"\");\r\n}",
    "tailType": "method_code"
  }
]