[
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerDocumentNamespacePrefixes() throws Exception {\r\n    xmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n    handler = new DomContentHandler(result);\r\n    expected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.parse(new InputSource(new StringReader(XML_1)));\r\n    assertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNamespacePrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerDocumentNoNamespacePrefixes() throws Exception {\r\n    handler = new DomContentHandler(result);\r\n    expected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.parse(new InputSource(new StringReader(XML_1)));\r\n    assertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerDocumentNoNamespacePrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contentHandlerElement() throws Exception {\r\n    Element rootElement = result.createElementNS(\"namespace\", \"root\");\r\n    result.appendChild(rootElement);\r\n    handler = new DomContentHandler(rootElement);\r\n    expected = documentBuilder.parse(new InputSource(new StringReader(XML_2_EXPECTED)));\r\n    xmlReader.setContentHandler(handler);\r\n    xmlReader.parse(new InputSource(new StringReader(XML_2_SNIPPET)));\r\n    assertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#contentHandlerElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.CurrentFrame",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.CurrentFrame",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\n\npackage org.springframework.asm;\n\n/**\n * Information about the input stack map frame at the \"current\" instruction of a method. This is\n * implemented as a Frame subclass for a \"basic block\" containing only one instruction.\n *\n * @author Eric Bruneton\n */\nfinal class CurrentFrame extends Frame {\n\n  CurrentFrame(final Label owner) {\n    super(owner);\n  }\n\n  /**\n   * Sets this CurrentFrame to the input stack map frame of the next \"current\" instruction, i.e. the\n   * instruction just after the given one. It is assumed that the value of this object when this\n   * method is called is the stack map frame status just before the given instruction is executed.\n   */\n  @Override\n  void execute(\n      final int opcode, final int arg, final Symbol symbolArg, final SymbolTable symbolTable) {\n    super.execute(opcode, arg, symbolArg, symbolTable);\n    Frame successor = new Frame(null);\n    merge(symbolTable, successor, 0);\n    copyFrom(successor);\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sets this CurrentFrame to the input stack map frame of the next \"current\" instruction, i.e. the\r\n * instruction just after the given one. It is assumed that the value of this object when this\r\n * method is called is the stack map frame status just before the given instruction is executed.\r\n */\r\n@Override\r\nvoid execute(final int opcode, final int arg, final Symbol symbolArg, final SymbolTable symbolTable) {\r\n    super.execute(opcode, arg, symbolArg, symbolTable);\r\n    Frame successor = new Frame(null);\r\n    merge(symbolTable, successor, 0);\r\n    copyFrom(successor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.CurrentFrame",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.CurrentFrame#execute(int,int,Symbol,SymbolTable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.CurrentFrame",
    "headType": "class",
    "relation": "extend",
    "tail": "Frame",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Edge",
    "tailType": "class"
  }
]