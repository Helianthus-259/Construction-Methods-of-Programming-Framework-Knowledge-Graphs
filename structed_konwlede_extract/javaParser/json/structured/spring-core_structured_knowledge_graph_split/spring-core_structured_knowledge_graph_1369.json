[
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#USER_DECLARED_METHODS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#USER_DECLARED_METHODS",
    "headType": "field",
    "relation": "haveType",
    "tail": "MethodFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#COPYABLE_FIELDS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#COPYABLE_FIELDS",
    "headType": "field",
    "relation": "haveType",
    "tail": "FieldFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#CGLIB_RENAMED_METHOD_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#CGLIB_RENAMED_METHOD_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#EMPTY_CLASS_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#EMPTY_CLASS_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#EMPTY_METHOD_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#EMPTY_METHOD_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#EMPTY_FIELD_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#EMPTY_FIELD_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Field",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#EMPTY_OBJECT_ARRAY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#EMPTY_OBJECT_ARRAY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#declaredMethodsCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#declaredMethodsCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class<?>, Method[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ReflectionUtils#declaredFieldsCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#declaredFieldsCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class<?>, Field[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#handleReflectionException(Exception)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Exception handling\r\n/**\r\n * Handle the given reflection exception.\r\n * <p>Should only be called if no checked exception is expected to be thrown\r\n * by a target method, or if an error occurs while accessing a method or field.\r\n * <p>Throws the underlying RuntimeException or Error in case of an\r\n * InvocationTargetException with such a root cause. Throws an\r\n * IllegalStateException with an appropriate message or\r\n * UndeclaredThrowableException otherwise.\r\n * @param ex the reflection exception to handle\r\n */\r\npublic static void handleReflectionException(Exception ex) {\r\n    if (ex instanceof NoSuchMethodException) {\r\n        throw new IllegalStateException(\"Method not found: \" + ex.getMessage());\r\n    }\r\n    if (ex instanceof IllegalAccessException) {\r\n        throw new IllegalStateException(\"Could not access method or field: \" + ex.getMessage());\r\n    }\r\n    if (ex instanceof InvocationTargetException invocationTargetException) {\r\n        handleInvocationTargetException(invocationTargetException);\r\n    }\r\n    if (ex instanceof RuntimeException runtimeException) {\r\n        throw runtimeException;\r\n    }\r\n    throw new UndeclaredThrowableException(ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#handleReflectionException(Exception)",
    "tailType": "method"
  }
]