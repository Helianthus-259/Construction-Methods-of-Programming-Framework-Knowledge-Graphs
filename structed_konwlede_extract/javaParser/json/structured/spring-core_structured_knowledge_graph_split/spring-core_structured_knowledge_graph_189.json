[
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#putSupported()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putSupported()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#remove()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid remove() {\r\n    Map<String, String> first = new HashMap<>(Map.of(\"foo\", \"bar\", \"baz\", \"qux\"));\r\n    Map<String, String> second = new HashMap<>(Map.of(\"quux\", \"corge\"));\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    assertThat(composite.remove(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(composite.containsKey(\"foo\")).isFalse();\r\n    assertThat(first).containsExactly(entry(\"baz\", \"qux\"));\r\n    assertThat(composite.remove(\"grault\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#remove()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllUnsupported()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid putAllUnsupported() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\");\r\n    Map<String, String> second = Map.of(\"baz\", \"qux\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> composite.putAll(Map.of(\"quux\", \"corge\", \"grault\", \"garply\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#putAllUnsupported()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllUnsupported()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllPutFunction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid putAllPutFunction() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\");\r\n    Map<String, String> second = Map.of(\"baz\", \"qux\");\r\n    AtomicBoolean functionInvoked = new AtomicBoolean();\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second, (k, v) -> {\r\n        assertThat(k).isEqualTo(\"quux\");\r\n        assertThat(v).isEqualTo(\"corge\");\r\n        functionInvoked.set(true);\r\n        return \"grault\";\r\n    }, null);\r\n    composite.putAll(Map.of(\"quux\", \"corge\"));\r\n    assertThat(functionInvoked).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#putAllPutFunction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllPutFunction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllPutAllFunction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid putAllPutAllFunction() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\");\r\n    Map<String, String> second = Map.of(\"baz\", \"qux\");\r\n    AtomicBoolean functionInvoked = new AtomicBoolean();\r\n    Map<String, String> argument = Map.of(\"quux\", \"corge\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second, null, m -> {\r\n        assertThat(m).isSameAs(argument);\r\n        functionInvoked.set(true);\r\n    });\r\n    composite.putAll(argument);\r\n    assertThat(functionInvoked).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#putAllPutAllFunction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#putAllPutAllFunction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clear() {\r\n    Map<String, String> first = new HashMap<>(Map.of(\"foo\", \"bar\", \"baz\", \"qux\"));\r\n    Map<String, String> second = new HashMap<>(Map.of(\"quux\", \"corge\"));\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    composite.clear();\r\n    assertThat(composite).isEmpty();\r\n    assertThat(first).isEmpty();\r\n    assertThat(second).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid keySet() {\r\n    Map<String, String> first = Map.of(\"foo\", \"bar\");\r\n    Map<String, String> second = Map.of(\"baz\", \"qux\");\r\n    CompositeMap<String, String> composite = new CompositeMap<>(first, second);\r\n    Set<String> keySet = composite.keySet();\r\n    assertThat(keySet).containsExactly(\"foo\", \"baz\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeMapTests#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeMapTests#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]