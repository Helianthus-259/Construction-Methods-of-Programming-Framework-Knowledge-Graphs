[
  {
    "head": "org.springframework.util.DigestUtils#HEX_CHARS",
    "headType": "field",
    "relation": "haveType",
    "tail": "char",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DigestUtils#md5Digest(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Calculate the MD5 digest of the given bytes.\r\n * @param bytes the bytes to calculate the digest over\r\n * @return the digest\r\n */\r\npublic static byte[] md5Digest(byte[] bytes) {\r\n    return digest(MD5_ALGORITHM_NAME, bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#md5Digest(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#md5Digest(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Calculate the MD5 digest of the given stream.\r\n * <p>This method does <strong>not</strong> close the input stream.\r\n * @param inputStream the InputStream to calculate the digest over\r\n * @return the digest\r\n * @since 4.2\r\n */\r\npublic static byte[] md5Digest(InputStream inputStream) throws IOException {\r\n    return digest(MD5_ALGORITHM_NAME, inputStream);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#md5Digest(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#md5DigestAsHex(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hexadecimal string representation of the MD5 digest of the given bytes.\r\n * @param bytes the bytes to calculate the digest over\r\n * @return a hexadecimal digest string\r\n */\r\npublic static String md5DigestAsHex(byte[] bytes) {\r\n    return digestAsHexString(MD5_ALGORITHM_NAME, bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#md5DigestAsHex(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#md5DigestAsHex(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hexadecimal string representation of the MD5 digest of the given stream.\r\n * <p>This method does <strong>not</strong> close the input stream.\r\n * @param inputStream the InputStream to calculate the digest over\r\n * @return a hexadecimal digest string\r\n * @since 4.2\r\n */\r\npublic static String md5DigestAsHex(InputStream inputStream) throws IOException {\r\n    return digestAsHexString(MD5_ALGORITHM_NAME, inputStream);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#md5DigestAsHex(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#appendMd5DigestAsHex(byte[],StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Append a hexadecimal string representation of the MD5 digest of the given\r\n * bytes to the given {@link StringBuilder}.\r\n * @param bytes the bytes to calculate the digest over\r\n * @param builder the string builder to append the digest to\r\n * @return the given string builder\r\n */\r\npublic static StringBuilder appendMd5DigestAsHex(byte[] bytes, StringBuilder builder) {\r\n    return appendDigestAsHex(MD5_ALGORITHM_NAME, bytes, builder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#appendMd5DigestAsHex(byte[],StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#appendMd5DigestAsHex(InputStream,StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Append a hexadecimal string representation of the MD5 digest of the given\r\n * inputStream to the given {@link StringBuilder}.\r\n * <p>This method does <strong>not</strong> close the input stream.\r\n * @param inputStream the inputStream to calculate the digest over\r\n * @param builder the string builder to append the digest to\r\n * @return the given string builder\r\n * @since 4.2\r\n */\r\npublic static StringBuilder appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder) throws IOException {\r\n    return appendDigestAsHex(MD5_ALGORITHM_NAME, inputStream, builder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#appendMd5DigestAsHex(InputStream,StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#getDigest(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MessageDigest} with the given algorithm.\r\n * <p>Necessary because {@code MessageDigest} is not thread-safe.\r\n */\r\nprivate static MessageDigest getDigest(String algorithm) {\r\n    try {\r\n        return MessageDigest.getInstance(algorithm);\r\n    } catch (NoSuchAlgorithmException ex) {\r\n        throw new IllegalStateException(\"Could not find MessageDigest with algorithm \\\"\" + algorithm + \"\\\"\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#getDigest(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digest(String,byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static byte[] digest(String algorithm, byte[] bytes) {\r\n    return getDigest(algorithm).digest(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digest(String,byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digest(String,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static byte[] digest(String algorithm, InputStream inputStream) throws IOException {\r\n    MessageDigest messageDigest = getDigest(algorithm);\r\n    if (inputStream instanceof UpdateMessageDigestInputStream digestInputStream) {\r\n        digestInputStream.updateMessageDigest(messageDigest);\r\n        return messageDigest.digest();\r\n    } else {\r\n        final byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];\r\n        int bytesRead;\r\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n            messageDigest.update(buffer, 0, bytesRead);\r\n        }\r\n        return messageDigest.digest();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digest(String,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digestAsHexString(String,byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String digestAsHexString(String algorithm, byte[] bytes) {\r\n    char[] hexDigest = digestAsHexChars(algorithm, bytes);\r\n    return new String(hexDigest);\r\n}",
    "tailType": "method_code"
  }
]