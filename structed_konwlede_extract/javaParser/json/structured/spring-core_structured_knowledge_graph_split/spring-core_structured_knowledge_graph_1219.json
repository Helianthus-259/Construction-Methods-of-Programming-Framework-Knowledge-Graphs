[
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#getReturnTypeName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#getReturnTypeName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isAbstract()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isAbstract() {\r\n    return Modifier.isAbstract(this.introspectedMethod.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#isAbstract()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isAbstract()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isStatic()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isStatic() {\r\n    return Modifier.isStatic(this.introspectedMethod.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#isStatic()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isStatic()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isFinal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isFinal() {\r\n    return Modifier.isFinal(this.introspectedMethod.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#isFinal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isFinal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isOverridable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isOverridable() {\r\n    return !isStatic() && !isFinal() && !isPrivate();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#isOverridable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isOverridable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#isPrivate()",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isPrivate() {\r\n    return Modifier.isPrivate(this.introspectedMethod.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#isPrivate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#getAnnotationAttributes(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Map<String, @Nullable Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString) {\r\n    if (this.nestedAnnotationsAsMap) {\r\n        return MethodMetadata.super.getAnnotationAttributes(annotationName, classValuesAsString);\r\n    }\r\n    return AnnotatedElementUtils.getMergedAnnotationAttributes(this.introspectedMethod, annotationName, classValuesAsString, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadata#getAnnotationAttributes(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#getAnnotationAttributes(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadata#getAnnotationAttributes(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]