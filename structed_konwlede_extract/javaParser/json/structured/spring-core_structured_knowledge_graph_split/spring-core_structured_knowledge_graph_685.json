[
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#target",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#target",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    super.setTarget(target);\r\n    pass.setTarget(target);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected boolean accept(int version, int access, String name, String signature, String superName, String[] interfaces);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#accept(int,int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    target = accept(version, access, name, signature, superName, interfaces) ? pass : cv;\r\n    target.visit(version, access, name, signature, superName, interfaces);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visit(int,int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitSource(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitSource(String source, String debug) {\r\n    target.visitSource(source, debug);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitSource(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitSource(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitOuterClass(String owner, String name, String desc) {\r\n    target.visitOuterClass(owner, name, desc);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitOuterClass(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return target.visitAnnotation(desc, visible);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    target.visitAttribute(attr);\r\n}",
    "tailType": "method_code"
  }
]