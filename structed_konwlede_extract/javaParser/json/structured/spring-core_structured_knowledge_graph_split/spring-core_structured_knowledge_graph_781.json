[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Predicate} that evaluates to {@code true} if the\r\n * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\r\n * the specified array.\r\n * @param <A> the annotation type\r\n * @param types the types that should be matched\r\n * @return a {@link Predicate} to test the annotation type\r\n */\r\npublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Class<?>... types) {\r\n    return annotation -> ObjectUtils.containsElement(types, annotation.getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Predicate} that evaluates to {@code true} if the\r\n * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\r\n * the specified collection.\r\n * @param <A> the annotation type\r\n * @param types the type names or classes that should be matched\r\n * @return a {@link Predicate} to test the annotation type\r\n */\r\npublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Collection<?> types) {\r\n    return annotation -> types.stream().map(type -> type instanceof Class<?> clazz ? clazz.getName() : type.toString()).anyMatch(typeName -> typeName.equals(annotation.getType().getName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates#firstRunOf(Function<? super MergedAnnotation<A>,?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new stateful, single use {@link Predicate} that matches only\r\n * the first run of an extracted value. For example,\r\n * {@code MergedAnnotationPredicates.firstRunOf(MergedAnnotation::distance)}\r\n * will match the first annotation, and any subsequent runs that have the\r\n * same distance.\r\n * <p>NOTE: This predicate only matches the first run. Once the extracted\r\n * value changes, the predicate always returns {@code false}. For example,\r\n * if you have a set of annotations with distances {@code [1, 1, 2, 1]} then\r\n * only the first two will match.\r\n * @param valueExtractor function used to extract the value to check\r\n * @return a {@link Predicate} that matches the first run of the extracted\r\n * values\r\n */\r\npublic static <A extends Annotation> Predicate<MergedAnnotation<A>> firstRunOf(Function<? super MergedAnnotation<A>, ?> valueExtractor) {\r\n    return new FirstRunOfPredicate<>(valueExtractor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates#firstRunOf(Function<? super MergedAnnotation<A>,?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates#unique(Function<? super MergedAnnotation<A>,K>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new stateful, single use {@link Predicate} that matches\r\n * annotations that are unique based on the extracted key. For example\r\n * {@code MergedAnnotationPredicates.unique(MergedAnnotation::getType)} will\r\n * match the first time a unique type is encountered.\r\n * @param keyExtractor function used to extract the key used to test for\r\n * uniqueness\r\n * @return a {@link Predicate} that matches a unique annotation based on the\r\n * extracted key\r\n */\r\npublic static <A extends Annotation, K> Predicate<MergedAnnotation<A>> unique(Function<? super MergedAnnotation<A>, K> keyExtractor) {\r\n    return new UniquePredicate<>(keyExtractor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates#unique(Function<? super MergedAnnotation<A>,K>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.FirstRunOfPredicate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Predicate implementations that provide various test operations for\n * {@link MergedAnnotation MergedAnnotations}.\n *\n * @author Phillip Webb\n * @since 5.2\n */\npublic abstract class MergedAnnotationPredicates {\n\n\tprivate MergedAnnotationPredicates() {\n\t}\n\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the name of the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified array.\n\t * @param <A> the annotation type\n\t * @param typeNames the names that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(String... typeNames) {\n\t\treturn annotation -> ObjectUtils.containsElement(typeNames, annotation.getType().getName());\n\t}\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified array.\n\t * @param <A> the annotation type\n\t * @param types the types that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Class<?>... types) {\n\t\treturn annotation -> ObjectUtils.containsElement(types, annotation.getType());\n\t}\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified collection.\n\t * @param <A> the annotation type\n\t * @param types the type names or classes that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Collection<?> types) {\n\t\treturn annotation -> types.stream()\n\t\t\t\t.map(type -> type instanceof Class<?> clazz ? clazz.getName() : type.toString())\n\t\t\t\t.anyMatch(typeName -> typeName.equals(annotation.getType().getName()));\n\t}\n\n\t/**\n\t * Create a new stateful, single use {@link Predicate} that matches only\n\t * the first run of an extracted value. For example,\n\t * {@code MergedAnnotationPredicates.firstRunOf(MergedAnnotation::distance)}\n\t * will match the first annotation, and any subsequent runs that have the\n\t * same distance.\n\t * <p>NOTE: This predicate only matches the first run. Once the extracted\n\t * value changes, the predicate always returns {@code false}. For example,\n\t * if you have a set of annotations with distances {@code [1, 1, 2, 1]} then\n\t * only the first two will match.\n\t * @param valueExtractor function used to extract the value to check\n\t * @return a {@link Predicate} that matches the first run of the extracted\n\t * values\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<A>> firstRunOf(\n\t\t\tFunction<? super MergedAnnotation<A>, ?> valueExtractor) {\n\n\t\treturn new FirstRunOfPredicate<>(valueExtractor);\n\t}\n\n\t/**\n\t * Create a new stateful, single use {@link Predicate} that matches\n\t * annotations that are unique based on the extracted key. For example\n\t * {@code MergedAnnotationPredicates.unique(MergedAnnotation::getType)} will\n\t * match the first time a unique type is encountered.\n\t * @param keyExtractor function used to extract the key used to test for\n\t * uniqueness\n\t * @return a {@link Predicate} that matches a unique annotation based on the\n\t * extracted key\n\t */\n\tpublic static <A extends Annotation, K> Predicate<MergedAnnotation<A>> unique(\n\t\t\tFunction<? super MergedAnnotation<A>, K> keyExtractor) {\n\n\t\treturn new UniquePredicate<>(keyExtractor);\n\t}\n\n\n\t/**\n\t * {@link Predicate} implementation used for\n\t * {@link MergedAnnotationPredicates#firstRunOf(Function)}.\n\t */\n\tprivate static class FirstRunOfPredicate<A extends Annotation> implements Predicate<MergedAnnotation<A>> {\n\n\t\tprivate final Function<? super MergedAnnotation<A>, ?> valueExtractor;\n\n\t\tprivate boolean hasLastValue;\n\n\t\t@SuppressWarnings(\"NullAway.Init\")\n\t\tprivate Object lastValue;\n\n\t\tFirstRunOfPredicate(Function<? super MergedAnnotation<A>, ?> valueExtractor) {\n\t\t\tAssert.notNull(valueExtractor, \"Value extractor must not be null\");\n\t\t\tthis.valueExtractor = valueExtractor;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean test(MergedAnnotation<A> annotation) {\n\t\t\tif (!this.hasLastValue) {\n\t\t\t\tthis.hasLastValue = true;\n\t\t\t\tthis.lastValue = this.valueExtractor.apply(annotation);\n\t\t\t}\n\t\t\tObject value = this.valueExtractor.apply(annotation);\n\t\t\treturn ObjectUtils.nullSafeEquals(value, this.lastValue);\n\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Predicate} implementation used for\n\t * {@link MergedAnnotationPredicates#unique(Function)}.\n\t */\n\tprivate static class UniquePredicate<A extends Annotation, K> implements Predicate<MergedAnnotation<A>> {\n\n\t\tprivate final Function<? super MergedAnnotation<A>, K> keyExtractor;\n\n\t\tprivate final Set<K> seen = new HashSet<>();\n\n\t\tUniquePredicate(Function<? super MergedAnnotation<A>, K> keyExtractor) {\n\t\t\tAssert.notNull(keyExtractor, \"Key extractor must not be null\");\n\t\t\tthis.keyExtractor = keyExtractor;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean test(MergedAnnotation<A> annotation) {\n\t\t\tK key = this.keyExtractor.apply(annotation);\n\t\t\treturn this.seen.add(key);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.FirstRunOfPredicate#valueExtractor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate#valueExtractor",
    "headType": "field",
    "relation": "haveType",
    "tail": "Function<? super MergedAnnotation<A>, ?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.FirstRunOfPredicate#hasLastValue",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate#hasLastValue",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.FirstRunOfPredicate#lastValue",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate#lastValue",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate#test(MergedAnnotation<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean test(MergedAnnotation<A> annotation) {\r\n    if (!this.hasLastValue) {\r\n        this.hasLastValue = true;\r\n        this.lastValue = this.valueExtractor.apply(annotation);\r\n    }\r\n    Object value = this.valueExtractor.apply(annotation);\r\n    return ObjectUtils.nullSafeEquals(value, this.lastValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.FirstRunOfPredicate#test(MergedAnnotation<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.FirstRunOfPredicate#test(MergedAnnotation<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]