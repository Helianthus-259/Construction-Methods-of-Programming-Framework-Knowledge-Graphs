[
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#directStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\r\n    Method source = methodFrom(WithNoAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\r\n    Method source = methodFrom(WithSingleAnnotation.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\r\n    Method source = methodFrom(WithMultipleAnnotations.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\r\n    Method source = methodFrom(WithSingleSuperclass.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Method source = methodFrom(WithSingleInterface.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\r\n    Method source = methodFrom(WithHierarchy.class);\r\n    assertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder()",
    "tailType": "method"
  }
]