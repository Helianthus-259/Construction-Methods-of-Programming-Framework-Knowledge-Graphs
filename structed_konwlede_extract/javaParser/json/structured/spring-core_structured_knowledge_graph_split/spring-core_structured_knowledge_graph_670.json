[
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(Object o) {\r\n    if (o == null || !(o instanceof FastClass that)) {\r\n        return false;\r\n    }\r\n    return type.equals(that.type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#getIndex(String,Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the index of the matching method. The index may be used\r\n * later to invoke the method with less overhead. If more than one\r\n * method matches (i.e. they differ by return type only), one is\r\n * chosen arbitrarily.\r\n * @see #invoke(int, Object, Object[])\r\n * @param name the method name\r\n * @param parameterTypes the parameter array\r\n * @return the index, or <code>-1</code> if none is found.\r\n */\r\nabstract public int getIndex(String name, Class[] parameterTypes);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#getIndex(String,Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#getIndex(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the index of the matching constructor. The index may be used\r\n * later to create a new instance with less overhead.\r\n * @see #newInstance(int, Object[])\r\n * @param parameterTypes the parameter array\r\n * @return the constructor index, or <code>-1</code> if none is found.\r\n */\r\nabstract public int getIndex(Class[] parameterTypes);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#getIndex(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#invoke(int,Object,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the method with the specified index.\r\n * @see getIndex(name, Class[])\r\n * @param index the method index\r\n * @param obj the object the underlying method is invoked from\r\n * @param args the arguments used for the method call\r\n * @throws java.lang.reflect.InvocationTargetException if the underlying method throws an exception\r\n */\r\nabstract public Object invoke(int index, Object obj, Object[] args) throws InvocationTargetException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#invoke(int,Object,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#newInstance(int,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new instance using the specified constructor index and arguments.\r\n * @see getIndex(Class[])\r\n * @param index the constructor index\r\n * @param args the arguments passed to the constructor\r\n * @throws java.lang.reflect.InvocationTargetException if the constructor throws an exception\r\n */\r\nabstract public Object newInstance(int index, Object[] args) throws InvocationTargetException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#newInstance(int,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#getIndex(Signature)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract public int getIndex(Signature sig);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#getIndex(Signature)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#getMaxIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the maximum method index for this class.\r\n */\r\nabstract public int getMaxIndex();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#getMaxIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass#getSignatureWithoutReturnType(String,Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "protected static String getSignatureWithoutReturnType(String name, Class[] parameterTypes) {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(name);\r\n    sb.append('(');\r\n    for (Class parameterType : parameterTypes) {\r\n        sb.append(Type.getDescriptor(parameterType));\r\n    }\r\n    sb.append(')');\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastClass#getSignatureWithoutReturnType(String,Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.reflect.Generator",
    "tailType": "class"
  }
]