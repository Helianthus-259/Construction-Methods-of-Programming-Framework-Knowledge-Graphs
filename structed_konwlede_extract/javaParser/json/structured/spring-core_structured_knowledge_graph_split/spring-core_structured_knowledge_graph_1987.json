[
  {
    "head": "org.springframework.core.GenericTypeResolverTests#boundParameterizedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid boundParameterizedType() {\r\n    assertThat(resolveTypeArgument(TestImpl.class, TestIfc.class)).isEqualTo(B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#boundParameterizedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#boundParameterizedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#testGetTypeVariableMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testGetTypeVariableMap() {\r\n    Map<TypeVariable, Type> map;\r\n    map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class);\r\n    assertThat(map.toString()).isEqualTo(\"{T=class java.lang.String}\");\r\n    map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class);\r\n    assertThat(map.toString()).isEqualTo(\"{T=java.util.Collection<java.lang.String>}\");\r\n    map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class);\r\n    assertThat(map.toString()).isEqualTo(\"{T=java.util.Collection<java.lang.String>}\");\r\n    map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class);\r\n    assertThat(map.toString()).isEqualTo(\"{T=class java.lang.Integer}\");\r\n    map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class);\r\n    assertThat(map.toString()).isEqualTo(\";\");\r\n    map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class);\r\n    assertThat(map.toString()).isEqualTo(\"{T=class java.lang.Integer}\");\r\n    map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class);\r\n    assertThat(map).hasSize(2);\r\n    Type t = null;\r\n    Type x = null;\r\n    for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) {\r\n        if (entry.getKey().toString().equals(\"T\")) {\r\n            t = entry.getValue();\r\n        } else {\r\n            x = entry.getValue();\r\n        }\r\n    }\r\n    assertThat(t).isEqualTo(Integer.class);\r\n    assertThat(x).isEqualTo(Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#testGetTypeVariableMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#testGetTypeVariableMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTypeArgumentsOfAbstractType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeArgumentsOfAbstractType() {\r\n    Class<?>[] resolved = GenericTypeResolver.resolveTypeArguments(MyConcreteType.class, MyAbstractType.class);\r\n    assertThat(resolved).containsExactly(Character.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#resolveTypeArgumentsOfAbstractType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#resolveTypeArgumentsOfAbstractType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsCannotBeResolved()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11030\r\n@Test\r\nvoid getGenericsCannotBeResolved() {\r\n    Class<?>[] resolved = GenericTypeResolver.resolveTypeArguments(List.class, Iterable.class);\r\n    assertThat(resolved).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#getGenericsCannotBeResolved()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getRawMapTypeCannotBeResolved()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11052\r\n@Test\r\nvoid getRawMapTypeCannotBeResolved() {\r\n    Class<?>[] resolved = GenericTypeResolver.resolveTypeArguments(Map.class, Map.class);\r\n    assertThat(resolved).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#getRawMapTypeCannotBeResolved()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getRawMapTypeCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromParamCannotBeResolved()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11044\r\n@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid getGenericsOnArrayFromParamCannotBeResolved() throws Exception {\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(WithArrayBase.class.getDeclaredMethod(\"array\", Object[].class), 0);\r\n    Class<?> resolved = GenericTypeResolver.resolveParameterType(methodParameter, WithArray.class);\r\n    assertThat(resolved).isEqualTo(Object[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromParamCannotBeResolved()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromParamCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromParamCannotBeResolved()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.GenericTypeResolverTests#getGenericsOnArrayFromReturnCannotBeResolved()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-11044\r\n@Test\r\nvoid getGenericsOnArrayFromReturnCannotBeResolved() throws Exception {\r\n    Class<?> resolved = GenericTypeResolver.resolveReturnType(WithArrayBase.class.getDeclaredMethod(\"array\", Object[].class), WithArray.class);\r\n    assertThat(resolved).isEqualTo(Object[].class);\r\n}",
    "tailType": "method_code"
  }
]