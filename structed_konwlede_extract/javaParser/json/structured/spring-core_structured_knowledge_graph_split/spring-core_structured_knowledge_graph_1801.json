[
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromMultipleBridges()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodFromMultipleBridges() throws Exception {\r\n    Method loadWithObjectReturn = findMethodWithReturnType(\"load\", Object.class, SettingsDaoImpl.class);\r\n    assertThat(loadWithObjectReturn).isNotNull();\r\n    Method loadWithSettingsReturn = findMethodWithReturnType(\"load\", Settings.class, SettingsDaoImpl.class);\r\n    assertThat(loadWithSettingsReturn).isNotNull();\r\n    assertThat(loadWithSettingsReturn).isNotSameAs(loadWithObjectReturn);\r\n    Method method = SettingsDaoImpl.class.getMethod(\"load\");\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(loadWithObjectReturn)).isEqualTo(method);\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(loadWithSettingsReturn)).isEqualTo(method);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromMultipleBridges()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromMultipleBridges()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromParent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodFromParent() throws Exception {\r\n    Method loadFromParentBridge = SettingsDaoImpl.class.getMethod(\"loadFromParent\");\r\n    assertThat(loadFromParentBridge.isBridge()).isTrue();\r\n    Method loadFromParent = AbstractDaoImpl.class.getMethod(\"loadFromParent\");\r\n    assertThat(loadFromParent.isBridge()).isFalse();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(loadFromParentBridge)).isEqualTo(loadFromParent);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromParent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromParent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withSingleBoundParameterizedOnInstantiate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withSingleBoundParameterizedOnInstantiate() throws Exception {\r\n    Method bridgeMethod = DelayQueue.class.getMethod(\"add\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    Method actualMethod = DelayQueue.class.getMethod(\"add\", Delayed.class);\r\n    assertThat(actualMethod.isBridge()).isFalse();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(actualMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#withSingleBoundParameterizedOnInstantiate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withSingleBoundParameterizedOnInstantiate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withDoubleBoundParameterizedOnInstantiate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDoubleBoundParameterizedOnInstantiate() throws Exception {\r\n    Method bridgeMethod = SerializableBounded.class.getMethod(\"boundedOperation\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    Method actualMethod = SerializableBounded.class.getMethod(\"boundedOperation\", HashMap.class);\r\n    assertThat(actualMethod.isBridge()).isFalse();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(actualMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#withDoubleBoundParameterizedOnInstantiate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withDoubleBoundParameterizedOnInstantiate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withGenericParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withGenericParameter() {\r\n    Method[] methods = StringGenericParameter.class.getMethods();\r\n    Method bridgeMethod = null;\r\n    Method bridgedMethod = null;\r\n    for (Method method : methods) {\r\n        if (\"getFor\".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {\r\n            if (method.getReturnType().equals(Object.class)) {\r\n                bridgeMethod = method;\r\n            } else {\r\n                bridgedMethod = method;\r\n            }\r\n        }\r\n    }\r\n    assertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\r\n    boolean condition = bridgedMethod != null && !bridgedMethod.isBridge();\r\n    assertThat(condition).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#withGenericParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#withGenericParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#onAllMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid onAllMethods() {\r\n    Method[] methods = StringList.class.getMethods();\r\n    for (Method method : methods) {\r\n        assertThat(BridgeMethodResolver.findBridgedMethod(method)).isNotNull();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#onAllMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#onAllMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2583()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr2583() throws Exception {\r\n    Method bridgedMethod = MessageBroadcasterImpl.class.getMethod(\"receive\", MessageEvent.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = MessageBroadcasterImpl.class.getMethod(\"receive\", Event.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    Method otherMethod = MessageBroadcasterImpl.class.getMethod(\"receive\", NewMessageEvent.class);\r\n    assertThat(otherMethod.isBridge()).isFalse();\r\n    assertThat(BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, otherMethod, MessageBroadcasterImpl.class)).as(\"Match identified incorrectly\").isFalse();\r\n    assertThat(BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, bridgedMethod, MessageBroadcasterImpl.class)).as(\"Match not found correctly\").isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr2583()",
    "tailType": "method"
  }
]