[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.DecoratingClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Base class for decorating ClassLoaders such as {@link OverridingClassLoader}\n * and {@link org.springframework.instrument.classloading.ShadowingClassLoader},\n * providing common handling of excluded packages and classes.\n *\n * @author Juergen Hoeller\n * @author Rod Johnson\n * @since 2.5.2\n */\npublic abstract class DecoratingClassLoader extends ClassLoader {\n\n\tstatic {\n\t\tClassLoader.registerAsParallelCapable();\n\t}\n\n\n\tprivate final Set<String> excludedPackages = ConcurrentHashMap.newKeySet(8);\n\n\tprivate final Set<String> excludedClasses = ConcurrentHashMap.newKeySet(8);\n\n\n\t/**\n\t * Create a new DecoratingClassLoader with no parent ClassLoader.\n\t */\n\tpublic DecoratingClassLoader() {\n\t}\n\n\t/**\n\t * Create a new DecoratingClassLoader using the given parent ClassLoader\n\t * for delegation.\n\t */\n\tpublic DecoratingClassLoader(@Nullable ClassLoader parent) {\n\t\tsuper(parent);\n\t}\n\n\n\t/**\n\t * Add a package name to exclude from decoration (for example, overriding).\n\t * <p>Any class whose fully-qualified name starts with the name registered\n\t * here will be handled by the parent ClassLoader in the usual fashion.\n\t * @param packageName the package name to exclude\n\t */\n\tpublic void excludePackage(String packageName) {\n\t\tAssert.notNull(packageName, \"Package name must not be null\");\n\t\tthis.excludedPackages.add(packageName);\n\t}\n\n\t/**\n\t * Add a class name to exclude from decoration (for example, overriding).\n\t * <p>Any class name registered here will be handled by the parent\n\t * ClassLoader in the usual fashion.\n\t * @param className the class name to exclude\n\t */\n\tpublic void excludeClass(String className) {\n\t\tAssert.notNull(className, \"Class name must not be null\");\n\t\tthis.excludedClasses.add(className);\n\t}\n\n\t/**\n\t * Determine whether the specified class is excluded from decoration\n\t * by this class loader.\n\t * <p>The default implementation checks against excluded packages and classes.\n\t * @param className the class name to check\n\t * @return whether the specified class is eligible\n\t * @see #excludePackage\n\t * @see #excludeClass\n\t */\n\tprotected boolean isExcluded(String className) {\n\t\tif (this.excludedClasses.contains(className)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (String packageName : this.excludedPackages) {\n\t\t\tif (className.startsWith(packageName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.DecoratingClassLoader#excludedPackages",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader#excludedPackages",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.DecoratingClassLoader#excludedClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader#excludedClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader#excludePackage(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a package name to exclude from decoration (for example, overriding).\r\n * <p>Any class whose fully-qualified name starts with the name registered\r\n * here will be handled by the parent ClassLoader in the usual fashion.\r\n * @param packageName the package name to exclude\r\n */\r\npublic void excludePackage(String packageName) {\r\n    Assert.notNull(packageName, \"Package name must not be null\");\r\n    this.excludedPackages.add(packageName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.DecoratingClassLoader#excludePackage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader#excludeClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a class name to exclude from decoration (for example, overriding).\r\n * <p>Any class name registered here will be handled by the parent\r\n * ClassLoader in the usual fashion.\r\n * @param className the class name to exclude\r\n */\r\npublic void excludeClass(String className) {\r\n    Assert.notNull(className, \"Class name must not be null\");\r\n    this.excludedClasses.add(className);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.DecoratingClassLoader#excludeClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader#isExcluded(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the specified class is excluded from decoration\r\n * by this class loader.\r\n * <p>The default implementation checks against excluded packages and classes.\r\n * @param className the class name to check\r\n * @return whether the specified class is eligible\r\n * @see #excludePackage\r\n * @see #excludeClass\r\n */\r\nprotected boolean isExcluded(String className) {\r\n    if (this.excludedClasses.contains(className)) {\r\n        return true;\r\n    }\r\n    for (String packageName : this.excludedPackages) {\r\n        if (className.startsWith(packageName)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.DecoratingClassLoader#isExcluded(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.DecoratingClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.DecoratingProxy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.DecoratingProxy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\n/**\n * Interface to be implemented by decorating proxies, in particular Spring AOP\n * proxies but potentially also custom proxies with decorator semantics.\n *\n * <p>Note that this interface should just be implemented if the decorated class\n * is not within the hierarchy of the proxy class to begin with. In particular,\n * a \"target-class\" proxy such as a Spring AOP CGLIB proxy should not implement\n * it since any lookup on the target class can simply be performed on the proxy\n * class there anyway.\n *\n * <p>Defined in the core module in order to allow\n * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator}\n * (and potential other candidates without spring-aop dependencies) to use it\n * for introspection purposes, in particular annotation lookups.\n *\n * @author Juergen Hoeller\n * @since 4.3\n */\npublic interface DecoratingProxy {\n\n\t/**\n\t * Return the (ultimate) decorated class behind this proxy.\n\t * <p>In case of an AOP proxy, this will be the ultimate target class,\n\t * not just the immediate target (in case of multiple nested proxies).\n\t * @return the decorated class (never {@code null})\n\t */\n\tClass<?> getDecoratedClass();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.DecoratingProxy#getDecoratedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the (ultimate) decorated class behind this proxy.\r\n * <p>In case of an AOP proxy, this will be the ultimate target class,\r\n * not just the immediate target (in case of multiple nested proxies).\r\n * @return the decorated class (never {@code null})\r\n */\r\nClass<?> getDecoratedClass();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.DecoratingProxy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.DecoratingProxy#getDecoratedClass()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  }
]