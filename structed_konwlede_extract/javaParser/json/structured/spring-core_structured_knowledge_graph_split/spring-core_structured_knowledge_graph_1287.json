[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#replace(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void clear() {\r\n    for (Segment segment : this.segments) {\r\n        segment.clear();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#purgeUnreferencedEntries()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove any entries that have been garbage collected and are no longer referenced.\r\n * Under normal circumstances garbage collected entries are automatically purged as\r\n * items are added or removed from the Map. This method can be used to force a purge,\r\n * and is useful when the Map is read frequently but updated less often.\r\n */\r\npublic void purgeUnreferencedEntries() {\r\n    for (Segment segment : this.segments) {\r\n        segment.restructureIfNecessary(false);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#purgeUnreferencedEntries()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int size() {\r\n    int size = 0;\r\n    for (Segment segment : this.segments) {\r\n        size += segment.getCount();\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#isEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isEmpty() {\r\n    for (Segment segment : this.segments) {\r\n        if (segment.getCount() > 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#isEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#isEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<Map.Entry<K, V>> entrySet() {\r\n    Set<Map.Entry<K, V>> entrySet = this.entrySet;\r\n    if (entrySet == null) {\r\n        entrySet = new EntrySet();\r\n        this.entrySet = entrySet;\r\n    }\r\n    return entrySet;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#doTask(Object,Task<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate <T> T doTask(@Nullable Object key, Task<T> task) {\r\n    int hash = getHash(key);\r\n    return getSegmentForHash(hash).doTask(hash, key, task);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#doTask(Object,Task<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#doTask(Object,Task<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]