[
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#iterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Iterator<List<V>> iterator() {\r\n    Iterator<List<V>> iterator = this.delegate.iterator();\r\n    return new Iterator<>() {\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iterator.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public List<V> next() {\r\n            return Collections.unmodifiableList(iterator.next());\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#iterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#iterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#forEach(Consumer<? super List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void forEach(Consumer<? super List<V>> action) {\r\n    this.delegate.forEach(list -> action.accept(Collections.unmodifiableList(list)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#forEach(Consumer<? super List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#forEach(Consumer<? super List<V>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#spliterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Spliterator<List<V>> spliterator() {\r\n    return new UnmodifiableValueSpliterator<>(this.delegate.spliterator());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#spliterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#spliterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#stream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Stream<List<V>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#stream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#stream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#parallelStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Stream<List<V>> parallelStream() {\r\n    return StreamSupport.stream(spliterator(), true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#parallelStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#parallelStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || this.delegate.equals(other));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.delegate.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueCollection#hashCode()",
    "tailType": "method"
  }
]