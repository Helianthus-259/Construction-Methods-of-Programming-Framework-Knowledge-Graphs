[
  {
    "head": "org.springframework.cglib.util.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return getClass().getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.util.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate the <code>StringSwitcher</code>.\r\n */\r\npublic StringSwitcher create() {\r\n    setNamePrefix(StringSwitcher.class.getName());\r\n    Object key = KEY_FACTORY.newInstance(strings, ints, fixedInput);\r\n    return (StringSwitcher) super.create(key);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), STRING_SWITCHER, null, Constants.SOURCE_FILE);\r\n    EmitUtils.null_constructor(ce);\r\n    final CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, INT_VALUE, null);\r\n    e.load_arg(0);\r\n    final List stringList = Arrays.asList(strings);\r\n    int style = fixedInput ? Constants.SWITCH_STYLE_HASHONLY : Constants.SWITCH_STYLE_HASH;\r\n    EmitUtils.string_switch(e, strings, style, new ObjectSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(Object key, Label end) {\r\n            e.push(ints[stringList.indexOf(key)]);\r\n            e.return_value();\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.push(-1);\r\n            e.return_value();\r\n        }\r\n    });\r\n    e.end_method();\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.util.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return ReflectUtils.newInstance(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.util.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return instance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.util.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.AliasRegistry",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.AliasRegistry",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\n/**\n * Common interface for managing aliases. Serves as a super-interface for\n * {@link org.springframework.beans.factory.support.BeanDefinitionRegistry}.\n *\n * @author Juergen Hoeller\n * @since 2.5.2\n */\npublic interface AliasRegistry {\n\n\t/**\n\t * Given a name, register an alias for it.\n\t * @param name the canonical name\n\t * @param alias the alias to be registered\n\t * @throws IllegalStateException if the alias is already in use\n\t * and may not be overridden\n\t */\n\tvoid registerAlias(String name, String alias);\n\n\t/**\n\t * Remove the specified alias from this registry.\n\t * @param alias the alias to remove\n\t * @throws IllegalStateException if no such alias was found\n\t */\n\tvoid removeAlias(String alias);\n\n\t/**\n\t * Determine whether the given name is defined as an alias\n\t * (as opposed to the name of an actually registered component).\n\t * @param name the name to check\n\t * @return whether the given name is an alias\n\t */\n\tboolean isAlias(String name);\n\n\t/**\n\t * Return the aliases for the given name, if defined.\n\t * @param name the name to check for aliases\n\t * @return the aliases, or an empty array if none\n\t */\n\tString[] getAliases(String name);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.AliasRegistry#registerAlias(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a name, register an alias for it.\r\n * @param name the canonical name\r\n * @param alias the alias to be registered\r\n * @throws IllegalStateException if the alias is already in use\r\n * and may not be overridden\r\n */\r\nvoid registerAlias(String name, String alias);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AliasRegistry#registerAlias(String,String)",
    "tailType": "method"
  }
]