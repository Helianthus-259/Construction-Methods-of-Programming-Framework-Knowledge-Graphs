[
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer#deserialize(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Read from the supplied {@code InputStream} and deserialize the contents\r\n * into an object.\r\n * @see ObjectInputStream#readObject()\r\n */\r\n@Override\r\npublic Object deserialize(InputStream inputStream) throws IOException {\r\n    ObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\r\n    try {\r\n        return objectInputStream.readObject();\r\n    } catch (ClassNotFoundException ex) {\r\n        throw new IOException(\"Failed to deserialize object type\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.DefaultDeserializer#deserialize(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer#deserialize(InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.DefaultSerializer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.DefaultSerializer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.io.Serializable;\n\n/**\n * A {@link Serializer} implementation that writes an object to an output stream\n * using Java serialization.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @since 3.0.5\n */\npublic class DefaultSerializer implements Serializer<Object> {\n\n\t/**\n\t * Writes the source object to an output stream using Java serialization.\n\t * The source object must implement {@link Serializable}.\n\t * @see ObjectOutputStream#writeObject(Object)\n\t */\n\t@Override\n\tpublic void serialize(Object object, OutputStream outputStream) throws IOException {\n\t\tif (!(object instanceof Serializable)) {\n\t\t\tthrow new IllegalArgumentException(getClass().getSimpleName() + \" requires a Serializable payload \" +\n\t\t\t\t\t\"but received an object of type [\" + object.getClass().getName() + \"]\");\n\t\t}\n\t\tObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\n\t\tobjectOutputStream.writeObject(object);\n\t\tobjectOutputStream.flush();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.DefaultSerializer#serialize(Object,OutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Writes the source object to an output stream using Java serialization.\r\n * The source object must implement {@link Serializable}.\r\n * @see ObjectOutputStream#writeObject(Object)\r\n */\r\n@Override\r\npublic void serialize(Object object, OutputStream outputStream) throws IOException {\r\n    if (!(object instanceof Serializable)) {\r\n        throw new IllegalArgumentException(getClass().getSimpleName() + \" requires a Serializable payload \" + \"but received an object of type [\" + object.getClass().getName() + \"]\");\r\n    }\r\n    ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);\r\n    objectOutputStream.writeObject(object);\r\n    objectOutputStream.flush();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.DefaultSerializer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.DefaultSerializer#serialize(Object,OutputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.DefaultSerializer#serialize(Object,OutputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.Deserializer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * A strategy interface for converting from data in an InputStream to an Object.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @author Juergen Hoeller\n * @since 3.0.5\n * @param <T> the object type\n * @see Serializer\n */\n@FunctionalInterface\npublic interface Deserializer<T> {\n\n\t/**\n\t * Read (assemble) an object of type T from the given InputStream.\n\t * <p>Note: Implementations should not close the given InputStream\n\t * (or any decorators of that InputStream) but rather leave this up\n\t * to the caller.\n\t * @param inputStream the input stream\n\t * @return the deserialized object\n\t * @throws IOException in case of errors reading from the stream\n\t */\n\tT deserialize(InputStream inputStream) throws IOException;\n\n\t/**\n\t * Read (assemble) an object of type T from the given byte array.\n\t * @param serialized the byte array\n\t * @return the deserialized object\n\t * @throws IOException in case of deserialization failure\n\t * @since 5.2.7\n\t */\n\tdefault T deserializeFromByteArray(byte[] serialized) throws IOException {\n\t\treturn deserialize(new ByteArrayInputStream(serialized));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer#deserialize(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Read (assemble) an object of type T from the given InputStream.\r\n * <p>Note: Implementations should not close the given InputStream\r\n * (or any decorators of that InputStream) but rather leave this up\r\n * to the caller.\r\n * @param inputStream the input stream\r\n * @return the deserialized object\r\n * @throws IOException in case of errors reading from the stream\r\n */\r\nT deserialize(InputStream inputStream) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.Deserializer#deserialize(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer#deserializeFromByteArray(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Read (assemble) an object of type T from the given byte array.\r\n * @param serialized the byte array\r\n * @return the deserialized object\r\n * @throws IOException in case of deserialization failure\r\n * @since 5.2.7\r\n */\r\ndefault T deserializeFromByteArray(byte[] serialized) throws IOException {\r\n    return deserialize(new ByteArrayInputStream(serialized));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.serializer.Deserializer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.serializer.Deserializer#deserializeFromByteArray(byte[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  }
]