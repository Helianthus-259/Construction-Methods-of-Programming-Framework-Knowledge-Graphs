[
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (targetType.getResolvableType().hasGenerics()) {\r\n        return this.conversionService.canConvert(sourceType, new GenericTypeDescriptor(targetType));\r\n    } else {\r\n        return true;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToOptionalConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return Optional.empty();\r\n    } else if (source instanceof Optional) {\r\n        return source;\r\n    } else if (targetType.getResolvableType().hasGenerics()) {\r\n        Object target = this.conversionService.convert(source, sourceType, new GenericTypeDescriptor(targetType));\r\n        if (target == null || (target.getClass().isArray() && Array.getLength(target) == 0) || (target instanceof Collection<?> collection && collection.isEmpty())) {\r\n            return Optional.empty();\r\n        }\r\n        return Optional.of(target);\r\n    } else {\r\n        return Optional.of(source);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToOptionalConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.GenericTypeDescriptor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.GenericTypeDescriptor",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericTypeDescriptor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.lang.reflect.Array;\nimport java.util.Collection;\nimport java.util.Optional;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Convert an Object to {@code java.util.Optional<T>} if necessary using the\n * {@code ConversionService} to convert the source Object to the generic type\n * of Optional when known.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 4.1\n */\nfinal class ObjectToOptionalConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic ObjectToOptionalConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\tSet<ConvertiblePair> convertibleTypes = CollectionUtils.newLinkedHashSet(3);\n\t\tconvertibleTypes.add(new ConvertiblePair(Collection.class, Optional.class));\n\t\tconvertibleTypes.add(new ConvertiblePair(Object[].class, Optional.class));\n\t\tconvertibleTypes.add(new ConvertiblePair(Object.class, Optional.class));\n\t\treturn convertibleTypes;\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getResolvableType().hasGenerics()) {\n\t\t\treturn this.conversionService.canConvert(sourceType, new GenericTypeDescriptor(targetType));\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t@Override\n\tpublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\telse if (source instanceof Optional) {\n\t\t\treturn source;\n\t\t}\n\t\telse if (targetType.getResolvableType().hasGenerics()) {\n\t\t\tObject target = this.conversionService.convert(source, sourceType, new GenericTypeDescriptor(targetType));\n\t\t\tif (target == null || (target.getClass().isArray() && Array.getLength(target) == 0) ||\n\t\t\t\t\t\t(target instanceof Collection<?> collection && collection.isEmpty())) {\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t\treturn Optional.of(target);\n\t\t}\n\t\telse {\n\t\t\treturn Optional.of(source);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static class GenericTypeDescriptor extends TypeDescriptor {\n\n\t\tpublic GenericTypeDescriptor(TypeDescriptor typeDescriptor) {\n\t\t\tsuper(typeDescriptor.getResolvableType().getGeneric(), null, typeDescriptor.getAnnotations());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericTypeDescriptor",
    "headType": "class",
    "relation": "extend",
    "tail": "TypeDescriptor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ObjectToStringConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToStringConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Simply calls {@link Object#toString()} to convert a source Object to a String.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class ObjectToStringConverter implements Converter<Object, String> {\n\n\t@Override\n\tpublic String convert(Object source) {\n\t\treturn source.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToStringConverter#convert(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String convert(Object source) {\r\n    return source.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToStringConverter#convert(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToStringConverter#convert(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.PropertiesToStringConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.PropertiesToStringConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Properties;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts from a Properties to a String by calling {@link Properties#store(java.io.OutputStream, String)}.\n * Decodes with the ISO-8859-1 charset before returning the String.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class PropertiesToStringConverter implements Converter<Properties, String> {\n\n\t@Override\n\tpublic String convert(Properties source) {\n\t\ttry {\n\t\t\tByteArrayOutputStream os = new ByteArrayOutputStream(256);\n\t\t\tsource.store(os, null);\n\t\t\treturn os.toString(StandardCharsets.ISO_8859_1);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\t// Should never happen.\n\t\t\tthrow new IllegalArgumentException(\"Failed to store [\" + source + \"] into String\", ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]