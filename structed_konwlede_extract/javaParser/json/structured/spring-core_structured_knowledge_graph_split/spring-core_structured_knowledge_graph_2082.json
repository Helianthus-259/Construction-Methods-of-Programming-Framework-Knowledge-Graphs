[
  {
    "head": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid compareWithSourceProviderEmpty() {\r\n    Comparator<Object> customComparator = this.comparator.withSourceProvider(new TestSourceProvider(50L, new Object()));\r\n    assertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparatorTests#compareWithSourceProviderEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.StubOrdered",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.StubOrdered",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OrderComparator}.\n *\n * @author Rick Evans\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @author Sam Brannen\n */\nclass OrderComparatorTests {\n\n\tprivate final OrderComparator comparator = new OrderComparator();\n\n\n\t@Test\n\tvoid compareOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(982300), new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullFirst() {\n\t\tassertThat(this.comparator.compare(null, new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullLast() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), null)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesDoubleNull() {\n\t\tassertThat(this.comparator.compare(null, null)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareTwoNonOrderedInstancesEndsUpAsSame() {\n\t\tassertThat(this.comparator.compare(new Object(), new Object())).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(982300), new StubPriorityOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(200), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(200));\n\t}\n\n\tprivate void assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered priority, StubOrdered standard) {\n\t\tassertThat(this.comparator.compare(priority, standard)).isEqualTo(-1);\n\t\tassertThat(this.comparator.compare(standard, priority)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareWithSimpleSourceProvider() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new StubOrdered(25)));\n\t\tassertThat(customComparator.compare(new StubOrdered(10), 5L)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArray() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new StubOrdered(10), new StubOrdered(-25)}));\n\t\tassertThat(customComparator.compare(5L, new Object())).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArrayNoMatch() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new Object(), new Object()}));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderEmpty() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(50L, new Object()));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\n\tprivate static class StubOrdered implements Ordered {\n\n\t\tprivate final int order;\n\n\t\tStubOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class StubPriorityOrdered implements PriorityOrdered {\n\n\t\tprivate final int order;\n\n\t\tStubPriorityOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class TestSourceProvider implements OrderComparator.OrderSourceProvider {\n\n\t\tprivate final Object target;\n\n\t\tprivate final Object orderSource;\n\n\t\tTestSourceProvider(Object target, Object orderSource) {\n\t\t\tthis.target = target;\n\t\t\tthis.orderSource = orderSource;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getOrderSource(Object obj) {\n\t\t\tif (target.equals(obj)) {\n\t\t\t\treturn orderSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.StubOrdered",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.StubOrdered#order",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.StubOrdered#order",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.StubOrdered#getOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StubOrdered",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StubOrdered#getOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StubOrdered#getOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.StubPriorityOrdered",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OrderComparator}.\n *\n * @author Rick Evans\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @author Sam Brannen\n */\nclass OrderComparatorTests {\n\n\tprivate final OrderComparator comparator = new OrderComparator();\n\n\n\t@Test\n\tvoid compareOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(982300), new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullFirst() {\n\t\tassertThat(this.comparator.compare(null, new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullLast() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), null)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesDoubleNull() {\n\t\tassertThat(this.comparator.compare(null, null)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareTwoNonOrderedInstancesEndsUpAsSame() {\n\t\tassertThat(this.comparator.compare(new Object(), new Object())).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(982300), new StubPriorityOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(200), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(200));\n\t}\n\n\tprivate void assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered priority, StubOrdered standard) {\n\t\tassertThat(this.comparator.compare(priority, standard)).isEqualTo(-1);\n\t\tassertThat(this.comparator.compare(standard, priority)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareWithSimpleSourceProvider() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new StubOrdered(25)));\n\t\tassertThat(customComparator.compare(new StubOrdered(10), 5L)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArray() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new StubOrdered(10), new StubOrdered(-25)}));\n\t\tassertThat(customComparator.compare(5L, new Object())).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArrayNoMatch() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new Object(), new Object()}));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderEmpty() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(50L, new Object()));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\n\tprivate static class StubOrdered implements Ordered {\n\n\t\tprivate final int order;\n\n\t\tStubOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class StubPriorityOrdered implements PriorityOrdered {\n\n\t\tprivate final int order;\n\n\t\tStubPriorityOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class TestSourceProvider implements OrderComparator.OrderSourceProvider {\n\n\t\tprivate final Object target;\n\n\t\tprivate final Object orderSource;\n\n\t\tTestSourceProvider(Object target, Object orderSource) {\n\t\t\tthis.target = target;\n\t\t\tthis.orderSource = orderSource;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getOrderSource(Object obj) {\n\t\t\tif (target.equals(obj)) {\n\t\t\t\treturn orderSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.StubPriorityOrdered#order",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered#order",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered#getOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int getOrder() {\r\n    return this.order;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.StubPriorityOrdered#getOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.StubPriorityOrdered#getOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.TestSourceProvider",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.TestSourceProvider",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link OrderComparator}.\n *\n * @author Rick Evans\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @author Sam Brannen\n */\nclass OrderComparatorTests {\n\n\tprivate final OrderComparator comparator = new OrderComparator();\n\n\n\t@Test\n\tvoid compareOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), new StubOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(982300), new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullFirst() {\n\t\tassertThat(this.comparator.compare(null, new StubOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesNullLast() {\n\t\tassertThat(this.comparator.compare(new StubOrdered(100), null)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareOrderedInstancesDoubleNull() {\n\t\tassertThat(this.comparator.compare(null, null)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareTwoNonOrderedInstancesEndsUpAsSame() {\n\t\tassertThat(this.comparator.compare(new Object(), new Object())).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesBefore() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(2000))).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesSame() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(100), new StubPriorityOrdered(100))).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstancesAfter() {\n\t\tassertThat(this.comparator.compare(new StubPriorityOrdered(982300), new StubPriorityOrdered(100))).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithHigherPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(200), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithSamePriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(100));\n\t}\n\n\t@Test\n\tvoid comparePriorityOrderedInstanceToStandardOrderedInstanceWithLowerPriority() {\n\t\tassertThatPriorityOrderedAlwaysWins(new StubPriorityOrdered(100), new StubOrdered(200));\n\t}\n\n\tprivate void assertThatPriorityOrderedAlwaysWins(StubPriorityOrdered priority, StubOrdered standard) {\n\t\tassertThat(this.comparator.compare(priority, standard)).isEqualTo(-1);\n\t\tassertThat(this.comparator.compare(standard, priority)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid compareWithSimpleSourceProvider() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new StubOrdered(25)));\n\t\tassertThat(customComparator.compare(new StubOrdered(10), 5L)).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArray() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new StubOrdered(10), new StubOrdered(-25)}));\n\t\tassertThat(customComparator.compare(5L, new Object())).isEqualTo(-1);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderArrayNoMatch() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(5L, new Object[] {new Object(), new Object()}));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid compareWithSourceProviderEmpty() {\n\t\tComparator<Object> customComparator = this.comparator.withSourceProvider(\n\t\t\t\tnew TestSourceProvider(50L, new Object()));\n\t\tassertThat(customComparator.compare(new Object(), 5L)).isEqualTo(0);\n\t}\n\n\n\tprivate static class StubOrdered implements Ordered {\n\n\t\tprivate final int order;\n\n\t\tStubOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class StubPriorityOrdered implements PriorityOrdered {\n\n\t\tprivate final int order;\n\n\t\tStubPriorityOrdered(int order) {\n\t\t\tthis.order = order;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\treturn this.order;\n\t\t}\n\t}\n\n\tprivate static class TestSourceProvider implements OrderComparator.OrderSourceProvider {\n\n\t\tprivate final Object target;\n\n\t\tprivate final Object orderSource;\n\n\t\tTestSourceProvider(Object target, Object orderSource) {\n\t\t\tthis.target = target;\n\t\t\tthis.orderSource = orderSource;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getOrderSource(Object obj) {\n\t\t\tif (target.equals(obj)) {\n\t\t\t\treturn orderSource;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.TestSourceProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.TestSourceProvider#target",
    "tailType": "field"
  }
]