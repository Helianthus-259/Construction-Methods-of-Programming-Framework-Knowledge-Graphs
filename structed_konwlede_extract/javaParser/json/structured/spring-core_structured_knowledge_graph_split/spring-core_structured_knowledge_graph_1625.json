[
  {
    "head": "org.springframework.core.annotation.EnclosedStaticStatic",
    "headType": "class",
    "relation": "use",
    "tail": "@EnclosedThree",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedStaticStatic",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n/**\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n */\n@AnnotationEnclosingClassSample.EnclosedOne\npublic class AnnotationEnclosingClassSample {\n\n\t@EnclosedTwo\n\tpublic static class EnclosedStatic {\n\n\t\t@EnclosedThree\n\t\tpublic static class EnclosedStaticStatic {\n\t\t}\n\n\t}\n\n\t@EnclosedTwo\n\tpublic class EnclosedInner {\n\n\t\t@EnclosedThree\n\t\tpublic class EnclosedInnerInner {\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedOne {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedTwo {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedThree {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.EnclosedInner",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedInner",
    "headType": "class",
    "relation": "use",
    "tail": "@EnclosedTwo",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedInner",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n/**\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n */\n@AnnotationEnclosingClassSample.EnclosedOne\npublic class AnnotationEnclosingClassSample {\n\n\t@EnclosedTwo\n\tpublic static class EnclosedStatic {\n\n\t\t@EnclosedThree\n\t\tpublic static class EnclosedStaticStatic {\n\t\t}\n\n\t}\n\n\t@EnclosedTwo\n\tpublic class EnclosedInner {\n\n\t\t@EnclosedThree\n\t\tpublic class EnclosedInnerInner {\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedOne {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedTwo {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedThree {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.EnclosedInnerInner",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedInnerInner",
    "headType": "class",
    "relation": "use",
    "tail": "@EnclosedThree",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedInnerInner",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n/**\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n */\n@AnnotationEnclosingClassSample.EnclosedOne\npublic class AnnotationEnclosingClassSample {\n\n\t@EnclosedTwo\n\tpublic static class EnclosedStatic {\n\n\t\t@EnclosedThree\n\t\tpublic static class EnclosedStaticStatic {\n\t\t}\n\n\t}\n\n\t@EnclosedTwo\n\tpublic class EnclosedInner {\n\n\t\t@EnclosedThree\n\t\tpublic class EnclosedInnerInner {\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedOne {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedTwo {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedThree {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationFilterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport javax.annotation.Nonnull;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.lang.Contract;\nimport org.springframework.util.ObjectUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AnnotationFilter}.\n *\n * @author Phillip Webb\n */\nclass AnnotationFilterTests {\n\n\tprivate static final AnnotationFilter FILTER = annotationType ->\n\t\t\tObjectUtils.nullSafeEquals(annotationType, TestAnnotation.class.getName());\n\n\n\t@Test\n\tvoid matchesAnnotationWhenMatchReturnsTrue() {\n\t\tTestAnnotation annotation = WithTestAnnotation.class.getDeclaredAnnotation(TestAnnotation.class);\n\t\tassertThat(FILTER.matches(annotation)).isTrue();\n\t}\n\n\t@Test\n\tvoid matchesAnnotationWhenNoMatchReturnsFalse() {\n\t\tOtherAnnotation annotation = WithOtherAnnotation.class.getDeclaredAnnotation(OtherAnnotation.class);\n\t\tassertThat(FILTER.matches(annotation)).isFalse();\n\t}\n\n\t@Test\n\tvoid matchesAnnotationClassWhenMatchReturnsTrue() {\n\t\tClass<TestAnnotation> annotationType = TestAnnotation.class;\n\t\tassertThat(FILTER.matches(annotationType)).isTrue();\n\t}\n\n\t@Test\n\tvoid matchesAnnotationClassWhenNoMatchReturnsFalse() {\n\t\tClass<OtherAnnotation> annotationType = OtherAnnotation.class;\n\t\tassertThat(FILTER.matches(annotationType)).isFalse();\n\t}\n\n\t@Test\n\tvoid plainWhenJavaLangAnnotationReturnsTrue() {\n\t\tassertThat(AnnotationFilter.PLAIN.matches(Retention.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid plainWhenSpringLangAnnotationReturnsTrue() {\n\t\tassertThat(AnnotationFilter.PLAIN.matches(Contract.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid plainWhenOtherAnnotationReturnsFalse() {\n\t\tassertThat(AnnotationFilter.PLAIN.matches(TestAnnotation.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid javaWhenJavaLangAnnotationReturnsTrue() {\n\t\tassertThat(AnnotationFilter.JAVA.matches(Retention.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid javaWhenJavaxAnnotationReturnsTrue() {\n\t\tassertThat(AnnotationFilter.JAVA.matches(Nonnull.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid javaWhenSpringLangAnnotationReturnsFalse() {\n\t\tassertThat(AnnotationFilter.JAVA.matches(Nullable.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid javaWhenOtherAnnotationReturnsFalse() {\n\t\tassertThat(AnnotationFilter.JAVA.matches(TestAnnotation.class)).isFalse();\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"deprecation\")\n\tvoid noneReturnsFalse() {\n\t\tassertThat(AnnotationFilter.NONE.matches(Retention.class)).isFalse();\n\t\tassertThat(AnnotationFilter.NONE.matches(Nullable.class)).isFalse();\n\t\tassertThat(AnnotationFilter.NONE.matches(TestAnnotation.class)).isFalse();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation {\n\t}\n\n\t@TestAnnotation\n\tstatic class WithTestAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OtherAnnotation {\n\t}\n\n\t@OtherAnnotation\n\tstatic class WithOtherAnnotation {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationFilterTests#FILTER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#FILTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesAnnotationWhenMatchReturnsTrue() {\r\n    TestAnnotation annotation = WithTestAnnotation.class.getDeclaredAnnotation(TestAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenMatchReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesAnnotationWhenNoMatchReturnsFalse() {\r\n    OtherAnnotation annotation = WithOtherAnnotation.class.getDeclaredAnnotation(OtherAnnotation.class);\r\n    assertThat(FILTER.matches(annotation)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationWhenNoMatchReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationFilterTests#matchesAnnotationClassWhenMatchReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesAnnotationClassWhenMatchReturnsTrue() {\r\n    Class<TestAnnotation> annotationType = TestAnnotation.class;\r\n    assertThat(FILTER.matches(annotationType)).isTrue();\r\n}",
    "tailType": "method_code"
  }
]