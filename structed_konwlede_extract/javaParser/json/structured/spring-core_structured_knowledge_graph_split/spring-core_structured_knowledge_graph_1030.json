[
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#cleanAndFinalize()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void cleanAndFinalize() {\r\n    discard(this.available);\r\n    this.available = null;\r\n    for (; ; ) {\r\n        int workAmount = this.workAmount.getPlain();\r\n        DataBuffer value;\r\n        while ((value = this.queue.poll()) != null) {\r\n            discard(value);\r\n        }\r\n        if (this.workAmount.weakCompareAndSetPlain(workAmount, Integer.MIN_VALUE)) {\r\n            return;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#cleanAndFinalize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() throws IOException {\r\n    if (this.closed) {\r\n        return;\r\n    }\r\n    this.closed = true;\r\n    if (!this.lock.tryLock()) {\r\n        if (addWork() == 0) {\r\n            resume();\r\n        }\r\n        return;\r\n    }\r\n    try {\r\n        requiredSubscriber().cancel();\r\n        cleanAndFinalize();\r\n    } finally {\r\n        this.lock.unlock();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#requiredSubscriber()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Subscription requiredSubscriber() {\r\n    Assert.state(this.subscription != null, \"Subscriber must be subscribed to use InputStream\");\r\n    return this.subscription;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#requiredSubscriber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#discard(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void discard(@Nullable DataBuffer buffer) {\r\n    DataBufferUtils.release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#discard(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#await()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void await() {\r\n    Thread toUnpark = Thread.currentThread();\r\n    while (true) {\r\n        Object current = this.parkedThread.get();\r\n        if (current == READY) {\r\n            break;\r\n        }\r\n        if (current != null && current != toUnpark) {\r\n            throw new IllegalStateException(\"Only one (Virtual)Thread can await!\");\r\n        }\r\n        if (this.parkedThread.compareAndSet(null, toUnpark)) {\r\n            LockSupport.park();\r\n            // we don't just break here because park() can wake up spuriously\r\n            // if we got a proper resume, get() == READY and the loop will quit above\r\n        }\r\n    }\r\n    // clear the resume indicator so that the next await call will park without a resume()\r\n    this.parkedThread.lazySet(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#await()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "extend",
    "tail": "InputStream",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.TouchableDataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.TouchableDataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\n/**\n * Extension of {@link DataBuffer} that allows for buffers that can be given\n * hints for debugging purposes.\n *\n * @author Arjen Poutsma\n * @since 6.0\n */\npublic interface TouchableDataBuffer extends DataBuffer {\n\n\t/**\n\t * Associate the given hint with the data buffer for debugging purposes.\n\t * @return this buffer\n\t */\n\tTouchableDataBuffer touch(Object hint);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.TouchableDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Associate the given hint with the data buffer for debugging purposes.\r\n * @return this buffer\r\n */\r\nTouchableDataBuffer touch(Object hint);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.TouchableDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.TouchableDataBuffer#touch(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.TouchableDataBuffer",
    "headType": "class",
    "relation": "extend",
    "tail": "DataBuffer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ByteArrayResource",
    "tailType": "class"
  }
]