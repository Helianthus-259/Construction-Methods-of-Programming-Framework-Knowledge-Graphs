[
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ResourceEditor#ignoreUnresolvablePlaceholders",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#ignoreUnresolvablePlaceholders",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#setAsText(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAsText(String text) {\r\n    if (StringUtils.hasText(text)) {\r\n        String locationToUse = resolvePath(text).trim();\r\n        setValue(this.resourceLoader.getResource(locationToUse));\r\n    } else {\r\n        setValue(null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceEditor#setAsText(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#setAsText(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#resolvePath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given path, replacing placeholders with corresponding\r\n * property values from the {@code environment} if necessary.\r\n * @param path the original file path\r\n * @return the resolved file path\r\n * @see PropertyResolver#resolvePlaceholders\r\n * @see PropertyResolver#resolveRequiredPlaceholders\r\n */\r\nprotected String resolvePath(String path) {\r\n    if (this.propertyResolver == null) {\r\n        this.propertyResolver = new StandardEnvironment();\r\n    }\r\n    return (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) : this.propertyResolver.resolveRequiredPlaceholders(path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceEditor#resolvePath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#getAsText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getAsText() {\r\n    Resource value = (Resource) getValue();\r\n    try {\r\n        // Try to determine URL for resource.\r\n        return (value != null ? value.getURL().toExternalForm() : \"\");\r\n    } catch (IOException ex) {\r\n        // Couldn't determine resource URL - return null to indicate\r\n        // that there is no appropriate text representation.\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceEditor#getAsText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#getAsText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#getAsText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertyEditorSupport",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ResourceLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ResourceUtils;\n\n/**\n * Strategy interface for loading resources (for example, class path or file system\n * resources). An {@link org.springframework.context.ApplicationContext}\n * is required to provide this functionality plus extended\n * {@link org.springframework.core.io.support.ResourcePatternResolver} support.\n *\n * <p>{@link DefaultResourceLoader} is a standalone implementation that is\n * usable outside an ApplicationContext and is also used by {@link ResourceEditor}.\n *\n * <p>Bean properties of type {@code Resource} and {@code Resource[]} can be populated\n * from Strings when running in an ApplicationContext, using the particular\n * context's resource loading strategy.\n *\n * @author Juergen Hoeller\n * @since 10.03.2004\n * @see Resource\n * @see org.springframework.core.io.support.ResourcePatternResolver\n * @see org.springframework.context.ApplicationContext\n * @see org.springframework.context.ResourceLoaderAware\n */\npublic interface ResourceLoader {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\". */\n\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;\n\n\n\t/**\n\t * Return a {@code Resource} handle for the specified resource location.\n\t * <p>The handle should always be a reusable resource descriptor,\n\t * allowing for multiple {@link Resource#getInputStream()} calls.\n\t * <p><ul>\n\t * <li>Must support fully qualified URLs, for example, \"file:C:/test.dat\".\n\t * <li>Must support classpath pseudo-URLs, for example, \"classpath:test.dat\".\n\t * <li>Should support relative file paths, for example, \"WEB-INF/test.dat\".\n\t * (This will be implementation-specific, typically provided by an\n\t * ApplicationContext implementation.)\n\t * </ul>\n\t * <p>Note that a {@code Resource} handle does not imply an existing resource;\n\t * you need to invoke {@link Resource#exists} to check for existence.\n\t * @param location the resource location\n\t * @return a corresponding {@code Resource} handle (never {@code null})\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see Resource#exists()\n\t * @see Resource#getInputStream()\n\t */\n\tResource getResource(String location);\n\n\t/**\n\t * Expose the {@link ClassLoader} used by this {@code ResourceLoader}.\n\t * <p>Clients which need to access the {@code ClassLoader} directly can do so\n\t * in a uniform manner with the {@code ResourceLoader}, rather than relying\n\t * on the thread context {@code ClassLoader}.\n\t * @return the {@code ClassLoader}\n\t * (only {@code null} if even the system {@code ClassLoader} isn't accessible)\n\t * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\n\t * @see org.springframework.util.ClassUtils#forName(String, ClassLoader)\n\t */\n\t@Nullable ClassLoader getClassLoader();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ResourceLoader#CLASSPATH_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader#CLASSPATH_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader#getResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code Resource} handle for the specified resource location.\r\n * <p>The handle should always be a reusable resource descriptor,\r\n * allowing for multiple {@link Resource#getInputStream()} calls.\r\n * <p><ul>\r\n * <li>Must support fully qualified URLs, for example, \"file:C:/test.dat\".\r\n * <li>Must support classpath pseudo-URLs, for example, \"classpath:test.dat\".\r\n * <li>Should support relative file paths, for example, \"WEB-INF/test.dat\".\r\n * (This will be implementation-specific, typically provided by an\r\n * ApplicationContext implementation.)\r\n * </ul>\r\n * <p>Note that a {@code Resource} handle does not imply an existing resource;\r\n * you need to invoke {@link Resource#exists} to check for existence.\r\n * @param location the resource location\r\n * @return a corresponding {@code Resource} handle (never {@code null})\r\n * @see #CLASSPATH_URL_PREFIX\r\n * @see Resource#exists()\r\n * @see Resource#getInputStream()\r\n */\r\nResource getResource(String location);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceLoader#getResource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceLoader#getClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Expose the {@link ClassLoader} used by this {@code ResourceLoader}.\r\n * <p>Clients which need to access the {@code ClassLoader} directly can do so\r\n * in a uniform manner with the {@code ResourceLoader}, rather than relying\r\n * on the thread context {@code ClassLoader}.\r\n * @return the {@code ClassLoader}\r\n * (only {@code null} if even the system {@code ClassLoader} isn't accessible)\r\n * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\r\n * @see org.springframework.util.ClassUtils#forName(String, ClassLoader)\r\n */\r\n@Nullable\r\nClassLoader getClassLoader();",
    "tailType": "method_code"
  }
]