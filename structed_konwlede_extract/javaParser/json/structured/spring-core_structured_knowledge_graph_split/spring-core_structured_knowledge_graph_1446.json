[
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.xml.XMLConstants;\nimport javax.xml.namespace.NamespaceContext;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Simple {@code javax.xml.namespace.NamespaceContext} implementation.\n * Follows the standard {@code NamespaceContext} contract, and is loadable\n * via a {@code java.util.Map} or {@code java.util.Properties} object\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic class SimpleNamespaceContext implements NamespaceContext {\n\n\tprivate final Map<String, String> prefixToNamespaceUri = new HashMap<>();\n\n\tprivate final Map<String, Set<String>> namespaceUriToPrefixes = new HashMap<>();\n\n\tprivate String defaultNamespaceUri = \"\";\n\n\n\t@Override\n\tpublic String getNamespaceURI(String prefix) {\n\t\tAssert.notNull(prefix, \"'prefix' must not be null\");\n\t\tif (XMLConstants.XML_NS_PREFIX.equals(prefix)) {\n\t\t\treturn XMLConstants.XML_NS_URI;\n\t\t}\n\t\telse if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {\n\t\t\treturn XMLConstants.XMLNS_ATTRIBUTE_NS_URI;\n\t\t}\n\t\telse if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\n\t\t\treturn this.defaultNamespaceUri;\n\t\t}\n\t\telse if (this.prefixToNamespaceUri.containsKey(prefix)) {\n\t\t\treturn this.prefixToNamespaceUri.get(prefix);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t@Override\n\tpublic @Nullable String getPrefix(String namespaceUri) {\n\t\tSet<String> prefixes = getPrefixesSet(namespaceUri);\n\t\treturn (!prefixes.isEmpty() ? prefixes.iterator().next() : null);\n\t}\n\n\t@Override\n\tpublic Iterator<String> getPrefixes(String namespaceUri) {\n\t\treturn getPrefixesSet(namespaceUri).iterator();\n\t}\n\n\tprivate Set<String> getPrefixesSet(String namespaceUri) {\n\t\tAssert.notNull(namespaceUri, \"'namespaceUri' must not be null\");\n\t\tif (this.defaultNamespaceUri.equals(namespaceUri)) {\n\t\t\treturn Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX);\n\t\t}\n\t\telse if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {\n\t\t\treturn Collections.singleton(XMLConstants.XML_NS_PREFIX);\n\t\t}\n\t\telse if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri)) {\n\t\t\treturn Collections.singleton(XMLConstants.XMLNS_ATTRIBUTE);\n\t\t}\n\t\telse {\n\t\t\tSet<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);\n\t\t\treturn (prefixes != null ? Collections.unmodifiableSet(prefixes) : Collections.emptySet());\n\t\t}\n\t}\n\n\n\t/**\n\t * Set the bindings for this namespace context.\n\t * The supplied map must consist of string key value pairs.\n\t */\n\tpublic void setBindings(Map<String, String> bindings) {\n\t\tbindings.forEach(this::bindNamespaceUri);\n\t}\n\n\t/**\n\t * Bind the given namespace as default namespace.\n\t * @param namespaceUri the namespace uri\n\t */\n\tpublic void bindDefaultNamespaceUri(String namespaceUri) {\n\t\tbindNamespaceUri(XMLConstants.DEFAULT_NS_PREFIX, namespaceUri);\n\t}\n\n\t/**\n\t * Bind the given prefix to the given namespace.\n\t * @param prefix the namespace prefix\n\t * @param namespaceUri the namespace URI\n\t */\n\tpublic void bindNamespaceUri(String prefix, String namespaceUri) {\n\t\tAssert.notNull(prefix, \"'prefix' must not be null\");\n\t\tAssert.notNull(namespaceUri, \"'namespaceUri' must not be null\");\n\t\tif (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\n\t\t\tthis.defaultNamespaceUri = namespaceUri;\n\t\t}\n\t\telse {\n\t\t\tthis.prefixToNamespaceUri.put(prefix, namespaceUri);\n\t\t\tSet<String> prefixes =\n\t\t\t\t\tthis.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());\n\t\t\tprefixes.add(prefix);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the given prefix from this context.\n\t * @param prefix the prefix to be removed\n\t */\n\tpublic void removeBinding(@Nullable String prefix) {\n\t\tif (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\n\t\t\tthis.defaultNamespaceUri = \"\";\n\t\t}\n\t\telse if (prefix != null) {\n\t\t\tString namespaceUri = this.prefixToNamespaceUri.remove(prefix);\n\t\t\tif (namespaceUri != null) {\n\t\t\t\tSet<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);\n\t\t\t\tif (prefixes != null) {\n\t\t\t\t\tprefixes.remove(prefix);\n\t\t\t\t\tif (prefixes.isEmpty()) {\n\t\t\t\t\t\tthis.namespaceUriToPrefixes.remove(namespaceUri);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove all declared prefixes.\n\t */\n\tpublic void clear() {\n\t\tthis.prefixToNamespaceUri.clear();\n\t\tthis.namespaceUriToPrefixes.clear();\n\t}\n\n\t/**\n\t * Return all declared prefixes.\n\t */\n\tpublic Iterator<String> getBoundPrefixes() {\n\t\treturn this.prefixToNamespaceUri.keySet().iterator();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#prefixToNamespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#prefixToNamespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#namespaceUriToPrefixes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#namespaceUriToPrefixes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Set<String>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#defaultNamespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#defaultNamespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getNamespaceURI(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getNamespaceURI(String prefix) {\r\n    Assert.notNull(prefix, \"'prefix' must not be null\");\r\n    if (XMLConstants.XML_NS_PREFIX.equals(prefix)) {\r\n        return XMLConstants.XML_NS_URI;\r\n    } else if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {\r\n        return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;\r\n    } else if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\r\n        return this.defaultNamespaceUri;\r\n    } else if (this.prefixToNamespaceUri.containsKey(prefix)) {\r\n        return this.prefixToNamespaceUri.get(prefix);\r\n    }\r\n    return \"\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#getNamespaceURI(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getNamespaceURI(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getPrefix(String namespaceUri) {\r\n    Set<String> prefixes = getPrefixesSet(namespaceUri);\r\n    return (!prefixes.isEmpty() ? prefixes.iterator().next() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#getPrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefixes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Iterator<String> getPrefixes(String namespaceUri) {\r\n    return getPrefixesSet(namespaceUri).iterator();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#getPrefixes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefixes(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getPrefixesSet(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Set<String> getPrefixesSet(String namespaceUri) {\r\n    Assert.notNull(namespaceUri, \"'namespaceUri' must not be null\");\r\n    if (this.defaultNamespaceUri.equals(namespaceUri)) {\r\n        return Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX);\r\n    } else if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {\r\n        return Collections.singleton(XMLConstants.XML_NS_PREFIX);\r\n    } else if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri)) {\r\n        return Collections.singleton(XMLConstants.XMLNS_ATTRIBUTE);\r\n    } else {\r\n        Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);\r\n        return (prefixes != null ? Collections.unmodifiableSet(prefixes) : Collections.emptySet());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#getPrefixesSet(String)",
    "tailType": "method"
  }
]