[
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeLocalName(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeNamespace(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getAttributeNamespace(int index) {\r\n    return getAttributeName(index).getNamespaceURI();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeNamespace(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeNamespace(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributePrefix(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getAttributePrefix(int index) {\r\n    return getAttributeName(index).getPrefix();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributePrefix(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributePrefix(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getNamespaceURI() {\r\n    int eventType = getEventType();\r\n    if (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT) {\r\n        return getName().getNamespaceURI();\r\n    } else {\r\n        throw new IllegalStateException(\"Parser must be on START_ELEMENT or END_ELEMENT state\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getNamespaceURI(String prefix) {\r\n    return getNamespaceContext().getNamespaceURI(prefix);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getNamespaceURI(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#hasText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasText() {\r\n    int eventType = getEventType();\r\n    return (eventType == XMLStreamConstants.SPACE || eventType == XMLStreamConstants.CHARACTERS || eventType == XMLStreamConstants.COMMENT || eventType == XMLStreamConstants.CDATA || eventType == XMLStreamConstants.ENTITY_REFERENCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#hasText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#hasText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPrefix() {\r\n    int eventType = getEventType();\r\n    if (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT) {\r\n        return getName().getPrefix();\r\n    } else {\r\n        throw new IllegalStateException(\"Parser must be on START_ELEMENT or END_ELEMENT state\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#hasName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasName() {\r\n    int eventType = getEventType();\r\n    return (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT);\r\n}",
    "tailType": "method_code"
  }
]