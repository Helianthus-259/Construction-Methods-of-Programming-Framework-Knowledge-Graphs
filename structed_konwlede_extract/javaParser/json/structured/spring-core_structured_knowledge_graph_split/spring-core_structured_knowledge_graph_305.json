[
  {
    "head": "org.springframework.asm.Attribute#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Attribute#cachedContent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Attribute#cachedContent",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteVector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Attribute#nextAttribute",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Attribute#nextAttribute",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Attribute#isUnknown()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@literal true} if this type of attribute is unknown. This means that the attribute\r\n * content can't be parsed to extract constant pool references, labels, etc. Instead, the\r\n * attribute content is read as an opaque byte array, and written back as is. This can lead to\r\n * invalid attributes, if the content actually contains constant pool references, labels, or other\r\n * symbolic references that need to be updated when there are changes to the constant pool, the\r\n * method bytecode, etc. The default implementation of this method always returns {@literal true}.\r\n *\r\n * @return {@literal true} if this type of attribute is unknown.\r\n */\r\npublic boolean isUnknown() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#isUnknown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#isCodeAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@literal true} if this type of attribute is a Code attribute.\r\n *\r\n * @return {@literal true} if this type of attribute is a Code attribute.\r\n */\r\npublic boolean isCodeAttribute() {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#isCodeAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#getLabels()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the labels corresponding to this attribute.\r\n *\r\n * @return the labels corresponding to this attribute, or {@literal null} if this attribute is not\r\n *     a Code attribute that contains labels.\r\n * @deprecated no longer used by ASM.\r\n */\r\n@Deprecated\r\nprotected Label[] getLabels() {\r\n    return new Label[0];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#getLabels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#getLabels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.Attribute#read(ClassReader,int,int,char[],int,Label[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a {@link #type} attribute. This method must return a <i>new</i> {@link Attribute} object,\r\n * of type {@link #type}, corresponding to the 'length' bytes starting at 'offset', in the given\r\n * ClassReader.\r\n *\r\n * @param classReader the class that contains the attribute to be read.\r\n * @param offset index of the first byte of the attribute's content in {@link ClassReader}. The 6\r\n *     attribute header bytes (attribute_name_index and attribute_length) are not taken into\r\n *     account here.\r\n * @param length the length of the attribute's content (excluding the 6 attribute header bytes).\r\n * @param charBuffer the buffer to be used to call the ClassReader methods requiring a\r\n *     'charBuffer' parameter.\r\n * @param codeAttributeOffset index of the first byte of content of the enclosing Code attribute\r\n *     in {@link ClassReader}, or -1 if the attribute to be read is not a Code attribute. The 6\r\n *     attribute header bytes (attribute_name_index and attribute_length) are not taken into\r\n *     account here.\r\n * @param labels the labels of the method's code, or {@literal null} if the attribute to be read\r\n *     is not a Code attribute. Labels defined in the attribute must be created and added to this\r\n *     array, if not already present, by calling the {@link #readLabel} method (do not create\r\n *     {@link Label} instances directly).\r\n * @return a <i>new</i> {@link Attribute} object corresponding to the specified bytes.\r\n */\r\nprotected Attribute read(final ClassReader classReader, final int offset, final int length, final char[] charBuffer, final int codeAttributeOffset, final Label[] labels) {\r\n    Attribute attribute = new Attribute(type);\r\n    attribute.cachedContent = new ByteVector(classReader.readBytes(offset, length));\r\n    return attribute;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#read(ClassReader,int,int,char[],int,Label[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#read(Attribute,ClassReader,int,int,char[],int,Label[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads an attribute with the same {@link #type} as the given attribute. This method returns a\r\n * new {@link Attribute} object, corresponding to the 'length' bytes starting at 'offset', in the\r\n * given ClassReader.\r\n *\r\n * @param attribute The attribute prototype that is used for reading.\r\n * @param classReader the class that contains the attribute to be read.\r\n * @param offset index of the first byte of the attribute's content in {@link ClassReader}. The 6\r\n *     attribute header bytes (attribute_name_index and attribute_length) are not taken into\r\n *     account here.\r\n * @param length the length of the attribute's content (excluding the 6 attribute header bytes).\r\n * @param charBuffer the buffer to be used to call the ClassReader methods requiring a\r\n *     'charBuffer' parameter.\r\n * @param codeAttributeOffset index of the first byte of content of the enclosing Code attribute\r\n *     in {@link ClassReader}, or -1 if the attribute to be read is not a Code attribute. The 6\r\n *     attribute header bytes (attribute_name_index and attribute_length) are not taken into\r\n *     account here.\r\n * @param labels the labels of the method's code, or {@literal null} if the attribute to be read\r\n *     is not a Code attribute. Labels defined in the attribute are added to this array, if not\r\n *     already present.\r\n * @return a new {@link Attribute} object corresponding to the specified bytes.\r\n */\r\npublic static Attribute read(final Attribute attribute, final ClassReader classReader, final int offset, final int length, final char[] charBuffer, final int codeAttributeOffset, final Label[] labels) {\r\n    return attribute.read(classReader, offset, length, charBuffer, codeAttributeOffset, labels);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#read(Attribute,ClassReader,int,int,char[],int,Label[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#readLabel(ClassReader,int,Label[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the label corresponding to the given bytecode offset by calling {@link\r\n * ClassReader#readLabel}. This creates and adds the label to the given array if it is not already\r\n * present. Note that this created label may be a {@link Label} subclass instance, if the given\r\n * ClassReader overrides {@link ClassReader#readLabel}. Hence {@link #read(ClassReader, int, int,\r\n * char[], int, Label[])} must not manually create {@link Label} instances.\r\n *\r\n * @param bytecodeOffset a bytecode offset in a method.\r\n * @param labels the already created labels, indexed by their offset. If a label already exists\r\n *     for bytecodeOffset this method does not create a new one. Otherwise it stores the new label\r\n *     in this array.\r\n * @return a label for the given bytecode offset.\r\n */\r\npublic static Label readLabel(final ClassReader classReader, final int bytecodeOffset, final Label[] labels) {\r\n    return classReader.readLabel(bytecodeOffset, labels);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#readLabel(ClassReader,int,Label[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Attribute#maybeWrite(ClassWriter,byte[],int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Calls {@link #write(ClassWriter,byte[],int,int,int)} if it has not already been called and\r\n * returns its result or its (cached) previous result.\r\n *\r\n * @param classWriter the class to which this attribute must be added. This parameter can be used\r\n *     to add the items that corresponds to this attribute to the constant pool of this class.\r\n * @param code the bytecode of the method corresponding to this Code attribute, or {@literal null}\r\n *     if this attribute is not a Code attribute. Corresponds to the 'code' field of the Code\r\n *     attribute.\r\n * @param codeLength the length of the bytecode of the method corresponding to this code\r\n *     attribute, or 0 if this attribute is not a Code attribute. Corresponds to the 'code_length'\r\n *     field of the Code attribute.\r\n * @param maxStack the maximum stack size of the method corresponding to this Code attribute, or\r\n *     -1 if this attribute is not a Code attribute.\r\n * @param maxLocals the maximum number of local variables of the method corresponding to this code\r\n *     attribute, or -1 if this attribute is not a Code attribute.\r\n * @return the byte array form of this attribute.\r\n */\r\nprivate ByteVector maybeWrite(final ClassWriter classWriter, final byte[] code, final int codeLength, final int maxStack, final int maxLocals) {\r\n    if (cachedContent == null) {\r\n        cachedContent = write(classWriter, code, codeLength, maxStack, maxLocals);\r\n    }\r\n    return cachedContent;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Attribute",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Attribute#maybeWrite(ClassWriter,byte[],int,int,int)",
    "tailType": "method"
  }
]