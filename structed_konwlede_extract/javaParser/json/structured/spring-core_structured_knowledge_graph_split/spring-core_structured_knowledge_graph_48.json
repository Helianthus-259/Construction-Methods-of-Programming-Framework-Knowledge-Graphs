[
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedFiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic GeneratedFiles getGeneratedFiles() {\r\n    return this.generatedFiles;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedFiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedFiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getRuntimeHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic RuntimeHints getRuntimeHints() {\r\n    return this.runtimeHints;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#getRuntimeHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getRuntimeHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#withName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultGenerationContext withName(String name) {\r\n    return new DefaultGenerationContext(this, name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#withName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#withName(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#writeGeneratedContent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write any generated content out to the generated files.\r\n */\r\npublic void writeGeneratedContent() {\r\n    this.generatedClasses.writeTo(this.generatedFiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#writeGeneratedContent()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.TestGroupTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture;\n\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.opentest4j.TestAbortedException;\n\nimport static java.util.stream.Collectors.joining;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.junit.jupiter.api.Assumptions.assumeTrue;\nimport static org.springframework.core.testfixture.TestGroup.LONG_RUNNING;\n\n/**\n * Tests for {@link TestGroup}.\n *\n * @author Sam Brannen\n * @since 5.0\n */\nclass TestGroupTests {\n\n\tprivate static final String TEST_GROUPS_SYSTEM_PROPERTY = \"testGroups\";\n\n\n\tprivate String originalTestGroups;\n\n\n\t@BeforeEach\n\tvoid trackOriginalTestGroups() {\n\t\tthis.originalTestGroups = System.getProperty(TEST_GROUPS_SYSTEM_PROPERTY);\n\t}\n\n\t@AfterEach\n\tvoid restoreOriginalTestGroups() {\n\t\tsetTestGroups(Objects.requireNonNullElse(this.originalTestGroups, \"\"));\n\t}\n\n\t@Test\n\tvoid assumeGroupWithNoActiveTestGroups() {\n\t\tsetTestGroups(\"\");\n\n\t\tassertThatExceptionOfType(TestAbortedException.class).isThrownBy(() -> assumeGroup(LONG_RUNNING));\n\t}\n\n\t@Test\n\tvoid assumeGroupWithMatchingActiveTestGroup() {\n\t\tsetTestGroups(LONG_RUNNING);\n\t\tassertThatCode(() -> assumeGroup(LONG_RUNNING))\n\t\t\t.as(\"assumption should NOT have failed\")\n\t\t\t.doesNotThrowAnyException();\n\t}\n\n\t@Test\n\tvoid assumeGroupWithBogusActiveTestGroup() {\n\t\tassertBogusActiveTestGroupBehavior(\"bogus\");\n\t}\n\n\t@Test\n\tvoid assumeGroupWithAllMinusBogusActiveTestGroup() {\n\t\tassertBogusActiveTestGroupBehavior(\"all-bogus\");\n\t}\n\n\tprivate void assertBogusActiveTestGroupBehavior(String testGroups) {\n\t\t// Should result in something similar to the following:\n\t\t//\n\t\t// java.lang.IllegalStateException: Failed to parse 'testGroups' system property:\n\t\t// Unable to find test group 'bogus' when parsing testGroups value: 'all-bogus'.\n\t\t// Available groups include: [LONG_RUNNING,PERFORMANCE]\n\n\t\tsetTestGroups(testGroups);\n\t\tassertThatIllegalStateException()\n\t\t\t.isThrownBy(() -> assumeGroup(LONG_RUNNING))\n\t\t\t.withMessageStartingWith(\"Failed to parse '\" + TEST_GROUPS_SYSTEM_PROPERTY + \"' system property: \")\n\t\t\t.havingCause()\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.withMessage(\n\t\t\t\t\"Unable to find test group 'bogus' when parsing testGroups value: '\" + testGroups +\n\t\t\t\t\"'. Available groups include: [LONG_RUNNING]\");\n\t}\n\n\tprivate void setTestGroups(TestGroup... testGroups) {\n\t\tsetTestGroups(Arrays.stream(testGroups).map(TestGroup::name).collect(joining(\", \")));\n\t}\n\n\tprivate void setTestGroups(String testGroups) {\n\t\tSystem.setProperty(TEST_GROUPS_SYSTEM_PROPERTY, testGroups);\n\t}\n\n\t/**\n\t * Assume that a particular {@link TestGroup} is active.\n\t * @param group the group that must be active\n\t * @throws org.opentest4j.TestAbortedException if the assumption fails\n\t */\n\tprivate static void assumeGroup(TestGroup group) {\n\t\tSet<TestGroup> testGroups = TestGroup.loadTestGroups();\n\t\tassumeTrue(testGroups.contains(group),\n\t\t\t() -> \"Requires inactive test group \" + group + \"; active test groups: \" + testGroups);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.TestGroupTests#TEST_GROUPS_SYSTEM_PROPERTY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests#TEST_GROUPS_SYSTEM_PROPERTY",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.TestGroupTests#originalTestGroups",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests#originalTestGroups",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests#trackOriginalTestGroups()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid trackOriginalTestGroups() {\r\n    this.originalTestGroups = System.getProperty(TEST_GROUPS_SYSTEM_PROPERTY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.TestGroupTests#trackOriginalTestGroups()",
    "tailType": "method"
  }
]