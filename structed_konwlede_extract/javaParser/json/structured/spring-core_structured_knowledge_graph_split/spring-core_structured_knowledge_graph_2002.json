[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#lastIndexOf(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#lastIndexOf(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#slice(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid slice(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b' });\r\n    DataBuffer slice = buffer.slice(1, 2);\r\n    assertThat(slice.readableByteCount()).isEqualTo(2);\r\n    buffer.write((byte) 'c');\r\n    assertThat(buffer.readableByteCount()).isEqualTo(3);\r\n    byte[] result = new byte[3];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(new byte[] { 'a', 'b', 'c' });\r\n    assertThat(slice.readableByteCount()).isEqualTo(2);\r\n    result = new byte[2];\r\n    slice.read(result);\r\n    if (!(bufferFactory instanceof Netty5DataBufferFactory)) {\r\n        assertThat(result).isEqualTo(new byte[] { 'b', 'c' });\r\n    }\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#slice(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#slice(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#slice(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#retainedSlice(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid retainedSlice(DataBufferFactory bufferFactory) {\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, \"Netty 5 does not support retainedSlice\");\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b' });\r\n    DataBuffer slice = buffer.retainedSlice(1, 2);\r\n    assertThat(slice.readableByteCount()).isEqualTo(2);\r\n    buffer.write((byte) 'c');\r\n    assertThat(buffer.readableByteCount()).isEqualTo(3);\r\n    byte[] result = new byte[3];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(new byte[] { 'a', 'b', 'c' });\r\n    assertThat(slice.readableByteCount()).isEqualTo(2);\r\n    result = new byte[2];\r\n    slice.read(result);\r\n    assertThat(result).isEqualTo(new byte[] { 'b', 'c' });\r\n    release(buffer, slice);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#retainedSlice(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#retainedSlice(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#retainedSlice(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#spr16351(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid spr16351(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(6);\r\n    byte[] bytes = { 'a', 'b', 'c', 'd', 'e', 'f' };\r\n    buffer.write(bytes);\r\n    DataBuffer slice = buffer.slice(3, 3);\r\n    buffer.writePosition(3);\r\n    buffer.write(slice);\r\n    assertThat(buffer.readableByteCount()).isEqualTo(6);\r\n    byte[] result = new byte[6];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(bytes);\r\n    if (bufferFactory instanceof Netty5DataBufferFactory) {\r\n        release(slice);\r\n    }\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#spr16351(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#spr16351(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#spr16351(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#split(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid split(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b' });\r\n    assertThatException().isThrownBy(() -> buffer.split(-1));\r\n    assertThatException().isThrownBy(() -> buffer.split(4));\r\n    DataBuffer split = buffer.split(1);\r\n    assertThat(split.readPosition()).isEqualTo(0);\r\n    assertThat(split.writePosition()).isEqualTo(1);\r\n    assertThat(split.capacity()).isEqualTo(1);\r\n    assertThat(split.readableByteCount()).isEqualTo(1);\r\n    byte[] bytes = new byte[1];\r\n    split.read(bytes);\r\n    assertThat(bytes).containsExactly('a');\r\n    assertThat(buffer.readPosition()).isEqualTo(0);\r\n    assertThat(buffer.writePosition()).isEqualTo(1);\r\n    assertThat(buffer.capacity()).isEqualTo(2);\r\n    buffer.write((byte) 'c');\r\n    assertThat(buffer.readableByteCount()).isEqualTo(2);\r\n    bytes = new byte[2];\r\n    buffer.read(bytes);\r\n    assertThat(bytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    DataBuffer buffer2 = createDataBuffer(1);\r\n    buffer2.write(new byte[] { 'a' });\r\n    DataBuffer split2 = buffer2.split(1);\r\n    assertThat(split2.readPosition()).isEqualTo(0);\r\n    assertThat(split2.writePosition()).isEqualTo(1);\r\n    assertThat(split2.capacity()).isEqualTo(1);\r\n    assertThat(split2.readableByteCount()).isEqualTo(1);\r\n    bytes = new byte[1];\r\n    split2.read(bytes);\r\n    assertThat(bytes).containsExactly('a');\r\n    assertThat(buffer2.readPosition()).isEqualTo(0);\r\n    assertThat(buffer2.writePosition()).isEqualTo(0);\r\n    assertThat(buffer2.capacity()).isEqualTo(0);\r\n    assertThat(buffer.readableByteCount()).isEqualTo(0);\r\n    release(buffer, buffer2, split, split2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#split(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#split(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#join(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid join(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer composite = this.bufferFactory.join(Arrays.asList(stringBuffer(\"a\"), stringBuffer(\"b\"), stringBuffer(\"c\")));\r\n    assertThat(composite.readableByteCount()).isEqualTo(3);\r\n    byte[] bytes = new byte[3];\r\n    composite.read(bytes);\r\n    assertThat(bytes).isEqualTo(new byte[] { 'a', 'b', 'c' });\r\n    release(composite);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#join(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#join(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  }
]