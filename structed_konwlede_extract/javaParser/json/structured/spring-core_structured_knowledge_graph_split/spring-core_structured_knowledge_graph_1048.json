[
  {
    "head": "org.springframework.core.io.ModuleResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.PathResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.OpenOption;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link Resource} implementation for {@link java.nio.file.Path} handles,\n * performing all operations and transformations via the {@code Path} API.\n * Supports resolution as a {@link File} and also as a {@link URL}.\n * Implements the extended {@link WritableResource} interface.\n *\n * <p>Note: As of 5.1, {@link java.nio.file.Path} support is also available\n * in {@link FileSystemResource#FileSystemResource(Path) FileSystemResource},\n * applying Spring's standard String-based path transformations but\n * performing all operations via the {@link java.nio.file.Files} API.\n * This {@code PathResource} is effectively a pure {@code java.nio.path.Path}\n * based alternative with different {@code createRelative} behavior.\n *\n * @author Philippe Marschall\n * @author Juergen Hoeller\n * @since 4.0\n * @see java.nio.file.Path\n * @see java.nio.file.Files\n * @see FileSystemResource\n * @deprecated since 7.0 in favor of {@link FileSystemResource}\n */\n@Deprecated(since = \"7.0\", forRemoval = true)\npublic class PathResource extends AbstractResource implements WritableResource {\n\n\tprivate final Path path;\n\n\n\t/**\n\t * Create a new {@code PathResource} from a {@link Path} handle.\n\t * <p>Note: Unlike {@link FileSystemResource}, when building relative resources\n\t * via {@link #createRelative}, the relative path will be built <i>underneath</i>\n\t * the given root: for example, Paths.get(\"C:/dir1/\"), relative path \"dir2\" &rarr; \"C:/dir1/dir2\"!\n\t * @param path a Path handle\n\t */\n\tpublic PathResource(Path path) {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tthis.path = path.normalize();\n\t}\n\n\t/**\n\t * Create a new {@code PathResource} from a path string.\n\t * <p>Note: Unlike {@link FileSystemResource}, when building relative resources\n\t * via {@link #createRelative}, the relative path will be built <i>underneath</i>\n\t * the given root: for example, Paths.get(\"C:/dir1/\"), relative path \"dir2\" &rarr; \"C:/dir1/dir2\"!\n\t * @param path a path\n\t * @see java.nio.file.Paths#get(String, String...)\n\t */\n\tpublic PathResource(String path) {\n\t\tAssert.notNull(path, \"Path must not be null\");\n\t\tthis.path = Paths.get(path).normalize();\n\t}\n\n\t/**\n\t * Create a new {@code PathResource} from a {@link URI}.\n\t * <p>Note: Unlike {@link FileSystemResource}, when building relative resources\n\t * via {@link #createRelative}, the relative path will be built <i>underneath</i>\n\t * the given root: for example, Paths.get(\"C:/dir1/\"), relative path \"dir2\" &rarr; \"C:/dir1/dir2\"!\n\t * @param uri a path URI\n\t * @see java.nio.file.Paths#get(URI)\n\t */\n\tpublic PathResource(URI uri) {\n\t\tAssert.notNull(uri, \"URI must not be null\");\n\t\tthis.path = Paths.get(uri).normalize();\n\t}\n\n\n\t/**\n\t * Return the file path for this resource.\n\t */\n\tpublic final String getPath() {\n\t\treturn this.path.toString();\n\t}\n\n\t/**\n\t * This implementation returns whether the underlying file exists.\n\t * @see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...)\n\t */\n\t@Override\n\tpublic boolean exists() {\n\t\treturn Files.exists(this.path);\n\t}\n\n\t/**\n\t * This implementation checks whether the underlying file is marked as readable\n\t * (and corresponds to an actual file with content, not to a directory).\n\t * @see java.nio.file.Files#isReadable(Path)\n\t * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\n\t */\n\t@Override\n\tpublic boolean isReadable() {\n\t\treturn (Files.isReadable(this.path) && !Files.isDirectory(this.path));\n\t}\n\n\t/**\n\t * This implementation opens an {@link InputStream} for the underlying file.\n\t * @see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)\n\t */\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\tif (!exists()) {\n\t\t\tthrow new FileNotFoundException(getPath() + \" (no such file or directory)\");\n\t\t}\n\t\tif (Files.isDirectory(this.path)) {\n\t\t\tthrow new FileNotFoundException(getPath() + \" (is a directory)\");\n\t\t}\n\t\treturn Files.newInputStream(this.path);\n\t}\n\n\t@Override\n\tpublic byte[] getContentAsByteArray() throws IOException {\n\t\ttry {\n\t\t\treturn Files.readAllBytes(this.path);\n\t\t}\n\t\tcatch (NoSuchFileException ex) {\n\t\t\tthrow new FileNotFoundException(ex.getMessage());\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getContentAsString(Charset charset) throws IOException {\n\t\ttry {\n\t\t\treturn Files.readString(this.path, charset);\n\t\t}\n\t\tcatch (NoSuchFileException ex) {\n\t\t\tthrow new FileNotFoundException(ex.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * This implementation checks whether the underlying file is marked as writable\n\t * (and corresponds to an actual file with content, not to a directory).\n\t * @see java.nio.file.Files#isWritable(Path)\n\t * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\n\t */\n\t@Override\n\tpublic boolean isWritable() {\n\t\treturn (Files.isWritable(this.path) && !Files.isDirectory(this.path));\n\t}\n\n\t/**\n\t * This implementation opens an {@link OutputStream} for the underlying file.\n\t * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)\n\t */\n\t@Override\n\tpublic OutputStream getOutputStream() throws IOException {\n\t\tif (Files.isDirectory(this.path)) {\n\t\t\tthrow new FileNotFoundException(getPath() + \" (is a directory)\");\n\t\t}\n\t\treturn Files.newOutputStream(this.path);\n\t}\n\n\t/**\n\t * This implementation returns a {@link URL} for the underlying file.\n\t * @see java.nio.file.Path#toUri()\n\t * @see java.net.URI#toURL()\n\t */\n\t@Override\n\tpublic URL getURL() throws IOException {\n\t\treturn this.path.toUri().toURL();\n\t}\n\n\t/**\n\t * This implementation returns a {@link URI} for the underlying file.\n\t * @see java.nio.file.Path#toUri()\n\t */\n\t@Override\n\tpublic URI getURI() throws IOException {\n\t\treturn this.path.toUri();\n\t}\n\n\t/**\n\t * This implementation always indicates a file.\n\t */\n\t@Override\n\tpublic boolean isFile() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * This implementation returns the underlying {@link File} reference.\n\t */\n\t@Override\n\tpublic File getFile() throws IOException {\n\t\ttry {\n\t\t\treturn this.path.toFile();\n\t\t}\n\t\tcatch (UnsupportedOperationException ex) {\n\t\t\t// Only paths on the default file system can be converted to a File:\n\t\t\t// Do exception translation for cases where conversion is not possible.\n\t\t\tthrow new FileNotFoundException(this.path + \" cannot be resolved to absolute file path\");\n\t\t}\n\t}\n\n\t/**\n\t * This implementation opens a {@link ReadableByteChannel} for the underlying file.\n\t * @see Files#newByteChannel(Path, OpenOption...)\n\t */\n\t@Override\n\tpublic ReadableByteChannel readableChannel() throws IOException {\n\t\ttry {\n\t\t\treturn Files.newByteChannel(this.path, StandardOpenOption.READ);\n\t\t}\n\t\tcatch (NoSuchFileException ex) {\n\t\t\tthrow new FileNotFoundException(ex.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * This implementation opens a {@link WritableByteChannel} for the underlying file.\n\t * @see Files#newByteChannel(Path, OpenOption...)\n\t */\n\t@Override\n\tpublic WritableByteChannel writableChannel() throws IOException {\n\t\treturn Files.newByteChannel(this.path, StandardOpenOption.WRITE);\n\t}\n\n\t/**\n\t * This implementation returns the underlying file's length.\n\t */\n\t@Override\n\tpublic long contentLength() throws IOException {\n\t\treturn Files.size(this.path);\n\t}\n\n\t/**\n\t * This implementation returns the underlying file's timestamp.\n\t * @see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...)\n\t */\n\t@Override\n\tpublic long lastModified() throws IOException {\n\t\t// We can not use the superclass method since it uses conversion to a File and\n\t\t// only a Path on the default file system can be converted to a File...\n\t\treturn Files.getLastModifiedTime(this.path).toMillis();\n\t}\n\n\t/**\n\t * This implementation creates a {@link PathResource}, applying the given path\n\t * relative to the path of the underlying file of this resource descriptor.\n\t * @see java.nio.file.Path#resolve(String)\n\t */\n\t@Override\n\tpublic Resource createRelative(String relativePath) {\n\t\treturn new PathResource(this.path.resolve(relativePath));\n\t}\n\n\t/**\n\t * This implementation returns the name of the file.\n\t * @see java.nio.file.Path#getFileName()\n\t */\n\t@Override\n\tpublic String getFilename() {\n\t\treturn this.path.getFileName().toString();\n\t}\n\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"path [\" + this.path.toAbsolutePath() + \"]\";\n\t}\n\n\n\t/**\n\t * This implementation compares the underlying {@link Path} references.\n\t */\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof PathResource that && this.path.equals(that.path)));\n\t}\n\n\t/**\n\t * This implementation returns the hash code of the underlying {@link Path} reference.\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.path.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.PathResource#path",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.PathResource#path",
    "headType": "field",
    "relation": "haveType",
    "tail": "Path",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.PathResource#getPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the file path for this resource.\r\n */\r\npublic final String getPath() {\r\n    return this.path.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns whether the underlying file exists.\r\n * @see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic boolean exists() {\r\n    return Files.exists(this.path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks whether the underlying file is marked as readable\r\n * (and corresponds to an actual file with content, not to a directory).\r\n * @see java.nio.file.Files#isReadable(Path)\r\n * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic boolean isReadable() {\r\n    return (Files.isReadable(this.path) && !Files.isDirectory(this.path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens an {@link InputStream} for the underlying file.\r\n * @see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)\r\n */\r\n@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    if (!exists()) {\r\n        throw new FileNotFoundException(getPath() + \" (no such file or directory)\");\r\n    }\r\n    if (Files.isDirectory(this.path)) {\r\n        throw new FileNotFoundException(getPath() + \" (is a directory)\");\r\n    }\r\n    return Files.newInputStream(this.path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte[] getContentAsByteArray() throws IOException {\r\n    try {\r\n        return Files.readAllBytes(this.path);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  }
]