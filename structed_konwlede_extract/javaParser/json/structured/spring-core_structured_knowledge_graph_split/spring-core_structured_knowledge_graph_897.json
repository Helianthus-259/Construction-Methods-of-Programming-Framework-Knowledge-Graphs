[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToCharacterConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharacterConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Converts a String to a Character.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class StringToCharacterConverter implements Converter<String, Character> {\n\n\t@Override\n\tpublic @Nullable Character convert(String source) {\n\t\tif (source.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tif (source.length() > 1) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Can only convert a [String] with length of 1 to a [Character]; string value '\" + source + \"'  has length of \" + source.length());\n\t\t}\n\t\treturn source.charAt(0);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharacterConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Character convert(String source) {\r\n    if (source.isEmpty()) {\r\n        return null;\r\n    }\r\n    if (source.length() > 1) {\r\n        throw new IllegalArgumentException(\"Can only convert a [String] with length of 1 to a [Character]; string value '\" + source + \"'  has length of \" + source.length());\r\n    }\r\n    return source.charAt(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharacterConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCharacterConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharacterConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharacterConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToCharsetConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharsetConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.nio.charset.Charset;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Convert a String to a {@link Charset}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 4.2\n */\nclass StringToCharsetConverter implements Converter<String, Charset> {\n\n\t@Override\n\tpublic Charset convert(String source) {\n\t\tif (StringUtils.hasText(source)) {\n\t\t\tsource = source.trim();\n\t\t}\n\t\treturn Charset.forName(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharsetConverter#convert(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Charset convert(String source) {\r\n    if (StringUtils.hasText(source)) {\r\n        source = source.trim();\r\n    }\r\n    return Charset.forName(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharsetConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCharsetConverter#convert(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCharsetConverter#convert(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.StringToCollectionConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.CollectionFactory;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.StringUtils;\n\n/**\n * Converts a comma-delimited String to a Collection.\n * If the target collection element type is declared, only matches if\n * {@code String.class} can be converted to it.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\nfinal class StringToCollectionConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic StringToCollectionConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(String.class, Collection.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn (targetType.getElementTypeDescriptor() == null ||\n\t\t\t\tthis.conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor()));\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString string = (String) source;\n\n\t\tString[] fields = StringUtils.commaDelimitedListToStringArray(string);\n\t\tTypeDescriptor elementDesc = targetType.getElementTypeDescriptor();\n\t\tCollection<Object> target = CollectionFactory.createCollection(targetType.getType(),\n\t\t\t\t(elementDesc != null ? elementDesc.getType() : null), fields.length);\n\n\t\tif (elementDesc == null) {\n\t\t\tfor (String field : fields) {\n\t\t\t\ttarget.add(field.trim());\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (String field : fields) {\n\t\t\t\tObject targetElement = this.conversionService.convert(field.trim(), sourceType, elementDesc);\n\t\t\t\ttarget.add(targetElement);\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.StringToCollectionConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(String.class, Collection.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StringToCollectionConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StringToCollectionConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]