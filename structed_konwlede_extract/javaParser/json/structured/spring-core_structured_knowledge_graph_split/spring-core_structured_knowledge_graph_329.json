[
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#resize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#autoGrow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid autoGrow() {\r\n    assertThat(this.baos.capacity()).isEqualTo(INITIAL_CAPACITY);\r\n    for (int i = 0; i < 129; i++) {\r\n        this.baos.write(0);\r\n    }\r\n    assertThat(this.baos.capacity()).isEqualTo(256);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStreamTests#autoGrow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#autoGrow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#grow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid grow() throws Exception {\r\n    assertThat(this.baos.capacity()).isEqualTo(INITIAL_CAPACITY);\r\n    this.baos.write(helloBytes);\r\n    this.baos.grow(1000);\r\n    assertThat(this.baos.capacity()).isEqualTo((this.helloBytes.length + 1000));\r\n    assertByteArrayEqualsString(this.baos);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStreamTests#grow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#grow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#write()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid write() throws Exception {\r\n    this.baos.write(helloBytes);\r\n    assertByteArrayEqualsString(this.baos);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStreamTests#write()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#write()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#failResize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid failResize() throws Exception {\r\n    this.baos.write(helloBytes);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.baos.resize(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStreamTests#failResize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#failResize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests#assertByteArrayEqualsString(ResizableByteArrayOutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertByteArrayEqualsString(ResizableByteArrayOutputStream actual) {\r\n    assertThat(actual.toByteArray()).isEqualTo(helloBytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResizableByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResizableByteArrayOutputStreamTests#assertByteArrayEqualsString(ResizableByteArrayOutputStream)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ResourceUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLStreamHandler;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n */\nclass ResourceUtilsTests {\n\n\t@Test\n\tvoid isJarURL() throws Exception {\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"file:myjar.jar\"))).isFalse();\n\t\tassertThat(ResourceUtils.isJarURL(new URL(\"http:myserver/myjar.jar\"))).isFalse();\n\t}\n\n\t@Test\n\tvoid extractJarFileURL() throws Exception {\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractJarFileURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t}\n\n\t@Test\n\tvoid extractArchiveURL() throws Exception {\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:/myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\n\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"file:myjar.jar\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(\"jar:file:myjar.jar!/\"))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"zip:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"wsjar:file:myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:myjar.jar\"));\n\t\tassertThat(ResourceUtils.extractArchiveURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/\", new DummyURLStreamHandler()))).isEqualTo(new URL(\"file:mywar.war\"));\n\t}\n\n\n\t/**\n\t * Dummy URLStreamHandler that's just specified to suppress the standard\n\t * {@code java.net.URL} URLStreamHandler lookup, to be able to\n\t * use the standard URL class for parsing \"rmi:...\" URLs.\n\t */\n\tprivate static class DummyURLStreamHandler extends URLStreamHandler {\n\n\t\t@Override\n\t\tprotected URLConnection openConnection(URL url) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests#isJarURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isJarURL() throws Exception {\r\n    assertThat(ResourceUtils.isJarURL(new URL(\"jar:file:myjar.jar!/mypath\"))).isTrue();\r\n    assertThat(ResourceUtils.isJarURL(new URL(null, \"zip:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\r\n    assertThat(ResourceUtils.isJarURL(new URL(null, \"wsjar:file:myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\r\n    assertThat(ResourceUtils.isJarURL(new URL(null, \"jar:war:file:mywar.war*/myjar.jar!/mypath\", new DummyURLStreamHandler()))).isTrue();\r\n    assertThat(ResourceUtils.isJarURL(new URL(\"file:myjar.jar\"))).isFalse();\r\n    assertThat(ResourceUtils.isJarURL(new URL(\"http:myserver/myjar.jar\"))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtilsTests#isJarURL()",
    "tailType": "method"
  }
]