[
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingInSlash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingClasspathStarProtocolWithWildcardInPatternAndEndingInSlash() throws Exception {\r\n    String pattern = \"classpath*:org/springframework/core/io/sup*/\";\r\n    String pathPrefix = \".+org/springframework/core/io/\";\r\n    List<String> actualSubPaths = getSubPathsIgnoringClassFilesEtc(pattern, pathPrefix);\r\n    URL url = getClass().getClassLoader().getResource(\"org/springframework/core/io/support/EncodedResource.class\");\r\n    if (!url.getProtocol().equals(\"jar\")) {\r\n        // We do NOT find \"support\" if the pattern ENDS with a slash if org/springframework/core/io/support\r\n        // is in the local file system.\r\n        assertThat(actualSubPaths).isEmpty();\r\n    } else {\r\n        // But we do find \"support/\" if org/springframework/core/io/support is found in a JAR on the classpath.\r\n        assertThat(actualSubPaths).containsExactly(\"support/\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingInSlash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingInSlash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingFileProtocolWithWildcardInPatternAndEndingInSlash() throws Exception {\r\n    Path testResourcesDir = Paths.get(\"src/test/resources\").toAbsolutePath();\r\n    String pattern = String.format(\"file:%s/org/springframework/core/io/sup*/\", testResourcesDir);\r\n    String pathPrefix = \".+org/springframework/core/io/\";\r\n    List<String> actualSubPaths = getSubPathsIgnoringClassFilesEtc(pattern, pathPrefix);\r\n    // We do NOT find \"support\" if the pattern ENDS with a slash.\r\n    assertThat(actualSubPaths).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingWithSuffixPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingClasspathStarProtocolWithWildcardInPatternAndEndingWithSuffixPattern() throws Exception {\r\n    String pattern = \"classpath*:org/springframework/core/io/sup*/*.txt\";\r\n    String pathPrefix = \".+org/springframework/core/io/\";\r\n    List<String> actualSubPaths = getSubPathsIgnoringClassFilesEtc(pattern, pathPrefix);\r\n    assertThat(actualSubPaths).containsExactlyInAnyOrder(\"support/resource#test1.txt\", \"support/resource#test2.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingWithSuffixPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingClasspathStarProtocolWithWildcardInPatternAndEndingWithSuffixPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#getSubPathsIgnoringClassFilesEtc(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<String> getSubPathsIgnoringClassFilesEtc(String pattern, String pathPrefix) throws IOException {\r\n    return Arrays.stream(resolver.getResources(pattern)).map(resource -> getPath(resource).replaceFirst(pathPrefix, \"\")).filter(name -> !name.endsWith(\".class\")).filter(name -> !name.endsWith(\".kt\")).filter(name -> !name.endsWith(\".factories\")).distinct().sorted().collect(Collectors.toList());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#getSubPathsIgnoringClassFilesEtc(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithoutWildcardInPatternAndEndingInSlashStarStar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingFileProtocolWithoutWildcardInPatternAndEndingInSlashStarStar() {\r\n    Path testResourcesDir = Paths.get(\"src/test/resources\").toAbsolutePath();\r\n    String pattern = String.format(\"file:%s/scanned-resources/**\", testResourcesDir);\r\n    String pathPrefix = \".+?resources/\";\r\n    // We do NOT find \"scanned-resources\" if the pattern ENDS with \"/**\" AND does NOT otherwise contain a wildcard.\r\n    assertExactFilenames(pattern, \"resource#test1.txt\", \"resource#test2.txt\");\r\n    assertExactSubPaths(pattern, pathPrefix, \"scanned-resources/resource#test1.txt\", \"scanned-resources/resource#test2.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithoutWildcardInPatternAndEndingInSlashStarStar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithoutWildcardInPatternAndEndingInSlashStarStar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlashStarStar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingFileProtocolWithWildcardInPatternAndEndingInSlashStarStar() {\r\n    Path testResourcesDir = Paths.get(\"src/test/resources\").toAbsolutePath();\r\n    String pattern = String.format(\"file:%s/scanned*resources/**\", testResourcesDir);\r\n    String pathPrefix = \".+?resources/\";\r\n    // We DO find \"scanned-resources\" if the pattern ENDS with \"/**\" AND DOES otherwise contain a wildcard.\r\n    assertExactFilenames(pattern, \"scanned-resources\", \"resource#test1.txt\", \"resource#test2.txt\");\r\n    assertExactSubPaths(pattern, pathPrefix, \"scanned-resources\", \"scanned-resources/resource#test1.txt\", \"scanned-resources/resource#test2.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlashStarStar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolWithWildcardInPatternAndEndingInSlashStarStar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolAndAssertingUrlAndUriSyntax()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid usingFileProtocolAndAssertingUrlAndUriSyntax() throws Exception {\r\n    Path testResourcesDir = Paths.get(\"src/test/resources\").toAbsolutePath();\r\n    String pattern = \"file:%s/scanned-resources/**/resource#test1.txt\".formatted(testResourcesDir);\r\n    Resource[] resources = resolver.getResources(pattern);\r\n    assertThat(resources).hasSize(1);\r\n    Resource resource = resources[0];\r\n    assertThat(resource.getFilename()).isEqualTo(\"resource#test1.txt\");\r\n    // The following assertions serve as regression tests for the lack of the\r\n    // \"authority component\" (//) in the returned URI/URL. For example, we are\r\n    // expecting file:/my/path (or file:/C:/My/Path) instead of file:///my/path.\r\n    assertThat(resource.getURL().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n    assertThat(resource.getURI().toString()).matches(\"^file:\\\\/[^\\\\/].+test1\\\\.txt$\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolAndAssertingUrlAndUriSyntax()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WithHashtagsInTheirFilenames#usingFileProtocolAndAssertingUrlAndUriSyntax()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]