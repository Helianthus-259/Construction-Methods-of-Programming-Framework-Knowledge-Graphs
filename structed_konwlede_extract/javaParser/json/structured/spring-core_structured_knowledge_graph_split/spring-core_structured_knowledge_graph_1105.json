[
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#withTypeIndex(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setTypeIndexForCurrentLevel(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the type index for the current nesting level.\r\n * @param typeIndex the corresponding type index\r\n * (or {@code null} for the default type index)\r\n * @see #getNestingLevel()\r\n * @deprecated since 5.2 in favor of {@link #withTypeIndex}\r\n */\r\n@Deprecated\r\npublic void setTypeIndexForCurrentLevel(int typeIndex) {\r\n    getTypeIndexesPerLevel().put(this.nestingLevel, typeIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#setTypeIndexForCurrentLevel(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#setTypeIndexForCurrentLevel(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getTypeIndexForCurrentLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the type index for the current nesting level.\r\n * @return the corresponding type index, or {@code null}\r\n * if none specified (indicating the default type index)\r\n * @see #getNestingLevel()\r\n */\r\n@Nullable\r\npublic Integer getTypeIndexForCurrentLevel() {\r\n    return getTypeIndexForLevel(this.nestingLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getTypeIndexForCurrentLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getTypeIndexForCurrentLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getTypeIndexForLevel(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the type index for the specified nesting level.\r\n * @param nestingLevel the nesting level to check\r\n * @return the corresponding type index, or {@code null}\r\n * if none specified (indicating the default type index)\r\n */\r\n@Nullable\r\npublic Integer getTypeIndexForLevel(int nestingLevel) {\r\n    return getTypeIndexesPerLevel().get(nestingLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getTypeIndexForLevel(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getTypeIndexForLevel(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#getTypeIndexesPerLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the (lazily constructed) type-indexes-per-level Map.\r\n */\r\nprivate Map<Integer, Integer> getTypeIndexesPerLevel() {\r\n    if (this.typeIndexesPerLevel == null) {\r\n        this.typeIndexesPerLevel = new HashMap<>(4);\r\n    }\r\n    return this.typeIndexesPerLevel;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getTypeIndexesPerLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#nested()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a variant of this {@code MethodParameter} which points to the\r\n * same parameter but one nesting level deeper.\r\n * @since 4.3\r\n */\r\npublic MethodParameter nested() {\r\n    return nested(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#nested()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#nested(Integer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a variant of this {@code MethodParameter} which points to the\r\n * same parameter but one nesting level deeper.\r\n * @param typeIndex the type index for the new nesting level\r\n * @since 5.2\r\n */\r\npublic MethodParameter nested(@Nullable Integer typeIndex) {\r\n    MethodParameter nestedParam = this.nestedMethodParameter;\r\n    if (nestedParam != null && typeIndex == null) {\r\n        return nestedParam;\r\n    }\r\n    nestedParam = nested(this.nestingLevel + 1, typeIndex);\r\n    if (typeIndex == null) {\r\n        this.nestedMethodParameter = nestedParam;\r\n    }\r\n    return nestedParam;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#nested(Integer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#nested(int,Integer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodParameter nested(int nestingLevel, @Nullable Integer typeIndex) {\r\n    MethodParameter copy = clone();\r\n    copy.nestingLevel = nestingLevel;\r\n    if (this.typeIndexesPerLevel != null) {\r\n        copy.typeIndexesPerLevel = new HashMap<>(this.typeIndexesPerLevel);\r\n    }\r\n    if (typeIndex != null) {\r\n        copy.getTypeIndexesPerLevel().put(copy.nestingLevel, typeIndex);\r\n    }\r\n    copy.parameterType = null;\r\n    copy.genericParameterType = null;\r\n    return copy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#nested(int,Integer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#isOptional()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this method indicates a parameter which is not required:\r\n * either in the form of Java 8's {@link java.util.Optional}, JSpecify annotations,\r\n * any variant of a parameter-level {@code @Nullable} annotation (such as from Spring,\r\n * JSR-305 or Jakarta set of annotations), a language-level nullable type\r\n * declaration or {@code Continuation} parameter in Kotlin.\r\n * @since 4.3\r\n * @see Nullness#forMethodParameter(MethodParameter)\r\n */\r\npublic boolean isOptional() {\r\n    return (getParameterType() == Optional.class || Nullness.forMethodParameter(this) == Nullness.NULLABLE || (KotlinDetector.isKotlinType(getContainingClass()) && KotlinDelegate.isOptional(this)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#isOptional()",
    "tailType": "method"
  }
]