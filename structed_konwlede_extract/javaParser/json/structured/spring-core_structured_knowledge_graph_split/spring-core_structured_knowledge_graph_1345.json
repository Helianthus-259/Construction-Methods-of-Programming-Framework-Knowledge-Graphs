[
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#values()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Collection<V> values() {\r\n    Collection<V> values = this.values;\r\n    if (values == null) {\r\n        Collection<List<V>> targetValues = this.targetMap.values();\r\n        values = new AbstractCollection<>() {\r\n\r\n            @Override\r\n            public Iterator<V> iterator() {\r\n                Iterator<List<V>> targetIterator = targetValues.iterator();\r\n                return new Iterator<>() {\r\n\r\n                    @Override\r\n                    public boolean hasNext() {\r\n                        return targetIterator.hasNext();\r\n                    }\r\n\r\n                    @Override\r\n                    public V next() {\r\n                        return targetIterator.next().get(0);\r\n                    }\r\n                };\r\n            }\r\n\r\n            @Override\r\n            public int size() {\r\n                return targetValues.size();\r\n            }\r\n        };\r\n        this.values = values;\r\n    }\r\n    return values;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#values()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#values()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<Entry<K, V>> entrySet() {\r\n    Set<Entry<K, V>> entries = this.entries;\r\n    if (entries == null) {\r\n        Set<Entry<K, List<V>>> targetEntries = this.targetMap.entrySet();\r\n        entries = new AbstractSet<>() {\r\n\r\n            @Override\r\n            public Iterator<Entry<K, V>> iterator() {\r\n                Iterator<Entry<K, List<V>>> targetIterator = targetEntries.iterator();\r\n                return new Iterator<>() {\r\n\r\n                    @Override\r\n                    public boolean hasNext() {\r\n                        return targetIterator.hasNext();\r\n                    }\r\n\r\n                    @Override\r\n                    public Entry<K, V> next() {\r\n                        Entry<K, List<V>> entry = targetIterator.next();\r\n                        return new AbstractMap.SimpleImmutableEntry<>(entry.getKey(), entry.getValue().get(0));\r\n                    }\r\n                };\r\n            }\r\n\r\n            @Override\r\n            public int size() {\r\n                return targetEntries.size();\r\n            }\r\n        };\r\n        this.entries = entries;\r\n    }\r\n    return entries;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#forEach(BiConsumer<? super K,? super V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void forEach(BiConsumer<? super K, ? super V> action) {\r\n    this.targetMap.forEach((k, vs) -> action.accept(k, vs.get(0)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#forEach(BiConsumer<? super K,? super V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#forEach(BiConsumer<? super K,? super V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(List<V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate V adaptValue(@Nullable List<V> values) {\r\n    if (!CollectionUtils.isEmpty(values)) {\r\n        return values.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(List<V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(List<V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate List<V> adaptValue(@Nullable V value) {\r\n    if (value != null) {\r\n        return Collections.singletonList(value);\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#adaptValue(V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other instanceof Map<?, ?> otherMap && size() == otherMap.size()) {\r\n        try {\r\n            for (Entry<K, V> e : entrySet()) {\r\n                K key = e.getKey();\r\n                V value = e.getValue();\r\n                if (value == null) {\r\n                    if (otherMap.get(key) != null || !otherMap.containsKey(key)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (!value.equals(otherMap.get(key))) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        } catch (ClassCastException | NullPointerException ignored) {\r\n            // fall through\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapter#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapter#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.targetMap.hashCode();\r\n}",
    "tailType": "method_code"
  }
]