[
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithConstructorAndSameConstructorAppliesExecutableModePrecedence()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#assertConstructorHint(Builder,Consumer<ExecutableHint>)",
    "headType": "method",
    "relation": "provide",
    "tail": "void assertConstructorHint(Builder builder, Consumer<ExecutableHint> constructorHint) {\r\n    TypeHint hint = builder.build();\r\n    assertThat(hint.fields()).isEmpty();\r\n    assertThat(hint.constructors()).singleElement().satisfies(constructorHint);\r\n    assertThat(hint.methods()).isEmpty();\r\n    assertThat(hint.getMemberCategories()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#assertConstructorHint(Builder,Consumer<ExecutableHint>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithMethod() {\r\n    List<TypeReference> parameterTypes = List.of(TypeReference.of(char[].class));\r\n    assertMethodHint(TypeHint.of(TypeReference.of(String.class)).withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT), methodHint -> {\r\n        assertThat(methodHint.getName()).isEqualTo(\"valueOf\");\r\n        assertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\r\n        assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithMethodWithSameMethodUpdatesEntry() {\r\n    List<TypeReference> parameterTypes = TypeReference.listOf(char[].class);\r\n    Builder builder = TypeHint.of(TypeReference.of(String.class)).withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT);\r\n    assertMethodHint(builder.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INVOKE), methodHint -> {\r\n        assertThat(methodHint.getName()).isEqualTo(\"valueOf\");\r\n        assertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\r\n        assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodWithSameMethodUpdatesEntry()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithMethodAndSameMethodAppliesExecutableModePrecedence() {\r\n    List<TypeReference> parameterTypes = TypeReference.listOf(char[].class);\r\n    Builder builder = TypeHint.of(TypeReference.of(String.class)).withMethod(\"valueOf\", parameterTypes, ExecutableMode.INVOKE);\r\n    assertMethodHint(builder.withMethod(\"valueOf\", parameterTypes, ExecutableMode.INTROSPECT), methodHint -> {\r\n        assertThat(methodHint.getName()).isEqualTo(\"valueOf\");\r\n        assertThat(methodHint.getParameterTypes()).containsExactlyElementsOf(parameterTypes);\r\n        assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMethodAndSameMethodAppliesExecutableModePrecedence()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
    "headType": "method",
    "relation": "provide",
    "tail": "void assertMethodHint(Builder builder, Consumer<ExecutableHint> methodHint) {\r\n    TypeHint hint = builder.build();\r\n    assertThat(hint.fields()).isEmpty();\r\n    assertThat(hint.constructors()).isEmpty();\r\n    assertThat(hint.methods()).singleElement().satisfies(methodHint);\r\n    assertThat(hint.getMemberCategories()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#assertMethodHint(Builder,Consumer<ExecutableHint>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithMemberCategory() {\r\n    TypeHint hint = TypeHint.of(TypeReference.of(String.class)).withMembers(MemberCategory.DECLARED_FIELDS).build();\r\n    assertThat(hint.getMemberCategories()).containsOnly(MemberCategory.DECLARED_FIELDS);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#createWithMemberCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests#typeHintHasAppropriateToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHintHasAppropriateToString() {\r\n    TypeHint hint = TypeHint.of(TypeReference.of(String.class)).build();\r\n    assertThat(hint).hasToString(\"TypeHint[type=java.lang.String]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeHintTests#typeHintHasAppropriateToString()",
    "tailType": "method"
  }
]