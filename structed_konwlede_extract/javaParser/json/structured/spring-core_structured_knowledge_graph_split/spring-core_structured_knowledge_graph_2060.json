[
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#fromAdaptsFunction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fromAdaptsFunction() {\r\n    ArgumentResolver resolver = ArgumentResolver.from(type -> CharSequence.class.equals(type) ? \"test\" : null);\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n    assertThat(resolver.resolve(String.class)).isNull();\r\n    assertThat(resolver.resolve(Integer.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#fromAdaptsFunction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#fromAdaptsFunction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueReturnsComposite()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andValueReturnsComposite() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(Integer.class, 123);\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n    assertThat(resolver.resolve(String.class)).isNull();\r\n    assertThat(resolver.resolve(Integer.class)).isEqualTo(123);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#andValueReturnsComposite()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueReturnsComposite()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueWhenSameTypeReturnsCompositeResolvingFirst()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andValueWhenSameTypeReturnsCompositeResolvingFirst() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(CharSequence.class, \"ignore\");\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#andValueWhenSameTypeReturnsCompositeResolvingFirst()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueWhenSameTypeReturnsCompositeResolvingFirst()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierReturnsComposite()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andValueSupplierReturnsComposite() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").andSupplied(Integer.class, () -> 123);\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n    assertThat(resolver.resolve(String.class)).isNull();\r\n    assertThat(resolver.resolve(Integer.class)).isEqualTo(123);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierReturnsComposite()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierReturnsComposite()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierWhenSameTypeReturnsCompositeResolvingFirst()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andValueSupplierWhenSameTypeReturnsCompositeResolvingFirst() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").andSupplied(CharSequence.class, () -> \"ignore\");\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierWhenSameTypeReturnsCompositeResolvingFirst()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andValueSupplierWhenSameTypeReturnsCompositeResolvingFirst()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andResolverReturnsComposite()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andResolverReturnsComposite() {\r\n    ArgumentResolver resolver = ArgumentResolver.of(CharSequence.class, \"test\").and(Integer.class, 123);\r\n    resolver = resolver.and(ArgumentResolver.of(CharSequence.class, \"ignore\").and(Long.class, 234L));\r\n    assertThat(resolver.resolve(CharSequence.class)).isEqualTo(\"test\");\r\n    assertThat(resolver.resolve(String.class)).isNull();\r\n    assertThat(resolver.resolve(Integer.class)).isEqualTo(123);\r\n    assertThat(resolver.resolve(Long.class)).isEqualTo(234L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ArgumentResolverTests#andResolverReturnsComposite()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ArgumentResolverTests#andResolverReturnsComposite()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.FactoryInstantiatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.FactoryInstantiatorTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  }
]