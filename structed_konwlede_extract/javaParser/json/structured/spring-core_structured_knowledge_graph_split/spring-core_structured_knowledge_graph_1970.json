[
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#optionNamesSetIsUnmodifiable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid optionNamesSetIsUnmodifiable() {\r\n    CommandLineArgs args = new SimpleCommandLineArgsParser().parse();\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> args.getOptionNames().add(\"bogus\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLineArgsParserTests#optionNamesSetIsUnmodifiable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#optionNamesSetIsUnmodifiable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#nonOptionArgsListIsUnmodifiable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nonOptionArgsListIsUnmodifiable() {\r\n    CommandLineArgs args = new SimpleCommandLineArgsParser().parse();\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> args.getNonOptionArgs().add(\"foo\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLineArgsParserTests#nonOptionArgsListIsUnmodifiable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#nonOptionArgsListIsUnmodifiable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#supportsEndOfOptionsDelimiter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid supportsEndOfOptionsDelimiter() {\r\n    CommandLineArgs args = parser.parse(\"--o1=v1\", \"--\", \"--o2=v2\");\r\n    assertThat(args.containsOption(\"o1\")).isTrue();\r\n    assertThat(args.containsOption(\"o2\")).isFalse();\r\n    assertThat(args.getOptionValues(\"o1\")).containsExactly(\"v1\");\r\n    assertThat(args.getNonOptionArgs()).contains(\"--o2=v2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLineArgsParserTests#supportsEndOfOptionsDelimiter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLineArgsParserTests#supportsEndOfOptionsDelimiter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SimpleCommandLinePropertySource}.\n *\n * @author Chris Beams\n * @author Sam Brannen\n * @since 3.1\n */\nclass SimpleCommandLinePropertySourceTests {\n\n\t@Test\n\tvoid withDefaultName() {\n\t\tPropertySource<?> ps = new SimpleCommandLinePropertySource();\n\t\tassertThat(ps.getName()).isEqualTo(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME);\n\t}\n\n\t@Test\n\tvoid withCustomName() {\n\t\tPropertySource<?> ps = new SimpleCommandLinePropertySource(\"ps1\", new String[0]);\n\t\tassertThat(ps.getName()).isEqualTo(\"ps1\");\n\t}\n\n\t@Test\n\tvoid withNoArgs() {\n\t\tPropertySource<?> ps = new SimpleCommandLinePropertySource();\n\t\tassertThat(ps.containsProperty(\"foo\")).isFalse();\n\t\tassertThat(ps.getProperty(\"foo\")).isNull();\n\t}\n\n\t@Test\n\tvoid withOptionArgsOnly() {\n\t\tCommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o2\");\n\t\tassertThat(ps.containsProperty(\"o1\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o2\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o3\")).isFalse();\n\t\tassertThat(ps.getProperty(\"o1\")).isEqualTo(\"v1\");\n\t\tassertThat(ps.getProperty(\"o2\")).isEmpty();\n\t\tassertThat(ps.getProperty(\"o3\")).isNull();\n\t}\n\n\t@Test  // gh-34282\n\tvoid withRepeatedOptionArgs() {\n\t\tCommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o1=v2\", \"--o1=v3\");\n\t\tassertThat(ps.containsProperty(\"o1\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o2\")).isFalse();\n\t\tassertThat(ps.getProperty(\"o1\")).isEqualTo(\"v1,v2,v3\");\n\t\tassertThat(ps.getProperty(\"o2\")).isNull();\n\t}\n\n\t@Test // gh-24464\n\tvoid withOptionalArg_andArgIsEmpty() {\n\t\tEnumerablePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--foo=\");\n\n\t\tassertThat(ps.containsProperty(\"foo\")).isTrue();\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\n\t}\n\n\t@Test\n\tvoid withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent() {\n\t\tEnumerablePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o2\");\n\n\t\tassertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\n\t\tassertThat(ps.containsProperty(\"o1\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o2\")).isTrue();\n\n\t\tassertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\n\t\tassertThat(ps.getProperty(\"nonOptionArgs\")).isNull();\n\t\tassertThat(ps.getPropertyNames()).hasSize(2);\n\t}\n\n\t@Test\n\tvoid withDefaultNonOptionArgsNameAndNonOptionArgsPresent() {\n\t\tCommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\n\n\t\tassertThat(ps.containsProperty(\"nonOptionArgs\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o1\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o2\")).isTrue();\n\n\t\tString nonOptionArgs = ps.getProperty(\"nonOptionArgs\");\n\t\tassertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\n\t}\n\n\t@Test\n\tvoid withCustomNonOptionArgsNameAndNoNonOptionArgsPresent() {\n\t\tCommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\n\t\tps.setNonOptionArgsPropertyName(\"NOA\");\n\n\t\tassertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\n\t\tassertThat(ps.containsProperty(\"NOA\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o1\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"o2\")).isTrue();\n\t\tString nonOptionArgs = ps.getProperty(\"NOA\");\n\t\tassertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\n\t}\n\n\t@Test\n\tvoid covertNonOptionArgsToStringArrayAndList() {\n\t\tCommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\n\t\tStandardEnvironment env = new StandardEnvironment();\n\t\tenv.getPropertySources().addFirst(ps);\n\n\t\tString nonOptionArgs = env.getProperty(\"nonOptionArgs\");\n\t\tassertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\n\n\t\tString[] nonOptionArgsArray = env.getProperty(\"nonOptionArgs\", String[].class);\n\t\tassertThat(nonOptionArgsArray[0]).isEqualTo(\"noa1\");\n\t\tassertThat(nonOptionArgsArray[1]).isEqualTo(\"noa2\");\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<String> nonOptionArgsList = env.getProperty(\"nonOptionArgs\", List.class);\n\t\tassertThat(nonOptionArgsList).containsExactly(\"noa1\", \"noa2\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDefaultName() {\r\n    PropertySource<?> ps = new SimpleCommandLinePropertySource();\r\n    assertThat(ps.getName()).isEqualTo(CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withCustomName() {\r\n    PropertySource<?> ps = new SimpleCommandLinePropertySource(\"ps1\", new String[0]);\r\n    assertThat(ps.getName()).isEqualTo(\"ps1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withNoArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNoArgs() {\r\n    PropertySource<?> ps = new SimpleCommandLinePropertySource();\r\n    assertThat(ps.containsProperty(\"foo\")).isFalse();\r\n    assertThat(ps.getProperty(\"foo\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withNoArgs()",
    "tailType": "method"
  }
]