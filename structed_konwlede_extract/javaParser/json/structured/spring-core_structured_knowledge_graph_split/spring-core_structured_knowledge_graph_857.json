[
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConvertingComparator#converter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator#converter",
    "headType": "field",
    "relation": "haveType",
    "tail": "Converter<S, T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator#compare(S,S)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(S o1, S o2) {\r\n    T c1 = this.converter.convert(o1);\r\n    T c2 = this.converter.convert(o2);\r\n    return this.comparator.compare(c1, c2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertingComparator#compare(S,S)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator#compare(S,S)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator#mapEntryKeys(Comparator<K>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link ConvertingComparator} that compares {@linkplain java.util.Map.Entry\r\n * map entries} based on their {@linkplain java.util.Map.Entry#getKey() keys}.\r\n * @param comparator the underlying comparator used to compare keys\r\n * @return a new {@link ConvertingComparator} instance\r\n */\r\npublic static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {\r\n    return new ConvertingComparator<>(comparator, Map.Entry::getKey);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertingComparator#mapEntryKeys(Comparator<K>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator#mapEntryValues(Comparator<V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link ConvertingComparator} that compares {@linkplain java.util.Map.Entry\r\n * map entries} based on their {@linkplain java.util.Map.Entry#getValue() values}.\r\n * @param comparator the underlying comparator used to compare values\r\n * @return a new {@link ConvertingComparator} instance\r\n */\r\npublic static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {\r\n    return new ConvertingComparator<>(comparator, Map.Entry::getValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertingComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertingComparator#mapEntryValues(Comparator<V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConversionServiceConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.util.Assert;\nimport org.springframework.util.comparator.Comparators;\n\n/**\n * A {@link Comparator} that converts values before they are compared.\n *\n * <p>The specified {@link Converter} will be used to convert each value\n * before it is passed to the underlying {@code Comparator}.\n *\n * @author Phillip Webb\n * @since 3.2\n * @param <S> the source type\n * @param <T> the target type\n */\npublic class ConvertingComparator<S, T> implements Comparator<S> {\n\n\tprivate final Comparator<T> comparator;\n\n\tprivate final Converter<S, T> converter;\n\n\n\t/**\n\t * Create a new {@link ConvertingComparator} instance.\n\t * @param converter the converter\n\t */\n\tpublic ConvertingComparator(Converter<S, T> converter) {\n\t\tthis(Comparators.comparable(), converter);\n\t}\n\n\t/**\n\t * Create a new {@link ConvertingComparator} instance.\n\t * @param comparator the underlying comparator used to compare the converted values\n\t * @param converter the converter\n\t */\n\tpublic ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {\n\t\tAssert.notNull(comparator, \"Comparator must not be null\");\n\t\tAssert.notNull(converter, \"Converter must not be null\");\n\t\tthis.comparator = comparator;\n\t\tthis.converter = converter;\n\t}\n\n\t/**\n\t * Create a new {@code ConvertingComparator} instance.\n\t * @param comparator the underlying comparator\n\t * @param conversionService the conversion service\n\t * @param targetType the target type\n\t */\n\tpublic ConvertingComparator(\n\t\t\tComparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {\n\n\t\tthis(comparator, new ConversionServiceConverter<>(conversionService, targetType));\n\t}\n\n\n\t@Override\n\tpublic int compare(S o1, S o2) {\n\t\tT c1 = this.converter.convert(o1);\n\t\tT c2 = this.converter.convert(o2);\n\t\treturn this.comparator.compare(c1, c2);\n\t}\n\n\t/**\n\t * Create a new {@link ConvertingComparator} that compares {@linkplain java.util.Map.Entry\n\t * map entries} based on their {@linkplain java.util.Map.Entry#getKey() keys}.\n\t * @param comparator the underlying comparator used to compare keys\n\t * @return a new {@link ConvertingComparator} instance\n\t */\n\tpublic static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {\n\t\treturn new ConvertingComparator<>(comparator, Map.Entry::getKey);\n\t}\n\n\t/**\n\t * Create a new {@link ConvertingComparator} that compares {@linkplain java.util.Map.Entry\n\t * map entries} based on their {@linkplain java.util.Map.Entry#getValue() values}.\n\t * @param comparator the underlying comparator used to compare values\n\t * @return a new {@link ConvertingComparator} instance\n\t */\n\tpublic static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {\n\t\treturn new ConvertingComparator<>(comparator, Map.Entry::getValue);\n\t}\n\n\n\t/**\n\t * Adapts a {@link ConversionService} and {@code targetType} to a {@link Converter}.\n\t */\n\tprivate static class ConversionServiceConverter<S, T> implements Converter<S, T> {\n\n\t\tprivate final ConversionService conversionService;\n\n\t\tprivate final Class<? extends T> targetType;\n\n\t\tpublic ConversionServiceConverter(ConversionService conversionService, Class<? extends T> targetType) {\n\t\t\tAssert.notNull(conversionService, \"ConversionService must not be null\");\n\t\t\tAssert.notNull(targetType, \"'targetType' must not be null\");\n\t\t\tthis.conversionService = conversionService;\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable T convert(S source) {\n\t\t\treturn this.conversionService.convert(source, this.targetType);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConversionServiceConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConversionServiceConverter#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<? extends T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter#convert(S)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic T convert(S source) {\r\n    return this.conversionService.convert(source, this.targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConversionServiceConverter#convert(S)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter#convert(S)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConversionServiceConverter#convert(S)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  }
]