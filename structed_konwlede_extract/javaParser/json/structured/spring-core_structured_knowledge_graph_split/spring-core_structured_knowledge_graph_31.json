[
  {
    "head": "org.springframework.util.DelimitedStringState#elementMaxSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DelimitedStringState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DelimitedStringState#elementCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DelimitedStringState#elementCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DelimitedStringState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DelimitedStringState#elements",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DelimitedStringState#elements",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\nimport java.lang.reflect.Method;\nimport java.nio.charset.Charset;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SimpleValueStyler}.\n *\n * @author Sam Brannen\n * @since 6.0\n */\nclass SimpleValueStylerTests {\n\n\t@Nested\n\tclass CommonStyling {\n\n\t\tprivate final SimpleValueStyler styler = new SimpleValueStyler();\n\n\t\t@Test\n\t\tvoid styleBasics() {\n\t\t\tassertThat(styler.style(null)).isEqualTo(\"null\");\n\t\t\tassertThat(styler.style(true)).isEqualTo(\"true\");\n\t\t\tassertThat(styler.style(99.9)).isEqualTo(\"99.9\");\n\t\t\tassertThat(styler.style(\"str\")).isEqualTo(\"\\\"str\\\"\");\n\t\t}\n\n\t\t@Test\n\t\tvoid stylePlainObject() {\n\t\t\tObject obj = new Object();\n\n\t\t\tassertThat(styler.style(obj)).isEqualTo(String.valueOf(obj));\n\t\t}\n\n\t\t@Test\n\t\tvoid styleMaps() {\n\t\t\tassertThat(styler.style(Map.of())).isEqualTo(\"{}\");\n\t\t\tassertThat(styler.style(Map.of(\"key\", 1))).isEqualTo(\"{\\\"key\\\" -> 1}\");\n\n\t\t\tMap<String, Integer> map = new LinkedHashMap<>() {{\n\t\t\t\tput(\"key1\", 1);\n\t\t\t\tput(\"key2\", 2);\n\t\t\t}};\n\t\t\tassertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> 1, \\\"key2\\\" -> 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleMapEntries() {\n\t\t\tMap<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2);\n\n\t\t\tassertThat(map.entrySet()).map(styler::style).containsExactlyInAnyOrder(\"\\\"key1\\\" -> 1\", \"\\\"key2\\\" -> 2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleLists() {\n\t\t\tassertThat(styler.style(List.of())).isEqualTo(\"[]\");\n\t\t\tassertThat(styler.style(List.of(1))).isEqualTo(\"[1]\");\n\t\t\tassertThat(styler.style(List.of(1, 2))).isEqualTo(\"[1, 2]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid stylePrimitiveArrays() {\n\t\t\tint[] array = new int[0];\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[]\");\n\n\t\t\tarray = new int[] { 1 };\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[1]\");\n\n\t\t\tarray = new int[] { 1, 2 };\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[1, 2]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleObjectArrays() {\n\t\t\tString[] array = new String[0];\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[]\");\n\n\t\t\tarray = new String[] { \"str1\" };\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\"]\");\n\n\t\t\tarray = new String[] { \"str1\", \"str2\" };\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[\\\"str1\\\", \\\"str2\\\"]\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass DefaultClassAndMethodStylers {\n\n\t\tprivate final SimpleValueStyler styler = new SimpleValueStyler();\n\n\t\t@Test\n\t\tvoid styleClass() {\n\t\t\tassertThat(styler.style(String.class)).isEqualTo(\"java.lang.String\");\n\t\t\tassertThat(styler.style(getClass())).isEqualTo(getClass().getCanonicalName());\n\t\t\tassertThat(styler.style(String[].class)).isEqualTo(\"java.lang.String[]\");\n\t\t\tassertThat(styler.style(int[][].class)).isEqualTo(\"int[][]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleMethod() throws NoSuchMethodException {\n\t\t\tassertThat(styler.style(String.class.getMethod(\"toString\"))).isEqualTo(\"toString()\");\n\t\t\tassertThat(styler.style(String.class.getMethod(\"getBytes\", Charset.class))).isEqualTo(\"getBytes(Charset)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleClassMap() {\n\t\t\tMap<String, Class<?>> map = new LinkedHashMap<>() {{\n\t\t\t\tput(\"key1\", Integer.class);\n\t\t\t\tput(\"key2\", DefaultClassAndMethodStylers.class);\n\t\t\t}};\n\t\t\tassertThat(styler.style(map)).isEqualTo(\n\t\t\t\t\t\"{\\\"key1\\\" -> java.lang.Integer, \\\"key2\\\" -> %s}\",\n\t\t\t\t\tDefaultClassAndMethodStylers.class.getCanonicalName());\n\t\t}\n\n\t\t@Test\n\t\tvoid styleClassList() {\n\t\t\tassertThat(styler.style(List.of(Integer.class, String.class)))\n\t\t\t\t\t.isEqualTo(\"[java.lang.Integer, java.lang.String]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleClassArray() {\n\t\t\tClass<?>[] array = new Class<?>[] { Integer.class, getClass() };\n\t\t\tassertThat(styler.style(array))\n\t\t\t\t\t.isEqualTo(\"[%s, %s]\", Integer.class.getCanonicalName(), getClass().getCanonicalName());\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass CustomClassAndMethodStylers {\n\n\t\tprivate final SimpleValueStyler styler = new SimpleValueStyler(Class::getSimpleName, Method::toGenericString);\n\n\t\t@Test\n\t\tvoid styleClass() {\n\t\t\tassertThat(styler.style(String.class)).isEqualTo(\"String\");\n\t\t\tassertThat(styler.style(getClass())).isEqualTo(getClass().getSimpleName());\n\t\t\tassertThat(styler.style(String[].class)).isEqualTo(\"String[]\");\n\t\t\tassertThat(styler.style(int[][].class)).isEqualTo(\"int[][]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleMethod() throws NoSuchMethodException {\n\t\t\tMethod method = String.class.getMethod(\"toString\");\n\t\t\tassertThat(styler.style(method)).isEqualTo(method.toGenericString());\n\t\t}\n\n\t\t@Test\n\t\tvoid styleClassMap() {\n\t\t\tMap<String, Class<?>> map = new LinkedHashMap<>() {{\n\t\t\t\tput(\"key1\", Integer.class);\n\t\t\t\tput(\"key2\", CustomClassAndMethodStylers.class);\n\t\t\t}};\n\t\t\tassertThat(styler.style(map)).isEqualTo(\n\t\t\t\t\t\"{\\\"key1\\\" -> %s, \\\"key2\\\" -> %s}\",\n\t\t\t\t\tInteger.class.getSimpleName(), CustomClassAndMethodStylers.class.getSimpleName());\n\t\t}\n\t\t@Test\n\t\tvoid styleClassList() {\n\t\t\tassertThat(styler.style(List.of(Integer.class, String.class))).isEqualTo(\"[Integer, String]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid styleClassArray() {\n\t\t\tClass<?>[] array = new Class<?>[] { Integer.class, getClass() };\n\t\t\tassertThat(styler.style(array)).isEqualTo(\"[%s, %s]\", Integer.class.getSimpleName(), getClass().getSimpleName());\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DelimitedStringState#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Iteration)\r\npublic void setup() {\r\n    Random random = new Random();\r\n    this.elements = new ArrayList<>(this.elementCount);\r\n    int bound = this.elementMaxSize - this.elementMinSize;\r\n    for (int i = 0; i < this.elementCount; i++) {\r\n        this.elements.add(String.format(\"%0\" + (random.nextInt(bound) + this.elementMinSize) + \"d\", 1));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DelimitedStringState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DelimitedStringState#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DelimitedStringState#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CleanPathState",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.style.CommonStyling#styler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styler",
    "headType": "field",
    "relation": "haveType",
    "tail": "SimpleValueStyler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleBasics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleBasics() {\r\n    assertThat(styler.style(null)).isEqualTo(\"null\");\r\n    assertThat(styler.style(true)).isEqualTo(\"true\");\r\n    assertThat(styler.style(99.9)).isEqualTo(\"99.9\");\r\n    assertThat(styler.style(\"str\")).isEqualTo(\"\\\"str\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CommonStyling#styleBasics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleBasics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#stylePlainObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stylePlainObject() {\r\n    Object obj = new Object();\r\n    assertThat(styler.style(obj)).isEqualTo(String.valueOf(obj));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CommonStyling#stylePlainObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#stylePlainObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\n/**\n * Benchmarks for {@link StringUtils}.\n *\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class StringUtilsBenchmark {\n\n\t@Benchmark\n\tpublic void collectionToDelimitedString(DelimitedStringState state, Blackhole bh) {\n\t\tbh.consume(StringUtils.collectionToCommaDelimitedString(state.elements));\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class DelimitedStringState {\n\n\t\t@Param(\"10\")\n\t\tint elementMinSize;\n\n\t\t@Param(\"20\")\n\t\tint elementMaxSize;\n\n\t\t@Param(\"10\")\n\t\tint elementCount;\n\n\t\tCollection<String> elements;\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tRandom random = new Random();\n\t\t\tthis.elements = new ArrayList<>(this.elementCount);\n\t\t\tint bound = this.elementMaxSize - this.elementMinSize;\n\t\t\tfor (int i = 0; i < this.elementCount; i++) {\n\t\t\t\tthis.elements.add(String.format(\"%0\" + (random.nextInt(bound) + this.elementMinSize) + \"d\", 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void cleanPath(CleanPathState state, Blackhole bh) {\n\t\tfor (String path : state.paths) {\n\t\t\tbh.consume(StringUtils.cleanPath(path));\n\t\t}\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class CleanPathState {\n\n\t\tprivate static final List<String> SEGMENTS = Arrays.asList(\"some\", \"path\", \".\", \"..\", \"springspring\");\n\n\t\t@Param(\"10\")\n\t\tint segmentCount;\n\n\t\t@Param(\"20\")\n\t\tint pathsCount;\n\n\t\tCollection<String> paths;\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tthis.paths = new ArrayList<>(this.pathsCount);\n\t\t\tRandom random = new Random();\n\t\t\tfor (int i = 0; i < this.pathsCount; i++) {\n\t\t\t\tthis.paths.add(createSamplePath(random));\n\t\t\t}\n\t\t}\n\n\t\tprivate String createSamplePath(Random random) {\n\t\t\tString separator = (random.nextBoolean() ? \"/\" : \"\\\\\");\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"jar:file:///c:\");\n\t\t\tfor (int i = 0; i < this.segmentCount; i++) {\n\t\t\t\tsb.append(separator);\n\t\t\t\tsb.append(SEGMENTS.get(random.nextInt(SEGMENTS.size())));\n\t\t\t}\n\t\t\tsb.append(separator);\n\t\t\tsb.append(\"the%20file.txt\");\n\t\t\treturn sb.toString();\n\t\t}\n\n\t}\n}\n",
    "tailType": "class_code"
  }
]