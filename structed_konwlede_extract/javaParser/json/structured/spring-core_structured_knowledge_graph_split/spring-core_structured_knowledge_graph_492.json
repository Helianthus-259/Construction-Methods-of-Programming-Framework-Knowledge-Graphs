[
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#byteBuffer(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "protected DataBuffer byteBuffer(byte[] value) {\r\n    DataBuffer buffer = this.bufferFactory.allocateBuffer(value.length);\r\n    buffer.write(value);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#byteBuffer(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#release(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void release(DataBuffer... buffers) {\r\n    Arrays.stream(buffers).forEach(DataBufferUtils::release);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#release(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringConsumer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Consumer<DataBuffer> stringConsumer(String expected) {\r\n    return stringConsumer(expected, UTF_8);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringConsumer(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringConsumer(String,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Consumer<DataBuffer> stringConsumer(String expected, Charset charset) {\r\n    return dataBuffer -> {\r\n        String value = dataBuffer.toString(charset);\r\n        DataBufferUtils.release(dataBuffer);\r\n        assertThat(value).isEqualTo(expected);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#stringConsumer(String,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#waitForDataBufferRelease(Duration)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Wait until allocations are at 0, or the given duration elapses.\r\n */\r\nprivate void waitForDataBufferRelease(Duration duration) throws InterruptedException {\r\n    Instant start = Instant.now();\r\n    while (true) {\r\n        try {\r\n            verifyAllocations();\r\n            break;\r\n        } catch (AssertionError ex) {\r\n            if (Instant.now().isAfter(start.plus(duration))) {\r\n                throw ex;\r\n            }\r\n        }\r\n        Thread.sleep(50);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#waitForDataBufferRelease(Duration)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#verifyAllocations()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void verifyAllocations() {\r\n    if (this.bufferFactory instanceof NettyDataBufferFactory) {\r\n        ByteBufAllocator allocator = ((NettyDataBufferFactory) this.bufferFactory).getByteBufAllocator();\r\n        if (allocator instanceof PooledByteBufAllocator) {\r\n            Instant start = Instant.now();\r\n            while (true) {\r\n                PooledByteBufAllocatorMetric metric = ((PooledByteBufAllocator) allocator).metric();\r\n                long total = getAllocations(metric.directArenas()) + getAllocations(metric.heapArenas());\r\n                if (total == 0) {\r\n                    return;\r\n                }\r\n                if (Instant.now().isBefore(start.plus(Duration.ofSeconds(5)))) {\r\n                    try {\r\n                        Thread.sleep(50);\r\n                    } catch (InterruptedException ex) {\r\n                        // ignore\r\n                    }\r\n                    continue;\r\n                }\r\n                assertThat(total).as(\"ByteBuf Leak: \" + total + \" unreleased allocations\").isEqualTo(0);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#verifyAllocations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#getAllocations(List<PoolArenaMetric>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static long getAllocations(List<PoolArenaMetric> metrics) {\r\n    return metrics.stream().mapToLong(PoolArenaMetric::numActiveAllocations).sum();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#getAllocations(List<PoolArenaMetric>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createAllocators()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeAll\r\n// PooledByteBufAllocator no longer supports tinyCacheSize.\r\n@SuppressWarnings(\"deprecation\")\r\npublic static void createAllocators() {\r\n    netty4OnHeapUnpooled = new UnpooledByteBufAllocator(false);\r\n    netty4OffHeapUnpooled = new UnpooledByteBufAllocator(true);\r\n    netty4OnHeapPooled = new PooledByteBufAllocator(false, 1, 1, 4096, 4, 0, 0, 0, true);\r\n    netty4OffHeapPooled = new PooledByteBufAllocator(true, 1, 1, 4096, 4, 0, 0, 0, true);\r\n    netty5OnHeapUnpooled = BufferAllocator.onHeapUnpooled();\r\n    netty5OffHeapUnpooled = BufferAllocator.offHeapUnpooled();\r\n    netty5OnHeapPooled = BufferAllocator.onHeapPooled();\r\n    netty5OffHeapPooled = BufferAllocator.offHeapPooled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createAllocators()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createAllocators()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeAll",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#createAllocators()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#closeAllocators()",
    "headType": "method",
    "relation": "provide",
    "tail": "@AfterAll\r\nstatic void closeAllocators() {\r\n    netty5OnHeapUnpooled.close();\r\n    netty5OffHeapUnpooled.close();\r\n    netty5OnHeapPooled.close();\r\n    netty5OffHeapPooled.close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#closeAllocators()",
    "tailType": "method"
  }
]