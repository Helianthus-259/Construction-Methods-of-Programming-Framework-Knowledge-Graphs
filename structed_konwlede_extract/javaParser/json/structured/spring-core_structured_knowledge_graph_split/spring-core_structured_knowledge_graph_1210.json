[
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter#matchInterface(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter#matchInterface(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter#hasAnnotation(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprotected Boolean hasAnnotation(String typeName) {\r\n    if (Object.class.getName().equals(typeName)) {\r\n        return false;\r\n    } else if (typeName.startsWith(\"java\")) {\r\n        if (!this.annotationType.getName().startsWith(\"java\")) {\r\n            // Standard Java types do not have non-standard annotations on them ->\r\n            // skip any load attempt, in particular for Java language interfaces.\r\n            return false;\r\n        }\r\n        try {\r\n            Class<?> clazz = ClassUtils.forName(typeName, getClass().getClassLoader());\r\n            return ((this.considerMetaAnnotations ? AnnotationUtils.getAnnotation(clazz, this.annotationType) : clazz.getAnnotation(this.annotationType)) != null);\r\n        } catch (Throwable ex) {\r\n            // Class not regularly loadable - can't determine a match that way.\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AnnotationTypeFilter#hasAnnotation(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter#hasAnnotation(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.AnnotationTypeFilter",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractTypeHierarchyTraversingFilter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.filter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.AspectJTypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport java.io.IOException;\n\nimport org.aspectj.bridge.IMessageHandler;\nimport org.aspectj.weaver.ResolvedType;\nimport org.aspectj.weaver.World;\nimport org.aspectj.weaver.bcel.BcelWorld;\nimport org.aspectj.weaver.patterns.Bindings;\nimport org.aspectj.weaver.patterns.FormalBinding;\nimport org.aspectj.weaver.patterns.IScope;\nimport org.aspectj.weaver.patterns.PatternParser;\nimport org.aspectj.weaver.patterns.SimpleScope;\nimport org.aspectj.weaver.patterns.TypePattern;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\n\n/**\n * Type filter that uses AspectJ type pattern for matching.\n *\n * <p>A critical implementation details of this type filter is that it does not\n * load the class being examined to match with a type pattern.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @since 2.5\n */\npublic class AspectJTypeFilter implements TypeFilter {\n\n\tprivate final World world;\n\n\tprivate final TypePattern typePattern;\n\n\n\tpublic AspectJTypeFilter(String typePatternExpression, @Nullable ClassLoader classLoader) {\n\t\tthis.world = new BcelWorld(classLoader, IMessageHandler.THROW, null);\n\t\tthis.world.setBehaveInJava5Way(true);\n\t\tPatternParser patternParser = new PatternParser(typePatternExpression);\n\t\tTypePattern typePattern = patternParser.parseTypePattern();\n\t\ttypePattern.resolve(this.world);\n\t\tIScope scope = new SimpleScope(this.world, new FormalBinding[0]);\n\t\tthis.typePattern = typePattern.resolveBindings(scope, Bindings.NONE, false, false);\n\t}\n\n\n\t@Override\n\tpublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)\n\t\t\tthrows IOException {\n\n\t\tString className = metadataReader.getClassMetadata().getClassName();\n\t\tResolvedType resolvedType = this.world.resolve(className);\n\t\treturn this.typePattern.matchesStatically(resolvedType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AspectJTypeFilter#world",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter#world",
    "headType": "field",
    "relation": "haveType",
    "tail": "World",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AspectJTypeFilter#typePattern",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter#typePattern",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypePattern",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\r\n    String className = metadataReader.getClassMetadata().getClassName();\r\n    ResolvedType resolvedType = this.world.resolve(className);\r\n    return this.typePattern.matchesStatically(resolvedType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.AspectJTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.AspectJTypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.filter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.AssignableTypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.filter.AssignableTypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ClassUtils;\n\n/**\n * A simple filter which matches classes that are assignable to a given type.\n *\n * @author Rod Johnson\n * @author Mark Fisher\n * @author Ramnivas Laddad\n * @since 2.5\n */\npublic class AssignableTypeFilter extends AbstractTypeHierarchyTraversingFilter {\n\n\tprivate final Class<?> targetType;\n\n\n\t/**\n\t * Create a new AssignableTypeFilter for the given type.\n\t * @param targetType the type to match\n\t */\n\tpublic AssignableTypeFilter(Class<?> targetType) {\n\t\tsuper(true, true);\n\t\tthis.targetType = targetType;\n\t}\n\n\t/**\n\t * Return the {@code type} that this instance is using to filter candidates.\n\t * @since 5.0\n\t */\n\tpublic final Class<?> getTargetType() {\n\t\treturn this.targetType;\n\t}\n\n\t@Override\n\tprotected boolean matchClassName(String className) {\n\t\treturn this.targetType.getName().equals(className);\n\t}\n\n\t@Override\n\tprotected @Nullable Boolean matchSuperClass(String superClassName) {\n\t\treturn matchTargetType(superClassName);\n\t}\n\n\t@Override\n\tprotected @Nullable Boolean matchInterface(String interfaceName) {\n\t\treturn matchTargetType(interfaceName);\n\t}\n\n\tprotected @Nullable Boolean matchTargetType(String typeName) {\n\t\tif (this.targetType.getName().equals(typeName)) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (Object.class.getName().equals(typeName)) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (typeName.startsWith(\"java\")) {\n\t\t\ttry {\n\t\t\t\tClass<?> clazz = ClassUtils.forName(typeName, getClass().getClassLoader());\n\t\t\t\treturn this.targetType.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// Class not regularly loadable - can't determine a match that way.\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.AssignableTypeFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.AssignableTypeFilter#targetType",
    "tailType": "field"
  }
]