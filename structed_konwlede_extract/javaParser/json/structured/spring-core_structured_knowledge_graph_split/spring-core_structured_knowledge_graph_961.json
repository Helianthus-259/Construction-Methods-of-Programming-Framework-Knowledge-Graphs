[
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#mark",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#read()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read() throws IOException {\r\n    checkClosed();\r\n    if (available() == 0) {\r\n        return -1;\r\n    }\r\n    return this.dataBuffer.read() & 0xFF;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#read()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#read()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read(byte[] b, int off, int len) throws IOException {\r\n    checkClosed();\r\n    int available = available();\r\n    if (available == 0) {\r\n        return -1;\r\n    }\r\n    len = Math.min(available, len);\r\n    this.dataBuffer.read(b, off, len);\r\n    return len;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#read(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#markSupported()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean markSupported() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#markSupported()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#markSupported()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#mark(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void mark(int readLimit) {\r\n    Assert.isTrue(readLimit > 0, \"readLimit must be greater than 0\");\r\n    this.mark = this.dataBuffer.readPosition();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#mark(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#mark(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#available()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int available() {\r\n    return Math.max(0, this.end - this.dataBuffer.readPosition());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#available()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#available()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#reset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void reset() {\r\n    this.dataBuffer.readPosition(this.mark);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferInputStream#reset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#reset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferInputStream#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() {\r\n    if (this.closed) {\r\n        return;\r\n    }\r\n    if (this.releaseOnClose) {\r\n        DataBufferUtils.release(this.dataBuffer);\r\n    }\r\n    this.closed = true;\r\n}",
    "tailType": "method_code"
  }
]