[
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPackagePrivateConstructor() {\r\n    Member member = ProtectedAccessor.class.getDeclaredConstructors()[0];\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPackagePrivateClassWithPublicConstructor() {\r\n    Member member = PackagePrivateClass.class.getDeclaredConstructors()[0];\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPackagePrivateClassWithPublicMethod() {\r\n    Member member = method(PackagePrivateClass.class, \"stringBean\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPackagePrivateClassWithPublicMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateConstructorParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateConstructorParameter() {\r\n    Member member = ProtectedParameter.class.getConstructors()[0];\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateConstructorParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateConstructorParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter() {\r\n    Member member = ProtectedGenericParameter.class.getConstructors()[0];\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateMethod() {\r\n    Member member = method(PublicClass.class, \"getProtectedMethod\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMemberWhenPublicClassWithPackagePrivateMethodReturnType() {\r\n    Member member = method(ProtectedAccessor.class, \"methodWithProtectedReturnType\");\r\n    AccessControl accessControl = AccessControl.forMember(member);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forMemberWhenPublicClassWithPackagePrivateMethodReturnType()",
    "tailType": "method"
  }
]