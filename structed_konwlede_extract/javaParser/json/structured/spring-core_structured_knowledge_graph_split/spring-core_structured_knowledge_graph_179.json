[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#c1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#c1",
    "headType": "field",
    "relation": "haveType",
    "tail": "C1",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#c2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#c2",
    "headType": "field",
    "relation": "haveType",
    "tail": "C2",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#c3",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#c3",
    "headType": "field",
    "relation": "haveType",
    "tail": "C3",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#c4",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#c4",
    "headType": "field",
    "relation": "haveType",
    "tail": "C4",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareClasses() {\r\n    Comparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\r\n    assertThat(comparator.compare(c1, c1)).isEqualTo(0);\r\n    assertThat(comparator.compare(c1, c2)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c2, c1)).isEqualTo(1);\r\n    assertThat(comparator.compare(c2, c3)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c2, c4)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c3, c4)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareInterfaces() {\r\n    Comparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\r\n    assertThat(comparator.compare(c1, c1)).isEqualTo(0);\r\n    assertThat(comparator.compare(c1, c2)).isEqualTo(0);\r\n    assertThat(comparator.compare(c2, c1)).isEqualTo(0);\r\n    assertThat(comparator.compare(c1, c3)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c3, c1)).isEqualTo(1);\r\n    assertThat(comparator.compare(c3, c4)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareMix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCompareMix() {\r\n    Comparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\r\n    assertThat(comparator.compare(c1, c1)).isEqualTo(0);\r\n    assertThat(comparator.compare(c3, c4)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c3, null)).isEqualTo(-1);\r\n    assertThat(comparator.compare(c4, null)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareMix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparatorTests#shouldCompareMix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]