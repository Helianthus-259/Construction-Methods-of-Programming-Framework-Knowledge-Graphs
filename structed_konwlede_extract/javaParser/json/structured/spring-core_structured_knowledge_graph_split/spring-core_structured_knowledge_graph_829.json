[
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder#decodeDataBuffer(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractDataBufferDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.AbstractDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.MimeType;\n\n/**\n * Abstract base class for {@link Decoder} implementations.\n *\n * @author Sebastien Deleuze\n * @author Arjen Poutsma\n * @since 5.0\n * @param <T> the element type\n */\npublic abstract class AbstractDecoder<T> implements Decoder<T> {\n\n\tprivate final List<MimeType> decodableMimeTypes;\n\n\tprotected Log logger = LogFactory.getLog(getClass());\n\n\n\tprotected AbstractDecoder(MimeType... supportedMimeTypes) {\n\t\tthis.decodableMimeTypes = Arrays.asList(supportedMimeTypes);\n\t}\n\n\n\t/**\n\t * Set an alternative logger to use than the one based on the class name.\n\t * @param logger the logger to use\n\t * @since 5.1\n\t */\n\tpublic void setLogger(Log logger) {\n\t\tthis.logger = logger;\n\t}\n\n\t/**\n\t * Return the currently configured Logger.\n\t * @since 5.1\n\t */\n\tpublic Log getLogger() {\n\t\treturn logger;\n\t}\n\n\n\t@Override\n\tpublic List<MimeType> getDecodableMimeTypes() {\n\t\treturn this.decodableMimeTypes;\n\t}\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\tif (mimeType == null) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (MimeType candidate : this.decodableMimeTypes) {\n\t\t\tif (candidate.isCompatibleWith(mimeType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.AbstractDecoder#decodableMimeTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#decodableMimeTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<MimeType>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.AbstractDecoder#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#setLogger(Log)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set an alternative logger to use than the one based on the class name.\r\n * @param logger the logger to use\r\n * @since 5.1\r\n */\r\npublic void setLogger(Log logger) {\r\n    this.logger = logger;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDecoder#setLogger(Log)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#getLogger()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the currently configured Logger.\r\n * @since 5.1\r\n */\r\npublic Log getLogger() {\r\n    return logger;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDecoder#getLogger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#getDecodableMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic List<MimeType> getDecodableMimeTypes() {\r\n    return this.decodableMimeTypes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDecoder#getDecodableMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#getDecodableMimeTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    if (mimeType == null) {\r\n        return true;\r\n    }\r\n    for (MimeType candidate : this.decodableMimeTypes) {\r\n        if (candidate.isCompatibleWith(mimeType)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractDecoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  }
]