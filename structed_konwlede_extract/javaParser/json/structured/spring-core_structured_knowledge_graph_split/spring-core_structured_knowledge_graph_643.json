[
  {
    "head": "org.springframework.cglib.proxy.Enhancer#isEnhanced(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if a class was generated using <code>Enhancer</code>.\r\n * @param type any class\r\n * @return whether the class was generated  using <code>Enhancer</code>\r\n */\r\npublic static boolean isEnhanced(Class type) {\r\n    try {\r\n        getCallbacksSetter(type, SET_THREAD_CALLBACKS_NAME);\r\n        return true;\r\n    } catch (NoSuchMethodException e) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#isEnhanced(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setThreadCallbacks(Class,Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void setThreadCallbacks(Class type, Callback[] callbacks) {\r\n    setCallbacksHelper(type, callbacks, SET_THREAD_CALLBACKS_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setThreadCallbacks(Class,Callback[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#setCallbacksHelper(Class,Callback[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void setCallbacksHelper(Class type, Callback[] callbacks, String methodName) {\r\n    // TODO: optimize\r\n    try {\r\n        Method setter = getCallbacksSetter(type, methodName);\r\n        setter.invoke(null, new Object[] { callbacks });\r\n    } catch (NoSuchMethodException e) {\r\n        throw new IllegalArgumentException(type + \" is not an enhanced class\");\r\n    } catch (IllegalAccessException | InvocationTargetException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#setCallbacksHelper(Class,Callback[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#getCallbacksSetter(Class,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Method getCallbacksSetter(Class type, String methodName) throws NoSuchMethodException {\r\n    return type.getDeclaredMethod(methodName, new Class[] { Callback[].class });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#getCallbacksSetter(Class,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#createUsingReflection(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Instantiates a proxy instance and assigns callback values.\r\n * Implementation detail: java.lang.reflect instances are not cached, so this method should not\r\n * be used on a hot path.\r\n * This method is used when {@link #setUseCache(boolean)} is set to {@code false}.\r\n * @param type class to instantiate\r\n * @return newly created instance\r\n */\r\nprivate Object createUsingReflection(Class type) {\r\n    setThreadCallbacks(type, callbacks);\r\n    try {\r\n        if (argumentTypes != null) {\r\n            return ReflectUtils.newInstance(type, argumentTypes, arguments);\r\n        } else {\r\n            return ReflectUtils.newInstance(type);\r\n        }\r\n    } finally {\r\n        // clear thread callbacks to allow them to be gc'd\r\n        setThreadCallbacks(type, null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#createUsingReflection(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#create(Class,Callback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method to create an intercepted object.\r\n * For finer control over the generated instance, use a new instance of <code>Enhancer</code>\r\n * instead of this static method.\r\n * @param type class to extend or interface to implement\r\n * @param callback the callback to use for all methods\r\n */\r\npublic static Object create(Class type, Callback callback) {\r\n    Enhancer e = new Enhancer();\r\n    e.setSuperclass(type);\r\n    e.setCallback(callback);\r\n    return e.create();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#create(Class,Callback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#create(Class,Class[],Callback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method to create an intercepted object.\r\n * For finer control over the generated instance, use a new instance of <code>Enhancer</code>\r\n * instead of this static method.\r\n * @param superclass class to extend or interface to implement\r\n * @param interfaces array of interfaces to implement, or null\r\n * @param callback the callback to use for all methods\r\n */\r\npublic static Object create(Class superclass, Class[] interfaces, Callback callback) {\r\n    Enhancer e = new Enhancer();\r\n    e.setSuperclass(superclass);\r\n    e.setInterfaces(interfaces);\r\n    e.setCallback(callback);\r\n    return e.create();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#create(Class,Class[],Callback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#create(Class,Class[],CallbackFilter,Callback[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method to create an intercepted object.\r\n * For finer control over the generated instance, use a new instance of <code>Enhancer</code>\r\n * instead of this static method.\r\n * @param superclass class to extend or interface to implement\r\n * @param interfaces array of interfaces to implement, or null\r\n * @param filter the callback filter to use when generating a new class\r\n * @param callbacks callback implementations to use for the enhanced object\r\n */\r\npublic static Object create(Class superclass, Class[] interfaces, CallbackFilter filter, Callback[] callbacks) {\r\n    Enhancer e = new Enhancer();\r\n    e.setSuperclass(superclass);\r\n    e.setInterfaces(interfaces);\r\n    e.setCallbackFilter(filter);\r\n    e.setCallbacks(callbacks);\r\n    return e.create();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#create(Class,Class[],CallbackFilter,Callback[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitDefaultConstructor(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitDefaultConstructor(ClassEmitter ce) {\r\n    Constructor<Object> declaredConstructor;\r\n    try {\r\n        declaredConstructor = Object.class.getDeclaredConstructor();\r\n    } catch (NoSuchMethodException e) {\r\n        throw new IllegalStateException(\"Object should have default constructor \", e);\r\n    }\r\n    MethodInfo constructor = (MethodInfo) MethodInfoTransformer.getInstance().transform(declaredConstructor);\r\n    CodeEmitter e = EmitUtils.begin_method(ce, constructor, Constants.ACC_PUBLIC);\r\n    e.load_this();\r\n    e.dup();\r\n    Signature sig = constructor.getSignature();\r\n    e.super_invoke_constructor(sig);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitDefaultConstructor(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer#emitConstructors(ClassEmitter,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void emitConstructors(ClassEmitter ce, List constructors) {\r\n    boolean seenNull = false;\r\n    for (Iterator it = constructors.iterator(); it.hasNext(); ) {\r\n        MethodInfo constructor = (MethodInfo) it.next();\r\n        if (currentData != null && !\"()V\".equals(constructor.getSignature().getDescriptor())) {\r\n            continue;\r\n        }\r\n        CodeEmitter e = EmitUtils.begin_method(ce, constructor, Constants.ACC_PUBLIC);\r\n        e.load_this();\r\n        e.dup();\r\n        e.load_args();\r\n        Signature sig = constructor.getSignature();\r\n        seenNull = seenNull || sig.getDescriptor().equals(\"()V\");\r\n        e.super_invoke_constructor(sig);\r\n        if (currentData == null) {\r\n            e.invoke_static_this(BIND_CALLBACKS);\r\n            if (!interceptDuringConstruction) {\r\n                e.load_this();\r\n                e.push(1);\r\n                e.putfield(CONSTRUCTED_FIELD);\r\n            }\r\n        }\r\n        e.return_value();\r\n        e.end_method();\r\n    }\r\n    if (!classOnly && !seenNull && arguments == null) {\r\n        throw new IllegalArgumentException(\"Superclass has no null constructors but no arguments were given\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Enhancer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Enhancer#emitConstructors(ClassEmitter,List)",
    "tailType": "method"
  }
]