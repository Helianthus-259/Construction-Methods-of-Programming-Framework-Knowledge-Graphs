[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySetFollowingNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetEntrySetFollowingNext() {\r\n    // Use loadFactor to disable resize\r\n    this.map = new TestWeakConcurrentCache<>(1, 10.0f, 1);\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    HashMap<Integer, String> expected = new HashMap<>();\r\n    expected.put(1, \"1\");\r\n    expected.put(2, \"2\");\r\n    expected.put(3, \"3\");\r\n    assertThat(this.map.entrySet()).isEqualTo(expected.entrySet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySetFollowingNext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySetFollowingNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveViaEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldRemoveViaEntrySet() {\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator();\r\n    iterator.next();\r\n    iterator.next();\r\n    iterator.remove();\r\n    assertThatIllegalStateException().isThrownBy(iterator::remove);\r\n    iterator.next();\r\n    assertThat(iterator.hasNext()).isFalse();\r\n    assertThat(this.map).hasSize(2);\r\n    assertThat(this.map.containsKey(2)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveViaEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveViaEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSetViaEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldSetViaEntrySet() {\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator();\r\n    iterator.next();\r\n    iterator.next().setValue(\"2b\");\r\n    iterator.next();\r\n    assertThat(iterator.hasNext()).isFalse();\r\n    assertThat(this.map).hasSize(3);\r\n    assertThat(this.map.get(2)).isEqualTo(\"2b\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSetViaEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSetViaEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#containsViaEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsViaEntrySet() {\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    Set<Map.Entry<Integer, String>> entrySet = this.map.entrySet();\r\n    Set<Map.Entry<Integer, String>> copy = new HashMap<>(this.map).entrySet();\r\n    copy.forEach(entry -> assertThat(entrySet).contains(entry));\r\n    this.map.put(1, \"A\");\r\n    this.map.put(2, \"B\");\r\n    this.map.put(3, \"C\");\r\n    copy.forEach(entry -> assertThat(entrySet).doesNotContain(entry));\r\n    this.map.put(1, \"1\");\r\n    this.map.put(2, \"2\");\r\n    this.map.put(3, \"3\");\r\n    copy.forEach(entry -> assertThat(entrySet).contains(entry));\r\n    entrySet.clear();\r\n    copy.forEach(entry -> assertThat(entrySet).doesNotContain(entry));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#containsViaEntrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#containsViaEntrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportNullReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldSupportNullReference() {\r\n    // GC could happen during restructure so we must be able to create a reference for a null entry\r\n    map.createReferenceManager().createReference(null, 1234, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportNullReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportNullReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.TestWeakConcurrentCache",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.TestWeakConcurrentCache",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.ConcurrentReferenceHashMap.Entry;\nimport org.springframework.util.ConcurrentReferenceHashMap.Reference;\nimport org.springframework.util.ConcurrentReferenceHashMap.Restructure;\nimport org.springframework.util.comparator.Comparators;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\n\n/**\n * Tests for {@link ConcurrentReferenceHashMap}.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n */\nclass ConcurrentReferenceHashMapTests {\n\n\tprivate static final Comparator<? super String> NULL_SAFE_STRING_SORT = Comparators.nullsLow();\n\n\tprivate TestWeakConcurrentCache<Integer, String> map = new TestWeakConcurrentCache<>();\n\n\n\t@Test\n\tvoid shouldCreateWithDefaults() {\n\t\tConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>();\n\t\tassertThat(map.getSegmentsSize()).isEqualTo(16);\n\t\tassertThat(map.getSegment(0).getSize()).isEqualTo(1);\n\t\tassertThat(map.getLoadFactor()).isEqualTo(0.75f);\n\t}\n\n\t@Test\n\tvoid shouldCreateWithInitialCapacity() {\n\t\tConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(32);\n\t\tassertThat(map.getSegmentsSize()).isEqualTo(16);\n\t\tassertThat(map.getSegment(0).getSize()).isEqualTo(2);\n\t\tassertThat(map.getLoadFactor()).isEqualTo(0.75f);\n\t}\n\n\t@Test\n\tvoid shouldCreateWithInitialCapacityAndLoadFactor() {\n\t\tConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(32, 0.5f);\n\t\tassertThat(map.getSegmentsSize()).isEqualTo(16);\n\t\tassertThat(map.getSegment(0).getSize()).isEqualTo(2);\n\t\tassertThat(map.getLoadFactor()).isEqualTo(0.5f);\n\t}\n\n\t@Test\n\tvoid shouldCreateWithInitialCapacityAndConcurrentLevel() {\n\t\tConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(16, 2);\n\t\tassertThat(map.getSegmentsSize()).isEqualTo(2);\n\t\tassertThat(map.getSegment(0).getSize()).isEqualTo(8);\n\t\tassertThat(map.getLoadFactor()).isEqualTo(0.75f);\n\t}\n\n\t@Test\n\tvoid shouldCreateFullyCustom() {\n\t\tConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(5, 0.5f, 3);\n\t\t// concurrencyLevel of 3 ends up as 4 (nearest power of 2)\n\t\tassertThat(map.getSegmentsSize()).isEqualTo(4);\n\t\t// initialCapacity is 5/4 (rounded up, to nearest power of 2)\n\t\tassertThat(map.getSegment(0).getSize()).isEqualTo(2);\n\t\tassertThat(map.getLoadFactor()).isEqualTo(0.5f);\n\t}\n\n\t@Test\n\tvoid shouldNeedNonNegativeInitialCapacity() {\n\t\tassertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 1));\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(-1, 1))\n\t\t\t\t.withMessageContaining(\"Initial capacity must not be negative\");\n\t}\n\n\t@Test\n\tvoid shouldNeedPositiveLoadFactor() {\n\t\tassertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 0.1f, 1));\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 0.0f, 1))\n\t\t\t\t.withMessageContaining(\"Load factor must be positive\");\n\t}\n\n\t@Test\n\tvoid shouldNeedPositiveConcurrencyLevel() {\n\t\tassertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(1, 1));\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(1, 0))\n\t\t\t\t.withMessageContaining(\"Concurrency level must be positive\");\n\t}\n\n\t@Test\n\tvoid shouldPutAndGet() {\n\t\t// NOTE we are using mock references so we don't need to worry about GC\n\t\tassertThat(this.map).isEmpty();\n\t\tthis.map.put(123, \"123\");\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t\tassertThat(this.map).hasSize(1);\n\t\tthis.map.put(123, \"123b\");\n\t\tassertThat(this.map).hasSize(1);\n\t\tthis.map.put(123, null);\n\t\tassertThat(this.map).hasSize(1);\n\t}\n\n\t@Test\n\tvoid shouldReplaceOnDoublePut() {\n\t\tthis.map.put(123, \"321\");\n\t\tthis.map.put(123, \"123\");\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t}\n\n\t@Test\n\tvoid shouldPutNullKey() {\n\t\tassertThat(this.map.get(null)).isNull();\n\t\tassertThat(this.map.getOrDefault(null, \"456\")).isEqualTo(\"456\");\n\t\tthis.map.put(null, \"123\");\n\t\tassertThat(this.map.get(null)).isEqualTo(\"123\");\n\t\tassertThat(this.map.getOrDefault(null, \"456\")).isEqualTo(\"123\");\n\t}\n\n\t@Test\n\tvoid shouldPutNullValue() {\n\t\tassertThat(this.map.get(123)).isNull();\n\t\tassertThat(this.map.getOrDefault(123, \"456\")).isEqualTo(\"456\");\n\t\tthis.map.put(123, \"321\");\n\t\tassertThat(this.map.get(123)).isEqualTo(\"321\");\n\t\tassertThat(this.map.getOrDefault(123, \"456\")).isEqualTo(\"321\");\n\t\tthis.map.put(123, null);\n\t\tassertThat(this.map.get(123)).isNull();\n\t\tassertThat(this.map.getOrDefault(123, \"456\")).isNull();\n\t}\n\n\t@Test\n\tvoid shouldGetWithNoItems() {\n\t\tassertThat(this.map.get(123)).isNull();\n\t}\n\n\t@Test\n\tvoid shouldApplySupplementalHash() {\n\t\tInteger key = 123;\n\t\tthis.map.put(key, \"123\");\n\t\tassertThat(this.map.getSupplementalHash()).isNotEqualTo(key.hashCode());\n\t\tassertThat(this.map.getSupplementalHash() >> 30 & 0xFF).isNotEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldGetFollowingNexts() {\n\t\t// Use loadFactor to disable resize\n\t\tthis.map = new TestWeakConcurrentCache<>(1, 10.0f, 1);\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(1);\n\t\tassertThat(this.map.get(1)).isEqualTo(\"1\");\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2\");\n\t\tassertThat(this.map.get(3)).isEqualTo(\"3\");\n\t\tassertThat(this.map.get(4)).isNull();\n\t}\n\n\t@Test\n\tvoid shouldResize() {\n\t\tthis.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\n\t\tthis.map.put(1, \"1\");\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(1);\n\t\tassertThat(this.map.get(1)).isEqualTo(\"1\");\n\n\t\tthis.map.put(2, \"2\");\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(2);\n\t\tassertThat(this.map.get(1)).isEqualTo(\"1\");\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2\");\n\n\t\tthis.map.put(3, \"3\");\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(4);\n\t\tassertThat(this.map.get(1)).isEqualTo(\"1\");\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2\");\n\t\tassertThat(this.map.get(3)).isEqualTo(\"3\");\n\n\t\tthis.map.put(4, \"4\");\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(8);\n\t\tassertThat(this.map.get(4)).isEqualTo(\"4\");\n\n\t\t// Putting again should not increase the count\n\t\tfor (int i = 1; i <= 5; i++) {\n\t\t\tthis.map.put(i, String.valueOf(i));\n\t\t}\n\t\tassertThat(this.map.getSegment(0).getSize()).isEqualTo(8);\n\t\tassertThat(this.map.get(5)).isEqualTo(\"5\");\n\t}\n\n\t@Test\n\tvoid shouldPurgeOnGet() {\n\t\tthis.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\n\t\tfor (int i = 1; i <= 5; i++) {\n\t\t\tthis.map.put(i, String.valueOf(i));\n\t\t}\n\t\tthis.map.getMockReference(1, Restructure.NEVER).queueForPurge();\n\t\tthis.map.getMockReference(3, Restructure.NEVER).queueForPurge();\n\t\tassertThat(this.map.getReference(1, Restructure.WHEN_NECESSARY)).isNull();\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2\");\n\t\tassertThat(this.map.getReference(3, Restructure.WHEN_NECESSARY)).isNull();\n\t\tassertThat(this.map.get(4)).isEqualTo(\"4\");\n\t\tassertThat(this.map.get(5)).isEqualTo(\"5\");\n\t}\n\n\t@Test\n\tvoid shouldPurgeOnPut() {\n\t\tthis.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\n\t\tfor (int i = 1; i <= 5; i++) {\n\t\t\tthis.map.put(i, String.valueOf(i));\n\t\t}\n\t\tthis.map.getMockReference(1, Restructure.NEVER).queueForPurge();\n\t\tthis.map.getMockReference(3, Restructure.NEVER).queueForPurge();\n\t\tthis.map.put(1, \"1\");\n\t\tassertThat(this.map.get(1)).isEqualTo(\"1\");\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2\");\n\t\tassertThat(this.map.getReference(3, Restructure.WHEN_NECESSARY)).isNull();\n\t\tassertThat(this.map.get(4)).isEqualTo(\"4\");\n\t\tassertThat(this.map.get(5)).isEqualTo(\"5\");\n\t}\n\n\t@Test\n\tvoid shouldPutIfAbsent() {\n\t\tassertThat(this.map.putIfAbsent(123, \"123\")).isNull();\n\t\tassertThat(this.map.putIfAbsent(123, \"123b\")).isEqualTo(\"123\");\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t}\n\n\t@Test\n\tvoid shouldPutIfAbsentWithNullValue() {\n\t\tassertThat(this.map.putIfAbsent(123, null)).isNull();\n\t\tassertThat(this.map.putIfAbsent(123, \"123\")).isNull();\n\t\tassertThat(this.map.get(123)).isNull();\n\t}\n\n\t@Test\n\tvoid shouldPutIfAbsentWithNullKey() {\n\t\tassertThat(this.map.putIfAbsent(null, \"123\")).isNull();\n\t\tassertThat(this.map.putIfAbsent(null, \"123b\")).isEqualTo(\"123\");\n\t\tassertThat(this.map.get(null)).isEqualTo(\"123\");\n\t}\n\n\t@Test\n\tvoid shouldRemoveKeyAndValue() {\n\t\tthis.map.put(123, \"123\");\n\t\tassertThat(this.map.remove(123, \"456\")).isFalse();\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t\tassertThat(this.map.remove(123, \"123\")).isTrue();\n\t\tassertThat(this.map.containsKey(123)).isFalse();\n\t\tassertThat(this.map).isEmpty();\n\t}\n\n\t@Test\n\tvoid shouldRemoveKeyAndValueWithExistingNull() {\n\t\tthis.map.put(123, null);\n\t\tassertThat(this.map.remove(123, \"456\")).isFalse();\n\t\tassertThat(this.map.get(123)).isNull();\n\t\tassertThat(this.map.remove(123, null)).isTrue();\n\t\tassertThat(this.map.containsKey(123)).isFalse();\n\t\tassertThat(this.map).isEmpty();\n\t}\n\n\t@Test\n\tvoid shouldReplaceOldValueWithNewValue() {\n\t\tthis.map.put(123, \"123\");\n\t\tassertThat(this.map.replace(123, \"456\", \"789\")).isFalse();\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t\tassertThat(this.map.replace(123, \"123\", \"789\")).isTrue();\n\t\tassertThat(this.map.get(123)).isEqualTo(\"789\");\n\t}\n\n\t@Test\n\tvoid shouldReplaceOldNullValueWithNewValue() {\n\t\tthis.map.put(123, null);\n\t\tassertThat(this.map.replace(123, \"456\", \"789\")).isFalse();\n\t\tassertThat(this.map.get(123)).isNull();\n\t\tassertThat(this.map.replace(123, null, \"789\")).isTrue();\n\t\tassertThat(this.map.get(123)).isEqualTo(\"789\");\n\t}\n\n\t@Test\n\tvoid shouldReplaceValue() {\n\t\tthis.map.put(123, \"123\");\n\t\tassertThat(this.map.replace(123, \"456\")).isEqualTo(\"123\");\n\t\tassertThat(this.map.get(123)).isEqualTo(\"456\");\n\t}\n\n\t@Test\n\tvoid shouldReplaceNullValue() {\n\t\tthis.map.put(123, null);\n\t\tassertThat(this.map.replace(123, \"456\")).isNull();\n\t\tassertThat(this.map.get(123)).isEqualTo(\"456\");\n\t}\n\n\t@Test\n\tvoid shouldGetSize() {\n\t\tassertThat(this.map).isEmpty();\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(123, null);\n\t\tthis.map.put(456, \"456\");\n\t\tassertThat(this.map).hasSize(2);\n\t}\n\n\t@Test\n\tvoid shouldSupportIsEmpty() {\n\t\tassertThat(this.map).isEmpty();\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(123, null);\n\t\tthis.map.put(456, \"456\");\n\t\tassertThat(this.map).isNotEmpty();\n\t}\n\n\t@Test\n\tvoid shouldContainKey() {\n\t\tassertThat(this.map.containsKey(123)).isFalse();\n\t\tassertThat(this.map.containsKey(456)).isFalse();\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tassertThat(this.map.containsKey(123)).isTrue();\n\t\tassertThat(this.map.containsKey(456)).isTrue();\n\t}\n\n\t@Test\n\tvoid shouldContainValue() {\n\t\tassertThat(this.map.containsValue(\"123\")).isFalse();\n\t\tassertThat(this.map.containsValue(null)).isFalse();\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tassertThat(this.map.containsValue(\"123\")).isTrue();\n\t\tassertThat(this.map.containsValue(null)).isTrue();\n\t}\n\n\t@Test\n\tvoid shouldRemoveWhenKeyIsInMap() {\n\t\tthis.map.put(123, null);\n\t\tthis.map.put(456, \"456\");\n\t\tthis.map.put(null, \"789\");\n\t\tassertThat(this.map.remove(123)).isNull();\n\t\tassertThat(this.map.remove(456)).isEqualTo(\"456\");\n\t\tassertThat(this.map.remove(null)).isEqualTo(\"789\");\n\t\tassertThat(this.map).isEmpty();\n\t}\n\n\t@Test\n\tvoid shouldRemoveWhenKeyIsNotInMap() {\n\t\tassertThat(this.map.remove(123)).isNull();\n\t\tassertThat(this.map.remove(null)).isNull();\n\t\tassertThat(this.map).isEmpty();\n\t}\n\n\t@Test\n\tvoid shouldPutAll() {\n\t\tMap<Integer, String> m = new HashMap<>();\n\t\tm.put(123, \"123\");\n\t\tm.put(456, null);\n\t\tm.put(null, \"789\");\n\t\tthis.map.putAll(m);\n\t\tassertThat(this.map).hasSize(3);\n\t\tassertThat(this.map.get(123)).isEqualTo(\"123\");\n\t\tassertThat(this.map.get(456)).isNull();\n\t\tassertThat(this.map.get(null)).isEqualTo(\"789\");\n\t}\n\n\t@Test\n\tvoid shouldClear() {\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tthis.map.put(null, \"789\");\n\t\tthis.map.clear();\n\t\tassertThat(this.map).isEmpty();\n\t\tassertThat(this.map.containsKey(123)).isFalse();\n\t\tassertThat(this.map.containsKey(456)).isFalse();\n\t\tassertThat(this.map.containsKey(null)).isFalse();\n\t}\n\n\t@Test\n\tvoid shouldGetKeySet() {\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tthis.map.put(null, \"789\");\n\t\tSet<Integer> expected = new HashSet<>();\n\t\texpected.add(123);\n\t\texpected.add(456);\n\t\texpected.add(null);\n\t\tassertThat(this.map.keySet()).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid shouldGetValues() {\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tthis.map.put(null, \"789\");\n\t\tList<String> actual = new ArrayList<>(this.map.values());\n\t\tList<String> expected = new ArrayList<>();\n\t\texpected.add(\"123\");\n\t\texpected.add(null);\n\t\texpected.add(\"789\");\n\t\tactual.sort(NULL_SAFE_STRING_SORT);\n\t\texpected.sort(NULL_SAFE_STRING_SORT);\n\t\tassertThat(actual).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid shouldGetEntrySet() {\n\t\tthis.map.put(123, \"123\");\n\t\tthis.map.put(456, null);\n\t\tthis.map.put(null, \"789\");\n\t\tHashMap<Integer, String> expected = new HashMap<>();\n\t\texpected.put(123, \"123\");\n\t\texpected.put(456, null);\n\t\texpected.put(null, \"789\");\n\t\tassertThat(this.map.entrySet()).isEqualTo(expected.entrySet());\n\t}\n\n\t@Test\n\tvoid shouldGetEntrySetFollowingNext() {\n\t\t// Use loadFactor to disable resize\n\t\tthis.map = new TestWeakConcurrentCache<>(1, 10.0f, 1);\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tHashMap<Integer, String> expected = new HashMap<>();\n\t\texpected.put(1, \"1\");\n\t\texpected.put(2, \"2\");\n\t\texpected.put(3, \"3\");\n\t\tassertThat(this.map.entrySet()).isEqualTo(expected.entrySet());\n\t}\n\n\t@Test\n\tvoid shouldRemoveViaEntrySet() {\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tIterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator();\n\t\titerator.next();\n\t\titerator.next();\n\t\titerator.remove();\n\t\tassertThatIllegalStateException().isThrownBy(iterator::remove);\n\t\titerator.next();\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t\tassertThat(this.map).hasSize(2);\n\t\tassertThat(this.map.containsKey(2)).isFalse();\n\t}\n\n\t@Test\n\tvoid shouldSetViaEntrySet() {\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tIterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator();\n\t\titerator.next();\n\t\titerator.next().setValue(\"2b\");\n\t\titerator.next();\n\t\tassertThat(iterator.hasNext()).isFalse();\n\t\tassertThat(this.map).hasSize(3);\n\t\tassertThat(this.map.get(2)).isEqualTo(\"2b\");\n\t}\n\n\t@Test\n\tvoid containsViaEntrySet() {\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tSet<Map.Entry<Integer, String>> entrySet = this.map.entrySet();\n\t\tSet<Map.Entry<Integer, String>> copy = new HashMap<>(this.map).entrySet();\n\t\tcopy.forEach(entry -> assertThat(entrySet).contains(entry));\n\t\tthis.map.put(1, \"A\");\n\t\tthis.map.put(2, \"B\");\n\t\tthis.map.put(3, \"C\");\n\t\tcopy.forEach(entry -> assertThat(entrySet).doesNotContain(entry));\n\t\tthis.map.put(1, \"1\");\n\t\tthis.map.put(2, \"2\");\n\t\tthis.map.put(3, \"3\");\n\t\tcopy.forEach(entry -> assertThat(entrySet).contains(entry));\n\t\tentrySet.clear();\n\t\tcopy.forEach(entry -> assertThat(entrySet).doesNotContain(entry));\n\t}\n\n\t@Test\n\tvoid shouldSupportNullReference() {\n\t\t// GC could happen during restructure so we must be able to create a reference for a null entry\n\t\tmap.createReferenceManager().createReference(null, 1234, null);\n\t}\n\n\n\tprivate static class TestWeakConcurrentCache<K, V> extends ConcurrentReferenceHashMap<K, V> {\n\n\t\tprivate int supplementalHash;\n\n\t\tprivate final LinkedList<MockReference<K, V>> queue = new LinkedList<>();\n\n\t\tpublic TestWeakConcurrentCache() {\n\t\t\tsuper();\n\t\t}\n\n\t\tpublic TestWeakConcurrentCache(int initialCapacity, float loadFactor, int concurrencyLevel) {\n\t\t\tsuper(initialCapacity, loadFactor, concurrencyLevel);\n\t\t}\n\n\t\t@Override\n\t\tprotected int getHash(@Nullable Object o) {\n\t\t\t// For testing we want more control of the hash\n\t\t\tthis.supplementalHash = super.getHash(o);\n\t\t\treturn (o != null ? o.hashCode() : 0);\n\t\t}\n\n\t\tpublic int getSupplementalHash() {\n\t\t\treturn this.supplementalHash;\n\t\t}\n\n\t\t@Override\n\t\tprotected ReferenceManager createReferenceManager() {\n\t\t\treturn new ReferenceManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic Reference<K, V> createReference(Entry<K, V> entry, int hash, @Nullable Reference<K, V> next) {\n\t\t\t\t\treturn new MockReference<>(entry, hash, next, TestWeakConcurrentCache.this.queue);\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic Reference<K, V> pollForPurge() {\n\t\t\t\t\treturn TestWeakConcurrentCache.this.queue.isEmpty() ? null : TestWeakConcurrentCache.this.queue.removeFirst();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tpublic MockReference<K, V> getMockReference(K key, Restructure restructure) {\n\t\t\treturn (MockReference<K, V>) super.getReference(key, restructure);\n\t\t}\n\t}\n\n\n\tprivate static class MockReference<K, V> implements Reference<K, V> {\n\n\t\tprivate final int hash;\n\n\t\tprivate Entry<K, V> entry;\n\n\t\tprivate final Reference<K, V> next;\n\n\t\tprivate final LinkedList<MockReference<K, V>> queue;\n\n\t\tpublic MockReference(Entry<K, V> entry, int hash, Reference<K, V> next, LinkedList<MockReference<K, V>> queue) {\n\t\t\tthis.hash = hash;\n\t\t\tthis.entry = entry;\n\t\t\tthis.next = next;\n\t\t\tthis.queue = queue;\n\t\t}\n\n\t\t@Override\n\t\tpublic Entry<K, V> get() {\n\t\t\treturn this.entry;\n\t\t}\n\n\t\t@Override\n\t\tpublic int getHash() {\n\t\t\treturn this.hash;\n\t\t}\n\n\t\t@Override\n\t\tpublic Reference<K, V> getNext() {\n\t\t\treturn this.next;\n\t\t}\n\n\t\t@Override\n\t\tpublic void release() {\n\t\t\tthis.queue.add(this);\n\t\t\tthis.entry = null;\n\t\t}\n\n\t\tpublic void queueForPurge() {\n\t\t\tthis.queue.add(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.TestWeakConcurrentCache",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TestWeakConcurrentCache#supplementalHash",
    "tailType": "field"
  }
]