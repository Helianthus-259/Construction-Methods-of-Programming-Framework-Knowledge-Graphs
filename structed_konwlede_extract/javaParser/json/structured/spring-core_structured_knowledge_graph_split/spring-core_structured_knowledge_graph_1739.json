[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeFromAnnotationAttributesWithoutAttributeAliases() {\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    Map<String, Object> attributes = MergedAnnotation.from(component).asMap();\r\n    Component synthesized = MergedAnnotation.of(Component.class, attributes).synthesize();\r\n    assertSynthesized(synthesized);\r\n    assertThat(synthesized).isEqualTo(component);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromAnnotationAttributesWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeFromAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#toStringForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toStringForSynthesizedAnnotations() throws Exception {\r\n    Method methodWithPath = WebController.class.getMethod(\"handleMappedWithPathAttribute\");\r\n    RequestMapping webMappingWithAliases = methodWithPath.getAnnotation(RequestMapping.class);\r\n    assertThat(webMappingWithAliases).isNotNull();\r\n    Method methodWithPathAndValue = WebController.class.getMethod(\"handleMappedWithSamePathAndValueAttributes\");\r\n    RequestMapping webMappingWithPathAndValue = methodWithPathAndValue.getAnnotation(RequestMapping.class);\r\n    assertThat(methodWithPathAndValue).isNotNull();\r\n    RequestMapping synthesizedWebMapping1 = MergedAnnotation.from(webMappingWithAliases).synthesize();\r\n    RequestMapping synthesizedWebMapping2 = MergedAnnotation.from(webMappingWithPathAndValue).synthesize();\r\n    assertThat(webMappingWithAliases.toString()).isNotEqualTo(synthesizedWebMapping1.toString());\r\n    // The unsynthesized annotation for handleMappedWithSamePathAndValueAttributes()\r\n    // should produce almost the same toString() results as synthesized annotations for\r\n    // handleMappedWithPathAttribute() on Java 9 or higher; however, due to multiple changes\r\n    // in the JDK's toString() implementation for annotations in JDK 9, 14, and 19,\r\n    // we do not test the JDK implementation.\r\n    // assertToStringForWebMappingWithPathAndValue(webMappingWithPathAndValue);\r\n    assertToStringForWebMappingWithPathAndValue(synthesizedWebMapping1);\r\n    assertToStringForWebMappingWithPathAndValue(synthesizedWebMapping2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#toStringForSynthesizedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#toStringForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#assertToStringForWebMappingWithPathAndValue(RequestMapping)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertToStringForWebMappingWithPathAndValue(RequestMapping webMapping) {\r\n    assertThat(webMapping.toString()).startsWith(\"@org.springframework.core.annotation.MergedAnnotationsTests.RequestMapping(\").contains(// Strings\r\n    \"value={\\\"/test\\\"}\", \"path={\\\"/test\\\"}\", \"name=\\\"bar\\\"\", // Characters\r\n    \"ch='X'\", \"chars={'X'}\", // Enums\r\n    \"method={GET, POST}\", // Classes\r\n    \"clazz=org.springframework.core.annotation.MergedAnnotationsTests.RequestMethod.class\", \"classes={int[][].class, org.springframework.core.annotation.MergedAnnotationsTests.RequestMethod[].class}\", // Bytes\r\n    \"byteValue=(byte) 0xFF\", \"bytes={(byte) 0xFF}\", // Shorts\r\n    \"shortValue=9876\", \"shorts={9876}\", // Longs\r\n    \"longValue=42L\", \"longs={42L}\", // Floats\r\n    \"floatValue=3.14f\", \"floats={3.14f}\", // Doubles\r\n    \"doubleValue=99.999d\", \"doubles={99.999d}\").endsWith(\")\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#assertToStringForWebMappingWithPathAndValue(RequestMapping)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#equalsForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsForSynthesizedAnnotations() throws Exception {\r\n    Method methodWithPath = WebController.class.getMethod(\"handleMappedWithPathAttribute\");\r\n    RequestMapping webMappingWithAliases = methodWithPath.getAnnotation(RequestMapping.class);\r\n    assertThat(webMappingWithAliases).isNotNull();\r\n    Method methodWithPathAndValue = WebController.class.getMethod(\"handleMappedWithSamePathAndValueAttributes\");\r\n    RequestMapping webMappingWithPathAndValue = methodWithPathAndValue.getAnnotation(RequestMapping.class);\r\n    assertThat(webMappingWithPathAndValue).isNotNull();\r\n    RequestMapping synthesizedWebMapping1 = MergedAnnotation.from(webMappingWithAliases).synthesize();\r\n    RequestMapping synthesizedWebMapping2 = MergedAnnotation.from(webMappingWithPathAndValue).synthesize();\r\n    // Equality amongst standard annotations\r\n    assertThat(webMappingWithAliases).isEqualTo(webMappingWithAliases);\r\n    assertThat(webMappingWithPathAndValue).isEqualTo(webMappingWithPathAndValue);\r\n    // Inequality amongst standard annotations\r\n    assertThat(webMappingWithAliases).isNotEqualTo(webMappingWithPathAndValue);\r\n    assertThat(webMappingWithPathAndValue).isNotEqualTo(webMappingWithAliases);\r\n    // Equality amongst synthesized annotations\r\n    assertThat(synthesizedWebMapping1).isEqualTo(synthesizedWebMapping1);\r\n    assertThat(synthesizedWebMapping2).isEqualTo(synthesizedWebMapping2);\r\n    assertThat(synthesizedWebMapping1).isEqualTo(synthesizedWebMapping2);\r\n    assertThat(synthesizedWebMapping2).isEqualTo(synthesizedWebMapping1);\r\n    // Equality between standard and synthesized annotations\r\n    assertThat(synthesizedWebMapping1).isEqualTo(webMappingWithPathAndValue);\r\n    assertThat(webMappingWithPathAndValue).isEqualTo(synthesizedWebMapping1);\r\n    // Inequality between standard and synthesized annotations\r\n    assertThat(synthesizedWebMapping1).isNotEqualTo(webMappingWithAliases);\r\n    assertThat(webMappingWithAliases).isNotEqualTo(synthesizedWebMapping1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#equalsForSynthesizedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#equalsForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#hashCodeForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hashCodeForSynthesizedAnnotations() throws Exception {\r\n    Method methodWithPath = WebController.class.getMethod(\"handleMappedWithPathAttribute\");\r\n    RequestMapping webMappingWithAliases = methodWithPath.getAnnotation(RequestMapping.class);\r\n    assertThat(webMappingWithAliases).isNotNull();\r\n    Method methodWithPathAndValue = WebController.class.getMethod(\"handleMappedWithSamePathAndValueAttributes\");\r\n    RequestMapping webMappingWithPathAndValue = methodWithPathAndValue.getAnnotation(RequestMapping.class);\r\n    assertThat(webMappingWithPathAndValue).isNotNull();\r\n    RequestMapping synthesizedWebMapping1 = MergedAnnotation.from(webMappingWithAliases).synthesize();\r\n    assertThat(synthesizedWebMapping1).isNotNull();\r\n    RequestMapping synthesizedWebMapping2 = MergedAnnotation.from(webMappingWithPathAndValue).synthesize();\r\n    assertThat(synthesizedWebMapping2).isNotNull();\r\n    // Equality amongst standard annotations\r\n    assertThat(webMappingWithAliases.hashCode()).isEqualTo(webMappingWithAliases.hashCode());\r\n    assertThat(webMappingWithPathAndValue.hashCode()).isEqualTo(webMappingWithPathAndValue.hashCode());\r\n    // Inequality amongst standard annotations\r\n    assertThat(webMappingWithAliases.hashCode()).isNotEqualTo(webMappingWithPathAndValue.hashCode());\r\n    assertThat(webMappingWithPathAndValue.hashCode()).isNotEqualTo(webMappingWithAliases.hashCode());\r\n    // Equality amongst synthesized annotations\r\n    assertThat(synthesizedWebMapping1.hashCode()).isEqualTo(synthesizedWebMapping1.hashCode());\r\n    assertThat(synthesizedWebMapping2.hashCode()).isEqualTo(synthesizedWebMapping2.hashCode());\r\n    assertThat(synthesizedWebMapping1.hashCode()).isEqualTo(synthesizedWebMapping2.hashCode());\r\n    assertThat(synthesizedWebMapping2.hashCode()).isEqualTo(synthesizedWebMapping1.hashCode());\r\n    // Equality between standard and synthesized annotations\r\n    assertThat(synthesizedWebMapping1.hashCode()).isEqualTo(webMappingWithPathAndValue.hashCode());\r\n    assertThat(webMappingWithPathAndValue.hashCode()).isEqualTo(synthesizedWebMapping1.hashCode());\r\n    // Inequality between standard and synthesized annotations\r\n    assertThat(synthesizedWebMapping1.hashCode()).isNotEqualTo(webMappingWithAliases.hashCode());\r\n    assertThat(webMappingWithAliases.hashCode()).isNotEqualTo(synthesizedWebMapping1.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#hashCodeForSynthesizedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#hashCodeForSynthesizedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeNonPublicWithAttributeAliasesFromDifferentPackage()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Fully reflection-based test that verifies support for synthesizing\r\n * annotations across packages with non-public visibility of user types\r\n * (for example, a non-public annotation that uses {@code @AliasFor}).\r\n */\r\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid synthesizeNonPublicWithAttributeAliasesFromDifferentPackage() throws Exception {\r\n    Class<?> type = ClassUtils.forName(\"org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass\", null);\r\n    Class<? extends Annotation> annotationType = (Class<? extends Annotation>) ClassUtils.forName(\"org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotation\", null);\r\n    Annotation annotation = type.getAnnotation(annotationType);\r\n    assertThat(annotation).isNotNull();\r\n    MergedAnnotation<Annotation> mergedAnnotation = MergedAnnotation.from(annotation);\r\n    Annotation synthesizedAnnotation = mergedAnnotation.synthesize();\r\n    assertSynthesized(synthesizedAnnotation);\r\n    assertThat(mergedAnnotation.getString(\"name\")).isEqualTo(\"test\");\r\n    assertThat(mergedAnnotation.getString(\"path\")).isEqualTo(\"/test\");\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"/test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeNonPublicWithAttributeAliasesFromDifferentPackage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeNonPublicWithAttributeAliasesFromDifferentPackage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeNonPublicWithAttributeAliasesFromDifferentPackage()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithArrayOfAnnotations() {\r\n    Hierarchy hierarchy = HierarchyClass.class.getAnnotation(Hierarchy.class);\r\n    assertThat(hierarchy).isNotNull();\r\n    Hierarchy synthesizedHierarchy = MergedAnnotation.from(hierarchy).synthesize();\r\n    assertSynthesized(synthesizedHierarchy);\r\n    TestConfiguration[] configs = synthesizedHierarchy.value();\r\n    assertThat(configs).isNotNull();\r\n    assertThat(configs).allMatch(AnnotationUtils::isSynthesizedAnnotation);\r\n    assertThat(configs).extracting(TestConfiguration::value).containsExactly(\"A\", \"B\");\r\n    assertThat(configs).extracting(TestConfiguration::location).containsExactly(\"A\", \"B\");\r\n    TestConfiguration contextConfig = TestConfigurationClass.class.getAnnotation(TestConfiguration.class);\r\n    assertThat(contextConfig).isNotNull();\r\n    // Alter array returned from synthesized annotation\r\n    configs[0] = contextConfig;\r\n    assertThat(configs).extracting(TestConfiguration::value).containsExactly(\"simple.xml\", \"B\");\r\n    // Re-retrieve the array from the synthesized annotation\r\n    configs = synthesizedHierarchy.value();\r\n    assertThat(configs).extracting(TestConfiguration::value).containsExactly(\"A\", \"B\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithArrayOfAnnotations()",
    "tailType": "method"
  }
]