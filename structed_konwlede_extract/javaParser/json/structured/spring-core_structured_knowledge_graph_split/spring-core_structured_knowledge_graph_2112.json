[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenImplementingRawInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenImplementingRawInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenExtends()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWhenExtends() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsMySimpleInterfaceTypeWithImplementsRaw.class);\r\n    for (ResolvableType generic : type.getGenerics()) {\r\n        assertThat(generic.resolve()).isNotNull();\r\n    }\r\n    assertThat(type.hasUnresolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenExtends()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenExtends()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenNested()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWhenNested() throws Exception {\r\n    ResolvableType type = ResolvableType.forMethodReturnType(ListOfListSupplier.class.getMethod(\"get\"));\r\n    assertThat(type.hasUnresolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenNested()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenNested()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfReferring()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWhenSelfReferring() {\r\n    ResolvableType type = ResolvableType.forInstance(new Bar());\r\n    assertThat(type.hasUnresolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfReferring()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfReferring()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWithEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWithEnum() {\r\n    ResolvableType type = ResolvableType.forType(SimpleEnum.class.getGenericSuperclass());\r\n    assertThat(type.hasUnresolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWithEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWithEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#recursiveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-33932\r\n@Test\r\nvoid recursiveType() {\r\n    assertThat(ResolvableType.forClass(RecursiveMap.class)).isEqualTo(ResolvableType.forClass(RecursiveMap.class));\r\n    ResolvableType resolvableType1 = ResolvableType.forClassWithGenerics(Map.class, String.class, RecursiveMap.class);\r\n    ResolvableType resolvableType2 = ResolvableType.forClassWithGenerics(Map.class, String.class, RecursiveMap.class);\r\n    assertThat(resolvableType1).isEqualTo(resolvableType2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#recursiveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#recursiveType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#recursiveTypeWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-33932\r\n@Test\r\nvoid recursiveTypeWithInterface() {\r\n    assertThat(ResolvableType.forClass(RecursiveMapWithInterface.class)).isEqualTo(ResolvableType.forClass(RecursiveMapWithInterface.class));\r\n    ResolvableType resolvableType1 = ResolvableType.forClassWithGenerics(Map.class, String.class, RecursiveMapWithInterface.class);\r\n    ResolvableType resolvableType2 = ResolvableType.forClassWithGenerics(Map.class, String.class, RecursiveMapWithInterface.class);\r\n    assertThat(resolvableType1).isEqualTo(resolvableType2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#recursiveTypeWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#recursiveTypeWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]