[
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#isJavaIdentifier(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isJavaIdentifier(String className) {\r\n    char[] chars = className.toCharArray();\r\n    for (int i = 0; i < chars.length; i++) {\r\n        if (i == 0 && !Character.isJavaIdentifierStart(chars[i])) {\r\n            return false;\r\n        }\r\n        if (i > 0 && chars[i] != '.' && !Character.isJavaIdentifierPart(chars[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#isJavaIdentifier(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.FileHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.InputStreamSource;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.util.function.ThrowingConsumer;\n\n/**\n * Repository of generated files. Can be used to add {@link Kind#SOURCE source},\n * {@link Kind#RESOURCE resource}, or {@link Kind#CLASS class} files generated\n * during ahead-of-time processing. Source and resource files are written using\n * {@code UTF-8} encoding.\n *\n * @author Phillip Webb\n * @author Brian Clozel\n * @author Stephane Nicoll\n * @since 6.0\n * @see InMemoryGeneratedFiles\n * @see FileSystemGeneratedFiles\n */\npublic interface GeneratedFiles {\n\n\t/**\n\t * Add a generated {@link Kind#SOURCE source file} with content from the\n\t * given {@link JavaFile}.\n\t * @param javaFile the java file to add\n\t */\n\tdefault void addSourceFile(JavaFile javaFile) {\n\t\tvalidatePackage(javaFile.packageName, javaFile.typeSpec.name);\n\t\tString className = javaFile.packageName + \".\" + javaFile.typeSpec.name;\n\t\taddSourceFile(className, javaFile::writeTo);\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#SOURCE source file} with content from the\n\t * given {@link CharSequence}.\n\t * @param className the class name that should be used to determine the path\n\t * of the file\n\t * @param content the contents of the file\n\t */\n\tdefault void addSourceFile(String className, CharSequence content) {\n\t\taddSourceFile(className, appendable -> appendable.append(content));\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#SOURCE source file} with content written to\n\t * an {@link Appendable} passed to the given {@link ThrowingConsumer}.\n\t * @param className the class name that should be used to determine the path\n\t * of the file\n\t * @param content a {@link ThrowingConsumer} that accepts an\n\t * {@link Appendable} which will receive the file contents\n\t */\n\tdefault void addSourceFile(String className, ThrowingConsumer<Appendable> content) {\n\t\taddFile(Kind.SOURCE, getClassNamePath(className), content);\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#SOURCE source file} with content from the\n\t * given {@link InputStreamSource}.\n\t * @param className the class name that should be used to determine the path\n\t * of the file\n\t * @param content an {@link InputStreamSource} that will provide an input\n\t * stream containing the file contents\n\t */\n\tdefault void addSourceFile(String className, InputStreamSource content) {\n\t\taddFile(Kind.SOURCE, getClassNamePath(className), content);\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#RESOURCE resource file} with content from the\n\t * given {@link CharSequence}.\n\t * @param path the relative path of the file\n\t * @param content the contents of the file\n\t */\n\tdefault void addResourceFile(String path, CharSequence content) {\n\t\taddResourceFile(path, appendable -> appendable.append(content));\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#RESOURCE resource file} with content written\n\t * to an {@link Appendable} passed to the given {@link ThrowingConsumer}.\n\t * @param path the relative path of the file\n\t * @param content a {@link ThrowingConsumer} that accepts an\n\t * {@link Appendable} which will receive the file contents\n\t */\n\tdefault void addResourceFile(String path, ThrowingConsumer<Appendable> content) {\n\t\taddFile(Kind.RESOURCE, path, content);\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#RESOURCE resource file} with content from the\n\t * given {@link InputStreamSource}.\n\t * @param path the relative path of the file\n\t * @param content an {@link InputStreamSource} that will provide an input\n\t * stream containing the file contents\n\t */\n\tdefault void addResourceFile(String path, InputStreamSource content) {\n\t\taddFile(Kind.RESOURCE, path, content);\n\t}\n\n\t/**\n\t * Add a generated {@link Kind#CLASS class file} with content from the given\n\t * {@link InputStreamSource}.\n\t * @param path the relative path of the file\n\t * @param content an {@link InputStreamSource} that will provide an input\n\t * stream containing the file contents\n\t */\n\tdefault void addClassFile(String path, InputStreamSource content) {\n\t\taddFile(Kind.CLASS, path, content);\n\t}\n\n\t/**\n\t * Add a generated file of the specified {@link Kind} with content from the\n\t * given {@link CharSequence}.\n\t * @param kind the kind of file being written\n\t * @param path the relative path of the file\n\t * @param content the contents of the file\n\t */\n\tdefault void addFile(Kind kind, String path, CharSequence content) {\n\t\taddFile(kind, path, appendable -> appendable.append(content));\n\t}\n\n\t/**\n\t * Add a generated file of the specified {@link Kind} with content written\n\t * to an {@link Appendable} passed to the given {@link ThrowingConsumer}.\n\t * @param kind the kind of file being written\n\t * @param path the relative path of the file\n\t * @param content a {@link ThrowingConsumer} that accepts an\n\t * {@link Appendable} which will receive the file contents\n\t */\n\tdefault void addFile(Kind kind, String path, ThrowingConsumer<Appendable> content) {\n\t\tAssert.notNull(content, \"'content' must not be null\");\n\t\taddFile(kind, path, new AppendableConsumerInputStreamSource(content));\n\t}\n\n\t/**\n\t * Add a generated file of the specified {@link Kind} with content from the\n\t * given {@link InputStreamSource}.\n\t * @param kind the kind of file being written\n\t * @param path the relative path of the file\n\t * @param content an {@link InputStreamSource} that will provide an input\n\t * stream containing the file contents\n\t */\n\tdefault void addFile(Kind kind, String path, InputStreamSource content) {\n\t\tAssert.notNull(kind, \"'kind' must not be null\");\n\t\tAssert.hasLength(path, \"'path' must not be empty\");\n\t\tAssert.notNull(content, \"'content' must not be null\");\n\t\thandleFile(kind, path, handler -> handler.create(content));\n\t}\n\n\t/**\n\t * Handle a generated file of the specified {@link Kind} with the given\n\t * {@linkplain FileHandler handler}. The file handler lets you consume\n\t * the content of the already generated file, if any and provide a way\n\t * to override its content if necessary.\n\t * @param kind the kind of file\n\t * @param path the relative path of the file\n\t * @param handler a consumer of a {@link FileHandler} for the file\n\t * @since 6.2\n\t */\n\tvoid handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler);\n\n\n\tprivate static String getClassNamePath(String className) {\n\t\tAssert.hasLength(className, \"'className' must not be empty\");\n\t\tvalidatePackage(ClassUtils.getPackageName(className), className);\n\t\tAssert.isTrue(isJavaIdentifier(className),\n\t\t\t\t\"'className' must be a valid identifier, got '\" + className + \"'\");\n\t\treturn ClassUtils.convertClassNameToResourcePath(className) + \".java\";\n\t}\n\n\tprivate static void validatePackage(String packageName, String className) {\n\t\tif (!StringUtils.hasLength(packageName)) {\n\t\t\tthrow new IllegalArgumentException(\"Could not add '\" + className + \"', \"\n\t\t\t\t\t+ \"processing classes in the default package is not supported. \"\n\t\t\t\t\t+ \"Did you forget to add a package statement?\");\n\t\t}\n\t}\n\n\tprivate static boolean isJavaIdentifier(String className) {\n\t\tchar[] chars = className.toCharArray();\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tif (i == 0 && !Character.isJavaIdentifierStart(chars[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (i > 0 && chars[i] != '.' && !Character.isJavaIdentifierPart(chars[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * The various kinds of generated files that are supported.\n\t */\n\tenum Kind {\n\n\t\t/**\n\t\t * A source file containing Java code that should be compiled.\n\t\t */\n\t\tSOURCE,\n\n\t\t/**\n\t\t * A resource file that should be directly added to the final application.\n\t\t * For example, a {@code .properties} file.\n\t\t */\n\t\tRESOURCE,\n\n\t\t/**\n\t\t * A class file containing bytecode. For example, the result of a proxy\n\t\t * generated using CGLIB.\n\t\t */\n\t\tCLASS\n\t}\n\n\n\t/**\n\t * Provide access to a particular file and offer convenient methods to retrieve,\n\t * save, or override its content.\n\t * @since 6.2\n\t */\n\tabstract class FileHandler {\n\n\t\tprivate final boolean exists;\n\n\t\tprivate final Supplier<InputStreamSource> existingContent;\n\n\t\tprotected FileHandler(boolean exists, Supplier<InputStreamSource> existingContent) {\n\t\t\tthis.exists = exists;\n\t\t\tthis.existingContent = existingContent;\n\t\t}\n\n\t\t/**\n\t\t * Specify whether the file already exists.\n\t\t * @return {@code true} if the file already exists\n\t\t */\n\t\tpublic boolean exists() {\n\t\t\treturn this.exists;\n\t\t}\n\n\t\t/**\n\t\t * Return an {@link InputStreamSource} for the content of the file or\n\t\t * {@code null} if the file does not exist.\n\t\t */\n\t\tpublic @Nullable InputStreamSource getContent() {\n\t\t\treturn (exists() ? this.existingContent.get() : null);\n\t\t}\n\n\t\t/**\n\t\t * Create a file with the given {@linkplain InputStreamSource content}.\n\t\t * @throws IllegalStateException if the file already exists\n\t\t */\n\t\tpublic void create(InputStreamSource content) {\n\t\t\tAssert.notNull(content, \"'content' must not be null\");\n\t\t\tif (exists()) {\n\t\t\t\tthrow new IllegalStateException(\"%s already exists\".formatted(this));\n\t\t\t}\n\t\t\tcopy(content, false);\n\t\t}\n\n\t\t/**\n\t\t * Override the content of the file handled by this instance using the\n\t\t * given {@linkplain InputStreamSource content}. If the file does not\n\t\t * exist, it is created.\n\t\t */\n\t\tpublic void override(InputStreamSource content) {\n\t\t\tAssert.notNull(content, \"'content' must not be null\");\n\t\t\tcopy(content, true);\n\t\t}\n\n\t\tprotected abstract void copy(InputStreamSource content, boolean override);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.FileHandler#exists",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#exists",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.FileHandler#existingContent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#existingContent",
    "headType": "field",
    "relation": "haveType",
    "tail": "Supplier<InputStreamSource>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify whether the file already exists.\r\n * @return {@code true} if the file already exists\r\n */\r\npublic boolean exists() {\r\n    return this.exists;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileHandler#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#getContent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an {@link InputStreamSource} for the content of the file or\r\n * {@code null} if the file does not exist.\r\n */\r\n@Nullable\r\npublic InputStreamSource getContent() {\r\n    return (exists() ? this.existingContent.get() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileHandler#getContent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#getContent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#create(InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a file with the given {@linkplain InputStreamSource content}.\r\n * @throws IllegalStateException if the file already exists\r\n */\r\npublic void create(InputStreamSource content) {\r\n    Assert.notNull(content, \"'content' must not be null\");\r\n    if (exists()) {\r\n        throw new IllegalStateException(\"%s already exists\".formatted(this));\r\n    }\r\n    copy(content, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileHandler#create(InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#override(InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override the content of the file handled by this instance using the\r\n * given {@linkplain InputStreamSource content}. If the file does not\r\n * exist, it is created.\r\n */\r\npublic void override(InputStreamSource content) {\r\n    Assert.notNull(content, \"'content' must not be null\");\r\n    copy(content, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileHandler#override(InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler#copy(InputStreamSource,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void copy(InputStreamSource content, boolean override);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileHandler#copy(InputStreamSource,boolean)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  }
]