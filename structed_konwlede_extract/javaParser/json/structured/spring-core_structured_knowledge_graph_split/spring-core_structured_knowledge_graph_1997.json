[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeEmptyString(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeEmptyString(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8String(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeUtf8String(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(6);\r\n    buffer.write(\"Spring\", StandardCharsets.UTF_8);\r\n    byte[] result = new byte[6];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(\"Spring\".getBytes(StandardCharsets.UTF_8));\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8String(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8String(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8StringOutGrowsCapacity(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeUtf8StringOutGrowsCapacity(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(5);\r\n    buffer.write(\"Spring €\", StandardCharsets.UTF_8);\r\n    byte[] result = new byte[10];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(\"Spring €\".getBytes(StandardCharsets.UTF_8));\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8StringOutGrowsCapacity(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeUtf8StringOutGrowsCapacity(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeIsoString(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeIsoString(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(\"\\u00A3\", StandardCharsets.ISO_8859_1);\r\n    byte[] result = new byte[1];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(\"\\u00A3\".getBytes(StandardCharsets.ISO_8859_1));\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeIsoString(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeIsoString(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeMultipleUtf8String(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeMultipleUtf8String(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    buffer.write(\"abc\", StandardCharsets.UTF_8);\r\n    assertThat(buffer.readableByteCount()).isEqualTo(3);\r\n    buffer.write(\"def\", StandardCharsets.UTF_8);\r\n    assertThat(buffer.readableByteCount()).isEqualTo(6);\r\n    buffer.write(\"ghi\", StandardCharsets.UTF_8);\r\n    assertThat(buffer.readableByteCount()).isEqualTo(9);\r\n    byte[] result = new byte[9];\r\n    buffer.read(result);\r\n    assertThat(result).isEqualTo(\"abcdefghi\".getBytes());\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeMultipleUtf8String(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeMultipleUtf8String(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringNullCharset(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toStringNullCharset(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    try {\r\n        assertThatIllegalArgumentException().isThrownBy(() -> buffer.toString(null));\r\n    } finally {\r\n        release(buffer);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toStringNullCharset(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringNullCharset(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringUtf8(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toStringUtf8(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    String spring = \"Spring\";\r\n    byte[] bytes = spring.getBytes(StandardCharsets.UTF_8);\r\n    DataBuffer buffer = createDataBuffer(bytes.length);\r\n    buffer.write(bytes);\r\n    String result = buffer.toString(StandardCharsets.UTF_8);\r\n    assertThat(result).isEqualTo(spring);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toStringUtf8(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toStringUtf8(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  }
]