[
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#forObject(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new type descriptor for an object.\r\n * <p>Use this factory method to introspect a source object before asking the\r\n * conversion system to convert it to some other type.\r\n * <p>If the provided object is {@code null}, returns {@code null}, else calls\r\n * {@link #valueOf(Class)} to build a TypeDescriptor from the object's class.\r\n * @param source the source object\r\n * @return the type descriptor\r\n */\r\n@Contract(\"!null -> !null; null -> null\")\r\n@Nullable\r\npublic static TypeDescriptor forObject(@Nullable Object source) {\r\n    return (source != null ? valueOf(source.getClass()) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#forObject(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#forObject(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#forObject(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#valueOf(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new type descriptor from the given type.\r\n * <p>Use this to instruct the conversion system to convert an object to a\r\n * specific target type, when no type location such as a method parameter or\r\n * field is available to provide additional conversion context.\r\n * <p>Generally prefer use of {@link #forObject(Object)} for constructing type\r\n * descriptors from source objects, as it handles the {@code null} object case.\r\n * @param type the class (may be {@code null} to indicate {@code Object.class})\r\n * @return the corresponding type descriptor\r\n */\r\npublic static TypeDescriptor valueOf(@Nullable Class<?> type) {\r\n    if (type == null) {\r\n        type = Object.class;\r\n    }\r\n    TypeDescriptor desc = commonTypesCache.get(type);\r\n    return (desc != null ? desc : new TypeDescriptor(ResolvableType.forClass(type), null, null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#valueOf(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#collection(Class<?>,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new type descriptor from a {@link java.util.Collection} type.\r\n * <p>Useful for converting to typed Collections.\r\n * <p>For example, a {@code List<String>} could be converted to a\r\n * {@code List<EmailAddress>} by converting to a targetType built with this method.\r\n * The method call to construct such a {@code TypeDescriptor} would look something\r\n * like: {@code collection(List.class, TypeDescriptor.valueOf(EmailAddress.class));}\r\n * @param collectionType the collection type, which must implement {@link Collection}.\r\n * @param elementTypeDescriptor a descriptor for the collection's element type,\r\n * used to convert collection elements\r\n * @return the collection type descriptor\r\n */\r\npublic static TypeDescriptor collection(Class<?> collectionType, @Nullable TypeDescriptor elementTypeDescriptor) {\r\n    Assert.notNull(collectionType, \"Collection type must not be null\");\r\n    if (!Collection.class.isAssignableFrom(collectionType)) {\r\n        throw new IllegalArgumentException(\"Collection type must be a [java.util.Collection]\");\r\n    }\r\n    ResolvableType element = (elementTypeDescriptor != null ? elementTypeDescriptor.resolvableType : null);\r\n    return new TypeDescriptor(ResolvableType.forClassWithGenerics(collectionType, element), null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#collection(Class<?>,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#map(Class<?>,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new type descriptor from a {@link java.util.Map} type.\r\n * <p>Useful for converting to typed Maps.\r\n * <p>For example, a {@code Map<String, String>} could be converted to a {@code Map<Id, EmailAddress>}\r\n * by converting to a targetType built with this method:\r\n * The method call to construct such a TypeDescriptor would look something like:\r\n * <pre class=\"code\">\r\n * map(Map.class, TypeDescriptor.valueOf(Id.class), TypeDescriptor.valueOf(EmailAddress.class));\r\n * </pre>\r\n * @param mapType the map type, which must implement {@link Map}\r\n * @param keyTypeDescriptor a descriptor for the map's key type, used to convert map keys\r\n * @param valueTypeDescriptor the map's value type, used to convert map values\r\n * @return the map type descriptor\r\n */\r\npublic static TypeDescriptor map(Class<?> mapType, @Nullable TypeDescriptor keyTypeDescriptor, @Nullable TypeDescriptor valueTypeDescriptor) {\r\n    Assert.notNull(mapType, \"Map type must not be null\");\r\n    if (!Map.class.isAssignableFrom(mapType)) {\r\n        throw new IllegalArgumentException(\"Map type must be a [java.util.Map]\");\r\n    }\r\n    ResolvableType key = (keyTypeDescriptor != null ? keyTypeDescriptor.resolvableType : null);\r\n    ResolvableType value = (valueTypeDescriptor != null ? valueTypeDescriptor.resolvableType : null);\r\n    return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#map(Class<?>,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#array(TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new type descriptor as an array of the specified type.\r\n * <p>For example to create a {@code Map<String,String>[]} use:\r\n * <pre class=\"code\">\r\n * TypeDescriptor.array(TypeDescriptor.map(Map.class, TypeDescriptor.value(String.class), TypeDescriptor.value(String.class)));\r\n * </pre>\r\n * @param elementTypeDescriptor the {@link TypeDescriptor} of the array element or {@code null}\r\n * @return an array {@link TypeDescriptor} or {@code null} if {@code elementTypeDescriptor} is {@code null}\r\n * @since 3.2.1\r\n */\r\n@Contract(\"!null -> !null; null -> null\")\r\n@Nullable\r\npublic static TypeDescriptor array(@Nullable TypeDescriptor elementTypeDescriptor) {\r\n    if (elementTypeDescriptor == null) {\r\n        return null;\r\n    }\r\n    return new TypeDescriptor(ResolvableType.forArrayComponent(elementTypeDescriptor.resolvableType), null, elementTypeDescriptor.getAnnotations());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#array(TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#array(TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#array(TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#nested(MethodParameter,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a type descriptor for a nested type declared within the method parameter.\r\n * <p>For example, if the methodParameter is a {@code List<String>} and the\r\n * nesting level is 1, the nested type descriptor will be String.class.\r\n * <p>If the methodParameter is a {@code List<List<String>>} and the nesting\r\n * level is 2, the nested type descriptor will also be a String.class.\r\n * <p>If the methodParameter is a {@code Map<Integer, String>} and the nesting\r\n * level is 1, the nested type descriptor will be String, derived from the map value.\r\n * <p>If the methodParameter is a {@code List<Map<Integer, String>>} and the\r\n * nesting level is 2, the nested type descriptor will be String, derived from the map value.\r\n * <p>Returns {@code null} if a nested type cannot be obtained because it was not declared.\r\n * For example, if the method parameter is a {@code List<?>}, the nested type\r\n * descriptor returned will be {@code null}.\r\n * @param methodParameter the method parameter with a nestingLevel of 1\r\n * @param nestingLevel the nesting level of the collection/array element or\r\n * map key/value declaration within the method parameter\r\n * @return the nested type descriptor at the specified nesting level,\r\n * or {@code null} if it could not be obtained\r\n * @throws IllegalArgumentException if the nesting level of the input\r\n * {@link MethodParameter} argument is not 1, or if the types up to the\r\n * specified nesting level are not of collection, array, or map types\r\n */\r\n@Nullable\r\npublic static TypeDescriptor nested(MethodParameter methodParameter, int nestingLevel) {\r\n    if (methodParameter.getNestingLevel() != 1) {\r\n        throw new IllegalArgumentException(\"MethodParameter nesting level must be 1: \" + \"use the nestingLevel parameter to specify the desired nestingLevel for nested type traversal\");\r\n    }\r\n    return new TypeDescriptor(methodParameter).nested(nestingLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#nested(MethodParameter,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#nested(MethodParameter,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#nested(Field,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a type descriptor for a nested type declared within the field.\r\n * <p>For example, if the field is a {@code List<String>} and the nesting\r\n * level is 1, the nested type descriptor will be {@code String.class}.\r\n * <p>If the field is a {@code List<List<String>>} and the nesting level is\r\n * 2, the nested type descriptor will also be a {@code String.class}.\r\n * <p>If the field is a {@code Map<Integer, String>} and the nesting level\r\n * is 1, the nested type descriptor will be String, derived from the map value.\r\n * <p>If the field is a {@code List<Map<Integer, String>>} and the nesting\r\n * level is 2, the nested type descriptor will be String, derived from the map value.\r\n * <p>Returns {@code null} if a nested type cannot be obtained because it was not\r\n * declared. For example, if the field is a {@code List<?>}, the nested type\r\n * descriptor returned will be {@code null}.\r\n * @param field the field\r\n * @param nestingLevel the nesting level of the collection/array element or\r\n * map key/value declaration within the field\r\n * @return the nested type descriptor at the specified nesting level,\r\n * or {@code null} if it could not be obtained\r\n * @throws IllegalArgumentException if the types up to the specified nesting\r\n * level are not of collection, array, or map types\r\n */\r\n@Nullable\r\npublic static TypeDescriptor nested(Field field, int nestingLevel) {\r\n    return new TypeDescriptor(field).nested(nestingLevel);\r\n}",
    "tailType": "method_code"
  }
]