[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer write(byte[] source) {\r\n    Assert.notNull(source, \"Byte array must not be null\");\r\n    write(source, 0, source.length);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer write(byte[] source, int offset, int length) {\r\n    Assert.notNull(source, \"Byte array must not be null\");\r\n    ensureWritable(length);\r\n    ByteBuffer tmp = this.byteBuffer.duplicate();\r\n    int limit = this.writePosition + length;\r\n    tmp.clear().position(this.writePosition).limit(limit);\r\n    tmp.put(source, offset, length);\r\n    this.writePosition += length;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer write(DataBuffer... dataBuffers) {\r\n    if (!ObjectUtils.isEmpty(dataBuffers)) {\r\n        ByteBuffer[] byteBuffers = new ByteBuffer[dataBuffers.length];\r\n        for (int i = 0; i < dataBuffers.length; i++) {\r\n            byteBuffers[i] = ByteBuffer.allocate(dataBuffers[i].readableByteCount());\r\n            dataBuffers[i].toByteBuffer(byteBuffers[i]);\r\n        }\r\n        write(byteBuffers);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer write(ByteBuffer... buffers) {\r\n    if (!ObjectUtils.isEmpty(buffers)) {\r\n        int capacity = Arrays.stream(buffers).mapToInt(ByteBuffer::remaining).sum();\r\n        ensureWritable(capacity);\r\n        Arrays.stream(buffers).forEach(this::write);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void write(ByteBuffer source) {\r\n    int length = source.remaining();\r\n    ByteBuffer tmp = this.byteBuffer.duplicate();\r\n    int limit = this.writePosition + source.remaining();\r\n    tmp.clear().position(this.writePosition).limit(limit);\r\n    tmp.put(source);\r\n    this.writePosition += length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic DefaultDataBuffer slice(int index, int length) {\r\n    checkIndex(index, length);\r\n    int oldPosition = this.byteBuffer.position();\r\n    try {\r\n        this.byteBuffer.position(index);\r\n        ByteBuffer slice = this.byteBuffer.slice();\r\n        slice.limit(length);\r\n        return new SlicedDefaultDataBuffer(slice, this.dataBufferFactory, length);\r\n    } finally {\r\n        this.byteBuffer.position(oldPosition);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#slice(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#split(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer split(int index) {\r\n    checkIndex(index);\r\n    ByteBuffer split = this.byteBuffer.duplicate().clear().position(0).limit(index).slice();\r\n    DefaultDataBuffer result = new DefaultDataBuffer(this.dataBufferFactory, split);\r\n    result.writePosition = Math.min(this.writePosition, index);\r\n    result.readPosition = Math.min(this.readPosition, index);\r\n    this.byteBuffer = this.byteBuffer.duplicate().clear().position(index).limit(this.byteBuffer.capacity()).slice();\r\n    this.writePosition = Math.max(this.writePosition, index) - index;\r\n    this.readPosition = Math.max(this.readPosition, index) - index;\r\n    this.capacity = this.byteBuffer.capacity();\r\n    return result;\r\n}",
    "tailType": "method_code"
  }
]