[
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleBoundedWildcard()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasResolvableGenericsWithSingleBoundedWildcard() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"wildcardType\"));\r\n    assertThat(type.hasResolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleBoundedWildcard()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleBoundedWildcard()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleParameterizedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasResolvableGenericsWithSingleParameterizedType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.hasResolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleParameterizedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleParameterizedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleWildcard()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasResolvableGenericsWithSingleWildcard() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"anyListElement\"));\r\n    assertThat(type.hasResolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleWildcard()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasResolvableGenericsWithSingleWildcard()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenerics() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    assertThat(type.hasUnresolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsBasedOnOwnGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsBasedOnOwnGenerics() {\r\n    ResolvableType type = ResolvableType.forClass(List.class);\r\n    assertThat(type.hasUnresolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsBasedOnOwnGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsBasedOnOwnGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfNotResolvable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWhenSelfNotResolvable() {\r\n    ResolvableType type = ResolvableType.forClass(List.class).getGeneric();\r\n    assertThat(type.hasUnresolvableGenerics()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfNotResolvable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenSelfNotResolvable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasUnresolvableGenericsWhenImplementingRawInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasUnresolvableGenericsWhenImplementingRawInterface() {\r\n    ResolvableType type = ResolvableType.forClass(MySimpleInterfaceTypeWithImplementsRaw.class);\r\n    for (ResolvableType generic : type.getGenerics()) {\r\n        assertThat(generic.resolve()).isNotNull();\r\n    }\r\n    assertThat(type.hasUnresolvableGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  }
]