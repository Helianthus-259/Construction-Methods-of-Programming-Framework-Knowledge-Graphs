[
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#firstElementWithList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#firstElementWithList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid lastElementWithSet() {\r\n    Set<Integer> set = new HashSet<>();\r\n    set.add(17);\r\n    set.add(3);\r\n    set.add(2);\r\n    set.add(1);\r\n    assertThat(CollectionUtils.lastElement(set)).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#lastElementWithSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithSortedSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid lastElementWithSortedSet() {\r\n    SortedSet<Integer> sortedSet = new TreeSet<>();\r\n    sortedSet.add(17);\r\n    sortedSet.add(3);\r\n    sortedSet.add(2);\r\n    sortedSet.add(1);\r\n    assertThat(CollectionUtils.lastElement(sortedSet)).isEqualTo(17);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#lastElementWithSortedSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithSortedSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid lastElementWithList() {\r\n    List<Integer> list = new ArrayList<>();\r\n    list.add(1);\r\n    list.add(2);\r\n    list.add(3);\r\n    assertThat(CollectionUtils.lastElement(list)).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#lastElementWithList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#lastElementWithList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#toArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toArray() {\r\n    Vector<String> vector = new Vector<>();\r\n    vector.add(\"foo\");\r\n    vector.add(\"bar\");\r\n    Enumeration<String> enumeration = vector.elements();\r\n    assertThat(CollectionUtils.toArray(enumeration, new String[] ;)).containsExactly(\"foo\", \"bar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#toArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#toArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#conversionOfEmptyMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conversionOfEmptyMap() {\r\n    MultiValueMap<String, String> asMultiValueMap = CollectionUtils.toMultiValueMap(new HashMap<>());\r\n    assertThat(asMultiValueMap).isEmpty();\r\n    assertThat(asMultiValueMap).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#conversionOfEmptyMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#conversionOfEmptyMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#conversionOfNonEmptyMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conversionOfNonEmptyMap() {\r\n    Map<String, List<String>> wrapped = new HashMap<>();\r\n    wrapped.put(\"key\", Arrays.asList(\"first\", \"second\"));\r\n    MultiValueMap<String, String> asMultiValueMap = CollectionUtils.toMultiValueMap(wrapped);\r\n    assertThat(asMultiValueMap).containsAllEntriesOf(wrapped);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#conversionOfNonEmptyMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#conversionOfNonEmptyMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]