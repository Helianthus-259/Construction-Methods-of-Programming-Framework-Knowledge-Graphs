[
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#BYTE_ARRAY_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#CONVERTIBLE_PAIRS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#CONVERTIBLE_PAIRS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<ConvertiblePair>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return CONVERTIBLE_PAIRS;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);\r\n    if (sourceType.isAssignableTo(BYTE_BUFFER_TYPE)) {\r\n        return (byteBufferTarget || matchesFromByteBuffer(targetType));\r\n    }\r\n    return (byteBufferTarget && matchesToByteBuffer(sourceType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#matchesFromByteBuffer(TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean matchesFromByteBuffer(TypeDescriptor targetType) {\r\n    return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) || this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#matchesFromByteBuffer(TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#matchesToByteBuffer(TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean matchesToByteBuffer(TypeDescriptor sourceType) {\r\n    return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) || this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#matchesToByteBuffer(TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);\r\n    if (source instanceof ByteBuffer buffer) {\r\n        return (byteBufferTarget ? buffer.duplicate() : convertFromByteBuffer(buffer, targetType));\r\n    }\r\n    if (byteBufferTarget) {\r\n        return convertToByteBuffer(source, sourceType);\r\n    }\r\n    // Should not happen\r\n    throw new IllegalStateException(\"Unexpected source/target types\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convertFromByteBuffer(ByteBuffer,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object convertFromByteBuffer(ByteBuffer source, TypeDescriptor targetType) {\r\n    byte[] bytes = new byte[source.remaining()];\r\n    source.get(bytes);\r\n    if (targetType.isAssignableTo(BYTE_ARRAY_TYPE)) {\r\n        return bytes;\r\n    }\r\n    return this.conversionService.convert(bytes, BYTE_ARRAY_TYPE, targetType);\r\n}",
    "tailType": "method_code"
  }
]