[
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toSingleValueMap() {\r\n    List<String> values = new ArrayList<>(2);\r\n    values.add(\"value1\");\r\n    values.add(\"value2\");\r\n    map.put(\"key\", values);\r\n    Map<String, String> singleValueMap = map.toSingleValueMap();\r\n    assertThat(singleValueMap).hasSize(1);\r\n    assertThat(singleValueMap.get(\"key\")).isEqualTo(\"value1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMapWithEmptyList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toSingleValueMapWithEmptyList() {\r\n    map.put(\"key\", Collections.emptyList());\r\n    Map<String, String> singleValueMap = map.toSingleValueMap();\r\n    assertThat(singleValueMap).isEmpty();\r\n    assertThat(singleValueMap.get(\"key\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMapWithEmptyList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#toSingleValueMapWithEmptyList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#equals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equals() {\r\n    map.set(\"key1\", \"value1\");\r\n    assertThat(map).isEqualTo(map);\r\n    MultiValueMap<String, String> o1 = new LinkedMultiValueMap<>();\r\n    o1.set(\"key1\", \"value1\");\r\n    assertThat(o1).isEqualTo(map);\r\n    assertThat(map).isEqualTo(o1);\r\n    Map<String, List<String>> o2 = new HashMap<>();\r\n    o2.put(\"key1\", Collections.singletonList(\"value1\"));\r\n    assertThat(o2).isEqualTo(map);\r\n    assertThat(map).isEqualTo(o2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedMultiValueMapTests#equals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#equals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.nio.file.Path;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A {@link NativeConfigurationWriter} implementation that writes the\n * configuration to disk.\n *\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n * @since 6.0\n * @see <a href=\"https://www.graalvm.org/22.0/reference-manual/native-image/BuildConfiguration/\">Native Image Build Configuration</a>\n */\npublic class FileNativeConfigurationWriter extends NativeConfigurationWriter {\n\n\tprivate final Path basePath;\n\n\tprivate final @Nullable String groupId;\n\n\tprivate final @Nullable String artifactId;\n\n\tpublic FileNativeConfigurationWriter(Path basePath) {\n\t\tthis(basePath, null, null);\n\t}\n\n\tpublic FileNativeConfigurationWriter(Path basePath, @Nullable String groupId, @Nullable String artifactId) {\n\t\tthis.basePath = basePath;\n\t\tif ((groupId == null && artifactId != null) || (groupId != null && artifactId == null)) {\n\t\t\tthrow new IllegalArgumentException(\"groupId and artifactId must be both null or both non-null\");\n\t\t}\n\t\tthis.groupId = groupId;\n\t\tthis.artifactId = artifactId;\n\t}\n\n\t@Override\n\tprotected void writeTo(String fileName, Consumer<BasicJsonWriter> writer) {\n\t\ttry {\n\t\t\tFile file = createIfNecessary(fileName);\n\t\t\ttry (FileWriter out = new FileWriter(file)) {\n\t\t\t\twriter.accept(createJsonWriter(out));\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to write native configuration for \" + fileName, ex);\n\t\t}\n\t}\n\n\tprivate File createIfNecessary(String filename) throws IOException {\n\t\tPath outputDirectory = this.basePath.resolve(\"META-INF\").resolve(\"native-image\");\n\t\tif (this.groupId != null && this.artifactId != null) {\n\t\t\toutputDirectory = outputDirectory.resolve(this.groupId).resolve(this.artifactId);\n\t\t}\n\t\toutputDirectory.toFile().mkdirs();\n\t\tFile file = outputDirectory.resolve(filename).toFile();\n\t\tfile.createNewFile();\n\t\treturn file;\n\t}\n\n\tprivate BasicJsonWriter createJsonWriter(Writer out) {\n\t\treturn new BasicJsonWriter(out);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter#basePath",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter#basePath",
    "headType": "field",
    "relation": "haveType",
    "tail": "Path",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter#groupId",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter#groupId",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter#artifactId",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter#artifactId",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter#writeTo(String,Consumer<BasicJsonWriter>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void writeTo(String fileName, Consumer<BasicJsonWriter> writer) {\r\n    try {\r\n        File file = createIfNecessary(fileName);\r\n        try (FileWriter out = new FileWriter(file)) {\r\n            writer.accept(createJsonWriter(out));\r\n        }\r\n    } catch (IOException ex) {\r\n        throw new IllegalStateException(\"Failed to write native configuration for \" + fileName, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.FileNativeConfigurationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.FileNativeConfigurationWriter#writeTo(String,Consumer<BasicJsonWriter>)",
    "tailType": "method"
  }
]