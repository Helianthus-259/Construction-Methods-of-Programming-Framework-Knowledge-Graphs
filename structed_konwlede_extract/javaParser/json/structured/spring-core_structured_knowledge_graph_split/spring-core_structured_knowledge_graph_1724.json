[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithTypeHierarchy(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private MergedAnnotation<?> testGetWithTypeHierarchy(Class<?> element, String... expected) {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY).get(ComponentScan.class);\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(expected);\r\n    assertThat(annotation.getStringArray(\"basePackages\")).containsExactly(expected);\r\n    return annotation;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithTypeHierarchy(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWhenMultipleMetaAnnotationsHaveClashingAttributeNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyWhenMultipleMetaAnnotationsHaveClashingAttributeNames() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(AliasedComposedContextConfigurationAndTestPropertySourceClass.class, SearchStrategy.TYPE_HIERARCHY);\r\n    MergedAnnotation<?> contextConfig = annotations.get(ContextConfiguration.class);\r\n    assertThat(contextConfig.getStringArray(\"locations\")).containsExactly(\"test.xml\");\r\n    assertThat(contextConfig.getStringArray(\"value\")).containsExactly(\"test.xml\");\r\n    MergedAnnotation<?> testPropSource = annotations.get(TestPropertySource.class);\r\n    assertThat(testPropSource.getStringArray(\"locations\")).containsExactly(\"test.properties\");\r\n    assertThat(testPropSource.getStringArray(\"value\")).containsExactly(\"test.properties\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWhenMultipleMetaAnnotationsHaveClashingAttributeNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWhenMultipleMetaAnnotationsHaveClashingAttributeNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyOnMethodWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyOnMethodWithSingleElementOverridingAnArrayViaAliasFor() throws Exception {\r\n    testGetWithTypeHierarchyWebMapping(WebController.class.getMethod(\"getMappedWithValueAttribute\"));\r\n    testGetWithTypeHierarchyWebMapping(WebController.class.getMethod(\"getMappedWithPathAttribute\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyOnMethodWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyOnMethodWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithTypeHierarchyWebMapping(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testGetWithTypeHierarchyWebMapping(AnnotatedElement element) {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY).get(RequestMapping.class);\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"/test\");\r\n    assertThat(annotation.getStringArray(\"path\")).containsExactly(\"/test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithTypeHierarchyWebMapping(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithJavaxAnnotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithJavaxAnnotationType() {\r\n    assertThat(MergedAnnotations.from(ResourceHolder.class).get(Resource.class).getString(\"name\")).isEqualTo(\"x\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithJavaxAnnotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithJavaxAnnotationType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamInheritedFromClassWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamInheritedFromClassWithInterface() throws Exception {\r\n    Method method = TransactionalServiceImpl.class.getMethod(\"doIt\");\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamInheritedFromClassWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamInheritedFromClassWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamTypeHierarchyFromClassWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamTypeHierarchyFromClassWithInterface() throws Exception {\r\n    Method method = TransactionalServiceImpl.class.getMethod(\"doIt\");\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).stream(Transactional.class)).hasSize(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamTypeHierarchyFromClassWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamTypeHierarchyFromClassWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getFromMethodWithMethodAnnotationOnLeaf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFromMethodWithMethodAnnotationOnLeaf() throws Exception {\r\n    Method method = Leaf.class.getMethod(\"annotatedOnLeaf\");\r\n    assertThat(method.getAnnotation(Order.class)).isNotNull();\r\n    assertThat(MergedAnnotations.from(method).get(Order.class).getDistance()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class).getDistance()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  }
]