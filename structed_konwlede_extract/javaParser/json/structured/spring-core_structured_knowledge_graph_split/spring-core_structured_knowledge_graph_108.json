[
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getPackageName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getSimpleName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getSimpleName() {\r\n    return this.simpleName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#getSimpleName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getSimpleName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getEnclosingType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic TypeReference getEnclosingType() {\r\n    return this.enclosingType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#getEnclosingType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getEnclosingType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getEnclosingType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#addPackageIfNecessary(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected String addPackageIfNecessary(String part) {\r\n    if (this.packageName.isEmpty() || (this.packageName.equals(\"java.lang\") && isPrimitive())) {\r\n        return part;\r\n    }\r\n    return this.packageName + '.' + part;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#addPackageIfNecessary(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract boolean isPrimitive();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#isPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#compareTo(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compareTo(TypeReference other) {\r\n    return this.getCanonicalName().compareToIgnoreCase(other.getCanonicalName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#compareTo(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#compareTo(TypeReference)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof TypeReference that && getCanonicalName().equals(that.getCanonicalName())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return Objects.hash(getCanonicalName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#hashCode()",
    "tailType": "method"
  }
]