[
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#closeAllocators()",
    "headType": "method",
    "relation": "use",
    "tail": "@AfterAll",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#dataBufferFactories()",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Stream<Arguments> dataBufferFactories() {\r\n    return Stream.of(// Netty 4\r\n    argumentSet(\"NettyDataBufferFactory - UnpooledByteBufAllocator - preferDirect = true\", new NettyDataBufferFactory(netty4OffHeapUnpooled)), argumentSet(\"NettyDataBufferFactory - UnpooledByteBufAllocator - preferDirect = false\", new NettyDataBufferFactory(netty4OnHeapUnpooled)), argumentSet(\"NettyDataBufferFactory - PooledByteBufAllocator - preferDirect = true\", new NettyDataBufferFactory(netty4OffHeapPooled)), argumentSet(\"NettyDataBufferFactory - PooledByteBufAllocator - preferDirect = false\", new NettyDataBufferFactory(netty4OnHeapPooled)), // Netty 5\r\n    argumentSet(\"Netty5DataBufferFactory - BufferAllocator.onHeapUnpooled()\", new Netty5DataBufferFactory(netty5OnHeapUnpooled)), argumentSet(\"Netty5DataBufferFactory - BufferAllocator.offHeapUnpooled()\", new Netty5DataBufferFactory(netty5OffHeapUnpooled)), argumentSet(\"Netty5DataBufferFactory - BufferAllocator.onHeapPooled()\", new Netty5DataBufferFactory(netty5OnHeapPooled)), argumentSet(\"Netty5DataBufferFactory - BufferAllocator.offHeapPooled()\", new Netty5DataBufferFactory(netty5OffHeapPooled)), // Default\r\n    argumentSet(\"DefaultDataBufferFactory - preferDirect = true\", new DefaultDataBufferFactory(true)), argumentSet(\"DefaultDataBufferFactory - preferDirect = false\", new DefaultDataBufferFactory(false)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.AbstractDataBufferAllocatingTests#dataBufferFactories()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.RecordComponentVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * A visitor to visit a record component. The methods of this class must be called in the following\n * order: ( {@code visitAnnotation} | {@code visitTypeAnnotation} | {@code visitAttribute} )* {@code\n * visitEnd}.\n *\n * @author Remi Forax\n * @author Eric Bruneton\n */\npublic abstract class RecordComponentVisitor {\n  /**\n   * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n   * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n   */\n  protected final int api;\n\n  /**\n   * The record visitor to which this visitor must delegate method calls. May be {@literal null}.\n   */\n  protected RecordComponentVisitor delegate;\n\n  /**\n   * Constructs a new {@link RecordComponentVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM8}\n   *     or {@link Opcodes#ASM9}.\n   */\n  protected RecordComponentVisitor(final int api) {\n    this(api, null);\n  }\n\n  /**\n   * Constructs a new {@link RecordComponentVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be {@link Opcodes#ASM8}.\n   * @param recordComponentVisitor the record component visitor to which this visitor must delegate\n   *     method calls. May be null.\n   */\n  protected RecordComponentVisitor(\n      final int api, final RecordComponentVisitor recordComponentVisitor) {\n    if (api != Opcodes.ASM9\n        && api != Opcodes.ASM8\n        && api != Opcodes.ASM7\n        && api != Opcodes.ASM6\n        && api != Opcodes.ASM5\n        && api != Opcodes.ASM4\n        && api != Opcodes.ASM10_EXPERIMENTAL) {\n      throw new IllegalArgumentException(\"Unsupported api \" + api);\n    }\n    // SPRING PATCH: no preview mode check for ASM experimental\n    this.api = api;\n    this.delegate = recordComponentVisitor;\n  }\n\n  /**\n   * The record visitor to which this visitor must delegate method calls. May be {@literal null}.\n   *\n   * @return the record visitor to which this visitor must delegate method calls, or {@literal\n   *     null}.\n   */\n  public RecordComponentVisitor getDelegate() {\n    return delegate;\n  }\n\n  /**\n   * Visits an annotation of the record component.\n   *\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n    if (delegate != null) {\n      return delegate.visitAnnotation(descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits an annotation on a type in the record component signature.\n   *\n   * @param typeRef a reference to the annotated type. The sort of this type reference must be\n   *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n   *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n   *     {@link TypeReference}.\n   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n   *     'typeRef' as a whole.\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    if (delegate != null) {\n      return delegate.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits a non standard attribute of the record component.\n   *\n   * @param attribute an attribute.\n   */\n  public void visitAttribute(final Attribute attribute) {\n    if (delegate != null) {\n      delegate.visitAttribute(attribute);\n    }\n  }\n\n  /**\n   * Visits the end of the record component. This method, which is the last one to be called, is\n   * used to inform the visitor that everything have been visited.\n   */\n  public void visitEnd() {\n    if (delegate != null) {\n      delegate.visitEnd();\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentVisitor#api",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#api",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.RecordComponentVisitor#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "RecordComponentVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#getDelegate()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The record visitor to which this visitor must delegate method calls. May be {@literal null}.\r\n *\r\n * @return the record visitor to which this visitor must delegate method calls, or {@literal\r\n *     null}.\r\n */\r\npublic RecordComponentVisitor getDelegate() {\r\n    return delegate;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentVisitor#getDelegate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation of the record component.\r\n *\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (delegate != null) {\r\n        return delegate.visitAnnotation(descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentVisitor#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on a type in the record component signature.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\r\n *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\r\n *     {@link TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (delegate != null) {\r\n        return delegate.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a non standard attribute of the record component.\r\n *\r\n * @param attribute an attribute.\r\n */\r\npublic void visitAttribute(final Attribute attribute) {\r\n    if (delegate != null) {\r\n        delegate.visitAttribute(attribute);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentVisitor#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the end of the record component. This method, which is the last one to be called, is\r\n * used to inform the visitor that everything have been visited.\r\n */\r\npublic void visitEnd() {\r\n    if (delegate != null) {\r\n        delegate.visitEnd();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentVisitor#visitEnd()",
    "tailType": "method"
  }
]