[
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.function.Consumer;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.codec.AbstractDecoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Vladislav Kisel\n */\nclass NettyByteBufDecoderTests extends AbstractDecoderTests<NettyByteBufDecoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\n\tNettyByteBufDecoderTests() {\n\t\tsuper(new NettyByteBufDecoder());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canDecode() {\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuf.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuf.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decode() {\n\t\tFlux<DataBuffer> input = Flux.concat(\n\t\t\t\tdataBuffer(this.fooBytes),\n\t\t\t\tdataBuffer(this.barBytes));\n\n\t\ttestDecodeAll(input, ByteBuf.class, step -> step\n\t\t\t\t.consumeNextWith(expectByteBuffer(Unpooled.copiedBuffer(this.fooBytes)))\n\t\t\t\t.consumeNextWith(expectByteBuffer(Unpooled.copiedBuffer(this.barBytes)))\n\t\t\t\t.verifyComplete());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decodeToMono() {\n\t\tFlux<DataBuffer> input = Flux.concat(\n\t\t\t\tdataBuffer(this.fooBytes),\n\t\t\t\tdataBuffer(this.barBytes));\n\n\t\tByteBuf expected = Unpooled.buffer(this.fooBytes.length + this.barBytes.length)\n\t\t\t\t.writeBytes(this.fooBytes)\n\t\t\t\t.writeBytes(this.barBytes)\n\t\t\t\t.readerIndex(0);\n\n\t\ttestDecodeToMonoAll(input, ByteBuf.class, step -> step\n\t\t\t\t.consumeNextWith(expectByteBuffer(expected))\n\t\t\t\t.verifyComplete());\n\t}\n\n\tprivate Consumer<ByteBuf> expectByteBuffer(ByteBuf expected) {\n\t\treturn actual -> assertThat(actual).isEqualTo(expected);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#canDecode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canDecode() {\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuf.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(ByteBuf.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#canDecode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decode() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    testDecodeAll(input, ByteBuf.class, step -> step.consumeNextWith(expectByteBuffer(Unpooled.copiedBuffer(this.fooBytes))).consumeNextWith(expectByteBuffer(Unpooled.copiedBuffer(this.barBytes))).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#decode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decodeToMono() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    ByteBuf expected = Unpooled.buffer(this.fooBytes.length + this.barBytes.length).writeBytes(this.fooBytes).writeBytes(this.barBytes).readerIndex(0);\r\n    testDecodeToMonoAll(input, ByteBuf.class, step -> step.consumeNextWith(expectByteBuffer(expected)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.NettyByteBufDecoderTests#decodeToMono()",
    "tailType": "method"
  }
]