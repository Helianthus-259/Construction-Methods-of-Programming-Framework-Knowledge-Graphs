[
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#touch(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#release()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean release() {\r\n    return this.byteBuf.release();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#release()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#release()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof NettyDataBuffer that && this.byteBuf.equals(that.byteBuf)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.byteBuf.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.byteBuf.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.NoSuchElementException;\nimport java.util.function.IntPredicate;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufUtil;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Implementation of the {@code DataBuffer} interface that wraps a Netty 4\n * {@link ByteBuf}. Typically constructed with {@link NettyDataBufferFactory}.\n *\n * @author Arjen Poutsma\n * @author Brian Clozel\n * @since 5.0\n */\npublic class NettyDataBuffer implements PooledDataBuffer {\n\n\tprivate ByteBuf byteBuf;\n\n\tprivate final NettyDataBufferFactory dataBufferFactory;\n\n\n\t/**\n\t * Create a new {@code NettyDataBuffer} based on the given {@code ByteBuff}.\n\t * @param byteBuf the buffer to base this buffer on\n\t */\n\tNettyDataBuffer(ByteBuf byteBuf, NettyDataBufferFactory dataBufferFactory) {\n\t\tAssert.notNull(byteBuf, \"ByteBuf must not be null\");\n\t\tAssert.notNull(dataBufferFactory, \"NettyDataBufferFactory must not be null\");\n\t\tthis.byteBuf = byteBuf;\n\t\tthis.dataBufferFactory = dataBufferFactory;\n\t}\n\n\n\t/**\n\t * Directly exposes the native {@code ByteBuf} that this buffer is based on.\n\t * @return the wrapped byte buffer\n\t */\n\tpublic ByteBuf getNativeBuffer() {\n\t\treturn this.byteBuf;\n\t}\n\n\t@Override\n\tpublic NettyDataBufferFactory factory() {\n\t\treturn this.dataBufferFactory;\n\t}\n\n\t@Override\n\tpublic int indexOf(IntPredicate predicate, int fromIndex) {\n\t\tAssert.notNull(predicate, \"IntPredicate must not be null\");\n\t\tif (fromIndex < 0) {\n\t\t\tfromIndex = 0;\n\t\t}\n\t\telse if (fromIndex >= this.byteBuf.writerIndex()) {\n\t\t\treturn -1;\n\t\t}\n\t\tint length = this.byteBuf.writerIndex() - fromIndex;\n\t\treturn this.byteBuf.forEachByte(fromIndex, length, predicate.negate()::test);\n\t}\n\n\t@Override\n\tpublic int lastIndexOf(IntPredicate predicate, int fromIndex) {\n\t\tAssert.notNull(predicate, \"IntPredicate must not be null\");\n\t\tif (fromIndex < 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tfromIndex = Math.min(fromIndex, this.byteBuf.writerIndex() - 1);\n\t\treturn this.byteBuf.forEachByteDesc(0, fromIndex + 1, predicate.negate()::test);\n\t}\n\n\t@Override\n\tpublic int readableByteCount() {\n\t\treturn this.byteBuf.readableBytes();\n\t}\n\n\t@Override\n\tpublic int writableByteCount() {\n\t\treturn this.byteBuf.writableBytes();\n\t}\n\n\t@Override\n\tpublic int readPosition() {\n\t\treturn this.byteBuf.readerIndex();\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer readPosition(int readPosition) {\n\t\tthis.byteBuf.readerIndex(readPosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic int writePosition() {\n\t\treturn this.byteBuf.writerIndex();\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer writePosition(int writePosition) {\n\t\tthis.byteBuf.writerIndex(writePosition);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic byte getByte(int index) {\n\t\treturn this.byteBuf.getByte(index);\n\t}\n\n\t@Override\n\tpublic int capacity() {\n\t\treturn this.byteBuf.capacity();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic NettyDataBuffer capacity(int capacity) {\n\t\tthis.byteBuf.capacity(capacity);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer ensureWritable(int capacity) {\n\t\tthis.byteBuf.ensureWritable(capacity);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic byte read() {\n\t\treturn this.byteBuf.readByte();\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer read(byte[] destination) {\n\t\tthis.byteBuf.readBytes(destination);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer read(byte[] destination, int offset, int length) {\n\t\tthis.byteBuf.readBytes(destination, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer write(byte b) {\n\t\tthis.byteBuf.writeByte(b);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer write(byte[] source) {\n\t\tthis.byteBuf.writeBytes(source);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer write(byte[] source, int offset, int length) {\n\t\tthis.byteBuf.writeBytes(source, offset, length);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer write(DataBuffer... dataBuffers) {\n\t\tif (!ObjectUtils.isEmpty(dataBuffers)) {\n\t\t\tif (hasNettyDataBuffers(dataBuffers)) {\n\t\t\t\tByteBuf[] nativeBuffers = new ByteBuf[dataBuffers.length];\n\t\t\t\tfor (int i = 0; i < dataBuffers.length; i++) {\n\t\t\t\t\tnativeBuffers[i] = ((NettyDataBuffer) dataBuffers[i]).getNativeBuffer();\n\t\t\t\t}\n\t\t\t\twrite(nativeBuffers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tByteBuffer[] byteBuffers = new ByteBuffer[dataBuffers.length];\n\t\t\t\tfor (int i = 0; i < dataBuffers.length; i++) {\n\t\t\t\t\tbyteBuffers[i] = ByteBuffer.allocate(dataBuffers[i].readableByteCount());\n\t\t\t\t\tdataBuffers[i].toByteBuffer(byteBuffers[i]);\n\t\t\t\t}\n\t\t\t\twrite(byteBuffers);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate static boolean hasNettyDataBuffers(DataBuffer[] buffers) {\n\t\tfor (DataBuffer buffer : buffers) {\n\t\t\tif (!(buffer instanceof NettyDataBuffer)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer write(ByteBuffer... buffers) {\n\t\tif (!ObjectUtils.isEmpty(buffers)) {\n\t\t\tfor (ByteBuffer buffer : buffers) {\n\t\t\t\tthis.byteBuf.writeBytes(buffer);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,\n\t * starting at the current writing position.\n\t * @param byteBufs the buffers to write into this buffer\n\t * @return this buffer\n\t */\n\tpublic NettyDataBuffer write(ByteBuf... byteBufs) {\n\t\tif (!ObjectUtils.isEmpty(byteBufs)) {\n\t\t\tfor (ByteBuf byteBuf : byteBufs) {\n\t\t\t\tthis.byteBuf.writeBytes(byteBuf);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic DataBuffer write(CharSequence charSequence, Charset charset) {\n\t\tAssert.notNull(charSequence, \"CharSequence must not be null\");\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\tif (StandardCharsets.UTF_8.equals(charset)) {\n\t\t\tByteBufUtil.writeUtf8(this.byteBuf, charSequence);\n\t\t}\n\t\telse if (StandardCharsets.US_ASCII.equals(charset)) {\n\t\t\tByteBufUtil.writeAscii(this.byteBuf, charSequence);\n\t\t}\n\t\telse {\n\t\t\treturn PooledDataBuffer.super.write(charSequence, charset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic NettyDataBuffer slice(int index, int length) {\n\t\tByteBuf slice = this.byteBuf.slice(index, length);\n\t\treturn new NettyDataBuffer(slice, this.dataBufferFactory);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic NettyDataBuffer retainedSlice(int index, int length) {\n\t\tByteBuf slice = this.byteBuf.retainedSlice(index, length);\n\t\treturn new NettyDataBuffer(slice, this.dataBufferFactory);\n\t}\n\n\t@Override\n\tpublic NettyDataBuffer split(int index) {\n\t\tByteBuf split = this.byteBuf.retainedSlice(0, index);\n\t\tint writerIndex = this.byteBuf.writerIndex();\n\t\tint readerIndex = this.byteBuf.readerIndex();\n\n\t\tsplit.writerIndex(Math.min(writerIndex, index));\n\t\tsplit.readerIndex(Math.min(readerIndex, index));\n\n\t\tthis.byteBuf = this.byteBuf.slice(index, this.byteBuf.capacity() - index);\n\t\tthis.byteBuf.writerIndex(Math.max(writerIndex, index) - index);\n\t\tthis.byteBuf.readerIndex(Math.max(readerIndex, index) - index);\n\n\t\treturn new NettyDataBuffer(split, this.dataBufferFactory);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer() {\n\t\treturn this.byteBuf.nioBuffer();\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer asByteBuffer(int index, int length) {\n\t\treturn this.byteBuf.nioBuffer(index, length);\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic ByteBuffer toByteBuffer(int index, int length) {\n\t\tByteBuffer result = this.byteBuf.isDirect() ?\n\t\t\t\tByteBuffer.allocateDirect(length) :\n\t\t\t\tByteBuffer.allocate(length);\n\n\t\tthis.byteBuf.getBytes(index, result);\n\n\t\treturn result.flip();\n\t}\n\n\t@Override\n\tpublic void toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length) {\n\t\tAssert.notNull(dest, \"Dest must not be null\");\n\n\t\tdest = dest.duplicate().clear();\n\t\tdest.put(destPos, this.byteBuf.nioBuffer(srcPos, length), 0, length);\n\t}\n\n\t@Override\n\tpublic DataBuffer.ByteBufferIterator readableByteBuffers() {\n\t\tByteBuffer[] readable = this.byteBuf.nioBuffers(this.byteBuf.readerIndex(), this.byteBuf.readableBytes());\n\t\treturn new ByteBufferIterator(readable, true);\n\t}\n\n\t@Override\n\tpublic DataBuffer.ByteBufferIterator writableByteBuffers() {\n\t\tByteBuffer[] writable = this.byteBuf.nioBuffers(this.byteBuf.writerIndex(), this.byteBuf.writableBytes());\n\t\treturn new ByteBufferIterator(writable, false);\n\t}\n\n\t@Override\n\tpublic String toString(Charset charset) {\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\treturn this.byteBuf.toString(charset);\n\t}\n\n\t@Override\n\tpublic String toString(int index, int length, Charset charset) {\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\treturn this.byteBuf.toString(index, length, charset);\n\t}\n\n\t@Override\n\tpublic boolean isAllocated() {\n\t\treturn this.byteBuf.refCnt() > 0;\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer retain() {\n\t\treturn new NettyDataBuffer(this.byteBuf.retain(), this.dataBufferFactory);\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer touch(Object hint) {\n\t\tthis.byteBuf.touch(hint);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic boolean release() {\n\t\treturn this.byteBuf.release();\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof NettyDataBuffer that && this.byteBuf.equals(that.byteBuf)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.byteBuf.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.byteBuf.toString();\n\t}\n\n\n\tprivate static final class ByteBufferIterator implements DataBuffer.ByteBufferIterator {\n\n\t\tprivate final ByteBuffer[] byteBuffers;\n\n\t\tprivate final boolean readOnly;\n\n\t\tprivate int cursor = 0;\n\n\t\tpublic ByteBufferIterator(ByteBuffer[] byteBuffers, boolean readOnly) {\n\t\t\tthis.byteBuffers = byteBuffers;\n\t\t\tthis.readOnly = readOnly;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean hasNext() {\n\t\t\treturn this.cursor < this.byteBuffers.length;\n\t\t}\n\n\t\t@Override\n\t\tpublic ByteBuffer next() {\n\t\t\tint index = this.cursor;\n\t\t\tif (index < this.byteBuffers.length) {\n\t\t\t\tthis.cursor = index + 1;\n\t\t\t\tByteBuffer next = this.byteBuffers[index];\n\t\t\t\treturn this.readOnly ? next.asReadOnlyBuffer() : next;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#byteBuffers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#byteBuffers",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteBuffer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#readOnly",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#readOnly",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  }
]