[
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithEnum() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEnum.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(SampleEnum.class).withMemberCategories(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithRecord() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecord.class);\r\n    assertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n    }, typeHint -> {\r\n        assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleRecord.class));\r\n        assertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\r\n            assertThat(methodHint.getName()).isEqualTo(\"name\");\r\n            assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n        });\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecord()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecordWithProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithRecordWithProperty() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithProperty.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleRecordWithProperty.class, \"getNameProperty\")).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecordWithProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithRecordWithProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithAnonymousClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForSerializationWithAnonymousClass() {\r\n    Runnable anonymousRunnable = () -> ;;\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), anonymousRunnable.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithAnonymousClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForSerializationWithAnonymousClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForJacksonAnnotations() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\")).accepts(this.hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\")).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForInheritedJacksonAnnotations() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithInheritedJsonProperty.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\")).accepts(this.hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\")).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForInheritedJacksonAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForJacksonCustomStrategy() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithJacksonCustomStrategy.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(PropertyNamingStrategies.UpperSnakeCaseStrategy.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(SampleRecordWithJacksonCustomStrategy.Builder.class).withMemberCategories(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
    "tailType": "method"
  }
]