[
  {
    "head": "org.springframework.core.annotation.WithHierarchy",
    "headType": "class",
    "relation": "extend",
    "tail": "HierarchySuperclass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.Hello1",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.Hello1",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotations.Search;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AnnotationsScanner}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\nclass AnnotationsScannerTests {\n\n\t@Test\n\tvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\n\t\tClass<?> source = WithSingleSuperclassAndDoubleInherited.class;\n\t\tassertThat(Arrays.stream(source.getAnnotations()).map(\n\t\t\t\tAnnotation::annotationType).map(Class::getName)).containsExactly(\n\t\t\t\t\t\tTestInheritedAnnotation2.class.getName());\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\n\t\tsource = methodFrom(Hello1Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test  // gh-31803\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\n\t\tMethod source = methodFrom(Hello2Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n\t\tMethod source = methodFrom(Ignorable.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\n\t\tMethod source = methodFrom(MultipleMethods.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\n\t\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAggregate(Object context, int aggregateIndex) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"Should not call\");\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\n\t\tList<Integer> indexes = new ArrayList<>();\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\t(context, aggregateIndex, source, annotations) -> {\n\t\t\t\t\tindexes.add(aggregateIndex);\n\t\t\t\t\treturn \"\";\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t\tassertThat(indexes).containsExactly(0);\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\treturn \"K\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String finish(@Nullable String result) {\n\t\t\t\t\t\treturn \"O\" + result;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEqualTo(\"OK\");\n\t}\n\n\n\tprivate Method methodFrom(Class<?> type) {\n\t\treturn ReflectionUtils.findMethod(type, \"method\");\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) {\n\t\treturn scan(element, searchStrategy, Search.never);\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass) {\n\n\t\tList<String> results = new ArrayList<>();\n\t\tscan(this, element, searchStrategy, searchEnclosingClass,\n\t\t\t\t(criteria, aggregateIndex, source, annotations) -> {\n\t\t\t\t\ttrackIndexedAnnotations(aggregateIndex, annotations, results);\n\t\t\t\t\treturn null; // continue searching\n\t\t\t\t});\n\t\treturn results.stream();\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tAnnotationsProcessor<C, R> processor) {\n\n\t\treturn scan(context, source, searchStrategy, Search.never, processor);\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\n\n\t\treturn AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\n\t}\n\n\tprivate void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\n\t\tArrays.stream(annotations)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.map(annotation -> indexedName(aggregateIndex, annotation))\n\t\t\t.forEach(results::add);\n\t}\n\n\tprivate String indexedName(int aggregateIndex, Annotation annotation) {\n\t\treturn aggregateIndex + \":\" + annotation.annotationType().getSimpleName();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation6 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnSuperClass {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnInterface {\n\t}\n\n\tstatic class WithNoAnnotations {\n\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleAnnotation {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\t@TestAnnotation2\n\tstatic class WithMultipleAnnotations {\n\n\t\t@TestAnnotation1\n\t\t@TestAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class SingleSuperclass {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleSuperclass extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestInheritedAnnotation2\n\tstatic class WithSingleSuperclassAndDoubleInherited extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleInterface implements SingleInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tinterface SingleInterface {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithHierarchy extends HierarchySuperclass implements HierarchyInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface Hello1 {\n\n\t\t@TestAnnotation1\n\t\tvoid method();\n\t}\n\n\tinterface Hello2 extends Hello1 {\n\t}\n\n\tstatic class Hello1Impl implements Hello1 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class Hello2Impl implements Hello2 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class HierarchySuperclass extends HierarchySuperSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation3\n\t@TestInheritedAnnotation3\n\tstatic class HierarchySuperSuperclass implements HierarchySuperSuperclassInterface {\n\n\t\t@Override\n\t\t@TestAnnotation3\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation4\n\tinterface HierarchySuperSuperclassInterface {\n\n\t\t@TestAnnotation4\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation5\n\t@TestInheritedAnnotation5\n\tinterface HierarchyInterface extends HierarchyInterfaceInterface {\n\n\t\t@Override\n\t\t@TestAnnotation5\n\t\t@TestInheritedAnnotation5\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation6\n\tinterface HierarchyInterfaceInterface {\n\n\t\t@TestAnnotation6\n\t\tvoid method();\n\t}\n\n\tstatic class BridgedMethod implements BridgeMethod<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String arg) {\n\t\t}\n\t}\n\n\tinterface BridgeMethod<T> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T arg);\n\t}\n\n\tstatic class Ignorable implements IgnorableOverrideInterface1, IgnorableOverrideInterface2 {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface IgnorableOverrideInterface1 {\n\n\t\tvoid method();\n\t}\n\n\tinterface IgnorableOverrideInterface2 {\n\n\t\tvoid method();\n\t}\n\n\tabstract static class MultipleMethods implements MultipleMethodsInterface {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface MultipleMethodsInterface {\n\n\t\t@TestAnnotation2\n\t\tvoid method(String arg);\n\n\t\t@TestAnnotation2\n\t\tvoid method1();\n\t}\n\n\tstatic class GenericOverride implements GenericOverrideInterface<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String argument) {\n\t\t}\n\t}\n\n\tinterface GenericOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n\tabstract static class GenericNonOverride implements GenericNonOverrideInterface<String> {\n\n\t\t@TestAnnotation1\n\t\tpublic void method(StringBuilder argument) {\n\t\t}\n\t}\n\n\tinterface GenericNonOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello1#method()",
    "headType": "method",
    "relation": "provide",
    "tail": "@TestAnnotation1\r\nvoid method();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello1",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.Hello1#method()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.Hello1#method()",
    "headType": "method",
    "relation": "use",
    "tail": "@TestAnnotation1",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.Hello2",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.Hello2",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotations.Search;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AnnotationsScanner}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\nclass AnnotationsScannerTests {\n\n\t@Test\n\tvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\n\t\tClass<?> source = WithSingleSuperclassAndDoubleInherited.class;\n\t\tassertThat(Arrays.stream(source.getAnnotations()).map(\n\t\t\t\tAnnotation::annotationType).map(Class::getName)).containsExactly(\n\t\t\t\t\t\tTestInheritedAnnotation2.class.getName());\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\n\t\tsource = methodFrom(Hello1Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test  // gh-31803\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\n\t\tMethod source = methodFrom(Hello2Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n\t\tMethod source = methodFrom(Ignorable.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\n\t\tMethod source = methodFrom(MultipleMethods.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\n\t\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAggregate(Object context, int aggregateIndex) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"Should not call\");\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\n\t\tList<Integer> indexes = new ArrayList<>();\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\t(context, aggregateIndex, source, annotations) -> {\n\t\t\t\t\tindexes.add(aggregateIndex);\n\t\t\t\t\treturn \"\";\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t\tassertThat(indexes).containsExactly(0);\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\treturn \"K\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String finish(@Nullable String result) {\n\t\t\t\t\t\treturn \"O\" + result;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEqualTo(\"OK\");\n\t}\n\n\n\tprivate Method methodFrom(Class<?> type) {\n\t\treturn ReflectionUtils.findMethod(type, \"method\");\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) {\n\t\treturn scan(element, searchStrategy, Search.never);\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass) {\n\n\t\tList<String> results = new ArrayList<>();\n\t\tscan(this, element, searchStrategy, searchEnclosingClass,\n\t\t\t\t(criteria, aggregateIndex, source, annotations) -> {\n\t\t\t\t\ttrackIndexedAnnotations(aggregateIndex, annotations, results);\n\t\t\t\t\treturn null; // continue searching\n\t\t\t\t});\n\t\treturn results.stream();\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tAnnotationsProcessor<C, R> processor) {\n\n\t\treturn scan(context, source, searchStrategy, Search.never, processor);\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\n\n\t\treturn AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\n\t}\n\n\tprivate void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\n\t\tArrays.stream(annotations)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.map(annotation -> indexedName(aggregateIndex, annotation))\n\t\t\t.forEach(results::add);\n\t}\n\n\tprivate String indexedName(int aggregateIndex, Annotation annotation) {\n\t\treturn aggregateIndex + \":\" + annotation.annotationType().getSimpleName();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation6 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnSuperClass {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnInterface {\n\t}\n\n\tstatic class WithNoAnnotations {\n\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleAnnotation {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\t@TestAnnotation2\n\tstatic class WithMultipleAnnotations {\n\n\t\t@TestAnnotation1\n\t\t@TestAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class SingleSuperclass {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleSuperclass extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestInheritedAnnotation2\n\tstatic class WithSingleSuperclassAndDoubleInherited extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleInterface implements SingleInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tinterface SingleInterface {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithHierarchy extends HierarchySuperclass implements HierarchyInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface Hello1 {\n\n\t\t@TestAnnotation1\n\t\tvoid method();\n\t}\n\n\tinterface Hello2 extends Hello1 {\n\t}\n\n\tstatic class Hello1Impl implements Hello1 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class Hello2Impl implements Hello2 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class HierarchySuperclass extends HierarchySuperSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation3\n\t@TestInheritedAnnotation3\n\tstatic class HierarchySuperSuperclass implements HierarchySuperSuperclassInterface {\n\n\t\t@Override\n\t\t@TestAnnotation3\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation4\n\tinterface HierarchySuperSuperclassInterface {\n\n\t\t@TestAnnotation4\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation5\n\t@TestInheritedAnnotation5\n\tinterface HierarchyInterface extends HierarchyInterfaceInterface {\n\n\t\t@Override\n\t\t@TestAnnotation5\n\t\t@TestInheritedAnnotation5\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation6\n\tinterface HierarchyInterfaceInterface {\n\n\t\t@TestAnnotation6\n\t\tvoid method();\n\t}\n\n\tstatic class BridgedMethod implements BridgeMethod<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String arg) {\n\t\t}\n\t}\n\n\tinterface BridgeMethod<T> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T arg);\n\t}\n\n\tstatic class Ignorable implements IgnorableOverrideInterface1, IgnorableOverrideInterface2 {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface IgnorableOverrideInterface1 {\n\n\t\tvoid method();\n\t}\n\n\tinterface IgnorableOverrideInterface2 {\n\n\t\tvoid method();\n\t}\n\n\tabstract static class MultipleMethods implements MultipleMethodsInterface {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface MultipleMethodsInterface {\n\n\t\t@TestAnnotation2\n\t\tvoid method(String arg);\n\n\t\t@TestAnnotation2\n\t\tvoid method1();\n\t}\n\n\tstatic class GenericOverride implements GenericOverrideInterface<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String argument) {\n\t\t}\n\t}\n\n\tinterface GenericOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n\tabstract static class GenericNonOverride implements GenericNonOverrideInterface<String> {\n\n\t\t@TestAnnotation1\n\t\tpublic void method(StringBuilder argument) {\n\t\t}\n\t}\n\n\tinterface GenericNonOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello2",
    "headType": "class",
    "relation": "extend",
    "tail": "Hello1",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.Hello1Impl",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.Hello1Impl",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotations.Search;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AnnotationsScanner}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\nclass AnnotationsScannerTests {\n\n\t@Test\n\tvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\n\t\tClass<?> source = WithSingleSuperclassAndDoubleInherited.class;\n\t\tassertThat(Arrays.stream(source.getAnnotations()).map(\n\t\t\t\tAnnotation::annotationType).map(Class::getName)).containsExactly(\n\t\t\t\t\t\tTestInheritedAnnotation2.class.getName());\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\n\t\tsource = methodFrom(Hello1Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test  // gh-31803\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\n\t\tMethod source = methodFrom(Hello2Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n\t\tMethod source = methodFrom(Ignorable.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\n\t\tMethod source = methodFrom(MultipleMethods.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\n\t\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAggregate(Object context, int aggregateIndex) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"Should not call\");\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\n\t\tList<Integer> indexes = new ArrayList<>();\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\t(context, aggregateIndex, source, annotations) -> {\n\t\t\t\t\tindexes.add(aggregateIndex);\n\t\t\t\t\treturn \"\";\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t\tassertThat(indexes).containsExactly(0);\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\treturn \"K\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String finish(@Nullable String result) {\n\t\t\t\t\t\treturn \"O\" + result;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEqualTo(\"OK\");\n\t}\n\n\n\tprivate Method methodFrom(Class<?> type) {\n\t\treturn ReflectionUtils.findMethod(type, \"method\");\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) {\n\t\treturn scan(element, searchStrategy, Search.never);\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass) {\n\n\t\tList<String> results = new ArrayList<>();\n\t\tscan(this, element, searchStrategy, searchEnclosingClass,\n\t\t\t\t(criteria, aggregateIndex, source, annotations) -> {\n\t\t\t\t\ttrackIndexedAnnotations(aggregateIndex, annotations, results);\n\t\t\t\t\treturn null; // continue searching\n\t\t\t\t});\n\t\treturn results.stream();\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tAnnotationsProcessor<C, R> processor) {\n\n\t\treturn scan(context, source, searchStrategy, Search.never, processor);\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\n\n\t\treturn AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\n\t}\n\n\tprivate void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\n\t\tArrays.stream(annotations)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.map(annotation -> indexedName(aggregateIndex, annotation))\n\t\t\t.forEach(results::add);\n\t}\n\n\tprivate String indexedName(int aggregateIndex, Annotation annotation) {\n\t\treturn aggregateIndex + \":\" + annotation.annotationType().getSimpleName();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation6 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnSuperClass {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnInterface {\n\t}\n\n\tstatic class WithNoAnnotations {\n\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleAnnotation {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\t@TestAnnotation2\n\tstatic class WithMultipleAnnotations {\n\n\t\t@TestAnnotation1\n\t\t@TestAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class SingleSuperclass {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleSuperclass extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestInheritedAnnotation2\n\tstatic class WithSingleSuperclassAndDoubleInherited extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleInterface implements SingleInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tinterface SingleInterface {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithHierarchy extends HierarchySuperclass implements HierarchyInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface Hello1 {\n\n\t\t@TestAnnotation1\n\t\tvoid method();\n\t}\n\n\tinterface Hello2 extends Hello1 {\n\t}\n\n\tstatic class Hello1Impl implements Hello1 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class Hello2Impl implements Hello2 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class HierarchySuperclass extends HierarchySuperSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation3\n\t@TestInheritedAnnotation3\n\tstatic class HierarchySuperSuperclass implements HierarchySuperSuperclassInterface {\n\n\t\t@Override\n\t\t@TestAnnotation3\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation4\n\tinterface HierarchySuperSuperclassInterface {\n\n\t\t@TestAnnotation4\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation5\n\t@TestInheritedAnnotation5\n\tinterface HierarchyInterface extends HierarchyInterfaceInterface {\n\n\t\t@Override\n\t\t@TestAnnotation5\n\t\t@TestInheritedAnnotation5\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation6\n\tinterface HierarchyInterfaceInterface {\n\n\t\t@TestAnnotation6\n\t\tvoid method();\n\t}\n\n\tstatic class BridgedMethod implements BridgeMethod<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String arg) {\n\t\t}\n\t}\n\n\tinterface BridgeMethod<T> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T arg);\n\t}\n\n\tstatic class Ignorable implements IgnorableOverrideInterface1, IgnorableOverrideInterface2 {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface IgnorableOverrideInterface1 {\n\n\t\tvoid method();\n\t}\n\n\tinterface IgnorableOverrideInterface2 {\n\n\t\tvoid method();\n\t}\n\n\tabstract static class MultipleMethods implements MultipleMethodsInterface {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface MultipleMethodsInterface {\n\n\t\t@TestAnnotation2\n\t\tvoid method(String arg);\n\n\t\t@TestAnnotation2\n\t\tvoid method1();\n\t}\n\n\tstatic class GenericOverride implements GenericOverrideInterface<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String argument) {\n\t\t}\n\t}\n\n\tinterface GenericOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n\tabstract static class GenericNonOverride implements GenericNonOverrideInterface<String> {\n\n\t\t@TestAnnotation1\n\t\tpublic void method(StringBuilder argument) {\n\t\t}\n\t}\n\n\tinterface GenericNonOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello1Impl#method()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void method() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello1Impl",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.Hello1Impl#method()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.Hello1Impl#method()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.Hello2Impl",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.Hello2Impl",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotations.Search;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AnnotationsScanner}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\nclass AnnotationsScannerTests {\n\n\t@Test\n\tvoid directStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasSuperclassScansOnlyDirect() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassWhenHasInterfaceScansOnlyDirect() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasSuperclassScansOnlyInherited() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestInheritedAnnotation2\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnClassWhenHasAnnotationOnBothClassesIncludesOnlyOne() {\n\t\tClass<?> source = WithSingleSuperclassAndDoubleInherited.class;\n\t\tassertThat(Arrays.stream(source.getAnnotations()).map(\n\t\t\t\tAnnotation::annotationType).map(Class::getName)).containsExactly(\n\t\t\t\t\t\tTestInheritedAnnotation2.class.getName());\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\n\t\tClass<?> source = WithNoAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassScansAnnotations() {\n\t\tClass<?> source = WithSingleAnnotation.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\n\t\tClass<?> source = WithMultipleAnnotations.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\n\t\tClass<?> source = WithSingleSuperclass.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\n\t\tClass<?> source = WithSingleInterface.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnClassHierarchyScansInCorrectOrder() {\n\t\tClass<?> source = WithHierarchy.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"4:TestInheritedAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).isEmpty();\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasSuperclassScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodWhenHasInterfaceScansOnlyDirect() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsMethodOnMethodWhenHasSuperclassIgnoresInherited() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid inheritedAnnotationsStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.INHERITED_ANNOTATIONS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).isEmpty();\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodWhenHasInterfaceDoesNotIncludeInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid superclassStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\",\n\t\t\t\t\"2:TestAnnotation3\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenNotAnnotatedScansNone() {\n\t\tMethod source = methodFrom(WithNoAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodScansAnnotations() {\n\t\tMethod source = methodFrom(WithSingleAnnotation.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenMultipleAnnotationsScansAnnotations() {\n\t\tMethod source = methodFrom(WithMultipleAnnotations.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"0:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasSuperclassScansSuperclass() {\n\t\tMethod source = methodFrom(WithSingleSuperclass.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceScansInterfaces() {\n\t\tMethod source = methodFrom(WithSingleInterface.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\n\n\t\tsource = methodFrom(Hello1Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test  // gh-31803\n\tvoid typeHierarchyStrategyOnMethodWhenHasInterfaceHierarchyScansInterfacesOnlyOnce() {\n\t\tMethod source = methodFrom(Hello2Impl.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"1:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodHierarchyScansInCorrectOrder() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgeMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", Object.class);\n\t\tassertThat(source.isBridge()).isTrue();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid directStrategyOnBridgedMethodScansAnnotations() throws Exception {\n\t\tMethod source = BridgedMethod.class.getDeclaredMethod(\"method\", String.class);\n\t\tassertThat(source.isBridge()).isFalse();\n\t\tassertThat(scan(source, SearchStrategy.DIRECT)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithIgnorablesScansAnnotations() {\n\t\tMethod source = methodFrom(Ignorable.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithMultipleCandidatesScansAnnotations() {\n\t\tMethod source = methodFrom(MultipleMethods.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericOverride.class, \"method\", String.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\n\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation2\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyOnMethodWithGenericParameterNonOverrideScansAnnotations() {\n\t\tMethod source = ReflectionUtils.findMethod(GenericNonOverride.class, \"method\", StringBuilder.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedStaticClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedStatic.EnclosedStaticStatic.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnEnclosedInnerClassScansAnnotations() {\n\t\tClass<?> source = AnnotationEnclosingClassSample.EnclosedInner.EnclosedInnerInner.class;\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isStaticClass))\n\t\t\t\t.containsExactly(\"0:EnclosedThree\");\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\"0:EnclosedThree\", \"1:EnclosedTwo\", \"2:EnclosedOne\");\n\t}\n\n\t@Test\n\tvoid typeHierarchyStrategyWithEnclosingClassPredicatesOnMethodHierarchyUsesTypeHierarchyScan() {\n\t\tMethod source = methodFrom(WithHierarchy.class);\n\t\tassertThat(scan(source, SearchStrategy.TYPE_HIERARCHY, Search.always).toList())\n\t\t\t\t.isEqualTo(scan(source, SearchStrategy.TYPE_HIERARCHY, ClassUtils::isInnerClass).toList())\n\t\t\t\t.containsExactly(\n\t\t\t\t\t\"0:TestAnnotation1\", \"1:TestAnnotation5\", \"1:TestInheritedAnnotation5\",\n\t\t\t\t\t\"2:TestAnnotation6\", \"3:TestAnnotation2\", \"3:TestInheritedAnnotation2\",\n\t\t\t\t\t\"4:TestAnnotation3\", \"5:TestAnnotation4\");\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAggregateExitsEarly() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAggregate(Object context, int aggregateIndex) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\tthrow new IllegalStateException(\"Should not call\");\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorReturnsFromDoWithAnnotationsExitsEarly() {\n\t\tList<Integer> indexes = new ArrayList<>();\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\t(context, aggregateIndex, source, annotations) -> {\n\t\t\t\t\tindexes.add(aggregateIndex);\n\t\t\t\t\treturn \"\";\n\t\t\t\t});\n\t\tassertThat(result).isEmpty();\n\t\tassertThat(indexes).containsExactly(0);\n\t}\n\n\t@Test\n\tvoid scanWhenProcessorHasFinishMethodUsesFinishResult() {\n\t\tString result = scan(this, WithSingleSuperclass.class, SearchStrategy.TYPE_HIERARCHY,\n\t\t\t\tnew AnnotationsProcessor<Object, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String doWithAnnotations(Object context, int aggregateIndex,\n\t\t\t\t\t\t\t@Nullable Object source, @Nullable Annotation @Nullable [] annotations) {\n\t\t\t\t\t\treturn \"K\";\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic @NonNull String finish(@Nullable String result) {\n\t\t\t\t\t\treturn \"O\" + result;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\tassertThat(result).isEqualTo(\"OK\");\n\t}\n\n\n\tprivate Method methodFrom(Class<?> type) {\n\t\treturn ReflectionUtils.findMethod(type, \"method\");\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy) {\n\t\treturn scan(element, searchStrategy, Search.never);\n\t}\n\n\tprivate Stream<String> scan(AnnotatedElement element, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass) {\n\n\t\tList<String> results = new ArrayList<>();\n\t\tscan(this, element, searchStrategy, searchEnclosingClass,\n\t\t\t\t(criteria, aggregateIndex, source, annotations) -> {\n\t\t\t\t\ttrackIndexedAnnotations(aggregateIndex, annotations, results);\n\t\t\t\t\treturn null; // continue searching\n\t\t\t\t});\n\t\treturn results.stream();\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tAnnotationsProcessor<C, R> processor) {\n\n\t\treturn scan(context, source, searchStrategy, Search.never, processor);\n\t}\n\n\tprivate static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,\n\t\t\tPredicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\n\n\t\treturn AnnotationsScanner.scan(context, source, searchStrategy, searchEnclosingClass, processor);\n\t}\n\n\tprivate void trackIndexedAnnotations(int aggregateIndex, Annotation[] annotations, List<String> results) {\n\t\tArrays.stream(annotations)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.map(annotation -> indexedName(aggregateIndex, annotation))\n\t\t\t.forEach(results::add);\n\t}\n\n\tprivate String indexedName(int aggregateIndex, Annotation annotation) {\n\t\treturn aggregateIndex + \":\" + annotation.annotationType().getSimpleName();\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation6 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation3 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation4 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface TestInheritedAnnotation5 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnSuperClass {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface OnInterface {\n\t}\n\n\tstatic class WithNoAnnotations {\n\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleAnnotation {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\t@TestAnnotation2\n\tstatic class WithMultipleAnnotations {\n\n\t\t@TestAnnotation1\n\t\t@TestAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class SingleSuperclass {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleSuperclass extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestInheritedAnnotation2\n\tstatic class WithSingleSuperclassAndDoubleInherited extends SingleSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithSingleInterface implements SingleInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tinterface SingleInterface {\n\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation1\n\tstatic class WithHierarchy extends HierarchySuperclass implements HierarchyInterface {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface Hello1 {\n\n\t\t@TestAnnotation1\n\t\tvoid method();\n\t}\n\n\tinterface Hello2 extends Hello1 {\n\t}\n\n\tstatic class Hello1Impl implements Hello1 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tstatic class Hello2Impl implements Hello2 {\n\n\t\t@Override\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\n\t@TestAnnotation2\n\t@TestInheritedAnnotation2\n\tstatic class HierarchySuperclass extends HierarchySuperSuperclass {\n\n\t\t@Override\n\t\t@TestAnnotation2\n\t\t@TestInheritedAnnotation2\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation3\n\t@TestInheritedAnnotation3\n\tstatic class HierarchySuperSuperclass implements HierarchySuperSuperclassInterface {\n\n\t\t@Override\n\t\t@TestAnnotation3\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\t@TestAnnotation4\n\tinterface HierarchySuperSuperclassInterface {\n\n\t\t@TestAnnotation4\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation5\n\t@TestInheritedAnnotation5\n\tinterface HierarchyInterface extends HierarchyInterfaceInterface {\n\n\t\t@Override\n\t\t@TestAnnotation5\n\t\t@TestInheritedAnnotation5\n\t\tvoid method();\n\t}\n\n\t@TestAnnotation6\n\tinterface HierarchyInterfaceInterface {\n\n\t\t@TestAnnotation6\n\t\tvoid method();\n\t}\n\n\tstatic class BridgedMethod implements BridgeMethod<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String arg) {\n\t\t}\n\t}\n\n\tinterface BridgeMethod<T> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T arg);\n\t}\n\n\tstatic class Ignorable implements IgnorableOverrideInterface1, IgnorableOverrideInterface2 {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface IgnorableOverrideInterface1 {\n\n\t\tvoid method();\n\t}\n\n\tinterface IgnorableOverrideInterface2 {\n\n\t\tvoid method();\n\t}\n\n\tabstract static class MultipleMethods implements MultipleMethodsInterface {\n\n\t\t@TestAnnotation1\n\t\tpublic void method() {\n\t\t}\n\t}\n\n\tinterface MultipleMethodsInterface {\n\n\t\t@TestAnnotation2\n\t\tvoid method(String arg);\n\n\t\t@TestAnnotation2\n\t\tvoid method1();\n\t}\n\n\tstatic class GenericOverride implements GenericOverrideInterface<String> {\n\n\t\t@Override\n\t\t@TestAnnotation1\n\t\tpublic void method(String argument) {\n\t\t}\n\t}\n\n\tinterface GenericOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n\tabstract static class GenericNonOverride implements GenericNonOverrideInterface<String> {\n\n\t\t@TestAnnotation1\n\t\tpublic void method(StringBuilder argument) {\n\t\t}\n\t}\n\n\tinterface GenericNonOverrideInterface<T extends CharSequence> {\n\n\t\t@TestAnnotation2\n\t\tvoid method(T argument);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello2Impl#method()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void method() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.Hello2Impl",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.Hello2Impl#method()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.Hello2Impl#method()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.HierarchySuperclass",
    "tailType": "class"
  }
]