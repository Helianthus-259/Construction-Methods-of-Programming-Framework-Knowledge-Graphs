[
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.AbstractNotifyingRunnable#monitor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable#monitor",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable#run()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void run() {\r\n    synchronized (this.monitor) {\r\n        try {\r\n            doRun();\r\n        } finally {\r\n            this.monitor.notifyAll();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.AbstractNotifyingRunnable#run()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable#run()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable#doRun()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void doRun();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.AbstractNotifyingRunnable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.AbstractNotifyingRunnable#doRun()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.ThreadNameHarvester",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n * @since 6.1\n */\nclass VirtualThreadTaskExecutorTests {\n\n\t@Test\n\tvoid virtualThreadsWithoutName() {\n\t\tfinal Object monitor = new Object();\n\t\tVirtualThreadTaskExecutor executor = new VirtualThreadTaskExecutor();\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEmpty();\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid virtualThreadsWithNamePrefix() {\n\t\tfinal Object monitor = new Object();\n\t\tVirtualThreadTaskExecutor executor = new VirtualThreadTaskExecutor(\"test-\");\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEqualTo(\"test-0\");\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid simpleWithVirtualThreadFactory() {\n\t\tfinal Object monitor = new Object();\n\t\tSimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(Thread.ofVirtual().name(\"test\").factory());\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).isEqualTo(\"test\");\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\t@Test\n\tvoid simpleWithVirtualThreadFlag() {\n\t\tfinal String customPrefix = \"chankPop#\";\n\t\tfinal Object monitor = new Object();\n\t\tSimpleAsyncTaskExecutor executor = new SimpleAsyncTaskExecutor(customPrefix);\n\t\texecutor.setVirtualThreads(true);\n\t\tThreadNameHarvester task = new ThreadNameHarvester(monitor);\n\t\texecuteAndWait(executor, task, monitor);\n\t\tassertThat(task.getThreadName()).startsWith(customPrefix);\n\t\tassertThat(task.isVirtual()).isTrue();\n\t\tassertThat(task.runCount()).isOne();\n\t}\n\n\tprivate void executeAndWait(TaskExecutor executor, Runnable task, Object monitor) {\n\t\tsynchronized (monitor) {\n\t\t\texecutor.execute(task);\n\t\t\ttry {\n\t\t\t\tmonitor.wait();\n\t\t\t}\n\t\t\tcatch (InterruptedException ignored) {\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate static final class NoOpRunnable implements Runnable {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\n\tprivate abstract static class AbstractNotifyingRunnable implements Runnable {\n\n\t\tprivate final Object monitor;\n\n\t\tprotected AbstractNotifyingRunnable(Object monitor) {\n\t\t\tthis.monitor = monitor;\n\t\t}\n\n\t\t@Override\n\t\tpublic final void run() {\n\t\t\tsynchronized (this.monitor) {\n\t\t\t\ttry {\n\t\t\t\t\tdoRun();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tthis.monitor.notifyAll();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprotected abstract void doRun();\n\t}\n\n\n\tprivate static final class ThreadNameHarvester extends AbstractNotifyingRunnable {\n\n\t\tprivate final AtomicInteger runCount = new AtomicInteger();\n\n\t\tprivate String threadName;\n\n\t\tprivate boolean virtual;\n\n\t\tprotected ThreadNameHarvester(Object monitor) {\n\t\t\tsuper(monitor);\n\t\t}\n\n\t\tpublic String getThreadName() {\n\t\t\treturn this.threadName;\n\t\t}\n\n\t\tpublic boolean isVirtual() {\n\t\t\treturn this.virtual;\n\t\t}\n\n\t\tpublic int runCount() {\n\t\t\treturn this.runCount.get();\n\t\t}\n\n\t\t@Override\n\t\tprotected void doRun() {\n\t\t\tThread thread = Thread.currentThread();\n\t\t\tthis.threadName = thread.getName();\n\t\t\tthis.virtual = thread.isVirtual();\n\t\t\trunCount.incrementAndGet();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.ThreadNameHarvester#runCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#runCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.ThreadNameHarvester#threadName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#threadName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.ThreadNameHarvester#virtual",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#virtual",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#getThreadName()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String getThreadName() {\r\n    return this.threadName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.ThreadNameHarvester#getThreadName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#isVirtual()",
    "headType": "method",
    "relation": "provide",
    "tail": "public boolean isVirtual() {\r\n    return this.virtual;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.ThreadNameHarvester#isVirtual()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.ThreadNameHarvester#runCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int runCount() {\r\n    return this.runCount.get();\r\n}",
    "tailType": "method_code"
  }
]