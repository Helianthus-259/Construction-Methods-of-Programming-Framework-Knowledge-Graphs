[
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.RegexPatternTypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2007 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport java.util.regex.Pattern;\n\nimport org.springframework.core.type.ClassMetadata;\nimport org.springframework.util.Assert;\n\n/**\n * A simple filter for matching a fully-qualified class name with a regex {@link Pattern}.\n *\n * @author Mark Fisher\n * @author Juergen Hoeller\n * @since 2.5\n */\npublic class RegexPatternTypeFilter extends AbstractClassTestingTypeFilter {\n\n\tprivate final Pattern pattern;\n\n\n\tpublic RegexPatternTypeFilter(Pattern pattern) {\n\t\tAssert.notNull(pattern, \"Pattern must not be null\");\n\t\tthis.pattern = pattern;\n\t}\n\n\n\t@Override\n\tprotected boolean match(ClassMetadata metadata) {\n\t\treturn this.pattern.matcher(metadata.getClassName()).matches();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.filter.RegexPatternTypeFilter#pattern",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter#pattern",
    "headType": "field",
    "relation": "haveType",
    "tail": "Pattern",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter#match(ClassMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean match(ClassMetadata metadata) {\r\n    return this.pattern.matcher(metadata.getClassName()).matches();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.RegexPatternTypeFilter#match(ClassMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter#match(ClassMetadata)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.RegexPatternTypeFilter",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassTestingTypeFilter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.filter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.filter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.filter.TypeFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.filter.TypeFilter",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.filter.TypeFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.filter;\n\nimport java.io.IOException;\n\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\n\n/**\n * Base interface for type filters using a\n * {@link org.springframework.core.type.classreading.MetadataReader}.\n *\n * @author Costin Leau\n * @author Juergen Hoeller\n * @author Mark Fisher\n * @since 2.5\n */\n@FunctionalInterface\npublic interface TypeFilter {\n\n\t/**\n\t * Determine whether this filter matches for the class described by\n\t * the given metadata.\n\t * @param metadataReader the metadata reader for the target class\n\t * @param metadataReaderFactory a factory for obtaining metadata readers\n\t * for other classes (such as superclasses and interfaces)\n\t * @return whether this filter matches\n\t * @throws IOException in case of I/O failure when reading metadata\n\t */\n\tboolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)\n\t\t\tthrows IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.filter.TypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether this filter matches for the class described by\r\n * the given metadata.\r\n * @param metadataReader the metadata reader for the target class\r\n * @param metadataReaderFactory a factory for obtaining metadata readers\r\n * for other classes (such as superclasses and interfaces)\r\n * @return whether this filter matches\r\n * @throws IOException in case of I/O failure when reading metadata\r\n */\r\nboolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.filter.TypeFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.filter.TypeFilter#match(MetadataReader,MetadataReaderFactory)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.MethodMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\n/**\n * Interface that defines abstract access to the annotations of a specific\n * method, in a form that does not require that method's class to be loaded yet.\n *\n * @author Juergen Hoeller\n * @author Mark Pollack\n * @author Chris Beams\n * @author Phillip Webb\n * @since 3.0\n * @see StandardMethodMetadata\n * @see AnnotationMetadata#getAnnotatedMethods\n * @see AnnotatedTypeMetadata\n */\npublic interface MethodMetadata extends AnnotatedTypeMetadata {\n\n\t/**\n\t * Get the name of the underlying method.\n\t */\n\tString getMethodName();\n\n\t/**\n\t * Get the fully-qualified name of the class that declares the underlying method.\n\t */\n\tString getDeclaringClassName();\n\n\t/**\n\t * Get the fully-qualified name of the underlying method's declared return type.\n\t * @since 4.2\n\t */\n\tString getReturnTypeName();\n\n\t/**\n\t * Determine whether the underlying method is effectively abstract:\n\t * i.e. marked as abstract in a class or declared as a regular,\n\t * non-default method in an interface.\n\t * @since 4.2\n\t */\n\tboolean isAbstract();\n\n\t/**\n\t * Determine whether the underlying method is declared as 'static'.\n\t */\n\tboolean isStatic();\n\n\t/**\n\t * Determine whether the underlying method is marked as 'final'.\n\t */\n\tboolean isFinal();\n\n\t/**\n\t * Determine whether the underlying method is overridable,\n\t * i.e. not marked as static, final, or private.\n\t */\n\tboolean isOverridable();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#getMethodName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the name of the underlying method.\r\n */\r\nString getMethodName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.MethodMetadata#getMethodName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.MethodMetadata#getDeclaringClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the fully-qualified name of the class that declares the underlying method.\r\n */\r\nString getDeclaringClassName();",
    "tailType": "method_code"
  }
]