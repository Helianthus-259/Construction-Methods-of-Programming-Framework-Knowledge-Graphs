[
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated {@link Kind#RESOURCE resource file} with content from the\r\n * given {@link CharSequence}.\r\n * @param path the relative path of the file\r\n * @param content the contents of the file\r\n */\r\ndefault void addResourceFile(String path, CharSequence content) {\r\n    addResourceFile(path, appendable -> appendable.append(content));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,ThrowingConsumer<Appendable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated {@link Kind#RESOURCE resource file} with content written\r\n * to an {@link Appendable} passed to the given {@link ThrowingConsumer}.\r\n * @param path the relative path of the file\r\n * @param content a {@link ThrowingConsumer} that accepts an\r\n * {@link Appendable} which will receive the file contents\r\n */\r\ndefault void addResourceFile(String path, ThrowingConsumer<Appendable> content) {\r\n    addFile(Kind.RESOURCE, path, content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,ThrowingConsumer<Appendable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated {@link Kind#RESOURCE resource file} with content from the\r\n * given {@link InputStreamSource}.\r\n * @param path the relative path of the file\r\n * @param content an {@link InputStreamSource} that will provide an input\r\n * stream containing the file contents\r\n */\r\ndefault void addResourceFile(String path, InputStreamSource content) {\r\n    addFile(Kind.RESOURCE, path, content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addResourceFile(String,InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addClassFile(String,InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated {@link Kind#CLASS class file} with content from the given\r\n * {@link InputStreamSource}.\r\n * @param path the relative path of the file\r\n * @param content an {@link InputStreamSource} that will provide an input\r\n * stream containing the file contents\r\n */\r\ndefault void addClassFile(String path, InputStreamSource content) {\r\n    addFile(Kind.CLASS, path, content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addClassFile(String,InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated file of the specified {@link Kind} with content from the\r\n * given {@link CharSequence}.\r\n * @param kind the kind of file being written\r\n * @param path the relative path of the file\r\n * @param content the contents of the file\r\n */\r\ndefault void addFile(Kind kind, String path, CharSequence content) {\r\n    addFile(kind, path, appendable -> appendable.append(content));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,ThrowingConsumer<Appendable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated file of the specified {@link Kind} with content written\r\n * to an {@link Appendable} passed to the given {@link ThrowingConsumer}.\r\n * @param kind the kind of file being written\r\n * @param path the relative path of the file\r\n * @param content a {@link ThrowingConsumer} that accepts an\r\n * {@link Appendable} which will receive the file contents\r\n */\r\ndefault void addFile(Kind kind, String path, ThrowingConsumer<Appendable> content) {\r\n    Assert.notNull(content, \"'content' must not be null\");\r\n    addFile(kind, path, new AppendableConsumerInputStreamSource(content));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,ThrowingConsumer<Appendable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add a generated file of the specified {@link Kind} with content from the\r\n * given {@link InputStreamSource}.\r\n * @param kind the kind of file being written\r\n * @param path the relative path of the file\r\n * @param content an {@link InputStreamSource} that will provide an input\r\n * stream containing the file contents\r\n */\r\ndefault void addFile(Kind kind, String path, InputStreamSource content) {\r\n    Assert.notNull(kind, \"'kind' must not be null\");\r\n    Assert.hasLength(path, \"'path' must not be empty\");\r\n    Assert.notNull(content, \"'content' must not be null\");\r\n    handleFile(kind, path, handler -> handler.create(content));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#addFile(Kind,String,InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#handleFile(Kind,String,ThrowingConsumer<FileHandler>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Handle a generated file of the specified {@link Kind} with the given\r\n * {@linkplain FileHandler handler}. The file handler lets you consume\r\n * the content of the already generated file, if any and provide a way\r\n * to override its content if necessary.\r\n * @param kind the kind of file\r\n * @param path the relative path of the file\r\n * @param handler a consumer of a {@link FileHandler} for the file\r\n * @since 6.2\r\n */\r\nvoid handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#handleFile(Kind,String,ThrowingConsumer<FileHandler>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#getClassNamePath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String getClassNamePath(String className) {\r\n    Assert.hasLength(className, \"'className' must not be empty\");\r\n    validatePackage(ClassUtils.getPackageName(className), className);\r\n    Assert.isTrue(isJavaIdentifier(className), \"'className' must be a valid identifier, got '\" + className + \"'\");\r\n    return ClassUtils.convertClassNameToResourcePath(className) + \".java\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#getClassNamePath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles#validatePackage(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void validatePackage(String packageName, String className) {\r\n    if (!StringUtils.hasLength(packageName)) {\r\n        throw new IllegalArgumentException(\"Could not add '\" + className + \"', \" + \"processing classes in the default package is not supported. \" + \"Did you forget to add a package statement?\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFiles#validatePackage(String,String)",
    "tailType": "method"
  }
]