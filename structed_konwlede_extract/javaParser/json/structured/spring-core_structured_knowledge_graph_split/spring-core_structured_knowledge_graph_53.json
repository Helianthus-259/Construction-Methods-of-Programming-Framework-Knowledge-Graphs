[
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#isIndependentWhenIndependentReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isIndependentWhenIndependentReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isIndependentWhenNotIndependentReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isIndependentWhenNotIndependentReturnsFalse() {\r\n    assertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#isIndependentWhenNotIndependentReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#isIndependentWhenNotIndependentReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\r\n    assertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(AbstractAnnotationMetadataTests.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\r\n    assertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasSuperClassReturnsName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperClassNameWhenHasSuperClassReturnsName() {\r\n    assertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\r\n    assertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasSuperClassReturnsName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasSuperClassReturnsName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasNoSuperClassReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\r\n    assertThat(get(Object.class).getSuperClassName()).isNull();\r\n    assertThat(get(TestInterface.class).getSuperClassName()).isNull();\r\n    assertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasNoSuperClassReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getSuperClassNameWhenHasNoSuperClassReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasInterfacesReturnsNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\r\n    assertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\r\n    assertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasInterfacesReturnsNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AbstractAnnotationMetadataTests#getInterfaceNamesWhenHasInterfacesReturnsNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]