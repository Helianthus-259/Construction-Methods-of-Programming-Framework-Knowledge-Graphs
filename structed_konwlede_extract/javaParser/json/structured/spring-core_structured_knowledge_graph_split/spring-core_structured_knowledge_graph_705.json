[
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\n/**\n * @author Juozas Baliuka\n */\npublic interface InterceptFieldCallback {\n\n    int writeInt(Object obj, String name, int oldValue, int newValue);\n    char writeChar(Object obj, String name, char oldValue, char newValue);\n    byte writeByte(Object obj, String name, byte oldValue, byte newValue);\n    boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue);\n    short writeShort(Object obj, String name, short oldValue, short newValue);\n    float writeFloat(Object obj, String name, float oldValue, float newValue);\n    double writeDouble(Object obj, String name, double oldValue, double newValue);\n    long writeLong(Object obj, String name, long oldValue, long newValue);\n    Object writeObject(Object obj, String name, Object oldValue, Object newValue);\n\n    int readInt(Object obj, String name, int oldValue);\n    char readChar(Object obj, String name, char oldValue);\n    byte readByte(Object obj, String name, byte oldValue);\n    boolean readBoolean(Object obj, String name, boolean oldValue);\n    short readShort(Object obj, String name, short oldValue);\n    float readFloat(Object obj, String name, float oldValue);\n    double readDouble(Object obj, String name, double oldValue);\n    long readLong(Object obj, String name, long oldValue);\n    Object readObject(Object obj, String name, Object oldValue);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeInt(Object,String,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "int writeInt(Object obj, String name, int oldValue, int newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeInt(Object,String,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeChar(Object,String,char,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "char writeChar(Object obj, String name, char oldValue, char newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeChar(Object,String,char,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "headType": "method",
    "relation": "provide",
    "tail": "byte writeByte(Object obj, String name, byte oldValue, byte newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeShort(Object,String,short,short)",
    "headType": "method",
    "relation": "provide",
    "tail": "short writeShort(Object obj, String name, short oldValue, short newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeShort(Object,String,short,short)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeFloat(Object,String,float,float)",
    "headType": "method",
    "relation": "provide",
    "tail": "float writeFloat(Object obj, String name, float oldValue, float newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeFloat(Object,String,float,float)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeDouble(Object,String,double,double)",
    "headType": "method",
    "relation": "provide",
    "tail": "double writeDouble(Object obj, String name, double oldValue, double newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeDouble(Object,String,double,double)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeLong(Object,String,long,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "long writeLong(Object obj, String name, long oldValue, long newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeLong(Object,String,long,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeObject(Object,String,Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "Object writeObject(Object obj, String name, Object oldValue, Object newValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldCallback#writeObject(Object,String,Object,Object)",
    "tailType": "method"
  }
]