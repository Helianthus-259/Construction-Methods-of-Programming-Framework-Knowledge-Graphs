[
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.I1",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.I1",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.I2",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.I2",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.C1",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.C1",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.C2",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.C2",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.C3",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.C3",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.C4",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.C4",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\n/**\n * Tests for {@link InstanceComparator}.\n *\n * @author Phillip Webb\n */\nclass InstanceComparatorTests {\n\n\tprivate C1 c1 = new C1();\n\n\tprivate C2 c2 = new C2();\n\n\tprivate C3 c3 = new C3();\n\n\tprivate C4 c4 = new C4();\n\n\t@Test\n\tvoid shouldCompareClasses() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(C1.class, C2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c2, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c2, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareInterfaces() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, I2.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c2)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c2, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c1, c3)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, c1)).isEqualTo(1);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid shouldCompareMix() {\n\t\tComparator<Object> comparator = new InstanceComparator<>(I1.class, C3.class);\n\t\tassertThat(comparator.compare(c1, c1)).isEqualTo(0);\n\t\tassertThat(comparator.compare(c3, c4)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c3, null)).isEqualTo(-1);\n\t\tassertThat(comparator.compare(c4, null)).isEqualTo(0);\n\t}\n\n\tprivate interface I1 {\n\n\t}\n\n\tprivate interface I2 {\n\n\t}\n\n\tprivate static class C1 implements I1 {\n\t}\n\n\tprivate static class C2 implements I1 {\n\t}\n\n\tprivate static class C3 implements I2 {\n\t}\n\n\tprivate static class C4 implements I2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicates",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicates",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport java.util.function.Predicate;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.SerializationHints;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.util.Assert;\n\n/**\n * Generator of {@link SerializationHints} predicates, testing whether the\n * given hints match the expected behavior for serialization.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic class SerializationHintsPredicates {\n\n\tSerializationHintsPredicates() {\n\t}\n\n\n\t/**\n\t * Return a predicate that checks whether a {@link SerializationHints\n\t * serialization hint} is registered for the given type.\n\t * @param type the type to check\n\t * @return the {@link RuntimeHints} predicate\n\t * @see java.lang.reflect.Proxy\n\t */\n\tpublic Predicate<RuntimeHints> onType(Class<?> type) {\n\t\tAssert.notNull(type, \"'type' must not be null\");\n\t\treturn onType(TypeReference.of(type));\n\t}\n\n\t/**\n\t * Return a predicate that checks whether a {@link SerializationHints\n\t * serialization hint} is registered for the given type reference.\n\t * @param typeReference the type to check\n\t * @return the {@link RuntimeHints} predicate\n\t * @see java.lang.reflect.Proxy\n\t */\n\tpublic Predicate<RuntimeHints> onType(TypeReference typeReference) {\n\t\tAssert.notNull(typeReference, \"'typeReference' must not be null\");\n\t\treturn hints -> hints.serialization().javaSerializationHints().anyMatch(\n\t\t\t\thint -> hint.getType().equals(typeReference));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicates#onType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a {@link SerializationHints\r\n * serialization hint} is registered for the given type.\r\n * @param type the type to check\r\n * @return the {@link RuntimeHints} predicate\r\n * @see java.lang.reflect.Proxy\r\n */\r\npublic Predicate<RuntimeHints> onType(Class<?> type) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    return onType(TypeReference.of(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicates#onType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicates#onType(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a {@link SerializationHints\r\n * serialization hint} is registered for the given type reference.\r\n * @param typeReference the type to check\r\n * @return the {@link RuntimeHints} predicate\r\n * @see java.lang.reflect.Proxy\r\n */\r\npublic Predicate<RuntimeHints> onType(TypeReference typeReference) {\r\n    Assert.notNull(typeReference, \"'typeReference' must not be null\");\r\n    return hints -> hints.serialization().javaSerializationHints().anyMatch(hint -> hint.getType().equals(typeReference));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicates#onType(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  }
]