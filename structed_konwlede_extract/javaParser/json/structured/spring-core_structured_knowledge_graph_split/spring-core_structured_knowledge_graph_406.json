[
  {
    "head": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(final Attribute attribute) {\r\n    // Store the attributes in the <i>reverse</i> order of their visit by this method.\r\n    attribute.nextAttribute = firstAttribute;\r\n    firstAttribute = attribute;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    // Nothing to do.\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNamespaceURI() {\r\n    context.bindNamespaceUri(XMLConstants.XMLNS_ATTRIBUTE, additionalNamespaceUri);\r\n    assertThat(context.getNamespaceURI(XMLConstants.XMLNS_ATTRIBUTE)).as(\"Always returns \\\"http://www.w3.org/2000/xmlns/\\\" for \\\"xmlns\\\"\").isEqualTo(XMLConstants.XMLNS_ATTRIBUTE_NS_URI);\r\n    context.bindNamespaceUri(XMLConstants.XML_NS_PREFIX, additionalNamespaceUri);\r\n    assertThat(context.getNamespaceURI(XMLConstants.XML_NS_PREFIX)).as(\"Always returns \\\"http://www.w3.org/XML/1998/namespace\\\" for \\\"xml\\\"\").isEqualTo(XMLConstants.XML_NS_URI);\r\n    assertThat(context.getNamespaceURI(unboundPrefix)).as(\"Returns \\\"\\\" for an unbound prefix\").isEmpty();\r\n    context.bindNamespaceUri(prefix, namespaceUri);\r\n    assertThat(context.getNamespaceURI(prefix)).as(\"Returns the bound namespace URI for a bound prefix\").isEqualTo(namespaceUri);\r\n    assertThat(context.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX)).as(\"By default returns URI \\\"\\\" for the default namespace prefix\").isEmpty();\r\n    context.bindDefaultNamespaceUri(defaultNamespaceUri);\r\n    assertThat(context.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX)).as(\"Returns the set URI for the default namespace prefix\").isEqualTo(defaultNamespaceUri);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPrefix_withNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> context.getPrefix(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix_withNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Utility methods\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\r\n * names of the attributes of this field in the constant pool.\r\n *\r\n * @return the size in bytes of the field_info JVMS structure.\r\n */\r\nint computeFieldInfoSize() {\r\n    // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes.\r\n    int size = 8;\r\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\r\n    if (constantValueIndex != 0) {\r\n        // ConstantValue attributes always use 8 bytes.\r\n        symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE);\r\n        size += 8;\r\n    }\r\n    size += Attribute.computeAttributesSize(symbolTable, accessFlags, signatureIndex);\r\n    size += AnnotationWriter.computeAnnotationsSize(lastRuntimeVisibleAnnotation, lastRuntimeInvisibleAnnotation, lastRuntimeVisibleTypeAnnotation, lastRuntimeInvisibleTypeAnnotation);\r\n    if (firstAttribute != null) {\r\n        size += firstAttribute.computeAttributesSize(symbolTable);\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#computeFieldInfoSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getPrefix() {\r\n    assertThat(context.getPrefix(XMLConstants.XMLNS_ATTRIBUTE_NS_URI)).as(\"Always returns \\\"xmlns\\\" for \\\"http://www.w3.org/2000/xmlns/\\\"\").isEqualTo(XMLConstants.XMLNS_ATTRIBUTE);\r\n    assertThat(context.getPrefix(XMLConstants.XML_NS_URI)).as(\"Always returns \\\"xml\\\" for \\\"http://www.w3.org/XML/1998/namespace\\\"\").isEqualTo(XMLConstants.XML_NS_PREFIX);\r\n    assertThat(context.getPrefix(unboundNamespaceUri)).as(\"Returns null for an unbound namespace URI\").isNull();\r\n    context.bindNamespaceUri(\"prefix1\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix2\", namespaceUri);\r\n    assertThat(context.getPrefix(namespaceUri)).as(\"Returns a prefix for a bound namespace URI\").matches(prefix -> \"prefix1\".equals(prefix) || \"prefix2\".equals(prefix));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]