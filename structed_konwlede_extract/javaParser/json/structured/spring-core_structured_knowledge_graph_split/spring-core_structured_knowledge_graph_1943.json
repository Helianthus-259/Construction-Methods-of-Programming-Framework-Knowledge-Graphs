[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#equalityWithGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-31672\r\n@Test\r\nvoid equalityWithGenerics() {\r\n    ResolvableType rt1 = ResolvableType.forClassWithGenerics(Optional.class, Integer.class);\r\n    ResolvableType rt2 = ResolvableType.forClassWithGenerics(Optional.class, String.class);\r\n    TypeDescriptor td1 = new TypeDescriptor(rt1, null, null);\r\n    TypeDescriptor td2 = new TypeDescriptor(rt2, null, null);\r\n    assertThat(td1).isNotEqualTo(td2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#equalityWithGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#equalityWithGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#recursiveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-33932\r\n@Test\r\nvoid recursiveType() {\r\n    assertThat(TypeDescriptor.valueOf(RecursiveMap.class)).isEqualTo(TypeDescriptor.valueOf(RecursiveMap.class));\r\n    TypeDescriptor typeDescriptor1 = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(RecursiveMap.class));\r\n    TypeDescriptor typeDescriptor2 = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(RecursiveMap.class));\r\n    assertThat(typeDescriptor1).isEqualTo(typeDescriptor2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#recursiveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#recursiveType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#recursiveTypeWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-33932\r\n@Test\r\nvoid recursiveTypeWithInterface() {\r\n    assertThat(TypeDescriptor.valueOf(RecursiveMapWithInterface.class)).isEqualTo(TypeDescriptor.valueOf(RecursiveMapWithInterface.class));\r\n    TypeDescriptor typeDescriptor1 = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(RecursiveMapWithInterface.class));\r\n    TypeDescriptor typeDescriptor2 = TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(RecursiveMapWithInterface.class));\r\n    assertThat(typeDescriptor1).isEqualTo(typeDescriptor2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#recursiveTypeWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#recursiveTypeWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#testParameterPrimitive(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Methods designed for test introspection\r\npublic void testParameterPrimitive(int primitive) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#testParameterPrimitive(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#testParameterScalar(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void testParameterScalar(String value) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#testParameterScalar(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#testParameterList(List<List<Map<Integer,Enum<?>>>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void testParameterList(List<List<Map<Integer, Enum<?>>>> list) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#testParameterList(List<List<Map<Integer,Enum<?>>>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#testParameterListNoParamTypes(List)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void testParameterListNoParamTypes(List list) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#testParameterListNoParamTypes(List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#testParameterArray(Integer[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public void testParameterArray(Integer[] array) ;",
    "tailType": "method_code"
  }
]