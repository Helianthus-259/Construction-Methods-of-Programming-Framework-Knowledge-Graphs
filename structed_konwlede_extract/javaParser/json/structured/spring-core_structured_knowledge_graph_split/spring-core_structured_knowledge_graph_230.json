[
  {
    "head": "org.springframework.aot.hint.Builder#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.Builder#reachableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.Builder#reachableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.Builder#fields",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.Builder#fields",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.Builder#constructors",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.Builder#constructors",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<ExecutableKey, ExecutableHint.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.Builder#methods",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.Builder#methods",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<ExecutableKey, ExecutableHint.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.Builder#memberCategories",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.Builder#memberCategories",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<MemberCategory>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.Builder#onReachableType(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Make this hint conditional on the fact that the specified type is in a\r\n * reachable code path from a static analysis point of view.\r\n * @param reachableType the type that should be reachable for this hint to apply\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder onReachableType(TypeReference reachableType) {\r\n    this.reachableType = reachableType;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#onReachableType(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#onReachableType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Make this hint conditional on the fact that the specified type is in a\r\n * reachable code path from a static analysis point of view.\r\n * @param reachableType the type that should be reachable for this hint to apply\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder onReachableType(Class<?> reachableType) {\r\n    this.reachableType = TypeReference.of(reachableType);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#onReachableType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withField(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflective access on the field with the specified name.\r\n * @param name the name of the field\r\n * @return {@code this}, to facilitate method chaining\r\n * @see java.lang.reflect.Field#get(Object)\r\n * @see java.lang.reflect.Field#set(Object, Object)\r\n */\r\npublic Builder withField(String name) {\r\n    this.fields.add(name);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withField(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withConstructor(List<TypeReference>,ExecutableMode)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the constructor with the specified\r\n * parameter types, using the specified {@link ExecutableMode}.\r\n * @param parameterTypes the parameter types of the constructor\r\n * @param mode the requested mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder withConstructor(List<TypeReference> parameterTypes, ExecutableMode mode) {\r\n    return withConstructor(parameterTypes, ExecutableHint.builtWith(mode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withConstructor(List<TypeReference>,ExecutableMode)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withConstructor(List<TypeReference>,Consumer<ExecutableHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the constructor with the specified\r\n * parameter types.\r\n * @param parameterTypes the parameter types of the constructor\r\n * @param constructorHint a builder to further customize the hints of this\r\n * constructor\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\nprivate Builder withConstructor(List<TypeReference> parameterTypes, Consumer<ExecutableHint.Builder> constructorHint) {\r\n    ExecutableKey key = new ExecutableKey(\"<init>\", parameterTypes);\r\n    ExecutableHint.Builder builder = this.constructors.computeIfAbsent(key, k -> ExecutableHint.ofConstructor(parameterTypes));\r\n    constructorHint.accept(builder);\r\n    return this;\r\n}",
    "tailType": "method_code"
  }
]