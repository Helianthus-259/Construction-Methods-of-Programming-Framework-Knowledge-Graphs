[
  {
    "head": "org.springframework.core.ResolvableType#resolveGeneric(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convenience method that will {@link #getGeneric(int...) get} and\r\n * {@link #resolve() resolve} a specific generic parameter.\r\n * @param indexes the indexes that refer to the generic parameter\r\n * (can be omitted to return the first generic)\r\n * @return a resolved {@link Class} or {@code null}\r\n * @see #getGeneric(int...)\r\n * @see #resolve()\r\n */\r\n@Nullable\r\npublic Class<?> resolveGeneric(int... indexes) {\r\n    return getGeneric(indexes).resolve();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolveGeneric(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveGeneric(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolve()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve this type to a {@link java.lang.Class}, returning {@code null}\r\n * if the type cannot be resolved. This method will consider bounds of\r\n * {@link TypeVariable TypeVariables} and {@link WildcardType WildcardTypes} if\r\n * direct resolution fails; however, bounds of {@code Object.class} will be ignored.\r\n * <p>If this method returns a non-null {@code Class} and {@link #hasGenerics()}\r\n * returns {@code false}, the given type effectively wraps a plain {@code Class},\r\n * allowing for plain {@code Class} processing if desirable.\r\n * @return the resolved {@link Class}, or {@code null} if not resolvable\r\n * @see #resolve(Class)\r\n * @see #resolveGeneric(int...)\r\n * @see #resolveGenerics()\r\n */\r\n@Nullable\r\npublic Class<?> resolve() {\r\n    return this.resolved;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolve()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolve()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolve(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve this type to a {@link java.lang.Class}, returning the specified\r\n * {@code fallback} if the type cannot be resolved. This method will consider bounds\r\n * of {@link TypeVariable TypeVariables} and {@link WildcardType WildcardTypes} if\r\n * direct resolution fails; however, bounds of {@code Object.class} will be ignored.\r\n * @param fallback the fallback class to use if resolution fails\r\n * @return the resolved {@link Class} or the {@code fallback}\r\n * @see #resolve()\r\n * @see #resolveGeneric(int...)\r\n * @see #resolveGenerics()\r\n */\r\npublic Class<?> resolve(Class<?> fallback) {\r\n    return (this.resolved != null ? this.resolved : fallback);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolve(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Class<?> resolveClass() {\r\n    if (this.type == EmptyType.INSTANCE) {\r\n        return null;\r\n    }\r\n    if (this.type instanceof Class<?> clazz) {\r\n        return clazz;\r\n    }\r\n    if (this.type instanceof GenericArrayType) {\r\n        Class<?> resolvedComponent = getComponentType().resolve();\r\n        return (resolvedComponent != null ? Array.newInstance(resolvedComponent, 0).getClass() : null);\r\n    }\r\n    return resolveType().resolve();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolveClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve this type by a single level, returning the resolved value or {@link #NONE}.\r\n * <p>Note: The returned {@code ResolvableType} should only be used as an intermediary\r\n * as it cannot be serialized.\r\n */\r\nResolvableType resolveType() {\r\n    if (this.type instanceof ParameterizedType parameterizedType) {\r\n        return forType(parameterizedType.getRawType(), this.variableResolver);\r\n    }\r\n    if (this.type instanceof WildcardType wildcardType) {\r\n        Type resolved = resolveBounds(wildcardType.getUpperBounds());\r\n        if (resolved == null) {\r\n            resolved = resolveBounds(wildcardType.getLowerBounds());\r\n        }\r\n        return forType(resolved, this.variableResolver);\r\n    }\r\n    if (this.type instanceof TypeVariable<?> variable) {\r\n        // Try default variable resolution\r\n        if (this.variableResolver != null) {\r\n            ResolvableType resolved = this.variableResolver.resolveVariable(variable);\r\n            if (resolved != null) {\r\n                return resolved;\r\n            }\r\n        }\r\n        // Fallback to bounds\r\n        return forType(resolveBounds(variable.getBounds()), this.variableResolver);\r\n    }\r\n    return NONE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveVariable(TypeVariable<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate ResolvableType resolveVariable(TypeVariable<?> variable) {\r\n    if (this.type instanceof TypeVariable) {\r\n        return resolveType().resolveVariable(variable);\r\n    }\r\n    if (this.type instanceof ParameterizedType parameterizedType) {\r\n        Class<?> resolved = resolve();\r\n        if (resolved == null) {\r\n            return null;\r\n        }\r\n        TypeVariable<?>[] variables = resolved.getTypeParameters();\r\n        for (int i = 0; i < variables.length; i++) {\r\n            if (ObjectUtils.nullSafeEquals(variables[i].getName(), variable.getName())) {\r\n                Type actualType = parameterizedType.getActualTypeArguments()[i];\r\n                return forType(actualType, this.variableResolver);\r\n            }\r\n        }\r\n        Type ownerType = parameterizedType.getOwnerType();\r\n        if (ownerType != null) {\r\n            return forType(ownerType, this.variableResolver).resolveVariable(variable);\r\n        }\r\n    }\r\n    if (this.type instanceof WildcardType) {\r\n        ResolvableType resolved = resolveType().resolveVariable(variable);\r\n        if (resolved != null) {\r\n            return resolved;\r\n        }\r\n    }\r\n    if (this.variableResolver != null) {\r\n        return this.variableResolver.resolveVariable(variable);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#resolveVariable(TypeVariable<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#resolveVariable(TypeVariable<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check for full equality of all type resolution artifacts:\r\n * type as well as {@code TypeProvider} and {@code VariableResolver}.\r\n * @see #equalsType(ResolvableType)\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || other.getClass() != getClass()) {\r\n        return false;\r\n    }\r\n    ResolvableType otherType = (ResolvableType) other;\r\n    if (!equalsType(otherType)) {\r\n        return false;\r\n    }\r\n    if (this.typeProvider != otherType.typeProvider && (this.typeProvider == null || otherType.typeProvider == null || !ObjectUtils.nullSafeEquals(this.typeProvider.getType(), otherType.typeProvider.getType()))) {\r\n        return false;\r\n    }\r\n    if (this.variableResolver != otherType.variableResolver && (this.variableResolver == null || otherType.variableResolver == null || !ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), otherType.variableResolver.getSource()))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#equalsType(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check for type-level equality with another {@code ResolvableType}.\r\n * <p>In contrast to {@link #equals(Object)} or {@link #isAssignableFrom(ResolvableType)},\r\n * this works between different sources as well, for example, method parameters and return types.\r\n * @param otherType the {@code ResolvableType} to match against\r\n * @return whether the declared type and type variables match\r\n * @since 6.1\r\n */\r\npublic boolean equalsType(ResolvableType otherType) {\r\n    return (ObjectUtils.nullSafeEquals(this.type, otherType.type) && ObjectUtils.nullSafeEquals(this.componentType, otherType.componentType));\r\n}",
    "tailType": "method_code"
  }
]