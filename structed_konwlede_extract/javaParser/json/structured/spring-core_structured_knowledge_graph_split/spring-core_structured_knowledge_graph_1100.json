[
  {
    "head": "org.springframework.core.log.FormatMessage4",
    "headType": "class",
    "relation": "extend",
    "tail": "FormatMessage",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.FormatMessageX",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A simple log message type for use with Commons Logging, allowing for convenient\n * lazy resolution of a given {@link Supplier} instance (typically bound to a lambda\n * expression) or a printf-style format string ({@link String#format}) in its\n * {@link #toString()}.\n *\n * @author Juergen Hoeller\n * @author Sebastien Deleuze\n * @since 5.2\n * @see #of(Supplier)\n * @see #format(String, Object)\n * @see #format(String, Object...)\n * @see org.apache.commons.logging.Log#fatal(Object)\n * @see org.apache.commons.logging.Log#error(Object)\n * @see org.apache.commons.logging.Log#warn(Object)\n * @see org.apache.commons.logging.Log#info(Object)\n * @see org.apache.commons.logging.Log#debug(Object)\n * @see org.apache.commons.logging.Log#trace(Object)\n */\npublic abstract class LogMessage implements CharSequence {\n\n\tprivate @Nullable String result;\n\n\n\t@Override\n\tpublic int length() {\n\t\treturn toString().length();\n\t}\n\n\t@Override\n\tpublic char charAt(int index) {\n\t\treturn toString().charAt(index);\n\t}\n\n\t@Override\n\tpublic CharSequence subSequence(int start, int end) {\n\t\treturn toString().subSequence(start, end);\n\t}\n\n\t/**\n\t * This will be called by the logging provider, potentially once\n\t * per log target (therefore locally caching the result here).\n\t */\n\t@Override\n\tpublic String toString() {\n\t\tif (this.result == null) {\n\t\t\tthis.result = buildString();\n\t\t}\n\t\treturn this.result;\n\t}\n\n\tabstract String buildString();\n\n\n\t/**\n\t * Build a lazily resolving message from the given supplier.\n\t * @param supplier the supplier (typically bound to a lambda expression)\n\t * @see #toString()\n\t */\n\tpublic static LogMessage of(Supplier<? extends CharSequence> supplier) {\n\t\treturn new SupplierMessage(supplier);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and argument.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1) {\n\t\treturn new FormatMessage1(format, arg1);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2) {\n\t\treturn new FormatMessage2(format, arg1, arg2);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @param arg3 the third argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3) {\n\t\treturn new FormatMessage3(format, arg1, arg2, arg3);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @param arg3 the third argument (can be {@code null})\n\t * @param arg4 the fourth argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3,\n\t\t\t@Nullable Object arg4) {\n\t\treturn new FormatMessage4(format, arg1, arg2, arg3, arg4);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and varargs.\n\t * <p>This varargs {@code format()} variant may be costly. You should therefore\n\t * use the individual argument variants whenever possible;\n\t * {@link #format(String, Object)}, {@link #format(String, Object, Object)}, etc.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param args the varargs array (can be {@code null} and can contain {@code null}\n\t * elements)\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object... args) {\n\t\treturn new FormatMessageX(format, args);\n\t}\n\n\n\tprivate static final class SupplierMessage extends LogMessage {\n\n\t\tprivate final Supplier<? extends CharSequence> supplier;\n\n\t\tSupplierMessage(Supplier<? extends CharSequence> supplier) {\n\t\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\t\tthis.supplier = supplier;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn this.supplier.get().toString();\n\t\t}\n\t}\n\n\n\tprivate abstract static class FormatMessage extends LogMessage {\n\n\t\tprotected final String format;\n\n\t\tFormatMessage(String format) {\n\t\t\tAssert.notNull(format, \"Format must not be null\");\n\t\t\tthis.format = format;\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage1 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tFormatMessage1(String format, @Nullable Object arg1) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t}\n\n\t\t@Override\n\t\tprotected String buildString() {\n\t\t\treturn String.format(this.format, this.arg1);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage2 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tFormatMessage2(String format, @Nullable Object arg1, @Nullable Object arg2) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage3 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tprivate final @Nullable Object arg3;\n\n\t\tFormatMessage3(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t\tthis.arg3 = arg3;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2, this.arg3);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage4 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tprivate final @Nullable Object arg3;\n\n\t\tprivate final @Nullable Object arg4;\n\n\t\tFormatMessage4(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3,\n\t\t\t\t@Nullable Object arg4) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t\tthis.arg3 = arg3;\n\t\t\tthis.arg4 = arg4;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2, this.arg3, this.arg4);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessageX extends FormatMessage {\n\n\t\tprivate final @Nullable Object[] args;\n\n\t\tFormatMessageX(String format, @Nullable Object... args) {\n\t\t\tsuper(format);\n\t\t\tthis.args = args;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.args);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.FormatMessageX#args",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX#args",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX#buildString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nString buildString() {\r\n    return String.format(this.format, this.args);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.FormatMessageX#buildString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX#buildString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.FormatMessageX",
    "headType": "class",
    "relation": "extend",
    "tail": "FormatMessage",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.MethodClassKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.MethodClassKey",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Method;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ObjectUtils;\n\n/**\n * A common key class for a method against a specific target class,\n * including {@link #toString()} representation and {@link Comparable}\n * support (as suggested for custom {@code HashMap} keys as of Java 8).\n *\n * @author Juergen Hoeller\n * @since 4.3\n */\npublic final class MethodClassKey implements Comparable<MethodClassKey> {\n\n\tprivate final Method method;\n\n\tprivate final @Nullable Class<?> targetClass;\n\n\n\t/**\n\t * Create a key object for the given method and target class.\n\t * @param method the method to wrap (must not be {@code null})\n\t * @param targetClass the target class that the method will be invoked\n\t * on (may be {@code null} if identical to the declaring class)\n\t */\n\tpublic MethodClassKey(Method method, @Nullable Class<?> targetClass) {\n\t\tthis.method = method;\n\t\tthis.targetClass = targetClass;\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof MethodClassKey that &&\n\t\t\t\tthis.method.equals(that.method) &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.targetClass, that.targetClass)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.method.hashCode() + (this.targetClass != null ? this.targetClass.hashCode() * 29 : 0);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.method + (this.targetClass != null ? \" on \" + this.targetClass : \"\");\n\t}\n\n\t@Override\n\tpublic int compareTo(MethodClassKey other) {\n\t\tint result = this.method.getName().compareTo(other.method.getName());\n\t\tif (result == 0) {\n\t\t\tresult = this.method.toString().compareTo(other.method.toString());\n\t\t\tif (result == 0 && this.targetClass != null && other.targetClass != null) {\n\t\t\t\tresult = this.targetClass.getName().compareTo(other.targetClass.getName());\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.MethodClassKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.MethodClassKey#method",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.MethodClassKey#method",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.MethodClassKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.MethodClassKey#targetClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.MethodClassKey#targetClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.MethodClassKey#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof MethodClassKey that && this.method.equals(that.method) && ObjectUtils.nullSafeEquals(this.targetClass, that.targetClass)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodClassKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodClassKey#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodClassKey#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]