[
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeHashCode(float[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(float[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hash code based on the contents of the specified array.\r\n * If {@code array} is {@code null}, this method returns 0.\r\n * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(int[])}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic static int nullSafeHashCode(int @Nullable [] array) {\r\n    return Arrays.hashCode(array);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeHashCode(int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(int[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(long[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hash code based on the contents of the specified array.\r\n * If {@code array} is {@code null}, this method returns 0.\r\n * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(long[])}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic static int nullSafeHashCode(long @Nullable [] array) {\r\n    return Arrays.hashCode(array);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeHashCode(long[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(long[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(short[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hash code based on the contents of the specified array.\r\n * If {@code array} is {@code null}, this method returns 0.\r\n * @deprecated as of 6.1 in favor of {@link Arrays#hashCode(short[])}\r\n */\r\n@Deprecated(since = \"6.1\")\r\npublic static int nullSafeHashCode(short @Nullable [] array) {\r\n    return Arrays.hashCode(array);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeHashCode(short[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeHashCode(short[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#identityToString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Convenience methods for toString output\r\n//---------------------------------------------------------------------\r\n/**\r\n * Return a String representation of an object's overall identity.\r\n * @param obj the object (may be {@code null})\r\n * @return the object's identity as String representation,\r\n * or an empty String if the object was {@code null}\r\n */\r\npublic static String identityToString(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return EMPTY_STRING;\r\n    }\r\n    return obj.getClass().getName() + \"@\" + getIdentityHexString(obj);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#identityToString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#getIdentityHexString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hex String form of an object's identity hash code.\r\n * @param obj the object\r\n * @return the object's identity code in hex notation\r\n */\r\npublic static String getIdentityHexString(Object obj) {\r\n    return Integer.toHexString(System.identityHashCode(obj));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#getIdentityHexString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#getDisplayString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a content-based String representation if {@code obj} is\r\n * not {@code null}; otherwise returns an empty String.\r\n * <p>Differs from {@link #nullSafeToString(Object)} in that it returns\r\n * an empty String rather than \"null\" for a {@code null} value.\r\n * @param obj the object to build a display String for\r\n * @return a display String representation of {@code obj}\r\n * @see #nullSafeToString(Object)\r\n */\r\npublic static String getDisplayString(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return EMPTY_STRING;\r\n    }\r\n    return nullSafeToString(obj);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#getDisplayString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeClassName(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the class name for the given object.\r\n * <p>Returns a {@code \"null\"} String if {@code obj} is {@code null}.\r\n * @param obj the object to introspect (may be {@code null})\r\n * @return the corresponding class name\r\n */\r\npublic static String nullSafeClassName(@Nullable Object obj) {\r\n    return (obj != null ? obj.getClass().getName() : NULL_STRING);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeClassName(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeToString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of the specified Object.\r\n * <p>Builds a String representation of the contents in case of an array.\r\n * Returns a {@code \"null\"} String if {@code obj} is {@code null}.\r\n * @param obj the object to build a String representation for\r\n * @return a String representation of {@code obj}\r\n * @see #nullSafeConciseToString(Object)\r\n */\r\npublic static String nullSafeToString(@Nullable Object obj) {\r\n    if (obj == null) {\r\n        return NULL_STRING;\r\n    }\r\n    if (obj instanceof String string) {\r\n        return string;\r\n    }\r\n    if (obj instanceof Object[] objects) {\r\n        return nullSafeToString(objects);\r\n    }\r\n    if (obj instanceof boolean[] booleans) {\r\n        return nullSafeToString(booleans);\r\n    }\r\n    if (obj instanceof byte[] bytes) {\r\n        return nullSafeToString(bytes);\r\n    }\r\n    if (obj instanceof char[] chars) {\r\n        return nullSafeToString(chars);\r\n    }\r\n    if (obj instanceof double[] doubles) {\r\n        return nullSafeToString(doubles);\r\n    }\r\n    if (obj instanceof float[] floats) {\r\n        return nullSafeToString(floats);\r\n    }\r\n    if (obj instanceof int[] ints) {\r\n        return nullSafeToString(ints);\r\n    }\r\n    if (obj instanceof long[] longs) {\r\n        return nullSafeToString(longs);\r\n    }\r\n    if (obj instanceof short[] shorts) {\r\n        return nullSafeToString(shorts);\r\n    }\r\n    String str = obj.toString();\r\n    return (str != null ? str : EMPTY_STRING);\r\n}",
    "tailType": "method_code"
  }
]