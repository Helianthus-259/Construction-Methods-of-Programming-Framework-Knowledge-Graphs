[
  {
    "head": "org.springframework.asm.TypePath#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a string representation of this type path. {@link #ARRAY_ELEMENT} steps are represented\r\n * with '[', {@link #INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND} steps with '*' and {@link\r\n * #TYPE_ARGUMENT} steps with their type argument index in decimal form followed by ';'.\r\n */\r\n@Override\r\npublic String toString() {\r\n    int length = getLength();\r\n    StringBuilder result = new StringBuilder(length * 2);\r\n    for (int i = 0; i < length; ++i) {\r\n        switch(getStep(i)) {\r\n            case ARRAY_ELEMENT:\r\n                result.append('[');\r\n                break;\r\n            case INNER_TYPE:\r\n                result.append('.');\r\n                break;\r\n            case WILDCARD_BOUND:\r\n                result.append('*');\r\n                break;\r\n            case TYPE_ARGUMENT:\r\n                result.append(getStepArgument(i)).append(';');\r\n                break;\r\n            default:\r\n                throw new AssertionError();\r\n        }\r\n    }\r\n    return result.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypePath#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the type_path JVMS structure corresponding to the given TypePath into the given\r\n * ByteVector.\r\n *\r\n * @param typePath a TypePath instance, or {@literal null} for empty paths.\r\n * @param output where the type path must be put.\r\n */\r\nstatic void put(final TypePath typePath, final ByteVector output) {\r\n    if (typePath == null) {\r\n        output.putByte(0);\r\n    } else {\r\n        int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1;\r\n        output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypePath#put(TypePath,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.nullness",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.nullness;\n\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.NullMarked;\nimport org.jspecify.annotations.Nullable;\n\npublic interface JSpecifyProcessor {\n\n\tString process(String unspecified, @Nullable String nullable, @NonNull String nonNull);\n\n\t@Nullable String nullableProcess();\n\n\t@NonNull String nonNullProcess();\n\n\t@NullMarked\n\tString markedProcess(String unspecified, @Nullable String nullable, @NonNull String nonNull);\n\n\t@NullMarked\n\t@Nullable String nullableMarkedProcess();\n\n\t@NullMarked\n\t@NonNull String nonNullMarkedProcess();\n\n\tvoid voidProcess();\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#process(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "String process(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#process(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nString nullableProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@NonNull\r\nString nonNullProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nonNullProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@NonNull",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@NullMarked\r\nString markedProcess(String unspecified, @Nullable String nullable, @NonNull String nonNull);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#markedProcess(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@NullMarked",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.JSpecifyProcessor#nullableMarkedProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@NullMarked\r\n@Nullable\r\nString nullableMarkedProcess();",
    "tailType": "method_code"
  }
]