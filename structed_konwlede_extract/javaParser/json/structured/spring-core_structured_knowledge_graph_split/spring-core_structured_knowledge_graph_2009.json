[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize5(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize5(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 3, 2, 1, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"fo\", \"ob\", \"ar\", \"ba\", \"z\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize5(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize5(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize6(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize6(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 1, 3, 1, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"foo\", \"bar\", \"baz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize6(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize6(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize7(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize7(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 1, 3, 64, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"foo\", \"bar\", \"baz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize7(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize7(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#genericInputStreamSubscriberTest(DataBufferFactory,int,int,int,List<String>,List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "void genericInputStreamSubscriberTest(DataBufferFactory factory, int writeChunkSize, int readChunkSize, int bufferSize, List<String> input, List<String> expectedOutput) {\r\n    super.bufferFactory = factory;\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(out -> {\r\n        try {\r\n            for (String word : input) {\r\n                out.write(word.getBytes(StandardCharsets.UTF_8));\r\n            }\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor(), writeChunkSize);\r\n    byte[] chunk = new byte[readChunkSize];\r\n    List<String> words = new ArrayList<>();\r\n    try (InputStream in = DataBufferUtils.subscriberInputStream(publisher, bufferSize)) {\r\n        int read;\r\n        while ((read = in.read(chunk)) > -1) {\r\n            words.add(new String(chunk, 0, read, StandardCharsets.UTF_8));\r\n        }\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    assertThat(words).containsExactlyElementsOf(expectedOutput);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#genericInputStreamSubscriberTest(DataBufferFactory,int,int,int,List<String>,List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberError(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberError(DataBufferFactory factory) {\r\n    super.bufferFactory = factory;\r\n    var input = List.of(\"foo \", \"bar \", \"baz\");\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(out -> {\r\n        try {\r\n            for (String word : input) {\r\n                out.write(word.getBytes(StandardCharsets.UTF_8));\r\n            }\r\n            throw new RuntimeException(\"boom\");\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor(), 1);\r\n    RuntimeException error = null;\r\n    byte[] chunk = new byte[4];\r\n    List<String> words = new ArrayList<>();\r\n    try (InputStream in = DataBufferUtils.subscriberInputStream(publisher, 1)) {\r\n        int read;\r\n        while ((read = in.read(chunk)) > -1) {\r\n            words.add(new String(chunk, 0, read, StandardCharsets.UTF_8));\r\n        }\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    } catch (RuntimeException e) {\r\n        error = e;\r\n    }\r\n    assertThat(words).containsExactlyElementsOf(List.of(\"foo \", \"bar \", \"baz\"));\r\n    assertThat(error).hasMessage(\"boom\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberError(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberError(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberMixedReadMode(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberMixedReadMode(DataBufferFactory factory) {\r\n    super.bufferFactory = factory;\r\n    var input = List.of(\"foo \", \"bar \", \"baz\");\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(out -> {\r\n        try {\r\n            for (String word : input) {\r\n                out.write(word.getBytes(StandardCharsets.UTF_8));\r\n            }\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor(), 1);\r\n    byte[] chunk = new byte[3];\r\n    ArrayList<String> words = new ArrayList<>();\r\n    try (InputStream inputStream = DataBufferUtils.subscriberInputStream(publisher, 1)) {\r\n        words.add(new String(chunk, 0, inputStream.read(chunk), StandardCharsets.UTF_8));\r\n        assertThat(inputStream.read()).isEqualTo(' ' & 0xFF);\r\n        words.add(new String(chunk, 0, inputStream.read(chunk), StandardCharsets.UTF_8));\r\n        assertThat(inputStream.read()).isEqualTo(' ' & 0xFF);\r\n        words.add(new String(chunk, 0, inputStream.read(chunk), StandardCharsets.UTF_8));\r\n        assertThat(inputStream.read()).isEqualTo(-1);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    assertThat(words).containsExactlyElementsOf(List.of(\"foo\", \"bar\", \"baz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberMixedReadMode(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberMixedReadMode(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberClose(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberClose(DataBufferFactory bufferFactory) throws InterruptedException {\r\n    for (int i = 1; i < 100; i++) {\r\n        CountDownLatch latch = new CountDownLatch(1);\r\n        super.bufferFactory = bufferFactory;\r\n        var input = List.of(\"foo\", \"bar\", \"baz\");\r\n        Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(out -> {\r\n            try {\r\n                assertThatIOException().isThrownBy(() -> {\r\n                    for (String word : input) {\r\n                        out.write(word.getBytes(StandardCharsets.UTF_8));\r\n                        out.flush();\r\n                    }\r\n                }).withMessage(\"Subscription has been terminated\");\r\n            } finally {\r\n                latch.countDown();\r\n            }\r\n        }, super.bufferFactory, Executors.newSingleThreadExecutor(), 1);\r\n        byte[] chunk = new byte[3];\r\n        ArrayList<String> words = new ArrayList<>();\r\n        try (InputStream in = DataBufferUtils.subscriberInputStream(publisher, ThreadLocalRandom.current().nextInt(1, 4))) {\r\n            in.read(chunk);\r\n            String word = new String(chunk, StandardCharsets.UTF_8);\r\n            words.add(word);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        assertThat(words).containsExactlyElementsOf(List.of(\"foo\"));\r\n        latch.await();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberClose(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberClose(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  }
]