[
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CommonsLogWriter#buffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#buffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "StringBuilder",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#write(char)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void write(char ch) {\r\n    if (ch == '\\n' && this.buffer.length() > 0) {\r\n        logger.debug(this.buffer.toString());\r\n        this.buffer.setLength(0);\r\n    } else {\r\n        this.buffer.append(ch);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CommonsLogWriter#write(char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#write(char[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void write(char[] buffer, int offset, int length) {\r\n    for (int i = 0; i < length; i++) {\r\n        write(buffer[offset + i]);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CommonsLogWriter#write(char[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#write(char[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#flush()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void flush() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CommonsLogWriter#flush()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#flush()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CommonsLogWriter#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CommonsLogWriter",
    "headType": "class",
    "relation": "extend",
    "tail": "Writer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.BooleanComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.io.Serializable;\nimport java.util.Comparator;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A {@link Comparator} for {@link Boolean} objects that can sort either\n * {@code true} or {@code false} first.\n *\n * @author Keith Donald\n * @author Eugene Rabii\n * @since 1.2.2\n */\n@SuppressWarnings(\"serial\")\npublic class BooleanComparator implements Comparator<Boolean>, Serializable {\n\n\t/**\n\t * A shared default instance of this comparator,\n\t * treating {@code true} lower than {@code false}.\n\t */\n\tpublic static final BooleanComparator TRUE_LOW = new BooleanComparator(true);\n\n\t/**\n\t * A shared default instance of this comparator,\n\t * treating {@code true} higher than {@code false}.\n\t */\n\tpublic static final BooleanComparator TRUE_HIGH = new BooleanComparator(false);\n\n\n\tprivate final boolean trueLow;\n\n\n\t/**\n\t * Create a BooleanComparator that sorts boolean values based on\n\t * the provided flag.\n\t * <p>Alternatively, you can use the default shared instances:\n\t * {@code BooleanComparator.TRUE_LOW} and\n\t * {@code BooleanComparator.TRUE_HIGH}.\n\t * @param trueLow whether to treat true as lower or higher than false\n\t * @see #TRUE_LOW\n\t * @see #TRUE_HIGH\n\t */\n\tpublic BooleanComparator(boolean trueLow) {\n\t\tthis.trueLow = trueLow;\n\t}\n\n\n\t@Override\n\tpublic int compare(Boolean left, Boolean right) {\n\t\tint multiplier = this.trueLow ? -1 : 1;\n\t\treturn multiplier * Boolean.compare(left, right);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof BooleanComparator that && this.trueLow == that.trueLow));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Boolean.hashCode(this.trueLow);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"BooleanComparator: \" + (this.trueLow ? \"true low\" : \"true high\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.BooleanComparator#TRUE_LOW",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#TRUE_LOW",
    "headType": "field",
    "relation": "haveType",
    "tail": "BooleanComparator",
    "tailType": "type"
  }
]