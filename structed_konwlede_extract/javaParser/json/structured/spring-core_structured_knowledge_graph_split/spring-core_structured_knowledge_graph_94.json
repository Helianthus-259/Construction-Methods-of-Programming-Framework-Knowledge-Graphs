[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.IOException;\n\nimport org.springframework.core.type.AbstractClassMetadataMemberClassTests;\nimport org.springframework.core.type.ClassMetadata;\n\n/**\n * @author Chris Beams\n * @since 3.1\n * @see AbstractClassMetadataMemberClassTests\n */\nclass ClassMetadataReadingVisitorMemberClassTests extends AbstractClassMetadataMemberClassTests {\n\n\t@Override\n\tpublic ClassMetadata getClassMetadataFor(Class<?> clazz) {\n\t\ttry {\n\t\t\tMetadataReader reader =\n\t\t\t\tnew SimpleMetadataReaderFactory().getMetadataReader(clazz.getName());\n\t\t\treturn reader.getAnnotationMetadata();\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests#getClassMetadataFor(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic ClassMetadata getClassMetadataFor(Class<?> clazz) {\r\n    try {\r\n        MetadataReader reader = new SimpleMetadataReaderFactory().getMetadataReader(clazz.getName());\r\n        return reader.getAnnotationMetadata();\r\n    } catch (IOException ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests#getClassMetadataFor(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests#getClassMetadataFor(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassMetadataReadingVisitorMemberClassTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassMetadataMemberClassTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.UnsupportedTypeValueCodeGenerationException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.UnsupportedTypeValueCodeGenerationException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.UnsupportedTypeValueCodeGenerationException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\n/**\n * Thrown when a {@link ValueCodeGenerator} could not generate the code for a\n * given value.\n *\n * @author Stephane Nicoll\n * @since 6.1.2\n */\n@SuppressWarnings(\"serial\")\npublic class UnsupportedTypeValueCodeGenerationException extends ValueCodeGenerationException {\n\n\tpublic UnsupportedTypeValueCodeGenerationException(Object value) {\n\t\tsuper(\"Code generation does not support \" + value.getClass().getName(), value, null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.UnsupportedTypeValueCodeGenerationException",
    "headType": "class",
    "relation": "extend",
    "tail": "ValueCodeGenerationException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.ClassReader;\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.SpringAsmInfo;\nimport org.springframework.core.annotation.MergedAnnotation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link MergedAnnotationReadingVisitor}.\n *\n * @author Phillip Webb\n */\nclass MergedAnnotationMetadataVisitorTests {\n\n\tprivate MergedAnnotation<?> annotation;\n\n\t@Test\n\tvoid visitWhenHasSimpleTypesCreatesAnnotation() {\n\t\tloadFrom(WithSimpleTypesAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(SimpleTypesAnnotation.class);\n\t\tassertThat(this.annotation.getValue(\"stringValue\")).contains(\"string\");\n\t\tassertThat(this.annotation.getValue(\"byteValue\")).contains((byte) 1);\n\t\tassertThat(this.annotation.getValue(\"shortValue\")).contains((short) 2);\n\t\tassertThat(this.annotation.getValue(\"intValue\")).contains(3);\n\t\tassertThat(this.annotation.getValue(\"longValue\")).contains(4L);\n\t\tassertThat(this.annotation.getValue(\"booleanValue\")).contains(true);\n\t\tassertThat(this.annotation.getValue(\"charValue\")).contains('c');\n\t\tassertThat(this.annotation.getValue(\"doubleValue\")).contains(5.0);\n\t\tassertThat(this.annotation.getValue(\"floatValue\")).contains(6.0f);\n\t}\n\n\t@Test\n\tvoid visitWhenHasSimpleArrayTypesCreatesAnnotation() {\n\t\tloadFrom(WithSimpleArrayTypesAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(SimpleArrayTypesAnnotation.class);\n\t\tassertThat(this.annotation.getValue(\"stringValue\")).contains(\n\t\t\t\tnew String[] { \"string\" });\n\t\tassertThat(this.annotation.getValue(\"byteValue\")).contains(new byte[] { 1 });\n\t\tassertThat(this.annotation.getValue(\"shortValue\")).contains(new short[] { 2 });\n\t\tassertThat(this.annotation.getValue(\"intValue\")).contains(new int[] { 3 });\n\t\tassertThat(this.annotation.getValue(\"longValue\")).contains(new long[] { 4 });\n\t\tassertThat(this.annotation.getValue(\"booleanValue\")).contains(\n\t\t\t\tnew boolean[] { true });\n\t\tassertThat(this.annotation.getValue(\"charValue\")).contains(new char[] { 'c' });\n\t\tassertThat(this.annotation.getValue(\"doubleValue\")).contains(\n\t\t\t\tnew double[] { 5.0 });\n\t\tassertThat(this.annotation.getValue(\"floatValue\")).contains(new float[] { 6.0f });\n\t}\n\n\t@Test\n\tvoid visitWhenHasEmptySimpleArrayTypesCreatesAnnotation() {\n\t\tloadFrom(WithSimpleEmptyArrayTypesAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(SimpleArrayTypesAnnotation.class);\n\t\tassertThat(this.annotation.getValue(\"stringValue\")).contains(new String[] {});\n\t\tassertThat(this.annotation.getValue(\"byteValue\")).contains(new byte[] {});\n\t\tassertThat(this.annotation.getValue(\"shortValue\")).contains(new short[] {});\n\t\tassertThat(this.annotation.getValue(\"intValue\")).contains(new int[] {});\n\t\tassertThat(this.annotation.getValue(\"longValue\")).contains(new long[] {});\n\t\tassertThat(this.annotation.getValue(\"booleanValue\")).contains(new boolean[] {});\n\t\tassertThat(this.annotation.getValue(\"charValue\")).contains(new char[] {});\n\t\tassertThat(this.annotation.getValue(\"doubleValue\")).contains(new double[] {});\n\t\tassertThat(this.annotation.getValue(\"floatValue\")).contains(new float[] {});\n\t}\n\n\t@Test\n\tvoid visitWhenHasEnumAttributesCreatesAnnotation() {\n\t\tloadFrom(WithEnumAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(EnumAnnotation.class);\n\t\tassertThat(this.annotation.getValue(\"enumValue\")).contains(ExampleEnum.ONE);\n\t\tassertThat(this.annotation.getValue(\"enumArrayValue\")).contains(\n\t\t\t\tnew ExampleEnum[] { ExampleEnum.ONE, ExampleEnum.TWO });\n\t}\n\n\t@Test\n\tvoid visitWhenHasAnnotationAttributesCreatesAnnotation() {\n\t\tloadFrom(WithAnnotationAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(AnnotationAnnotation.class);\n\t\tMergedAnnotation<NestedAnnotation> value = this.annotation.getAnnotation(\n\t\t\t\t\"annotationValue\", NestedAnnotation.class);\n\t\tassertThat(value.isPresent()).isTrue();\n\t\tassertThat(value.getString(MergedAnnotation.VALUE)).isEqualTo(\"a\");\n\t\tMergedAnnotation<NestedAnnotation>[] arrayValue = this.annotation.getAnnotationArray(\n\t\t\t\t\"annotationArrayValue\", NestedAnnotation.class);\n\t\tassertThat(arrayValue).hasSize(2);\n\t\tassertThat(arrayValue[0].getString(MergedAnnotation.VALUE)).isEqualTo(\"b\");\n\t\tassertThat(arrayValue[1].getString(MergedAnnotation.VALUE)).isEqualTo(\"c\");\n\t}\n\n\t@Test\n\tvoid visitWhenHasClassAttributesCreatesAnnotation() {\n\t\tloadFrom(WithClassAnnotation.class);\n\t\tassertThat(this.annotation.getType()).isEqualTo(ClassAnnotation.class);\n\t\tassertThat(this.annotation.getString(\"classValue\")).isEqualTo(InputStream.class.getName());\n\t\tassertThat(this.annotation.getClass(\"classValue\")).isEqualTo(InputStream.class);\n\t\tassertThat(this.annotation.getValue(\"classValue\")).contains(InputStream.class);\n\t\tassertThat(this.annotation.getStringArray(\"classArrayValue\")).containsExactly(OutputStream.class.getName());\n\t\tassertThat(this.annotation.getValue(\"classArrayValue\")).contains(new Class<?>[] {OutputStream.class});\n\t}\n\n\tprivate void loadFrom(Class<?> type) {\n\t\tClassVisitor visitor = new ClassVisitor(SpringAsmInfo.ASM_VERSION) {\n\n\t\t\t@Override\n\t\t\tpublic AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\n\t\t\t\treturn MergedAnnotationReadingVisitor.get(getClass().getClassLoader(),\n\t\t\t\t\t\tnull, descriptor, visible,\n\t\t\t\t\t\tannotation -> MergedAnnotationMetadataVisitorTests.this.annotation = annotation);\n\t\t\t}\n\n\t\t};\n\t\ttry {\n\t\t\tnew ClassReader(type.getName()).accept(visitor, ClassReader.SKIP_DEBUG\n\t\t\t\t\t| ClassReader.SKIP_CODE | ClassReader.SKIP_FRAMES);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t}\n\n\t@SimpleTypesAnnotation(stringValue = \"string\", byteValue = 1, shortValue = 2, intValue = 3, longValue = 4, booleanValue = true, charValue = 'c', doubleValue = 5.0, floatValue = 6.0f)\n\tstatic class WithSimpleTypesAnnotation {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface SimpleTypesAnnotation {\n\n\t\tString stringValue();\n\n\t\tbyte byteValue();\n\n\t\tshort shortValue();\n\n\t\tint intValue();\n\n\t\tlong longValue();\n\n\t\tboolean booleanValue();\n\n\t\tchar charValue();\n\n\t\tdouble doubleValue();\n\n\t\tfloat floatValue();\n\n\t}\n\n\t@SimpleArrayTypesAnnotation(stringValue = \"string\", byteValue = 1, shortValue = 2, intValue = 3, longValue = 4, booleanValue = true, charValue = 'c', doubleValue = 5.0, floatValue = 6.0f)\n\tstatic class WithSimpleArrayTypesAnnotation {\n\n\t}\n\n\t@SimpleArrayTypesAnnotation(stringValue = {}, byteValue = {}, shortValue = {}, intValue = {}, longValue = {}, booleanValue = {}, charValue = {}, doubleValue = {}, floatValue = {})\n\tstatic class WithSimpleEmptyArrayTypesAnnotation {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface SimpleArrayTypesAnnotation {\n\n\t\tString[] stringValue();\n\n\t\tbyte[] byteValue();\n\n\t\tshort[] shortValue();\n\n\t\tint[] intValue();\n\n\t\tlong[] longValue();\n\n\t\tboolean[] booleanValue();\n\n\t\tchar[] charValue();\n\n\t\tdouble[] doubleValue();\n\n\t\tfloat[] floatValue();\n\n\t}\n\n\t@EnumAnnotation(enumValue = ExampleEnum.ONE, enumArrayValue = { ExampleEnum.ONE,\n\t\tExampleEnum.TWO })\n\tstatic class WithEnumAnnotation {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnumAnnotation {\n\n\t\tExampleEnum enumValue();\n\n\t\tExampleEnum[] enumArrayValue();\n\n\t}\n\n\tenum ExampleEnum {\n\t\tONE, TWO, THREE\n\t}\n\n\t@AnnotationAnnotation(annotationValue = @NestedAnnotation(\"a\"), annotationArrayValue = {\n\t\t@NestedAnnotation(\"b\"), @NestedAnnotation(\"c\") })\n\tstatic class WithAnnotationAnnotation {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface AnnotationAnnotation {\n\n\t\tNestedAnnotation annotationValue();\n\n\t\tNestedAnnotation[] annotationArrayValue();\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NestedAnnotation {\n\n\t\tString value() default \"\";\n\n\t}\n\n\t@ClassAnnotation(classValue = InputStream.class, classArrayValue = OutputStream.class)\n\tstatic class WithClassAnnotation {\n\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ClassAnnotation {\n\n\t\tClass<?> classValue();\n\n\t\tClass<?>[] classArrayValue();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#annotation",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#annotation",
    "headType": "field",
    "relation": "haveType",
    "tail": "MergedAnnotation<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasSimpleTypesCreatesAnnotation() {\r\n    loadFrom(WithSimpleTypesAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(SimpleTypesAnnotation.class);\r\n    assertThat(this.annotation.getValue(\"stringValue\")).contains(\"string\");\r\n    assertThat(this.annotation.getValue(\"byteValue\")).contains((byte) 1);\r\n    assertThat(this.annotation.getValue(\"shortValue\")).contains((short) 2);\r\n    assertThat(this.annotation.getValue(\"intValue\")).contains(3);\r\n    assertThat(this.annotation.getValue(\"longValue\")).contains(4L);\r\n    assertThat(this.annotation.getValue(\"booleanValue\")).contains(true);\r\n    assertThat(this.annotation.getValue(\"charValue\")).contains('c');\r\n    assertThat(this.annotation.getValue(\"doubleValue\")).contains(5.0);\r\n    assertThat(this.annotation.getValue(\"floatValue\")).contains(6.0f);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleTypesCreatesAnnotation()",
    "tailType": "method"
  }
]