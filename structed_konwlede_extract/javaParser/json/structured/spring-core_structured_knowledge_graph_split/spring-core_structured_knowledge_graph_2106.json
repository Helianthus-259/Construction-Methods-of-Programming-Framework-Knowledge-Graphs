[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromTypeWithVariableResolver()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromTypeWithVariableResolver() throws Exception {\r\n    Type sourceType = Methods.class.getMethod(\"typedReturn\").getGenericReturnType();\r\n    ResolvableType type = ResolvableType.forType(sourceType, ResolvableType.forClass(TypedMethods.class).as(Methods.class).asVariableResolver());\r\n    assertThat(type.resolve()).isEqualTo(String.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromTypeWithVariableResolver()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromTypeWithVariableResolver()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeWithCustomVariableResolver()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeWithCustomVariableResolver() throws Exception {\r\n    VariableResolver variableResolver = mock();\r\n    given(variableResolver.getSource()).willReturn(this);\r\n    ResolvableType longType = ResolvableType.forClass(Long.class);\r\n    given(variableResolver.resolveVariable(any())).willReturn(longType);\r\n    ResolvableType variable = ResolvableType.forType(Fields.class.getField(\"typeVariableType\").getGenericType(), variableResolver);\r\n    ResolvableType parameterized = ResolvableType.forType(Fields.class.getField(\"parameterizedType\").getGenericType(), variableResolver);\r\n    assertThat(variable.resolve()).isEqualTo(Long.class);\r\n    assertThat(parameterized.resolve()).isEqualTo(List.class);\r\n    assertThat(parameterized.resolveGeneric()).isEqualTo(Long.class);\r\n    verify(variableResolver, atLeastOnce()).resolveVariable(this.typeVariableCaptor.capture());\r\n    assertThat(this.typeVariableCaptor.getValue().getName()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeWithCustomVariableResolver()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeWithCustomVariableResolver()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromReflectiveParameterizedTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromReflectiveParameterizedTypeReference() throws Exception {\r\n    Type sourceType = Methods.class.getMethod(\"typedReturn\").getGenericReturnType();\r\n    ResolvableType type = ResolvableType.forType(ParameterizedTypeReference.forType(sourceType));\r\n    assertThat(type.resolve()).isNull();\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromReflectiveParameterizedTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromReflectiveParameterizedTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromDeclaredParameterizedTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromDeclaredParameterizedTypeReference() throws Exception {\r\n    Type sourceType = Methods.class.getMethod(\"charSequenceReturn\").getGenericReturnType();\r\n    ResolvableType reflectiveType = ResolvableType.forType(sourceType);\r\n    ResolvableType declaredType = ResolvableType.forType(new ParameterizedTypeReference<List<CharSequence>>() ;);\r\n    assertThat(declaredType).isEqualTo(reflectiveType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromDeclaredParameterizedTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromDeclaredParameterizedTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#toStrings()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toStrings() throws Exception {\r\n    assertThat(ResolvableType.NONE.toString()).isEqualTo(\"?\");\r\n    assertThat(forField(\"classType\")).hasToString(\"java.util.List<?>\");\r\n    assertThat(forField(\"typeVariableType\")).hasToString(\"?\");\r\n    assertThat(forField(\"parameterizedType\")).hasToString(\"java.util.List<?>\");\r\n    assertThat(forField(\"arrayClassType\")).hasToString(\"java.util.List<?>[]\");\r\n    assertThat(forField(\"genericArrayType\")).hasToString(\"java.util.List<java.lang.String>[]\");\r\n    assertThat(forField(\"genericMultiArrayType\")).hasToString(\"java.util.List<java.lang.String>[][][]\");\r\n    assertThat(forField(\"wildcardType\")).hasToString(\"java.util.List<java.lang.Number>\");\r\n    assertThat(forField(\"wildcardSuperType\")).hasToString(\"java.util.List<java.lang.Number>\");\r\n    assertThat(forField(\"charSequenceList\")).hasToString(\"java.util.List<java.lang.CharSequence>\");\r\n    assertThat(forField(\"stringList\")).hasToString(\"java.util.List<java.lang.String>\");\r\n    assertThat(forField(\"stringListList\")).hasToString(\"java.util.List<java.util.List<java.lang.String>>\");\r\n    assertThat(forField(\"stringArrayList\")).hasToString(\"java.util.List<java.lang.String[]>\");\r\n    assertThat(forField(\"stringIntegerMultiValueMap\")).hasToString(\"org.springframework.util.MultiValueMap<java.lang.String, java.lang.Integer>\");\r\n    assertThat(forField(\"stringIntegerMultiValueMapSwitched\")).hasToString(VariableNameSwitch.class.getName() + \"<java.lang.Integer, java.lang.String>\");\r\n    assertThat(forField(\"listOfListOfUnknown\")).hasToString(\"java.util.List<java.util.List<?>>\");\r\n    assertThat(forTypedField(\"typeVariableType\")).hasToString(\"java.lang.String\");\r\n    assertThat(forTypedField(\"parameterizedType\")).hasToString(\"java.util.List<java.lang.String>\");\r\n    assertThat(ResolvableType.forClass(ListOfGenericArray.class).toString()).isEqualTo(ListOfGenericArray.class.getName());\r\n    assertThat(ResolvableType.forClass(List.class, ListOfGenericArray.class).toString()).isEqualTo(\"java.util.List<java.util.List<java.lang.String>[]>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#toStrings()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#toStrings()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSource() throws Exception {\r\n    Class<?> classType = MySimpleInterfaceType.class;\r\n    Field basicField = Fields.class.getField(\"classType\");\r\n    Field field = Fields.class.getField(\"charSequenceList\");\r\n    Method method = Methods.class.getMethod(\"charSequenceParameter\", List.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    assertThat(ResolvableType.forField(basicField).getSource()).isEqualTo(basicField);\r\n    assertThat(ResolvableType.forField(field).getSource()).isEqualTo(field);\r\n    assertThat(ResolvableType.forMethodParameter(methodParameter).getSource()).isEqualTo(methodParameter);\r\n    assertThat(ResolvableType.forMethodParameter(method, 0).getSource()).isEqualTo(methodParameter);\r\n    assertThat(ResolvableType.forClass(classType).getSource()).isEqualTo(classType);\r\n    assertThat(ResolvableType.forClass(classType).getSuperType().getSource()).isEqualTo(classType.getGenericSuperclass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]