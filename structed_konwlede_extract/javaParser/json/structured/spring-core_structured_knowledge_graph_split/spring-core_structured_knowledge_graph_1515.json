[
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#testEscaped(char,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.StringTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.StringTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.StringTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.StringWriter;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.assertj.core.api.AbstractAssert;\nimport org.assertj.core.api.AssertProvider;\nimport org.assertj.core.api.StringAssert;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InOrder;\n\nimport org.springframework.aot.generate.ValueCodeGenerator.Delegate;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.aot.generate.value.EnumWithClassBody;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass$$GeneratedBy;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.FieldSpec;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link ValueCodeGenerator}.\n *\n * @author Stephane Nicoll\n */\nclass ValueCodeGeneratorTests {\n\n\n\t@Nested\n\tclass ConfigurationTests {\n\n\t\t@Test\n\t\tvoid createWithListOfDelegatesInvokeThemInOrder() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tDelegate third = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second, third));\n\t\t\tObject value = \"\";\n\t\t\tgiven(third.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tInOrder ordered = inOrder(first, second, third);\n\t\t\tordered.verify(first).generateCode(codeGenerator, value);\n\t\t\tordered.verify(second).generateCode(codeGenerator, value);\n\t\t\tordered.verify(third).generateCode(codeGenerator, value);\n\t\t}\n\n\t\t@Test\n\t\tvoid generateCodeWithMatchingDelegateStops() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second));\n\t\t\tObject value = \"\";\n\t\t\tgiven(first.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tverify(first).generateCode(codeGenerator, value);\n\t\t\tverifyNoInteractions(second);\n\t\t}\n\n\t\t@Test\n\t\tvoid scopedReturnsImmutableCopy() {\n\t\t\tValueCodeGenerator valueCodeGenerator = ValueCodeGenerator.withDefaults();\n\t\t\tGeneratedMethods generatedMethods = new GeneratedMethods(\n\t\t\t\t\tClassName.get(\"com.example\", \"Test\"), MethodName::toString);\n\t\t\tValueCodeGenerator scopedValueCodeGenerator = valueCodeGenerator.scoped(generatedMethods);\n\t\t\tassertThat(scopedValueCodeGenerator).isNotSameAs(valueCodeGenerator);\n\t\t\tassertThat(scopedValueCodeGenerator.getGeneratedMethods()).isSameAs(generatedMethods);\n\t\t\tassertThat(valueCodeGenerator.getGeneratedMethods()).isNull();\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass NullTests {\n\n\t\t@Test\n\t\tvoid generateWhenNull() {\n\t\t\tassertThat(generateCode(null)).hasToString(\"null\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass PrimitiveTests {\n\n\t\t@Test\n\t\tvoid generateWhenBoolean() {\n\t\t\tassertThat(generateCode(true)).hasToString(\"true\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenByte() {\n\t\t\tassertThat(generateCode((byte) 2)).hasToString(\"(byte) 2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenShort() {\n\t\t\tassertThat(generateCode((short) 3)).hasToString(\"(short) 3\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenInt() {\n\t\t\tassertThat(generateCode(4)).hasToString(\"4\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLong() {\n\t\t\tassertThat(generateCode(5L)).hasToString(\"5L\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenFloat() {\n\t\t\tassertThat(generateCode(0.1F)).hasToString(\"0.1F\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenDouble() {\n\t\t\tassertThat(generateCode(0.2)).hasToString(\"(double) 0.2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenChar() {\n\t\t\tassertThat(generateCode('a')).hasToString(\"'a'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSimpleEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\b', \"'\\\\b'\");\n\t\t\ttestEscaped('\\t', \"'\\\\t'\");\n\t\t\ttestEscaped('\\n', \"'\\\\n'\");\n\t\t\ttestEscaped('\\f', \"'\\\\f'\");\n\t\t\ttestEscaped('\\r', \"'\\\\r'\");\n\t\t\ttestEscaped('\\\"', \"'\\\"'\");\n\t\t\ttestEscaped('\\'', \"'\\\\''\");\n\t\t\ttestEscaped('\\\\', \"'\\\\\\\\'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generatedWhenUnicodeEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\u007f', \"'\\\\u007f'\");\n\t\t}\n\n\t\tprivate void testEscaped(char value, String expectedSourceContent) {\n\t\t\tassertThat(generateCode(value)).hasToString(expectedSourceContent);\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass StringTests {\n\n\t\t@Test\n\t\tvoid generateWhenString() {\n\t\t\tassertThat(generateCode(\"test\")).hasToString(\"\\\"test\\\"\");\n\t\t}\n\n\n\t\t@Test\n\t\tvoid generateWhenStringWithCarriageReturn() {\n\t\t\tassertThat(generateCode(\"test\\n\")).isEqualTo(CodeBlock.of(\"$S\", \"test\\n\"));\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass CharsetTests {\n\n\t\t@Test\n\t\tvoid generateWhenCharset() {\n\t\t\tassertThat(resolve(generateCode(StandardCharsets.UTF_8))).hasImport(Charset.class)\n\t\t\t\t\t.hasValueCode(\"Charset.forName(\\\"UTF-8\\\")\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass EnumTests {\n\n\t\t@Test\n\t\tvoid generateWhenEnum() {\n\t\t\tassertThat(resolve(generateCode(ChronoUnit.DAYS)))\n\t\t\t\t\t.hasImport(ChronoUnit.class).hasValueCode(\"ChronoUnit.DAYS\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEnumWithClassBody() {\n\t\t\tassertThat(resolve(generateCode(EnumWithClassBody.TWO)))\n\t\t\t\t\t.hasImport(EnumWithClassBody.class).hasValueCode(\"EnumWithClassBody.TWO\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ClassTests {\n\n\t\t@Test\n\t\tvoid generateWhenClass() {\n\t\t\tassertThat(resolve(generateCode(InputStream.class)))\n\t\t\t\t\t.hasImport(InputStream.class).hasValueCode(\"InputStream.class\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenCglibClass() {\n\t\t\tassertThat(resolve(generateCode(ExampleClass$$GeneratedBy.class)))\n\t\t\t\t\t.hasImport(ExampleClass.class).hasValueCode(\"ExampleClass.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ResolvableTypeTests {\n\n\t\t@Test\n\t\tvoid generateWhenSimpleResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.forClass(String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNoneResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.NONE;\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class).hasValueCode(\"ResolvableType.NONE\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenGenericResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forClassWithGenerics(List.class, String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClassWithGenerics(List.class, String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNestedGenericResolvableType() {\n\t\t\tResolvableType stringList = ResolvableType.forClassWithGenerics(List.class,\n\t\t\t\t\tString.class);\n\t\t\tResolvableType resolvableType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\t\tResolvableType.forClass(Integer.class), stringList);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class, Map.class).hasValueCode(\n\t\t\t\t\t\t\t\"ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(Integer.class), \"\n\t\t\t\t\t\t\t\t\t+ \"ResolvableType.forClassWithGenerics(List.class, String.class))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"genericList\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(List.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedNestedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"mapWithNestedGenericInValueType\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"\"\"\n\t\t\t\t\t\t\tResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class), \\\n\t\t\t\t\t\t\tResolvableType.forClass(List.class))\"\"\");\n\t\t}\n\n\t\tstatic class SampleTypes<A> {\n\n\t\t\tpublic List<A> genericList;\n\n\t\t\tpublic Map<String, List<A>> mapWithNestedGenericInValueType;\n\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ArrayTests {\n\n\t\t@Test\n\t\tvoid generateWhenPrimitiveArray() {\n\t\t\tint[] array = { 0, 1, 2 };\n\t\t\tassertThat(generateCode(array)).hasToString(\"new int[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenWrapperArray() {\n\t\t\tInteger[] array = { 0, 1, 2 };\n\t\t\tassertThat(resolve(generateCode(array))).hasValueCode(\"new Integer[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenClassArray() {\n\t\t\tClass<?>[] array = new Class<?>[] { InputStream.class, OutputStream.class };\n\t\t\tassertThat(resolve(generateCode(array))).hasImport(InputStream.class, OutputStream.class)\n\t\t\t\t\t.hasValueCode(\"new Class[] {InputStream.class, OutputStream.class}\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ListTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringList() {\n\t\t\tList<String> list = List.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(List.class)\n\t\t\t\t\t.hasValueCode(\"List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptyList() {\n\t\t\tList<String> list = List.of();\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptyList()\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass SetTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringSet() {\n\t\t\tSet<String> set = Set.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class)\n\t\t\t\t\t.hasValueCode(\"Set.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptySet() {\n\t\t\tSet<String> set = Set.of();\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptySet()\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLinkedHashSet() {\n\t\t\tSet<String> set = new LinkedHashSet<>(List.of(\"a\", \"b\", \"c\"));\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(List.class, LinkedHashSet.class)\n\t\t\t\t\t.hasValueCode(\"new LinkedHashSet(List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSetOfClass() {\n\t\t\tSet<Class<?>> set = Set.of(InputStream.class, OutputStream.class);\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class, InputStream.class, OutputStream.class)\n\t\t\t\t\t.valueCode().contains(\"Set.of(\", \"InputStream.class\", \"OutputStream.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass MapTests {\n\n\t\t@Test\n\t\tvoid generateWhenSmallMap() {\n\t\t\tMap<String, String> map = Map.of(\"k1\", \"v1\", \"k2\", \"v2\");\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.hasValueCode(\"Map.of(\\\"k1\\\", \\\"v1\\\", \\\"k2\\\", \\\"v2\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenMapWithOverTenElements() {\n\t\t\tMap<String, String> map = new HashMap<>();\n\t\t\tfor (int i = 1; i <= 11; i++) {\n\t\t\t\tmap.put(\"k\" + i, \"v\" + i);\n\t\t\t}\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.valueCode().startsWith(\"Map.ofEntries(\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ExceptionTests {\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedValue() {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class)\n\t\t\t\t\t.isThrownBy(() -> generateCode(sw))\n\t\t\t\t\t.withCauseInstanceOf(UnsupportedTypeValueCodeGenerationException.class)\n\t\t\t\t\t.satisfies(ex -> assertThat(ex.getValue()).isEqualTo(sw));\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedDataTypeThrowsException() {\n\t\t\tStringWriter sampleValue = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(sampleValue))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(sampleValue.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support\")\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName());\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenListOfUnsupportedElement() {\n\t\t\tStringWriter one = new StringWriter();\n\t\t\tStringWriter two = new StringWriter();\n\t\t\tList<StringWriter> list = List.of(one, two);\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(list))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(list.toString())\n\t\t\t\t\t.withMessageContaining(list.getClass().getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(one.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support \" + StringWriter.class.getName());\n\t\t}\n\n\t}\n\n\tprivate static CodeBlock generateCode(@Nullable Object value) {\n\t\treturn ValueCodeGenerator.withDefaults().generateCode(value);\n\t}\n\n\tprivate static ValueCode resolve(CodeBlock valueCode) {\n\t\tString code = writeCode(valueCode);\n\t\tList<String> imports = code.lines()\n\t\t\t\t.filter(candidate -> candidate.startsWith(\"import\") && candidate.endsWith(\";\"))\n\t\t\t\t.map(line -> line.substring(\"import\".length(), line.length() - 1))\n\t\t\t\t.map(String::trim).toList();\n\t\tint start = code.indexOf(\"value = \");\n\t\tint end = code.indexOf(\";\", start);\n\t\treturn new ValueCode(code.substring(start + \"value = \".length(), end), imports);\n\t}\n\n\tprivate static String writeCode(CodeBlock valueCode) {\n\t\tFieldSpec field = FieldSpec.builder(Object.class, \"value\")\n\t\t\t\t.initializer(valueCode)\n\t\t\t\t.build();\n\t\tTypeSpec helloWorld = TypeSpec.classBuilder(\"Test\").addField(field).build();\n\t\tJavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\n\t\tStringWriter out = new StringWriter();\n\t\ttry {\n\t\t\tjavaFile.writeTo(out);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn out.toString();\n\t}\n\n\tstatic class ValueCodeAssert extends AbstractAssert<ValueCodeAssert, ValueCode> {\n\n\t\tpublic ValueCodeAssert(ValueCode actual) {\n\t\t\tsuper(actual, ValueCodeAssert.class);\n\t\t}\n\n\t\tValueCodeAssert hasImport(Class<?>... imports) {\n\t\t\tfor (Class<?> anImport : imports) {\n\t\t\t\tassertThat(this.actual.imports).contains(anImport.getName());\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tValueCodeAssert hasValueCode(String code) {\n\t\t\tassertThat(this.actual.code).isEqualTo(code);\n\t\t\treturn this;\n\t\t}\n\n\t\tStringAssert valueCode() {\n\t\t\treturn new StringAssert(this.actual.code);\n\t\t}\n\n\t}\n\n\trecord ValueCode(String code, List<String> imports) implements AssertProvider<ValueCodeAssert> {\n\n\t\t@Override\n\t\tpublic ValueCodeAssert assertThat() {\n\t\t\treturn new ValueCodeAssert(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.StringTests#generateWhenString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenString() {\r\n    assertThat(generateCode(\"test\")).hasToString(\"\\\"test\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.StringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.StringTests#generateWhenString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.StringTests#generateWhenString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.StringTests#generateWhenStringWithCarriageReturn()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenStringWithCarriageReturn() {\r\n    assertThat(generateCode(\"test\\n\")).isEqualTo(CodeBlock.of(\"$S\", \"test\\n\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.StringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.StringTests#generateWhenStringWithCarriageReturn()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.StringTests#generateWhenStringWithCarriageReturn()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.CharsetTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.CharsetTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.CharsetTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.StringWriter;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.assertj.core.api.AbstractAssert;\nimport org.assertj.core.api.AssertProvider;\nimport org.assertj.core.api.StringAssert;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InOrder;\n\nimport org.springframework.aot.generate.ValueCodeGenerator.Delegate;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.aot.generate.value.EnumWithClassBody;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass$$GeneratedBy;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.FieldSpec;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link ValueCodeGenerator}.\n *\n * @author Stephane Nicoll\n */\nclass ValueCodeGeneratorTests {\n\n\n\t@Nested\n\tclass ConfigurationTests {\n\n\t\t@Test\n\t\tvoid createWithListOfDelegatesInvokeThemInOrder() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tDelegate third = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second, third));\n\t\t\tObject value = \"\";\n\t\t\tgiven(third.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tInOrder ordered = inOrder(first, second, third);\n\t\t\tordered.verify(first).generateCode(codeGenerator, value);\n\t\t\tordered.verify(second).generateCode(codeGenerator, value);\n\t\t\tordered.verify(third).generateCode(codeGenerator, value);\n\t\t}\n\n\t\t@Test\n\t\tvoid generateCodeWithMatchingDelegateStops() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second));\n\t\t\tObject value = \"\";\n\t\t\tgiven(first.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tverify(first).generateCode(codeGenerator, value);\n\t\t\tverifyNoInteractions(second);\n\t\t}\n\n\t\t@Test\n\t\tvoid scopedReturnsImmutableCopy() {\n\t\t\tValueCodeGenerator valueCodeGenerator = ValueCodeGenerator.withDefaults();\n\t\t\tGeneratedMethods generatedMethods = new GeneratedMethods(\n\t\t\t\t\tClassName.get(\"com.example\", \"Test\"), MethodName::toString);\n\t\t\tValueCodeGenerator scopedValueCodeGenerator = valueCodeGenerator.scoped(generatedMethods);\n\t\t\tassertThat(scopedValueCodeGenerator).isNotSameAs(valueCodeGenerator);\n\t\t\tassertThat(scopedValueCodeGenerator.getGeneratedMethods()).isSameAs(generatedMethods);\n\t\t\tassertThat(valueCodeGenerator.getGeneratedMethods()).isNull();\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass NullTests {\n\n\t\t@Test\n\t\tvoid generateWhenNull() {\n\t\t\tassertThat(generateCode(null)).hasToString(\"null\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass PrimitiveTests {\n\n\t\t@Test\n\t\tvoid generateWhenBoolean() {\n\t\t\tassertThat(generateCode(true)).hasToString(\"true\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenByte() {\n\t\t\tassertThat(generateCode((byte) 2)).hasToString(\"(byte) 2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenShort() {\n\t\t\tassertThat(generateCode((short) 3)).hasToString(\"(short) 3\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenInt() {\n\t\t\tassertThat(generateCode(4)).hasToString(\"4\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLong() {\n\t\t\tassertThat(generateCode(5L)).hasToString(\"5L\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenFloat() {\n\t\t\tassertThat(generateCode(0.1F)).hasToString(\"0.1F\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenDouble() {\n\t\t\tassertThat(generateCode(0.2)).hasToString(\"(double) 0.2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenChar() {\n\t\t\tassertThat(generateCode('a')).hasToString(\"'a'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSimpleEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\b', \"'\\\\b'\");\n\t\t\ttestEscaped('\\t', \"'\\\\t'\");\n\t\t\ttestEscaped('\\n', \"'\\\\n'\");\n\t\t\ttestEscaped('\\f', \"'\\\\f'\");\n\t\t\ttestEscaped('\\r', \"'\\\\r'\");\n\t\t\ttestEscaped('\\\"', \"'\\\"'\");\n\t\t\ttestEscaped('\\'', \"'\\\\''\");\n\t\t\ttestEscaped('\\\\', \"'\\\\\\\\'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generatedWhenUnicodeEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\u007f', \"'\\\\u007f'\");\n\t\t}\n\n\t\tprivate void testEscaped(char value, String expectedSourceContent) {\n\t\t\tassertThat(generateCode(value)).hasToString(expectedSourceContent);\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass StringTests {\n\n\t\t@Test\n\t\tvoid generateWhenString() {\n\t\t\tassertThat(generateCode(\"test\")).hasToString(\"\\\"test\\\"\");\n\t\t}\n\n\n\t\t@Test\n\t\tvoid generateWhenStringWithCarriageReturn() {\n\t\t\tassertThat(generateCode(\"test\\n\")).isEqualTo(CodeBlock.of(\"$S\", \"test\\n\"));\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass CharsetTests {\n\n\t\t@Test\n\t\tvoid generateWhenCharset() {\n\t\t\tassertThat(resolve(generateCode(StandardCharsets.UTF_8))).hasImport(Charset.class)\n\t\t\t\t\t.hasValueCode(\"Charset.forName(\\\"UTF-8\\\")\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass EnumTests {\n\n\t\t@Test\n\t\tvoid generateWhenEnum() {\n\t\t\tassertThat(resolve(generateCode(ChronoUnit.DAYS)))\n\t\t\t\t\t.hasImport(ChronoUnit.class).hasValueCode(\"ChronoUnit.DAYS\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEnumWithClassBody() {\n\t\t\tassertThat(resolve(generateCode(EnumWithClassBody.TWO)))\n\t\t\t\t\t.hasImport(EnumWithClassBody.class).hasValueCode(\"EnumWithClassBody.TWO\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ClassTests {\n\n\t\t@Test\n\t\tvoid generateWhenClass() {\n\t\t\tassertThat(resolve(generateCode(InputStream.class)))\n\t\t\t\t\t.hasImport(InputStream.class).hasValueCode(\"InputStream.class\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenCglibClass() {\n\t\t\tassertThat(resolve(generateCode(ExampleClass$$GeneratedBy.class)))\n\t\t\t\t\t.hasImport(ExampleClass.class).hasValueCode(\"ExampleClass.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ResolvableTypeTests {\n\n\t\t@Test\n\t\tvoid generateWhenSimpleResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.forClass(String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNoneResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.NONE;\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class).hasValueCode(\"ResolvableType.NONE\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenGenericResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forClassWithGenerics(List.class, String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClassWithGenerics(List.class, String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNestedGenericResolvableType() {\n\t\t\tResolvableType stringList = ResolvableType.forClassWithGenerics(List.class,\n\t\t\t\t\tString.class);\n\t\t\tResolvableType resolvableType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\t\tResolvableType.forClass(Integer.class), stringList);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class, Map.class).hasValueCode(\n\t\t\t\t\t\t\t\"ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(Integer.class), \"\n\t\t\t\t\t\t\t\t\t+ \"ResolvableType.forClassWithGenerics(List.class, String.class))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"genericList\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(List.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedNestedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"mapWithNestedGenericInValueType\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"\"\"\n\t\t\t\t\t\t\tResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class), \\\n\t\t\t\t\t\t\tResolvableType.forClass(List.class))\"\"\");\n\t\t}\n\n\t\tstatic class SampleTypes<A> {\n\n\t\t\tpublic List<A> genericList;\n\n\t\t\tpublic Map<String, List<A>> mapWithNestedGenericInValueType;\n\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ArrayTests {\n\n\t\t@Test\n\t\tvoid generateWhenPrimitiveArray() {\n\t\t\tint[] array = { 0, 1, 2 };\n\t\t\tassertThat(generateCode(array)).hasToString(\"new int[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenWrapperArray() {\n\t\t\tInteger[] array = { 0, 1, 2 };\n\t\t\tassertThat(resolve(generateCode(array))).hasValueCode(\"new Integer[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenClassArray() {\n\t\t\tClass<?>[] array = new Class<?>[] { InputStream.class, OutputStream.class };\n\t\t\tassertThat(resolve(generateCode(array))).hasImport(InputStream.class, OutputStream.class)\n\t\t\t\t\t.hasValueCode(\"new Class[] {InputStream.class, OutputStream.class}\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ListTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringList() {\n\t\t\tList<String> list = List.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(List.class)\n\t\t\t\t\t.hasValueCode(\"List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptyList() {\n\t\t\tList<String> list = List.of();\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptyList()\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass SetTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringSet() {\n\t\t\tSet<String> set = Set.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class)\n\t\t\t\t\t.hasValueCode(\"Set.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptySet() {\n\t\t\tSet<String> set = Set.of();\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptySet()\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLinkedHashSet() {\n\t\t\tSet<String> set = new LinkedHashSet<>(List.of(\"a\", \"b\", \"c\"));\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(List.class, LinkedHashSet.class)\n\t\t\t\t\t.hasValueCode(\"new LinkedHashSet(List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSetOfClass() {\n\t\t\tSet<Class<?>> set = Set.of(InputStream.class, OutputStream.class);\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class, InputStream.class, OutputStream.class)\n\t\t\t\t\t.valueCode().contains(\"Set.of(\", \"InputStream.class\", \"OutputStream.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass MapTests {\n\n\t\t@Test\n\t\tvoid generateWhenSmallMap() {\n\t\t\tMap<String, String> map = Map.of(\"k1\", \"v1\", \"k2\", \"v2\");\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.hasValueCode(\"Map.of(\\\"k1\\\", \\\"v1\\\", \\\"k2\\\", \\\"v2\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenMapWithOverTenElements() {\n\t\t\tMap<String, String> map = new HashMap<>();\n\t\t\tfor (int i = 1; i <= 11; i++) {\n\t\t\t\tmap.put(\"k\" + i, \"v\" + i);\n\t\t\t}\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.valueCode().startsWith(\"Map.ofEntries(\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ExceptionTests {\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedValue() {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class)\n\t\t\t\t\t.isThrownBy(() -> generateCode(sw))\n\t\t\t\t\t.withCauseInstanceOf(UnsupportedTypeValueCodeGenerationException.class)\n\t\t\t\t\t.satisfies(ex -> assertThat(ex.getValue()).isEqualTo(sw));\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedDataTypeThrowsException() {\n\t\t\tStringWriter sampleValue = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(sampleValue))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(sampleValue.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support\")\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName());\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenListOfUnsupportedElement() {\n\t\t\tStringWriter one = new StringWriter();\n\t\t\tStringWriter two = new StringWriter();\n\t\t\tList<StringWriter> list = List.of(one, two);\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(list))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(list.toString())\n\t\t\t\t\t.withMessageContaining(list.getClass().getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(one.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support \" + StringWriter.class.getName());\n\t\t}\n\n\t}\n\n\tprivate static CodeBlock generateCode(@Nullable Object value) {\n\t\treturn ValueCodeGenerator.withDefaults().generateCode(value);\n\t}\n\n\tprivate static ValueCode resolve(CodeBlock valueCode) {\n\t\tString code = writeCode(valueCode);\n\t\tList<String> imports = code.lines()\n\t\t\t\t.filter(candidate -> candidate.startsWith(\"import\") && candidate.endsWith(\";\"))\n\t\t\t\t.map(line -> line.substring(\"import\".length(), line.length() - 1))\n\t\t\t\t.map(String::trim).toList();\n\t\tint start = code.indexOf(\"value = \");\n\t\tint end = code.indexOf(\";\", start);\n\t\treturn new ValueCode(code.substring(start + \"value = \".length(), end), imports);\n\t}\n\n\tprivate static String writeCode(CodeBlock valueCode) {\n\t\tFieldSpec field = FieldSpec.builder(Object.class, \"value\")\n\t\t\t\t.initializer(valueCode)\n\t\t\t\t.build();\n\t\tTypeSpec helloWorld = TypeSpec.classBuilder(\"Test\").addField(field).build();\n\t\tJavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\n\t\tStringWriter out = new StringWriter();\n\t\ttry {\n\t\t\tjavaFile.writeTo(out);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn out.toString();\n\t}\n\n\tstatic class ValueCodeAssert extends AbstractAssert<ValueCodeAssert, ValueCode> {\n\n\t\tpublic ValueCodeAssert(ValueCode actual) {\n\t\t\tsuper(actual, ValueCodeAssert.class);\n\t\t}\n\n\t\tValueCodeAssert hasImport(Class<?>... imports) {\n\t\t\tfor (Class<?> anImport : imports) {\n\t\t\t\tassertThat(this.actual.imports).contains(anImport.getName());\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tValueCodeAssert hasValueCode(String code) {\n\t\t\tassertThat(this.actual.code).isEqualTo(code);\n\t\t\treturn this;\n\t\t}\n\n\t\tStringAssert valueCode() {\n\t\t\treturn new StringAssert(this.actual.code);\n\t\t}\n\n\t}\n\n\trecord ValueCode(String code, List<String> imports) implements AssertProvider<ValueCodeAssert> {\n\n\t\t@Override\n\t\tpublic ValueCodeAssert assertThat() {\n\t\t\treturn new ValueCodeAssert(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.CharsetTests#generateWhenCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenCharset() {\r\n    assertThat(resolve(generateCode(StandardCharsets.UTF_8))).hasImport(Charset.class).hasValueCode(\"Charset.forName(\\\"UTF-8\\\")\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.CharsetTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.CharsetTests#generateWhenCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.CharsetTests#generateWhenCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.EnumTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.EnumTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.EnumTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.StringWriter;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.assertj.core.api.AbstractAssert;\nimport org.assertj.core.api.AssertProvider;\nimport org.assertj.core.api.StringAssert;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InOrder;\n\nimport org.springframework.aot.generate.ValueCodeGenerator.Delegate;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.aot.generate.value.EnumWithClassBody;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass;\nimport org.springframework.core.testfixture.aot.generate.value.ExampleClass$$GeneratedBy;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.FieldSpec;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link ValueCodeGenerator}.\n *\n * @author Stephane Nicoll\n */\nclass ValueCodeGeneratorTests {\n\n\n\t@Nested\n\tclass ConfigurationTests {\n\n\t\t@Test\n\t\tvoid createWithListOfDelegatesInvokeThemInOrder() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tDelegate third = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second, third));\n\t\t\tObject value = \"\";\n\t\t\tgiven(third.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tInOrder ordered = inOrder(first, second, third);\n\t\t\tordered.verify(first).generateCode(codeGenerator, value);\n\t\t\tordered.verify(second).generateCode(codeGenerator, value);\n\t\t\tordered.verify(third).generateCode(codeGenerator, value);\n\t\t}\n\n\t\t@Test\n\t\tvoid generateCodeWithMatchingDelegateStops() {\n\t\t\tDelegate first = mock(Delegate.class);\n\t\t\tDelegate second = mock(Delegate.class);\n\t\t\tValueCodeGenerator codeGenerator = ValueCodeGenerator\n\t\t\t\t\t.with(List.of(first, second));\n\t\t\tObject value = \"\";\n\t\t\tgiven(first.generateCode(codeGenerator, value))\n\t\t\t\t\t.willReturn(CodeBlock.of(\"test\"));\n\t\t\tCodeBlock code = codeGenerator.generateCode(value);\n\t\t\tassertThat(code).hasToString(\"test\");\n\t\t\tverify(first).generateCode(codeGenerator, value);\n\t\t\tverifyNoInteractions(second);\n\t\t}\n\n\t\t@Test\n\t\tvoid scopedReturnsImmutableCopy() {\n\t\t\tValueCodeGenerator valueCodeGenerator = ValueCodeGenerator.withDefaults();\n\t\t\tGeneratedMethods generatedMethods = new GeneratedMethods(\n\t\t\t\t\tClassName.get(\"com.example\", \"Test\"), MethodName::toString);\n\t\t\tValueCodeGenerator scopedValueCodeGenerator = valueCodeGenerator.scoped(generatedMethods);\n\t\t\tassertThat(scopedValueCodeGenerator).isNotSameAs(valueCodeGenerator);\n\t\t\tassertThat(scopedValueCodeGenerator.getGeneratedMethods()).isSameAs(generatedMethods);\n\t\t\tassertThat(valueCodeGenerator.getGeneratedMethods()).isNull();\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass NullTests {\n\n\t\t@Test\n\t\tvoid generateWhenNull() {\n\t\t\tassertThat(generateCode(null)).hasToString(\"null\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass PrimitiveTests {\n\n\t\t@Test\n\t\tvoid generateWhenBoolean() {\n\t\t\tassertThat(generateCode(true)).hasToString(\"true\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenByte() {\n\t\t\tassertThat(generateCode((byte) 2)).hasToString(\"(byte) 2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenShort() {\n\t\t\tassertThat(generateCode((short) 3)).hasToString(\"(short) 3\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenInt() {\n\t\t\tassertThat(generateCode(4)).hasToString(\"4\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLong() {\n\t\t\tassertThat(generateCode(5L)).hasToString(\"5L\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenFloat() {\n\t\t\tassertThat(generateCode(0.1F)).hasToString(\"0.1F\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenDouble() {\n\t\t\tassertThat(generateCode(0.2)).hasToString(\"(double) 0.2\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenChar() {\n\t\t\tassertThat(generateCode('a')).hasToString(\"'a'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSimpleEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\b', \"'\\\\b'\");\n\t\t\ttestEscaped('\\t', \"'\\\\t'\");\n\t\t\ttestEscaped('\\n', \"'\\\\n'\");\n\t\t\ttestEscaped('\\f', \"'\\\\f'\");\n\t\t\ttestEscaped('\\r', \"'\\\\r'\");\n\t\t\ttestEscaped('\\\"', \"'\\\"'\");\n\t\t\ttestEscaped('\\'', \"'\\\\''\");\n\t\t\ttestEscaped('\\\\', \"'\\\\\\\\'\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generatedWhenUnicodeEscapedCharReturnsEscaped() {\n\t\t\ttestEscaped('\\u007f', \"'\\\\u007f'\");\n\t\t}\n\n\t\tprivate void testEscaped(char value, String expectedSourceContent) {\n\t\t\tassertThat(generateCode(value)).hasToString(expectedSourceContent);\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass StringTests {\n\n\t\t@Test\n\t\tvoid generateWhenString() {\n\t\t\tassertThat(generateCode(\"test\")).hasToString(\"\\\"test\\\"\");\n\t\t}\n\n\n\t\t@Test\n\t\tvoid generateWhenStringWithCarriageReturn() {\n\t\t\tassertThat(generateCode(\"test\\n\")).isEqualTo(CodeBlock.of(\"$S\", \"test\\n\"));\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass CharsetTests {\n\n\t\t@Test\n\t\tvoid generateWhenCharset() {\n\t\t\tassertThat(resolve(generateCode(StandardCharsets.UTF_8))).hasImport(Charset.class)\n\t\t\t\t\t.hasValueCode(\"Charset.forName(\\\"UTF-8\\\")\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass EnumTests {\n\n\t\t@Test\n\t\tvoid generateWhenEnum() {\n\t\t\tassertThat(resolve(generateCode(ChronoUnit.DAYS)))\n\t\t\t\t\t.hasImport(ChronoUnit.class).hasValueCode(\"ChronoUnit.DAYS\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEnumWithClassBody() {\n\t\t\tassertThat(resolve(generateCode(EnumWithClassBody.TWO)))\n\t\t\t\t\t.hasImport(EnumWithClassBody.class).hasValueCode(\"EnumWithClassBody.TWO\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ClassTests {\n\n\t\t@Test\n\t\tvoid generateWhenClass() {\n\t\t\tassertThat(resolve(generateCode(InputStream.class)))\n\t\t\t\t\t.hasImport(InputStream.class).hasValueCode(\"InputStream.class\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenCglibClass() {\n\t\t\tassertThat(resolve(generateCode(ExampleClass$$GeneratedBy.class)))\n\t\t\t\t\t.hasImport(ExampleClass.class).hasValueCode(\"ExampleClass.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ResolvableTypeTests {\n\n\t\t@Test\n\t\tvoid generateWhenSimpleResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.forClass(String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNoneResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType.NONE;\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class).hasValueCode(\"ResolvableType.NONE\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenGenericResolvableType() {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forClassWithGenerics(List.class, String.class);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClassWithGenerics(List.class, String.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenNestedGenericResolvableType() {\n\t\t\tResolvableType stringList = ResolvableType.forClassWithGenerics(List.class,\n\t\t\t\t\tString.class);\n\t\t\tResolvableType resolvableType = ResolvableType.forClassWithGenerics(Map.class,\n\t\t\t\t\tResolvableType.forClass(Integer.class), stringList);\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class, Map.class).hasValueCode(\n\t\t\t\t\t\t\t\"ResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(Integer.class), \"\n\t\t\t\t\t\t\t\t\t+ \"ResolvableType.forClassWithGenerics(List.class, String.class))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"genericList\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"ResolvableType.forClass(List.class)\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnresolvedNestedGenericType() throws NoSuchFieldException {\n\t\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t\t.forField(SampleTypes.class.getField(\"mapWithNestedGenericInValueType\"));\n\t\t\tassertThat(resolve(generateCode(resolvableType)))\n\t\t\t\t\t.hasImport(ResolvableType.class, List.class)\n\t\t\t\t\t.hasValueCode(\"\"\"\n\t\t\t\t\t\t\tResolvableType.forClassWithGenerics(Map.class, ResolvableType.forClass(String.class), \\\n\t\t\t\t\t\t\tResolvableType.forClass(List.class))\"\"\");\n\t\t}\n\n\t\tstatic class SampleTypes<A> {\n\n\t\t\tpublic List<A> genericList;\n\n\t\t\tpublic Map<String, List<A>> mapWithNestedGenericInValueType;\n\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ArrayTests {\n\n\t\t@Test\n\t\tvoid generateWhenPrimitiveArray() {\n\t\t\tint[] array = { 0, 1, 2 };\n\t\t\tassertThat(generateCode(array)).hasToString(\"new int[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenWrapperArray() {\n\t\t\tInteger[] array = { 0, 1, 2 };\n\t\t\tassertThat(resolve(generateCode(array))).hasValueCode(\"new Integer[] {0, 1, 2}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenClassArray() {\n\t\t\tClass<?>[] array = new Class<?>[] { InputStream.class, OutputStream.class };\n\t\t\tassertThat(resolve(generateCode(array))).hasImport(InputStream.class, OutputStream.class)\n\t\t\t\t\t.hasValueCode(\"new Class[] {InputStream.class, OutputStream.class}\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ListTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringList() {\n\t\t\tList<String> list = List.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(List.class)\n\t\t\t\t\t.hasValueCode(\"List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptyList() {\n\t\t\tList<String> list = List.of();\n\t\t\tassertThat(resolve(generateCode(list))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptyList()\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass SetTests {\n\n\t\t@Test\n\t\tvoid generateWhenStringSet() {\n\t\t\tSet<String> set = Set.of(\"a\", \"b\", \"c\");\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class)\n\t\t\t\t\t.hasValueCode(\"Set.of(\\\"a\\\", \\\"b\\\", \\\"c\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenEmptySet() {\n\t\t\tSet<String> set = Set.of();\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Collections.class)\n\t\t\t\t\t.hasValueCode(\"Collections.emptySet()\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenLinkedHashSet() {\n\t\t\tSet<String> set = new LinkedHashSet<>(List.of(\"a\", \"b\", \"c\"));\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(List.class, LinkedHashSet.class)\n\t\t\t\t\t.hasValueCode(\"new LinkedHashSet(List.of(\\\"a\\\", \\\"b\\\", \\\"c\\\"))\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenSetOfClass() {\n\t\t\tSet<Class<?>> set = Set.of(InputStream.class, OutputStream.class);\n\t\t\tassertThat(resolve(generateCode(set))).hasImport(Set.class, InputStream.class, OutputStream.class)\n\t\t\t\t\t.valueCode().contains(\"Set.of(\", \"InputStream.class\", \"OutputStream.class\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass MapTests {\n\n\t\t@Test\n\t\tvoid generateWhenSmallMap() {\n\t\t\tMap<String, String> map = Map.of(\"k1\", \"v1\", \"k2\", \"v2\");\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.hasValueCode(\"Map.of(\\\"k1\\\", \\\"v1\\\", \\\"k2\\\", \\\"v2\\\")\");\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenMapWithOverTenElements() {\n\t\t\tMap<String, String> map = new HashMap<>();\n\t\t\tfor (int i = 1; i <= 11; i++) {\n\t\t\t\tmap.put(\"k\" + i, \"v\" + i);\n\t\t\t}\n\t\t\tassertThat(resolve(generateCode(map))).hasImport(Map.class)\n\t\t\t\t\t.valueCode().startsWith(\"Map.ofEntries(\");\n\t\t}\n\n\t}\n\n\t@Nested\n\tclass ExceptionTests {\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedValue() {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class)\n\t\t\t\t\t.isThrownBy(() -> generateCode(sw))\n\t\t\t\t\t.withCauseInstanceOf(UnsupportedTypeValueCodeGenerationException.class)\n\t\t\t\t\t.satisfies(ex -> assertThat(ex.getValue()).isEqualTo(sw));\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenUnsupportedDataTypeThrowsException() {\n\t\t\tStringWriter sampleValue = new StringWriter();\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(sampleValue))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(sampleValue.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support\")\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName());\n\t\t}\n\n\t\t@Test\n\t\tvoid generateWhenListOfUnsupportedElement() {\n\t\t\tStringWriter one = new StringWriter();\n\t\t\tStringWriter two = new StringWriter();\n\t\t\tList<StringWriter> list = List.of(one, two);\n\t\t\tassertThatExceptionOfType(ValueCodeGenerationException.class).isThrownBy(() -> generateCode(list))\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(list.toString())\n\t\t\t\t\t.withMessageContaining(list.getClass().getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Failed to generate code for\")\n\t\t\t\t\t.withMessageContaining(one.toString())\n\t\t\t\t\t.withMessageContaining(StringWriter.class.getName())\n\t\t\t\t\t.havingCause()\n\t\t\t\t\t.withMessageContaining(\"Code generation does not support \" + StringWriter.class.getName());\n\t\t}\n\n\t}\n\n\tprivate static CodeBlock generateCode(@Nullable Object value) {\n\t\treturn ValueCodeGenerator.withDefaults().generateCode(value);\n\t}\n\n\tprivate static ValueCode resolve(CodeBlock valueCode) {\n\t\tString code = writeCode(valueCode);\n\t\tList<String> imports = code.lines()\n\t\t\t\t.filter(candidate -> candidate.startsWith(\"import\") && candidate.endsWith(\";\"))\n\t\t\t\t.map(line -> line.substring(\"import\".length(), line.length() - 1))\n\t\t\t\t.map(String::trim).toList();\n\t\tint start = code.indexOf(\"value = \");\n\t\tint end = code.indexOf(\";\", start);\n\t\treturn new ValueCode(code.substring(start + \"value = \".length(), end), imports);\n\t}\n\n\tprivate static String writeCode(CodeBlock valueCode) {\n\t\tFieldSpec field = FieldSpec.builder(Object.class, \"value\")\n\t\t\t\t.initializer(valueCode)\n\t\t\t\t.build();\n\t\tTypeSpec helloWorld = TypeSpec.classBuilder(\"Test\").addField(field).build();\n\t\tJavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\n\t\tStringWriter out = new StringWriter();\n\t\ttry {\n\t\t\tjavaFile.writeTo(out);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn out.toString();\n\t}\n\n\tstatic class ValueCodeAssert extends AbstractAssert<ValueCodeAssert, ValueCode> {\n\n\t\tpublic ValueCodeAssert(ValueCode actual) {\n\t\t\tsuper(actual, ValueCodeAssert.class);\n\t\t}\n\n\t\tValueCodeAssert hasImport(Class<?>... imports) {\n\t\t\tfor (Class<?> anImport : imports) {\n\t\t\t\tassertThat(this.actual.imports).contains(anImport.getName());\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tValueCodeAssert hasValueCode(String code) {\n\t\t\tassertThat(this.actual.code).isEqualTo(code);\n\t\t\treturn this;\n\t\t}\n\n\t\tStringAssert valueCode() {\n\t\t\treturn new StringAssert(this.actual.code);\n\t\t}\n\n\t}\n\n\trecord ValueCode(String code, List<String> imports) implements AssertProvider<ValueCodeAssert> {\n\n\t\t@Override\n\t\tpublic ValueCodeAssert assertThat() {\n\t\t\treturn new ValueCodeAssert(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.EnumTests#generateWhenEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenEnum() {\r\n    assertThat(resolve(generateCode(ChronoUnit.DAYS))).hasImport(ChronoUnit.class).hasValueCode(\"ChronoUnit.DAYS\");\r\n}",
    "tailType": "method_code"
  }
]