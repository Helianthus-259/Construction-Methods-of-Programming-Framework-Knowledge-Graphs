[
  {
    "head": "org.springframework.util.StringUtilsTests#stripFilenameExtension()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#cleanPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid cleanPath() {\r\n    assertThat(StringUtils.cleanPath(\"mypath/myfile\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"mypath\\\\myfile\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"mypath/../mypath/myfile\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"mypath/myfile/../../mypath/myfile\")).isEqualTo(\"mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"../mypath/myfile\")).isEqualTo(\"../mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"../mypath/../mypath/myfile\")).isEqualTo(\"../mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"mypath/../../mypath/myfile\")).isEqualTo(\"../mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"/../mypath/myfile\")).isEqualTo(\"/../mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"/a/:b/../../mypath/myfile\")).isEqualTo(\"/mypath/myfile\");\r\n    assertThat(StringUtils.cleanPath(\"/\")).isEqualTo(\"/\");\r\n    assertThat(StringUtils.cleanPath(\"/mypath/../\")).isEqualTo(\"/\");\r\n    assertThat(StringUtils.cleanPath(\"mypath/..\")).isEmpty();\r\n    assertThat(StringUtils.cleanPath(\"mypath/../.\")).isEmpty();\r\n    assertThat(StringUtils.cleanPath(\"mypath/../\")).isEqualTo(\"./\");\r\n    assertThat(StringUtils.cleanPath(\"././\")).isEqualTo(\"./\");\r\n    assertThat(StringUtils.cleanPath(\"./\")).isEqualTo(\"./\");\r\n    assertThat(StringUtils.cleanPath(\"../\")).isEqualTo(\"../\");\r\n    assertThat(StringUtils.cleanPath(\"./../\")).isEqualTo(\"../\");\r\n    assertThat(StringUtils.cleanPath(\".././\")).isEqualTo(\"../\");\r\n    assertThat(StringUtils.cleanPath(\"file:/\")).isEqualTo(\"file:/\");\r\n    assertThat(StringUtils.cleanPath(\"file:/mypath/../\")).isEqualTo(\"file:/\");\r\n    assertThat(StringUtils.cleanPath(\"file:mypath/..\")).isEqualTo(\"file:\");\r\n    assertThat(StringUtils.cleanPath(\"file:mypath/../.\")).isEqualTo(\"file:\");\r\n    assertThat(StringUtils.cleanPath(\"file:mypath/../\")).isEqualTo(\"file:./\");\r\n    assertThat(StringUtils.cleanPath(\"file:././\")).isEqualTo(\"file:./\");\r\n    assertThat(StringUtils.cleanPath(\"file:./\")).isEqualTo(\"file:./\");\r\n    assertThat(StringUtils.cleanPath(\"file:../\")).isEqualTo(\"file:../\");\r\n    assertThat(StringUtils.cleanPath(\"file:./../\")).isEqualTo(\"file:../\");\r\n    assertThat(StringUtils.cleanPath(\"file:.././\")).isEqualTo(\"file:../\");\r\n    assertThat(StringUtils.cleanPath(\"file:/mypath/spring.factories\")).isEqualTo(\"file:/mypath/spring.factories\");\r\n    assertThat(StringUtils.cleanPath(\"file:///c:/some/../path/the%20file.txt\")).isEqualTo(\"file:///c:/path/the%20file.txt\");\r\n    assertThat(StringUtils.cleanPath(\"jar:file:///c:\\\\some\\\\..\\\\path\\\\.\\\\the%20file.txt\")).isEqualTo(\"jar:file:///c:/path/the%20file.txt\");\r\n    assertThat(StringUtils.cleanPath(\"jar:file:///c:/some/../path/./the%20file.txt\")).isEqualTo(\"jar:file:///c:/path/the%20file.txt\");\r\n    assertThat(StringUtils.cleanPath(\"jar:file:///c:\\\\\\\\some\\\\\\\\..\\\\\\\\path\\\\\\\\.\\\\\\\\the%20file.txt\")).isEqualTo(\"jar:file:///c:/path/the%20file.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#cleanPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#cleanPath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#pathEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid pathEquals() {\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/dummy2/dummy3\", \"/dummy1/dummy2/dummy3\")).as(\"Must be true for the same strings\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"C:\\\\dummy1\\\\dummy2\\\\dummy3\", \"C:\\\\dummy1\\\\dummy2\\\\dummy3\")).as(\"Must be true for the same win strings\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/bin/../dummy2/dummy3\", \"/dummy1/dummy2/dummy3\")).as(\"Must be true for one top path on 1\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"C:\\\\dummy1\\\\dummy2\\\\dummy3\", \"C:\\\\dummy1\\\\bin\\\\..\\\\dummy2\\\\dummy3\")).as(\"Must be true for one win top path on 2\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/bin/../dummy2/bin/../dummy3\", \"/dummy1/dummy2/dummy3\")).as(\"Must be true for two top paths on 1\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"C:\\\\dummy1\\\\dummy2\\\\dummy3\", \"C:\\\\dummy1\\\\bin\\\\..\\\\dummy2\\\\bin\\\\..\\\\dummy3\")).as(\"Must be true for two win top paths on 2\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/bin/tmp/../../dummy2/dummy3\", \"/dummy1/dummy2/dummy3\")).as(\"Must be true for double top paths on 1\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/dummy2/dummy3\", \"/dummy1/dum/dum/../../dummy2/dummy3\")).as(\"Must be true for double top paths on 2 with similarity\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"./dummy1/dummy2/dummy3\", \"dummy1/dum/./dum/../../dummy2/dummy3\")).as(\"Must be true for current paths\").isTrue();\r\n    assertThat(StringUtils.pathEquals(\"./dummy1/dummy2/dummy3\", \"/dummy1/dum/./dum/../../dummy2/dummy3\")).as(\"Must be false for relative/absolute paths\").isFalse();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/dummy2/dummy3\", \"/dummy1/dummy4/dummy3\")).as(\"Must be false for different strings\").isFalse();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/bin/tmp/../dummy2/dummy3\", \"/dummy1/dummy2/dummy3\")).as(\"Must be false for one false path on 1\").isFalse();\r\n    assertThat(StringUtils.pathEquals(\"C:\\\\dummy1\\\\dummy2\\\\dummy3\", \"C:\\\\dummy1\\\\bin\\\\tmp\\\\..\\\\dummy2\\\\dummy3\")).as(\"Must be false for one false win top path on 2\").isFalse();\r\n    assertThat(StringUtils.pathEquals(\"/dummy1/bin/../dummy2/dummy3\", \"/dummy1/dummy2/dummy4\")).as(\"Must be false for top path on 1 + difference\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#pathEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#pathEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid concatenateStringArrays() {\r\n    String[] input1 = new String[] { \"myString2\" };\r\n    String[] input2 = new String[] { \"myString1\", \"myString2\" };\r\n    String[] result = StringUtils.concatenateStringArrays(input1, input2);\r\n    assertThat(result).hasSize(3);\r\n    assertThat(result[0]).isEqualTo(\"myString2\");\r\n    assertThat(result[1]).isEqualTo(\"myString1\");\r\n    assertThat(result[2]).isEqualTo(\"myString2\");\r\n    assertThat(StringUtils.concatenateStringArrays(input1, null)).isEqualTo(input1);\r\n    assertThat(StringUtils.concatenateStringArrays(null, input2)).isEqualTo(input2);\r\n    assertThat(StringUtils.concatenateStringArrays(null, null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#concatenateStringArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#sortStringArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortStringArray() {\r\n    String[] input = new String[] { \"myString2\" };\r\n    input = StringUtils.addStringToArray(input, \"myString1\");\r\n    assertThat(input[0]).isEqualTo(\"myString2\");\r\n    assertThat(input[1]).isEqualTo(\"myString1\");\r\n    StringUtils.sortStringArray(input);\r\n    assertThat(input[0]).isEqualTo(\"myString1\");\r\n    assertThat(input[1]).isEqualTo(\"myString2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#sortStringArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#sortStringArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid trimArrayElements() {\r\n    assertThat(StringUtils.trimArrayElements(null)).isNull();\r\n    assertThat(StringUtils.trimArrayElements(new String[] ;)).isEmpty();\r\n    assertThat(StringUtils.trimArrayElements(new String[] { \"\", \" \", \"  \", \"   \" })).containsExactly(\"\", \"\", \"\", \"\");\r\n    assertThat(StringUtils.trimArrayElements(new String[] { \"\\n\", \"\\t \", \"\\n\\t\" })).containsExactly(\"\", \"\", \"\");\r\n    assertThat(StringUtils.trimArrayElements(new String[] { \"a\", \"b\", \"c\" })).containsExactly(\"a\", \"b\", \"c\");\r\n    assertThat(StringUtils.trimArrayElements(new String[] { \"  a  \", \"  b b \", \"  cc  \" })).containsExactly(\"a\", \"b b\", \"cc\");\r\n    assertThat(StringUtils.trimArrayElements(new String[] { \"  a  \", \"b\", \"  c  \" })).containsExactly(\"a\", \"b\", \"c\");\r\n    assertThat(StringUtils.trimArrayElements(new String[] { null, \"  a  \", null })).containsExactly(null, \"a\", null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#trimArrayElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#trimArrayElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#removeDuplicateStrings()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeDuplicateStrings() {\r\n    String[] input = new String[] { \"myString2\", \"myString1\", \"myString2\" };\r\n    input = StringUtils.removeDuplicateStrings(input);\r\n    assertThat(input[0]).isEqualTo(\"myString2\");\r\n    assertThat(input[1]).isEqualTo(\"myString1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#removeDuplicateStrings()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#removeDuplicateStrings()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#splitArrayElementsIntoProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid splitArrayElementsIntoProperties() {\r\n    String[] input = new String[] { \"key1=value1 \", \"key2 =\\\"value2\\\"\" };\r\n    Properties result = StringUtils.splitArrayElementsIntoProperties(input, \"=\");\r\n    assertThat(result.getProperty(\"key1\")).isEqualTo(\"value1\");\r\n    assertThat(result.getProperty(\"key2\")).isEqualTo(\"\\\"value2\\\"\");\r\n}",
    "tailType": "method_code"
  }
]