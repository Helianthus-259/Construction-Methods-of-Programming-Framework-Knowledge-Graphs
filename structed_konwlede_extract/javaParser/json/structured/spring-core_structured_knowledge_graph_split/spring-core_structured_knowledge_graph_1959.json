[
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofNotAndExpressionWithoutSpaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofNotAndExpressionWithoutSpaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#assertOfNotAndExpression(Profiles)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertOfNotAndExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#assertOfNotAndExpression(Profiles)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"!spring & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInBracketsInvertedSingleElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofAndExpressionWithInBracketsInvertedSingleElement() {\r\n    Profiles profiles = Profiles.of(\"(!spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInBracketsInvertedSingleElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInBracketsInvertedSingleElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBrackets()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBrackets() {\r\n    Profiles profiles = Profiles.of(\"! (spring) & framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBrackets()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBrackets()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!(spring)&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementWithoutSpaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofAndExpressionWithInvertedSingleElementWithoutSpaces() {\r\n    Profiles profiles = Profiles.of(\"!spring&framework\");\r\n    assertOfAndExpressionWithInvertedSingleElement(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementWithoutSpaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofAndExpressionWithInvertedSingleElementWithoutSpaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#assertOfAndExpressionWithInvertedSingleElement(Profiles)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertOfAndExpressionWithInvertedSingleElement(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n}",
    "tailType": "method_code"
  }
]