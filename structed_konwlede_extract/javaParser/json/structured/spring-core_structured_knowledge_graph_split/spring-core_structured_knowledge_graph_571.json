[
  {
    "head": "org.springframework.cglib.core.CodeEmitter#end_method()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void end_method() {\r\n    visitMaxs(0, 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#end_method()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#begin_block()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Block begin_block() {\r\n    return new Block(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#begin_block()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void catch_exception(Block block, Type exception) {\r\n    if (block.getEnd() == null) {\r\n        throw new IllegalStateException(\"end of block is unset\");\r\n    }\r\n    mv.visitTryCatchBlock(block.getStart(), block.getEnd(), mark(), exception.getInternalName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#catch_exception(Block,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void goTo(Label label) {\r\n    mv.visitJumpInsn(Constants.GOTO, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#goTo(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void ifnull(Label label) {\r\n    mv.visitJumpInsn(Constants.IFNULL, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#ifnull(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void ifnonnull(Label label) {\r\n    mv.visitJumpInsn(Constants.IFNONNULL, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#ifnonnull(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void if_jump(int mode, Label label) {\r\n    mv.visitJumpInsn(mode, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#if_jump(int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void if_icmp(int mode, Label label) {\r\n    if_cmp(Type.INT_TYPE, mode, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#if_icmp(int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void if_cmp(Type type, int mode, Label label) {\r\n    int intOp = -1;\r\n    int jumpmode = mode;\r\n    switch(mode) {\r\n        case GE:\r\n            jumpmode = LT;\r\n            break;\r\n        case LE:\r\n            jumpmode = GT;\r\n            break;\r\n    }\r\n    switch(type.getSort()) {\r\n        case Type.LONG:\r\n            mv.visitInsn(Constants.LCMP);\r\n            break;\r\n        case Type.DOUBLE:\r\n            mv.visitInsn(Constants.DCMPG);\r\n            break;\r\n        case Type.FLOAT:\r\n            mv.visitInsn(Constants.FCMPG);\r\n            break;\r\n        case Type.ARRAY:\r\n        case Type.OBJECT:\r\n            switch(mode) {\r\n                case EQ:\r\n                    mv.visitJumpInsn(Constants.IF_ACMPEQ, label);\r\n                    return;\r\n                case NE:\r\n                    mv.visitJumpInsn(Constants.IF_ACMPNE, label);\r\n                    return;\r\n            }\r\n            throw new IllegalArgumentException(\"Bad comparison for type \" + type);\r\n        default:\r\n            switch(mode) {\r\n                case EQ:\r\n                    intOp = Constants.IF_ICMPEQ;\r\n                    break;\r\n                case NE:\r\n                    intOp = Constants.IF_ICMPNE;\r\n                    break;\r\n                case GE:\r\n                    swap();\r\n                /* fall through */\r\n                case LT:\r\n                    intOp = Constants.IF_ICMPLT;\r\n                    break;\r\n                case LE:\r\n                    swap();\r\n                /* fall through */\r\n                case GT:\r\n                    intOp = Constants.IF_ICMPGT;\r\n                    break;\r\n            }\r\n            mv.visitJumpInsn(intOp, label);\r\n            return;\r\n    }\r\n    if_jump(jumpmode, label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#if_cmp(Type,int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#pop()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void pop() {\r\n    mv.visitInsn(Constants.POP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#pop()",
    "tailType": "method"
  }
]