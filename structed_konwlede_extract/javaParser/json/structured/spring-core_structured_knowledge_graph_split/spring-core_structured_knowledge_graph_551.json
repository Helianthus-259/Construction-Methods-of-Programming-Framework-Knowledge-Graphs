[
  {
    "head": "org.springframework.cglib.beans.FixedKeySet#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int size() {\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.FixedKeySet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.FixedKeySet#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.FixedKeySet#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.FixedKeySet",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractSet",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.xml;\n\nimport org.assertj.core.api.AbstractAssert;\nimport org.w3c.dom.Node;\nimport org.xmlunit.assertj.XmlAssert;\nimport org.xmlunit.diff.DifferenceEvaluator;\nimport org.xmlunit.diff.NodeMatcher;\nimport org.xmlunit.util.Predicate;\n\n/**\n * Assertions exposed by {@link XmlContent}.\n *\n * @author Phillip Webb\n */\npublic class XmlContentAssert extends AbstractAssert<XmlContentAssert, Object> {\n\n\tXmlContentAssert(Object actual) {\n\t\tsuper(actual, XmlContentAssert.class);\n\t}\n\n\tpublic XmlContentAssert isSimilarTo(Object control) {\n\t\tXmlAssert.assertThat(super.actual).and(control).areSimilar();\n\t\treturn this;\n\t}\n\n\tpublic XmlContentAssert isSimilarTo(Object control, Predicate<Node> nodeFilter) {\n\t\tXmlAssert.assertThat(super.actual).and(control).withNodeFilter(nodeFilter).areSimilar();\n\t\treturn this;\n\t}\n\n\tpublic XmlContentAssert isSimilarTo(String control,\n\t\t\tDifferenceEvaluator differenceEvaluator) {\n\t\tXmlAssert.assertThat(super.actual).and(control).withDifferenceEvaluator(\n\t\t\t\tdifferenceEvaluator).areSimilar();\n\t\treturn this;\n\t}\n\n\tpublic XmlContentAssert isSimilarToIgnoringWhitespace(Object control) {\n\t\tXmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().areSimilar();\n\t\treturn this;\n\t}\n\n\n\tpublic XmlContentAssert isSimilarToIgnoringWhitespace(String control, NodeMatcher nodeMatcher) {\n\t\tXmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().withNodeMatcher(nodeMatcher).areSimilar();\n\t\treturn this;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "public XmlContentAssert isSimilarTo(Object control) {\r\n    XmlAssert.assertThat(super.actual).and(control).areSimilar();\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public XmlContentAssert isSimilarTo(Object control, Predicate<Node> nodeFilter) {\r\n    XmlAssert.assertThat(super.actual).and(control).withNodeFilter(nodeFilter).areSimilar();\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(Object,Predicate<Node>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(String,DifferenceEvaluator)",
    "headType": "method",
    "relation": "provide",
    "tail": "public XmlContentAssert isSimilarTo(String control, DifferenceEvaluator differenceEvaluator) {\r\n    XmlAssert.assertThat(super.actual).and(control).withDifferenceEvaluator(differenceEvaluator).areSimilar();\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarTo(String,DifferenceEvaluator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarToIgnoringWhitespace(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "public XmlContentAssert isSimilarToIgnoringWhitespace(Object control) {\r\n    XmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().areSimilar();\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarToIgnoringWhitespace(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarToIgnoringWhitespace(String,NodeMatcher)",
    "headType": "method",
    "relation": "provide",
    "tail": "public XmlContentAssert isSimilarToIgnoringWhitespace(String control, NodeMatcher nodeMatcher) {\r\n    XmlAssert.assertThat(super.actual).and(control).ignoreWhitespace().withNodeMatcher(nodeMatcher).areSimilar();\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.xml.XmlContentAssert#isSimilarToIgnoringWhitespace(String,NodeMatcher)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.xml.XmlContentAssert",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractAssert",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.beans",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.beans",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.beans.ImmutableBean",
    "tailType": "class"
  }
]