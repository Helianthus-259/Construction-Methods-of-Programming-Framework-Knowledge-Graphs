[
  {
    "head": "org.springframework.util.xml.StaxResult#setHandler(ContentHandler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Throws an {@code UnsupportedOperationException}.\r\n * @throws UnsupportedOperationException always\r\n */\r\n@Override\r\npublic void setHandler(ContentHandler handler) {\r\n    throw new UnsupportedOperationException(\"setHandler is not supported\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResult#setHandler(ContentHandler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#setHandler(ContentHandler)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#setLexicalHandler(LexicalHandler)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Throws an {@code UnsupportedOperationException}.\r\n * @throws UnsupportedOperationException always\r\n */\r\n@Override\r\npublic void setLexicalHandler(LexicalHandler handler) {\r\n    throw new UnsupportedOperationException(\"setLexicalHandler is not supported\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxResult#setLexicalHandler(LexicalHandler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxResult#setLexicalHandler(LexicalHandler)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxResult",
    "headType": "class",
    "relation": "extend",
    "tail": "SAXResult",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxSource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxSource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.transform.sax.SAXSource;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\n\n/**\n * Implementation of the {@code Source} tagging interface for StAX readers. Can be constructed with\n * an {@code XMLEventReader} or an {@code XMLStreamReader}.\n *\n * <p>This class is necessary because there is no implementation of {@code Source} for StAX Readers\n * in JAXP 1.3. There is a {@code StAXSource} in JAXP 1.4 (JDK 1.6), but this class is kept around\n * for backwards compatibility reasons.\n *\n * <p>Even though {@code StaxSource} extends from {@code SAXSource}, calling the methods of\n * {@code SAXSource} is <strong>not supported</strong>. In general, the only supported operation\n * on this class is to use the {@code XMLReader} obtained via {@link #getXMLReader()} to parse the\n * input source obtained via {@link #getInputSource()}. Calling {@link #setXMLReader(XMLReader)}\n * or {@link #setInputSource(InputSource)} will result in {@code UnsupportedOperationException #setInputSource(InputSource)} will result in {@code UnsupportedOperationExceptions}.\n *\n * @author Arjen Poutsma\n * @since 3.0\n * @see XMLEventReader\n * @see XMLStreamReader\n * @see javax.xml.transform.Transformer\n */\nclass StaxSource extends SAXSource {\n\n\tprivate @Nullable XMLEventReader eventReader;\n\n\tprivate @Nullable XMLStreamReader streamReader;\n\n\n\t/**\n\t * Construct a new instance of the {@code StaxSource} with the specified {@code XMLEventReader}.\n\t * The supplied event reader must be in {@code XMLStreamConstants.START_DOCUMENT} or\n\t * {@code XMLStreamConstants.START_ELEMENT} state.\n\t * @param eventReader the {@code XMLEventReader} to read from\n\t * @throws IllegalStateException if the reader is not at the start of a document or element\n\t */\n\tStaxSource(XMLEventReader eventReader) {\n\t\tsuper(new StaxEventXMLReader(eventReader), new InputSource());\n\t\tthis.eventReader = eventReader;\n\t}\n\n\t/**\n\t * Construct a new instance of the {@code StaxSource} with the specified {@code XMLStreamReader}.\n\t * The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT} or\n\t * {@code XMLStreamConstants.START_ELEMENT} state.\n\t * @param streamReader the {@code XMLStreamReader} to read from\n\t * @throws IllegalStateException if the reader is not at the start of a document or element\n\t */\n\tStaxSource(XMLStreamReader streamReader) {\n\t\tsuper(new StaxStreamXMLReader(streamReader), new InputSource());\n\t\tthis.streamReader = streamReader;\n\t}\n\n\n\t/**\n\t * Return the {@code XMLEventReader} used by this {@code StaxSource}.\n\t * <p>If this {@code StaxSource} was created with an {@code XMLStreamReader},\n\t * the result will be {@code null}.\n\t * @return the StAX event reader used by this source\n\t * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)\n\t */\n\t@Nullable XMLEventReader getXMLEventReader() {\n\t\treturn this.eventReader;\n\t}\n\n\t/**\n\t * Return the {@code XMLStreamReader} used by this {@code StaxSource}.\n\t * <p>If this {@code StaxSource} was created with an {@code XMLEventReader},\n\t * the result will be {@code null}.\n\t * @return the StAX event reader used by this source\n\t * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)\n\t */\n\t@Nullable XMLStreamReader getXMLStreamReader() {\n\t\treturn this.streamReader;\n\t}\n\n\n\t/**\n\t * Throws an {@code UnsupportedOperationException}.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setInputSource(InputSource inputSource) {\n\t\tthrow new UnsupportedOperationException(\"setInputSource is not supported\");\n\t}\n\n\t/**\n\t * Throws an {@code UnsupportedOperationException}.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setXMLReader(XMLReader reader) {\n\t\tthrow new UnsupportedOperationException(\"setXMLReader is not supported\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxSource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxSource#eventReader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#eventReader",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLEventReader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxSource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxSource#streamReader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#streamReader",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLStreamReader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#getXMLEventReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code XMLEventReader} used by this {@code StaxSource}.\r\n * <p>If this {@code StaxSource} was created with an {@code XMLStreamReader},\r\n * the result will be {@code null}.\r\n * @return the StAX event reader used by this source\r\n * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)\r\n */\r\n@Nullable\r\nXMLEventReader getXMLEventReader() {\r\n    return this.eventReader;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxSource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxSource#getXMLEventReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#getXMLEventReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#getXMLStreamReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code XMLStreamReader} used by this {@code StaxSource}.\r\n * <p>If this {@code StaxSource} was created with an {@code XMLEventReader},\r\n * the result will be {@code null}.\r\n * @return the StAX event reader used by this source\r\n * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)\r\n */\r\n@Nullable\r\nXMLStreamReader getXMLStreamReader() {\r\n    return this.streamReader;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxSource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxSource#getXMLStreamReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxSource#getXMLStreamReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]