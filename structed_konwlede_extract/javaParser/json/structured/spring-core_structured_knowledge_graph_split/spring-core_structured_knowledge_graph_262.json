[
  {
    "head": "org.springframework.util.MimeTypeTests#compareTo()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#compareToCaseSensitivity()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid compareToCaseSensitivity() {\r\n    MimeType m1 = new MimeType(\"audio\", \"basic\");\r\n    MimeType m2 = new MimeType(\"Audio\", \"Basic\");\r\n    assertThat(m1.compareTo(m2)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    assertThat(m2.compareTo(m1)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    m1 = new MimeType(\"audio\", \"basic\", singletonMap(\"foo\", \"bar\"));\r\n    m2 = new MimeType(\"audio\", \"basic\", singletonMap(\"Foo\", \"bar\"));\r\n    assertThat(m1.compareTo(m2)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    assertThat(m2.compareTo(m1)).as(\"Invalid comparison result\").isEqualTo(0);\r\n    m1 = new MimeType(\"audio\", \"basic\", singletonMap(\"foo\", \"bar\"));\r\n    m2 = new MimeType(\"audio\", \"basic\", singletonMap(\"foo\", \"Bar\"));\r\n    assertThat(m1.compareTo(m2)).as(\"Invalid comparison result\").isNotEqualTo(0);\r\n    assertThat(m2.compareTo(m1)).as(\"Invalid comparison result\").isNotEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#compareToCaseSensitivity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#compareToCaseSensitivity()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isMoreSpecific()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isMoreSpecific() {\r\n    MimeType audioBasic = new MimeType(\"audio\", \"basic\");\r\n    MimeType audio = new MimeType(\"audio\");\r\n    MimeType audioWave = new MimeType(\"audio\", \"wave\");\r\n    MimeType audioBasicLevel = new MimeType(\"audio\", \"basic\", singletonMap(\"level\", \"1\"));\r\n    assertThat(audioBasic.isMoreSpecific(audioBasicLevel)).isFalse();\r\n    assertThat(audioBasicLevel.isMoreSpecific(audioBasic)).isTrue();\r\n    assertThat(audio.isMoreSpecific(MimeTypeUtils.ALL)).isTrue();\r\n    assertThat(MimeTypeUtils.ALL.isMoreSpecific(audio)).isFalse();\r\n    assertThat(audioBasicLevel.isMoreSpecific(audioBasic)).isTrue();\r\n    assertThat(audioBasic.isMoreSpecific(audioBasicLevel)).isFalse();\r\n    assertThat(audioBasic.isMoreSpecific(MimeTypeUtils.TEXT_HTML)).isFalse();\r\n    assertThat(audioBasic.isMoreSpecific(audioWave)).isFalse();\r\n    assertThat(audioBasicLevel.isMoreSpecific(MimeTypeUtils.TEXT_HTML)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#isMoreSpecific()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isMoreSpecific()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isLessSpecific()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isLessSpecific() {\r\n    MimeType audioBasic = new MimeType(\"audio\", \"basic\");\r\n    MimeType audio = new MimeType(\"audio\");\r\n    MimeType audioWave = new MimeType(\"audio\", \"wave\");\r\n    MimeType audioBasicLevel = new MimeType(\"audio\", \"basic\", singletonMap(\"level\", \"1\"));\r\n    assertThat(audioBasic.isLessSpecific(audioBasicLevel)).isTrue();\r\n    assertThat(audioBasicLevel.isLessSpecific(audioBasic)).isFalse();\r\n    assertThat(audio.isLessSpecific(MimeTypeUtils.ALL)).isFalse();\r\n    assertThat(MimeTypeUtils.ALL.isLessSpecific(audio)).isTrue();\r\n    assertThat(audioBasicLevel.isLessSpecific(audioBasic)).isFalse();\r\n    assertThat(audioBasic.isLessSpecific(audioBasicLevel)).isTrue();\r\n    assertThat(audioBasic.isLessSpecific(MimeTypeUtils.TEXT_HTML)).isFalse();\r\n    assertThat(audioBasic.isLessSpecific(audioWave)).isFalse();\r\n    assertThat(audioBasicLevel.isLessSpecific(MimeTypeUtils.TEXT_HTML)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#isLessSpecific()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isLessSpecific()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#sortBySpecificity()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortBySpecificity() {\r\n    MimeType audioBasic = new MimeType(\"audio\", \"basic\");\r\n    MimeType audio = new MimeType(\"audio\");\r\n    MimeType audioWave = new MimeType(\"audio\", \"wave\");\r\n    MimeType audioBasicLevel = new MimeType(\"audio\", \"basic\", singletonMap(\"level\", \"1\"));\r\n    List<MimeType> mimeTypes = new ArrayList<>(List.of(MimeTypeUtils.ALL, audio, audioWave, audioBasic, audioBasicLevel));\r\n    MimeTypeUtils.sortBySpecificity(mimeTypes);\r\n    assertThat(mimeTypes).containsExactly(audioWave, audioBasicLevel, audioBasic, audio, MimeTypeUtils.ALL);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#sortBySpecificity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#sortBySpecificity()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#bubbleSort()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bubbleSort() {\r\n    List<Integer> list = new ArrayList<>(List.of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\r\n    MimeTypeUtils.bubbleSort(list, (i1, i2) -> i1 > i2);\r\n    assertThat(list).containsExactly(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#bubbleSort()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#bubbleSort()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#equalsIsCaseInsensitiveForCharsets()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-13157\r\n@Test\r\nvoid equalsIsCaseInsensitiveForCharsets() {\r\n    MimeType m1 = new MimeType(\"text\", \"plain\", singletonMap(\"charset\", \"UTF-8\"));\r\n    MimeType m2 = new MimeType(\"text\", \"plain\", singletonMap(\"charset\", \"utf-8\"));\r\n    assertThat(m2).isEqualTo(m1);\r\n    assertThat(m1).isEqualTo(m2);\r\n    assertThat(m1.compareTo(m2)).isEqualTo(0);\r\n    assertThat(m2.compareTo(m1)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#equalsIsCaseInsensitiveForCharsets()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#equalsIsCaseInsensitiveForCharsets()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#serialize()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-26127\r\n@Test\r\nvoid serialize() throws Exception {\r\n    MimeType original = new MimeType(\"text\", \"plain\", StandardCharsets.UTF_8);\r\n    MimeType deserialized = SerializationTestUtils.serializeAndDeserialize(original);\r\n    assertThat(deserialized).isEqualTo(original);\r\n    assertThat(original).isEqualTo(deserialized);\r\n}",
    "tailType": "method_code"
  }
]