[
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#expandToIncludeDirectories(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#includes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Include resources matching the specified glob patterns.\r\n * @param includes the include patterns (see {@link ResourcePatternHint} documentation)\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder includes(String... includes) {\r\n    return includes(null, includes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#includes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#build()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create {@link ResourcePatternHints} based on the state of this\r\n * builder.\r\n * @return resource pattern hints\r\n */\r\nResourcePatternHints build() {\r\n    return new ResourcePatternHints(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#build()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#zeroCapacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid zeroCapacity() {\r\n    ConcurrentLruCache<String, String> cache = new ConcurrentLruCache<>(0, key -> key + \"value\");\r\n    assertThat(cache.capacity()).isZero();\r\n    assertThat(cache.size()).isZero();\r\n    assertThat(cache.get(\"k1\")).isEqualTo(\"k1value\");\r\n    assertThat(cache.size()).isZero();\r\n    assertThat(cache.contains(\"k1\")).isFalse();\r\n    assertThat(cache.get(\"k2\")).isEqualTo(\"k2value\");\r\n    assertThat(cache.size()).isZero();\r\n    assertThat(cache.contains(\"k1\")).isFalse();\r\n    assertThat(cache.contains(\"k2\")).isFalse();\r\n    assertThat(cache.get(\"k3\")).isEqualTo(\"k3value\");\r\n    assertThat(cache.size()).isZero();\r\n    assertThat(cache.contains(\"k1\")).isFalse();\r\n    assertThat(cache.contains(\"k2\")).isFalse();\r\n    assertThat(cache.contains(\"k3\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCacheTests#zeroCapacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#zeroCapacity()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#getAndSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAndSize() {\r\n    assertThat(this.cache.capacity()).isEqualTo(2);\r\n    assertThat(this.cache.size()).isEqualTo(0);\r\n    assertThat(this.cache.get(\"k1\")).isEqualTo(\"k1value\");\r\n    assertThat(this.cache.size()).isEqualTo(1);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.get(\"k2\")).isEqualTo(\"k2value\");\r\n    assertThat(this.cache.size()).isEqualTo(2);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.contains(\"k2\")).isTrue();\r\n    assertThat(this.cache.get(\"k3\")).isEqualTo(\"k3value\");\r\n    assertThat(this.cache.size()).isEqualTo(2);\r\n    assertThat(this.cache.contains(\"k1\")).isFalse();\r\n    assertThat(this.cache.contains(\"k2\")).isTrue();\r\n    assertThat(this.cache.contains(\"k3\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCacheTests#getAndSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#getAndSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#removeAndSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeAndSize() {\r\n    assertThat(this.cache.get(\"k1\")).isEqualTo(\"k1value\");\r\n    assertThat(this.cache.get(\"k2\")).isEqualTo(\"k2value\");\r\n    assertThat(this.cache.size()).isEqualTo(2);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.contains(\"k2\")).isTrue();\r\n    this.cache.remove(\"k2\");\r\n    assertThat(this.cache.size()).isEqualTo(1);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.contains(\"k2\")).isFalse();\r\n    assertThat(this.cache.get(\"k3\")).isEqualTo(\"k3value\");\r\n    assertThat(this.cache.size()).isEqualTo(2);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.contains(\"k2\")).isFalse();\r\n    assertThat(this.cache.contains(\"k3\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCacheTests#removeAndSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#removeAndSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#clearAndSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clearAndSize() {\r\n    assertThat(this.cache.get(\"k1\")).isEqualTo(\"k1value\");\r\n    assertThat(this.cache.get(\"k2\")).isEqualTo(\"k2value\");\r\n    assertThat(this.cache.size()).isEqualTo(2);\r\n    assertThat(this.cache.contains(\"k1\")).isTrue();\r\n    assertThat(this.cache.contains(\"k2\")).isTrue();\r\n    this.cache.clear();\r\n    assertThat(this.cache.size()).isEqualTo(0);\r\n    assertThat(this.cache.contains(\"k1\")).isFalse();\r\n    assertThat(this.cache.contains(\"k2\")).isFalse();\r\n    assertThat(this.cache.get(\"k3\")).isEqualTo(\"k3value\");\r\n    assertThat(this.cache.size()).isEqualTo(1);\r\n    assertThat(this.cache.contains(\"k1\")).isFalse();\r\n    assertThat(this.cache.contains(\"k2\")).isFalse();\r\n    assertThat(this.cache.contains(\"k3\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCacheTests#clearAndSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheTests#clearAndSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.RuntimeHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\n/**\n * Gather hints that can be used to optimize the application runtime.\n *\n * <p>Use of reflection can be recorded for individual members of a type, as\n * well as broader {@linkplain MemberCategory member categories}. Access to\n * resources can be specified using patterns or the base name of a resource\n * bundle.\n *\n * <p>Hints that require the need for Java serialization of proxies can be\n * recorded as well.\n *\n * @author Stephane Nicoll\n * @author Janne Valkealahti\n * @since 6.0\n */\npublic class RuntimeHints {\n\n\tprivate final ReflectionHints reflection = new ReflectionHints();\n\n\tprivate final ResourceHints resources = new ResourceHints();\n\n\tprivate final SerializationHints serialization = new SerializationHints();\n\n\tprivate final ProxyHints proxies = new ProxyHints();\n\n\tprivate final ReflectionHints jni = new ReflectionHints();\n\n\n\t/**\n\t * Provide access to reflection-based hints.\n\t * @return reflection hints\n\t */\n\tpublic ReflectionHints reflection() {\n\t\treturn this.reflection;\n\t}\n\n\t/**\n\t * Provide access to resource-based hints.\n\t * @return resource hints\n\t */\n\tpublic ResourceHints resources() {\n\t\treturn this.resources;\n\t}\n\n\t/**\n\t * Provide access to serialization-based hints.\n\t * @return serialization hints\n\t */\n\tpublic SerializationHints serialization() {\n\t\treturn this.serialization;\n\t}\n\n\t/**\n\t * Provide access to proxy-based hints.\n\t * @return proxy hints\n\t */\n\tpublic ProxyHints proxies() {\n\t\treturn this.proxies;\n\t}\n\n\t/**\n\t * Provide access to jni-based hints.\n\t * @return jni hints\n\t */\n\tpublic ReflectionHints jni() {\n\t\treturn this.jni;\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]