[
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests#createStreamReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#createStreamReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid write() throws Exception {\r\n    streamWriter.writeStartDocument();\r\n    streamWriter.writeProcessingInstruction(\"pi\", \"content\");\r\n    streamWriter.writeStartElement(\"namespace\", \"root\");\r\n    streamWriter.writeDefaultNamespace(\"namespace\");\r\n    streamWriter.writeStartElement(\"prefix\", \"child\", \"namespace2\");\r\n    streamWriter.writeNamespace(\"prefix\", \"namespace2\");\r\n    streamWriter.writeComment(\"comment\");\r\n    streamWriter.writeCharacters(\"content\");\r\n    streamWriter.writeEndElement();\r\n    streamWriter.writeEndElement();\r\n    streamWriter.writeEndDocument();\r\n    Predicate<Node> nodeFilter = n -> n.getNodeType() != Node.DOCUMENT_TYPE_NODE && n.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE;\r\n    assertThat(XmlContent.from(stringWriter)).isSimilarTo(XML, nodeFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriterTests#write()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.util.xml.XmlValidationModeDetector.VALIDATION_DTD;\nimport static org.springframework.util.xml.XmlValidationModeDetector.VALIDATION_XSD;\n\n/**\n * Tests for {@link XmlValidationModeDetector}.\n *\n * @author Sam Brannen\n * @since 5.1.10\n */\nclass XmlValidationModeDetectorTests {\n\n\tprivate final XmlValidationModeDetector xmlValidationModeDetector = new XmlValidationModeDetector();\n\n\n\t@ParameterizedTest\n\t@ValueSource(strings = {\n\t\t\"dtdWithNoComments.xml\",\n\t\t\"dtdWithLeadingComment.xml\",\n\t\t\"dtdWithTrailingComment.xml\",\n\t\t\"dtdWithTrailingCommentAcrossMultipleLines.xml\",\n\t\t\"dtdWithCommentOnNextLine.xml\",\n\t\t\"dtdWithMultipleComments.xml\"\n\t})\n\tvoid dtdDetection(String fileName) throws Exception {\n\t\tassertValidationMode(fileName, VALIDATION_DTD);\n\t}\n\n\t@ParameterizedTest\n\t@ValueSource(strings = {\n\t\t\"xsdWithNoComments.xml\",\n\t\t\"xsdWithMultipleComments.xml\",\n\t\t\"xsdWithDoctypeInComment.xml\",\n\t\t\"xsdWithDoctypeInOpenCommentWithAdditionalCommentOnSameLine.xml\"\n\t})\n\tvoid xsdDetection(String fileName) throws Exception {\n\t\tassertValidationMode(fileName, VALIDATION_XSD);\n\t}\n\n\n\tprivate void assertValidationMode(String fileName, int expectedValidationMode) throws IOException {\n\t\ttry (InputStream inputStream = getClass().getResourceAsStream(fileName)) {\n\t\t\tassertThat(xmlValidationModeDetector.detectValidationMode(inputStream))\n\t\t\t\t.as(\"Validation Mode\")\n\t\t\t\t.isEqualTo(expectedValidationMode);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests#xmlValidationModeDetector",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xmlValidationModeDetector",
    "headType": "field",
    "relation": "haveType",
    "tail": "XmlValidationModeDetector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@ValueSource(strings = { \"dtdWithNoComments.xml\", \"dtdWithLeadingComment.xml\", \"dtdWithTrailingComment.xml\", \"dtdWithTrailingCommentAcrossMultipleLines.xml\", \"dtdWithCommentOnNextLine.xml\", \"dtdWithMultipleComments.xml\" })\r\nvoid dtdDetection(String fileName) throws Exception {\r\n    assertValidationMode(fileName, VALIDATION_DTD);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#dtdDetection(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@ValueSource(strings = { \"xsdWithNoComments.xml\", \"xsdWithMultipleComments.xml\", \"xsdWithDoctypeInComment.xml\", \"xsdWithDoctypeInOpenCommentWithAdditionalCommentOnSameLine.xml\" })\r\nvoid xsdDetection(String fileName) throws Exception {\r\n    assertValidationMode(fileName, VALIDATION_XSD);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#xsdDetection(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ValueSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertValidationMode(String fileName, int expectedValidationMode) throws IOException {\r\n    try (InputStream inputStream = getClass().getResourceAsStream(fileName)) {\r\n        assertThat(xmlValidationModeDetector.detectValidationMode(inputStream)).as(\"Validation Mode\").isEqualTo(expectedValidationMode);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XmlValidationModeDetectorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XmlValidationModeDetectorTests#assertValidationMode(String,int)",
    "tailType": "method"
  }
]