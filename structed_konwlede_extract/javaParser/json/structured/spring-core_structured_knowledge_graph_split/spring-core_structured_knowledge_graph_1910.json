[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.canConvert(TypeDescriptor.valueOf(String.class), null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#removeConvertible()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeConvertible() {\r\n    conversionService.addConverter(new ColorConverter());\r\n    assertThat(conversionService.canConvert(String.class, Color.class)).isTrue();\r\n    conversionService.removeConvertible(String.class, Color.class);\r\n    assertThat(conversionService.canConvert(String.class, Color.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#removeConvertible()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#removeConvertible()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conditionalConverter() {\r\n    MyConditionalConverter converter = new MyConditionalConverter();\r\n    conversionService.addConverter(new ColorConverter());\r\n    conversionService.addConverter(converter);\r\n    assertThat(conversionService.convert(\"#000000\", Color.class)).isEqualTo(Color.BLACK);\r\n    assertThat(converter.getMatchAttempts()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conditionalConverterFactory() {\r\n    MyConditionalConverterFactory converter = new MyConditionalConverterFactory();\r\n    conversionService.addConverter(new ColorConverter());\r\n    conversionService.addConverterFactory(converter);\r\n    assertThat(conversionService.convert(\"#000000\", Color.class)).isEqualTo(Color.BLACK);\r\n    assertThat(converter.getMatchAttempts()).isGreaterThan(0);\r\n    assertThat(converter.getNestedMatchAttempts()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterCachingForDifferentAnnotationAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conditionalConverterCachingForDifferentAnnotationAttributes() throws Exception {\r\n    conversionService.addConverter(new ColorConverter());\r\n    conversionService.addConverter(new MyConditionalColorConverter());\r\n    assertThat(conversionService.convert(\"000000xxxx\", new TypeDescriptor(getClass().getField(\"activeColor\")))).isEqualTo(Color.BLACK);\r\n    assertThat(conversionService.convert(\" #000000 \", new TypeDescriptor(getClass().getField(\"inactiveColor\")))).isEqualTo(Color.BLACK);\r\n    assertThat(conversionService.convert(\"000000yyyy\", new TypeDescriptor(getClass().getField(\"activeColor\")))).isEqualTo(Color.BLACK);\r\n    assertThat(conversionService.convert(\"  #000000  \", new TypeDescriptor(getClass().getField(\"inactiveColor\")))).isEqualTo(Color.BLACK);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterCachingForDifferentAnnotationAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConverterCachingForDifferentAnnotationAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#shouldNotSupportNullConvertibleTypesFromNonConditionalGenericConverter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldNotSupportNullConvertibleTypesFromNonConditionalGenericConverter() {\r\n    GenericConverter converter = new NonConditionalGenericConverter();\r\n    assertThatIllegalStateException().isThrownBy(() -> conversionService.addConverter(converter)).withMessage(\"Only conditional converters may return null convertible types\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#shouldNotSupportNullConvertibleTypesFromNonConditionalGenericConverter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#shouldNotSupportNullConvertibleTypesFromNonConditionalGenericConverter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]