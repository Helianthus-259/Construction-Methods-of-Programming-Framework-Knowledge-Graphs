[
  {
    "head": "org.springframework.core.io.ClassPathContextResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource createRelative(String relativePath) {\r\n    String pathToUse = StringUtils.applyRelativePath(getPath(), relativePath);\r\n    return new ClassPathContextResource(pathToUse, getClassLoader());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathContextResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassPathResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.DescriptiveResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Simple {@link Resource} implementation that holds a resource description\n * but does not point to an actually readable resource.\n *\n * <p>To be used as placeholder if a {@code Resource} argument is\n * expected by an API but not necessarily used for actual reading.\n *\n * @author Juergen Hoeller\n * @since 1.2.6\n */\npublic class DescriptiveResource extends AbstractResource {\n\n\tprivate final String description;\n\n\n\t/**\n\t * Create a new DescriptiveResource.\n\t * @param description the resource description\n\t */\n\tpublic DescriptiveResource(@Nullable String description) {\n\t\tthis.description = (description != null ? description : \"\");\n\t}\n\n\n\t@Override\n\tpublic boolean exists() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean isReadable() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\tthrow new FileNotFoundException(\n\t\t\t\tgetDescription() + \" cannot be opened because it does not point to a readable resource\");\n\t}\n\n\t@Override\n\tpublic String getDescription() {\n\t\treturn this.description;\n\t}\n\n\n\t/**\n\t * This implementation compares the underlying description String.\n\t */\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof DescriptiveResource that &&\n\t\t\t\tthis.description.equals(that.description)));\n\t}\n\n\t/**\n\t * This implementation returns the hash code of the underlying description String.\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.description.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.DescriptiveResource#description",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#description",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean exists() {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DescriptiveResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isReadable() {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DescriptiveResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    throw new FileNotFoundException(getDescription() + \" cannot be opened because it does not point to a readable resource\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DescriptiveResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getDescription() {\r\n    return this.description;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DescriptiveResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DescriptiveResource#getDescription()",
    "tailType": "method"
  }
]