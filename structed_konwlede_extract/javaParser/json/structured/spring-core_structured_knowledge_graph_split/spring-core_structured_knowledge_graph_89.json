[
  {
    "head": "org.springframework.core.type.AssignableTypeFilterTests#interfaceThroughSuperClassMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.InputStreamSource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.function.ThrowingConsumer;\n\n/**\n * {@link GeneratedFiles} implementation that keeps generated files in-memory.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic class InMemoryGeneratedFiles implements GeneratedFiles {\n\n\tprivate final Map<Kind, Map<String, InputStreamSource>> files = new HashMap<>();\n\n\n\t@Override\n\tpublic void handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler) {\n\t\tMap<String, InputStreamSource> paths = this.files.computeIfAbsent(kind,\n\t\t\t\tkey -> new LinkedHashMap<>());\n\t\thandler.accept(new InMemoryFileHandler(paths, path));\n\t}\n\n\t/**\n\t * Return a {@link Map} of the generated files of a specific {@link Kind}.\n\t * @param kind the kind of generated file\n\t * @return a {@link Map} of paths to {@link InputStreamSource} instances\n\t */\n\tpublic Map<String, InputStreamSource> getGeneratedFiles(Kind kind) {\n\t\tAssert.notNull(kind, \"'kind' must not be null\");\n\t\treturn Collections.unmodifiableMap(this.files.getOrDefault(kind, Collections.emptyMap()));\n\t}\n\n\t/**\n\t * Return the content of the specified file.\n\t * @param kind the kind of generated file\n\t * @param path the path of the file\n\t * @return the file content or {@code null} if no file could be found\n\t * @throws IOException on read error\n\t */\n\tpublic @Nullable String getGeneratedFileContent(Kind kind, String path) throws IOException {\n\t\tInputStreamSource source = getGeneratedFile(kind, path);\n\t\tif (source != null) {\n\t\t\treturn new String(source.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return the {@link InputStreamSource} of specified file.\n\t * @param kind the kind of generated file\n\t * @param path the path of the file\n\t * @return the file source or {@code null} if no file could be found\n\t */\n\tpublic @Nullable InputStreamSource getGeneratedFile(Kind kind, String path) {\n\t\tAssert.notNull(kind, \"'kind' must not be null\");\n\t\tAssert.hasLength(path, \"'path' must not be empty\");\n\t\tMap<String, InputStreamSource> paths = this.files.get(kind);\n\t\treturn (paths != null ? paths.get(path) : null);\n\t}\n\n\tprivate static class InMemoryFileHandler extends FileHandler {\n\n\t\tprivate final Map<String, InputStreamSource> paths;\n\n\t\tprivate final String key;\n\n\t\tInMemoryFileHandler(Map<String, InputStreamSource> paths, String key) {\n\t\t\tsuper(paths.containsKey(key), () -> paths.get(key));\n\t\t\tthis.paths = paths;\n\t\t\tthis.key = key;\n\t\t}\n\n\t\t@Override\n\t\tprotected void copy(InputStreamSource content, boolean override) {\n\t\t\tthis.paths.put(this.key, content);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.key;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles#files",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#files",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Kind, Map<String, InputStreamSource>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#handleFile(Kind,String,ThrowingConsumer<FileHandler>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler) {\r\n    Map<String, InputStreamSource> paths = this.files.computeIfAbsent(kind, key -> new LinkedHashMap<>());\r\n    handler.accept(new InMemoryFileHandler(paths, path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles#handleFile(Kind,String,ThrowingConsumer<FileHandler>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#handleFile(Kind,String,ThrowingConsumer<FileHandler>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFiles(Kind)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link Map} of the generated files of a specific {@link Kind}.\r\n * @param kind the kind of generated file\r\n * @return a {@link Map} of paths to {@link InputStreamSource} instances\r\n */\r\npublic Map<String, InputStreamSource> getGeneratedFiles(Kind kind) {\r\n    Assert.notNull(kind, \"'kind' must not be null\");\r\n    return Collections.unmodifiableMap(this.files.getOrDefault(kind, Collections.emptyMap()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFiles(Kind)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFileContent(Kind,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the content of the specified file.\r\n * @param kind the kind of generated file\r\n * @param path the path of the file\r\n * @return the file content or {@code null} if no file could be found\r\n * @throws IOException on read error\r\n */\r\n@Nullable\r\npublic String getGeneratedFileContent(Kind kind, String path) throws IOException {\r\n    InputStreamSource source = getGeneratedFile(kind, path);\r\n    if (source != null) {\r\n        return new String(source.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFileContent(Kind,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFileContent(Kind,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFile(Kind,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link InputStreamSource} of specified file.\r\n * @param kind the kind of generated file\r\n * @param path the path of the file\r\n * @return the file source or {@code null} if no file could be found\r\n */\r\n@Nullable\r\npublic InputStreamSource getGeneratedFile(Kind kind, String path) {\r\n    Assert.notNull(kind, \"'kind' must not be null\");\r\n    Assert.hasLength(path, \"'path' must not be empty\");\r\n    Map<String, InputStreamSource> paths = this.files.get(kind);\r\n    return (paths != null ? paths.get(path) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFile(Kind,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFiles#getGeneratedFile(Kind,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.InMemoryFileHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.InputStreamSource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.function.ThrowingConsumer;\n\n/**\n * {@link GeneratedFiles} implementation that keeps generated files in-memory.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic class InMemoryGeneratedFiles implements GeneratedFiles {\n\n\tprivate final Map<Kind, Map<String, InputStreamSource>> files = new HashMap<>();\n\n\n\t@Override\n\tpublic void handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler) {\n\t\tMap<String, InputStreamSource> paths = this.files.computeIfAbsent(kind,\n\t\t\t\tkey -> new LinkedHashMap<>());\n\t\thandler.accept(new InMemoryFileHandler(paths, path));\n\t}\n\n\t/**\n\t * Return a {@link Map} of the generated files of a specific {@link Kind}.\n\t * @param kind the kind of generated file\n\t * @return a {@link Map} of paths to {@link InputStreamSource} instances\n\t */\n\tpublic Map<String, InputStreamSource> getGeneratedFiles(Kind kind) {\n\t\tAssert.notNull(kind, \"'kind' must not be null\");\n\t\treturn Collections.unmodifiableMap(this.files.getOrDefault(kind, Collections.emptyMap()));\n\t}\n\n\t/**\n\t * Return the content of the specified file.\n\t * @param kind the kind of generated file\n\t * @param path the path of the file\n\t * @return the file content or {@code null} if no file could be found\n\t * @throws IOException on read error\n\t */\n\tpublic @Nullable String getGeneratedFileContent(Kind kind, String path) throws IOException {\n\t\tInputStreamSource source = getGeneratedFile(kind, path);\n\t\tif (source != null) {\n\t\t\treturn new String(source.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return the {@link InputStreamSource} of specified file.\n\t * @param kind the kind of generated file\n\t * @param path the path of the file\n\t * @return the file source or {@code null} if no file could be found\n\t */\n\tpublic @Nullable InputStreamSource getGeneratedFile(Kind kind, String path) {\n\t\tAssert.notNull(kind, \"'kind' must not be null\");\n\t\tAssert.hasLength(path, \"'path' must not be empty\");\n\t\tMap<String, InputStreamSource> paths = this.files.get(kind);\n\t\treturn (paths != null ? paths.get(path) : null);\n\t}\n\n\tprivate static class InMemoryFileHandler extends FileHandler {\n\n\t\tprivate final Map<String, InputStreamSource> paths;\n\n\t\tprivate final String key;\n\n\t\tInMemoryFileHandler(Map<String, InputStreamSource> paths, String key) {\n\t\t\tsuper(paths.containsKey(key), () -> paths.get(key));\n\t\t\tthis.paths = paths;\n\t\t\tthis.key = key;\n\t\t}\n\n\t\t@Override\n\t\tprotected void copy(InputStreamSource content, boolean override) {\n\t\t\tthis.paths.put(this.key, content);\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.key;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.InMemoryFileHandler#paths",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#paths",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, InputStreamSource>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.InMemoryFileHandler#key",
    "tailType": "field"
  }
]