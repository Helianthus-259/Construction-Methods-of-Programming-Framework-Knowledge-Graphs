[
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generator",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassNameGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWhenTargetClassIsNullUsesMainTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassNameWhenTargetClassIsNullUsesMainTarget() {\r\n    ClassName generated = this.generator.generateClassName(\"test\", null);\r\n    assertThat(generated).hasToString(\"com.example.Test__Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWhenTargetClassIsNullUsesMainTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWhenTargetClassIsNullUsesMainTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameUseFeatureNamePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassNameUseFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"One\").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__OneTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameUseFeatureNamePrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameUseFeatureNamePrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithNoTextFeatureNamePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassNameWithNoTextFeatureNamePrefix() {\r\n    ClassName generated = new ClassNameGenerator(TEST_TARGET, \"  \").generateClassName(\"test\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithNoTextFeatureNamePrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithNoTextFeatureNamePrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsEmptyThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generatedClassNameWhenFeatureIsEmptyThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.generator.generateClassName(\"\", ClassName.get(InputStream.class))).withMessage(\"'featureName' must not be empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsEmptyThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsEmptyThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsNotAllLettersThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generatedClassNameWhenFeatureIsNotAllLettersThrowsException() {\r\n    assertThat(this.generator.generateClassName(\"name!\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__Name\");\r\n    assertThat(this.generator.generateClassName(\"1NameHere\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__NameHere\");\r\n    assertThat(this.generator.generateClassName(\"Y0pe\", ClassName.get(InputStream.class))).hasToString(\"java.io.InputStream__YPe\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsNotAllLettersThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generatedClassNameWhenFeatureIsNotAllLettersThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName() {\r\n    ClassName generated = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated).hasToString(\"java.io.InputStream__Bytes\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenInnerClassGeneratesName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassNameWithClassWhenInnerClassGeneratesName() {\r\n    ClassName innerBean = ClassName.get(\"com.example\", \"Test\", \"InnerBean\");\r\n    ClassName generated = this.generator.generateClassName(\"EventListener\", innerBean);\r\n    assertThat(generated).hasToString(\"com.example.Test_InnerBean__EventListener\");\r\n}",
    "tailType": "method_code"
  }
]