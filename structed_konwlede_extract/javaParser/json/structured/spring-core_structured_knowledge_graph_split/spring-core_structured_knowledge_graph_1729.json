[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectFromClassWithSubSubNonInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubNonInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithSubSubNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectFromClassWithSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperClassForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(MergedAnnotations.from(NonAnnotatedInterface.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isNull();\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationInterface.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationInterface.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isNull();\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationClass.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationClass.class, SearchStrategy.SUPERCLASS).get(Transactional.class).getSource()).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but we should still find it on classes.\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationInterface.class, SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationInterface.class, SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isNull();\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationClass.class, SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationClass.class, SearchStrategy.SUPERCLASS).get(Order.class).getSource()).isEqualTo(NonInheritedAnnotationClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassForAllScenarios()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithSingleCandidateType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperClassSourceForTypesWithSingleCandidateType() {\r\n    // no class-level annotation\r\n    List<Class<? extends Annotation>> transactionalCandidateList = Collections.singletonList(Transactional.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(NonAnnotatedInterface.class, transactionalCandidateList)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(NonAnnotatedClass.class, transactionalCandidateList)).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(getSuperClassSourceWithTypeIn(InheritedAnnotationInterface.class, transactionalCandidateList)).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubInheritedAnnotationInterface.class, transactionalCandidateList)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(InheritedAnnotationClass.class, transactionalCandidateList)).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubInheritedAnnotationClass.class, transactionalCandidateList)).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but should still find it on classes.\r\n    List<Class<? extends Annotation>> orderCandidateList = Collections.singletonList(Order.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(NonInheritedAnnotationInterface.class, orderCandidateList)).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubNonInheritedAnnotationInterface.class, orderCandidateList)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(NonInheritedAnnotationClass.class, orderCandidateList)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubNonInheritedAnnotationClass.class, orderCandidateList)).isEqualTo(NonInheritedAnnotationClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithSingleCandidateType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithSingleCandidateType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithMultipleCandidateTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getSuperClassSourceForTypesWithMultipleCandidateTypes() {\r\n    List<Class<? extends Annotation>> candidates = List.of(Transactional.class, Order.class);\r\n    // no class-level annotation\r\n    assertThat(getSuperClassSourceWithTypeIn(NonAnnotatedInterface.class, candidates)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(NonAnnotatedClass.class, candidates)).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(getSuperClassSourceWithTypeIn(InheritedAnnotationInterface.class, candidates)).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubInheritedAnnotationInterface.class, candidates)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(InheritedAnnotationClass.class, candidates)).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubInheritedAnnotationClass.class, candidates)).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but findAnnotationDeclaringClassForTypes() should still find it on\r\n    // classes.\r\n    assertThat(getSuperClassSourceWithTypeIn(NonInheritedAnnotationInterface.class, candidates)).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubNonInheritedAnnotationInterface.class, candidates)).isNull();\r\n    assertThat(getSuperClassSourceWithTypeIn(NonInheritedAnnotationClass.class, candidates)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubNonInheritedAnnotationClass.class, candidates)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    // class hierarchy mixed with @Transactional and @Order declarations\r\n    assertThat(getSuperClassSourceWithTypeIn(TransactionalClass.class, candidates)).isEqualTo(TransactionalClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(TransactionalAndOrderedClass.class, candidates)).isEqualTo(TransactionalAndOrderedClass.class);\r\n    assertThat(getSuperClassSourceWithTypeIn(SubTransactionalAndOrderedClass.class, candidates)).isEqualTo(TransactionalAndOrderedClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithMultipleCandidateTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceForTypesWithMultipleCandidateTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceWithTypeIn(Class<?>,List<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object getSuperClassSourceWithTypeIn(Class<?> clazz, List<Class<? extends Annotation>> annotationTypes) {\r\n    return MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS).stream().filter(MergedAnnotationPredicates.typeIn(annotationTypes).and(MergedAnnotation::isDirectlyPresent)).map(MergedAnnotation::getSource).findFirst().orElse(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getSuperClassSourceWithTypeIn(Class<?>,List<Class<? extends Annotation>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isDirectlyPresentForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isDirectlyPresentForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(MergedAnnotations.from(NonAnnotatedInterface.class).get(Transactional.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(NonAnnotatedInterface.class).isDirectlyPresent(Transactional.class)).isFalse();\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class).get(Transactional.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class).isDirectlyPresent(Transactional.class)).isFalse();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationInterface.class).get(Transactional.class).isDirectlyPresent()).isTrue();\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationInterface.class).isDirectlyPresent(Transactional.class)).isTrue();\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationInterface.class).get(Transactional.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationInterface.class).isDirectlyPresent(Transactional.class)).isFalse();\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationClass.class).get(Transactional.class).isDirectlyPresent()).isTrue();\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationClass.class).isDirectlyPresent(Transactional.class)).isTrue();\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationClass.class).get(Transactional.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationClass.class).isDirectlyPresent(Transactional.class)).isFalse();\r\n    // non-inherited class-level annotation; note: @Order is not inherited\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationInterface.class).get(Order.class).isDirectlyPresent()).isTrue();\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationInterface.class).isDirectlyPresent(Order.class)).isTrue();\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationInterface.class).get(Order.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationInterface.class).isDirectlyPresent(Order.class)).isFalse();\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationClass.class).get(Order.class).isDirectlyPresent()).isTrue();\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationClass.class).isDirectlyPresent(Order.class)).isTrue();\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationClass.class).get(Order.class).isDirectlyPresent()).isFalse();\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationClass.class).isDirectlyPresent(Order.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isDirectlyPresentForAllScenarios()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isDirectlyPresentForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getAggregateIndexForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAggregateIndexForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(MergedAnnotations.from(NonAnnotatedInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(-1);\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(0);\r\n    // Since we're not traversing interface hierarchies the following,\r\n    // though perhaps counterintuitive, must be false:\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(InheritedAnnotationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(SubInheritedAnnotationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Transactional.class).getAggregateIndex()).isEqualTo(1);\r\n    // non-inherited class-level annotation; note: @Order is not inherited\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Order.class).getAggregateIndex()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationInterface.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Order.class).getAggregateIndex()).isEqualTo(-1);\r\n    assertThat(MergedAnnotations.from(NonInheritedAnnotationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Order.class).getAggregateIndex()).isEqualTo(0);\r\n    assertThat(MergedAnnotations.from(SubNonInheritedAnnotationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(Order.class).getAggregateIndex()).isEqualTo(-1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getAggregateIndexForAllScenarios()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getAggregateIndexForAllScenarios()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]