[
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.AbstractSingleValueEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.MimeType;\n\n/**\n * Abstract base class for {@link org.springframework.core.codec.Encoder}\n * classes that can only deal with a single value.\n *\n * @author Arjen Poutsma\n * @since 5.0\n * @param <T> the element type\n */\npublic abstract class AbstractSingleValueEncoder<T> extends AbstractEncoder<T> {\n\n\n\tpublic AbstractSingleValueEncoder(MimeType... supportedMimeTypes) {\n\t\tsuper(supportedMimeTypes);\n\t}\n\n\n\t@Override\n\tpublic final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,\n\t\t\tResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(inputStream)\n\t\t\t\t.take(1)\n\t\t\t\t.concatMap(value -> encode(value, bufferFactory, elementType, mimeType, hints))\n\t\t\t\t.doOnDiscard(DataBuffer.class, DataBufferUtils::release);\n\t}\n\n\t/**\n\t * Encode {@code T} to an output {@link DataBuffer} stream.\n\t * @param t the value to process\n\t * @param dataBufferFactory a buffer factory used to create the output\n\t * @param type the stream element type to process\n\t * @param mimeType the mime type to process\n\t * @param hints additional information about how to do decode, optional\n\t * @return the output stream\n\t */\n\tprotected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory,\n\t\t\tResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder#encode(Publisher<? extends T>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(inputStream).take(1).concatMap(value -> encode(value, bufferFactory, elementType, mimeType, hints)).doOnDiscard(DataBuffer.class, DataBufferUtils::release);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractSingleValueEncoder#encode(Publisher<? extends T>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder#encode(Publisher<? extends T>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder#encode(T,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Encode {@code T} to an output {@link DataBuffer} stream.\r\n * @param t the value to process\r\n * @param dataBufferFactory a buffer factory used to create the output\r\n * @param type the stream element type to process\r\n * @param mimeType the mime type to process\r\n * @param hints additional information about how to do decode, optional\r\n * @return the output stream\r\n */\r\nprotected abstract Flux<DataBuffer> encode(T t, DataBufferFactory dataBufferFactory, ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.AbstractSingleValueEncoder#encode(T,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.AbstractSingleValueEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ByteArrayDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decoder for {@code byte} arrays.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @since 5.0\n */\npublic class ByteArrayDecoder extends AbstractDataBufferDecoder<byte[]> {\n\n\tpublic ByteArrayDecoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));\n\t}\n\n\t@Override\n\tpublic byte[] decode(DataBuffer dataBuffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tbyte[] result = new byte[dataBuffer.readableByteCount()];\n\t\tdataBuffer.read(result);\n\t\tDataBufferUtils.release(dataBuffer);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(Hints.getLogPrefix(hints) + \"Read \" + result.length + \" bytes\");\n\t\t}\n\t\treturn result;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte[] decode(DataBuffer dataBuffer, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    byte[] result = new byte[dataBuffer.readableByteCount()];\r\n    dataBuffer.read(result);\r\n    DataBufferUtils.release(dataBuffer);\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(Hints.getLogPrefix(hints) + \"Read \" + result.length + \" bytes\");\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteArrayDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteArrayDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ByteArrayEncoder",
    "tailType": "class"
  }
]