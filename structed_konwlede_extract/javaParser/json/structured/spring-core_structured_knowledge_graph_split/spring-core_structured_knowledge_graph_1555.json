[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#shouldFailForUnknownClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicFieldAccessMatchesFieldHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withField(\"publicField\"));\r\n    assertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesFieldHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicFieldAccessMatchesPublicFieldsHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.PUBLIC_FIELDS);\r\n    assertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesPublicFieldsHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesAccessPublicFieldsHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid publicFieldAccessMatchesAccessPublicFieldsHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.ACCESS_PUBLIC_FIELDS);\r\n    assertPredicateMatches(reflection.onField(SampleClass.class, \"publicField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesAccessPublicFieldsHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#publicFieldAccessMatchesAccessPublicFieldsHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fieldAccessDoesNotMatchTypeHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class);\r\n    assertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"publicField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#fieldAccessDoesNotMatchTypeHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateFieldAccessDoesNotMatchTypeHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class);\r\n    assertPredicateDoesNotMatch(reflection.onField(SampleClass.class, \"privateField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessDoesNotMatchTypeHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid privateFieldAccessMatchesFieldHint() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, typeHint -> typeHint.withField(\"privateField\"));\r\n    assertPredicateMatches(reflection.onField(SampleClass.class, \"privateField\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnField#privateFieldAccessMatchesFieldHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]