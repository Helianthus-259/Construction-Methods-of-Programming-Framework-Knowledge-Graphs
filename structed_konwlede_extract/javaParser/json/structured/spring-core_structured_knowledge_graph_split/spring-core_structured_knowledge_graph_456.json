[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.codec;\n\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport io.netty5.buffer.Buffer;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport reactor.test.StepVerifier;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.codec.Decoder;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.io.buffer.AbstractLeakCheckingTests;\nimport org.springframework.util.Assert;\nimport org.springframework.util.MimeType;\n\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Abstract base class for {@link Decoder} unit tests. Subclasses need to implement\n * {@link #canDecode()}, {@link #decode()} and {@link #decodeToMono()}, possibly using the wide\n * variety of helper methods like {@link #testDecodeAll} or {@link #testDecodeToMonoAll}.\n *\n * @author Arjen Poutsma\n * @since 5.1.3\n */\npublic abstract class AbstractDecoderTests<D extends Decoder<?>> extends AbstractLeakCheckingTests {\n\n\t/**\n\t * The decoder to test.\n\t */\n\tprotected D decoder;\n\n\t/**\n\t * Construct a new {@code AbstractDecoderTests} instance for the given decoder.\n\t * @param decoder the decoder\n\t */\n\tprotected AbstractDecoderTests(D decoder) {\n\t\tAssert.notNull(decoder, \"Encoder must not be null\");\n\n\t\tthis.decoder = decoder;\n\t}\n\n\n\t/**\n\t * Subclasses should implement this method to test {@link Decoder#canDecode}.\n\t */\n\t@Test\n\tprotected abstract void canDecode() throws Exception;\n\n\t/**\n\t * Subclasses should implement this method to test {@link Decoder#decode}, possibly using\n\t * {@link #testDecodeAll} or other helper methods.\n\t */\n\t@Test\n\tprotected abstract void decode() throws Exception;\n\n\t/**\n\t * Subclasses should implement this method to test {@link Decoder#decodeToMono}, possibly using\n\t * {@link #testDecodeToMonoAll}.\n\t */\n\t@Test\n\tprotected abstract void decodeToMono() throws Exception;\n\n\t// Flux\n\n\t/**\n\t * Helper method that tests for a variety of {@link Flux} decoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testDecode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputClass the desired output class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecodeAll(Publisher<DataBuffer> input, Class<? extends T> outputClass,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer) {\n\n\t\ttestDecodeAll(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\n\t}\n\n\t/**\n\t * Helper method that tests for a variety of {@link Flux} decoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testDecode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecodeAll(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\ttestDecode(input, outputType, stepConsumer, mimeType, hints);\n\t\ttestDecodeError(input, outputType, mimeType, hints);\n\t\ttestDecodeCancel(input, outputType, mimeType, hints);\n\t\ttestDecodeEmpty(outputType, mimeType, hints);\n\t}\n\n\t/**\n\t * Test a standard {@link Decoder#decode decode} scenario. For example:\n\t * <pre class=\"code\">\n\t * byte[] bytes1 = ...\n\t * byte[] bytes2 = ...\n\t *\n\t * Flux&lt;DataBuffer&gt; input = Flux.concat(\n\t *   dataBuffer(bytes1),\n\t *   dataBuffer(bytes2));\n\t *\n\t * testDecodeAll(input, byte[].class, step -&gt; step\n\t *   .consumeNextWith(expectBytes(bytes1))\n\t *   .consumeNextWith(expectBytes(bytes2))\n\t * \t .verifyComplete());\n\t * </pre>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputClass the desired output class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecode(Publisher<DataBuffer> input, Class<? extends T> outputClass,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer) {\n\n\t\ttestDecode(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\n\t}\n\n\t/**\n\t * Test a standard {@link Decoder#decode decode} scenario. For example:\n\t * <pre class=\"code\">\n\t * byte[] bytes1 = ...\n\t * byte[] bytes2 = ...\n\t *\n\t * Flux&lt;DataBuffer&gt; input = Flux.concat(\n\t *   dataBuffer(bytes1),\n\t *   dataBuffer(bytes2));\n\t *\n\t * testDecodeAll(input, byte[].class, step -&gt; step\n\t *   .consumeNextWith(expectBytes(bytes1))\n\t *   .consumeNextWith(expectBytes(bytes2))\n\t * \t .verifyComplete());\n\t * </pre>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param <T> the output type\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> void testDecode(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tFlux<T> result = (Flux<T>) this.decoder.decode(input, outputType, mimeType, hints);\n\t\tStepVerifier.FirstStep<T> step = StepVerifier.create(result);\n\t\tstepConsumer.accept(step);\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decode decode} scenario where the input stream contains an error.\n\t * This test method will feed the first element of the {@code input} stream to the decoder,\n\t * followed by an {@link InputException}.\n\t * The result is expected to contain one \"normal\" element, followed by the error.\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @see InputException\n\t */\n\tprotected void testDecodeError(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tFlux<DataBuffer> flux = Mono.from(input).concatWith(Flux.error(new InputException()));\n\t\tassertThatExceptionOfType(InputException.class).isThrownBy(() ->\n\t\t\t\tthis.decoder.decode(flux, outputType, mimeType, hints)\n\t\t\t\t\t\t.doOnNext(object -> {\n\t\t\t\t\t\t\tif (object instanceof Buffer buffer) {\n\t\t\t\t\t\t\t\tbuffer.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.blockLast(Duration.ofSeconds(5)));\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decode decode} scenario where the input stream is canceled.\n\t * This test method will feed the first element of the {@code input} stream to the decoder,\n\t * followed by a cancel signal.\n\t * The result is expected to contain one \"normal\" element.\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testDecodeCancel(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tFlux<?> result = this.decoder.decode(input, outputType, mimeType, hints)\n\t\t\t\t.doOnNext(object -> {\n\t\t\t\t\tif (object instanceof Buffer buffer) {\n\t\t\t\t\t\tbuffer.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tStepVerifier.create(result).expectNextCount(1).thenCancel().verify();\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decode decode} scenario where the input stream is empty.\n\t * The output is expected to be empty as well.\n\t *\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testDecodeEmpty(ResolvableType outputType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\tFlux<DataBuffer> input = Flux.empty();\n\t\tFlux<?> result = this.decoder.decode(input, outputType, mimeType, hints);\n\t\tStepVerifier.create(result).verifyComplete();\n\t}\n\n\t// Mono\n\n\t/**\n\t * Helper method that tests for a variety of {@link Mono} decoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testDecodeToMono(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputClass the desired output class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecodeToMonoAll(Publisher<DataBuffer> input,\n\t\t\tClass<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\n\n\t\ttestDecodeToMonoAll(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\n\t}\n\n\t/**\n\t * Helper method that tests for a variety of {@link Mono} decoding scenarios. This method\n\t * invokes:\n\t * <ul>\n\t *     <li>{@link #testDecodeToMono(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoError(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoCancel(Publisher, ResolvableType, MimeType, Map)}</li>\n\t *     <li>{@link #testDecodeToMonoEmpty(ResolvableType, MimeType, Map)}</li>\n\t * </ul>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecodeToMonoAll(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\ttestDecodeToMono(input, outputType, stepConsumer, mimeType, hints);\n\t\ttestDecodeToMonoError(input, outputType, mimeType, hints);\n\t\ttestDecodeToMonoCancel(input, outputType, mimeType, hints);\n\t\ttestDecodeToMonoEmpty(outputType, mimeType, hints);\n\t}\n\n\t/**\n\t * Test a standard {@link Decoder#decodeToMono decode} scenario. For example:\n\t * <pre class=\"code\">\n\t * byte[] bytes1 = ...\n\t * byte[] bytes2 = ...\n\t * byte[] allBytes = ... // bytes1 + bytes2\n\t *\n\t * Flux&lt;DataBuffer&gt; input = Flux.concat(\n\t *   dataBuffer(bytes1),\n\t *   dataBuffer(bytes2));\n\t *\n\t * testDecodeAll(input, byte[].class, step -&gt; step\n\t *   .consumeNextWith(expectBytes(allBytes))\n\t * \t .verifyComplete());\n\t * </pre>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputClass the desired output class\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param <T> the output type\n\t */\n\tprotected <T> void testDecodeToMono(Publisher<DataBuffer> input,\n\t\t\tClass<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\n\n\t\ttestDecodeToMono(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\n\t}\n\n\t/**\n\t * Test a standard {@link Decoder#decodeToMono decode} scenario. For example:\n\t * <pre class=\"code\">\n\t * byte[] bytes1 = ...\n\t * byte[] bytes2 = ...\n\t * byte[] allBytes = ... // bytes1 + bytes2\n\t *\n\t * Flux&lt;DataBuffer&gt; input = Flux.concat(\n\t *   dataBuffer(bytes1),\n\t *   dataBuffer(bytes2));\n\t *\n\t * testDecodeAll(input, byte[].class, step -&gt; step\n\t *   .consumeNextWith(expectBytes(allBytes))\n\t * \t .verifyComplete());\n\t * </pre>\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @param <T> the output type\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> void testDecodeToMono(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\tConsumer<StepVerifier.FirstStep<T>> stepConsumer,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tMono<T> result = (Mono<T>) this.decoder.decodeToMono(input, outputType, mimeType, hints);\n\t\tStepVerifier.FirstStep<T> step = StepVerifier.create(result);\n\t\tstepConsumer.accept(step);\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decodeToMono decode} scenario where the input stream contains an error.\n\t * This test method will feed the first element of the {@code input} stream to the decoder,\n\t * followed by an {@link InputException}.\n\t * The result is expected to contain the error.\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t * @see InputException\n\t */\n\tprotected void testDecodeToMonoError(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tinput = Mono.from(input).concatWith(Flux.error(new InputException()));\n\t\tMono<?> result = this.decoder.decodeToMono(input, outputType, mimeType, hints);\n\t\tStepVerifier.create(result).expectError(InputException.class).verify();\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decodeToMono decode} scenario where the input stream is canceled.\n\t * This test method will immediately cancel the output stream.\n\t *\n\t * @param input the input to be provided to the decoder\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testDecodeToMonoCancel(Publisher<DataBuffer> input, ResolvableType outputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tMono<?> result = this.decoder.decodeToMono(input, outputType, mimeType, hints);\n\t\tStepVerifier.create(result).thenCancel().verify();\n\t}\n\n\t/**\n\t * Test a {@link Decoder#decodeToMono decode} scenario where the input stream is empty.\n\t * The output is expected to be empty as well.\n\t *\n\t * @param outputType the desired output type\n\t * @param mimeType the mime type to use for decoding. May be {@code null}.\n\t * @param hints the hints used for decoding. May be {@code null}.\n\t */\n\tprotected void testDecodeToMonoEmpty(ResolvableType outputType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\tMono<?> result = this.decoder.decodeToMono(Flux.empty(), outputType, mimeType, hints);\n\t\tStepVerifier.create(result).verifyComplete();\n\t}\n\n\t/**\n\t * Creates a deferred {@link DataBuffer} containing the given bytes.\n\t * @param bytes the bytes that are to be stored in the buffer\n\t * @return the deferred buffer\n\t */\n\tprotected Mono<DataBuffer> dataBuffer(byte[] bytes) {\n\t\treturn Mono.fromCallable(() -> {\n\t\t\tDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(bytes.length);\n\t\t\tdataBuffer.write(bytes);\n\t\t\treturn dataBuffer;\n\t\t});\n\t}\n\n\t/**\n\t * Exception used in {@link #testDecodeError} and {@link #testDecodeToMonoError}\n\t */\n\t@SuppressWarnings(\"serial\")\n\tpublic static class InputException extends RuntimeException {}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decoder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decoder",
    "headType": "field",
    "relation": "haveType",
    "tail": "D",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#canDecode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Subclasses should implement this method to test {@link Decoder#canDecode}.\r\n */\r\n@Test\r\nprotected abstract void canDecode() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#canDecode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#canDecode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Subclasses should implement this method to test {@link Decoder#decode}, possibly using\r\n * {@link #testDecodeAll} or other helper methods.\r\n */\r\n@Test\r\nprotected abstract void decode() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Subclasses should implement this method to test {@link Decoder#decodeToMono}, possibly using\r\n * {@link #testDecodeToMonoAll}.\r\n */\r\n@Test\r\nprotected abstract void decodeToMono() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decodeToMono()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeAll(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Flux\r\n/**\r\n * Helper method that tests for a variety of {@link Flux} decoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testDecode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputClass the desired output class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecodeAll(Publisher<DataBuffer> input, Class<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\r\n    testDecodeAll(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeAll(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeAll(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method that tests for a variety of {@link Flux} decoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testDecode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testDecodeEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputType the desired output type\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecodeAll(Publisher<DataBuffer> input, ResolvableType outputType, Consumer<StepVerifier.FirstStep<T>> stepConsumer, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    testDecode(input, outputType, stepConsumer, mimeType, hints);\r\n    testDecodeError(input, outputType, mimeType, hints);\r\n    testDecodeCancel(input, outputType, mimeType, hints);\r\n    testDecodeEmpty(outputType, mimeType, hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecodeAll(Publisher<DataBuffer>,ResolvableType,Consumer<StepVerifier.FirstStep<T>>,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecode(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Decoder#decode decode} scenario. For example:\r\n * <pre class=\"code\">\r\n * byte[] bytes1 = ...\r\n * byte[] bytes2 = ...\r\n *\r\n * Flux&lt;DataBuffer&gt; input = Flux.concat(\r\n *   dataBuffer(bytes1),\r\n *   dataBuffer(bytes2));\r\n *\r\n * testDecodeAll(input, byte[].class, step -&gt; step\r\n *   .consumeNextWith(expectBytes(bytes1))\r\n *   .consumeNextWith(expectBytes(bytes2))\r\n * \t .verifyComplete());\r\n * </pre>\r\n *\r\n * @param input the input to be provided to the decoder\r\n * @param outputClass the desired output class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testDecode(Publisher<DataBuffer> input, Class<? extends T> outputClass, Consumer<StepVerifier.FirstStep<T>> stepConsumer) {\r\n    testDecode(input, ResolvableType.forClass(outputClass), stepConsumer, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractDecoderTests#testDecode(Publisher<DataBuffer>,Class<? extends T>,Consumer<StepVerifier.FirstStep<T>>)",
    "tailType": "method"
  }
]