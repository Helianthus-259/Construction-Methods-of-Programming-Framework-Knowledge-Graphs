[
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix() {\r\n    pathMatcher.setCachePatterns(true);\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n    pathMatcher.match(\"test?\", \"test\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(1);\r\n    pathMatcher.match(\"test?\", \"best\");\r\n    pathMatcher.match(\"test/*\", \"view/test.jpg\");\r\n    pathMatcher.match(\"test/**/test.jpg\", \"view/test.jpg\");\r\n    pathMatcher.match(\"test/{name}.jpg\", \"view/test.jpg\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#preventCreatingStringMatchersIfPathDoesNotStartsWithPatternPrefix()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch() {\r\n    pathMatcher.setCachePatterns(true);\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n    pathMatcher.match(\"test\", \"testian\");\r\n    pathMatcher.match(\"test?\", \"testFf\");\r\n    pathMatcher.match(\"test/*\", \"test/dir/name.jpg\");\r\n    pathMatcher.match(\"test/{name}.jpg\", \"test/lorem.jpg\");\r\n    pathMatcher.match(\"bla/**/test.jpg\", \"bla/test.jpg\");\r\n    pathMatcher.match(\"**/{name}.jpg\", \"test/lorem.jpg\");\r\n    pathMatcher.match(\"/**/{name}.jpg\", \"/test/lorem.jpg\");\r\n    pathMatcher.match(\"/*/dir/{name}.jpg\", \"/*/dir/lorem.jpg\");\r\n    assertThat(pathMatcher.stringMatcherCache).hasSize(7);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#creatingStringMatchersIfPatternPrefixCannotDetermineIfPathMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid cachePatternsSetToFalse() {\r\n    pathMatcher.setCachePatterns(false);\r\n    match();\r\n    assertThat(pathMatcher.stringMatcherCache).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#cachePatternsSetToFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extensionMappingWithDotPathSeparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extensionMappingWithDotPathSeparator() {\r\n    pathMatcher.setPathSeparator(\".\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"hotel.*\")).as(\"Extension mapping should be disabled with \\\".\\\" as path separator\").isEqualTo(\"/*.html.hotel.*\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extensionMappingWithDotPathSeparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extensionMappingWithDotPathSeparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#isPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22959\r\n@Test\r\nvoid isPattern() {\r\n    assertThat(pathMatcher.isPattern(\"/test/*\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/**/name\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test?\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/{name}\")).isTrue();\r\n    assertThat(pathMatcher.isPattern(\"/test/name\")).isFalse();\r\n    assertThat(pathMatcher.isPattern(\"/test/foo{bar\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#isPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#isPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#isPatternWithNullPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23297\r\n@Test\r\nvoid isPatternWithNullPath() {\r\n    assertThat(pathMatcher.isPattern(null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#isPatternWithNullPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#isPatternWithNullPath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]