[
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#split()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#split()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#splitWithEmptyStringOrNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid splitWithEmptyStringOrNull() {\r\n    assertThat(StringUtils.split(\"Hello, world\", \"\")).isNull();\r\n    assertThat(StringUtils.split(\"\", \",\")).isNull();\r\n    assertThat(StringUtils.split(null, \",\")).isNull();\r\n    assertThat(StringUtils.split(\"Hello, world\", null)).isNull();\r\n    assertThat(StringUtils.split(null, null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#splitWithEmptyStringOrNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#splitWithEmptyStringOrNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionToDelimitedStringWithNullValuesShouldNotFail() {\r\n    assertThat(StringUtils.collectionToCommaDelimitedString(Collections.singletonList(null))).isEqualTo(\"null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#collectionToDelimitedStringWithNullValuesShouldNotFail()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid truncatePreconditions() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", 0)).withMessage(\"Truncation threshold must be a positive number: 0\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> StringUtils.truncate(\"foo\", -99)).withMessage(\"Truncation threshold must be a positive number: -99\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#truncatePreconditions()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#truncate(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@CsvSource(delimiterString = \"-->\", textBlock = \"\"\"\r\n    ''                  --> ''\r\n    aardvark            --> aardvark\r\n    aardvark12          --> aardvark12\r\n    aardvark123         --> aardvark12 (truncated)...\r\n    aardvark, bird, cat --> aardvark,  (truncated)...\r\n    \"\"\")\r\nvoid truncate(String text, String truncated) {\r\n    assertThat(StringUtils.truncate(text, 10)).isEqualTo(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#truncate(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#truncate(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#truncate(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@CsvSource",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.ClassVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * A visitor to visit a Java class. The methods of this class must be called in the following order:\n * {@code visit} [ {@code visitSource} ] [ {@code visitModule} ][ {@code visitNestHost} ][ {@code\n * visitOuterClass} ] ( {@code visitAnnotation} | {@code visitTypeAnnotation} | {@code\n * visitAttribute} )* ( {@code visitNestMember} | [ {@code * visitPermittedSubclass} ] | {@code\n * visitInnerClass} | {@code visitRecordComponent} | {@code visitField} | {@code visitMethod} )*\n * {@code visitEnd}.\n *\n * @author Eric Bruneton\n */\npublic abstract class ClassVisitor {\n\n  /**\n   * The ASM API version implemented by this visitor. The value of this field must be one of the\n   * {@code ASM}<i>x</i> values in {@link Opcodes}.\n   */\n  protected final int api;\n\n  /** The class visitor to which this visitor must delegate method calls. May be {@literal null}. */\n  protected ClassVisitor cv;\n\n  /**\n   * Constructs a new {@link ClassVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n   *     ASM}<i>x</i> values in {@link Opcodes}.\n   */\n  protected ClassVisitor(final int api) {\n    this(api, null);\n  }\n\n  /**\n   * Constructs a new {@link ClassVisitor}.\n   *\n   * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n   *     ASM}<i>x</i> values in {@link Opcodes}.\n   * @param classVisitor the class visitor to which this visitor must delegate method calls. May be\n   *     null.\n   */\n  protected ClassVisitor(final int api, final ClassVisitor classVisitor) {\n    if (api != Opcodes.ASM9\n        && api != Opcodes.ASM8\n        && api != Opcodes.ASM7\n        && api != Opcodes.ASM6\n        && api != Opcodes.ASM5\n        && api != Opcodes.ASM4\n        && api != Opcodes.ASM10_EXPERIMENTAL) {\n      throw new IllegalArgumentException(\"Unsupported api \" + api);\n    }\n    // SPRING PATCH: no preview mode check for ASM experimental\n    this.api = api;\n    this.cv = classVisitor;\n  }\n\n  /**\n   * The class visitor to which this visitor must delegate method calls. May be {@literal null}.\n   *\n   * @return the class visitor to which this visitor must delegate method calls, or {@literal null}.\n   */\n  public ClassVisitor getDelegate() {\n    return cv;\n  }\n\n  /**\n   * Visits the header of the class.\n   *\n   * @param version the class version. The minor version is stored in the 16 most significant bits,\n   *     and the major version in the 16 least significant bits.\n   * @param access the class's access flags (see {@link Opcodes}). This parameter also indicates if\n   *     the class is deprecated {@link Opcodes#ACC_DEPRECATED} or a record {@link\n   *     Opcodes#ACC_RECORD}.\n   * @param name the internal name of the class (see {@link Type#getInternalName()}).\n   * @param signature the signature of this class. May be {@literal null} if the class is not a\n   *     generic one, and does not extend or implement generic classes or interfaces.\n   * @param superName the internal of name of the super class (see {@link Type#getInternalName()}).\n   *     For interfaces, the super class is {@link Object}. May be {@literal null}, but only for the\n   *     {@link Object} class.\n   * @param interfaces the internal names of the class's interfaces (see {@link\n   *     Type#getInternalName()}). May be {@literal null}.\n   */\n  public void visit(\n      final int version,\n      final int access,\n      final String name,\n      final String signature,\n      final String superName,\n      final String[] interfaces) {\n    if (api < Opcodes.ASM8 && (access & Opcodes.ACC_RECORD) != 0) {\n      throw new UnsupportedOperationException(\"Records requires ASM8\");\n    }\n    if (cv != null) {\n      cv.visit(version, access, name, signature, superName, interfaces);\n    }\n  }\n\n  /**\n   * Visits the source of the class.\n   *\n   * @param source the name of the source file from which the class was compiled. May be {@literal\n   *     null}.\n   * @param debug additional debug information to compute the correspondence between source and\n   *     compiled elements of the class. May be {@literal null}.\n   */\n  public void visitSource(final String source, final String debug) {\n    if (cv != null) {\n      cv.visitSource(source, debug);\n    }\n  }\n\n  /**\n   * Visit the module corresponding to the class.\n   *\n   * @param name the fully qualified name (using dots) of the module.\n   * @param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\n   *     ACC_MANDATED}.\n   * @param version the module version, or {@literal null}.\n   * @return a visitor to visit the module values, or {@literal null} if this visitor is not\n   *     interested in visiting this module.\n   */\n  public ModuleVisitor visitModule(final String name, final int access, final String version) {\n    if (api < Opcodes.ASM6) {\n      throw new UnsupportedOperationException(\"Module requires ASM6\");\n    }\n    if (cv != null) {\n      return cv.visitModule(name, access, version);\n    }\n    return null;\n  }\n\n  /**\n   * Visits the nest host class of the class. A nest is a set of classes of the same package that\n   * share access to their private members. One of these classes, called the host, lists the other\n   * members of the nest, which in turn should link to the host of their nest. This method must be\n   * called only once and only if the visited class is a non-host member of a nest. A class is\n   * implicitly its own nest, so it's invalid to call this method with the visited class name as\n   * argument.\n   *\n   * @param nestHost the internal name of the host class of the nest (see {@link\n   *     Type#getInternalName()}).\n   */\n  public void visitNestHost(final String nestHost) {\n    if (api < Opcodes.ASM7) {\n      throw new UnsupportedOperationException(\"NestHost requires ASM7\");\n    }\n    if (cv != null) {\n      cv.visitNestHost(nestHost);\n    }\n  }\n\n  /**\n   * Visits the enclosing class of the class. This method must be called only if this class is a\n   * local or anonymous class. See the JVMS 4.7.7 section for more details.\n   *\n   * @param owner internal name of the enclosing class of the class (see {@link\n   *     Type#getInternalName()}).\n   * @param name the name of the method that contains the class, or {@literal null} if the class is\n   *     not enclosed in a method or constructor of its enclosing class (for example, if it is enclosed in\n   *     an instance initializer, static initializer, instance variable initializer, or class\n   *     variable initializer).\n   * @param descriptor the descriptor of the method that contains the class, or {@literal null} if\n   *     the class is not enclosed in a method or constructor of its enclosing class (for example, if it is\n   *     enclosed in an instance initializer, static initializer, instance variable initializer, or\n   *     class variable initializer).\n   */\n  public void visitOuterClass(final String owner, final String name, final String descriptor) {\n    if (cv != null) {\n      cv.visitOuterClass(owner, name, descriptor);\n    }\n  }\n\n  /**\n   * Visits an annotation of the class.\n   *\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n    if (cv != null) {\n      return cv.visitAnnotation(descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits an annotation on a type in the class signature.\n   *\n   * @param typeRef a reference to the annotated type. The sort of this type reference must be\n   *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\n   *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\n   *     {@link TypeReference}.\n   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\n   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\n   *     'typeRef' as a whole.\n   * @param descriptor the class descriptor of the annotation class.\n   * @param visible {@literal true} if the annotation is visible at runtime.\n   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\n   *     interested in visiting this annotation.\n   */\n  public AnnotationVisitor visitTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    if (api < Opcodes.ASM5) {\n      throw new UnsupportedOperationException(\"TypeAnnotation requires ASM5\");\n    }\n    if (cv != null) {\n      return cv.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\n    }\n    return null;\n  }\n\n  /**\n   * Visits a non standard attribute of the class.\n   *\n   * @param attribute an attribute.\n   */\n  public void visitAttribute(final Attribute attribute) {\n    if (cv != null) {\n      cv.visitAttribute(attribute);\n    }\n  }\n\n  /**\n   * Visits a member of the nest. A nest is a set of classes of the same package that share access\n   * to their private members. One of these classes, called the host, lists the other members of the\n   * nest, which in turn should link to the host of their nest. This method must be called only if\n   * the visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\n   * it's invalid to call this method with the visited class name as argument.\n   *\n   * @param nestMember the internal name of a nest member (see {@link Type#getInternalName()}).\n   */\n  public void visitNestMember(final String nestMember) {\n    if (api < Opcodes.ASM7) {\n      throw new UnsupportedOperationException(\"NestMember requires ASM7\");\n    }\n    if (cv != null) {\n      cv.visitNestMember(nestMember);\n    }\n  }\n\n  /**\n   * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\n   * current class.\n   *\n   * @param permittedSubclass the internal name of a permitted subclass (see {@link\n   *     Type#getInternalName()}).\n   */\n  public void visitPermittedSubclass(final String permittedSubclass) {\n    if (api < Opcodes.ASM9) {\n      throw new UnsupportedOperationException(\"PermittedSubclasses requires ASM9\");\n    }\n    if (cv != null) {\n      cv.visitPermittedSubclass(permittedSubclass);\n    }\n  }\n\n  /**\n   * Visits information about an inner class. This inner class is not necessarily a member of the\n   * class being visited. More precisely, every class or interface C which is referenced by this\n   * class and which is not a package member must be visited with this method. This class must\n   * reference its nested class or interface members, and its enclosing class, if any. See the JVMS\n   * 4.7.6 section for more details.\n   *\n   * @param name the internal name of C (see {@link Type#getInternalName()}).\n   * @param outerName the internal name of the class or interface C is a member of (see {@link\n   *     Type#getInternalName()}). Must be {@literal null} if C is not the member of a class or\n   *     interface (for example, for local or anonymous classes).\n   * @param innerName the (simple) name of C. Must be {@literal null} for anonymous inner classes.\n   * @param access the access flags of C originally declared in the source code from which this\n   *     class was compiled.\n   */\n  public void visitInnerClass(\n      final String name, final String outerName, final String innerName, final int access) {\n    if (cv != null) {\n      cv.visitInnerClass(name, outerName, innerName, access);\n    }\n  }\n\n  /**\n   * Visits a record component of the class.\n   *\n   * @param name the record component name.\n   * @param descriptor the record component descriptor (see {@link Type}).\n   * @param signature the record component signature. May be {@literal null} if the record component\n   *     type does not use generic types.\n   * @return a visitor to visit this record component annotations and attributes, or {@literal null}\n   *     if this class visitor is not interested in visiting these annotations and attributes.\n   */\n  public RecordComponentVisitor visitRecordComponent(\n      final String name, final String descriptor, final String signature) {\n    if (api < Opcodes.ASM8) {\n      throw new UnsupportedOperationException(\"Record requires ASM8\");\n    }\n    if (cv != null) {\n      return cv.visitRecordComponent(name, descriptor, signature);\n    }\n    return null;\n  }\n\n  /**\n   * Visits a field of the class.\n   *\n   * @param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\n   *     the field is synthetic and/or deprecated.\n   * @param name the field's name.\n   * @param descriptor the field's descriptor (see {@link Type}).\n   * @param signature the field's signature. May be {@literal null} if the field's type does not use\n   *     generic types.\n   * @param value the field's initial value. This parameter, which may be {@literal null} if the\n   *     field does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\n   *     Long}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\n   *     or {@code String} fields respectively). <i>This parameter is only used for static\n   *     fields</i>. Its value is ignored for non static fields, which must be initialized through\n   *     bytecode instructions in constructors or methods.\n   * @return a visitor to visit field annotations and attributes, or {@literal null} if this class\n   *     visitor is not interested in visiting these annotations and attributes.\n   */\n  public FieldVisitor visitField(\n      final int access,\n      final String name,\n      final String descriptor,\n      final String signature,\n      final Object value) {\n    if (cv != null) {\n      return cv.visitField(access, name, descriptor, signature, value);\n    }\n    return null;\n  }\n\n  /**\n   * Visits a method of the class. This method <i>must</i> return a new {@link MethodVisitor}\n   * instance (or {@literal null}) each time it is called, i.e., it should not return a previously\n   * returned visitor.\n   *\n   * @param access the method's access flags (see {@link Opcodes}). This parameter also indicates if\n   *     the method is synthetic and/or deprecated.\n   * @param name the method's name.\n   * @param descriptor the method's descriptor (see {@link Type}).\n   * @param signature the method's signature. May be {@literal null} if the method parameters,\n   *     return type and exceptions do not use generic types.\n   * @param exceptions the internal names of the method's exception classes (see {@link\n   *     Type#getInternalName()}). May be {@literal null}.\n   * @return an object to visit the byte code of the method, or {@literal null} if this class\n   *     visitor is not interested in visiting the code of this method.\n   */\n  public MethodVisitor visitMethod(\n      final int access,\n      final String name,\n      final String descriptor,\n      final String signature,\n      final String[] exceptions) {\n    if (cv != null) {\n      return cv.visitMethod(access, name, descriptor, signature, exceptions);\n    }\n    return null;\n  }\n\n  /**\n   * Visits the end of the class. This method, which is the last one to be called, is used to inform\n   * the visitor that all the fields and methods of the class have been visited.\n   */\n  public void visitEnd() {\n    if (cv != null) {\n      cv.visitEnd();\n    }\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassVisitor#api",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#api",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]