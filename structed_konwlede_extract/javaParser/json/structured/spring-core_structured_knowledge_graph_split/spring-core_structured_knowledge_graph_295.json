[
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForNull() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(null)).isEqualTo(\"null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyOptional()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForEmptyOptional() {\r\n    Optional<String> optional = Optional.empty();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(\"Optional.empty\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyOptional()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyOptional()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionals() {\r\n    Optional<Tropes> optionalEnum = Optional.of(Tropes.BAR);\r\n    String expected = \"Optional[BAR]\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalEnum)).isEqualTo(expected);\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    Optional<String> optionalString = Optional.of(repeat100);\r\n    expected = \"Optional[%s]\".formatted(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n    optionalString = Optional.of(repeat101);\r\n    expected = \"Optional[%s]\".formatted(repeat100 + truncated);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionalCustomType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyOptionalCustomType() {\r\n    class CustomType ;\r\n    CustomType customType = new CustomType();\r\n    Optional<CustomType> optional = Optional.of(customType);\r\n    String expected = \"Optional[%s]\".formatted(ObjectUtils.nullSafeConciseToString(customType));\r\n    assertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionalCustomType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyOptionalCustomType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForClass() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(String.class)).isEqualTo(\"java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStrings()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForStrings() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStrings()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStrings()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStringBuilders()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForStringBuilders() {\r\n    String repeat100 = \"X\".repeat(100);\r\n    String repeat101 = \"X\".repeat(101);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(\"foo\"))).isEqualTo(\"foo\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat100))).isEqualTo(repeat100);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat101))).hasSize(truncatedLength).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStringBuilders()",
    "tailType": "method"
  }
]