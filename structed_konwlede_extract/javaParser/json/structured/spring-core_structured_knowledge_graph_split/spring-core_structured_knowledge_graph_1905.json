[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#addConverterNoSourceTargetClassInfoAvailable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addConverterNoSourceTargetClassInfoAvailable() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.addConverter(new UntypedConverter()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#addConverterNoSourceTargetClassInfoAvailable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#addConverterNoSourceTargetClassInfoAvailable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#sourceTypeIsVoid()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sourceTypeIsVoid() {\r\n    assertThat(conversionService.canConvert(void.class, String.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#sourceTypeIsVoid()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#sourceTypeIsVoid()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#targetTypeIsVoid()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid targetTypeIsVoid() {\r\n    assertThat(conversionService.canConvert(String.class, void.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#targetTypeIsVoid()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#targetTypeIsVoid()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNull() {\r\n    assertThat(conversionService.convert(null, Integer.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertToNullTargetClass() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.convert(\"3\", (Class<?>) null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertToNullTargetTypeDescriptor() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.convert(\"3\", TypeDescriptor.valueOf(String.class), null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertToNullTargetTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongSourceTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertWrongSourceTypeDescriptor() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.convert(\"3\", TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Long.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongSourceTypeDescriptor()",
    "tailType": "method"
  }
]