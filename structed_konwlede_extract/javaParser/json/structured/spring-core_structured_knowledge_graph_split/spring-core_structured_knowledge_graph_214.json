[
  {
    "head": "org.springframework.util.ExponentialBackOffTests#simpleIncrease()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid simpleIncrease() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff(100L, 2.0);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(200L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(400L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(800L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#simpleIncrease()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#simpleIncrease()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#fixedIncrease()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fixedIncrease() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff(100L, 1.0);\r\n    backOff.setMaxElapsedTime(300L);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(100L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#fixedIncrease()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#fixedIncrease()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#maxIntervalReached()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxIntervalReached() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff(2000L, 2.0);\r\n    backOff.setMaxInterval(4000L);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(2000L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(4000L);\r\n    // max reached\r\n    assertThat(execution.nextBackOff()).isEqualTo(4000L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(4000L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#maxIntervalReached()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#maxIntervalReached()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#maxAttemptsReached()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxAttemptsReached() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff(2000L, 2.0);\r\n    backOff.setMaxElapsedTime(4000L);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(2000L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(4000L);\r\n    // > 4 sec wait in total\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#maxAttemptsReached()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#maxAttemptsReached()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#startReturnDifferentInstances()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid startReturnDifferentInstances() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff();\r\n    backOff.setInitialInterval(2000L);\r\n    backOff.setMultiplier(2.0);\r\n    backOff.setMaxElapsedTime(4000L);\r\n    BackOffExecution execution = backOff.start();\r\n    BackOffExecution execution2 = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(2000L);\r\n    assertThat(execution2.nextBackOff()).isEqualTo(2000L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(4000L);\r\n    assertThat(execution2.nextBackOff()).isEqualTo(4000L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n    assertThat(execution2.nextBackOff()).isEqualTo(BackOffExecution.STOP);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#startReturnDifferentInstances()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#startReturnDifferentInstances()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#invalidInterval()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid invalidInterval() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff();\r\n    assertThatIllegalArgumentException().isThrownBy(() -> backOff.setMultiplier(0.9));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#invalidInterval()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#invalidInterval()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests#maxIntervalReachedImmediately()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid maxIntervalReachedImmediately() {\r\n    ExponentialBackOff backOff = new ExponentialBackOff(1000L, 2.0);\r\n    backOff.setMaxInterval(50L);\r\n    BackOffExecution execution = backOff.start();\r\n    assertThat(execution.nextBackOff()).isEqualTo(50L);\r\n    assertThat(execution.nextBackOff()).isEqualTo(50L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ExponentialBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ExponentialBackOffTests#maxIntervalReachedImmediately()",
    "tailType": "method"
  }
]