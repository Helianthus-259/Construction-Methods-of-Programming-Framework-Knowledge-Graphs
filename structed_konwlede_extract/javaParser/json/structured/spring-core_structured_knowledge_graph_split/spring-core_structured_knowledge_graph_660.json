[
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.Generator#style",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#style",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.Generator#route",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#route",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    // is this right?\r\n    return classes[0].getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(classes[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#setStyle(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setStyle(int style) {\r\n    switch(style) {\r\n        case STYLE_INTERFACES:\r\n        case STYLE_BEANS:\r\n        case STYLE_EVERYTHING:\r\n            this.style = style;\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown mixin style: \" + style);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#setStyle(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setClasses(Class[] classes) {\r\n    this.classes = classes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#setClasses(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public void setDelegates(Object[] delegates) {\r\n    this.delegates = delegates;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#setDelegates(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Mixin create() {\r\n    if (classes == null && delegates == null) {\r\n        throw new IllegalStateException(\"Either classes or delegates must be set\");\r\n    }\r\n    switch(style) {\r\n        case STYLE_INTERFACES:\r\n            if (classes == null) {\r\n                Route r = route(delegates);\r\n                classes = r.classes;\r\n                route = r.route;\r\n            }\r\n            break;\r\n        case STYLE_BEANS:\r\n        // fall-through\r\n        case STYLE_EVERYTHING:\r\n            if (classes == null) {\r\n                classes = ReflectUtils.getClasses(delegates);\r\n            } else {\r\n                if (delegates != null) {\r\n                    Class[] temp = ReflectUtils.getClasses(delegates);\r\n                    if (classes.length != temp.length) {\r\n                        throw new IllegalStateException(\"Specified classes are incompatible with delegates\");\r\n                    }\r\n                    for (int i = 0; i < classes.length; i++) {\r\n                        if (!classes[i].isAssignableFrom(temp[i])) {\r\n                            throw new IllegalStateException(\"Specified class \" + classes[i] + \" is incompatible with delegate class \" + temp[i] + \" (index \" + i + \")\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    }\r\n    setNamePrefix(classes[ReflectUtils.findPackageProtected(classes)].getName());\r\n    return (Mixin) super.create(KEY_FACTORY.newInstance(style, ReflectUtils.getNames(classes), route));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    switch(style) {\r\n        case STYLE_INTERFACES:\r\n            new MixinEmitter(v, getClassName(), classes, route);\r\n            break;\r\n        case STYLE_BEANS:\r\n            new MixinBeanEmitter(v, getClassName(), classes);\r\n            break;\r\n        case STYLE_EVERYTHING:\r\n            new MixinEverythingEmitter(v, getClassName(), classes);\r\n            break;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  }
]