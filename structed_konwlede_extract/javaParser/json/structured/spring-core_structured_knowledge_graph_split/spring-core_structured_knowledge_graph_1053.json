[
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#getContentAsString(Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource#contentLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the content length for this resource.\r\n * @throws IOException if the resource cannot be resolved\r\n * (in the file system or as some other known physical resource type)\r\n */\r\nlong contentLength() throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#contentLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource#lastModified()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the last-modified timestamp for this resource.\r\n * @throws IOException if the resource cannot be resolved\r\n * (in the file system or as some other known physical resource type)\r\n */\r\nlong lastModified() throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#lastModified()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a resource relative to this resource.\r\n * @param relativePath the relative path (relative to this resource)\r\n * @return the resource handle for the relative resource\r\n * @throws IOException if the relative resource cannot be determined\r\n */\r\nResource createRelative(String relativePath) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the filename for this resource &mdash; typically the last\r\n * part of the path &mdash; for example, {@code \"myfile.txt\"}.\r\n * <p>Returns {@code null} if this type of resource does not\r\n * have a filename.\r\n * <p>Implementations are encouraged to return the filename unencoded.\r\n */\r\n@Nullable\r\nString getFilename();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#getFilename()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.Resource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a description for this resource,\r\n * to be used for error output when working with the resource.\r\n * <p>Implementations are also encouraged to return this value\r\n * from their {@code toString} method.\r\n * @see Object#toString()\r\n */\r\nString getDescription();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.Resource#getDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.Resource",
    "headType": "class",
    "relation": "extend",
    "tail": "InputStreamSource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ResourceEditor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.beans.PropertyEditorSupport;\nimport java.io.IOException;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link java.beans.PropertyEditor Editor} for {@link Resource}\n * descriptors, to automatically convert {@code String} locations\n * for example, {@code file:C:/myfile.txt} or {@code classpath:myfile.txt} to\n * {@code Resource} properties instead of using a {@code String} location property.\n *\n * <p>The path may contain {@code ${...}} placeholders, to be\n * resolved as {@link org.springframework.core.env.Environment} properties:\n * for example, {@code ${user.dir}}. Unresolvable placeholders are ignored by default.\n *\n * <p>Delegates to a {@link ResourceLoader} to do the heavy lifting,\n * by default using a {@link DefaultResourceLoader}.\n *\n * @author Juergen Hoeller\n * @author Dave Syer\n * @author Chris Beams\n * @since 28.12.2003\n * @see Resource\n * @see ResourceLoader\n * @see DefaultResourceLoader\n * @see PropertyResolver#resolvePlaceholders\n */\npublic class ResourceEditor extends PropertyEditorSupport {\n\n\tprivate final ResourceLoader resourceLoader;\n\n\tprivate @Nullable PropertyResolver propertyResolver;\n\n\tprivate final boolean ignoreUnresolvablePlaceholders;\n\n\n\t/**\n\t * Create a new instance of the {@link ResourceEditor} class\n\t * using a {@link DefaultResourceLoader} and {@link StandardEnvironment}.\n\t */\n\tpublic ResourceEditor() {\n\t\tthis(new DefaultResourceLoader(), null);\n\t}\n\n\t/**\n\t * Create a new instance of the {@link ResourceEditor} class\n\t * using the given {@link ResourceLoader} and {@link PropertyResolver}.\n\t * @param resourceLoader the {@code ResourceLoader} to use\n\t * @param propertyResolver the {@code PropertyResolver} to use\n\t */\n\tpublic ResourceEditor(ResourceLoader resourceLoader, @Nullable PropertyResolver propertyResolver) {\n\t\tthis(resourceLoader, propertyResolver, true);\n\t}\n\n\t/**\n\t * Create a new instance of the {@link ResourceEditor} class\n\t * using the given {@link ResourceLoader}.\n\t * @param resourceLoader the {@code ResourceLoader} to use\n\t * @param propertyResolver the {@code PropertyResolver} to use\n\t * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders\n\t * if no corresponding property could be found in the given {@code propertyResolver}\n\t */\n\tpublic ResourceEditor(ResourceLoader resourceLoader, @Nullable PropertyResolver propertyResolver,\n\t\t\tboolean ignoreUnresolvablePlaceholders) {\n\n\t\tAssert.notNull(resourceLoader, \"ResourceLoader must not be null\");\n\t\tthis.resourceLoader = resourceLoader;\n\t\tthis.propertyResolver = propertyResolver;\n\t\tthis.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;\n\t}\n\n\n\t@Override\n\tpublic void setAsText(String text) {\n\t\tif (StringUtils.hasText(text)) {\n\t\t\tString locationToUse = resolvePath(text).trim();\n\t\t\tsetValue(this.resourceLoader.getResource(locationToUse));\n\t\t}\n\t\telse {\n\t\t\tsetValue(null);\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given path, replacing placeholders with corresponding\n\t * property values from the {@code environment} if necessary.\n\t * @param path the original file path\n\t * @return the resolved file path\n\t * @see PropertyResolver#resolvePlaceholders\n\t * @see PropertyResolver#resolveRequiredPlaceholders\n\t */\n\tprotected String resolvePath(String path) {\n\t\tif (this.propertyResolver == null) {\n\t\t\tthis.propertyResolver = new StandardEnvironment();\n\t\t}\n\t\treturn (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) :\n\t\t\t\tthis.propertyResolver.resolveRequiredPlaceholders(path));\n\t}\n\n\n\t@Override\n\tpublic @Nullable String getAsText() {\n\t\tResource value = (Resource) getValue();\n\t\ttry {\n\t\t\t// Try to determine URL for resource.\n\t\t\treturn (value != null ? value.getURL().toExternalForm() : \"\");\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\t// Couldn't determine resource URL - return null to indicate\n\t\t\t// that there is no appropriate text representation.\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ResourceEditor#resourceLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#resourceLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourceLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ResourceEditor#propertyResolver",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ResourceEditor#propertyResolver",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertyResolver",
    "tailType": "type"
  }
]