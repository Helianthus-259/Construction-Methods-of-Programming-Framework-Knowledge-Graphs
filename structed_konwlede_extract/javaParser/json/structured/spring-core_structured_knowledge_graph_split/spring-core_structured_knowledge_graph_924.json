[
  {
    "head": "org.springframework.core.env.CommandLineArgs#getOptionNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of the names of all option arguments present on the command line.\r\n */\r\npublic Set<String> getOptionNames() {\r\n    return Collections.unmodifiableSet(this.optionArgs.keySet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#getOptionNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#containsOption(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the option with the given name was present on the command line.\r\n */\r\npublic boolean containsOption(String optionName) {\r\n    return this.optionArgs.containsKey(optionName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#containsOption(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#getOptionValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of values associated with the given option.\r\n * <p>{@code null} signifies that the option was not present on the command\r\n * line. An empty list signifies that no values were associated with this option.\r\n */\r\n@Nullable\r\npublic List<String> getOptionValues(String optionName) {\r\n    return this.optionArgs.get(optionName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#getOptionValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#getOptionValues(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#addNonOptionArg(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given value to the list of non-option arguments.\r\n */\r\npublic void addNonOptionArg(String value) {\r\n    this.nonOptionArgs.add(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#addNonOptionArg(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs#getNonOptionArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of non-option arguments specified on the command line.\r\n */\r\npublic List<String> getNonOptionArgs() {\r\n    return Collections.unmodifiableList(this.nonOptionArgs);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CommandLineArgs",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CommandLineArgs#getNonOptionArgs()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.CommandLinePropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * Abstract base class for {@link PropertySource} implementations backed by command line\n * arguments. The parameterized type {@code T} represents the underlying source of command\n * line options.\n *\n * <h3>Purpose and General Usage</h3>\n *\n * For use in standalone Spring-based applications, i.e. those that are bootstrapped via\n * a traditional {@code main} method accepting a {@code String[]} of arguments from the\n * command line. In many cases, processing command-line arguments directly within the\n * {@code main} method may be sufficient, but in other cases, it may be desirable to\n * inject arguments as values into Spring beans. It is this latter set of cases in which\n * a {@code CommandLinePropertySource} becomes useful. A {@code CommandLinePropertySource}\n * will typically be added to the {@link Environment} of the Spring\n * {@code ApplicationContext}, at which point all command line arguments become available\n * through the {@link Environment#getProperty(String)} family of methods. For example:\n *\n * <pre class=\"code\">\n * public static void main(String[] args) {\n *     CommandLinePropertySource clps = ...;\n *     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n *     ctx.getEnvironment().getPropertySources().addFirst(clps);\n *     ctx.register(AppConfig.class);\n *     ctx.refresh();\n * }</pre>\n *\n * With the bootstrap logic above, the {@code AppConfig} class may {@code @Inject} the\n * Spring {@code Environment} and query it directly for properties:\n *\n * <pre class=\"code\">\n * &#064;Configuration\n * public class AppConfig {\n *\n *     &#064;Inject Environment env;\n *\n *     &#064;Bean\n *     public void DataSource dataSource() {\n *         MyVendorDataSource dataSource = new MyVendorDataSource();\n *         dataSource.setHostname(env.getProperty(\"db.hostname\", \"localhost\"));\n *         dataSource.setUsername(env.getRequiredProperty(\"db.username\"));\n *         dataSource.setPassword(env.getRequiredProperty(\"db.password\"));\n *         // ...\n *         return dataSource;\n *     }\n * }</pre>\n *\n * Because the {@code CommandLinePropertySource} was added to the {@code Environment}'s\n * set of {@link MutablePropertySources} using the {@code #addFirst} method, it has\n * the highest search precedence, meaning that while \"db.hostname\" and other properties\n * may exist in other property sources such as the system environment variables, it will\n * be chosen from the command line property source first. This is a reasonable approach\n * given that arguments specified on the command line are naturally more specific than\n * those specified as environment variables.\n *\n * <p>As an alternative to injecting the {@code Environment}, Spring's {@code @Value}\n * annotation may be used to inject these properties, given that a {@link\n * PropertySourcesPropertyResolver} bean has been registered, either directly or through\n * using the {@code <context:property-placeholder>} element. For example:\n *\n * <pre class=\"code\">\n * &#064;Component\n * public class MyComponent {\n *\n *     &#064;Value(\"my.property:defaultVal\")\n *     private String myProperty;\n *\n *     public void getMyProperty() {\n *         return this.myProperty;\n *     }\n *\n *     // ...\n * }</pre>\n *\n * <h3>Working with option arguments</h3>\n *\n * <p>Individual command line arguments are represented as properties through the usual\n * {@link PropertySource#getProperty(String)} and\n * {@link PropertySource#containsProperty(String)} methods. For example, given the\n * following command line:\n *\n * <pre class=\"code\">--o1=v1 --o2</pre>\n *\n * 'o1' and 'o2' are treated as \"option arguments\", and the following assertions would\n * evaluate true:\n *\n * <pre class=\"code\">\n * CommandLinePropertySource&lt;?&gt; ps = ...\n * assert ps.containsProperty(\"o1\") == true;\n * assert ps.containsProperty(\"o2\") == true;\n * assert ps.containsProperty(\"o3\") == false;\n * assert ps.getProperty(\"o1\").equals(\"v1\");\n * assert ps.getProperty(\"o2\").equals(\"\");\n * assert ps.getProperty(\"o3\") == null;\n * </pre>\n *\n * Note that the 'o2' option has no argument, but {@code getProperty(\"o2\")} resolves to\n * empty string ({@code \"\"}) as opposed to {@code null}, while {@code getProperty(\"o3\")}\n * resolves to {@code null} because it was not specified. This behavior is consistent with\n * the general contract to be followed by all {@code PropertySource} implementations.\n *\n * <p>Note also that while \"--\" was used in the examples above to denote an option\n * argument, this syntax may vary across individual command line argument libraries. For\n * example, a JOpt- or Commons CLI-based implementation may allow for single dash (\"-\")\n * \"short\" option arguments, etc.\n *\n * <h3>Working with non-option arguments</h3>\n *\n * <p>Non-option arguments are also supported through this abstraction. Any arguments\n * supplied without an option-style prefix such as \"-\" or \"--\" are considered \"non-option\n * arguments\" and available through the special {@linkplain\n * #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME \"nonOptionArgs\"} property.  If multiple\n * non-option arguments are specified, the value of this property will be a\n * comma-delimited string containing all the arguments. This approach ensures a simple\n * and consistent return type (String) for all properties from a {@code\n * CommandLinePropertySource} and at the same time lends itself to conversion when used\n * in conjunction with the Spring {@link Environment} and its built-in {@code\n * ConversionService}. Consider the following example:\n *\n * <pre class=\"code\">--o1=v1 --o2=v2 /path/to/file1 /path/to/file2</pre>\n *\n * In this example, \"o1\" and \"o2\" would be considered \"option arguments\", while the two\n * filesystem paths qualify as \"non-option arguments\".  As such, the following assertions\n * will evaluate true:\n *\n * <pre class=\"code\">\n * CommandLinePropertySource&lt;?&gt; ps = ...\n * assert ps.containsProperty(\"o1\") == true;\n * assert ps.containsProperty(\"o2\") == true;\n * assert ps.containsProperty(\"nonOptionArgs\") == true;\n * assert ps.getProperty(\"o1\").equals(\"v1\");\n * assert ps.getProperty(\"o2\").equals(\"v2\");\n * assert ps.getProperty(\"nonOptionArgs\").equals(\"/path/to/file1,/path/to/file2\");\n * </pre>\n *\n * <p>As mentioned above, when used in conjunction with the Spring {@code Environment}\n * abstraction, this comma-delimited string may easily be converted to a String array or\n * list:\n *\n * <pre class=\"code\">\n * Environment env = applicationContext.getEnvironment();\n * String[] nonOptionArgs = env.getProperty(\"nonOptionArgs\", String[].class);\n * assert nonOptionArgs[0].equals(\"/path/to/file1\");\n * assert nonOptionArgs[1].equals(\"/path/to/file2\");\n * </pre>\n *\n * <p>The name of the special \"non-option arguments\" property may be customized through\n * the {@link #setNonOptionArgsPropertyName(String)} method. Doing so is recommended as\n * it gives proper semantic value to non-option arguments. For example, if filesystem\n * paths are being specified as non-option arguments, it is likely preferable to refer to\n * these as something like \"file.locations\" than the default of \"nonOptionArgs\":\n *\n * <pre class=\"code\">\n * public static void main(String[] args) {\n *     CommandLinePropertySource clps = ...;\n *     clps.setNonOptionArgsPropertyName(\"file.locations\");\n *\n *     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n *     ctx.getEnvironment().getPropertySources().addFirst(clps);\n *     ctx.register(AppConfig.class);\n *     ctx.refresh();\n * }</pre>\n *\n * <h3>Limitations</h3>\n *\n * This abstraction is not intended to expose the full power of underlying command line\n * parsing APIs such as JOpt or Commons CLI. Its intent is rather just the opposite: to\n * provide the simplest possible abstraction for accessing command line arguments\n * <em>after</em> they have been parsed. So the typical case will involve fully configuring\n * the underlying command line parsing API, parsing the {@code String[]} of arguments\n * coming into the main method, and then simply providing the parsing results to an\n * implementation of {@code CommandLinePropertySource}. At that point, all arguments can\n * be considered either 'option' or 'non-option' arguments and as described above can be\n * accessed through the normal {@code PropertySource} and {@code Environment} APIs.\n *\n * @author Chris Beams\n * @since 3.1\n * @param <T> the source type\n * @see PropertySource\n * @see SimpleCommandLinePropertySource\n */\npublic abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T> {\n\n\t/** The default name given to {@link CommandLinePropertySource} instances: {@value}. */\n\tpublic static final String COMMAND_LINE_PROPERTY_SOURCE_NAME = \"commandLineArgs\";\n\n\t/** The default name of the property representing non-option arguments: {@value}. */\n\tpublic static final String DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME = \"nonOptionArgs\";\n\n\n\tprivate String nonOptionArgsPropertyName = DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME;\n\n\n\t/**\n\t * Create a new {@code CommandLinePropertySource} having the default name\n\t * {@value #COMMAND_LINE_PROPERTY_SOURCE_NAME} and backed by the given source object.\n\t */\n\tpublic CommandLinePropertySource(T source) {\n\t\tsuper(COMMAND_LINE_PROPERTY_SOURCE_NAME, source);\n\t}\n\n\t/**\n\t * Create a new {@link CommandLinePropertySource} having the given name\n\t * and backed by the given source object.\n\t */\n\tpublic CommandLinePropertySource(String name, T source) {\n\t\tsuper(name, source);\n\t}\n\n\n\t/**\n\t * Specify the name of the special \"non-option arguments\" property.\n\t * The default is {@value #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME}.\n\t */\n\tpublic void setNonOptionArgsPropertyName(String nonOptionArgsPropertyName) {\n\t\tthis.nonOptionArgsPropertyName = nonOptionArgsPropertyName;\n\t}\n\n\t/**\n\t * This implementation first checks to see if the name specified is the special\n\t * {@linkplain #setNonOptionArgsPropertyName(String) \"non-option arguments\" property},\n\t * and if so delegates to the abstract {@link #getNonOptionArgs()} method\n\t * checking to see whether it returns an empty collection. Otherwise, delegates to and\n\t * returns the value of the abstract {@link #containsOption(String)} method.\n\t */\n\t@Override\n\tpublic final boolean containsProperty(String name) {\n\t\tif (this.nonOptionArgsPropertyName.equals(name)) {\n\t\t\treturn !getNonOptionArgs().isEmpty();\n\t\t}\n\t\treturn this.containsOption(name);\n\t}\n\n\t/**\n\t * This implementation first checks to see if the name specified is the special\n\t * {@linkplain #setNonOptionArgsPropertyName(String) \"non-option arguments\" property},\n\t * and if so delegates to the abstract {@link #getNonOptionArgs()} method. If so\n\t * and the collection of non-option arguments is empty, this method returns\n\t * {@code null}. If not empty, it returns a comma-separated String of all non-option\n\t * arguments. Otherwise, this method delegates to and returns a comma-separated String\n\t * of the results of the abstract {@link #getOptionValues(String)} method or\n\t * {@code null} if there are no such option values.\n\t */\n\t@Override\n\tpublic final @Nullable String getProperty(String name) {\n\t\tif (this.nonOptionArgsPropertyName.equals(name)) {\n\t\t\tCollection<String> nonOptionArguments = getNonOptionArgs();\n\t\t\tif (nonOptionArguments.isEmpty()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn StringUtils.collectionToCommaDelimitedString(nonOptionArguments);\n\t\t\t}\n\t\t}\n\t\tCollection<String> optionValues = getOptionValues(name);\n\t\tif (optionValues == null) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\treturn StringUtils.collectionToCommaDelimitedString(optionValues);\n\t\t}\n\t}\n\n\n\t/**\n\t * Return whether the set of option arguments parsed from the command line contains\n\t * an option with the given name.\n\t */\n\tprotected abstract boolean containsOption(String name);\n\n\t/**\n\t * Return the collection of values associated with the command line option having the\n\t * given name.\n\t * <ul>\n\t * <li>if the option is present and has no argument (for example: \"--foo\"), return an empty\n\t * collection ({@code []})</li>\n\t * <li>if the option is present and has a single value (for example, \"--foo=bar\"), return a\n\t * collection having one element ({@code [\"bar\"]})</li>\n\t * <li>if the option is present and the underlying command line parsing library\n\t * supports multiple arguments (for example, \"--foo=bar --foo=baz\"), return a collection\n\t * having elements for each value ({@code [\"bar\", \"baz\"]})</li>\n\t * <li>if the option is not present, return {@code null}</li>\n\t * </ul>\n\t */\n\tprotected abstract @Nullable List<String> getOptionValues(String name);\n\n\t/**\n\t * Return the collection of non-option arguments parsed from the command line.\n\t * Never {@code null}.\n\t */\n\tprotected abstract List<String> getNonOptionArgs();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.CommandLinePropertySource#DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.CommandLinePropertySource#nonOptionArgsPropertyName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.CommandLinePropertySource#nonOptionArgsPropertyName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]