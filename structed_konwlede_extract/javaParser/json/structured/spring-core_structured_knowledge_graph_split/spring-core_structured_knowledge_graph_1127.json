[
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ParameterizedTypeReference#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Type getType() {\r\n    return this.type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof ParameterizedTypeReference<?> that && this.type.equals(that.type)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.type.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"ParameterizedTypeReference<\" + this.type + \">\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#forType(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a {@code ParameterizedTypeReference} wrapping the given type.\r\n * @param type a generic type (possibly obtained via reflection,\r\n * for example, from {@link java.lang.reflect.Method#getGenericReturnType()})\r\n * @return a corresponding reference which may be passed into\r\n * {@code ParameterizedTypeReference}-accepting methods\r\n * @since 4.3.12\r\n */\r\npublic static <T> ParameterizedTypeReference<T> forType(Type type) {\r\n    return new ParameterizedTypeReference<>(type) ;;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#forType(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference#findParameterizedTypeReferenceSubclass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Class<?> findParameterizedTypeReferenceSubclass(Class<?> child) {\r\n    Class<?> parent = child.getSuperclass();\r\n    if (Object.class == parent) {\r\n        throw new IllegalStateException(\"Expected ParameterizedTypeReference superclass\");\r\n    } else if (ParameterizedTypeReference.class == parent) {\r\n        return child;\r\n    } else {\r\n        return findParameterizedTypeReferenceSubclass(parent);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReference#findParameterizedTypeReferenceSubclass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ParameterNameDiscoverer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ParameterNameDiscoverer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Interface to discover parameter names for methods and constructors.\n *\n * <p>Parameter name discovery is not always possible, but various strategies exist\n * &mdash; for example, using the JDK's reflection facilities for introspecting\n * parameter names (based on the \"-parameters\" compiler flag), looking for\n * {@code argNames} annotation attributes optionally configured for AspectJ\n * annotated methods, etc.\n *\n * @author Rod Johnson\n * @author Adrian Colyer\n * @since 2.0\n */\npublic interface ParameterNameDiscoverer {\n\n\t/**\n\t * Return parameter names for a method, or {@code null} if they cannot be determined.\n\t * <p>Individual entries in the array may be {@code null} if parameter names are only\n\t * available for some parameters of the given method but not for others. However,\n\t * it is recommended to use stub parameter names instead wherever feasible.\n\t * @param method the method to find parameter names for\n\t * @return an array of parameter names if the names can be resolved,\n\t * or {@code null} if they cannot\n\t */\n\t@Nullable String @Nullable [] getParameterNames(Method method);\n\n\t/**\n\t * Return parameter names for a constructor, or {@code null} if they cannot be determined.\n\t * <p>Individual entries in the array may be {@code null} if parameter names are only\n\t * available for some parameters of the given constructor but not for others. However,\n\t * it is recommended to use stub parameter names instead wherever feasible.\n\t * @param ctor the constructor to find parameter names for\n\t * @return an array of parameter names if the names can be resolved,\n\t * or {@code null} if they cannot\n\t */\n\t@Nullable String @Nullable [] getParameterNames(Constructor<?> ctor);\n\n}\n",
    "tailType": "class_code"
  }
]