[
  {
    "head": "org.springframework.util.StringUtils#TOP_PATH",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#CURRENT_PATH",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#CURRENT_PATH",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#DOT_CHAR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#DOT_CHAR",
    "headType": "field",
    "relation": "haveType",
    "tail": "char",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#DEFAULT_TRUNCATION_THRESHOLD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#DEFAULT_TRUNCATION_THRESHOLD",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.StringUtils#TRUNCATION_SUFFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.StringUtils#TRUNCATION_SUFFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.StringUtils#isEmpty(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// General convenience methods for working with Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Check whether the given object (possibly a {@code String}) is empty.\r\n * This is effectively a shortcut for {@code !hasLength(String)}.\r\n * <p>This method accepts any Object as an argument, comparing it to\r\n * {@code null} and the empty String. As a consequence, this method\r\n * will never return {@code true} for a non-null non-String object.\r\n * <p>The Object signature is useful for general attribute handling code\r\n * that commonly deals with Strings but generally has to iterate over\r\n * Objects since attributes may, for example, be primitive value objects as well.\r\n * <p><b>Note: If the object is typed to {@code String} upfront, prefer\r\n * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>\r\n * @param str the candidate object (possibly a {@code String})\r\n * @since 3.2.1\r\n * @deprecated as of 5.3, in favor of {@link #hasLength(String)} and\r\n * {@link #hasText(String)} (or {@link ObjectUtils#isEmpty(Object)})\r\n */\r\n@Deprecated\r\npublic static boolean isEmpty(@Nullable Object str) {\r\n    return (str == null || \"\".equals(str));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#isEmpty(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#isEmpty(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#hasLength(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check that the given {@code CharSequence} is neither {@code null} nor\r\n * of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code CharSequence}\r\n * that purely consists of whitespace.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasLength(null) = false\r\n * StringUtils.hasLength(\"\") = false\r\n * StringUtils.hasLength(\" \") = true\r\n * StringUtils.hasLength(\"Hello\") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null} and has length\r\n * @see #hasLength(String)\r\n * @see #hasText(CharSequence)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable CharSequence str) {\r\n    // as of JDK 15\r\n    return (str != null && !str.isEmpty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#hasLength(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#hasLength(CharSequence)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#hasLength(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check that the given {@code String} is neither {@code null} nor of length 0.\r\n * <p>Note: this method returns {@code true} for a {@code String} that\r\n * purely consists of whitespace.\r\n * @param str the {@code String} to check (may be {@code null})\r\n * @return {@code true} if the {@code String} is not {@code null} and has length\r\n * @see #hasLength(CharSequence)\r\n * @see #hasText(String)\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasLength(@Nullable String str) {\r\n    return (str != null && !str.isEmpty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#hasLength(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#hasLength(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#hasText(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given {@code CharSequence} contains actual <em>text</em>.\r\n * <p>More specifically, this method returns {@code true} if the\r\n * {@code CharSequence} is not {@code null}, its length is greater than\r\n * 0, and it contains at least one non-whitespace character.\r\n * <p><pre class=\"code\">\r\n * StringUtils.hasText(null) = false\r\n * StringUtils.hasText(\"\") = false\r\n * StringUtils.hasText(\" \") = false\r\n * StringUtils.hasText(\"12345\") = true\r\n * StringUtils.hasText(\" 12345 \") = true\r\n * </pre>\r\n * @param str the {@code CharSequence} to check (may be {@code null})\r\n * @return {@code true} if the {@code CharSequence} is not {@code null},\r\n * its length is greater than 0, and it does not contain whitespace only\r\n * @see #hasText(String)\r\n * @see #hasLength(CharSequence)\r\n * @see Character#isWhitespace\r\n */\r\n@Contract(\"null -> false\")\r\npublic static boolean hasText(@Nullable CharSequence str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    int strLen = str.length();\r\n    if (strLen == 0) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < strLen; i++) {\r\n        if (!Character.isWhitespace(str.charAt(i))) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#hasText(CharSequence)",
    "tailType": "method"
  }
]