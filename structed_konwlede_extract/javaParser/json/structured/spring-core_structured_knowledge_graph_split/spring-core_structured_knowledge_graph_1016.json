[
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#write(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NettyDataBuffer write(DataBuffer... dataBuffers) {\r\n    if (!ObjectUtils.isEmpty(dataBuffers)) {\r\n        if (hasNettyDataBuffers(dataBuffers)) {\r\n            ByteBuf[] nativeBuffers = new ByteBuf[dataBuffers.length];\r\n            for (int i = 0; i < dataBuffers.length; i++) {\r\n                nativeBuffers[i] = ((NettyDataBuffer) dataBuffers[i]).getNativeBuffer();\r\n            }\r\n            write(nativeBuffers);\r\n        } else {\r\n            ByteBuffer[] byteBuffers = new ByteBuffer[dataBuffers.length];\r\n            for (int i = 0; i < dataBuffers.length; i++) {\r\n                byteBuffers[i] = ByteBuffer.allocate(dataBuffers[i].readableByteCount());\r\n                dataBuffers[i].toByteBuffer(byteBuffers[i]);\r\n            }\r\n            write(byteBuffers);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#write(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#hasNettyDataBuffers(DataBuffer[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean hasNettyDataBuffers(DataBuffer[] buffers) {\r\n    for (DataBuffer buffer : buffers) {\r\n        if (!(buffer instanceof NettyDataBuffer)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#hasNettyDataBuffers(DataBuffer[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NettyDataBuffer write(ByteBuffer... buffers) {\r\n    if (!ObjectUtils.isEmpty(buffers)) {\r\n        for (ByteBuffer buffer : buffers) {\r\n            this.byteBuf.writeBytes(buffer);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#write(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(ByteBuf)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,\r\n * starting at the current writing position.\r\n * @param byteBufs the buffers to write into this buffer\r\n * @return this buffer\r\n */\r\npublic NettyDataBuffer write(ByteBuf... byteBufs) {\r\n    if (!ObjectUtils.isEmpty(byteBufs)) {\r\n        for (ByteBuf byteBuf : byteBufs) {\r\n            this.byteBuf.writeBytes(byteBuf);\r\n        }\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#write(ByteBuf)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(CharSequence,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer write(CharSequence charSequence, Charset charset) {\r\n    Assert.notNull(charSequence, \"CharSequence must not be null\");\r\n    Assert.notNull(charset, \"Charset must not be null\");\r\n    if (StandardCharsets.UTF_8.equals(charset)) {\r\n        ByteBufUtil.writeUtf8(this.byteBuf, charSequence);\r\n    } else if (StandardCharsets.US_ASCII.equals(charset)) {\r\n        ByteBufUtil.writeAscii(this.byteBuf, charSequence);\r\n    } else {\r\n        return PooledDataBuffer.super.write(charSequence, charset);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#write(CharSequence,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#write(CharSequence,Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic NettyDataBuffer slice(int index, int length) {\r\n    ByteBuf slice = this.byteBuf.slice(index, length);\r\n    return new NettyDataBuffer(slice, this.dataBufferFactory);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#slice(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#retainedSlice(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic NettyDataBuffer retainedSlice(int index, int length) {\r\n    ByteBuf slice = this.byteBuf.retainedSlice(index, length);\r\n    return new NettyDataBuffer(slice, this.dataBufferFactory);\r\n}",
    "tailType": "method_code"
  }
]