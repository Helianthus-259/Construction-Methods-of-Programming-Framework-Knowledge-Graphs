[
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#getRuntimeHintsReturnsRuntimeHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#getRuntimeHintsReturnsRuntimeHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameUpdateNamingConvention()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNameUpdateNamingConvention() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    GeneratedClass generatedClass = anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    assertThat(generatedClass.getName().simpleName()).endsWith(\"__AnotherTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameUpdateNamingConvention()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameUpdateNamingConvention()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameKeepsTrackOfAllGeneratedFiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNameKeepsTrackOfAllGeneratedFiles() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    GenerationContext anotherContext = context.withName(\"Another\");\r\n    assertThat(anotherContext.getGeneratedClasses()).isNotSameAs(context.getGeneratedClasses());\r\n    assertThat(anotherContext.getGeneratedFiles()).isSameAs(context.getGeneratedFiles());\r\n    assertThat(anotherContext.getRuntimeHints()).isSameAs(context.getRuntimeHints());\r\n    anotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameKeepsTrackOfAllGeneratedFiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameKeepsTrackOfAllGeneratedFiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameGeneratesUniqueName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNameGeneratesUniqueName() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.withName(\"Test\").getGeneratedClasses().addForFeature(\"Feature\", typeSpecCustomizer);\r\n    context.writeGeneratedContent();\r\n    assertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).containsOnlyKeys(\"com/example/SampleTarget__TestFeature.java\", \"com/example/SampleTarget__Test1Feature.java\", \"com/example/SampleTarget__Test2Feature.java\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameGeneratesUniqueName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#withNameGeneratesUniqueName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport javax.lang.model.element.Modifier;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.MethodReference.ArgumentCodeGenerator;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.MethodSpec;\nimport org.springframework.javapoet.MethodSpec.Builder;\nimport org.springframework.javapoet.TypeName;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link DefaultMethodReference}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass DefaultMethodReferenceTests {\n\n\tprivate static final String EXPECTED_STATIC = \"org.springframework.aot.generate.DefaultMethodReferenceTests::someMethod\";\n\n\tprivate static final String EXPECTED_ANONYMOUS_INSTANCE = \"<instance>::someMethod\";\n\n\tprivate static final String EXPECTED_DECLARED_INSTANCE = \"<org.springframework.aot.generate.DefaultMethodReferenceTests>::someMethod\";\n\n\tprivate static final ClassName TEST_CLASS_NAME = ClassName.get(\"com.example\", \"Test\");\n\n\tprivate static final ClassName INITIALIZER_CLASS_NAME = ClassName.get(\"com.example\", \"Initializer\");\n\n\t@Test\n\tvoid createWithStringCreatesMethodReference() {\n\t\tMethodSpec method = createTestMethod(\"someMethod\", new TypeName[0]);\n\t\tMethodReference reference = new DefaultMethodReference(method, null);\n\t\tassertThat(reference).hasToString(EXPECTED_ANONYMOUS_INSTANCE);\n\t}\n\n\t@Test\n\tvoid createWithClassNameAndStringCreateMethodReference() {\n\t\tClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\n\t\tMethodReference reference = createMethodReference(\"someMethod\", new TypeName[0], declaringClass);\n\t\tassertThat(reference).hasToString(EXPECTED_DECLARED_INSTANCE);\n\t}\n\n\t@Test\n\tvoid createWithStaticAndClassAndStringCreatesMethodReference() {\n\t\tClassName declaringClass = ClassName.get(DefaultMethodReferenceTests.class);\n\t\tMethodReference reference = createStaticMethodReference(\"someMethod\", declaringClass);\n\t\tassertThat(reference).hasToString(EXPECTED_STATIC);\n\t}\n\n\t@Test\n\tvoid toCodeBlock() {\n\t\tassertThat(createLocalMethodReference(\"methodName\").toCodeBlock())\n\t\t\t\t.isEqualTo(CodeBlock.of(\"this::methodName\"));\n\t}\n\n\t@Test\n\tvoid toCodeBlockWithStaticMethod() {\n\t\tassertThat(createStaticMethodReference(\"methodName\", TEST_CLASS_NAME).toCodeBlock())\n\t\t\t\t.isEqualTo(CodeBlock.of(\"com.example.Test::methodName\"));\n\t}\n\n\t@Test\n\tvoid toCodeBlockWithStaticMethodRequiresDeclaringClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0], Modifier.STATIC);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, null);\n\t\tassertThatIllegalStateException().isThrownBy(methodReference::toCodeBlock)\n\t\t\t\t.withMessage(\"Static method reference must define a declaring class\");\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithNullDeclaringClassAndTargetClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, null);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithNullDeclaringClassAndNullTargetClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, null);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none()))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithDeclaringClassAndNullTargetClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none()))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithMatchingTargetClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\n\t\tCodeBlock invocation = methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME);\n\t\t// Assume com.example.Test is in a `test` variable.\n\t\tassertThat(CodeBlock.of(\"$L.$L\", \"test\", invocation)).isEqualTo(CodeBlock.of(\"test.methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithNonMatchingDeclaringClass() {\n\t\tMethodSpec method = createTestMethod(\"methodName\", new TypeName[0]);\n\t\tMethodReference methodReference = new DefaultMethodReference(method, TEST_CLASS_NAME);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"new com.example.Test().methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithMatchingArg() {\n\t\tMethodReference methodReference = createLocalMethodReference(\"methodName\", ClassName.get(String.class));\n\t\tArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\");\n\t\tassertThat(methodReference.toInvokeCodeBlock(argCodeGenerator))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"methodName(stringArg)\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithMatchingArgs() {\n\t\tMethodReference methodReference = createLocalMethodReference(\"methodName\",\n\t\t\t\tClassName.get(Integer.class), ClassName.get(String.class));\n\t\tArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(String.class, \"stringArg\")\n\t\t\t\t.and(Integer.class, \"integerArg\");\n\t\tassertThat(methodReference.toInvokeCodeBlock(argCodeGenerator))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"methodName(integerArg, stringArg)\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithNonMatchingArg() {\n\t\tMethodReference methodReference = createLocalMethodReference(\"methodName\",\n\t\t\t\tClassName.get(Integer.class), ClassName.get(String.class));\n\t\tArgumentCodeGenerator argCodeGenerator = ArgumentCodeGenerator.of(Integer.class, \"integerArg\");\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> methodReference.toInvokeCodeBlock(argCodeGenerator))\n\t\t\t\t.withMessageContaining(\"parameter 1 of type java.lang.String is not supported\");\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithStaticMethodAndMatchingDeclaringClass() {\n\t\tMethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), TEST_CLASS_NAME))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"methodName()\"));\n\t}\n\n\t@Test\n\tvoid toInvokeCodeBlockWithStaticMethodAndSeparateDeclaringClass() {\n\t\tMethodReference methodReference = createStaticMethodReference(\"methodName\", TEST_CLASS_NAME);\n\t\tassertThat(methodReference.toInvokeCodeBlock(ArgumentCodeGenerator.none(), INITIALIZER_CLASS_NAME))\n\t\t\t\t.isEqualTo(CodeBlock.of(\"com.example.Test.methodName()\"));\n\t}\n\n\n\tprivate MethodReference createLocalMethodReference(String name, TypeName... argumentTypes) {\n\t\treturn createMethodReference(name, argumentTypes, null);\n\t}\n\n\tprivate MethodReference createMethodReference(String name, TypeName[] argumentTypes, @Nullable ClassName declaringClass) {\n\t\tMethodSpec method = createTestMethod(name, argumentTypes);\n\t\treturn new DefaultMethodReference(method, declaringClass);\n\t}\n\n\tprivate MethodReference createStaticMethodReference(String name, ClassName declaringClass, TypeName... argumentTypes) {\n\t\tMethodSpec method = createTestMethod(name, argumentTypes, Modifier.STATIC);\n\t\treturn new DefaultMethodReference(method, declaringClass);\n\t}\n\n\tprivate MethodSpec createTestMethod(String name, TypeName[] argumentTypes, Modifier... modifiers) {\n\t\tBuilder method = MethodSpec.methodBuilder(name);\n\t\tfor (int i = 0; i < argumentTypes.length; i++) {\n\t\t\tmethod.addParameter(argumentTypes[i], \"args\" + i);\n\t\t}\n\t\tmethod.addModifiers(modifiers);\n\t\treturn method.build();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_STATIC",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_STATIC",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_ANONYMOUS_INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_ANONYMOUS_INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_DECLARED_INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultMethodReferenceTests#EXPECTED_DECLARED_INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]