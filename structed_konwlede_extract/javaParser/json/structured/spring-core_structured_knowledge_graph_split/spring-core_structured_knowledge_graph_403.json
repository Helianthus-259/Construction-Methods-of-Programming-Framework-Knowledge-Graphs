[
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldVisitor#fv",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#fv",
    "headType": "field",
    "relation": "haveType",
    "tail": "FieldVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#getDelegate()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The field visitor to which this visitor must delegate method calls. May be {@literal null}.\r\n *\r\n * @return the field visitor to which this visitor must delegate method calls, or {@literal null}.\r\n */\r\npublic FieldVisitor getDelegate() {\r\n    return fv;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldVisitor#getDelegate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation of the field.\r\n *\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (fv != null) {\r\n        return fv.visitAnnotation(descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldVisitor#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on the type of the field.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#FIELD}. See {@link TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(\"This feature requires ASM5\");\r\n    }\r\n    if (fv != null) {\r\n        return fv.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a non standard attribute of the field.\r\n *\r\n * @param attribute an attribute.\r\n */\r\npublic void visitAttribute(final Attribute attribute) {\r\n    if (fv != null) {\r\n        fv.visitAttribute(attribute);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldVisitor#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the end of the field. This method, which is the last one to be called, is used to inform\r\n * the visitor that all the annotations and attributes of the field have been visited.\r\n */\r\npublic void visitEnd() {\r\n    if (fv != null) {\r\n        fv.visitEnd();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.FieldWriter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * A {@link FieldVisitor} that generates a corresponding 'field_info' structure, as defined in the\n * Java Virtual Machine Specification (JVMS).\n *\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.5\">JVMS\n *     4.5</a>\n * @author Eric Bruneton\n */\nfinal class FieldWriter extends FieldVisitor {\n\n  /** Where the constants used in this FieldWriter must be stored. */\n  private final SymbolTable symbolTable;\n\n  // Note: fields are ordered as in the field_info structure, and those related to attributes are\n  // ordered as in Section 4.7 of the JVMS.\n\n  /**\n   * The access_flags field of the field_info JVMS structure. This field can contain ASM specific\n   * access flags, such as {@link Opcodes#ACC_DEPRECATED}, which are removed when generating the\n   * ClassFile structure.\n   */\n  private final int accessFlags;\n\n  /** The name_index field of the field_info JVMS structure. */\n  private final int nameIndex;\n\n  /** The descriptor_index field of the field_info JVMS structure. */\n  private final int descriptorIndex;\n\n  /**\n   * The signature_index field of the Signature attribute of this field_info, or 0 if there is no\n   * Signature attribute.\n   */\n  private int signatureIndex;\n\n  /**\n   * The constantvalue_index field of the ConstantValue attribute of this field_info, or 0 if there\n   * is no ConstantValue attribute.\n   */\n  private int constantValueIndex;\n\n  /**\n   * The last runtime visible annotation of this field. The previous ones can be accessed with the\n   * {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeVisibleAnnotation;\n\n  /**\n   * The last runtime invisible annotation of this field. The previous ones can be accessed with the\n   * {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeInvisibleAnnotation;\n\n  /**\n   * The last runtime visible type annotation of this field. The previous ones can be accessed with\n   * the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeVisibleTypeAnnotation;\n\n  /**\n   * The last runtime invisible type annotation of this field. The previous ones can be accessed\n   * with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.\n   */\n  private AnnotationWriter lastRuntimeInvisibleTypeAnnotation;\n\n  /**\n   * The first non standard attribute of this field. The next ones can be accessed with the {@link\n   * Attribute#nextAttribute} field. May be {@literal null}.\n   *\n   * <p><b>WARNING</b>: this list stores the attributes in the <i>reverse</i> order of their visit.\n   * firstAttribute is actually the last attribute visited in {@link #visitAttribute}. The {@link\n   * #putFieldInfo} method writes the attributes in the order defined by this list, i.e. in the\n   * reverse order specified by the user.\n   */\n  private Attribute firstAttribute;\n\n  // -----------------------------------------------------------------------------------------------\n  // Constructor\n  // -----------------------------------------------------------------------------------------------\n\n  /**\n   * Constructs a new {@link FieldWriter}.\n   *\n   * @param symbolTable where the constants used in this FieldWriter must be stored.\n   * @param access the field's access flags (see {@link Opcodes}).\n   * @param name the field's name.\n   * @param descriptor the field's descriptor (see {@link Type}).\n   * @param signature the field's signature. May be {@literal null}.\n   * @param constantValue the field's constant value. May be {@literal null}.\n   */\n  FieldWriter(\n      final SymbolTable symbolTable,\n      final int access,\n      final String name,\n      final String descriptor,\n      final String signature,\n      final Object constantValue) {\n    super(/* latest api = */ Opcodes.ASM9);\n    this.symbolTable = symbolTable;\n    this.accessFlags = access;\n    this.nameIndex = symbolTable.addConstantUtf8(name);\n    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor);\n    if (signature != null) {\n      this.signatureIndex = symbolTable.addConstantUtf8(signature);\n    }\n    if (constantValue != null) {\n      this.constantValueIndex = symbolTable.addConstant(constantValue).index;\n    }\n  }\n\n  // -----------------------------------------------------------------------------------------------\n  // Implementation of the FieldVisitor abstract class\n  // -----------------------------------------------------------------------------------------------\n\n  @Override\n  public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n    if (visible) {\n      return lastRuntimeVisibleAnnotation =\n          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);\n    } else {\n      return lastRuntimeInvisibleAnnotation =\n          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);\n    }\n  }\n\n  @Override\n  public AnnotationVisitor visitTypeAnnotation(\n      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n    if (visible) {\n      return lastRuntimeVisibleTypeAnnotation =\n          AnnotationWriter.create(\n              symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);\n    } else {\n      return lastRuntimeInvisibleTypeAnnotation =\n          AnnotationWriter.create(\n              symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);\n    }\n  }\n\n  @Override\n  public void visitAttribute(final Attribute attribute) {\n    // Store the attributes in the <i>reverse</i> order of their visit by this method.\n    attribute.nextAttribute = firstAttribute;\n    firstAttribute = attribute;\n  }\n\n  @Override\n  public void visitEnd() {\n    // Nothing to do.\n  }\n\n  // -----------------------------------------------------------------------------------------------\n  // Utility methods\n  // -----------------------------------------------------------------------------------------------\n\n  /**\n   * Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\n   * names of the attributes of this field in the constant pool.\n   *\n   * @return the size in bytes of the field_info JVMS structure.\n   */\n  int computeFieldInfoSize() {\n    // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes.\n    int size = 8;\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    if (constantValueIndex != 0) {\n      // ConstantValue attributes always use 8 bytes.\n      symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE);\n      size += 8;\n    }\n    size += Attribute.computeAttributesSize(symbolTable, accessFlags, signatureIndex);\n    size +=\n        AnnotationWriter.computeAnnotationsSize(\n            lastRuntimeVisibleAnnotation,\n            lastRuntimeInvisibleAnnotation,\n            lastRuntimeVisibleTypeAnnotation,\n            lastRuntimeInvisibleTypeAnnotation);\n    if (firstAttribute != null) {\n      size += firstAttribute.computeAttributesSize(symbolTable);\n    }\n    return size;\n  }\n\n  /**\n   * Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\n   * ByteVector.\n   *\n   * @param output where the field_info structure must be put.\n   */\n  void putFieldInfo(final ByteVector output) {\n    boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5;\n    // Put the access_flags, name_index and descriptor_index fields.\n    int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0;\n    output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex);\n    // Compute and put the attributes_count field.\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    int attributesCount = 0;\n    if (constantValueIndex != 0) {\n      ++attributesCount;\n    }\n    if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) {\n      ++attributesCount;\n    }\n    if (signatureIndex != 0) {\n      ++attributesCount;\n    }\n    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {\n      ++attributesCount;\n    }\n    if (lastRuntimeVisibleAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeInvisibleAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeVisibleTypeAnnotation != null) {\n      ++attributesCount;\n    }\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\n      ++attributesCount;\n    }\n    if (firstAttribute != null) {\n      attributesCount += firstAttribute.getAttributeCount();\n    }\n    output.putShort(attributesCount);\n    // Put the field_info attributes.\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\n    if (constantValueIndex != 0) {\n      output\n          .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE))\n          .putInt(2)\n          .putShort(constantValueIndex);\n    }\n    Attribute.putAttributes(symbolTable, accessFlags, signatureIndex, output);\n    AnnotationWriter.putAnnotations(\n        symbolTable,\n        lastRuntimeVisibleAnnotation,\n        lastRuntimeInvisibleAnnotation,\n        lastRuntimeVisibleTypeAnnotation,\n        lastRuntimeInvisibleTypeAnnotation,\n        output);\n    if (firstAttribute != null) {\n      firstAttribute.putAttributes(symbolTable, output);\n    }\n  }\n\n  /**\n   * Collects the attributes of this field into the given set of attribute prototypes.\n   *\n   * @param attributePrototypes a set of attribute prototypes.\n   */\n  final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {\n    attributePrototypes.addAttributes(firstAttribute);\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#symbolTable",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.FieldWriter#symbolTable",
    "headType": "field",
    "relation": "haveType",
    "tail": "SymbolTable",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.FieldWriter#accessFlags",
    "tailType": "field"
  }
]