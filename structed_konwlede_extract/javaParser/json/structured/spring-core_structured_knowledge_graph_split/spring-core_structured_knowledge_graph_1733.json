[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testExplicitRepeatables(SearchStrategy,Class<?>,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testStandardRepeatables(SearchStrategy,Class<?>,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testStandardRepeatables(SearchStrategy searchStrategy, Class<?> element, String[] expected) {\r\n    Stream<String> values = MergedAnnotations.from(element, searchStrategy).stream(MyRepeatable.class).filter(MergedAnnotationPredicates.firstRunOf(MergedAnnotation::getAggregateIndex)).map(annotation -> annotation.getString(\"value\"));\r\n    assertThat(values).containsExactly(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testStandardRepeatables(SearchStrategy,Class<?>,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWithoutAttributeAliases() {\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    Component synthesizedComponent = MergedAnnotation.from(component).synthesize();\r\n    assertThat(synthesizedComponent).isNotNull();\r\n    assertThat(synthesizedComponent).isEqualTo(component);\r\n    assertThat(synthesizedComponent.value()).isEqualTo(\"webController\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizedAnnotationShouldReuseJdkProxyClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @since 6.0\r\n */\r\n@Test\r\nvoid synthesizedAnnotationShouldReuseJdkProxyClass() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithValueAttribute\");\r\n    RequestMapping jdkRequestMapping = method.getAnnotation(RequestMapping.class);\r\n    assertThat(jdkRequestMapping).isNotNull();\r\n    assertThat(jdkRequestMapping.value()).containsExactly(\"/test\");\r\n    assertThat(jdkRequestMapping.path()).containsExactly(\"\");\r\n    RequestMapping synthesizedRequestMapping = MergedAnnotation.from(jdkRequestMapping).synthesize();\r\n    assertSynthesized(synthesizedRequestMapping);\r\n    assertThat(synthesizedRequestMapping.value()).containsExactly(\"/test\");\r\n    assertThat(synthesizedRequestMapping.path()).containsExactly(\"/test\");\r\n    assertThat(jdkRequestMapping.getClass()).isSameAs(synthesizedRequestMapping.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizedAnnotationShouldReuseJdkProxyClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizedAnnotationShouldReuseJdkProxyClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeAlreadySynthesized()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAlreadySynthesized() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithValueAttribute\");\r\n    RequestMapping webMapping = method.getAnnotation(RequestMapping.class);\r\n    assertThat(webMapping).isNotNull();\r\n    RequestMapping synthesizedWebMapping = MergedAnnotation.from(webMapping).synthesize();\r\n    RequestMapping synthesizedAgainWebMapping = MergedAnnotation.from(synthesizedWebMapping).synthesize();\r\n    assertSynthesized(synthesizedWebMapping);\r\n    assertSynthesized(synthesizedAgainWebMapping);\r\n    assertThat(synthesizedWebMapping).isEqualTo(synthesizedAgainWebMapping);\r\n    assertThat(synthesizedWebMapping).isSameAs(synthesizedAgainWebMapping);\r\n    assertThat(synthesizedWebMapping.name()).isEqualTo(\"foo\");\r\n    assertThat(synthesizedWebMapping.path()).containsExactly(\"/test\");\r\n    assertThat(synthesizedWebMapping.value()).containsExactly(\"/test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeAlreadySynthesized()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeAlreadySynthesized()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeShouldNotSynthesizeNonsynthesizableAnnotations() throws Exception {\r\n    Method method = getClass().getDeclaredMethod(\"getId\");\r\n    Id id = method.getAnnotation(Id.class);\r\n    assertThat(id).isNotNull();\r\n    Id synthesizedId = MergedAnnotation.from(id).synthesize();\r\n    assertThat(id).isEqualTo(synthesizedId);\r\n    // It doesn't make sense to synthesize @Id since it declares zero attributes.\r\n    assertNotSynthesized(synthesizedId);\r\n    assertThat(id).isSameAs(synthesizedId);\r\n    GeneratedValue generatedValue = method.getAnnotation(GeneratedValue.class);\r\n    assertThat(generatedValue).isNotNull();\r\n    GeneratedValue synthesizedGeneratedValue = MergedAnnotation.from(generatedValue).synthesize();\r\n    assertThat(generatedValue).isEqualTo(synthesizedGeneratedValue);\r\n    // It doesn't make sense to synthesize @GeneratedValue since it declares zero attributes with aliases.\r\n    assertNotSynthesized(synthesizedGeneratedValue);\r\n    assertThat(generatedValue).isSameAs(synthesizedGeneratedValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenUsingMergedAnnotationsFromApi()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-28716\r\n@Test\r\nvoid synthesizeWhenUsingMergedAnnotationsFromApi() {\r\n    Field directlyAnnotatedField = ReflectionUtils.findField(DomainType.class, \"directlyAnnotated\");\r\n    MergedAnnotations mergedAnnotations = MergedAnnotations.from(directlyAnnotatedField);\r\n    RootAnnotation rootAnnotation = mergedAnnotations.get(RootAnnotation.class).synthesize();\r\n    assertThat(rootAnnotation.flag()).isFalse();\r\n    assertNotSynthesized(rootAnnotation);\r\n    Field metaAnnotatedField = ReflectionUtils.findField(DomainType.class, \"metaAnnotated\");\r\n    mergedAnnotations = MergedAnnotations.from(metaAnnotatedField);\r\n    rootAnnotation = mergedAnnotations.get(RootAnnotation.class).synthesize();\r\n    assertThat(rootAnnotation.flag()).isTrue();\r\n    assertSynthesized(rootAnnotation);\r\n    Field metaMetaAnnotatedField = ReflectionUtils.findField(DomainType.class, \"metaMetaAnnotated\");\r\n    mergedAnnotations = MergedAnnotations.from(metaMetaAnnotatedField);\r\n    rootAnnotation = mergedAnnotations.get(RootAnnotation.class).synthesize();\r\n    assertThat(rootAnnotation.flag()).isTrue();\r\n    assertSynthesized(rootAnnotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenUsingMergedAnnotationsFromApi()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenUsingMergedAnnotationsFromApi()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotationsWhenUsingMergedAnnotationsFromApi()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-28704\r\n@Test\r\nvoid synthesizeShouldNotSynthesizeNonsynthesizableAnnotationsWhenUsingMergedAnnotationsFromApi() {\r\n    MergedAnnotations mergedAnnotations = MergedAnnotations.from(SecurityConfig.class);\r\n    EnableWebSecurity enableWebSecurity = mergedAnnotations.get(EnableWebSecurity.class).synthesize();\r\n    assertNotSynthesized(enableWebSecurity);\r\n    EnableGlobalAuthentication enableGlobalAuthentication = mergedAnnotations.get(EnableGlobalAuthentication.class).synthesize();\r\n    assertNotSynthesized(enableGlobalAuthentication);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotationsWhenUsingMergedAnnotationsFromApi()",
    "tailType": "method"
  }
]