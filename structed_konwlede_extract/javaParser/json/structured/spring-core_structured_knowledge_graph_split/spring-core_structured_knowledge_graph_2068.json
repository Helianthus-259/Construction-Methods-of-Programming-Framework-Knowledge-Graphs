[
  {
    "head": "org.springframework.core.MethodParameterTests#equals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#testHashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testHashCode() throws NoSuchMethodException {\r\n    assertThat(stringParameter.hashCode()).isEqualTo(stringParameter.hashCode());\r\n    assertThat(longParameter.hashCode()).isEqualTo(longParameter.hashCode());\r\n    assertThat(intReturnType.hashCode()).isEqualTo(intReturnType.hashCode());\r\n    Method method = getClass().getMethod(\"method\", String.class, long.class);\r\n    MethodParameter methodParameter = new MethodParameter(method, 0);\r\n    assertThat(methodParameter.hashCode()).isEqualTo(stringParameter.hashCode());\r\n    assertThat(methodParameter.hashCode()).isNotEqualTo(longParameter.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#testHashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#testHashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#testFactoryMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testFactoryMethods() {\r\n    assertThat(MethodParameter.forMethodOrConstructor(method, 0)).isEqualTo(stringParameter);\r\n    assertThat(MethodParameter.forMethodOrConstructor(method, 1)).isEqualTo(longParameter);\r\n    assertThat(MethodParameter.forExecutable(method, 0)).isEqualTo(stringParameter);\r\n    assertThat(MethodParameter.forExecutable(method, 1)).isEqualTo(longParameter);\r\n    assertThat(MethodParameter.forParameter(method.getParameters()[0])).isEqualTo(stringParameter);\r\n    assertThat(MethodParameter.forParameter(method.getParameters()[1])).isEqualTo(longParameter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#testFactoryMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#testFactoryMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#testFactoryMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#indexValidation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid indexValidation() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new MethodParameter(method, 2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#indexValidation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#indexValidation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInStaticNestedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid annotatedConstructorParameterInStaticNestedClass() throws Exception {\r\n    Constructor<?> constructor = NestedClass.class.getDeclaredConstructor(String.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(String.class);\r\n    assertThat(methodParameter.getParameterAnnotation(Param.class)).as(\"Failed to find @Param annotation\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInStaticNestedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInStaticNestedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInInnerClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16652\r\n@Test\r\nvoid annotatedConstructorParameterInInnerClass() throws Exception {\r\n    Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(getClass());\r\n    assertThat(methodParameter.getParameterAnnotation(Param.class)).isNull();\r\n    methodParameter = MethodParameter.forExecutable(constructor, 1);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(String.class);\r\n    assertThat(methodParameter.getParameterAnnotation(Param.class)).as(\"Failed to find @Param annotation\").isNotNull();\r\n    methodParameter = MethodParameter.forExecutable(constructor, 2);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Callable.class);\r\n    assertThat(methodParameter.getParameterAnnotation(Param.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInInnerClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#annotatedConstructorParameterInInnerClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#genericConstructorParameterInInnerClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16734\r\n@Test\r\nvoid genericConstructorParameterInInnerClass() throws Exception {\r\n    Constructor<?> constructor = InnerClass.class.getConstructor(getClass(), String.class, Callable.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(constructor, 0);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(getClass());\r\n    assertThat(methodParameter.getGenericParameterType()).isEqualTo(getClass());\r\n    methodParameter = MethodParameter.forExecutable(constructor, 1);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(String.class);\r\n    assertThat(methodParameter.getGenericParameterType()).isEqualTo(String.class);\r\n    methodParameter = MethodParameter.forExecutable(constructor, 2);\r\n    assertThat(methodParameter.getParameterType()).isEqualTo(Callable.class);\r\n    assertThat(methodParameter.getGenericParameterType()).isEqualTo(ResolvableType.forClassWithGenerics(Callable.class, Integer.class).getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameterTests#genericConstructorParameterInInnerClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameterTests#genericConstructorParameterInInnerClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]