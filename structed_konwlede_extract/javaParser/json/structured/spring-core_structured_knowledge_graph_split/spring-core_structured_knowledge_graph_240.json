[
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#applyWhenThrowingCheckedExceptionThrowsWrapperRuntimeException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#applyWhenThrowingCheckedExceptionThrowsWrapperRuntimeException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid applyWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal() {\r\n    ThrowingFunction<Object, Object> function = this::throwIllegalArgumentException;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> function.apply(this, IllegalStateException::new));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper() {\r\n    ThrowingFunction<Object, Object> function = this::throwIOException;\r\n    assertThatIllegalStateException().isThrownBy(() -> function.apply(this, IllegalStateException::new)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid throwingModifiesThrownException() {\r\n    ThrowingFunction<Object, Object> function = this::throwIOException;\r\n    ThrowingFunction<Object, Object> modified = function.throwing(IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(() -> modified.apply(this)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#throwingModifiesThrownException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#ofModifiesThrowException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofModifiesThrowException() {\r\n    ThrowingFunction<Object, Object> function = ThrowingFunction.of(this::throwIOException, IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(() -> function.apply(this)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#ofModifiesThrowException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#ofModifiesThrowException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#throwIOException(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object throwIOException(Object o) throws IOException {\r\n    throw new IOException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#throwIOException(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests#throwIllegalArgumentException(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object throwIllegalArgumentException(Object o) {\r\n    throw new IllegalArgumentException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingFunctionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingFunctionTests#throwIllegalArgumentException(Object)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex.feature",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.function",
    "tailType": "package"
  }
]