[
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark",
    "headType": "class",
    "relation": "use",
    "tail": "@Warmup",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark",
    "headType": "class",
    "relation": "use",
    "tail": "@Measurement",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Measurement;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.annotations.Warmup;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport org.springframework.util.AlternativeJdkIdGenerator;\nimport org.springframework.util.IdGenerator;\n\n/**\n * Benchmarks for {@link CompositePropertySource}.\n *\n * @author Yike Xiao\n */\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Warmup(iterations = 5, time = 2)\n@Measurement(iterations = 5, time = 2)\npublic class CompositePropertySourceBenchmark {\n\n\t@Benchmark\n\tpublic void getPropertyNames(BenchmarkState state, Blackhole blackhole) {\n\t\tblackhole.consume(state.composite.getPropertyNames());\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkState {\n\n\t\tprivate static final IdGenerator ID_GENERATOR = new AlternativeJdkIdGenerator();\n\n\t\tprivate static final Object VALUE = new Object();\n\n\t\tCompositePropertySource composite;\n\n\t\t@Param({ \"2\", \"5\", \"10\" })\n\t\tint numberOfPropertySources;\n\n\t\t@Param({ \"10\", \"100\", \"1000\" })\n\t\tint numberOfPropertyNamesPerSource;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setUp() {\n\t\t\tthis.composite = new CompositePropertySource(\"benchmark\");\n\t\t\tfor (int i = 0; i < this.numberOfPropertySources; i++) {\n\t\t\t\tMap<String, Object> map = new HashMap<>(this.numberOfPropertyNamesPerSource);\n\t\t\t\tfor (int j = 0; j < this.numberOfPropertyNamesPerSource; j++) {\n\t\t\t\t\tmap.put(ID_GENERATOR.generateId().toString(), VALUE);\n\t\t\t\t}\n\t\t\t\tPropertySource<?> propertySource = new MapPropertySource(\"propertySource\" + i, map);\n\t\t\t\tthis.composite.addPropertySource(propertySource);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark#getPropertyNames(BenchmarkState,Blackhole)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Benchmark\r\npublic void getPropertyNames(BenchmarkState state, Blackhole blackhole) {\r\n    blackhole.consume(state.composite.getPropertyNames());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.CompositePropertySourceBenchmark#getPropertyNames(BenchmarkState,Blackhole)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.CompositePropertySourceBenchmark#getPropertyNames(BenchmarkState,Blackhole)",
    "headType": "method",
    "relation": "use",
    "tail": "@Benchmark",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.BenchmarkState",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Measurement;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.annotations.Warmup;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport org.springframework.util.AlternativeJdkIdGenerator;\nimport org.springframework.util.IdGenerator;\n\n/**\n * Benchmarks for {@link CompositePropertySource}.\n *\n * @author Yike Xiao\n */\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Warmup(iterations = 5, time = 2)\n@Measurement(iterations = 5, time = 2)\npublic class CompositePropertySourceBenchmark {\n\n\t@Benchmark\n\tpublic void getPropertyNames(BenchmarkState state, Blackhole blackhole) {\n\t\tblackhole.consume(state.composite.getPropertyNames());\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkState {\n\n\t\tprivate static final IdGenerator ID_GENERATOR = new AlternativeJdkIdGenerator();\n\n\t\tprivate static final Object VALUE = new Object();\n\n\t\tCompositePropertySource composite;\n\n\t\t@Param({ \"2\", \"5\", \"10\" })\n\t\tint numberOfPropertySources;\n\n\t\t@Param({ \"10\", \"100\", \"1000\" })\n\t\tint numberOfPropertyNamesPerSource;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setUp() {\n\t\t\tthis.composite = new CompositePropertySource(\"benchmark\");\n\t\t\tfor (int i = 0; i < this.numberOfPropertySources; i++) {\n\t\t\t\tMap<String, Object> map = new HashMap<>(this.numberOfPropertyNamesPerSource);\n\t\t\t\tfor (int j = 0; j < this.numberOfPropertyNamesPerSource; j++) {\n\t\t\t\t\tmap.put(ID_GENERATOR.generateId().toString(), VALUE);\n\t\t\t\t}\n\t\t\t\tPropertySource<?> propertySource = new MapPropertySource(\"propertySource\" + i, map);\n\t\t\t\tthis.composite.addPropertySource(propertySource);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.BenchmarkState#ID_GENERATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#ID_GENERATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "IdGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.BenchmarkState#VALUE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.BenchmarkState#composite",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#composite",
    "headType": "field",
    "relation": "haveType",
    "tail": "CompositePropertySource",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.BenchmarkState#numberOfPropertySources",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#numberOfPropertySources",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.BenchmarkState#numberOfPropertyNamesPerSource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#numberOfPropertyNamesPerSource",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Trial)\r\npublic void setUp() {\r\n    this.composite = new CompositePropertySource(\"benchmark\");\r\n    for (int i = 0; i < this.numberOfPropertySources; i++) {\r\n        Map<String, Object> map = new HashMap<>(this.numberOfPropertyNamesPerSource);\r\n        for (int j = 0; j < this.numberOfPropertyNamesPerSource; j++) {\r\n            map.put(ID_GENERATOR.generateId().toString(), VALUE);\r\n        }\r\n        PropertySource<?> propertySource = new MapPropertySource(\"propertySource\" + i, map);\r\n        this.composite.addPropertySource(propertySource);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]