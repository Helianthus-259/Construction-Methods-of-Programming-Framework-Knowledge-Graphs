[
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverter#isApplicable(Executable,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineToMethod(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) {\r\n    if (String.class == targetClass || String.class == sourceClass) {\r\n        // Do not accept a toString() method or any to methods on String itself\r\n        return null;\r\n    }\r\n    Method method = ClassUtils.getMethodIfAvailable(sourceClass, \"to\" + targetClass.getSimpleName());\r\n    return (method != null && !Modifier.isStatic(method.getModifiers()) && ClassUtils.isAssignable(targetClass, method.getReturnType()) ? method : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverter#determineToMethod(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineToMethod(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryMethod(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Method determineFactoryMethod(Class<?> targetClass, Class<?> sourceClass) {\r\n    if (String.class == targetClass) {\r\n        // Do not accept the String.valueOf(Object) method\r\n        return null;\r\n    }\r\n    Method method = ClassUtils.getStaticMethod(targetClass, \"valueOf\", sourceClass);\r\n    if (method == null) {\r\n        method = ClassUtils.getStaticMethod(targetClass, \"of\", sourceClass);\r\n        if (method == null) {\r\n            method = ClassUtils.getStaticMethod(targetClass, \"from\", sourceClass);\r\n        }\r\n    }\r\n    return (method != null && areRelatedTypes(targetClass, method.getReturnType()) ? method : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryMethod(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryMethod(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#areRelatedTypes(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the two types reside in the same type hierarchy (i.e., type 1\r\n * is assignable to type 2 or vice versa).\r\n * @since 5.3.21\r\n * @see ClassUtils#isAssignable(Class, Class)\r\n */\r\nprivate static boolean areRelatedTypes(Class<?> type1, Class<?> type2) {\r\n    return (ClassUtils.isAssignable(type1, type2) || ClassUtils.isAssignable(type2, type1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverter#areRelatedTypes(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryConstructor(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Constructor<?> determineFactoryConstructor(Class<?> targetClass, Class<?> sourceClass) {\r\n    return ClassUtils.getConstructorIfAvailable(targetClass, sourceClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryConstructor(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToObjectConverter#determineFactoryConstructor(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.lang.reflect.Array;\nimport java.util.Collection;\nimport java.util.Optional;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Convert an Object to {@code java.util.Optional<T>} if necessary using the\n * {@code ConversionService} to convert the source Object to the generic type\n * of Optional when known.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 4.1\n */\nfinal class ObjectToOptionalConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic ObjectToOptionalConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\tSet<ConvertiblePair> convertibleTypes = CollectionUtils.newLinkedHashSet(3);\n\t\tconvertibleTypes.add(new ConvertiblePair(Collection.class, Optional.class));\n\t\tconvertibleTypes.add(new ConvertiblePair(Object[].class, Optional.class));\n\t\tconvertibleTypes.add(new ConvertiblePair(Object.class, Optional.class));\n\t\treturn convertibleTypes;\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (targetType.getResolvableType().hasGenerics()) {\n\t\t\treturn this.conversionService.canConvert(sourceType, new GenericTypeDescriptor(targetType));\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t@Override\n\tpublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\telse if (source instanceof Optional) {\n\t\t\treturn source;\n\t\t}\n\t\telse if (targetType.getResolvableType().hasGenerics()) {\n\t\t\tObject target = this.conversionService.convert(source, sourceType, new GenericTypeDescriptor(targetType));\n\t\t\tif (target == null || (target.getClass().isArray() && Array.getLength(target) == 0) ||\n\t\t\t\t\t\t(target instanceof Collection<?> collection && collection.isEmpty())) {\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t\treturn Optional.of(target);\n\t\t}\n\t\telse {\n\t\t\treturn Optional.of(source);\n\t\t}\n\t}\n\n\n\t@SuppressWarnings(\"serial\")\n\tprivate static class GenericTypeDescriptor extends TypeDescriptor {\n\n\t\tpublic GenericTypeDescriptor(TypeDescriptor typeDescriptor) {\n\t\t\tsuper(typeDescriptor.getResolvableType().getGeneric(), null, typeDescriptor.getAnnotations());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ObjectToOptionalConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    Set<ConvertiblePair> convertibleTypes = CollectionUtils.newLinkedHashSet(3);\r\n    convertibleTypes.add(new ConvertiblePair(Collection.class, Optional.class));\r\n    convertibleTypes.add(new ConvertiblePair(Object[].class, Optional.class));\r\n    convertibleTypes.add(new ConvertiblePair(Object.class, Optional.class));\r\n    return convertibleTypes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ObjectToOptionalConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ObjectToOptionalConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]