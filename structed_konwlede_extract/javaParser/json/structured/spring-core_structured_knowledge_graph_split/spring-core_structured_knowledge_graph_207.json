[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#registerType(TypeReference,Consumer<JavaSerializationHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the type defined by the specified {@link TypeReference}\r\n * need to be serialized using java serialization.\r\n * @param type the type to register\r\n * @param serializationHint a builder to further customize the serialization\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic SerializationHints registerType(TypeReference type, @Nullable Consumer<JavaSerializationHint.Builder> serializationHint) {\r\n    JavaSerializationHint.Builder builder = new JavaSerializationHint.Builder(type);\r\n    if (serializationHint != null) {\r\n        serializationHint.accept(builder);\r\n    }\r\n    this.javaSerializationHints.add(builder.build());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHints#registerType(TypeReference,Consumer<JavaSerializationHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldClear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldClear() {\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    this.map.put(null, \"789\");\r\n    this.map.clear();\r\n    assertThat(this.map).isEmpty();\r\n    assertThat(this.map.containsKey(123)).isFalse();\r\n    assertThat(this.map.containsKey(456)).isFalse();\r\n    assertThat(this.map.containsKey(null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldClear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldClear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#registerType(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the type defined by the specified {@link TypeReference}\r\n * need to be serialized using java serialization.\r\n * @param type the type to register\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic SerializationHints registerType(TypeReference type) {\r\n    return registerType(type, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHints#registerType(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#registerType(Class<? extends Serializable>,Consumer<JavaSerializationHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the specified type need to be serialized using java\r\n * serialization.\r\n * @param type the type to register\r\n * @param serializationHint a builder to further customize the serialization\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic SerializationHints registerType(Class<? extends Serializable> type, @Nullable Consumer<JavaSerializationHint.Builder> serializationHint) {\r\n    return registerType(TypeReference.of(type), serializationHint);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHints#registerType(Class<? extends Serializable>,Consumer<JavaSerializationHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetKeySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetKeySet() {\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    this.map.put(null, \"789\");\r\n    Set<Integer> expected = new HashSet<>();\r\n    expected.add(123);\r\n    expected.add(456);\r\n    expected.add(null);\r\n    assertThat(this.map.keySet()).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetKeySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetKeySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#registerType(Class<? extends Serializable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the specified type need to be serialized using java\r\n * serialization.\r\n * @param type the type to register\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic SerializationHints registerType(Class<? extends Serializable> type) {\r\n    return registerType(type, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHints#registerType(Class<? extends Serializable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetValues() {\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    this.map.put(null, \"789\");\r\n    List<String> actual = new ArrayList<>(this.map.values());\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\"123\");\r\n    expected.add(null);\r\n    expected.add(\"789\");\r\n    actual.sort(NULL_SAFE_STRING_SORT);\r\n    expected.sort(NULL_SAFE_STRING_SORT);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetEntrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetEntrySet() {\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    this.map.put(null, \"789\");\r\n    HashMap<Integer, String> expected = new HashMap<>();\r\n    expected.put(123, \"123\");\r\n    expected.put(456, null);\r\n    expected.put(null, \"789\");\r\n    assertThat(this.map.entrySet()).isEqualTo(expected.entrySet());\r\n}",
    "tailType": "method_code"
  }
]