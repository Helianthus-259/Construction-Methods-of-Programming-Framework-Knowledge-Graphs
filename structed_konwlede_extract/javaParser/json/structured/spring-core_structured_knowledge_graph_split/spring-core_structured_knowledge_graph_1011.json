[
  {
    "head": "org.springframework.core.io.buffer.BufferComponentIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.BufferComponentIterator#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.BufferComponentIterator#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\nimport io.netty5.buffer.Buffer;\nimport io.netty5.buffer.BufferAllocator;\nimport io.netty5.buffer.CompositeBuffer;\nimport io.netty5.buffer.DefaultBufferAllocators;\n\nimport org.springframework.util.Assert;\n\n/**\n * Implementation of the {@code DataBufferFactory} interface based on a\n * Netty 5 {@link BufferAllocator}.\n *\n * @author Violeta Georgieva\n * @author Arjen Poutsma\n * @since 6.0\n */\npublic class Netty5DataBufferFactory implements DataBufferFactory {\n\n\tprivate final BufferAllocator bufferAllocator;\n\n\n\t/**\n\t * Create a new {@code Netty5DataBufferFactory} based on the given factory.\n\t * @param bufferAllocator the factory to use\n\t */\n\tpublic Netty5DataBufferFactory(BufferAllocator bufferAllocator) {\n\t\tAssert.notNull(bufferAllocator, \"BufferAllocator must not be null\");\n\t\tthis.bufferAllocator = bufferAllocator;\n\t}\n\n\n\t/**\n\t * Return the {@code BufferAllocator} used by this factory.\n\t */\n\tpublic BufferAllocator getBufferAllocator() {\n\t\treturn this.bufferAllocator;\n\t}\n\n\t@Override\n\t@Deprecated\n\tpublic Netty5DataBuffer allocateBuffer() {\n\t\tBuffer buffer = this.bufferAllocator.allocate(256);\n\t\treturn new Netty5DataBuffer(buffer, this);\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer allocateBuffer(int initialCapacity) {\n\t\tBuffer buffer = this.bufferAllocator.allocate(initialCapacity);\n\t\treturn new Netty5DataBuffer(buffer, this);\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer wrap(ByteBuffer byteBuffer) {\n\t\tBuffer buffer = this.bufferAllocator.copyOf(byteBuffer);\n\t\treturn new Netty5DataBuffer(buffer, this);\n\t}\n\n\t@Override\n\tpublic Netty5DataBuffer wrap(byte[] bytes) {\n\t\tBuffer buffer = this.bufferAllocator.copyOf(bytes);\n\t\treturn new Netty5DataBuffer(buffer, this);\n\t}\n\n\t/**\n\t * Wrap the given Netty {@link Buffer} in a {@code Netty5DataBuffer}.\n\t * @param buffer the Netty buffer to wrap\n\t * @return the wrapped buffer\n\t */\n\tpublic Netty5DataBuffer wrap(Buffer buffer) {\n\t\tbuffer.touch(\"Wrap buffer\");\n\t\treturn new Netty5DataBuffer(buffer, this);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * <p>This implementation uses Netty's {@link CompositeBuffer}.\n\t */\n\t@Override\n\tpublic DataBuffer join(List<? extends DataBuffer> dataBuffers) {\n\t\tAssert.notEmpty(dataBuffers, \"DataBuffer List must not be empty\");\n\t\tif (dataBuffers.size() == 1) {\n\t\t\treturn dataBuffers.get(0);\n\t\t}\n\t\tCompositeBuffer composite = this.bufferAllocator.compose();\n\t\tfor (DataBuffer dataBuffer : dataBuffers) {\n\t\t\tAssert.isInstanceOf(Netty5DataBuffer.class, dataBuffer);\n\t\t\tcomposite.extendWith(((Netty5DataBuffer) dataBuffer).getNativeBuffer().send());\n\t\t}\n\t\treturn new Netty5DataBuffer(composite, this);\n\t}\n\n\t@Override\n\tpublic boolean isDirect() {\n\t\treturn this.bufferAllocator.getAllocationType().isDirect();\n\t}\n\n\t/**\n\t * Return the given Netty {@link DataBuffer} as a {@link Buffer}.\n\t * <p>Returns the {@linkplain Netty5DataBuffer#getNativeBuffer() native buffer}\n\t * if {@code buffer} is a {@link Netty5DataBuffer}; returns\n\t * {@link BufferAllocator#copyOf(ByteBuffer)} otherwise.\n\t * @param buffer the {@code DataBuffer} to return a {@code Buffer} for\n\t * @return the netty {@code Buffer}\n\t */\n\tpublic static Buffer toBuffer(DataBuffer buffer) {\n\t\tif (buffer instanceof Netty5DataBuffer netty5DataBuffer) {\n\t\t\treturn netty5DataBuffer.getNativeBuffer();\n\t\t}\n\t\telse {\n\t\t\tByteBuffer byteBuffer = ByteBuffer.allocate(buffer.readableByteCount());\n\t\t\tbuffer.toByteBuffer(byteBuffer);\n\t\t\treturn DefaultBufferAllocators.preferredAllocator().copyOf(byteBuffer);\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Netty5DataBufferFactory (\" + this.bufferAllocator + \")\";\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory#bufferAllocator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#bufferAllocator",
    "headType": "field",
    "relation": "haveType",
    "tail": "BufferAllocator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#getBufferAllocator()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@code BufferAllocator} used by this factory.\r\n */\r\npublic BufferAllocator getBufferAllocator() {\r\n    return this.bufferAllocator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory#getBufferAllocator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic Netty5DataBuffer allocateBuffer() {\r\n    Buffer buffer = this.bufferAllocator.allocate(256);\r\n    return new Netty5DataBuffer(buffer, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Netty5DataBuffer allocateBuffer(int initialCapacity) {\r\n    Buffer buffer = this.bufferAllocator.allocate(initialCapacity);\r\n    return new Netty5DataBuffer(buffer, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Netty5DataBuffer wrap(ByteBuffer byteBuffer) {\r\n    Buffer buffer = this.bufferAllocator.copyOf(byteBuffer);\r\n    return new Netty5DataBuffer(buffer, this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.Netty5DataBufferFactory#wrap(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.Netty5DataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Netty5DataBuffer wrap(byte[] bytes) {\r\n    Buffer buffer = this.bufferAllocator.copyOf(bytes);\r\n    return new Netty5DataBuffer(buffer, this);\r\n}",
    "tailType": "method_code"
  }
]