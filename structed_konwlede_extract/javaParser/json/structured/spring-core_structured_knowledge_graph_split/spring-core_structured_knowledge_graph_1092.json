[
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isDebugEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#isTraceEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is trace logging currently enabled?\r\n */\r\npublic boolean isTraceEnabled() {\r\n    return this.log.isTraceEnabled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#isTraceEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#fatal(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Plain log methods\r\n/**\r\n * Log a message with fatal log level.\r\n * @param message the message to log\r\n */\r\npublic void fatal(CharSequence message) {\r\n    this.log.fatal(message);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#fatal(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#fatal(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with fatal log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void fatal(Throwable cause, CharSequence message) {\r\n    this.log.fatal(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#fatal(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#error(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with error log level.\r\n * @param message the message to log\r\n */\r\npublic void error(CharSequence message) {\r\n    this.log.error(message);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#error(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#error(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with error log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void error(Throwable cause, CharSequence message) {\r\n    this.log.error(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#error(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#warn(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with warn log level.\r\n * @param message the message to log\r\n */\r\npublic void warn(CharSequence message) {\r\n    this.log.warn(message);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#warn(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#warn(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with warn log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void warn(Throwable cause, CharSequence message) {\r\n    this.log.warn(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#warn(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#info(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with info log level.\r\n * @param message the message to log\r\n */\r\npublic void info(CharSequence message) {\r\n    this.log.info(message);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#info(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#info(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with info log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void info(Throwable cause, CharSequence message) {\r\n    this.log.info(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#info(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#debug(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with debug log level.\r\n * @param message the message to log\r\n */\r\npublic void debug(CharSequence message) {\r\n    this.log.debug(message);\r\n}",
    "tailType": "method_code"
  }
]