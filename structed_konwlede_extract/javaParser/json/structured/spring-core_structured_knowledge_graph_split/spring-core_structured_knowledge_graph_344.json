[
  {
    "head": "org.springframework.asm.ClassReader#getMaxStringLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a conservative estimate of the maximum length of the strings contained in the class's\r\n * constant pool table.\r\n *\r\n * @return a conservative estimate of the maximum length of the strings contained in the class's\r\n *     constant pool table.\r\n */\r\npublic int getMaxStringLength() {\r\n    return maxStringLength;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#getMaxStringLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readByte(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a byte value in this {@link ClassReader}. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\r\n * @return the read value.\r\n */\r\npublic int readByte(final int offset) {\r\n    return classFileBuffer[offset] & 0xFF;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readByte(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readBytes(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads several bytes in this {@link ClassReader}. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start offset of the bytes to be read in this {@link ClassReader}.\r\n * @param length the number of bytes to read.\r\n * @return the read bytes.\r\n */\r\npublic byte[] readBytes(final int offset, final int length) {\r\n    byte[] result = new byte[length];\r\n    System.arraycopy(classFileBuffer, offset, result, 0, length);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readBytes(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readUnsignedShort(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads an unsigned short value in this {@link ClassReader}. <i>This method is intended for\r\n * {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start index of the value to be read in this {@link ClassReader}.\r\n * @return the read value.\r\n */\r\npublic int readUnsignedShort(final int offset) {\r\n    byte[] classBuffer = classFileBuffer;\r\n    return ((classBuffer[offset] & 0xFF) << 8) | (classBuffer[offset + 1] & 0xFF);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readUnsignedShort(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readShort(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a signed short value in this {@link ClassReader}. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\r\n * @return the read value.\r\n */\r\npublic short readShort(final int offset) {\r\n    byte[] classBuffer = classFileBuffer;\r\n    return (short) (((classBuffer[offset] & 0xFF) << 8) | (classBuffer[offset + 1] & 0xFF));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readShort(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readInt(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a signed int value in this {@link ClassReader}. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\r\n * @return the read value.\r\n */\r\npublic int readInt(final int offset) {\r\n    byte[] classBuffer = classFileBuffer;\r\n    return ((classBuffer[offset] & 0xFF) << 24) | ((classBuffer[offset + 1] & 0xFF) << 16) | ((classBuffer[offset + 2] & 0xFF) << 8) | (classBuffer[offset + 3] & 0xFF);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readInt(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readLong(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a signed long value in this {@link ClassReader}. <i>This method is intended for {@link\r\n * Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\r\n *\r\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\r\n * @return the read value.\r\n */\r\npublic long readLong(final int offset) {\r\n    long l1 = readInt(offset);\r\n    long l0 = readInt(offset + 4) & 0xFFFFFFFFL;\r\n    return (l1 << 32) | l0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readLong(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readUTF8(int,char[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a CONSTANT_Utf8 constant pool entry in this {@link ClassReader}. <i>This method is\r\n * intended for {@link Attribute} sub classes, and is normally not needed by class generators or\r\n * adapters.</i>\r\n *\r\n * @param offset the start offset of an unsigned short value in this {@link ClassReader}, whose\r\n *     value is the index of a CONSTANT_Utf8 entry in the class's constant pool table.\r\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently\r\n *     large. It is not automatically resized.\r\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\r\n */\r\n// DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility).\r\npublic String readUTF8(final int offset, final char[] charBuffer) {\r\n    int constantPoolEntryIndex = readUnsignedShort(offset);\r\n    if (offset == 0 || constantPoolEntryIndex == 0) {\r\n        return null;\r\n    }\r\n    return readUtf(constantPoolEntryIndex, charBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readUTF8(int,char[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readUtf(int,char[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a CONSTANT_Utf8 constant pool entry in {@link #classFileBuffer}.\r\n *\r\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool\r\n *     table.\r\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently\r\n *     large. It is not automatically resized.\r\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\r\n */\r\nfinal String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {\r\n    String value = constantUtf8Values[constantPoolEntryIndex];\r\n    if (value != null) {\r\n        return value;\r\n    }\r\n    int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex];\r\n    return constantUtf8Values[constantPoolEntryIndex] = readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readUtf(int,char[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readUtf(int,int,char[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads an UTF8 string in {@link #classFileBuffer}.\r\n *\r\n * @param utfOffset the start offset of the UTF8 string to be read.\r\n * @param utfLength the length of the UTF8 string to be read.\r\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently\r\n *     large. It is not automatically resized.\r\n * @return the String corresponding to the specified UTF8 string.\r\n */\r\nprivate String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {\r\n    int currentOffset = utfOffset;\r\n    int endOffset = currentOffset + utfLength;\r\n    int strLength = 0;\r\n    byte[] classBuffer = classFileBuffer;\r\n    while (currentOffset < endOffset) {\r\n        int currentByte = classBuffer[currentOffset++];\r\n        if ((currentByte & 0x80) == 0) {\r\n            charBuffer[strLength++] = (char) (currentByte & 0x7F);\r\n        } else if ((currentByte & 0xE0) == 0xC0) {\r\n            charBuffer[strLength++] = (char) (((currentByte & 0x1F) << 6) + (classBuffer[currentOffset++] & 0x3F));\r\n        } else {\r\n            charBuffer[strLength++] = (char) (((currentByte & 0xF) << 12) + ((classBuffer[currentOffset++] & 0x3F) << 6) + (classBuffer[currentOffset++] & 0x3F));\r\n        }\r\n    }\r\n    return new String(charBuffer, 0, strLength);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readUtf(int,int,char[])",
    "tailType": "method"
  }
]