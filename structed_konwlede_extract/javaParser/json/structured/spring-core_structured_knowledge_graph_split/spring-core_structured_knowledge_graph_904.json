[
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#narrow(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#upcast(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Cast this {@link TypeDescriptor} to a superclass or implemented interface\r\n * preserving annotations and nested type context.\r\n * @param superType the supertype to cast to (can be {@code null})\r\n * @return a new TypeDescriptor for the up-cast type\r\n * @throws IllegalArgumentException if this type is not assignable to the super-type\r\n * @since 3.2\r\n */\r\n@Nullable\r\npublic TypeDescriptor upcast(@Nullable Class<?> superType) {\r\n    if (superType == null) {\r\n        return null;\r\n    }\r\n    Assert.isAssignable(superType, getType());\r\n    return new TypeDescriptor(getResolvableType().as(superType), superType, getAnnotations());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#upcast(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#upcast(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of this type: the fully qualified class name.\r\n */\r\npublic String getName() {\r\n    return ClassUtils.getQualifiedName(getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is this type a primitive type?\r\n */\r\npublic boolean isPrimitive() {\r\n    return getType().isPrimitive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the annotations associated with this type descriptor, if any.\r\n * @return the annotations, or an empty array if none\r\n */\r\npublic Annotation[] getAnnotations() {\r\n    return this.annotatedElement.getAnnotations();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#hasAnnotation(Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if this type descriptor has the specified annotation.\r\n * <p>As of Spring Framework 4.2, this method supports arbitrary levels\r\n * of meta-annotations.\r\n * @param annotationType the annotation type\r\n * @return {@code true} if the annotation is present\r\n */\r\npublic boolean hasAnnotation(Class<? extends Annotation> annotationType) {\r\n    if (this.annotatedElement.isEmpty()) {\r\n        // Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations()\r\n        // to return a copy of the array, whereas we can do it more efficiently here.\r\n        return false;\r\n    }\r\n    return AnnotatedElementUtils.isAnnotated(this.annotatedElement, annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#hasAnnotation(Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getAnnotation(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the annotation of the specified {@code annotationType} that is on this type descriptor.\r\n * <p>As of Spring Framework 4.2, this method supports arbitrary levels of meta-annotations.\r\n * @param annotationType the annotation type\r\n * @return the annotation, or {@code null} if no such annotation exists on this type descriptor\r\n */\r\n@Nullable\r\npublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {\r\n    if (this.annotatedElement.isEmpty()) {\r\n        // Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations()\r\n        // to return a copy of the array, whereas we can do it more efficiently here.\r\n        return null;\r\n    }\r\n    return AnnotatedElementUtils.getMergedAnnotation(this.annotatedElement, annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getAnnotation(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getAnnotation(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isAssignableTo(TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns true if an object of this type descriptor can be assigned to the location\r\n * described by the given type descriptor.\r\n * <p>For example, {@code valueOf(String.class).isAssignableTo(valueOf(CharSequence.class))}\r\n * returns {@code true} because a String value can be assigned to a CharSequence variable.\r\n * On the other hand, {@code valueOf(Number.class).isAssignableTo(valueOf(Integer.class))}\r\n * returns {@code false} because, while all Integers are Numbers, not all Numbers are Integers.\r\n * <p>For arrays, collections, and maps, element and key/value types are checked if declared.\r\n * For example, a {@code List<String>} field value is assignable to a {@code Collection<CharSequence>}\r\n * field, but {@code List<Number>} is not assignable to {@code List<Integer>}.\r\n * @return {@code true} if this type is assignable to the type represented by the provided\r\n * type descriptor\r\n * @see #getObjectType()\r\n */\r\npublic boolean isAssignableTo(TypeDescriptor typeDescriptor) {\r\n    boolean typesAssignable = typeDescriptor.getObjectType().isAssignableFrom(getObjectType());\r\n    if (!typesAssignable) {\r\n        return false;\r\n    }\r\n    if (isArray() && typeDescriptor.isArray()) {\r\n        return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());\r\n    } else if (isCollection() && typeDescriptor.isCollection()) {\r\n        return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());\r\n    } else if (isMap() && typeDescriptor.isMap()) {\r\n        return isNestedAssignable(getMapKeyTypeDescriptor(), typeDescriptor.getMapKeyTypeDescriptor()) && isNestedAssignable(getMapValueTypeDescriptor(), typeDescriptor.getMapValueTypeDescriptor());\r\n    } else {\r\n        return true;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isAssignableTo(TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isNestedAssignable(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isNestedAssignable(@Nullable TypeDescriptor nestedTypeDescriptor, @Nullable TypeDescriptor otherNestedTypeDescriptor) {\r\n    return (nestedTypeDescriptor == null || otherNestedTypeDescriptor == null || nestedTypeDescriptor.isAssignableTo(otherNestedTypeDescriptor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isNestedAssignable(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is this type a {@link Collection} type?\r\n */\r\npublic boolean isCollection() {\r\n    return Collection.class.isAssignableFrom(getType());\r\n}",
    "tailType": "method_code"
  }
]