[
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#hasNamespacesFeature()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#hasNamespacePrefixesFeature()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces-prefixes} is turned on.\r\n */\r\nprotected boolean hasNamespacePrefixesFeature() {\r\n    return this.namespacePrefixesFeature;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#hasNamespacePrefixesFeature()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#toQualifiedName(QName)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@code QName} to a qualified name, as used by DOM and SAX.\r\n * The returned string has a format of {@code prefix:localName} if the\r\n * prefix is set, or just {@code localName} if not.\r\n * @param qName the {@code QName}\r\n * @return the qualified name\r\n */\r\nprotected String toQualifiedName(QName qName) {\r\n    String prefix = qName.getPrefix();\r\n    if (!StringUtils.hasLength(prefix)) {\r\n        return qName.getLocalPart();\r\n    } else {\r\n        return prefix + \":\" + qName.getLocalPart();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#toQualifiedName(QName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parse(InputSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the StAX XML reader passed at construction-time.\r\n * <p><b>NOTE:</b>: The given {@code InputSource} is not read, but ignored.\r\n * @param ignored is ignored\r\n * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}\r\n */\r\n@Override\r\npublic final void parse(InputSource ignored) throws SAXException {\r\n    parse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#parse(InputSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parse(InputSource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parse(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the StAX XML reader passed at construction-time.\r\n * <p><b>NOTE:</b>: The given system identifier is not read, but ignored.\r\n * @param ignored is ignored\r\n * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}\r\n */\r\n@Override\r\npublic final void parse(String ignored) throws SAXException {\r\n    parse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#parse(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parse(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parse()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void parse() throws SAXException {\r\n    try {\r\n        parseInternal();\r\n    } catch (XMLStreamException ex) {\r\n        Locator locator = null;\r\n        if (ex.getLocation() != null) {\r\n            locator = new StaxLocator(ex.getLocation());\r\n        }\r\n        SAXParseException saxException = new SAXParseException(ex.getMessage(), locator, ex);\r\n        if (getErrorHandler() != null) {\r\n            getErrorHandler().fatalError(saxException);\r\n        } else {\r\n            throw saxException;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#parse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#parseInternal()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Template method that parses the StAX reader passed at construction-time.\r\n */\r\nprotected abstract void parseInternal() throws SAXException, XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#parseInternal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#startPrefixMapping(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Start the prefix mapping for the given prefix.\r\n * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)\r\n */\r\nprotected void startPrefixMapping(@Nullable String prefix, String namespace) throws SAXException {\r\n    if (getContentHandler() != null && StringUtils.hasLength(namespace)) {\r\n        if (prefix == null) {\r\n            prefix = \"\";\r\n        }\r\n        if (!namespace.equals(this.namespaces.get(prefix))) {\r\n            getContentHandler().startPrefixMapping(prefix, namespace);\r\n            this.namespaces.put(prefix, namespace);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#startPrefixMapping(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader#endPrefixMapping(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * End the prefix mapping for the given prefix.\r\n * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\r\n */\r\nprotected void endPrefixMapping(String prefix) throws SAXException {\r\n    if (getContentHandler() != null && this.namespaces.containsKey(prefix)) {\r\n        getContentHandler().endPrefixMapping(prefix);\r\n        this.namespaces.remove(prefix);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxXMLReader#endPrefixMapping(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxXMLReader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractXMLReader",
    "tailType": "class"
  }
]