[
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapSourceTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionMapNotGenericTarget() {\r\n    Map<String, List<String>> map = new HashMap<>();\r\n    map.put(\"1\", Arrays.asList(\"9\", \"12\"));\r\n    map.put(\"2\", Arrays.asList(\"37\", \"23\"));\r\n    assertThat(conversionService.canConvert(Map.class, Map.class)).isTrue();\r\n    assertThat((Map<?, ?>) conversionService.convert(map, Map.class)).isSameAs(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTargetCollectionToObjectInteraction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectionMapNotGenericTargetCollectionToObjectInteraction() {\r\n    Map<String, List<String>> map = new HashMap<>();\r\n    map.put(\"1\", Arrays.asList(\"9\", \"12\"));\r\n    map.put(\"2\", Arrays.asList(\"37\", \"23\"));\r\n    conversionService.addConverter(new CollectionToCollectionConverter(conversionService));\r\n    conversionService.addConverter(new CollectionToObjectConverter(conversionService));\r\n    assertThat(conversionService.canConvert(Map.class, Map.class)).isTrue();\r\n    assertThat((Map<?, ?>) conversionService.convert(map, Map.class)).isSameAs(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTargetCollectionToObjectInteraction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#collectionMapNotGenericTargetCollectionToObjectInteraction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyMap() throws Exception {\r\n    Map<String, String> map = new HashMap<>();\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(map);\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"emptyMapTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    assertThat(conversionService.convert(map, sourceType, targetType)).isSameAs(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapNoTargetGenericInfo()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyMapNoTargetGenericInfo() {\r\n    Map<String, String> map = new HashMap<>();\r\n    assertThat(conversionService.canConvert(Map.class, Map.class)).isTrue();\r\n    assertThat((Map<?, ?>) conversionService.convert(map, Map.class)).isSameAs(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapNoTargetGenericInfo()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapNoTargetGenericInfo()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapDifferentTargetImplType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyMapDifferentTargetImplType() throws Exception {\r\n    Map<String, String> map = new HashMap<>();\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(map);\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"emptyMapDifferentTarget\"));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(result).isEqualTo(map);\r\n    assertThat(result.getClass()).isEqualTo(LinkedHashMap.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapDifferentTargetImplType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#emptyMapDifferentTargetImplType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#noDefaultConstructorCopyNotRequired()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noDefaultConstructorCopyNotRequired() {\r\n    // SPR-9284\r\n    NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<>(Collections.<String, Integer>singletonMap(\"1\", 1));\r\n    TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));\r\n    TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType);\r\n    assertThat(result).isEqualTo(map);\r\n    assertThat(result.getClass()).isEqualTo(NoDefaultConstructorMap.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapToMapConverterTests#noDefaultConstructorCopyNotRequired()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#noDefaultConstructorCopyNotRequired()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapToMapConverterTests#multiValueMapToMultiValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid multiValueMapToMultiValueMap() throws Exception {\r\n    DefaultConversionService.addDefaultConverters(conversionService);\r\n    MultiValueMap<String, Integer> source = new LinkedMultiValueMap<>();\r\n    source.put(\"a\", Arrays.asList(1, 2, 3));\r\n    source.put(\"b\", Arrays.asList(4, 5, 6));\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"multiValueMapTarget\"));\r\n    MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType);\r\n    assertThat(converted).hasSize(2);\r\n    assertThat(converted.get(\"a\")).isEqualTo(Arrays.asList(\"1\", \"2\", \"3\"));\r\n    assertThat(converted.get(\"b\")).isEqualTo(Arrays.asList(\"4\", \"5\", \"6\"));\r\n}",
    "tailType": "method_code"
  }
]