[
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#index",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayOutputStream#closed",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#closed",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#write(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Overridden methods\r\n@Override\r\npublic void write(int datum) throws IOException {\r\n    if (this.closed) {\r\n        throw new IOException(\"Stream closed\");\r\n    }\r\n    if (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {\r\n        addBuffer(1);\r\n    }\r\n    // store the byte\r\n    this.buffers.getLast()[this.index++] = (byte) datum;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#write(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#write(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#write(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void write(byte[] data, int offset, int length) throws IOException {\r\n    if (offset < 0 || offset + length > data.length || length < 0) {\r\n        throw new IndexOutOfBoundsException();\r\n    } else if (this.closed) {\r\n        throw new IOException(\"Stream closed\");\r\n    } else {\r\n        if (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {\r\n            addBuffer(length);\r\n        }\r\n        if (this.index + length > this.buffers.getLast().length) {\r\n            int pos = offset;\r\n            do {\r\n                if (this.index == this.buffers.getLast().length) {\r\n                    addBuffer(length);\r\n                }\r\n                int copyLength = this.buffers.getLast().length - this.index;\r\n                if (length < copyLength) {\r\n                    copyLength = length;\r\n                }\r\n                System.arraycopy(data, pos, this.buffers.getLast(), this.index, copyLength);\r\n                pos += copyLength;\r\n                this.index += copyLength;\r\n                length -= copyLength;\r\n            } while (length > 0);\r\n        } else {\r\n            // copy in the sub-array\r\n            System.arraycopy(data, offset, this.buffers.getLast(), this.index, length);\r\n            this.index += length;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#write(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#write(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() {\r\n    this.closed = true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert this stream's contents to a string by decoding the bytes using the\r\n * platform's default character set. The length of the new {@code String}\r\n * is a function of the character set, and hence may not be equal to the\r\n * size of the buffers.\r\n * <p>This method always replaces malformed-input and unmappable-character\r\n * sequences with the default replacement string for the platform's\r\n * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\r\n * class should be used when more control over the decoding process is\r\n * required.\r\n * @return a String decoded from this stream's contents\r\n * @see #toString(Charset)\r\n */\r\n@Override\r\npublic String toString() {\r\n    return toString(Charset.defaultCharset());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#toString(Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert this stream's contents to a string by decoding the bytes using the\r\n * specified {@link Charset}.\r\n * @param charset the {@link Charset} to use to decode the bytes\r\n * @return a String decoded from this stream's contents\r\n * @since 6.1.2\r\n * @see #toString()\r\n */\r\npublic String toString(Charset charset) {\r\n    if (size() == 0) {\r\n        return \"\";\r\n    }\r\n    if (this.buffers.size() == 1) {\r\n        return new String(this.buffers.getFirst(), 0, this.index, charset);\r\n    }\r\n    return new String(toByteArrayUnsafe(), charset);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#toString(Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "// Custom methods\r\n/**\r\n * Return the number of bytes stored in this {@code FastByteArrayOutputStream}.\r\n */\r\npublic int size() {\r\n    return (this.alreadyBufferedSize + this.index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStream#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStream#toByteArrayUnsafe()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert this stream's contents to a byte array and return the byte array.\r\n * <p>Also replaces the internal structures with the byte array to\r\n * conserve memory: if the byte array is being created anyway, we might\r\n * as well as use it. This approach also means that if this method is\r\n * called twice without any writes in the interim, the second call is\r\n * a no-op.\r\n * <p>This method is \"unsafe\" as it returns the internal buffer.\r\n * Callers should not modify the returned buffer.\r\n * @return the current contents of this stream as a byte array\r\n * @see #size()\r\n * @see #toByteArray()\r\n */\r\npublic byte[] toByteArrayUnsafe() {\r\n    int totalSize = size();\r\n    if (totalSize == 0) {\r\n        return new byte[0];\r\n    }\r\n    resize(totalSize);\r\n    return this.buffers.getFirst();\r\n}",
    "tailType": "method_code"
  }
]