[
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#decodeToMonoWithEmptyFlux()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#decodeToMonoWithEmptyFlux()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#stringBuffer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private DataBuffer stringBuffer(String value) {\r\n    byte[] bytes = value.getBytes(StandardCharsets.UTF_8);\r\n    DataBuffer buffer = this.bufferFactory.allocateBuffer(bytes.length);\r\n    buffer.write(bytes);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#stringBuffer(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#charBuffer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private CharBuffer charBuffer(String value) {\r\n    return CharBuffer.allocate(value.length()).put(value).flip();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#charBuffer(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.CharSequenceEncoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.Charset;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.codec.AbstractEncoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static java.nio.charset.StandardCharsets.ISO_8859_1;\nimport static java.nio.charset.StandardCharsets.US_ASCII;\nimport static java.nio.charset.StandardCharsets.UTF_16;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Sebastien Deleuze\n */\nclass CharSequenceEncoderTests extends AbstractEncoderTests<CharSequenceEncoder> {\n\n\tprivate final String foo = \"foo\";\n\n\tprivate final String bar = \"bar\";\n\n\tCharSequenceEncoderTests() {\n\t\tsuper(CharSequenceEncoder.textPlainOnly());\n\t}\n\n\n\t@Override\n\t@Test\n\tprotected void canEncode() {\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(String.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(StringBuilder.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(StringBuffer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(String.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isFalse();\n\n\t\t// SPR-15464\n\t\tassertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void encode() {\n\t\tFlux<CharSequence> input = Flux.just(this.foo, this.bar);\n\n\t\ttestEncodeAll(input, CharSequence.class, step -> step\n\t\t\t\t.consumeNextWith(expectString(this.foo))\n\t\t\t\t.consumeNextWith(expectString(this.bar))\n\t\t\t\t.verifyComplete());\n\t}\n\n\t@Test\n\tvoid calculateCapacity() {\n\t\tString sequence = \"Hello World!\";\n\t\tStream.of(UTF_8, UTF_16, ISO_8859_1, US_ASCII, Charset.forName(\"BIG5\"))\n\t\t\t\t.forEach(charset -> {\n\t\t\t\t\tint capacity = this.encoder.calculateCapacity(sequence, charset);\n\t\t\t\t\tint length = sequence.length();\n\t\t\t\t\tassertThat(capacity).as(String.format(\"%s has capacity %d; length %d\", charset, capacity, length))\n\t\t\t\t\t\t\t.isGreaterThanOrEqualTo(length);\n\t\t\t\t});\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.CharSequenceEncoderTests#foo",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#foo",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.CharSequenceEncoderTests#bar",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#bar",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(String.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(StringBuilder.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(StringBuffer.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(String.class), MimeTypeUtils.APPLICATION_JSON)).isFalse();\r\n    // SPR-15464\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<CharSequence> input = Flux.just(this.foo, this.bar);\r\n    testEncodeAll(input, CharSequence.class, step -> step.consumeNextWith(expectString(this.foo)).consumeNextWith(expectString(this.bar)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharSequenceEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharSequenceEncoderTests#encode()",
    "tailType": "method"
  }
]