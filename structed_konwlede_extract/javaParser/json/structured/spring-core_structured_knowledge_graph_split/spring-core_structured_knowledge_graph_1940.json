[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#mapKeyType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapKeyType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapKeyTypePreserveContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapKeyTypePreserveContext() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(getClass().getField(\"mapPreserveContext\"));\r\n    assertThat(desc.getMapKeyTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    List<Integer> value = new ArrayList<>(3);\r\n    desc = desc.getMapKeyTypeDescriptor(value);\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getAnnotation(FieldAnnotation.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#mapKeyTypePreserveContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapKeyTypePreserveContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapValueType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapValueType() {\r\n    TypeDescriptor desc = TypeDescriptor.valueOf(Map.class);\r\n    Integer value = 3;\r\n    desc = desc.getMapValueTypeDescriptor(value);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#mapValueType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapValueType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapValueTypePreserveContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mapValueTypePreserveContext() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(getClass().getField(\"mapPreserveContext\"));\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    List<Integer> value = new ArrayList<>(3);\r\n    desc = desc.getMapValueTypeDescriptor(value);\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getAnnotation(FieldAnnotation.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#mapValueTypePreserveContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#mapValueTypePreserveContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#equality()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equality() throws Exception {\r\n    TypeDescriptor t1 = TypeDescriptor.valueOf(String.class);\r\n    TypeDescriptor t2 = TypeDescriptor.valueOf(String.class);\r\n    TypeDescriptor t3 = TypeDescriptor.valueOf(Date.class);\r\n    TypeDescriptor t4 = TypeDescriptor.valueOf(Date.class);\r\n    TypeDescriptor t5 = TypeDescriptor.valueOf(List.class);\r\n    TypeDescriptor t6 = TypeDescriptor.valueOf(List.class);\r\n    TypeDescriptor t7 = TypeDescriptor.valueOf(Map.class);\r\n    TypeDescriptor t8 = TypeDescriptor.valueOf(Map.class);\r\n    assertThat(t2).isEqualTo(t1);\r\n    assertThat(t4).isEqualTo(t3);\r\n    assertThat(t6).isEqualTo(t5);\r\n    assertThat(t8).isEqualTo(t7);\r\n    TypeDescriptor t9 = new TypeDescriptor(getClass().getField(\"listField\"));\r\n    TypeDescriptor t10 = new TypeDescriptor(getClass().getField(\"listField\"));\r\n    assertThat(t10).isEqualTo(t9);\r\n    TypeDescriptor t11 = new TypeDescriptor(getClass().getField(\"mapField\"));\r\n    TypeDescriptor t12 = new TypeDescriptor(getClass().getField(\"mapField\"));\r\n    assertThat(t12).isEqualTo(t11);\r\n    MethodParameter testAnnotatedMethod = new MethodParameter(getClass().getMethod(\"testAnnotatedMethod\", String.class), 0);\r\n    TypeDescriptor t13 = new TypeDescriptor(testAnnotatedMethod);\r\n    TypeDescriptor t14 = new TypeDescriptor(testAnnotatedMethod);\r\n    assertThat(t14).isEqualTo(t13);\r\n    TypeDescriptor t15 = new TypeDescriptor(testAnnotatedMethod);\r\n    TypeDescriptor t16 = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"testAnnotatedMethodDifferentAnnotationValue\", String.class), 0));\r\n    assertThat(t16).isNotEqualTo(t15);\r\n    TypeDescriptor t17 = new TypeDescriptor(testAnnotatedMethod);\r\n    TypeDescriptor t18 = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"test5\", String.class), 0));\r\n    assertThat(t18).isNotEqualTo(t17);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#equality()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#equality()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableTypes() {\r\n    assertThat(TypeDescriptor.valueOf(Integer.class).isAssignableTo(TypeDescriptor.valueOf(Number.class))).isTrue();\r\n    assertThat(TypeDescriptor.valueOf(Number.class).isAssignableTo(TypeDescriptor.valueOf(Integer.class))).isFalse();\r\n    assertThat(TypeDescriptor.valueOf(String.class).isAssignableTo(TypeDescriptor.valueOf(String[].class))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#isAssignableTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableElementTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableElementTypes() throws Exception {\r\n    assertThat(new TypeDescriptor(getClass().getField(\"listField\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"listField\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"notGenericList\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"listField\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"listField\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"notGenericList\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"isAssignableElementTypes\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"listField\")))).isFalse();\r\n    assertThat(TypeDescriptor.valueOf(List.class).isAssignableTo(new TypeDescriptor(getClass().getField(\"listField\")))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#isAssignableElementTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableElementTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]