[
  {
    "head": "org.springframework.util.CompositeCollection#second",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<E>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CompositeCollection#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int size() {\r\n    return this.first.size() + this.second.size();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#isEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isEmpty() {\r\n    return this.first.isEmpty() && this.second.isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#isEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#isEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#contains(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean contains(Object o) {\r\n    if (this.first.contains(o)) {\r\n        return true;\r\n    } else {\r\n        return this.second.contains(o);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#contains(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#contains(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#iterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Iterator<E> iterator() {\r\n    CompositeIterator<E> iterator = new CompositeIterator<>();\r\n    iterator.add(this.first.iterator());\r\n    iterator.add(this.second.iterator());\r\n    return iterator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#iterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#iterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#toArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object[] toArray() {\r\n    Object[] result = new Object[size()];\r\n    Object[] firstArray = this.first.toArray();\r\n    Object[] secondArray = this.second.toArray();\r\n    System.arraycopy(firstArray, 0, result, 0, firstArray.length);\r\n    System.arraycopy(secondArray, 0, result, firstArray.length, secondArray.length);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#toArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#toArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#toArray(T[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n// Overridden method does not define nullness\r\n@SuppressWarnings({ \"unchecked\", \"NullAway\" })\r\n@Nullable\r\npublic <T> T[] toArray(@Nullable T[] a) {\r\n    int size = this.size();\r\n    @Nullable\r\n    T[] result;\r\n    if (a.length >= size) {\r\n        result = a;\r\n    } else {\r\n        result = (T[]) Array.newInstance(a.getClass().getComponentType(), size);\r\n    }\r\n    int idx = 0;\r\n    for (E e : this) {\r\n        result[idx++] = (T) e;\r\n    }\r\n    if (result.length > size) {\r\n        result[size] = null;\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#toArray(T[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#toArray(T[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollection#toArray(T[])",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]