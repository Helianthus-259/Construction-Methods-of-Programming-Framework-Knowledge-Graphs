[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22702\r\n@Test\r\nvoid findAnnotationWithRepeatablesElements() {\r\n    assertThat(AnnotationUtils.findAnnotation(TestRepeatablesClass.class, TestRepeatable.class)).isNull();\r\n    assertThat(AnnotationUtils.findAnnotation(TestRepeatablesClass.class, TestRepeatableContainer.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationWithRepeatablesElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23856\r\n@Test\r\nvoid findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations() {\r\n    MyRepeatableContainer annotation = AnnotationUtils.findAnnotation(MyRepeatableMeta1And2.class, MyRepeatableContainer.class);\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.value()).extracting(MyRepeatable::value).containsExactly(\"meta1\", \"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23856\r\n@Test\r\nvoid findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod() throws Exception {\r\n    Method method = getClass().getDeclaredMethod(\"methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations\");\r\n    MyRepeatableContainer annotation = AnnotationUtils.findAnnotation(method, MyRepeatableContainer.class);\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.value()).extracting(MyRepeatable::value).containsExactly(\"meta1\", \"meta2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationFindsRepeatableContainerOnComposedAnnotationMetaAnnotatedWithRepeatableAnnotationsOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23929\r\n@Test\r\nvoid findDeprecatedAnnotation() {\r\n    assertThat(getAnnotation(DeprecatedClass.class, Deprecated.class)).isNotNull();\r\n    assertThat(getAnnotation(SubclassOfDeprecatedClass.class, Deprecated.class)).isNull();\r\n    assertThat(findAnnotation(DeprecatedClass.class, Deprecated.class)).isNotNull();\r\n    assertThat(findAnnotation(SubclassOfDeprecatedClass.class, Deprecated.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findDeprecatedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SafeVarargs\r\nstatic <T> T[] asArray(T... arr) {\r\n    return arr;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#asArray(T)",
    "headType": "method",
    "relation": "use",
    "tail": "@SafeVarargs",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@MyRepeatableMeta1And2\r\nvoid methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#methodWithComposedAnnotationMetaAnnotatedWithRepeatableAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@MyRepeatableMeta1And2",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.InterfaceWithMetaAnnotation",
    "tailType": "class"
  }
]