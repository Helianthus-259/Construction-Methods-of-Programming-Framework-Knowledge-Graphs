[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportIsEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportIsEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldContainKey() {\r\n    assertThat(this.map.containsKey(123)).isFalse();\r\n    assertThat(this.map.containsKey(456)).isFalse();\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    assertThat(this.map.containsKey(123)).isTrue();\r\n    assertThat(this.map.containsKey(456)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldContainValue() {\r\n    assertThat(this.map.containsValue(\"123\")).isFalse();\r\n    assertThat(this.map.containsValue(null)).isFalse();\r\n    this.map.put(123, \"123\");\r\n    this.map.put(456, null);\r\n    assertThat(this.map.containsValue(\"123\")).isTrue();\r\n    assertThat(this.map.containsValue(null)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldContainValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.io.Serializable;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Gather the need for Java serialization at runtime.\n *\n * @author Stephane Nicoll\n * @since 6.0\n * @see Serializable\n */\npublic class SerializationHints {\n\n\tprivate final Set<JavaSerializationHint> javaSerializationHints;\n\n\n\tpublic SerializationHints() {\n\t\tthis.javaSerializationHints = new LinkedHashSet<>();\n\t}\n\n\t/**\n\t * Return the {@link JavaSerializationHint java serialization hints} for types\n\t * that need to be serialized using Java serialization at runtime.\n\t * @return a stream of {@link JavaSerializationHint java serialization hints}\n\t */\n\tpublic Stream<JavaSerializationHint> javaSerializationHints() {\n\t\treturn this.javaSerializationHints.stream();\n\t}\n\n\t/**\n\t * Register that the type defined by the specified {@link TypeReference}\n\t * need to be serialized using java serialization.\n\t * @param type the type to register\n\t * @param serializationHint a builder to further customize the serialization\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic SerializationHints registerType(TypeReference type, @Nullable Consumer<JavaSerializationHint.Builder> serializationHint) {\n\t\tJavaSerializationHint.Builder builder = new JavaSerializationHint.Builder(type);\n\t\tif (serializationHint != null) {\n\t\t\tserializationHint.accept(builder);\n\t\t}\n\t\tthis.javaSerializationHints.add(builder.build());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that the type defined by the specified {@link TypeReference}\n\t * need to be serialized using java serialization.\n\t * @param type the type to register\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic SerializationHints registerType(TypeReference type) {\n\t\treturn registerType(type, null);\n\t}\n\n\t/**\n\t * Register that the specified type need to be serialized using java\n\t * serialization.\n\t * @param type the type to register\n\t * @param serializationHint a builder to further customize the serialization\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic SerializationHints registerType(Class<? extends Serializable> type, @Nullable Consumer<JavaSerializationHint.Builder> serializationHint) {\n\t\treturn registerType(TypeReference.of(type), serializationHint);\n\t}\n\n\t/**\n\t * Register that the specified type need to be serialized using java\n\t * serialization.\n\t * @param type the type to register\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic SerializationHints registerType(Class<? extends Serializable> type) {\n\t\treturn registerType(type, null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsInMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldRemoveWhenKeyIsInMap() {\r\n    this.map.put(123, null);\r\n    this.map.put(456, \"456\");\r\n    this.map.put(null, \"789\");\r\n    assertThat(this.map.remove(123)).isNull();\r\n    assertThat(this.map.remove(456)).isEqualTo(\"456\");\r\n    assertThat(this.map.remove(null)).isEqualTo(\"789\");\r\n    assertThat(this.map).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsInMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsInMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.SerializationHints#javaSerializationHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#javaSerializationHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<JavaSerializationHint>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsNotInMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldRemoveWhenKeyIsNotInMap() {\r\n    assertThat(this.map.remove(123)).isNull();\r\n    assertThat(this.map.remove(null)).isNull();\r\n    assertThat(this.map).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsNotInMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveWhenKeyIsNotInMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints#javaSerializationHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link JavaSerializationHint java serialization hints} for types\r\n * that need to be serialized using Java serialization at runtime.\r\n * @return a stream of {@link JavaSerializationHint java serialization hints}\r\n */\r\npublic Stream<JavaSerializationHint> javaSerializationHints() {\r\n    return this.javaSerializationHints.stream();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHints#javaSerializationHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutAll() {\r\n    Map<Integer, String> m = new HashMap<>();\r\n    m.put(123, \"123\");\r\n    m.put(456, null);\r\n    m.put(null, \"789\");\r\n    this.map.putAll(m);\r\n    assertThat(this.map).hasSize(3);\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n    assertThat(this.map.get(456)).isNull();\r\n    assertThat(this.map.get(null)).isEqualTo(\"789\");\r\n}",
    "tailType": "method_code"
  }
]