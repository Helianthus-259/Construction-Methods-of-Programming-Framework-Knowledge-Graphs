[
  {
    "head": "org.springframework.util.PropertiesPersisterTests#storeProperties(Properties,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String storeProperties(Properties props, String header, boolean useWriter) throws IOException {\r\n    DefaultPropertiesPersister persister = new DefaultPropertiesPersister();\r\n    String propCopy;\r\n    if (useWriter) {\r\n        StringWriter propWriter = new StringWriter();\r\n        persister.store(props, propWriter, header);\r\n        propCopy = propWriter.toString();\r\n    } else {\r\n        ByteArrayOutputStream propOut = new ByteArrayOutputStream();\r\n        persister.store(props, propOut, header);\r\n        propCopy = new String(propOut.toByteArray());\r\n    }\r\n    if (header != null) {\r\n        assertThat(propCopy).contains(header);\r\n    }\r\n    assertThat(propCopy).contains(\"\\ncode1=message1\");\r\n    assertThat(propCopy).contains(\"\\ncode2=message2\");\r\n    return propCopy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PropertiesPersisterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PropertiesPersisterTests#storeProperties(Properties,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#put112(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\r\n * necessary.\r\n *\r\n * @param byteValue1 a byte.\r\n * @param byteValue2 another byte.\r\n * @param shortValue a short.\r\n * @return this byte vector.\r\n */\r\nfinal ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 4 > data.length) {\r\n        enlarge(4);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) byteValue1;\r\n    currentData[currentLength++] = (byte) byteValue2;\r\n    currentData[currentLength++] = (byte) (shortValue >>> 8);\r\n    currentData[currentLength++] = (byte) shortValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#put112(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#putInt(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\r\n *\r\n * @param intValue an int.\r\n * @return this byte vector.\r\n */\r\npublic ByteVector putInt(final int intValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 4 > data.length) {\r\n        enlarge(4);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) (intValue >>> 24);\r\n    currentData[currentLength++] = (byte) (intValue >>> 16);\r\n    currentData[currentLength++] = (byte) (intValue >>> 8);\r\n    currentData[currentLength++] = (byte) intValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putInt(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#put122(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\r\n * if necessary.\r\n *\r\n * @param byteValue a byte.\r\n * @param shortValue1 a short.\r\n * @param shortValue2 another short.\r\n * @return this byte vector.\r\n */\r\nfinal ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) {\r\n    int currentLength = length;\r\n    if (currentLength + 5 > data.length) {\r\n        enlarge(5);\r\n    }\r\n    byte[] currentData = data;\r\n    currentData[currentLength++] = (byte) byteValue;\r\n    currentData[currentLength++] = (byte) (shortValue1 >>> 8);\r\n    currentData[currentLength++] = (byte) shortValue1;\r\n    currentData[currentLength++] = (byte) (shortValue2 >>> 8);\r\n    currentData[currentLength++] = (byte) shortValue2;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#put122(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#putLong(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\r\n *\r\n * @param longValue a long.\r\n * @return this byte vector.\r\n */\r\npublic ByteVector putLong(final long longValue) {\r\n    int currentLength = length;\r\n    if (currentLength + 8 > data.length) {\r\n        enlarge(8);\r\n    }\r\n    byte[] currentData = data;\r\n    int intValue = (int) (longValue >>> 32);\r\n    currentData[currentLength++] = (byte) (intValue >>> 24);\r\n    currentData[currentLength++] = (byte) (intValue >>> 16);\r\n    currentData[currentLength++] = (byte) (intValue >>> 8);\r\n    currentData[currentLength++] = (byte) intValue;\r\n    intValue = (int) longValue;\r\n    currentData[currentLength++] = (byte) (intValue >>> 24);\r\n    currentData[currentLength++] = (byte) (intValue >>> 16);\r\n    currentData[currentLength++] = (byte) (intValue >>> 8);\r\n    currentData[currentLength++] = (byte) intValue;\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putLong(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#putUTF8(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts an UTF8 string into this byte vector. The byte vector is automatically enlarged if\r\n * necessary.\r\n *\r\n * @param stringValue a String whose UTF8 encoded length must be less than 65536.\r\n * @return this byte vector.\r\n */\r\n// DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility).\r\npublic ByteVector putUTF8(final String stringValue) {\r\n    int charLength = stringValue.length();\r\n    if (charLength > 65535) {\r\n        throw new IllegalArgumentException(\"UTF8 string too large\");\r\n    }\r\n    int currentLength = length;\r\n    if (currentLength + 2 + charLength > data.length) {\r\n        enlarge(2 + charLength);\r\n    }\r\n    byte[] currentData = data;\r\n    // Optimistic algorithm: instead of computing the byte length and then serializing the string\r\n    // (which requires two loops), we assume the byte length is equal to char length (which is the\r\n    // most frequent case), and we start serializing the string right away. During the\r\n    // serialization, if we find that this assumption is wrong, we continue with the general method.\r\n    currentData[currentLength++] = (byte) (charLength >>> 8);\r\n    currentData[currentLength++] = (byte) charLength;\r\n    for (int i = 0; i < charLength; ++i) {\r\n        char charValue = stringValue.charAt(i);\r\n        if (charValue >= '\\u0001' && charValue <= '\\u007F') {\r\n            currentData[currentLength++] = (byte) charValue;\r\n        } else {\r\n            length = currentLength;\r\n            return encodeUtf8(stringValue, i, 65535);\r\n        }\r\n    }\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putUTF8(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#encodeUtf8(String,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts an UTF8 string into this byte vector. The byte vector is automatically enlarged if\r\n * necessary. The string length is encoded in two bytes before the encoded characters, if there is\r\n * space for that (i.e. if this.length - offset - 2 &gt;= 0).\r\n *\r\n * @param stringValue the String to encode.\r\n * @param offset the index of the first character to encode. The previous characters are supposed\r\n *     to have already been encoded, using only one byte per character.\r\n * @param maxByteLength the maximum byte length of the encoded string, including the already\r\n *     encoded characters.\r\n * @return this byte vector.\r\n */\r\nfinal ByteVector encodeUtf8(final String stringValue, final int offset, final int maxByteLength) {\r\n    int charLength = stringValue.length();\r\n    int byteLength = offset;\r\n    for (int i = offset; i < charLength; ++i) {\r\n        char charValue = stringValue.charAt(i);\r\n        if (charValue >= 0x0001 && charValue <= 0x007F) {\r\n            byteLength++;\r\n        } else if (charValue <= 0x07FF) {\r\n            byteLength += 2;\r\n        } else {\r\n            byteLength += 3;\r\n        }\r\n    }\r\n    if (byteLength > maxByteLength) {\r\n        throw new IllegalArgumentException(\"UTF8 string too large\");\r\n    }\r\n    // Compute where 'byteLength' must be stored in 'data', and store it at this location.\r\n    int byteLengthOffset = length - offset - 2;\r\n    if (byteLengthOffset >= 0) {\r\n        data[byteLengthOffset] = (byte) (byteLength >>> 8);\r\n        data[byteLengthOffset + 1] = (byte) byteLength;\r\n    }\r\n    if (length + byteLength - offset > data.length) {\r\n        enlarge(byteLength - offset);\r\n    }\r\n    int currentLength = length;\r\n    for (int i = offset; i < charLength; ++i) {\r\n        char charValue = stringValue.charAt(i);\r\n        if (charValue >= 0x0001 && charValue <= 0x007F) {\r\n            data[currentLength++] = (byte) charValue;\r\n        } else if (charValue <= 0x07FF) {\r\n            data[currentLength++] = (byte) (0xC0 | charValue >> 6 & 0x1F);\r\n            data[currentLength++] = (byte) (0x80 | charValue & 0x3F);\r\n        } else {\r\n            data[currentLength++] = (byte) (0xE0 | charValue >> 12 & 0xF);\r\n            data[currentLength++] = (byte) (0x80 | charValue >> 6 & 0x3F);\r\n            data[currentLength++] = (byte) (0x80 | charValue & 0x3F);\r\n        }\r\n    }\r\n    length = currentLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#encodeUtf8(String,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#putByteArray(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\r\n * necessary.\r\n *\r\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\r\n *     bytes into this byte vector.\r\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\r\n * @param byteLength number of bytes of byteArrayValue that must be copied.\r\n * @return this byte vector.\r\n */\r\npublic ByteVector putByteArray(final byte[] byteArrayValue, final int byteOffset, final int byteLength) {\r\n    if (length + byteLength > data.length) {\r\n        enlarge(byteLength);\r\n    }\r\n    if (byteArrayValue != null) {\r\n        System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength);\r\n    }\r\n    length += byteLength;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#putByteArray(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ByteVector#enlarge(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Enlarges this byte vector so that it can receive 'size' more bytes.\r\n *\r\n * @param size number of additional bytes that this byte vector should be able to receive.\r\n */\r\nprivate void enlarge(final int size) {\r\n    if (length > data.length) {\r\n        throw new AssertionError(\"Internal error\");\r\n    }\r\n    int doubleCapacity = 2 * data.length;\r\n    int minimalCapacity = length + size;\r\n    byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\r\n    System.arraycopy(data, 0, newData, 0, length);\r\n    data = newData;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ByteVector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ByteVector#enlarge(int)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PropertyPlaceholderHelperTests",
    "tailType": "class"
  }
]