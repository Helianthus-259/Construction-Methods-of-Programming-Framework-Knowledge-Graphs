[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongSourceTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongTypeArgument()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertWrongTypeArgument() {\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(\"BOGUS\", Integer.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongTypeArgument()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertWrongTypeArgument()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertSuperSourceType() {\r\n    conversionService.addConverter(CharSequence.class, Integer.class, source -> Integer.valueOf(source.toString()));\r\n    Integer result = conversionService.convert(\"3\", Integer.class);\r\n    assertThat(result).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-8718\r\n@Test\r\nvoid convertSuperTarget() {\r\n    conversionService.addConverter(new ColorConverter());\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(\"#000000\", SystemColor.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertSuperTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertObjectToPrimitive() {\r\n    assertThat(conversionService.canConvert(String.class, boolean.class)).isFalse();\r\n    conversionService.addConverter(new StringToBooleanConverter());\r\n    assertThat(conversionService.canConvert(String.class, boolean.class)).isTrue();\r\n    Boolean b = conversionService.convert(\"true\", boolean.class);\r\n    assertThat(b).isTrue();\r\n    assertThat(conversionService.canConvert(TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(boolean.class))).isTrue();\r\n    b = (Boolean) conversionService.convert(\"true\", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(boolean.class));\r\n    assertThat(b).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitiveViaConverterFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertObjectToPrimitiveViaConverterFactory() {\r\n    assertThat(conversionService.canConvert(String.class, int.class)).isFalse();\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(String.class, int.class)).isTrue();\r\n    Integer three = conversionService.convert(\"3\", int.class);\r\n    assertThat(three).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitiveViaConverterFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertObjectToPrimitiveViaConverterFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#genericConverterDelegatingBackToConversionServiceConverterNotFound()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid genericConverterDelegatingBackToConversionServiceConverterNotFound() {\r\n    conversionService.addConverter(new ObjectToArrayConverter(conversionService));\r\n    assertThat(conversionService.canConvert(String.class, Integer[].class)).isFalse();\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(\"3,4,5\", Integer[].class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#genericConverterDelegatingBackToConversionServiceConverterNotFound()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#genericConverterDelegatingBackToConversionServiceConverterNotFound()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#listToIterableConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid listToIterableConversion() {\r\n    List<Object> raw = List.of(\"one\", \"two\");\r\n    Object converted = conversionService.convert(raw, Iterable.class);\r\n    assertThat(converted).isSameAs(raw);\r\n}",
    "tailType": "method_code"
  }
]