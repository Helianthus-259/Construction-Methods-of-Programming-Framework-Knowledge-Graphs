[
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static MethodInfo getMethodInfo(Member member) {\r\n    return getMethodInfo(member, member.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getMethodInfo(Member)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static ClassInfo getClassInfo(final Class clazz) {\r\n    final Type type = Type.getType(clazz);\r\n    final Type sc = (clazz.getSuperclass() == null) ? null : Type.getType(clazz.getSuperclass());\r\n    return new ClassInfo() {\r\n\r\n        @Override\r\n        public Type getType() {\r\n            return type;\r\n        }\r\n\r\n        @Override\r\n        public Type getSuperType() {\r\n            return sc;\r\n        }\r\n\r\n        @Override\r\n        public Type[] getInterfaces() {\r\n            return TypeUtils.getTypes(clazz.getInterfaces());\r\n        }\r\n\r\n        @Override\r\n        public int getModifiers() {\r\n            return clazz.getModifiers();\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getClassInfo(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
    "headType": "method",
    "relation": "provide",
    "tail": "// used by MethodInterceptorGenerated generated code\r\npublic static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) {\r\n    Map map = new HashMap();\r\n    for (Method method : methods) {\r\n        map.put(method.getName() + Type.getMethodDescriptor(method), method);\r\n    }\r\n    Method[] result = new Method[namesAndDescriptors.length / 2];\r\n    for (int i = 0; i < result.length; i++) {\r\n        result[i] = (Method) map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]);\r\n        if (result[i] == null) {\r\n            // TODO: error?\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findMethods(String[],Method[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.RejectModifierPredicate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport java.lang.reflect.Member;\n\npublic class RejectModifierPredicate implements Predicate {\n    private int rejectMask;\n\n    public RejectModifierPredicate(int rejectMask) {\n        this.rejectMask = rejectMask;\n    }\n\n    @Override\n\tpublic boolean evaluate(Object arg) {\n        return (((Member)arg).getModifiers() & rejectMask) == 0;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.RejectModifierPredicate#rejectMask",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate#rejectMask",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean evaluate(Object arg) {\r\n    return (((Member) arg).getModifiers() & rejectMask) == 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.RejectModifierPredicate#evaluate(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.Signature",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.Signature",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport org.springframework.asm.Type;\n\n/**\n * A representation of a method signature, containing the method name,\n * return type, and parameter types.\n */\npublic class Signature {\n    private String name;\n    private String desc;\n\n    public Signature(String name, String desc) {\n        // TODO: better error checking\n        if (name.indexOf('(') >= 0) {\n            throw new IllegalArgumentException(\"Name '\" + name + \"' is invalid\");\n        }\n        this.name = name;\n        this.desc = desc;\n    }\n\n    public Signature(String name, Type returnType, Type[] argumentTypes) {\n        this(name, Type.getMethodDescriptor(returnType, argumentTypes));\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescriptor() {\n        return desc;\n    }\n\n    public Type getReturnType() {\n        return Type.getReturnType(desc);\n    }\n\n    public Type[] getArgumentTypes() {\n        return Type.getArgumentTypes(desc);\n    }\n\n    @Override\n\tpublic String toString() {\n        return name + desc;\n    }\n\n    @Override\n\tpublic boolean equals(Object o) {\n        if (o == null) {\n\t\t\treturn false;\n\t\t}\n        if (!(o instanceof Signature other)) {\n\t\t\treturn false;\n\t\t}\n        return name.equals(other.name) && desc.equals(other.desc);\n    }\n\n    @Override\n\tpublic int hashCode() {\n        return name.hashCode() ^ desc.hashCode();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.Signature",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.Signature#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.Signature#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]