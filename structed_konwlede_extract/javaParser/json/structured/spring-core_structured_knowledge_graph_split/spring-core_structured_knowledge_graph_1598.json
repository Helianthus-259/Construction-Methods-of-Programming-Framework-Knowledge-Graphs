[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#hasAnnotationForPlainTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnNonAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesOnNonAnnotatedClass() {\r\n    assertThat(getAllAnnotationAttributes(NonAnnotatedClass.class, TX_NAME)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnNonAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnNonAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesOnClassWithLocalAnnotation() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(TxConfig.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on TxConfig\").isNotNull();\r\n    assertThat(attributes.get(\"value\")).as(\"value for TxConfig\").isEqualTo(List.of(\"TxConfig\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(SubClassWithInheritedAnnotation.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on SubClassWithInheritedAnnotation\").isNotNull();\r\n    assertThat(attributes.get(\"qualifier\")).isEqualTo(asList(\"composed2\", \"transactionManager\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(SubSubClassWithInheritedAnnotation.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on SubSubClassWithInheritedAnnotation\").isNotNull();\r\n    assertThat(attributes.get(\"qualifier\")).isEqualTo(List.of(\"transactionManager\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(SubSubClassWithInheritedComposedAnnotation.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on SubSubClassWithInheritedComposedAnnotation\").isNotNull();\r\n    assertThat(attributes.get(\"qualifier\")).isEqualTo(List.of(\"composed1\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If the \"value\" entry contains both \"DerivedTxConfig\" AND \"TxConfig\", then\r\n * the algorithm is accidentally picking up shadowed annotations of the same\r\n * type within the class hierarchy. Such undesirable behavior would cause the\r\n * logic in {@code org.springframework.context.annotation.ProfileCondition}\r\n * to fail.\r\n */\r\n@Test\r\nvoid getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass() {\r\n    // See org.springframework.core.env.EnvironmentSystemIntegrationTests#mostSpecificDerivedClassDrivesEnvironment_withDevEnvAndDerivedDevConfigClass\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(DerivedTxConfig.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on DerivedTxConfig\").isNotNull();\r\n    assertThat(attributes.get(\"value\")).as(\"value for DerivedTxConfig\").isEqualTo(List.of(\"DerivedTxConfig\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithLocalAnnotationThatShadowsAnnotationFromSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Note: this functionality is required by {@code org.springframework.context.annotation.ProfileCondition}.\r\n */\r\n@Test\r\nvoid getAllAnnotationAttributesOnClassWithMultipleComposedAnnotations() {\r\n    // See org.springframework.core.env.EnvironmentSystemIntegrationTests\r\n    MultiValueMap<String, Object> attributes = getAllAnnotationAttributes(TxFromMultipleComposedAnnotations.class, TX_NAME);\r\n    assertThat(attributes).as(\"Annotation attributes map for @Transactional on TxFromMultipleComposedAnnotations\").isNotNull();\r\n    assertThat(attributes.get(\"value\")).as(\"value for TxFromMultipleComposedAnnotations.\").isEqualTo(asList(\"TxInheritedComposed\", \"TxComposed\"));\r\n}",
    "tailType": "method_code"
  }
]