[
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getBoundPrefixes() {\r\n    context.bindNamespaceUri(\"prefix1\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix2\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix3\", additionalNamespaceUri);\r\n    assertThat(getItemSet(context.getBoundPrefixes())).as(\"Returns all bound prefixes\").containsExactlyInAnyOrder(\"prefix1\", \"prefix2\", \"prefix3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getBoundPrefixes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Collects the attributes of this field into the given set of attribute prototypes.\r\n *\r\n * @param attributePrototypes a set of attribute prototypes.\r\n */\r\nfinal void collectAttributePrototypes(final Attribute.Set attributePrototypes) {\r\n    attributePrototypes.addAttributes(firstAttribute);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#collectAttributePrototypes(Attribute.Set)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "extend",
    "tail": "FieldVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clear() {\r\n    context.bindNamespaceUri(\"prefix1\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix2\", namespaceUri);\r\n    context.bindNamespaceUri(\"prefix3\", additionalNamespaceUri);\r\n    context.clear();\r\n    assertThat(context.getBoundPrefixes().hasNext()).as(\"All bound prefixes were removed\").isFalse();\r\n    assertThat(context.getPrefixes(namespaceUri).hasNext()).as(\"All bound namespace URIs were removed\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid removeBinding() {\r\n    context.removeBinding(unboundPrefix);\r\n    context.bindNamespaceUri(prefix, namespaceUri);\r\n    context.removeBinding(prefix);\r\n    assertThat(context.getNamespaceURI(prefix)).as(\"Returns default namespace URI for removed prefix\").isEmpty();\r\n    assertThat(context.getPrefix(namespaceUri)).as(\"#getPrefix returns null when all prefixes for a namespace URI were removed\").isNull();\r\n    assertThat(context.getPrefixes(namespaceUri).hasNext()).as(\"#getPrefixes returns an empty iterator when all prefixes for a namespace URI were removed\").isFalse();\r\n    context.bindNamespaceUri(\"prefix1\", additionalNamespaceUri);\r\n    context.bindNamespaceUri(\"prefix2\", additionalNamespaceUri);\r\n    context.removeBinding(\"prefix1\");\r\n    assertThat(context.getNamespaceURI(\"prefix1\")).as(\"Prefix was unbound\").isEmpty();\r\n    assertThat(context.getPrefix(additionalNamespaceUri)).as(\"#getPrefix returns a bound prefix after removal of another prefix for the same namespace URI\").isEqualTo(\"prefix2\");\r\n    assertThat(getItemSet(context.getPrefixes(additionalNamespaceUri))).as(\"Prefix was removed from namespace URI\").containsExactly(\"prefix2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#removeBinding()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getItemSet(Iterator<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Set<String> getItemSet(Iterator<String> iterator) {\r\n    Set<String> itemSet = new LinkedHashSet<>();\r\n    iterator.forEachRemaining(itemSet::add);\r\n    return itemSet;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getItemSet(Iterator<String>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxEventHandlerTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxEventHandlerTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.transform.Result;\n\n/**\n * @author Arjen Poutsma\n */\nclass StaxEventHandlerTests extends AbstractStaxHandlerTests {\n\n\t@Override\n\tprotected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {\n\t\tXMLOutputFactory outputFactory = XMLOutputFactory.newFactory();\n\t\tXMLEventWriter eventWriter = outputFactory.createXMLEventWriter(result);\n\t\treturn new StaxEventHandler(eventWriter);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventHandlerTests#createStaxHandler(Result)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AbstractStaxHandler createStaxHandler(Result result) throws XMLStreamException {\r\n    XMLOutputFactory outputFactory = XMLOutputFactory.newFactory();\r\n    XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(result);\r\n    return new StaxEventHandler(eventWriter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventHandlerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventHandlerTests#createStaxHandler(Result)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventHandlerTests#createStaxHandler(Result)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]