[
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromStreamToList() throws NoSuchFieldException {\r\n    this.conversionService.addConverter(Number.class, String.class, new ObjectToStringConverter());\r\n    Stream<Integer> stream = Stream.of(1, 2, 3);\r\n    TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField(\"listOfStrings\"));\r\n    Object result = this.conversionService.convert(stream, listOfStrings);\r\n    assertThat(result).asInstanceOf(list(String.class)).containsExactly(\"1\", \"2\", \"3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromStreamToArray() throws NoSuchFieldException {\r\n    this.conversionService.addConverterFactory(new NumberToNumberConverterFactory());\r\n    Stream<Integer> stream = Stream.of(1, 2, 3);\r\n    TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField(\"arrayOfLongs\"));\r\n    Object result = this.conversionService.convert(stream, arrayOfLongs);\r\n    assertThat(result).as(\"Converted object must not be null\").isNotNull();\r\n    assertThat(result.getClass().isArray()).as(\"Converted object must be an array\").isTrue();\r\n    Long[] content = (Long[]) result;\r\n    assertThat(content).containsExactly(1L, 2L, 3L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToRawList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromStreamToRawList() throws NoSuchFieldException {\r\n    Stream<Integer> stream = Stream.of(1, 2, 3);\r\n    TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField(\"rawList\"));\r\n    Object result = this.conversionService.convert(stream, listOfStrings);\r\n    assertThat(result).asInstanceOf(list(Object.class)).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToRawList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToRawList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArrayNoConverter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromStreamToArrayNoConverter() throws NoSuchFieldException {\r\n    Stream<Integer> stream = Stream.of(1, 2, 3);\r\n    TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField(\"arrayOfLongs\"));\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> this.conversionService.convert(stream, arrayOfLongs)).withCauseInstanceOf(ConverterNotFoundException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArrayNoConverter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromStreamToArrayNoConverter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromListToStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromListToStream() throws NoSuchFieldException {\r\n    this.conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    List<String> list = Arrays.asList(\"1\", \"2\", \"3\");\r\n    TypeDescriptor streamOfInteger = new TypeDescriptor(Types.class.getField(\"streamOfIntegers\"));\r\n    Object result = this.conversionService.convert(list, streamOfInteger);\r\n    assertThat(result).as(\"Converted object must be a stream\").isInstanceOf(Stream.class);\r\n    @SuppressWarnings(\"unchecked\")\r\n    Stream<Integer> content = (Stream<Integer>) result;\r\n    assertThat(content.mapToInt(x -> x).sum()).isEqualTo(6);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromListToStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromListToStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromArrayToStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertFromArrayToStream() throws NoSuchFieldException {\r\n    Integer[] array = new Integer[] { 1, 0, 1 };\r\n    this.conversionService.addConverter(Integer.class, Boolean.class, source -> source == 1);\r\n    TypeDescriptor streamOfBoolean = new TypeDescriptor(Types.class.getField(\"streamOfBooleans\"));\r\n    Object result = this.conversionService.convert(array, streamOfBoolean);\r\n    assertThat(result).asInstanceOf(stream(Boolean.class)).filteredOn(x -> x).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.StreamConverterTests#convertFromArrayToStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.StreamConverterTests#convertFromArrayToStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]