[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.io.Serializable;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.FutureTask;\nimport java.util.concurrent.ThreadFactory;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ConcurrencyThrottleSupport;\nimport org.springframework.util.CustomizableThreadCreator;\n\n/**\n * {@link TaskExecutor} implementation that fires up a new Thread for each task,\n * executing it asynchronously. Provides a virtual thread option on JDK 21.\n *\n * <p>Supports a graceful shutdown through {@link #setTaskTerminationTimeout},\n * at the expense of task tracking overhead per execution thread at runtime.\n * Supports limiting concurrent threads through {@link #setConcurrencyLimit}.\n * By default, the number of concurrent task executions is unlimited.\n *\n * <p><b>NOTE: This implementation does not reuse threads!</b> Consider a\n * thread-pooling TaskExecutor implementation instead, in particular for\n * executing a large number of short-lived tasks. Alternatively, on JDK 21,\n * consider setting {@link #setVirtualThreads} to {@code true}.\n *\n * <p><b>NOTE: This executor does not participate in context-level lifecycle\n * management.</b> Tasks on handed-off execution threads cannot be centrally\n * stopped and restarted; if such tight lifecycle management is necessary,\n * consider a common {@code ThreadPoolTaskExecutor} setup instead.\n *\n * @author Juergen Hoeller\n * @since 2.0\n * @see #setVirtualThreads\n * @see #setTaskTerminationTimeout\n * @see #setConcurrencyLimit\n * @see org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler\n * @see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\n */\n@SuppressWarnings(\"serial\")\npublic class SimpleAsyncTaskExecutor extends CustomizableThreadCreator\n\t\timplements AsyncTaskExecutor, Serializable, AutoCloseable {\n\n\t/**\n\t * Permit any number of concurrent invocations: that is, don't throttle concurrency.\n\t * @see ConcurrencyThrottleSupport#UNBOUNDED_CONCURRENCY\n\t */\n\tpublic static final int UNBOUNDED_CONCURRENCY = ConcurrencyThrottleSupport.UNBOUNDED_CONCURRENCY;\n\n\t/**\n\t * Switch concurrency 'off': that is, don't allow any concurrent invocations.\n\t * @see ConcurrencyThrottleSupport#NO_CONCURRENCY\n\t */\n\tpublic static final int NO_CONCURRENCY = ConcurrencyThrottleSupport.NO_CONCURRENCY;\n\n\n\t/** Internal concurrency throttle used by this executor. */\n\tprivate final ConcurrencyThrottleAdapter concurrencyThrottle = new ConcurrencyThrottleAdapter();\n\n\tprivate @Nullable VirtualThreadDelegate virtualThreadDelegate;\n\n\tprivate @Nullable ThreadFactory threadFactory;\n\n\tprivate @Nullable TaskDecorator taskDecorator;\n\n\tprivate long taskTerminationTimeout;\n\n\tprivate @Nullable Set<Thread> activeThreads;\n\n\tprivate volatile boolean active = true;\n\n\n\t/**\n\t * Create a new SimpleAsyncTaskExecutor with default thread name prefix.\n\t */\n\tpublic SimpleAsyncTaskExecutor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Create a new SimpleAsyncTaskExecutor with the given thread name prefix.\n\t * @param threadNamePrefix the prefix to use for the names of newly created threads\n\t */\n\tpublic SimpleAsyncTaskExecutor(String threadNamePrefix) {\n\t\tsuper(threadNamePrefix);\n\t}\n\n\t/**\n\t * Create a new SimpleAsyncTaskExecutor with the given external thread factory.\n\t * @param threadFactory the factory to use for creating new Threads\n\t */\n\tpublic SimpleAsyncTaskExecutor(ThreadFactory threadFactory) {\n\t\tthis.threadFactory = threadFactory;\n\t}\n\n\n\t/**\n\t * Switch this executor to virtual threads. Requires Java 21 or higher.\n\t * <p>The default is {@code false}, indicating platform threads.\n\t * Set this flag to {@code true} in order to create virtual threads instead.\n\t * @since 6.1\n\t */\n\tpublic void setVirtualThreads(boolean virtual) {\n\t\tthis.virtualThreadDelegate = (virtual ? new VirtualThreadDelegate() : null);\n\t}\n\n\t/**\n\t * Specify an external factory to use for creating new Threads,\n\t * instead of relying on the local properties of this executor.\n\t * <p>You may specify an inner ThreadFactory bean or also a ThreadFactory reference\n\t * obtained from JNDI (on a Jakarta EE server) or some other lookup mechanism.\n\t * @see #setThreadNamePrefix\n\t * @see #setThreadPriority\n\t */\n\tpublic void setThreadFactory(@Nullable ThreadFactory threadFactory) {\n\t\tthis.threadFactory = threadFactory;\n\t}\n\n\t/**\n\t * Return the external factory to use for creating new Threads, if any.\n\t */\n\tpublic final @Nullable ThreadFactory getThreadFactory() {\n\t\treturn this.threadFactory;\n\t}\n\n\t/**\n\t * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}\n\t * about to be executed.\n\t * <p>Note that such a decorator is not necessarily being applied to the\n\t * user-supplied {@code Runnable}/{@code Callable} but rather to the actual\n\t * execution callback (which may be a wrapper around the user-supplied task).\n\t * <p>The primary use case is to set some execution context around the task's\n\t * invocation, or to provide some monitoring/statistics for task execution.\n\t * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\n\t * is limited to plain {@code Runnable} execution via {@code execute} calls.\n\t * In case of {@code #submit} calls, the exposed {@code Runnable} will be a\n\t * {@code FutureTask} which does not propagate any exceptions; you might\n\t * have to cast it and call {@code Future#get} to evaluate exceptions.\n\t * @since 4.3\n\t */\n\tpublic void setTaskDecorator(TaskDecorator taskDecorator) {\n\t\tthis.taskDecorator = taskDecorator;\n\t}\n\n\t/**\n\t * Specify a timeout (in milliseconds) for task termination when closing\n\t * this executor. The default is 0, not waiting for task termination at all.\n\t * <p>Note that a concrete >0 timeout specified here will lead to the\n\t * wrapping of every submitted task into a task-tracking runnable which\n\t * involves considerable overhead in case of a high number of tasks.\n\t * However, for a modest level of submissions with longer-running\n\t * tasks, this is feasible in order to arrive at a graceful shutdown.\n\t * <p>Note that {@code SimpleAsyncTaskExecutor} does not participate in\n\t * a coordinated lifecycle stop but rather just awaits task termination\n\t * on {@link #close()}.\n\t * @param timeout the timeout in milliseconds\n\t * @since 6.1\n\t * @see #close()\n\t * @see org.springframework.scheduling.concurrent.ExecutorConfigurationSupport#setAwaitTerminationMillis\n\t */\n\tpublic void setTaskTerminationTimeout(long timeout) {\n\t\tAssert.isTrue(timeout >= 0, \"Timeout value must be >=0\");\n\t\tthis.taskTerminationTimeout = timeout;\n\t\tthis.activeThreads = (timeout > 0 ? ConcurrentHashMap.newKeySet() : null);\n\t}\n\n\t/**\n\t * Set the maximum number of parallel task executions allowed.\n\t * The default of -1 indicates no concurrency limit at all.\n\t * <p>This is the equivalent of a maximum pool size in a thread pool,\n\t * preventing temporary overload of the thread management system.\n\t * However, in contrast to a thread pool with a managed task queue,\n\t * this executor will block the submitter until the task can be\n\t * accepted when the configured concurrency limit has been reached.\n\t * If you prefer queue-based task hand-offs without such blocking,\n\t * consider using a {@code ThreadPoolTaskExecutor} instead.\n\t * @see #UNBOUNDED_CONCURRENCY\n\t * @see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor#setMaxPoolSize\n\t */\n\tpublic void setConcurrencyLimit(int concurrencyLimit) {\n\t\tthis.concurrencyThrottle.setConcurrencyLimit(concurrencyLimit);\n\t}\n\n\t/**\n\t * Return the maximum number of parallel task executions allowed.\n\t */\n\tpublic final int getConcurrencyLimit() {\n\t\treturn this.concurrencyThrottle.getConcurrencyLimit();\n\t}\n\n\t/**\n\t * Return whether the concurrency throttle is currently active.\n\t * @return {@code true} if the concurrency limit for this instance is active\n\t * @see #getConcurrencyLimit()\n\t * @see #setConcurrencyLimit\n\t */\n\tpublic final boolean isThrottleActive() {\n\t\treturn this.concurrencyThrottle.isThrottleActive();\n\t}\n\n\t/**\n\t * Return whether this executor is still active, i.e. not closed yet,\n\t * and therefore accepts further task submissions. Otherwise, it is\n\t * either in the task termination phase or entirely shut down already.\n\t * @since 6.1\n\t * @see #setTaskTerminationTimeout\n\t * @see #close()\n\t */\n\tpublic boolean isActive() {\n\t\treturn this.active;\n\t}\n\n\n\t/**\n\t * Executes the given task, within a concurrency throttle\n\t * if configured (through the superclass's settings).\n\t * @see #doExecute(Runnable)\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\t@Override\n\tpublic void execute(Runnable task) {\n\t\texecute(task, TIMEOUT_INDEFINITE);\n\t}\n\n\t/**\n\t * Executes the given task, within a concurrency throttle\n\t * if configured (through the superclass's settings).\n\t * <p>Executes urgent tasks (with 'immediate' timeout) directly,\n\t * bypassing the concurrency throttle (if active). All other\n\t * tasks are subject to throttling.\n\t * @see #TIMEOUT_IMMEDIATE\n\t * @see #doExecute(Runnable)\n\t */\n\t@Deprecated\n\t@Override\n\tpublic void execute(Runnable task, long startTimeout) {\n\t\tAssert.notNull(task, \"Runnable must not be null\");\n\t\tif (!isActive()) {\n\t\t\tthrow new TaskRejectedException(getClass().getSimpleName() + \" has been closed already\");\n\t\t}\n\n\t\tRunnable taskToUse = (this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);\n\t\tif (isThrottleActive() && startTimeout > TIMEOUT_IMMEDIATE) {\n\t\t\tthis.concurrencyThrottle.beforeAccess();\n\t\t\tdoExecute(new TaskTrackingRunnable(taskToUse));\n\t\t}\n\t\telse if (this.activeThreads != null) {\n\t\t\tdoExecute(new TaskTrackingRunnable(taskToUse));\n\t\t}\n\t\telse {\n\t\t\tdoExecute(taskToUse);\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"deprecation\")\n\t@Override\n\tpublic Future<?> submit(Runnable task) {\n\t\tFutureTask<Object> future = new FutureTask<>(task, null);\n\t\texecute(future, TIMEOUT_INDEFINITE);\n\t\treturn future;\n\t}\n\n\t@SuppressWarnings(\"deprecation\")\n\t@Override\n\tpublic <T> Future<T> submit(Callable<T> task) {\n\t\tFutureTask<T> future = new FutureTask<>(task);\n\t\texecute(future, TIMEOUT_INDEFINITE);\n\t\treturn future;\n\t}\n\n\t/**\n\t * Template method for the actual execution of a task.\n\t * <p>The default implementation creates a new Thread and starts it.\n\t * @param task the Runnable to execute\n\t * @see #newThread\n\t * @see Thread#start()\n\t */\n\tprotected void doExecute(Runnable task) {\n\t\tnewThread(task).start();\n\t}\n\n\t/**\n\t * Create a new Thread for the given task.\n\t * @param task the Runnable to create a Thread for\n\t * @return the new Thread instance\n\t * @since 6.1\n\t * @see #setVirtualThreads\n\t * @see #setThreadFactory\n\t * @see #createThread\n\t */\n\tprotected Thread newThread(Runnable task) {\n\t\tif (this.virtualThreadDelegate != null) {\n\t\t\treturn this.virtualThreadDelegate.newVirtualThread(nextThreadName(), task);\n\t\t}\n\t\telse {\n\t\t\treturn (this.threadFactory != null ? this.threadFactory.newThread(task) : createThread(task));\n\t\t}\n\t}\n\n\t/**\n\t * This close methods tracks the termination of active threads if a concrete\n\t * {@link #setTaskTerminationTimeout task termination timeout} has been set.\n\t * Otherwise, it is not necessary to close this executor.\n\t * @since 6.1\n\t */\n\t@Override\n\tpublic void close() {\n\t\tif (this.active) {\n\t\t\tthis.active = false;\n\t\t\tSet<Thread> threads = this.activeThreads;\n\t\t\tif (threads != null) {\n\t\t\t\tthreads.forEach(Thread::interrupt);\n\t\t\t\tsynchronized (threads) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!threads.isEmpty()) {\n\t\t\t\t\t\t\tthreads.wait(this.taskTerminationTimeout);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (InterruptedException ex) {\n\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Subclass of the general ConcurrencyThrottleSupport class,\n\t * making {@code beforeAccess()} and {@code afterAccess()}\n\t * visible to the surrounding class.\n\t */\n\tprivate static class ConcurrencyThrottleAdapter extends ConcurrencyThrottleSupport {\n\n\t\t@Override\n\t\tprotected void beforeAccess() {\n\t\t\tsuper.beforeAccess();\n\t\t}\n\n\t\t@Override\n\t\tprotected void afterAccess() {\n\t\t\tsuper.afterAccess();\n\t\t}\n\t}\n\n\n\t/**\n\t * Decorates a target task with active thread tracking\n\t * and concurrency throttle management, if necessary.\n\t */\n\tprivate class TaskTrackingRunnable implements Runnable {\n\n\t\tprivate final Runnable task;\n\n\t\tpublic TaskTrackingRunnable(Runnable task) {\n\t\t\tAssert.notNull(task, \"Task must not be null\");\n\t\t\tthis.task = task;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSet<Thread> threads = activeThreads;\n\t\t\tThread thread = null;\n\t\t\tif (threads != null) {\n\t\t\t\tthread = Thread.currentThread();\n\t\t\t\tthreads.add(thread);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.task.run();\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tif (threads != null) {\n\t\t\t\t\tthreads.remove(thread);\n\t\t\t\t\tif (!isActive()) {\n\t\t\t\t\t\tsynchronized (threads) {\n\t\t\t\t\t\t\tif (threads.isEmpty()) {\n\t\t\t\t\t\t\t\tthreads.notify();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconcurrencyThrottle.afterAccess();\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#UNBOUNDED_CONCURRENCY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#UNBOUNDED_CONCURRENCY",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#NO_CONCURRENCY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#NO_CONCURRENCY",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#concurrencyThrottle",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#concurrencyThrottle",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConcurrencyThrottleAdapter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#virtualThreadDelegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#virtualThreadDelegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "VirtualThreadDelegate",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#threadFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#threadFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "ThreadFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#taskDecorator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#taskDecorator",
    "headType": "field",
    "relation": "haveType",
    "tail": "TaskDecorator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#taskTerminationTimeout",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#taskTerminationTimeout",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#activeThreads",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#activeThreads",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Thread>",
    "tailType": "type"
  }
]