[
  {
    "head": "org.springframework.asm.Type#getOpcode(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a JVM instruction opcode adapted to this {@link Type}. This method must not be used for\r\n * method types.\r\n *\r\n * @param opcode a JVM instruction opcode. This opcode must be one of ILOAD, ISTORE, IALOAD,\r\n *     IASTORE, IADD, ISUB, IMUL, IDIV, IREM, INEG, ISHL, ISHR, IUSHR, IAND, IOR, IXOR and\r\n *     IRETURN.\r\n * @return an opcode that is similar to the given opcode, but adapted to this {@link Type}. For\r\n *     example, if this type is {@code float} and {@code opcode} is IRETURN, this method returns\r\n *     FRETURN.\r\n */\r\npublic int getOpcode(final int opcode) {\r\n    if (opcode == Opcodes.IALOAD || opcode == Opcodes.IASTORE) {\r\n        switch(sort) {\r\n            case BOOLEAN:\r\n            case BYTE:\r\n                return opcode + (Opcodes.BALOAD - Opcodes.IALOAD);\r\n            case CHAR:\r\n                return opcode + (Opcodes.CALOAD - Opcodes.IALOAD);\r\n            case SHORT:\r\n                return opcode + (Opcodes.SALOAD - Opcodes.IALOAD);\r\n            case INT:\r\n                return opcode;\r\n            case FLOAT:\r\n                return opcode + (Opcodes.FALOAD - Opcodes.IALOAD);\r\n            case LONG:\r\n                return opcode + (Opcodes.LALOAD - Opcodes.IALOAD);\r\n            case DOUBLE:\r\n                return opcode + (Opcodes.DALOAD - Opcodes.IALOAD);\r\n            case ARRAY:\r\n            case OBJECT:\r\n            case INTERNAL:\r\n                return opcode + (Opcodes.AALOAD - Opcodes.IALOAD);\r\n            case METHOD:\r\n            case VOID:\r\n                throw new UnsupportedOperationException();\r\n            default:\r\n                throw new AssertionError();\r\n        }\r\n    } else {\r\n        switch(sort) {\r\n            case VOID:\r\n                if (opcode != Opcodes.IRETURN) {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n                return Opcodes.RETURN;\r\n            case BOOLEAN:\r\n            case BYTE:\r\n            case CHAR:\r\n            case SHORT:\r\n            case INT:\r\n                return opcode;\r\n            case FLOAT:\r\n                return opcode + (Opcodes.FRETURN - Opcodes.IRETURN);\r\n            case LONG:\r\n                return opcode + (Opcodes.LRETURN - Opcodes.IRETURN);\r\n            case DOUBLE:\r\n                return opcode + (Opcodes.DRETURN - Opcodes.IRETURN);\r\n            case ARRAY:\r\n            case OBJECT:\r\n            case INTERNAL:\r\n                if (opcode != Opcodes.ILOAD && opcode != Opcodes.ISTORE && opcode != Opcodes.IRETURN) {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n                return opcode + (Opcodes.ARETURN - Opcodes.IRETURN);\r\n            case METHOD:\r\n                throw new UnsupportedOperationException();\r\n            default:\r\n                throw new AssertionError();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getOpcode(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Equals, hashCode and toString.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Tests if the given object is equal to this type.\r\n *\r\n * @param object the object to be compared to this type.\r\n * @return {@literal true} if the given object is equal to this type.\r\n */\r\n@Override\r\npublic boolean equals(final Object object) {\r\n    if (this == object) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof Type)) {\r\n        return false;\r\n    }\r\n    Type other = (Type) object;\r\n    if ((sort == INTERNAL ? OBJECT : sort) != (other.sort == INTERNAL ? OBJECT : other.sort)) {\r\n        return false;\r\n    }\r\n    int begin = valueBegin;\r\n    int end = valueEnd;\r\n    int otherBegin = other.valueBegin;\r\n    int otherEnd = other.valueEnd;\r\n    // Compare the values.\r\n    if (end - begin != otherEnd - otherBegin) {\r\n        return false;\r\n    }\r\n    for (int i = begin, j = otherBegin; i < end; i++, j++) {\r\n        if (valueBuffer.charAt(i) != other.valueBuffer.charAt(j)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.Type#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a hash code value for this type.\r\n *\r\n * @return a hash code value for this type.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    int hashCode = 13 * (sort == INTERNAL ? OBJECT : sort);\r\n    if (sort >= ARRAY) {\r\n        for (int i = valueBegin, end = valueEnd; i < end; i++) {\r\n            hashCode = 17 * (hashCode + valueBuffer.charAt(i));\r\n        }\r\n    }\r\n    return hashCode;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.Type#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a string representation of this type.\r\n *\r\n * @return the descriptor of this type.\r\n */\r\n@Override\r\npublic String toString() {\r\n    return getDescriptor();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.nullness",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.nullness.CustomNullableProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.nullness;\n\npublic interface CustomNullableProcessor {\n\n\t@org.springframework.core.testfixture.nullness.custom.Nullable\n\tString process(@org.springframework.core.testfixture.nullness.custom.Nullable String nullable);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@org.springframework.core.testfixture.nullness.custom.Nullable\r\nString process(@org.springframework.core.testfixture.nullness.custom.Nullable String nullable);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.CustomNullableProcessor#process(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@org.springframework.core.testfixture.nullness.custom.Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.TypePath",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.TypePath",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\n\npackage org.springframework.asm;\n\n/**\n * The path to a type argument, wildcard bound, array element type, or static inner type within an\n * enclosing type.\n *\n * @author Eric Bruneton\n */\npublic final class TypePath {\n\n  /** A type path step that steps into the element type of an array type. See {@link #getStep}. */\n  public static final int ARRAY_ELEMENT = 0;\n\n  /** A type path step that steps into the nested type of a class type. See {@link #getStep}. */\n  public static final int INNER_TYPE = 1;\n\n  /** A type path step that steps into the bound of a wildcard type. See {@link #getStep}. */\n  public static final int WILDCARD_BOUND = 2;\n\n  /** A type path step that steps into a type argument of a generic type. See {@link #getStep}. */\n  public static final int TYPE_ARGUMENT = 3;\n\n  /**\n   * The byte array where the 'type_path' structure - as defined in the Java Virtual Machine\n   * Specification (JVMS) - corresponding to this TypePath is stored. The first byte of the\n   * structure in this array is given by {@link #typePathOffset}.\n   *\n   * @see <a\n   *     href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20.2\">JVMS\n   *     4.7.20.2</a>\n   */\n  private final byte[] typePathContainer;\n\n  /** The offset of the first byte of the type_path JVMS structure in {@link #typePathContainer}. */\n  private final int typePathOffset;\n\n  /**\n   * Constructs a new TypePath.\n   *\n   * @param typePathContainer a byte array containing a type_path JVMS structure.\n   * @param typePathOffset the offset of the first byte of the type_path structure in\n   *     typePathContainer.\n   */\n  TypePath(final byte[] typePathContainer, final int typePathOffset) {\n    this.typePathContainer = typePathContainer;\n    this.typePathOffset = typePathOffset;\n  }\n\n  /**\n   * Returns the length of this path, i.e. its number of steps.\n   *\n   * @return the length of this path.\n   */\n  public int getLength() {\n    // path_length is stored in the first byte of a type_path.\n    return typePathContainer[typePathOffset];\n  }\n\n  /**\n   * Returns the value of the given step of this path.\n   *\n   * @param index an index between 0 and {@link #getLength()}, exclusive.\n   * @return one of {@link #ARRAY_ELEMENT}, {@link #INNER_TYPE}, {@link #WILDCARD_BOUND}, or {@link\n   *     #TYPE_ARGUMENT}.\n   */\n  public int getStep(final int index) {\n    // Returns the type_path_kind of the path element of the given index.\n    return typePathContainer[typePathOffset + 2 * index + 1];\n  }\n\n  /**\n   * Returns the index of the type argument that the given step is stepping into. This method should\n   * only be used for steps whose value is {@link #TYPE_ARGUMENT}.\n   *\n   * @param index an index between 0 and {@link #getLength()}, exclusive.\n   * @return the index of the type argument that the given step is stepping into.\n   */\n  public int getStepArgument(final int index) {\n    // Returns the type_argument_index of the path element of the given index.\n    return typePathContainer[typePathOffset + 2 * index + 2];\n  }\n\n  /**\n   * Converts a type path in string form, in the format used by {@link #toString()}, into a TypePath\n   * object.\n   *\n   * @param typePath a type path in string form, in the format used by {@link #toString()}. May be\n   *     {@literal null} or empty.\n   * @return the corresponding TypePath object, or {@literal null} if the path is empty.\n   */\n  public static TypePath fromString(final String typePath) {\n    if (typePath == null || typePath.length() == 0) {\n      return null;\n    }\n    int typePathLength = typePath.length();\n    ByteVector output = new ByteVector(typePathLength);\n    output.putByte(0);\n    int typePathIndex = 0;\n    while (typePathIndex < typePathLength) {\n      char c = typePath.charAt(typePathIndex++);\n      if (c == '[') {\n        output.put11(ARRAY_ELEMENT, 0);\n      } else if (c == '.') {\n        output.put11(INNER_TYPE, 0);\n      } else if (c == '*') {\n        output.put11(WILDCARD_BOUND, 0);\n      } else if (c >= '0' && c <= '9') {\n        int typeArg = c - '0';\n        while (typePathIndex < typePathLength) {\n          c = typePath.charAt(typePathIndex++);\n          if (c >= '0' && c <= '9') {\n            typeArg = typeArg * 10 + c - '0';\n          } else if (c == ';') {\n            break;\n          } else {\n            throw new IllegalArgumentException();\n          }\n        }\n        output.put11(TYPE_ARGUMENT, typeArg);\n      } else {\n        throw new IllegalArgumentException();\n      }\n    }\n    output.data[0] = (byte) (output.length / 2);\n    return new TypePath(output.data, 0);\n  }\n\n  /**\n   * Returns a string representation of this type path. {@link #ARRAY_ELEMENT} steps are represented\n   * with '[', {@link #INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND} steps with '*' and {@link\n   * #TYPE_ARGUMENT} steps with their type argument index in decimal form followed by ';'.\n   */\n  @Override\n  public String toString() {\n    int length = getLength();\n    StringBuilder result = new StringBuilder(length * 2);\n    for (int i = 0; i < length; ++i) {\n      switch (getStep(i)) {\n        case ARRAY_ELEMENT:\n          result.append('[');\n          break;\n        case INNER_TYPE:\n          result.append('.');\n          break;\n        case WILDCARD_BOUND:\n          result.append('*');\n          break;\n        case TYPE_ARGUMENT:\n          result.append(getStepArgument(i)).append(';');\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    return result.toString();\n  }\n\n  /**\n   * Puts the type_path JVMS structure corresponding to the given TypePath into the given\n   * ByteVector.\n   *\n   * @param typePath a TypePath instance, or {@literal null} for empty paths.\n   * @param output where the type path must be put.\n   */\n  static void put(final TypePath typePath, final ByteVector output) {\n    if (typePath == null) {\n      output.putByte(0);\n    } else {\n      int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1;\n      output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length);\n    }\n  }\n}\n",
    "tailType": "class_code"
  }
]