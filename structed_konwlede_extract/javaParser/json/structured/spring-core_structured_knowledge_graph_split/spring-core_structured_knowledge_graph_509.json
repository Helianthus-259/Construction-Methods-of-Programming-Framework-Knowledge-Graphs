[
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nint addConstantNameAndType(final String name, final String descriptor) {\r\n    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG;\r\n    int hashCode = hash(tag, name, descriptor);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) {\r\n            return entry.index;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor));\r\n    return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantNameAndType(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n */\r\nprivate void addConstantNameAndType(final int index, final String name, final String descriptor) {\r\n    final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG;\r\n    add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantNameAndType(int,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value a string.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nint addConstantUtf8(final String value) {\r\n    int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {\r\n            return entry.index;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value);\r\n    return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantUtf8(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_String_info to the constant pool of this symbol table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param value a string.\r\n */\r\nprivate void addConstantUtf8(final int index, final String value) {\r\n    add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantUtf8(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\r\n * the constant pool already contains a similar item.\r\n *\r\n * @param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\r\n *     Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\r\n *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\r\n *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n * @param owner the internal name of a class of interface.\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n * @param isInterface whether owner is an interface or not.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantMethodHandle(final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG;\r\n    final int data = getConstantMethodHandleSymbolData(referenceKind, isInterface);\r\n    // Note that we don't need to include isInterface in the hash computation, because it is\r\n    // redundant with owner (we can't have the same owner with different isInterface values).\r\n    int hashCode = hash(tag, owner, name, descriptor, data);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.data == data && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    if (referenceKind <= Opcodes.H_PUTSTATIC) {\r\n        constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index);\r\n    } else {\r\n        constantPool.put112(tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index);\r\n    }\r\n    return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, data, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,int,String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\r\n *     Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\r\n *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\r\n *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n * @param owner the internal name of a class of interface.\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n * @param isInterface whether owner is an interface or not.\r\n */\r\nprivate void addConstantMethodHandle(final int index, final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG;\r\n    final int data = getConstantMethodHandleSymbolData(referenceKind, isInterface);\r\n    int hashCode = hash(tag, owner, name, descriptor, data);\r\n    add(new Entry(index, tag, owner, name, descriptor, data, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMethodHandle(int,int,String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#getConstantMethodHandleSymbolData(int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Symbol#data} field for a CONSTANT_MethodHandle_info Symbol.\r\n *\r\n * @param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\r\n *     Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\r\n *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\r\n *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n * @param isInterface whether owner is an interface or not.\r\n */\r\nprivate static int getConstantMethodHandleSymbolData(final int referenceKind, final boolean isInterface) {\r\n    if (referenceKind > Opcodes.H_PUTSTATIC && isInterface) {\r\n        return referenceKind << 8;\r\n    }\r\n    return referenceKind;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#getConstantMethodHandleSymbolData(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_MethodType_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param methodDescriptor a method descriptor.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantMethodType(final String methodDescriptor) {\r\n    return addConstantUtf8Reference(Symbol.CONSTANT_METHOD_TYPE_TAG, methodDescriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMethodType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\r\n * bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\r\n * pool already contains a similar item.\r\n *\r\n * @param name a method name.\r\n * @param descriptor a field descriptor.\r\n * @param bootstrapMethodHandle a bootstrap method handle.\r\n * @param bootstrapMethodArguments the bootstrap method arguments.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments);\r\n    return addConstantDynamicOrInvokeDynamicReference(Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantDynamic(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\r\n * related bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param name a method name.\r\n * @param descriptor a method descriptor.\r\n * @param bootstrapMethodHandle a bootstrap method handle.\r\n * @param bootstrapMethodArguments the bootstrap method arguments.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantInvokeDynamic(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments);\r\n    return addConstantDynamicOrInvokeDynamicReference(Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index);\r\n}",
    "tailType": "method_code"
  }
]