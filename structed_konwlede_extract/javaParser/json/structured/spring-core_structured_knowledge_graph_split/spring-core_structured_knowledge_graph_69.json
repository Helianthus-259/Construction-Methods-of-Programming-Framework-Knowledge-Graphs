[
  {
    "head": "org.springframework.core.type.WithAnnotationAttributes#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@AnnotationAttributes",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.WithMetaAnnotationAttributes",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport example.type.AnnotatedComponent;\nimport example.type.EnclosingAnnotation;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link MethodMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractMethodMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tMethodMetadata withMethod1 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethod2 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethodWithTwoArguments1 = getTagged(WithMethodWithTwoArguments.class);\n\t\tMethodMetadata withMethodWithTwoArguments2 = getTagged(WithMethodWithTwoArguments.class);\n\n\t\tassertThat(withMethod1).isNotEqualTo(null);\n\n\t\tassertThat(withMethod1).isEqualTo(withMethod1);\n\t\tassertThat(withMethod2).isEqualTo(withMethod2);\n\t\tassertThat(withMethod1).isEqualTo(withMethod2);\n\t\tassertThat(withMethod2).isEqualTo(withMethod1);\n\n\t\tassertThat(withMethodWithTwoArguments1).isEqualTo(withMethodWithTwoArguments1);\n\t\tassertThat(withMethodWithTwoArguments2).isEqualTo(withMethodWithTwoArguments2);\n\t\tassertThat(withMethodWithTwoArguments1).isEqualTo(withMethodWithTwoArguments2);\n\t\tassertThat(withMethodWithTwoArguments2).isEqualTo(withMethodWithTwoArguments1);\n\n\t\tassertThat(withMethod1).isNotEqualTo(withMethodWithTwoArguments1);\n\t\tassertThat(withMethodWithTwoArguments1).isNotEqualTo(withMethod1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tMethodMetadata withMethod1 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethod2 = getTagged(WithMethod.class);\n\t\tMethodMetadata withMethodWithTwoArguments1 = getTagged(WithMethodWithTwoArguments.class);\n\t\tMethodMetadata withMethodWithTwoArguments2 = getTagged(WithMethodWithTwoArguments.class);\n\n\t\tassertThat(withMethod1).hasSameHashCodeAs(withMethod2);\n\t\tassertThat(withMethodWithTwoArguments1).hasSameHashCodeAs(withMethodWithTwoArguments2);\n\n\t\tassertThat(withMethod1).doesNotHaveSameHashCodeAs(withMethodWithTwoArguments1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(getTagged(WithMethod.class).toString())\n\t\t\t.endsWith(WithMethod.class.getName() + \".test()\");\n\n\t\tassertThat(getTagged(WithMethodWithOneArgument.class).toString())\n\t\t\t.endsWith(WithMethodWithOneArgument.class.getName() + \".test(java.lang.String)\");\n\n\t\tassertThat(getTagged(WithMethodWithTwoArguments.class).toString())\n\t\t\t.endsWith(WithMethodWithTwoArguments.class.getName() + \".test(java.lang.String,java.lang.Integer)\");\n\t}\n\n\t@Test\n\tvoid getMethodNameReturnsMethodName() {\n\t\tassertThat(getTagged(WithMethod.class).getMethodName()).isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid getDeclaringClassReturnsDeclaringClass() {\n\t\tassertThat(getTagged(WithMethod.class).getDeclaringClassName()).isEqualTo(\n\t\t\t\tWithMethod.class.getName());\n\t}\n\n\t@Test\n\tvoid getReturnTypeReturnsReturnType() {\n\t\tassertThat(getTagged(WithMethod.class).getReturnTypeName()).isEqualTo(\n\t\t\t\tString.class.getName());\n\t}\n\n\t@Test\n\tvoid isAbstractWhenAbstractReturnsTrue() {\n\t\tassertThat(getTagged(WithAbstractMethod.class).isAbstract()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAbstractWhenNotAbstractReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isAbstract()).isFalse();\n\t}\n\n\t@Test\n\tvoid isStatusWhenStaticReturnsTrue() {\n\t\tassertThat(getTagged(WithStaticMethod.class).isStatic()).isTrue();\n\t}\n\n\t@Test\n\tvoid isStaticWhenNotStaticReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isStatic()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(getTagged(WithFinalMethod.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isOverridableWhenOverridableReturnsTrue() {\n\t\tassertThat(getTagged(WithMethod.class).isOverridable()).isTrue();\n\t}\n\n\t@Test\n\tvoid isOverridableWhenNonOverridableReturnsFalse() {\n\t\tassertThat(getTagged(WithStaticMethod.class).isOverridable()).isFalse();\n\t\tassertThat(getTagged(WithFinalMethod.class).isOverridable()).isFalse();\n\t\tassertThat(getTagged(WithPrivateMethod.class).isOverridable()).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tMethodMetadata metadata = getTagged(WithDirectAnnotation.class);\n\t\tassertThat(metadata.getAnnotations().stream().filter(\n\t\t\t\tMergedAnnotation::isDirectlyPresent).map(\n\t\t\t\t\t\ta -> a.getType().getName())).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\t\tTag.class.getName(),\n\t\t\t\t\t\t\t\tDirectAnnotation.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(getTagged(WithDirectAnnotation.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(getTagged(WithMetaAnnotation.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(getTagged(WithMethod.class).isAnnotated(\n\t\t\t\tDirectAnnotation.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(getTagged(WithAnnotationAttributes.class).getAnnotationAttributes(\n\t\t\t\tAnnotationAttributes.class.getName())).containsOnly(entry(\"name\", \"test\"),\n\t\t\t\t\t\tentry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes = getTagged(WithMetaAnnotationAttributes.class)\n\t\t\t\t.getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test // gh-24375\n\tpublic void metadataLoadsForNestedAnnotations() {\n\t\tAnnotationMetadata annotationMetadata = get(AnnotatedComponent.class);\n\t\tassertThat(annotationMetadata.getAnnotationTypes()).containsExactly(EnclosingAnnotation.class.getName());\n\t}\n\n\tprotected MethodMetadata getTagged(Class<?> source) {\n\t\treturn get(source, Tag.class.getName());\n\t}\n\n\tprotected MethodMetadata get(Class<?> source, String annotationName) {\n\t\treturn get(source).getAnnotatedMethods(annotationName).iterator().next();\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Tag {\n\t}\n\n\tpublic static class WithMethod {\n\n\t\t@Tag\n\t\tpublic String test() {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic static class WithMethodWithOneArgument {\n\n\t\t@Tag\n\t\tpublic String test(String text) {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic static class WithMethodWithTwoArguments {\n\n\t\t@Tag\n\t\tpublic String test(String text, Integer num) {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic abstract static class WithAbstractMethod {\n\n\t\t@Tag\n\t\tpublic abstract String test();\n\n\t}\n\n\tpublic static class WithStaticMethod {\n\n\t\t@Tag\n\t\tpublic static String test() {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic static class WithFinalMethod {\n\n\t\t@Tag\n\t\tpublic final String test() {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic static class WithPrivateMethod {\n\n\t\t@Tag\n\t\tprivate String test() {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tpublic abstract static class WithDirectAnnotation {\n\n\t\t@Tag\n\t\t@DirectAnnotation\n\t\tpublic abstract String test();\n\n\t}\n\n\tpublic abstract static class WithMetaAnnotation {\n\n\t\t@Tag\n\t\t@MetaAnnotation\n\t\tpublic abstract String test();\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface DirectAnnotation {\n\t}\n\n\t@DirectAnnotation\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MetaAnnotation {\n\t}\n\n\tpublic abstract static class WithAnnotationAttributes {\n\n\t\t@Tag\n\t\t@AnnotationAttributes(name = \"test\", size = 1)\n\t\tpublic abstract String test();\n\n\t}\n\n\tpublic abstract static class WithMetaAnnotationAttributes {\n\n\t\t@Tag\n\t\t@MetaAnnotationAttributes1\n\t\t@MetaAnnotationAttributes2\n\t\tpublic abstract String test();\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\t@interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\t@interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes#test()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Tag\r\n@MetaAnnotationAttributes1\r\n@MetaAnnotationAttributes2\r\npublic abstract String test();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.WithMetaAnnotationAttributes#test()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@Tag",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@MetaAnnotationAttributes1",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotationAttributes#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@MetaAnnotationAttributes2",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.javapoet.TypeSpec;\nimport org.springframework.util.Assert;\n\n/**\n * A single generated class.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 6.0\n * @see GeneratedClasses\n */\npublic final class GeneratedClass {\n\n\tprivate final @Nullable GeneratedClass enclosingClass;\n\n\tprivate final ClassName name;\n\n\tprivate final GeneratedMethods methods;\n\n\tprivate final Consumer<TypeSpec.Builder> type;\n\n\tprivate final Map<ClassName, GeneratedClass> declaredClasses;\n\n\tprivate final Map<MethodName, AtomicInteger> methodNameSequenceGenerator;\n\n\n\t/**\n\t * Create a new {@link GeneratedClass} instance with the given name. This\n\t * constructor is package-private since names should only be generated via a\n\t * {@link GeneratedClasses}.\n\t * @param name the generated name\n\t * @param type a {@link Consumer} used to build the type\n\t */\n\tGeneratedClass(ClassName name, Consumer<TypeSpec.Builder> type) {\n\t\tthis(null, name, type);\n\t}\n\n\tprivate GeneratedClass(@Nullable GeneratedClass enclosingClass, ClassName name,\n\t\t\tConsumer<TypeSpec.Builder> type) {\n\t\tthis.enclosingClass = enclosingClass;\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.methods = new GeneratedMethods(name, this::generateSequencedMethodName);\n\t\tthis.declaredClasses = new ConcurrentHashMap<>();\n\t\tthis.methodNameSequenceGenerator = new ConcurrentHashMap<>();\n\t}\n\n\n\t/**\n\t * Update this instance with a set of reserved method names that should not\n\t * be used for generated methods. Reserved names are often needed when a\n\t * generated class implements a specific interface.\n\t * @param reservedMethodNames the reserved method names\n\t */\n\tpublic void reserveMethodNames(String... reservedMethodNames) {\n\t\tfor (String reservedMethodName : reservedMethodNames) {\n\t\t\tString generatedName = generateSequencedMethodName(MethodName.of(reservedMethodNames));\n\t\t\tAssert.state(generatedName.equals(reservedMethodName),\n\t\t\t\t\t() -> String.format(\"Unable to reserve method name '%s'\", reservedMethodName));\n\t\t}\n\t}\n\n\tprivate String generateSequencedMethodName(MethodName name) {\n\t\tint sequence = this.methodNameSequenceGenerator\n\t\t\t\t.computeIfAbsent(name, key -> new AtomicInteger()).getAndIncrement();\n\t\treturn (sequence > 0 ? name.toString() + sequence : name.toString());\n\t}\n\n\t/**\n\t * Return the enclosing {@link GeneratedClass} or {@code null} if this\n\t * instance represents a top-level class.\n\t * @return the enclosing generated class, if any\n\t */\n\tpublic @Nullable GeneratedClass getEnclosingClass() {\n\t\treturn this.enclosingClass;\n\t}\n\n\t/**\n\t * Return the name of the generated class.\n\t * @return the name of the generated class\n\t */\n\tpublic ClassName getName() {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Return generated methods for this instance.\n\t * @return the generated methods\n\t */\n\tpublic GeneratedMethods getMethods() {\n\t\treturn this.methods;\n\t}\n\n\t/**\n\t * Get or add a nested generated class with the specified name. If this method\n\t * has previously been called with the given {@code name}, the existing class\n\t * will be returned, otherwise a new class will be generated.\n\t * @param name the name of the nested class\n\t * @param type a {@link Consumer} used to build the type\n\t * @return an existing or newly generated class whose enclosing class is this class\n\t */\n\tpublic GeneratedClass getOrAdd(String name, Consumer<TypeSpec.Builder> type) {\n\t\tClassName className = this.name.nestedClass(name);\n\t\treturn this.declaredClasses.computeIfAbsent(className,\n\t\t\t\tkey -> new GeneratedClass(this, className, type));\n\t}\n\n\tJavaFile generateJavaFile() {\n\t\tAssert.state(getEnclosingClass() == null,\n\t\t\t\t\"Java file cannot be generated for an inner class\");\n\t\tTypeSpec.Builder type = apply();\n\t\treturn JavaFile.builder(this.name.packageName(), type.build()).build();\n\t}\n\n\tprivate TypeSpec.Builder apply() {\n\t\tTypeSpec.Builder type = getBuilder(this.type);\n\t\ttype.addAnnotation(Generated.class);\n\t\tthis.methods.doWithMethodSpecs(type::addMethod);\n\t\tthis.declaredClasses.values().forEach(declaredClass ->\n\t\t\t\ttype.addType(declaredClass.apply().build()));\n\t\treturn type;\n\t}\n\n\tprivate TypeSpec.Builder getBuilder(Consumer<TypeSpec.Builder> type) {\n\t\tTypeSpec.Builder builder = TypeSpec.classBuilder(this.name);\n\t\ttype.accept(builder);\n\t\treturn builder;\n\t}\n\n\tvoid assertSameType(Consumer<TypeSpec.Builder> type) {\n\t\tAssert.state(type == this.type || getBuilder(this.type).build().equals(getBuilder(type).build()),\n\t\t\t\t\"'type' consumer generated different result\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#enclosingClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#enclosingClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedClass",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#methods",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#methods",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedMethods",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<TypeSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#declaredClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#declaredClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<ClassName, GeneratedClass>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.GeneratedClass#methodNameSequenceGenerator",
    "tailType": "field"
  }
]