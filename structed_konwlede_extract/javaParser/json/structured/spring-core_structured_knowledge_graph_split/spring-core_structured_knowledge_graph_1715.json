[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#fromPreconditions()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamWhenFromNonAnnotatedClass() {\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class).stream(TransactionalComponent.class)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromNonAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamWhenFromClassWithMetaDepth1() {\r\n    Stream<Class<?>> classes = MergedAnnotations.from(TransactionalComponent.class).stream().map(MergedAnnotation::getType);\r\n    assertThat(classes).containsExactly(Transactional.class, Component.class, Indexed.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamWhenFromClassWithMetaDepth2() {\r\n    Stream<Class<?>> classes = MergedAnnotations.from(ComposedTransactionalComponent.class).stream().map(MergedAnnotation::getType);\r\n    assertThat(classes).containsExactly(TransactionalComponent.class, Transactional.class, Component.class, Indexed.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#streamWhenFromClassWithMetaDepth2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromNonAnnotatedClass() {\r\n    assertThat(MergedAnnotations.from(NonAnnotatedClass.class).isPresent(Transactional.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromNonAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth0()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromAnnotationClassWithMetaDepth0() {\r\n    assertThat(MergedAnnotations.from(TransactionalComponent.class).isPresent(TransactionalComponent.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth0()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth0()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromAnnotationClassWithMetaDepth1() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(TransactionalComponent.class);\r\n    assertThat(annotations.isPresent(Transactional.class)).isTrue();\r\n    assertThat(annotations.isPresent(Component.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromAnnotationClassWithMetaDepth2() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponent.class);\r\n    assertThat(annotations.isPresent(Transactional.class)).isTrue();\r\n    assertThat(annotations.isPresent(Component.class)).isTrue();\r\n    assertThat(annotations.isPresent(ComposedTransactionalComponent.class)).isFalse();\r\n}",
    "tailType": "method_code"
  }
]