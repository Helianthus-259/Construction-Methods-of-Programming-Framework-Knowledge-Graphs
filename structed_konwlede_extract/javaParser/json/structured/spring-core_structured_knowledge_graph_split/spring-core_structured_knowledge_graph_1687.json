[
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasNoDefaultValueMethodsReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenHasTypeNotPresentExceptionReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isValidWhenHasTypeNotPresentExceptionReturnsFalse() {\r\n    ClassValue annotation = mockAnnotation(ClassValue.class);\r\n    given(annotation.value()).willThrow(TypeNotPresentException.class);\r\n    AttributeMethods attributes = AttributeMethods.forAnnotationType(annotation.annotationType());\r\n    assertThat(attributes.canLoad(annotation)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenHasTypeNotPresentExceptionReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenHasTypeNotPresentExceptionReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenDoesNotHaveTypeNotPresentExceptionReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid isValidWhenDoesNotHaveTypeNotPresentExceptionReturnsTrue() {\r\n    ClassValue annotation = mock();\r\n    given(annotation.value()).willReturn((Class) InputStream.class);\r\n    AttributeMethods attributes = AttributeMethods.forAnnotationType(annotation.annotationType());\r\n    assertThat(attributes.canLoad(annotation)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenDoesNotHaveTypeNotPresentExceptionReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenDoesNotHaveTypeNotPresentExceptionReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#isValidWhenDoesNotHaveTypeNotPresentExceptionReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenHasTypeNotPresentExceptionThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid validateWhenHasTypeNotPresentExceptionThrowsException() {\r\n    ClassValue annotation = mockAnnotation(ClassValue.class);\r\n    given(annotation.value()).willThrow(TypeNotPresentException.class);\r\n    AttributeMethods attributes = AttributeMethods.forAnnotationType(annotation.annotationType());\r\n    assertThatIllegalStateException().isThrownBy(() -> attributes.validate(annotation));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenHasTypeNotPresentExceptionThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenHasTypeNotPresentExceptionThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenDoesNotHaveTypeNotPresentExceptionThrowsNothing()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid validateWhenDoesNotHaveTypeNotPresentExceptionThrowsNothing() {\r\n    ClassValue annotation = mockAnnotation(ClassValue.class);\r\n    given(annotation.value()).willReturn((Class) InputStream.class);\r\n    AttributeMethods attributes = AttributeMethods.forAnnotationType(annotation.annotationType());\r\n    attributes.validate(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenDoesNotHaveTypeNotPresentExceptionThrowsNothing()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenDoesNotHaveTypeNotPresentExceptionThrowsNothing()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#validateWhenDoesNotHaveTypeNotPresentExceptionThrowsNothing()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#getAll(AttributeMethods)",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<Method> getAll(AttributeMethods attributes) {\r\n    List<Method> result = new ArrayList<>(attributes.size());\r\n    for (int i = 0; i < attributes.size(); i++) {\r\n        result.add(attributes.get(i));\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#getAll(AttributeMethods)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#mockAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nprivate <A extends Annotation> A mockAnnotation(Class<A> annotationType) {\r\n    A annotation = mock(annotationType);\r\n    given(annotation.annotationType()).willReturn((Class) annotationType);\r\n    return annotation;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#mockAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#mockAnnotation(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]