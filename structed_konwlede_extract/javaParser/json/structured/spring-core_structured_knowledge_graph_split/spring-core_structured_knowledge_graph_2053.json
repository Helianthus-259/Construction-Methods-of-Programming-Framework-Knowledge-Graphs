[
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#vanillaResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#patternResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid patternResource() {\r\n    // N.B. this will sometimes fail if you use classpath: instead of classpath*:.\r\n    // The result depends on the classpath - if test-classes are segregated from classes\r\n    // and they come first on the classpath (like in Maven) then it breaks, if classes\r\n    // comes first (like in Spring Build) then it is OK.\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor();\r\n    editor.setAsText(\"classpath*:org/springframework/core/io/support/Resource*Editor.class\");\r\n    Resource[] resources = (Resource[]) editor.getValue();\r\n    assertThat(resources).isNotNull();\r\n    assertThat(resources[0].exists()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#patternResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#patternResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#systemPropertyReplacement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid systemPropertyReplacement() {\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor();\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        editor.setAsText(\"${test.prop}\");\r\n        Resource[] resources = (Resource[]) editor.getValue();\r\n        assertThat(resources[0].getFilename()).isEqualTo(\"foo\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#systemPropertyReplacement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#systemPropertyReplacement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#strictSystemPropertyReplacementWithUnresolvablePlaceholder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid strictSystemPropertyReplacementWithUnresolvablePlaceholder() {\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor(new PathMatchingResourcePatternResolver(), new StandardEnvironment(), false);\r\n    System.setProperty(\"test.prop\", \"foo\");\r\n    try {\r\n        assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> editor.setAsText(\"${test.prop}-${bar}\"));\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#strictSystemPropertyReplacementWithUnresolvablePlaceholder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#strictSystemPropertyReplacementWithUnresolvablePlaceholder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithSingleResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid commaDelimitedResourcesWithSingleResource() {\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor();\r\n    editor.setAsText(\"classpath:org/springframework/core/io/support/ResourceArrayPropertyEditor.class,file:/test.txt\");\r\n    Resource[] resources = (Resource[]) editor.getValue();\r\n    assertThat(resources).isNotNull();\r\n    assertThat(resources[0]).isInstanceOfSatisfying(ClassPathResource.class, resource -> assertThat(resource.exists()).isTrue());\r\n    assertThat(resources[1]).isInstanceOfSatisfying(FileUrlResource.class, resource -> assertThat(resource.getFilename()).isEqualTo(\"test.txt\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithSingleResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithSingleResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithMultipleResources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid commaDelimitedResourcesWithMultipleResources() {\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor();\r\n    editor.setAsText(\"file:/test.txt, classpath:org/springframework/core/io/support/test-resources/*.txt\");\r\n    Resource[] resources = (Resource[]) editor.getValue();\r\n    assertThat(resources).isNotNull();\r\n    assertThat(resources[0]).isInstanceOfSatisfying(FileUrlResource.class, resource -> assertThat(resource.getFilename()).isEqualTo(\"test.txt\"));\r\n    assertThat(resources).anySatisfy(candidate -> assertThat(candidate.getFilename()).isEqualTo(\"resource1.txt\"));\r\n    assertThat(resources).anySatisfy(candidate -> assertThat(candidate.getFilename()).isEqualTo(\"resource2.txt\"));\r\n    assertThat(resources).hasSize(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithMultipleResources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#commaDelimitedResourcesWithMultipleResources()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.ClassPathResource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ResourcePropertySource}.\n *\n * @author Chris Beams\n * @author Sam Brannen\n * @since 3.1\n */\nclass ResourcePropertySourceTests {\n\n\tprivate static final String PROPERTIES_PATH = \"org/springframework/core/io/example.properties\";\n\tprivate static final String PROPERTIES_LOCATION = \"classpath:\" + PROPERTIES_PATH;\n\tprivate static final String PROPERTIES_RESOURCE_DESCRIPTION = \"class path resource [\" + PROPERTIES_PATH + \"]\";\n\n\tprivate static final String XML_PROPERTIES_PATH = \"org/springframework/core/io/example.xml\";\n\tprivate static final String XML_PROPERTIES_LOCATION = \"classpath:\" + XML_PROPERTIES_PATH;\n\tprivate static final String XML_PROPERTIES_RESOURCE_DESCRIPTION = \"class path resource [\" + XML_PROPERTIES_PATH + \"]\";\n\n\t@Test\n\tvoid withLocationAndGeneratedName() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(PROPERTIES_LOCATION);\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(PROPERTIES_RESOURCE_DESCRIPTION);\n\t}\n\n\t@Test\n\tvoid xmlWithLocationAndGeneratedName() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(XML_PROPERTIES_LOCATION);\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(XML_PROPERTIES_RESOURCE_DESCRIPTION);\n\t}\n\n\t@Test\n\tvoid withLocationAndExplicitName() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(\"ps1\", PROPERTIES_LOCATION);\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(\"ps1\");\n\t}\n\n\t@Test\n\tvoid withLocationAndExplicitNameAndExplicitClassLoader() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(\"ps1\", PROPERTIES_LOCATION, getClass().getClassLoader());\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(\"ps1\");\n\t}\n\n\t@Test\n\tvoid withLocationAndGeneratedNameAndExplicitClassLoader() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(PROPERTIES_LOCATION, getClass().getClassLoader());\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(PROPERTIES_RESOURCE_DESCRIPTION);\n\t}\n\n\t@Test\n\tvoid withResourceAndGeneratedName() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(new ClassPathResource(PROPERTIES_PATH));\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(PROPERTIES_RESOURCE_DESCRIPTION);\n\t}\n\n\t@Test\n\tvoid withResourceAndExplicitName() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(\"ps1\", new ClassPathResource(PROPERTIES_PATH));\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(\"ps1\");\n\t}\n\n\t@Test\n\tvoid withResourceHavingNoDescription() throws IOException {\n\t\tPropertySource<?> ps = new ResourcePropertySource(new ByteArrayResource(\"foo=bar\".getBytes(), \"\"));\n\t\tassertThat(ps.getProperty(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(ps.getName()).isEqualTo(\"Byte array resource []\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySourceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourcePropertySourceTests#PROPERTIES_PATH",
    "tailType": "field"
  }
]