[
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#getTags()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#tag(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic StartupStep tag(String key, String value) {\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.DefaultStartupStep#tag(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#tag(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#tag(String,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic StartupStep tag(String key, Supplier<String> value) {\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.DefaultStartupStep#tag(String,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#tag(String,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#end()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void end() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.DefaultStartupStep#end()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.DefaultStartupStep#end()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.metrics",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.metrics.DefaultTags",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.metrics.DefaultTags",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.metrics;\n\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Default \"no op\" {@code ApplicationStartup} implementation.\n *\n * <p>This variant is designed for minimal overhead and does not record events.\n *\n * @author Brian Clozel\n */\nclass DefaultApplicationStartup implements ApplicationStartup {\n\n\tprivate static final DefaultStartupStep DEFAULT_STARTUP_STEP = new DefaultStartupStep();\n\n\t@Override\n\tpublic DefaultStartupStep start(String name) {\n\t\treturn DEFAULT_STARTUP_STEP;\n\t}\n\n\n\tstatic class DefaultStartupStep implements StartupStep {\n\n\t\tprivate final DefaultTags TAGS = new DefaultTags();\n\n\t\t@Override\n\t\tpublic String getName() {\n\t\t\treturn \"default\";\n\t\t}\n\n\t\t@Override\n\t\tpublic long getId() {\n\t\t\treturn 0L;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Long getParentId() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Tags getTags() {\n\t\t\treturn this.TAGS;\n\t\t}\n\n\t\t@Override\n\t\tpublic StartupStep tag(String key, String value) {\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic StartupStep tag(String key, Supplier<String> value) {\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic void end() {\n\t\t}\n\n\n\t\tstatic class DefaultTags implements StartupStep.Tags {\n\n\t\t\t@Override\n\t\t\tpublic Iterator<StartupStep.Tag> iterator() {\n\t\t\t\treturn Collections.emptyIterator();\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.metrics.DefaultTags#iterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Iterator<StartupStep.Tag> iterator() {\r\n    return Collections.emptyIterator();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.metrics.DefaultTags",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.metrics.DefaultTags#iterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.metrics.DefaultTags#iterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.metrics.jfr",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.metrics.jfr",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.metrics.jfr;\n\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport org.springframework.core.metrics.ApplicationStartup;\nimport org.springframework.core.metrics.StartupStep;\n\n/**\n * {@link ApplicationStartup} implementation for the Java Flight Recorder.\n * <p>This variant records {@link StartupStep} as Flight Recorder events. Because\n * such events only support base types, the\n * {@link org.springframework.core.metrics.StartupStep.Tags} are serialized as a\n * single String attribute.\n * <p>Once this is configured on the application context, you can record data by\n * launching the application with recording enabled:\n * {@code java -XX:StartFlightRecording:filename=recording.jfr,duration=10s -jar app.jar}.\n *\n * @author Brian Clozel\n * @since 5.3\n */\npublic class FlightRecorderApplicationStartup implements ApplicationStartup {\n\n\tprivate final AtomicLong currentSequenceId = new AtomicLong();\n\n\tprivate final Deque<Long> currentSteps;\n\n\n\tpublic FlightRecorderApplicationStartup() {\n\t\tthis.currentSteps = new ConcurrentLinkedDeque<>();\n\t\tthis.currentSteps.offerFirst(this.currentSequenceId.get());\n\t}\n\n\n\t@Override\n\tpublic StartupStep start(String name) {\n\t\tLong parentId = this.currentSteps.getFirst();\n\t\tlong sequenceId = this.currentSequenceId.incrementAndGet();\n\t\tthis.currentSteps.offerFirst(sequenceId);\n\t\treturn new FlightRecorderStartupStep(sequenceId, name,\n\t\t\t\tparentId, committedStep -> this.currentSteps.removeFirstOccurrence(sequenceId));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup#currentSequenceId",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup#currentSequenceId",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicLong",
    "tailType": "type"
  }
]