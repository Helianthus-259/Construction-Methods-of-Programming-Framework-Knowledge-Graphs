[
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#valueSeparator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#valueSeparator",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#escapeCharacter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#escapeCharacter",
    "headType": "field",
    "relation": "haveType",
    "tail": "Character",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#requiredProperties",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#requiredProperties",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getConversionService()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic ConfigurableConversionService getConversionService() {\r\n    // Need to provide an independent DefaultConversionService, not the\r\n    // shared DefaultConversionService used by PropertySourcesPropertyResolver.\r\n    ConfigurableConversionService cs = this.conversionService;\r\n    if (cs == null) {\r\n        synchronized (this) {\r\n            cs = this.conversionService;\r\n            if (cs == null) {\r\n                cs = new DefaultConversionService();\r\n                this.conversionService = cs;\r\n            }\r\n        }\r\n    }\r\n    return cs;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getConversionService()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getConversionService()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setConversionService(ConfigurableConversionService)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setConversionService(ConfigurableConversionService conversionService) {\r\n    Assert.notNull(conversionService, \"ConversionService must not be null\");\r\n    this.conversionService = conversionService;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setConversionService(ConfigurableConversionService)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setConversionService(ConfigurableConversionService)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderPrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the prefix that placeholders replaced by this resolver must begin with.\r\n * <p>The default is \"${\".\r\n * @see org.springframework.util.SystemPropertyUtils#PLACEHOLDER_PREFIX\r\n */\r\n@Override\r\npublic void setPlaceholderPrefix(String placeholderPrefix) {\r\n    Assert.notNull(placeholderPrefix, \"'placeholderPrefix' must not be null\");\r\n    this.placeholderPrefix = placeholderPrefix;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderPrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderPrefix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderSuffix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the suffix that placeholders replaced by this resolver must end with.\r\n * <p>The default is \"}\".\r\n * @see org.springframework.util.SystemPropertyUtils#PLACEHOLDER_SUFFIX\r\n */\r\n@Override\r\npublic void setPlaceholderSuffix(String placeholderSuffix) {\r\n    Assert.notNull(placeholderSuffix, \"'placeholderSuffix' must not be null\");\r\n    this.placeholderSuffix = placeholderSuffix;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderSuffix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setPlaceholderSuffix(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setValueSeparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the separating character between the placeholders replaced by this\r\n * resolver and their associated default value, or {@code null} if no such\r\n * special character should be processed as a value separator.\r\n * <p>The default is \":\".\r\n * @see org.springframework.util.SystemPropertyUtils#VALUE_SEPARATOR\r\n */\r\n@Override\r\npublic void setValueSeparator(@Nullable String valueSeparator) {\r\n    this.valueSeparator = valueSeparator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setValueSeparator(String)",
    "tailType": "method"
  }
]