[
  {
    "head": "org.springframework.core.type.WithDirectAnnotations",
    "headType": "class",
    "relation": "use",
    "tail": "@DirectAnnotation1",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.WithDirectAnnotations",
    "headType": "class",
    "relation": "use",
    "tail": "@DirectAnnotation2",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.WithDirectAnnotations",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.WithMetaAnnotations",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotations",
    "headType": "class",
    "relation": "use",
    "tail": "@MetaAnnotationRoot",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotations",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.TestMemberClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.TestMemberClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.TestMemberClassInnerClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.TestMemberClassInnerClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.TestMemberClassInnerInterface",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.TestMemberClassInnerInterface",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.WithAnnotatedMethod",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.WithAnnotatedMethod",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.WithAnnotatedMethod#test()",
    "headType": "method",
    "relation": "provide",
    "tail": "@DirectAnnotation1\r\npublic void test() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.WithAnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.WithAnnotatedMethod#test()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.WithAnnotatedMethod#test()",
    "headType": "method",
    "relation": "use",
    "tail": "@DirectAnnotation1",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.WithMetaAnnotatedMethod",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotatedMethod",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerClass;\nimport org.springframework.core.type.AbstractAnnotationMetadataTests.TestMemberClass.TestMemberClassInnerInterface;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * Base class for {@link AnnotationMetadata} tests.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n */\npublic abstract class AbstractAnnotationMetadataTests {\n\n\t@Test\n\tvoid verifyEquals() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).isNotEqualTo(null);\n\n\t\tassertThat(testClass1).isEqualTo(testClass1);\n\t\tassertThat(testClass2).isEqualTo(testClass2);\n\t\tassertThat(testClass1).isEqualTo(testClass2);\n\t\tassertThat(testClass2).isEqualTo(testClass1);\n\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass1).isEqualTo(testMemberClass2);\n\t\tassertThat(testMemberClass2).isEqualTo(testMemberClass1);\n\n\t\tassertThat(testClass1).isNotEqualTo(testMemberClass1);\n\t\tassertThat(testMemberClass1).isNotEqualTo(testClass1);\n\t}\n\n\t@Test\n\tvoid verifyHashCode() {\n\t\tAnnotationMetadata testClass1 = get(TestClass.class);\n\t\tAnnotationMetadata testClass2 = get(TestClass.class);\n\t\tAnnotationMetadata testMemberClass1 = get(TestMemberClass.class);\n\t\tAnnotationMetadata testMemberClass2 = get(TestMemberClass.class);\n\n\t\tassertThat(testClass1).hasSameHashCodeAs(testClass2);\n\t\tassertThat(testMemberClass1).hasSameHashCodeAs(testMemberClass2);\n\n\t\tassertThat(testClass1).doesNotHaveSameHashCodeAs(testMemberClass1);\n\t}\n\n\t@Test\n\tvoid verifyToString() {\n\t\tassertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid getClassNameReturnsClassName() {\n\t\tassertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenInterfaceReturnsTrue() {\n\t\tassertThat(get(TestInterface.class).isInterface()).isTrue();\n\t\tassertThat(get(TestAnnotation.class).isInterface()).isTrue();\n\t}\n\n\t@Test\n\tvoid isInterfaceWhenNotInterfaceReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isInterface()).isFalse();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenAnnotationReturnsTrue() {\n\t\tassertThat(get(TestAnnotation.class).isAnnotation()).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotationWhenNotAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotation()).isFalse();\n\t\tassertThat(get(TestInterface.class).isAnnotation()).isFalse();\n\t}\n\n\t@Test\n\tvoid isFinalWhenFinalReturnsTrue() {\n\t\tassertThat(get(TestFinalClass.class).isFinal()).isTrue();\n\t}\n\n\t@Test\n\tvoid isFinalWhenNonFinalReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isFinal()).isFalse();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenIndependentReturnsTrue() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();\n\t\tassertThat(get(TestClass.class).isIndependent()).isTrue();\n\t}\n\n\t@Test\n\tvoid isIndependentWhenNotIndependentReturnsFalse() {\n\t\tassertThat(get(TestNonStaticInnerClass.class).isIndependent()).isFalse();\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {\n\t\tassertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(\n\t\t\t\tAbstractAnnotationMetadataTests.class.getName());\n\t}\n\n\t@Test\n\tvoid getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {\n\t\tassertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasSuperClassReturnsName() {\n\t\tassertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());\n\t\tassertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());\n\t}\n\n\t@Test\n\tvoid getSuperClassNameWhenHasNoSuperClassReturnsNull() {\n\t\tassertThat(get(Object.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestInterface.class).getSuperClassName()).isNull();\n\t\tassertThat(get(TestSubInterface.class).getSuperClassName()).isNull();\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasInterfacesReturnsNames() {\n\t\tassertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t\tassertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getInterfaceNamesWhenHasNoInterfacesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getInterfaceNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasMemberClassesReturnsNames() {\n\t\tassertThat(get(TestMemberClass.class).getMemberClassNames()).containsExactlyInAnyOrder(\n\t\t\tTestMemberClassInnerClass.class.getName(), TestMemberClassInnerInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {\n\t\tassertThat(get(TestClass.class).getMemberClassNames()).isEmpty();\n\t}\n\n\t@Test\n\tvoid getAnnotationsReturnsDirectAnnotations() {\n\t\tassertThat(get(WithDirectAnnotations.class).getAnnotations().stream())\n\t\t\t.filteredOn(MergedAnnotation::isDirectlyPresent)\n\t\t\t.extracting(a -> a.getType().getName())\n\t\t\t.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).isAnnotated(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotationAttributesReturnsAttributes() {\n\t\tassertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))\n\t\t\t.containsOnly(entry(\"name\", \"test\"), entry(\"size\", 1));\n\t}\n\n\t@Test\n\tvoid getAllAnnotationAttributesReturnsAllAttributes() {\n\t\tMultiValueMap<String, Object> attributes =\n\t\t\t\tget(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());\n\t\tassertThat(attributes).containsOnlyKeys(\"name\", \"size\");\n\t\tassertThat(attributes.get(\"name\")).containsExactlyInAnyOrder(\"m1\", \"m2\");\n\t\tassertThat(attributes.get(\"size\")).containsExactlyInAnyOrder(1, 2);\n\t}\n\n\t@Test\n\tvoid getAnnotationTypesReturnsDirectAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithDirectAnnotations.class);\n\t\tassertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(\n\t\t\t\tDirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid getMetaAnnotationTypesReturnsMetaAnnotations() {\n\t\tAnnotationMetadata metadata = get(WithMetaAnnotations.class);\n\t\tassertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))\n\t\t\t.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenMatchesMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t\tassertThat(get(WithMetaAnnotations.class).hasAnnotation(MetaAnnotation2.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesDirectReturnsFalse() {\n\t\tassertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();\n\t\tassertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {\n\t\tassertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenMatchesMetaAnnotationReturnsTrue() {\n\t\tassertThat(get(WithMetaAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {\n\t\tassertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();\n\t\tassertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {\n\t\tassertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))\n\t\t\t.extracting(MethodMetadata::getMethodName)\n\t\t\t.containsExactlyInAnyOrder(\"direct\", \"meta\");\n\t}\n\n\tprotected abstract AnnotationMetadata get(Class<?> source);\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface DirectAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation1\n\tpublic @interface MetaAnnotationRoot {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaAnnotation2\n\tpublic @interface MetaAnnotation1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface MetaAnnotation2 {\n\t}\n\n\tpublic static class TestClass {\n\t}\n\n\tpublic interface TestInterface {\n\t}\n\n\tpublic interface TestSubInterface extends TestInterface {\n\t}\n\n\tpublic @interface TestAnnotation {\n\t}\n\n\tpublic static final class TestFinalClass {\n\t}\n\n\tpublic class TestNonStaticInnerClass {\n\t}\n\n\tpublic static class TestSubclass extends TestClass implements TestInterface {\n\t}\n\n\t@DirectAnnotation1\n\t@DirectAnnotation2\n\tpublic static class WithDirectAnnotations {\n\t}\n\n\t@MetaAnnotationRoot\n\tpublic static class WithMetaAnnotations {\n\t}\n\n\tpublic static class TestMemberClass {\n\n\t\tpublic static class TestMemberClassInnerClass {\n\t\t}\n\n\t\tinterface TestMemberClassInnerInterface {\n\t\t}\n\n\t}\n\n\tpublic static class WithAnnotatedMethod {\n\n\t\t@DirectAnnotation1\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithMetaAnnotatedMethod {\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithNonAnnotatedMethod {\n\n\t\tpublic void test() {\n\t\t}\n\n\t}\n\n\tpublic static class WithDirectAndMetaAnnotatedMethods {\n\n\t\t@MetaAnnotation2\n\t\tpublic void direct() {\n\t\t}\n\n\t\t@MetaAnnotationRoot\n\t\tpublic void meta() {\n\t\t}\n\n\t}\n\n\t@AnnotationAttributes(name = \"test\", size = 1)\n\tpublic static class WithAnnotationAttributes {\n\t}\n\n\t@MetaAnnotationAttributes1\n\t@MetaAnnotationAttributes2\n\tpublic static class WithMetaAnnotationAttributes {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m1\", size = 1)\n\tpublic @interface MetaAnnotationAttributes1 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AnnotationAttributes(name = \"m2\", size = 2)\n\tpublic @interface MetaAnnotationAttributes2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface AnnotationAttributes {\n\n\t\tString name();\n\n\t\tint size();\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.WithMetaAnnotatedMethod#test()",
    "headType": "method",
    "relation": "provide",
    "tail": "@MetaAnnotationRoot\r\npublic void test() ;",
    "tailType": "method_code"
  }
]