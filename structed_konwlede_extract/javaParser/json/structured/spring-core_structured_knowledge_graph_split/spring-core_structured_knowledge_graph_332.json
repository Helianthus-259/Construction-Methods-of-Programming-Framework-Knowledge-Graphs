[
  {
    "head": "org.springframework.util.SerializationUtilsTests#serializeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serializeNull() {\r\n    assertThat(SerializationUtils.serialize(null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtilsTests#serializeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#serializeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#deserializeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid deserializeNull() {\r\n    assertThat(SerializationUtils.deserialize(null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtilsTests#deserializeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#deserializeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#deserializeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#cloneException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid cloneException() {\r\n    IllegalArgumentException ex = new IllegalArgumentException(\"foo\");\r\n    assertThat(SerializationUtils.clone(ex)).hasMessage(\"foo\").isNotSameAs(ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SerializationUtilsTests#cloneException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SerializationUtilsTests#cloneException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.entry;\n\n/**\n * @author Arjen Poutsma\n */\nclass SingleToMultiValueMapAdapterTests {\n\n\n\tprivate Map<String, String> delegate;\n\n\tprivate MultiValueMap<String, String> adapter;\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tthis.delegate = new LinkedHashMap<>();\n\t\tthis.delegate.put(\"foo\", \"bar\");\n\t\tthis.delegate.put(\"qux\", \"quux\");\n\n\t\tthis.adapter = new SingleToMultiValueMapAdapter<>(this.delegate);\n\t}\n\n\t@Test\n\tvoid getFirst() {\n\t\tassertThat(this.adapter.getFirst(\"foo\")).isEqualTo(\"bar\");\n\t\tassertThat(this.adapter.getFirst(\"qux\")).isEqualTo(\"quux\");\n\t\tassertThat(this.adapter.getFirst(\"corge\")).isNull();\n\t}\n\n\t@Test\n\tvoid add() {\n\t\tthis.adapter.add(\"corge\", \"grault\");\n\t\tassertThat(this.adapter.getFirst(\"corge\")).isEqualTo(\"grault\");\n\t\tassertThat(this.delegate.get(\"corge\")).isEqualTo(\"grault\");\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() ->\n\t\t\t\tthis.adapter.add(\"foo\", \"garply\"));\n\t}\n\n\t@Test\n\tvoid addAll() {\n\t\tMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n\t\tmap.add(\"corge\", \"grault\");\n\t\tthis.adapter.addAll(map);\n\n\t\tassertThat(this.adapter.getFirst(\"corge\")).isEqualTo(\"grault\");\n\t\tassertThat(this.delegate.get(\"corge\")).isEqualTo(\"grault\");\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() ->\n\t\t\t\tthis.adapter.addAll(map));\n\t}\n\n\t@Test\n\tvoid set() {\n\t\tthis.adapter.set(\"foo\", \"baz\");\n\t\tassertThat(this.delegate.get(\"foo\")).isEqualTo(\"baz\");\n\t}\n\n\t@Test\n\tvoid setAll() {\n\t\tthis.adapter.setAll(Map.of(\"foo\", \"baz\"));\n\t\tassertThat(this.delegate.get(\"foo\")).isEqualTo(\"baz\");\n\t}\n\n\t@Test\n\tvoid size() {\n\t\tassertThat(this.adapter.size()).isEqualTo(this.delegate.size()).isEqualTo(2);\n\t}\n\n\t@Test\n\tvoid isEmpty() {\n\t\tassertThat(this.adapter.isEmpty()).isFalse();\n\n\t\tthis.adapter = new SingleToMultiValueMapAdapter<>(Collections.emptyMap());\n\t\tassertThat(this.adapter.isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid containsKey() {\n\t\tassertThat(this.adapter.containsKey(\"foo\")).isTrue();\n\t\tassertThat(this.adapter.containsKey(\"qux\")).isTrue();\n\t\tassertThat(this.adapter.containsKey(\"corge\")).isFalse();\n\t}\n\n\t@Test\n\tvoid containsValue() {\n\t\tassertThat(this.adapter.containsValue(List.of(\"bar\"))).isTrue();\n\t\tassertThat(this.adapter.containsValue(List.of(\"quux\"))).isTrue();\n\t\tassertThat(this.adapter.containsValue(List.of(\"corge\"))).isFalse();\n\t}\n\n\t@Test\n\tvoid get() {\n\t\tassertThat(this.adapter.get(\"foo\")).isEqualTo(List.of(\"bar\"));\n\t\tassertThat(this.adapter.get(\"qux\")).isEqualTo(List.of(\"quux\"));\n\t\tassertThat(this.adapter.get(\"corge\")).isNull();\n\t}\n\n\t@Test\n\tvoid put() {\n\t\tassertThat(this.adapter.put(\"foo\", List.of(\"baz\"))).containsExactly(\"bar\");\n\t\tassertThat(this.adapter.put(\"qux\", Collections.emptyList())).containsExactly(\"quux\");\n\t\tassertThat(this.adapter.put(\"grault\", List.of(\"garply\"))).isNull();\n\n\t\tassertThat(this.delegate).containsExactly(entry(\"foo\", \"baz\"), entry(\"qux\", null), entry(\"grault\", \"garply\"));\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() ->\n\t\t\t\tthis.adapter.put(\"foo\", List.of(\"bar\", \"baz\")));\n\t}\n\n\t@Test\n\tvoid remove() {\n\t\tassertThat(this.adapter.remove(\"foo\")).isEqualTo(List.of(\"bar\"));\n\t\tassertThat(this.adapter.containsKey(\"foo\")).isFalse();\n\t\tassertThat(this.delegate.containsKey(\"foo\")).isFalse();\n\t}\n\n\t@Test\n\tvoid putAll() {\n\t\tMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n\t\tmap.add(\"foo\", \"baz\");\n\t\tmap.add(\"qux\", null);\n\t\tmap.add(\"grault\", \"garply\");\n\t\tthis.adapter.putAll(map);\n\n\t\tassertThat(this.delegate).containsExactly(entry(\"foo\", \"baz\"), entry(\"qux\", null), entry(\"grault\", \"garply\"));\n\t}\n\n\t@Test\n\tvoid clear() {\n\t\tthis.adapter.clear();\n\t\tassertThat(this.adapter).isEmpty();\n\t\tassertThat(this.delegate).isEmpty();\n\t}\n\n\t@Test\n\tvoid keySet() {\n\t\tassertThat(this.adapter.keySet()).containsExactly(\"foo\", \"qux\");\n\t}\n\n\t@Test\n\tvoid values() {\n\t\tassertThat(this.adapter.values()).containsExactly(List.of(\"bar\"), List.of(\"quux\"));\n\t}\n\n\t@Test\n\tvoid entrySet() {\n\t\tassertThat(this.adapter.entrySet()).containsExactly(entry(\"foo\", List.of(\"bar\")), entry(\"qux\", List.of(\"quux\")));\n\t}\n\n\t@Test\n\tvoid forEach() {\n\t\tMultiValueMap<String, String> seen = new LinkedMultiValueMap<>();\n\t\tthis.adapter.forEach(seen::put);\n\t\tassertThat(seen).containsExactly(entry(\"foo\", List.of(\"bar\")), entry(\"qux\", List.of(\"quux\")));\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#adapter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#adapter",
    "headType": "field",
    "relation": "haveType",
    "tail": "MultiValueMap<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setUp() {\r\n    this.delegate = new LinkedHashMap<>();\r\n    this.delegate.put(\"foo\", \"bar\");\r\n    this.delegate.put(\"qux\", \"quux\");\r\n    this.adapter = new SingleToMultiValueMapAdapter<>(this.delegate);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  }
]