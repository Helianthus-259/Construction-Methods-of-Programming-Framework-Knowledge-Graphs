[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourcePatternUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ResourceUtils;\n\n/**\n * Utility class for determining whether a given URL is a resource\n * location that can be loaded via a {@link ResourcePatternResolver}.\n *\n * <p>Callers will usually assume that a location is a relative path\n * if the {@link #isUrl(String)} method returns {@code false}.\n *\n * @author Juergen Hoeller\n * @since 1.2.3\n */\npublic abstract class ResourcePatternUtils {\n\n\t/**\n\t * Return whether the given resource location is a URL: either a\n\t * special \"classpath\" or \"classpath*\" pseudo URL or a standard URL.\n\t * @param resourceLocation the location String to check\n\t * @return whether the location qualifies as a URL\n\t * @see ResourcePatternResolver#CLASSPATH_ALL_URL_PREFIX\n\t * @see org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX\n\t * @see org.springframework.util.ResourceUtils#isUrl(String)\n\t * @see java.net.URL\n\t */\n\tpublic static boolean isUrl(@Nullable String resourceLocation) {\n\t\treturn (resourceLocation != null &&\n\t\t\t\t(resourceLocation.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) ||\n\t\t\t\t\t\tResourceUtils.isUrl(resourceLocation)));\n\t}\n\n\t/**\n\t * Return a default {@link ResourcePatternResolver} for the given {@link ResourceLoader}.\n\t * <p>This might be the {@code ResourceLoader} itself, if it implements the\n\t * {@code ResourcePatternResolver} extension, or a default\n\t * {@link PathMatchingResourcePatternResolver} built on the given {@code ResourceLoader}.\n\t * @param resourceLoader the ResourceLoader to build a pattern resolver for\n\t * (may be {@code null} to indicate a default ResourceLoader)\n\t * @return the ResourcePatternResolver\n\t * @see PathMatchingResourcePatternResolver\n\t */\n\tpublic static ResourcePatternResolver getResourcePatternResolver(@Nullable ResourceLoader resourceLoader) {\n\t\tif (resourceLoader instanceof ResourcePatternResolver resolver) {\n\t\t\treturn resolver;\n\t\t}\n\t\telse if (resourceLoader != null) {\n\t\t\treturn new PathMatchingResourcePatternResolver(resourceLoader);\n\t\t}\n\t\telse {\n\t\t\treturn new PathMatchingResourcePatternResolver();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternUtils#isUrl(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the given resource location is a URL: either a\r\n * special \"classpath\" or \"classpath*\" pseudo URL or a standard URL.\r\n * @param resourceLocation the location String to check\r\n * @return whether the location qualifies as a URL\r\n * @see ResourcePatternResolver#CLASSPATH_ALL_URL_PREFIX\r\n * @see org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX\r\n * @see org.springframework.util.ResourceUtils#isUrl(String)\r\n * @see java.net.URL\r\n */\r\npublic static boolean isUrl(@Nullable String resourceLocation) {\r\n    return (resourceLocation != null && (resourceLocation.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) || ResourceUtils.isUrl(resourceLocation)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePatternUtils#isUrl(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver(ResourceLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a default {@link ResourcePatternResolver} for the given {@link ResourceLoader}.\r\n * <p>This might be the {@code ResourceLoader} itself, if it implements the\r\n * {@code ResourcePatternResolver} extension, or a default\r\n * {@link PathMatchingResourcePatternResolver} built on the given {@code ResourceLoader}.\r\n * @param resourceLoader the ResourceLoader to build a pattern resolver for\r\n * (may be {@code null} to indicate a default ResourceLoader)\r\n * @return the ResourcePatternResolver\r\n * @see PathMatchingResourcePatternResolver\r\n */\r\npublic static ResourcePatternResolver getResourcePatternResolver(@Nullable ResourceLoader resourceLoader) {\r\n    if (resourceLoader instanceof ResourcePatternResolver resolver) {\r\n        return resolver;\r\n    } else if (resourceLoader != null) {\r\n        return new PathMatchingResourcePatternResolver(resourceLoader);\r\n    } else {\r\n        return new PathMatchingResourcePatternResolver();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver(ResourceLoader)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourcePropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.PropertiesPropertySource;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.StringUtils;\n\n/**\n * Subclass of {@link PropertiesPropertySource} that loads a {@link Properties} object\n * from a given {@link org.springframework.core.io.Resource} or resource location such as\n * {@code \"classpath:/com/myco/foo.properties\"} or {@code \"file:/path/to/file.xml\"}.\n *\n * <p>Both traditional and XML-based properties file formats are supported; however, in\n * order for XML processing to take effect, the underlying {@code Resource}'s\n * {@link org.springframework.core.io.Resource#getFilename() getFilename()} method must\n * return a non-{@code null} value that ends in {@code \".xml\"}.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see org.springframework.core.io.Resource\n * @see org.springframework.core.io.support.EncodedResource\n */\npublic class ResourcePropertySource extends PropertiesPropertySource {\n\n\t/** The original resource name, if different from the given name. */\n\tprivate final @Nullable String resourceName;\n\n\n\t/**\n\t * Create a PropertySource having the given name based on Properties\n\t * loaded from the given encoded resource.\n\t */\n\tpublic ResourcePropertySource(String name, EncodedResource resource) throws IOException {\n\t\tsuper(name, PropertiesLoaderUtils.loadProperties(resource));\n\t\tthis.resourceName = getNameForResource(resource.getResource());\n\t}\n\n\t/**\n\t * Create a PropertySource based on Properties loaded from the given resource.\n\t * The name of the PropertySource will be generated based on the\n\t * {@link Resource#getDescription() description} of the given resource.\n\t */\n\tpublic ResourcePropertySource(EncodedResource resource) throws IOException {\n\t\tsuper(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource));\n\t\tthis.resourceName = null;\n\t}\n\n\t/**\n\t * Create a PropertySource having the given name based on Properties\n\t * loaded from the given encoded resource.\n\t */\n\tpublic ResourcePropertySource(String name, Resource resource) throws IOException {\n\t\tsuper(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)));\n\t\tthis.resourceName = getNameForResource(resource);\n\t}\n\n\t/**\n\t * Create a PropertySource based on Properties loaded from the given resource.\n\t * The name of the PropertySource will be generated based on the\n\t * {@link Resource#getDescription() description} of the given resource.\n\t */\n\tpublic ResourcePropertySource(Resource resource) throws IOException {\n\t\tsuper(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)));\n\t\tthis.resourceName = null;\n\t}\n\n\t/**\n\t * Create a PropertySource having the given name based on Properties loaded from\n\t * the given resource location and using the given class loader to load the\n\t * resource (assuming it is prefixed with {@code classpath:}).\n\t */\n\tpublic ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {\n\t\tthis(name, new DefaultResourceLoader(classLoader).getResource(location));\n\t}\n\n\t/**\n\t * Create a PropertySource based on Properties loaded from the given resource\n\t * location and use the given class loader to load the resource, assuming it is\n\t * prefixed with {@code classpath:}. The name of the PropertySource will be\n\t * generated based on the {@link Resource#getDescription() description} of the\n\t * resource.\n\t */\n\tpublic ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {\n\t\tthis(new DefaultResourceLoader(classLoader).getResource(location));\n\t}\n\n\t/**\n\t * Create a PropertySource having the given name based on Properties loaded from\n\t * the given resource location. The default thread context class loader will be\n\t * used to load the resource (assuming the location string is prefixed with\n\t * {@code classpath:}).\n\t */\n\tpublic ResourcePropertySource(String name, String location) throws IOException {\n\t\tthis(name, new DefaultResourceLoader().getResource(location));\n\t}\n\n\t/**\n\t * Create a PropertySource based on Properties loaded from the given resource\n\t * location. The name of the PropertySource will be generated based on the\n\t * {@link Resource#getDescription() description} of the resource.\n\t */\n\tpublic ResourcePropertySource(String location) throws IOException {\n\t\tthis(new DefaultResourceLoader().getResource(location));\n\t}\n\n\tprivate ResourcePropertySource(String name, @Nullable String resourceName, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t\tthis.resourceName = resourceName;\n\t}\n\n\n\t/**\n\t * Return a potentially adapted variant of this {@link ResourcePropertySource},\n\t * overriding the previously given (or derived) name with the specified name.\n\t * @since 4.0.4\n\t */\n\tpublic ResourcePropertySource withName(String name) {\n\t\tif (this.name.equals(name)) {\n\t\t\treturn this;\n\t\t}\n\t\t// Store the original resource name if necessary...\n\t\tif (this.resourceName != null) {\n\t\t\tif (this.resourceName.equals(name)) {\n\t\t\t\treturn new ResourcePropertySource(this.resourceName, null, this.source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new ResourcePropertySource(name, this.resourceName, this.source);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Current name is resource name -> preserve it in the extra field...\n\t\t\treturn new ResourcePropertySource(name, this.name, this.source);\n\t\t}\n\t}\n\n\t/**\n\t * Return a potentially adapted variant of this {@link ResourcePropertySource},\n\t * overriding the previously given name (if any) with the original resource name\n\t * (equivalent to the name generated by the name-less constructor variants).\n\t * @since 4.1\n\t */\n\tpublic ResourcePropertySource withResourceName() {\n\t\tif (this.resourceName == null) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new ResourcePropertySource(this.resourceName, null, this.source);\n\t}\n\n\n\t/**\n\t * Return the description for the given Resource; if the description is\n\t * empty, return the class name of the resource plus its identity hash code.\n\t * @see org.springframework.core.io.Resource#getDescription()\n\t */\n\tprivate static String getNameForResource(Resource resource) {\n\t\tString name = resource.getDescription();\n\t\tif (!StringUtils.hasText(name)) {\n\t\t\tname = resource.getClass().getSimpleName() + \"@\" + System.identityHashCode(resource);\n\t\t}\n\t\treturn name;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourcePropertySource#resourceName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource#resourceName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource#withName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a potentially adapted variant of this {@link ResourcePropertySource},\r\n * overriding the previously given (or derived) name with the specified name.\r\n * @since 4.0.4\r\n */\r\npublic ResourcePropertySource withName(String name) {\r\n    if (this.name.equals(name)) {\r\n        return this;\r\n    }\r\n    // Store the original resource name if necessary...\r\n    if (this.resourceName != null) {\r\n        if (this.resourceName.equals(name)) {\r\n            return new ResourcePropertySource(this.resourceName, null, this.source);\r\n        } else {\r\n            return new ResourcePropertySource(name, this.resourceName, this.source);\r\n        }\r\n    } else {\r\n        // Current name is resource name -> preserve it in the extra field...\r\n        return new ResourcePropertySource(name, this.name, this.source);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySource#withName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource#withResourceName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a potentially adapted variant of this {@link ResourcePropertySource},\r\n * overriding the previously given name (if any) with the original resource name\r\n * (equivalent to the name generated by the name-less constructor variants).\r\n * @since 4.1\r\n */\r\npublic ResourcePropertySource withResourceName() {\r\n    if (this.resourceName == null) {\r\n        return this;\r\n    }\r\n    return new ResourcePropertySource(this.resourceName, null, this.source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySource#withResourceName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource#getNameForResource(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the description for the given Resource; if the description is\r\n * empty, return the class name of the resource plus its identity hash code.\r\n * @see org.springframework.core.io.Resource#getDescription()\r\n */\r\nprivate static String getNameForResource(Resource resource) {\r\n    String name = resource.getDescription();\r\n    if (!StringUtils.hasText(name)) {\r\n        name = resource.getClass().getSimpleName() + \"@\" + System.identityHashCode(resource);\r\n    }\r\n    return name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePropertySource#getNameForResource(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertiesPropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  }
]