[
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#canLoad(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#validate(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check if values from the given annotation can be safely accessed without causing\r\n * any {@link TypeNotPresentException TypeNotPresentExceptions}.\r\n * <p>This method is designed to cover Google App Engine's late arrival of such\r\n * exceptions for {@code Class} values (instead of the more typical early\r\n * {@code Class.getAnnotations() failure} on a regular JVM).\r\n * @param annotation the annotation to validate\r\n * @throws IllegalStateException if a declared {@code Class} attribute could not be read\r\n * @see #canLoad(Annotation)\r\n */\r\nvoid validate(Annotation annotation) {\r\n    assertAnnotation(annotation);\r\n    for (int i = 0; i < size(); i++) {\r\n        if (canThrowTypeNotPresentException(i)) {\r\n            try {\r\n                AnnotationUtils.invokeAnnotationMethod(get(i), annotation);\r\n            } catch (IllegalStateException ex) {\r\n                throw ex;\r\n            } catch (Throwable ex) {\r\n                throw new IllegalStateException(\"Could not obtain annotation attribute value for \" + get(i).getName() + \" declared on @\" + getName(annotation.annotationType()), ex);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#validate(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#assertAnnotation(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertAnnotation(Annotation annotation) {\r\n    Assert.notNull(annotation, \"Annotation must not be null\");\r\n    if (this.annotationType != null) {\r\n        Assert.isInstanceOf(this.annotationType, annotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#assertAnnotation(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#get(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the attribute with the specified name or {@code null} if no\r\n * matching attribute exists.\r\n * @param name the attribute name to find\r\n * @return the attribute method or {@code null}\r\n */\r\n@Nullable\r\nMethod get(String name) {\r\n    int index = indexOf(name);\r\n    return (index != -1 ? this.attributeMethods[index] : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#get(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#get(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#get(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the attribute at the specified index.\r\n * @param index the index of the attribute to return\r\n * @return the attribute method\r\n * @throws IndexOutOfBoundsException if the index is out of range\r\n * ({@code index < 0 || index >= size()})\r\n */\r\nMethod get(int index) {\r\n    return this.attributeMethods[index];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#get(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#canThrowTypeNotPresentException(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the attribute at the specified index could throw a\r\n * {@link TypeNotPresentException} when accessed.\r\n * @param index the index of the attribute to check\r\n * @return {@code true} if the attribute can throw a\r\n * {@link TypeNotPresentException}\r\n */\r\nboolean canThrowTypeNotPresentException(int index) {\r\n    return this.canThrowTypeNotPresentException[index];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#canThrowTypeNotPresentException(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#indexOf(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the index of the attribute with the specified name, or {@code -1}\r\n * if there is no attribute with the name.\r\n * @param name the name to find\r\n * @return the index of the attribute, or {@code -1}\r\n */\r\nint indexOf(String name) {\r\n    for (int i = 0; i < this.attributeMethods.length; i++) {\r\n        if (this.attributeMethods[i].getName().equals(name)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#indexOf(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#indexOf(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the index of the specified attribute, or {@code -1} if the\r\n * attribute is not in this collection.\r\n * @param attribute the attribute to find\r\n * @return the index of the attribute, or {@code -1}\r\n */\r\nint indexOf(Method attribute) {\r\n    for (int i = 0; i < this.attributeMethods.length; i++) {\r\n        if (this.attributeMethods[i].equals(attribute)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#indexOf(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the number of attributes in this collection.\r\n * @return the number of attributes\r\n */\r\nint size() {\r\n    return this.attributeMethods.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods#hasDefaultValueMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if at least one of the attribute methods has a default value.\r\n * @return {@code true} if there is at least one attribute method with a default value\r\n */\r\nboolean hasDefaultValueMethod() {\r\n    return this.hasDefaultValueMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethods#hasDefaultValueMethod()",
    "tailType": "method"
  }
]