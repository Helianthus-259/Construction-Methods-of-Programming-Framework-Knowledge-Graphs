[
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handle#descriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handle#descriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Handle#isInterface",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Handle#isInterface",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Handle#getTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the kind of field or method designated by this handle.\r\n *\r\n * @return {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link Opcodes#H_PUTFIELD},\r\n *     {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\r\n *     Opcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\r\n *     Opcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\r\n */\r\npublic int getTag() {\r\n    return tag;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#getTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#getOwner()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal name of the class that owns the field or method designated by this handle.\r\n *\r\n * @return the internal name of the class that owns the field or method designated by this handle\r\n *     (see {@link Type#getInternalName()}).\r\n */\r\npublic String getOwner() {\r\n    return owner;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#getOwner()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the name of the field or method designated by this handle.\r\n *\r\n * @return the name of the field or method designated by this handle.\r\n */\r\npublic String getName() {\r\n    return name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#getName()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxStreamXMLReaderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.Handle#getDesc()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the descriptor of the field or method designated by this handle.\r\n *\r\n * @return the descriptor of the field or method designated by this handle.\r\n */\r\npublic String getDesc() {\r\n    return descriptor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#getDesc()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#isInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns true if the owner of the field or method designated by this handle is an interface.\r\n *\r\n * @return true if the owner of the field or method designated by this handle is an interface.\r\n */\r\npublic boolean isInterface() {\r\n    return isInterface;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#isInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(final Object object) {\r\n    if (object == this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof Handle)) {\r\n        return false;\r\n    }\r\n    Handle handle = (Handle) object;\r\n    return tag == handle.tag && isInterface == handle.isInterface && owner.equals(handle.owner) && name.equals(handle.name) && descriptor.equals(handle.descriptor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Handle",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Handle#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Handle#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.Handle#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return tag + (isInterface ? 64 : 0) + owner.hashCode() * name.hashCode() * descriptor.hashCode();\r\n}",
    "tailType": "method_code"
  }
]