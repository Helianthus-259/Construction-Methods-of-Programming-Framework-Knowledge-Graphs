[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.FieldTypeCustomizer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer",
    "headType": "class",
    "relation": "provide",
    "tail": "package org.springframework.cglib.core;\n\nimport org.springframework.asm.Type;\n\n/**\n * Customizes key types for {@link KeyFactory} right in constructor.\n */\npublic interface FieldTypeCustomizer extends KeyFactoryCustomizer {\n    /**\n     * Customizes {@code this.FIELD_0 = ?} assignment in key constructor\n     * @param e code emitter\n     * @param index parameter index\n     * @param type parameter type\n     */\n    void customize(CodeEmitter e, int index, Type type);\n\n    /**\n     * Computes type of field for storing given parameter\n     * @param index parameter index\n     * @param type parameter type\n     */\n    Type getOutType(int index, Type type);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Customizes {@code this.FIELD_0 = ?} assignment in key constructor\r\n * @param e code emitter\r\n * @param index parameter index\r\n * @param type parameter type\r\n */\r\nvoid customize(CodeEmitter e, int index, Type type);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.FieldTypeCustomizer#customize(CodeEmitter,int,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer#getOutType(int,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Computes type of field for storing given parameter\r\n * @param index parameter index\r\n * @param type parameter type\r\n */\r\nType getOutType(int index, Type type);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.FieldTypeCustomizer#getOutType(int,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.FieldTypeCustomizer",
    "headType": "class",
    "relation": "extend",
    "tail": "KeyFactoryCustomizer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.GeneratorStrategy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\n/**\n * The <code>GeneratorStrategy</code> is responsible for taking a\n * {@link ClassGenerator} and producing a byte array containing the\n * data for the generated <code>Class</code>.  By providing your\n * own strategy you may examine or modify the generated class before\n * it is loaded. Typically this will be accomplished by subclassing\n * {@link DefaultGeneratorStrategy} and overriding the appropriate\n * protected method.\n * @see AbstractClassGenerator#setStrategy\n */\npublic interface GeneratorStrategy {\n    /**\n     * Generate the class.\n     * @param cg a class generator on which you can call {@link ClassGenerator#generateClass}\n     * @return a byte array containing the bits of a valid Class\n     */\n    byte[] generate(ClassGenerator cg) throws Exception;\n\n    /**\n     * The <code>GeneratorStrategy</code> in use does not currently, but may\n     * in the future, affect the caching of classes generated by {@link\n     * AbstractClassGenerator}, so this is a reminder that you should\n     * correctly implement <code>equals</code> and <code>hashCode</code>\n     * to avoid generating too many classes.\n     */\n    @Override\n\tboolean equals(Object o);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate the class.\r\n * @param cg a class generator on which you can call {@link ClassGenerator#generateClass}\r\n * @return a byte array containing the bits of a valid Class\r\n */\r\nbyte[] generate(ClassGenerator cg) throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.GeneratorStrategy#generate(ClassGenerator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The <code>GeneratorStrategy</code> in use does not currently, but may\r\n * in the future, affect the caching of classes generated by {@link\r\n * AbstractClassGenerator}, so this is a reminder that you should\r\n * correctly implement <code>equals</code> and <code>hashCode</code>\r\n * to avoid generating too many classes.\r\n */\r\n@Override\r\nboolean equals(Object o);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.GeneratorStrategy#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.HashCodeCustomizer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.HashCodeCustomizer",
    "headType": "class",
    "relation": "provide",
    "tail": "package org.springframework.cglib.core;\n\nimport org.springframework.asm.Type;\n\npublic interface HashCodeCustomizer extends KeyFactoryCustomizer {\n    /**\n     * Customizes calculation of hashcode\n     * @param e code emitter\n     * @param type parameter type\n     */\n    boolean customize(CodeEmitter e, Type type);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.HashCodeCustomizer#customize(CodeEmitter,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Customizes calculation of hashcode\r\n * @param e code emitter\r\n * @param type parameter type\r\n */\r\nboolean customize(CodeEmitter e, Type type);",
    "tailType": "method_code"
  }
]