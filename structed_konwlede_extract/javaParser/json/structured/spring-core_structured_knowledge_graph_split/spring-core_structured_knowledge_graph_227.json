[
  {
    "head": "org.springframework.util.FilteredMapTests#containsKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsKey() {\r\n    Map<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    boolean contained = filtered.containsKey(\"baz\");\r\n    assertThat(contained).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#containsKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#containsKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#get()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid get() {\r\n    Map<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    String value = filtered.get(\"baz\");\r\n    assertThat(value).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#get()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#put()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid put() {\r\n    Map<String, String> map = new HashMap<>(Map.of(\"foo\", \"bar\", \"quux\", \"corge\"));\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    String value = filtered.put(\"baz\", \"qux\");\r\n    assertThat(value).isNull();\r\n    assertThat(filtered.containsKey(\"baz\")).isFalse();\r\n    assertThat(map.get(\"baz\")).isEqualTo(\"qux\");\r\n    // overwrite\r\n    value = filtered.put(\"baz\", \"QUX\");\r\n    assertThat(value).isNull();\r\n    assertThat(filtered.containsKey(\"baz\")).isFalse();\r\n    assertThat(map.get(\"baz\")).isEqualTo(\"QUX\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#put()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#put()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#remove()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid remove() {\r\n    Map<String, String> map = new HashMap<>(Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"));\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    String value = filtered.remove(\"baz\");\r\n    assertThat(value).isNull();\r\n    assertThat(filtered.containsKey(\"baz\")).isFalse();\r\n    assertThat(map.containsKey(\"baz\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#remove()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid keySet() {\r\n    Map<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    Set<String> keySet = filtered.keySet();\r\n    assertThat(keySet).containsExactlyInAnyOrder(\"foo\", \"quux\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FilteredSetTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FilteredSetTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass FilteredSetTests {\n\n\t@Test\n\tvoid testEquals() {\n\t\tSet<String> set = Set.of(\"foo\", \"bar\", \"baz\");\n\t\tFilteredSet<String> filtered = new FilteredSet<>(set, s -> !s.equals(\"bar\"));\n\n\t\tSet<String> expected = Set.of(\"foo\", \"baz\");\n\n\t\tassertThat(filtered.equals(expected)).isTrue();\n\t\tassertThat(filtered.equals(set)).isFalse();\n\t\tassertThat(filtered.equals(Collections.emptySet())).isFalse();\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FilteredSetTests#testEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testEquals() {\r\n    Set<String> set = Set.of(\"foo\", \"bar\", \"baz\");\r\n    FilteredSet<String> filtered = new FilteredSet<>(set, s -> !s.equals(\"bar\"));\r\n    Set<String> expected = Set.of(\"foo\", \"baz\");\r\n    assertThat(filtered.equals(expected)).isTrue();\r\n    assertThat(filtered.equals(set)).isFalse();\r\n    assertThat(filtered.equals(Collections.emptySet())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredSetTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredSetTests#testEquals()",
    "tailType": "method"
  }
]