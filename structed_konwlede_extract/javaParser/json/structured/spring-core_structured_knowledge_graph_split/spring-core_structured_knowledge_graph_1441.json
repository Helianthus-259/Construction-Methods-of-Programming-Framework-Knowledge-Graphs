[
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.DomContentHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.ProcessingInstruction;\nimport org.w3c.dom.Text;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.Locator;\n\n/**\n * SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s.\n *\n * @author Arjen Poutsma\n * @since 3.0\n * @see org.w3c.dom.Node\n */\nclass DomContentHandler implements ContentHandler {\n\n\tprivate final Document document;\n\n\tprivate final List<Element> elements = new ArrayList<>();\n\n\tprivate final Node node;\n\n\n\t/**\n\t * Create a new instance of the {@code DomContentHandler} with the given node.\n\t * @param node the node to publish events to\n\t */\n\tDomContentHandler(Node node) {\n\t\tthis.node = node;\n\t\t// The following pattern variable \"doc\" cannot be named \"document\" due to lacking\n\t\t// support in Checkstyle: https://github.com/checkstyle/checkstyle/issues/10969\n\t\tif (node instanceof Document doc) {\n\t\t\tthis.document = doc;\n\t\t}\n\t\telse {\n\t\t\tthis.document = node.getOwnerDocument();\n\t\t}\n\t}\n\n\n\tprivate Node getParent() {\n\t\tif (!this.elements.isEmpty()) {\n\t\t\treturn this.elements.get(this.elements.size() - 1);\n\t\t}\n\t\telse {\n\t\t\treturn this.node;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void startElement(String uri, String localName, String qName, Attributes attributes) {\n\t\tNode parent = getParent();\n\t\tElement element = this.document.createElementNS(uri, qName);\n\t\tfor (int i = 0; i < attributes.getLength(); i++) {\n\t\t\tString attrUri = attributes.getURI(i);\n\t\t\tString attrQname = attributes.getQName(i);\n\t\t\tString value = attributes.getValue(i);\n\t\t\tif (!attrQname.startsWith(\"xmlns\")) {\n\t\t\t\telement.setAttributeNS(attrUri, attrQname, value);\n\t\t\t}\n\t\t}\n\t\telement = (Element) parent.appendChild(element);\n\t\tthis.elements.add(element);\n\t}\n\n\t@Override\n\tpublic void endElement(String uri, String localName, String qName) {\n\t\tthis.elements.remove(this.elements.size() - 1);\n\t}\n\n\t@Override\n\tpublic void characters(char[] ch, int start, int length) {\n\t\tString data = new String(ch, start, length);\n\t\tNode parent = getParent();\n\t\tNode lastChild = parent.getLastChild();\n\t\tif (lastChild != null && lastChild.getNodeType() == Node.TEXT_NODE) {\n\t\t\t((Text) lastChild).appendData(data);\n\t\t}\n\t\telse {\n\t\t\tText text = this.document.createTextNode(data);\n\t\t\tparent.appendChild(text);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void processingInstruction(String target, String data) {\n\t\tNode parent = getParent();\n\t\tProcessingInstruction pi = this.document.createProcessingInstruction(target, data);\n\t\tparent.appendChild(pi);\n\t}\n\n\n\t// Unsupported\n\n\t@Override\n\tpublic void setDocumentLocator(Locator locator) {\n\t}\n\n\t@Override\n\tpublic void startDocument() {\n\t}\n\n\t@Override\n\tpublic void endDocument() {\n\t}\n\n\t@Override\n\tpublic void startPrefixMapping(String prefix, String uri) {\n\t}\n\n\t@Override\n\tpublic void endPrefixMapping(String prefix) {\n\t}\n\n\t@Override\n\tpublic void ignorableWhitespace(char[] ch, int start, int length) {\n\t}\n\n\t@Override\n\tpublic void skippedEntity(String name) {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandler#document",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#document",
    "headType": "field",
    "relation": "haveType",
    "tail": "Document",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandler#elements",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#elements",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Element>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandler#node",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#node",
    "headType": "field",
    "relation": "haveType",
    "tail": "Node",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#getParent()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Node getParent() {\r\n    if (!this.elements.isEmpty()) {\r\n        return this.elements.get(this.elements.size() - 1);\r\n    } else {\r\n        return this.node;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandler#getParent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#startElement(String,String,String,Attributes)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void startElement(String uri, String localName, String qName, Attributes attributes) {\r\n    Node parent = getParent();\r\n    Element element = this.document.createElementNS(uri, qName);\r\n    for (int i = 0; i < attributes.getLength(); i++) {\r\n        String attrUri = attributes.getURI(i);\r\n        String attrQname = attributes.getQName(i);\r\n        String value = attributes.getValue(i);\r\n        if (!attrQname.startsWith(\"xmlns\")) {\r\n            element.setAttributeNS(attrUri, attrQname, value);\r\n        }\r\n    }\r\n    element = (Element) parent.appendChild(element);\r\n    this.elements.add(element);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandler#startElement(String,String,String,Attributes)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#startElement(String,String,String,Attributes)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#endElement(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void endElement(String uri, String localName, String qName) {\r\n    this.elements.remove(this.elements.size() - 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandler#endElement(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#endElement(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#characters(char[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void characters(char[] ch, int start, int length) {\r\n    String data = new String(ch, start, length);\r\n    Node parent = getParent();\r\n    Node lastChild = parent.getLastChild();\r\n    if (lastChild != null && lastChild.getNodeType() == Node.TEXT_NODE) {\r\n        ((Text) lastChild).appendData(data);\r\n    } else {\r\n        Text text = this.document.createTextNode(data);\r\n        parent.appendChild(text);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomContentHandler#characters(char[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#characters(char[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandler#processingInstruction(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void processingInstruction(String target, String data) {\r\n    Node parent = getParent();\r\n    ProcessingInstruction pi = this.document.createProcessingInstruction(target, data);\r\n    parent.appendChild(pi);\r\n}",
    "tailType": "method_code"
  }
]