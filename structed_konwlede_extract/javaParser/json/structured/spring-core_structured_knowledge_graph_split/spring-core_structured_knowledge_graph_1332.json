[
  {
    "head": "org.springframework.util.LinkedMultiValueMap#clone()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a regular copy of this Map.\r\n * @return a shallow copy of this Map, reusing this Map's value-holding List entries\r\n * (even if some entries are shared or unmodifiable) along the lines of standard\r\n * {@code Map.put} semantics\r\n * @since 4.2\r\n * @see #put(Object, List)\r\n * @see #putAll(Map)\r\n * @see LinkedMultiValueMap#LinkedMultiValueMap(Map)\r\n * @see #deepCopy()\r\n */\r\n@Override\r\npublic LinkedMultiValueMap<K, V> clone() {\r\n    return new LinkedMultiValueMap<>(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedMultiValueMap#clone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMap#clone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMap",
    "headType": "class",
    "relation": "extend",
    "tail": "MultiValueMapAdapter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MethodInvoker",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Helper class that allows for specifying a method to invoke in a declarative\n * fashion, be it static or non-static.\n *\n * <p>Usage: Specify \"targetClass\"/\"targetMethod\" or \"targetObject\"/\"targetMethod\",\n * optionally specify arguments, prepare the invoker. Afterwards, you may\n * invoke the method any number of times, obtaining the invocation result.\n *\n * @author Colin Sampaleanu\n * @author Juergen Hoeller\n * @since 19.02.2004\n * @see #prepare\n * @see #invoke\n */\npublic class MethodInvoker {\n\n\tprivate static final Object[] EMPTY_ARGUMENTS = new Object[0];\n\n\n\tprotected @Nullable Class<?> targetClass;\n\n\tprivate @Nullable Object targetObject;\n\n\tprivate @Nullable String targetMethod;\n\n\tprivate @Nullable String staticMethod;\n\n\tprivate @Nullable Object @Nullable [] arguments;\n\n\t/** The method we will call. */\n\tprivate @Nullable Method methodObject;\n\n\n\t/**\n\t * Set the target class on which to call the target method.\n\t * Only necessary when the target method is static; else,\n\t * a target object needs to be specified anyway.\n\t * @see #setTargetObject\n\t * @see #setTargetMethod\n\t */\n\tpublic void setTargetClass(@Nullable Class<?> targetClass) {\n\t\tthis.targetClass = targetClass;\n\t}\n\n\t/**\n\t * Return the target class on which to call the target method.\n\t */\n\tpublic @Nullable Class<?> getTargetClass() {\n\t\treturn this.targetClass;\n\t}\n\n\t/**\n\t * Set the target object on which to call the target method.\n\t * Only necessary when the target method is not static;\n\t * else, a target class is sufficient.\n\t * @see #setTargetClass\n\t * @see #setTargetMethod\n\t */\n\tpublic void setTargetObject(@Nullable Object targetObject) {\n\t\tthis.targetObject = targetObject;\n\t\tif (targetObject != null) {\n\t\t\tthis.targetClass = targetObject.getClass();\n\t\t}\n\t}\n\n\t/**\n\t * Return the target object on which to call the target method.\n\t */\n\tpublic @Nullable Object getTargetObject() {\n\t\treturn this.targetObject;\n\t}\n\n\t/**\n\t * Set the name of the method to be invoked.\n\t * Refers to either a static method or a non-static method,\n\t * depending on a target object being set.\n\t * @see #setTargetClass\n\t * @see #setTargetObject\n\t */\n\tpublic void setTargetMethod(@Nullable String targetMethod) {\n\t\tthis.targetMethod = targetMethod;\n\t}\n\n\t/**\n\t * Return the name of the method to be invoked.\n\t */\n\tpublic @Nullable String getTargetMethod() {\n\t\treturn this.targetMethod;\n\t}\n\n\t/**\n\t * Set a fully qualified static method name to invoke,\n\t * for example, \"example.MyExampleClass.myExampleMethod\". This is a\n\t * convenient alternative to specifying targetClass and targetMethod.\n\t * @see #setTargetClass\n\t * @see #setTargetMethod\n\t */\n\tpublic void setStaticMethod(String staticMethod) {\n\t\tthis.staticMethod = staticMethod;\n\t}\n\n\t/**\n\t * Set arguments for the method invocation. If this property is not set,\n\t * or the Object array is of length 0, a method with no arguments is assumed.\n\t */\n\tpublic void setArguments(@Nullable Object... arguments) {\n\t\tthis.arguments = arguments;\n\t}\n\n\t/**\n\t * Return the arguments for the method invocation.\n\t */\n\tpublic @Nullable Object[] getArguments() {\n\t\treturn (this.arguments != null ? this.arguments : EMPTY_ARGUMENTS);\n\t}\n\n\n\t/**\n\t * Prepare the specified method.\n\t * The method can be invoked any number of times afterwards.\n\t * @see #getPreparedMethod\n\t * @see #invoke\n\t */\n\tpublic void prepare() throws ClassNotFoundException, NoSuchMethodException {\n\t\tif (this.staticMethod != null) {\n\t\t\tint lastDotIndex = this.staticMethod.lastIndexOf('.');\n\t\t\tif (lastDotIndex == -1 || lastDotIndex == this.staticMethod.length() - 1) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"staticMethod must be a fully qualified class plus method name: \" +\n\t\t\t\t\t\t\"for example, 'example.MyExampleClass.myExampleMethod'\");\n\t\t\t}\n\t\t\tString className = this.staticMethod.substring(0, lastDotIndex);\n\t\t\tString methodName = this.staticMethod.substring(lastDotIndex + 1);\n\t\t\tif (this.targetClass == null || !this.targetClass.getName().equals(className)) {\n\t\t\t\tthis.targetClass = resolveClassName(className);\n\t\t\t}\n\t\t\tthis.targetMethod = methodName;\n\t\t}\n\n\t\tClass<?> targetClass = getTargetClass();\n\t\tString targetMethod = getTargetMethod();\n\t\tAssert.notNull(targetClass, \"Either 'targetClass' or 'targetObject' is required\");\n\t\tAssert.notNull(targetMethod, \"Property 'targetMethod' is required\");\n\n\t\t@Nullable Object[] arguments = getArguments();\n\t\tClass<?>[] argTypes = new Class<?>[arguments.length];\n\t\tfor (int i = 0; i < arguments.length; ++i) {\n\t\t\targTypes[i] = (arguments[i] != null ? arguments[i].getClass() : Object.class);\n\t\t}\n\n\t\t// Try to get the exact method first.\n\t\ttry {\n\t\t\tthis.methodObject = targetClass.getMethod(targetMethod, argTypes);\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\t// Just rethrow exception if we can't get any match.\n\t\t\tthis.methodObject = findMatchingMethod();\n\t\t\tif (this.methodObject == null) {\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given class name into a Class.\n\t * <p>The default implementations uses {@code ClassUtils.forName},\n\t * using the thread context class loader.\n\t * @param className the class name to resolve\n\t * @return the resolved Class\n\t * @throws ClassNotFoundException if the class name was invalid\n\t */\n\tprotected Class<?> resolveClassName(String className) throws ClassNotFoundException {\n\t\treturn ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n\t}\n\n\t/**\n\t * Find a matching method with the specified name for the specified arguments.\n\t * @return a matching method, or {@code null} if none\n\t * @see #getTargetClass()\n\t * @see #getTargetMethod()\n\t * @see #getArguments()\n\t */\n\tprotected @Nullable Method findMatchingMethod() {\n\t\tString targetMethod = getTargetMethod();\n\t\t@Nullable Object[] arguments = getArguments();\n\t\tint argCount = arguments.length;\n\n\t\tClass<?> targetClass = getTargetClass();\n\t\tAssert.state(targetClass != null, \"No target class set\");\n\t\tMethod[] candidates = ReflectionUtils.getAllDeclaredMethods(targetClass);\n\t\tint minTypeDiffWeight = Integer.MAX_VALUE;\n\t\tMethod matchingMethod = null;\n\n\t\tfor (Method candidate : candidates) {\n\t\t\tif (candidate.getName().equals(targetMethod) && candidate.getParameterCount() == argCount) {\n\t\t\t\tClass<?>[] paramTypes = candidate.getParameterTypes();\n\t\t\t\tint typeDiffWeight = getTypeDifferenceWeight(paramTypes, arguments);\n\t\t\t\tif (typeDiffWeight < minTypeDiffWeight) {\n\t\t\t\t\tminTypeDiffWeight = typeDiffWeight;\n\t\t\t\t\tmatchingMethod = candidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn matchingMethod;\n\t}\n\n\t/**\n\t * Return the prepared Method object that will be invoked.\n\t * <p>Can for example be used to determine the return type.\n\t * @return the prepared Method object (never {@code null})\n\t * @throws IllegalStateException if the invoker hasn't been prepared yet\n\t * @see #prepare\n\t * @see #invoke\n\t */\n\tpublic Method getPreparedMethod() throws IllegalStateException {\n\t\tif (this.methodObject == null) {\n\t\t\tthrow new IllegalStateException(\"prepare() must be called prior to invoke() on MethodInvoker\");\n\t\t}\n\t\treturn this.methodObject;\n\t}\n\n\t/**\n\t * Return whether this invoker has been prepared already,\n\t * i.e. whether it allows access to {@link #getPreparedMethod()} already.\n\t */\n\tpublic boolean isPrepared() {\n\t\treturn (this.methodObject != null);\n\t}\n\n\t/**\n\t * Invoke the specified method.\n\t * <p>The invoker needs to have been prepared before.\n\t * @return the object (possibly null) returned by the method invocation,\n\t * or {@code null} if the method has a void return type\n\t * @throws InvocationTargetException if the target method threw an exception\n\t * @throws IllegalAccessException if the target method couldn't be accessed\n\t * @see #prepare\n\t */\n\tpublic @Nullable Object invoke() throws InvocationTargetException, IllegalAccessException {\n\t\t// In the static case, target will simply be {@code null}.\n\t\tObject targetObject = getTargetObject();\n\t\tMethod preparedMethod = getPreparedMethod();\n\t\tif (targetObject == null && !Modifier.isStatic(preparedMethod.getModifiers())) {\n\t\t\tthrow new IllegalArgumentException(\"Target method must not be non-static without a target\");\n\t\t}\n\t\tReflectionUtils.makeAccessible(preparedMethod);\n\t\treturn preparedMethod.invoke(targetObject, getArguments());\n\t}\n\n\n\t/**\n\t * Algorithm that judges the match between the declared parameter types of a candidate method\n\t * and a specific list of arguments that this method is supposed to be invoked with.\n\t * <p>Determines a weight that represents the class hierarchy difference between types and\n\t * arguments. A direct match, i.e. type Integer &rarr; arg of class Integer, does not increase\n\t * the result - all direct matches means weight 0. A match between type Object and arg of\n\t * class Integer would increase the weight by 2, due to the superclass 2 steps up in the\n\t * hierarchy (i.e. Object) being the last one that still matches the required type Object.\n\t * Type Number and class Integer would increase the weight by 1 accordingly, due to the\n\t * superclass 1 step up the hierarchy (i.e. Number) still matching the required type Number.\n\t * Therefore, with an arg of type Integer, a constructor (Integer) would be preferred to a\n\t * constructor (Number) which would in turn be preferred to a constructor (Object).\n\t * All argument weights get accumulated.\n\t * <p>Note: This is the algorithm used by MethodInvoker itself and also the algorithm\n\t * used for constructor and factory method selection in Spring's bean container (in case\n\t * of lenient constructor resolution which is the default for regular bean definitions).\n\t * @param paramTypes the parameter types to match\n\t * @param args the arguments to match\n\t * @return the accumulated weight for all arguments\n\t */\n\tpublic static int getTypeDifferenceWeight(Class<?>[] paramTypes, @Nullable Object[] args) {\n\t\tint result = 0;\n\t\tfor (int i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!ClassUtils.isAssignableValue(paramTypes[i], args[i])) {\n\t\t\t\treturn Integer.MAX_VALUE;\n\t\t\t}\n\t\t\tif (args[i] != null) {\n\t\t\t\tClass<?> paramType = paramTypes[i];\n\t\t\t\tClass<?> superClass = args[i].getClass().getSuperclass();\n\t\t\t\twhile (superClass != null) {\n\t\t\t\t\tif (paramType.equals(superClass)) {\n\t\t\t\t\t\tresult = result + 2;\n\t\t\t\t\t\tsuperClass = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (ClassUtils.isAssignable(paramType, superClass)) {\n\t\t\t\t\t\tresult = result + 2;\n\t\t\t\t\t\tsuperClass = superClass.getSuperclass();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsuperClass = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (paramType.isInterface()) {\n\t\t\t\t\tresult = result + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#EMPTY_ARGUMENTS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#EMPTY_ARGUMENTS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#targetClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#targetClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#targetObject",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#targetObject",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#targetMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#targetMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#staticMethod",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#staticMethod",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#arguments",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.MethodInvoker#arguments",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.MethodInvoker",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.MethodInvoker#methodObject",
    "tailType": "field"
  }
]