[
  {
    "head": "org.springframework.core.task.support.ExecutorServiceAdapter#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @Override on JDK 19\r\npublic void close() {\r\n    // no-op in order to avoid container-triggered shutdown call which would lead to exception logging\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.ExecutorServiceAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.ExecutorServiceAdapter#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.ExecutorServiceAdapter",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractExecutorService",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task.support",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task.support;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.FutureTask;\nimport java.util.concurrent.RejectedExecutionException;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.task.AsyncTaskExecutor;\nimport org.springframework.core.task.TaskDecorator;\nimport org.springframework.core.task.TaskRejectedException;\nimport org.springframework.util.Assert;\n\n/**\n * Adapter that takes a JDK {@code java.util.concurrent.Executor} and\n * exposes a Spring {@link org.springframework.core.task.TaskExecutor} for it.\n * Also detects an extended {@code java.util.concurrent.ExecutorService}, adapting\n * the {@link org.springframework.core.task.AsyncTaskExecutor} interface accordingly.\n *\n * @author Juergen Hoeller\n * @since 3.0\n * @see java.util.concurrent.Executor\n * @see java.util.concurrent.ExecutorService\n * @see java.util.concurrent.Executors\n */\n@SuppressWarnings(\"deprecation\")\npublic class TaskExecutorAdapter implements AsyncTaskExecutor {\n\n\tprivate final Executor concurrentExecutor;\n\n\tprivate @Nullable TaskDecorator taskDecorator;\n\n\n\t/**\n\t * Create a new TaskExecutorAdapter,\n\t * using the given JDK concurrent executor.\n\t * @param concurrentExecutor the JDK concurrent executor to delegate to\n\t */\n\tpublic TaskExecutorAdapter(Executor concurrentExecutor) {\n\t\tAssert.notNull(concurrentExecutor, \"Executor must not be null\");\n\t\tthis.concurrentExecutor = concurrentExecutor;\n\t}\n\n\n\t/**\n\t * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}\n\t * about to be executed.\n\t * <p>Note that such a decorator is not necessarily being applied to the\n\t * user-supplied {@code Runnable}/{@code Callable} but rather to the actual\n\t * execution callback (which may be a wrapper around the user-supplied task).\n\t * <p>The primary use case is to set some execution context around the task's\n\t * invocation, or to provide some monitoring/statistics for task execution.\n\t * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\n\t * is limited to plain {@code Runnable} execution via {@code execute} calls.\n\t * In case of {@code #submit} calls, the exposed {@code Runnable} will be a\n\t * {@code FutureTask} which does not propagate any exceptions; you might\n\t * have to cast it and call {@code Future#get} to evaluate exceptions.\n\t * @since 4.3\n\t */\n\tpublic final void setTaskDecorator(TaskDecorator taskDecorator) {\n\t\tthis.taskDecorator = taskDecorator;\n\t}\n\n\n\t/**\n\t * Delegates to the specified JDK concurrent executor.\n\t * @see java.util.concurrent.Executor#execute(Runnable)\n\t */\n\t@Override\n\tpublic void execute(Runnable task) {\n\t\ttry {\n\t\t\tdoExecute(this.concurrentExecutor, this.taskDecorator, task);\n\t\t}\n\t\tcatch (RejectedExecutionException ex) {\n\t\t\tthrow new TaskRejectedException(this.concurrentExecutor, task, ex);\n\t\t}\n\t}\n\n\t@Override\n\tpublic Future<?> submit(Runnable task) {\n\t\ttry {\n\t\t\tif (this.taskDecorator == null &&\n\t\t\t\t\tthis.concurrentExecutor instanceof ExecutorService executorService) {\n\t\t\t\treturn executorService.submit(task);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFutureTask<Object> future = new FutureTask<>(task, null);\n\t\t\t\tdoExecute(this.concurrentExecutor, this.taskDecorator, future);\n\t\t\t\treturn future;\n\t\t\t}\n\t\t}\n\t\tcatch (RejectedExecutionException ex) {\n\t\t\tthrow new TaskRejectedException(this.concurrentExecutor, task, ex);\n\t\t}\n\t}\n\n\t@Override\n\tpublic <T> Future<T> submit(Callable<T> task) {\n\t\ttry {\n\t\t\tif (this.taskDecorator == null &&\n\t\t\t\t\tthis.concurrentExecutor instanceof ExecutorService executorService) {\n\t\t\t\treturn executorService.submit(task);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tFutureTask<T> future = new FutureTask<>(task);\n\t\t\t\tdoExecute(this.concurrentExecutor, this.taskDecorator, future);\n\t\t\t\treturn future;\n\t\t\t}\n\t\t}\n\t\tcatch (RejectedExecutionException ex) {\n\t\t\tthrow new TaskRejectedException(this.concurrentExecutor, task, ex);\n\t\t}\n\t}\n\n\n\t/**\n\t * Actually execute the given {@code Runnable} (which may be a user-supplied task\n\t * or a wrapper around a user-supplied task) with the given executor.\n\t * @param concurrentExecutor the underlying JDK concurrent executor to delegate to\n\t * @param taskDecorator the specified decorator to be applied, if any\n\t * @param runnable the runnable to execute\n\t * @throws RejectedExecutionException if the given runnable cannot be accepted\n\t * @since 4.3\n\t */\n\tprotected void doExecute(Executor concurrentExecutor, @Nullable TaskDecorator taskDecorator, Runnable runnable)\n\t\t\tthrows RejectedExecutionException{\n\n\t\tconcurrentExecutor.execute(taskDecorator != null ? taskDecorator.decorate(runnable) : runnable);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#concurrentExecutor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#concurrentExecutor",
    "headType": "field",
    "relation": "haveType",
    "tail": "Executor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#taskDecorator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#taskDecorator",
    "headType": "field",
    "relation": "haveType",
    "tail": "TaskDecorator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#setTaskDecorator(TaskDecorator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}\r\n * about to be executed.\r\n * <p>Note that such a decorator is not necessarily being applied to the\r\n * user-supplied {@code Runnable}/{@code Callable} but rather to the actual\r\n * execution callback (which may be a wrapper around the user-supplied task).\r\n * <p>The primary use case is to set some execution context around the task's\r\n * invocation, or to provide some monitoring/statistics for task execution.\r\n * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\r\n * is limited to plain {@code Runnable} execution via {@code execute} calls.\r\n * In case of {@code #submit} calls, the exposed {@code Runnable} will be a\r\n * {@code FutureTask} which does not propagate any exceptions; you might\r\n * have to cast it and call {@code Future#get} to evaluate exceptions.\r\n * @since 4.3\r\n */\r\npublic final void setTaskDecorator(TaskDecorator taskDecorator) {\r\n    this.taskDecorator = taskDecorator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#setTaskDecorator(TaskDecorator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#execute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Delegates to the specified JDK concurrent executor.\r\n * @see java.util.concurrent.Executor#execute(Runnable)\r\n */\r\n@Override\r\npublic void execute(Runnable task) {\r\n    try {\r\n        doExecute(this.concurrentExecutor, this.taskDecorator, task);\r\n    } catch (RejectedExecutionException ex) {\r\n        throw new TaskRejectedException(this.concurrentExecutor, task, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#execute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Future<?> submit(Runnable task) {\r\n    try {\r\n        if (this.taskDecorator == null && this.concurrentExecutor instanceof ExecutorService executorService) {\r\n            return executorService.submit(task);\r\n        } else {\r\n            FutureTask<Object> future = new FutureTask<>(task, null);\r\n            doExecute(this.concurrentExecutor, this.taskDecorator, future);\r\n            return future;\r\n        }\r\n    } catch (RejectedExecutionException ex) {\r\n        throw new TaskRejectedException(this.concurrentExecutor, task, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]