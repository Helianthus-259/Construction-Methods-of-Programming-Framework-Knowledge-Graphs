[
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCurrency()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCurrency()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForLocale()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForLocale() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Locale.GERMANY)).isEqualTo(\"de_DE\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForLocale()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForLocale()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForRegExPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForRegExPattern() {\r\n    Pattern pattern = Pattern.compile(\"^(foo|bar)$\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(pattern)).isEqualTo(pattern.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForRegExPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForRegExPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTimeZone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForTimeZone() {\r\n    TimeZone timeZone = TimeZone.getDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(timeZone)).isEqualTo(timeZone.getID());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTimeZone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTimeZone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForZoneId()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForZoneId() {\r\n    ZoneId zoneId = ZoneId.systemDefault();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(zoneId)).isEqualTo(zoneId.getId());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForZoneId()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForZoneId()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] ;)).isEqualTo(\";\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] ;)).isEqualTo(\";\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEmptyArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForNonEmptyArrays() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new char[] { 'a' })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new int[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new String[] { \"enigma\" })).isEqualTo(\"{...}\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] { { 1 }, { 2 } })).isEqualTo(\"{...}\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForNonEmptyArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]