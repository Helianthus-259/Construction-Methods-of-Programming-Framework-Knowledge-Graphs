[
  {
    "head": "org.springframework.util.MimeTypeTests#includes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isCompatible()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isCompatible() {\r\n    MimeType textPlain = MimeTypeUtils.TEXT_PLAIN;\r\n    assertThat(textPlain.isCompatibleWith(textPlain)).as(\"Equal types is not compatible\").isTrue();\r\n    MimeType allText = new MimeType(\"text\");\r\n    assertThat(allText.isCompatibleWith(textPlain)).as(\"All subtypes is not compatible\").isTrue();\r\n    assertThat(textPlain.isCompatibleWith(allText)).as(\"All subtypes is not compatible\").isTrue();\r\n    assertThat(MimeTypeUtils.ALL.isCompatibleWith(textPlain)).as(\"All types is not compatible\").isTrue();\r\n    assertThat(textPlain.isCompatibleWith(MimeTypeUtils.ALL)).as(\"All types is not compatible\").isTrue();\r\n    assertThat(MimeTypeUtils.ALL.isCompatibleWith(textPlain)).as(\"All types is not compatible\").isTrue();\r\n    assertThat(textPlain.isCompatibleWith(MimeTypeUtils.ALL)).as(\"All types is compatible\").isTrue();\r\n    MimeType applicationSoapXml = new MimeType(\"application\", \"soap+xml\");\r\n    MimeType applicationWildcardXml = new MimeType(\"application\", \"*+xml\");\r\n    // SPR-15795\r\n    MimeType suffixXml = new MimeType(\"application\", \"x.y+z+xml\");\r\n    assertThat(applicationSoapXml.isCompatibleWith(applicationSoapXml)).isTrue();\r\n    assertThat(applicationWildcardXml.isCompatibleWith(applicationWildcardXml)).isTrue();\r\n    assertThat(applicationWildcardXml.isCompatibleWith(suffixXml)).isTrue();\r\n    assertThat(applicationWildcardXml.isCompatibleWith(applicationSoapXml)).isTrue();\r\n    assertThat(applicationSoapXml.isCompatibleWith(applicationWildcardXml)).isTrue();\r\n    assertThat(suffixXml.isCompatibleWith(applicationWildcardXml)).isTrue();\r\n    assertThat(applicationWildcardXml.isCompatibleWith(MimeTypeUtils.APPLICATION_JSON)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#isCompatible()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#isCompatible()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#testToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid testToString() {\r\n    MimeType mimeType = new MimeType(\"text\", \"plain\");\r\n    String result = mimeType.toString();\r\n    assertThat(result).as(\"Invalid toString() returned\").isEqualTo(\"text/plain\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#testToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#testToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeType() {\r\n    String s = \"audio/*\";\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(s);\r\n    assertThat(mimeType.getType()).as(\"Invalid type\").isEqualTo(\"audio\");\r\n    assertThat(mimeType.getSubtype()).as(\"Invalid subtype\").isEqualTo(\"*\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtype()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeNoSubtype() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"audio\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtype()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtype()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtypeSlash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeNoSubtypeSlash() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"audio/\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtypeSlash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNoSubtypeSlash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeTypeRange()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeTypeRange() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"*/json\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeTypeRange()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeTypeRange()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeIllegalType() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"audio(/basic\"));\r\n}",
    "tailType": "method_code"
  }
]