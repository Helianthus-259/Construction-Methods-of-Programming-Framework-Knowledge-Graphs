[
  {
    "head": "org.springframework.util.xml.StaxEventHandlerTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxHandlerTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.InputStream;\nimport java.io.StringReader;\n\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLStreamException;\n\nimport org.junit.jupiter.api.Test;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\nclass StaxEventXMLReaderTests extends AbstractStaxXMLReaderTests {\n\n\tpublic static final String CONTENT = \"<root xmlns='http://springframework.org/spring-ws'><child/></root>\";\n\n\t@Override\n\tprotected AbstractStaxXMLReader createStaxXmlReader(InputStream inputStream) throws XMLStreamException {\n\t\treturn new StaxEventXMLReader(inputFactory.createXMLEventReader(inputStream));\n\t}\n\n\t@Test\n\tvoid partial() throws Exception {\n\t\tXMLInputFactory inputFactory = XMLInputFactory.newInstance();\n\t\tXMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(CONTENT));\n\t\teventReader.nextTag();  // skip to root\n\t\tStaxEventXMLReader xmlReader = new StaxEventXMLReader(eventReader);\n\t\tContentHandler contentHandler = mock();\n\t\txmlReader.setContentHandler(contentHandler);\n\t\txmlReader.parse(new InputSource());\n\t\tverify(contentHandler).startDocument();\n\t\tverify(contentHandler).startElement(eq(\"http://springframework.org/spring-ws\"), eq(\"child\"), eq(\"child\"), any(Attributes.class));\n\t\tverify(contentHandler).endElement(\"http://springframework.org/spring-ws\", \"child\", \"child\");\n\t\tverify(contentHandler).endDocument();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxEventXMLReaderTests#CONTENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests#CONTENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests#createStaxXmlReader(InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AbstractStaxXMLReader createStaxXmlReader(InputStream inputStream) throws XMLStreamException {\r\n    return new StaxEventXMLReader(inputFactory.createXMLEventReader(inputStream));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReaderTests#createStaxXmlReader(InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests#createStaxXmlReader(InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid partial() throws Exception {\r\n    XMLInputFactory inputFactory = XMLInputFactory.newInstance();\r\n    XMLEventReader eventReader = inputFactory.createXMLEventReader(new StringReader(CONTENT));\r\n    // skip to root\r\n    eventReader.nextTag();\r\n    StaxEventXMLReader xmlReader = new StaxEventXMLReader(eventReader);\r\n    ContentHandler contentHandler = mock();\r\n    xmlReader.setContentHandler(contentHandler);\r\n    xmlReader.parse(new InputSource());\r\n    verify(contentHandler).startDocument();\r\n    verify(contentHandler).startElement(eq(\"http://springframework.org/spring-ws\"), eq(\"child\"), eq(\"child\"), any(Attributes.class));\r\n    verify(contentHandler).endElement(\"http://springframework.org/spring-ws\", \"child\", \"child\");\r\n    verify(contentHandler).endDocument();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests#partial()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReaderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxXMLReaderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxResultTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.stream.StreamSource;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.xml.XmlContent;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass StaxResultTests {\n\n\tprivate static final String XML = \"<root xmlns='namespace'><child/></root>\";\n\n\tprivate Transformer transformer;\n\n\tprivate XMLOutputFactory inputFactory;\n\n\t@BeforeEach\n\tvoid setUp() throws Exception {\n\t\tTransformerFactory transformerFactory = TransformerFactory.newInstance();\n\t\ttransformer = transformerFactory.newTransformer();\n\t\tinputFactory = XMLOutputFactory.newInstance();\n\t}\n\n\t@Test\n\tvoid streamWriterSource() throws Exception {\n\t\tStringWriter stringWriter = new StringWriter();\n\t\tXMLStreamWriter streamWriter = inputFactory.createXMLStreamWriter(stringWriter);\n\t\tReader reader = new StringReader(XML);\n\t\tSource source = new StreamSource(reader);\n\t\tStaxResult result = new StaxResult(streamWriter);\n\t\tassertThat(result.getXMLStreamWriter()).as(\"Invalid streamWriter returned\").isEqualTo(streamWriter);\n\t\tassertThat(result.getXMLEventWriter()).as(\"EventWriter returned\").isNull();\n\t\ttransformer.transform(source, result);\n\t\tassertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);\n\t}\n\n\t@Test\n\tvoid eventWriterSource() throws Exception {\n\t\tStringWriter stringWriter = new StringWriter();\n\t\tXMLEventWriter eventWriter = inputFactory.createXMLEventWriter(stringWriter);\n\t\tReader reader = new StringReader(XML);\n\t\tSource source = new StreamSource(reader);\n\t\tStaxResult result = new StaxResult(eventWriter);\n\t\tassertThat(result.getXMLEventWriter()).as(\"Invalid eventWriter returned\").isEqualTo(eventWriter);\n\t\tassertThat(result.getXMLStreamWriter()).as(\"StreamWriter returned\").isNull();\n\t\ttransformer.transform(source, result);\n\t\tassertThat(XmlContent.from(stringWriter)).as(\"Invalid result\").isSimilarTo(XML);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxResultTests#XML",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#XML",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxResultTests#transformer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxResultTests#transformer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Transformer",
    "tailType": "type"
  }
]