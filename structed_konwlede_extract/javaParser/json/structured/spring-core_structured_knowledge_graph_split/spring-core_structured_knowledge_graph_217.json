[
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withClasspathLocations(List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withClasspathLocations(List<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withClassPathLocations(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified classpath locations.\r\n * <p>A location can either be a special {@value ResourceUtils#CLASSPATH_URL_PREFIX}\r\n * pseudo location or a standard location, such as {@code com/example/resources}.\r\n * An empty String represents the root of the classpath.\r\n * @param classpathLocations the classpath locations to consider\r\n * @return this builder\r\n * @since 7.0\r\n * @see #withClassPathLocations(List)\r\n */\r\npublic Builder withClassPathLocations(String... classpathLocations) {\r\n    return withClassPathLocations(Arrays.asList(classpathLocations));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withClassPathLocations(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withClassPathLocations(List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified classpath locations.\r\n * <p>A location can either be a special {@value ResourceUtils#CLASSPATH_URL_PREFIX}\r\n * pseudo location or a standard location, such as {@code com/example/resources}.\r\n * An empty String represents the root of the classpath.\r\n * @param classpathLocations the classpath locations to consider\r\n * @return this builder\r\n * @since 7.0\r\n * @see #withClassPathLocations(String...)\r\n */\r\npublic Builder withClassPathLocations(List<String> classpathLocations) {\r\n    this.classpathLocations.addAll(validateClassPathLocations(classpathLocations));\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withClassPathLocations(List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withFilePrefixes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified file prefixes. Any file whose name starts with one\r\n * of the specified prefixes is considered. A prefix cannot contain the {@code *}\r\n * character.\r\n * @param filePrefixes the file prefixes to consider\r\n * @return this builder\r\n * @see #withFilePrefixes(List)\r\n */\r\npublic Builder withFilePrefixes(String... filePrefixes) {\r\n    return withFilePrefixes(Arrays.asList(filePrefixes));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withFilePrefixes(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withFilePrefixes(List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified file prefixes. Any file whose name starts with one\r\n * of the specified prefixes is considered. A prefix cannot contain the {@code *}\r\n * character.\r\n * @param filePrefixes the file prefixes to consider\r\n * @return this builder\r\n * @see #withFilePrefixes(String...)\r\n */\r\npublic Builder withFilePrefixes(List<String> filePrefixes) {\r\n    this.filePrefixes.addAll(validateFilePrefixes(filePrefixes));\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withFilePrefixes(List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withFileExtensions(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified file extensions. A file extension must start with a\r\n * {@code .} character.\r\n * @param fileExtensions the file extensions to consider\r\n * @return this builder\r\n * @see #withFileExtensions(List)\r\n */\r\npublic Builder withFileExtensions(String... fileExtensions) {\r\n    return withFileExtensions(Arrays.asList(fileExtensions));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withFileExtensions(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#withFileExtensions(List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Consider the specified file extensions. A file extension must start with a\r\n * {@code .} character.\r\n * @param fileExtensions the file extensions to consider\r\n * @return this builder\r\n * @see #withFileExtensions(String...)\r\n */\r\npublic Builder withFileExtensions(List<String> fileExtensions) {\r\n    this.fileExtensions.addAll(validateFileExtensions(fileExtensions));\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#withFileExtensions(List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#build()",
    "headType": "method",
    "relation": "provide",
    "tail": "private FilePatternResourceHintsRegistrar build() {\r\n    return new FilePatternResourceHintsRegistrar(this.filePrefixes, this.classpathLocations, this.fileExtensions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#build()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder#registerHints(ResourceHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register resource hints for the current state of this builder. For each\r\n * classpath location that resolves against the {@code ClassLoader}, files\r\n * with the configured file prefixes and extensions are registered.\r\n * @param hints the hints contributed so far for the deployment unit\r\n * @param classLoader the classloader, or {@code null} if even the system\r\n * ClassLoader isn't accessible\r\n */\r\npublic void registerHints(ResourceHints hints, @Nullable ClassLoader classLoader) {\r\n    build().registerHints(hints, classLoader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.Builder#registerHints(ResourceHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests",
    "tailType": "class"
  }
]