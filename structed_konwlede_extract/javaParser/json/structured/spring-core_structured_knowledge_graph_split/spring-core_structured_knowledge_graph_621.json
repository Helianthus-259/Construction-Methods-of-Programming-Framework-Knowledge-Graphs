[
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#gcount(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#topbit(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int topbit(int i) {\r\n    int j;\r\n    for (j = 0; i != 0; i ^= j) {\r\n        j = i & -i;\r\n    }\r\n    return j;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#topbit(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#log2(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int log2(int i) {\r\n    int j = 0;\r\n    for (j = 0; i != 0; i >>= 1) {\r\n        j++;\r\n    }\r\n    return j;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#log2(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#length()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int length() {\r\n    return log2(topbit(value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#length()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#cardinality()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If bit 31 is set then this method results in an infinite loop.\r\n *\r\n * @return the number of bits set to <code>true</code> in this TinyBitSet.\r\n */\r\npublic int cardinality() {\r\n    int w = value;\r\n    int c = 0;\r\n    while (w != 0) {\r\n        c += T[w & 255];\r\n        w >>= 8;\r\n    }\r\n    return c;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#cardinality()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#get(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public boolean get(int index) {\r\n    return (value & (1 << index)) != 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#get(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#set(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void set(int index) {\r\n    value |= (1 << index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#set(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet#clear(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void clear(int index) {\r\n    value &= ~(1 << index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TinyBitSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TinyBitSet#clear(int)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.Transformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.Transformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\npublic interface Transformer {\n    Object transform(Object value);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.Transformer#transform(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "Object transform(Object value);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.Transformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.Transformer#transform(Object)",
    "tailType": "method"
  }
]