[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#isAssignableElementTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableElementTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Number>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#notGenericMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#notGenericMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#isAssignableMapKeyValueTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableMapKeyValueTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<CharSequence, Number>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#multiValueMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#multiValueMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "MultiValueMap<String, Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#passDownGeneric",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#passDownGeneric",
    "headType": "field",
    "relation": "haveType",
    "tail": "PassDownGeneric<Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterPrimitive()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterPrimitive() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"testParameterPrimitive\", int.class), 0));\r\n    assertThat(desc.getType()).isEqualTo(int.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getName()).isEqualTo(\"int\");\r\n    assertThat(desc.toString()).isEqualTo(\"int\");\r\n    assertThat(desc.isPrimitive()).isTrue();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterPrimitive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterScalar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterScalar() throws Exception {\r\n    TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"testParameterScalar\", String.class), 0));\r\n    assertThat(desc.getType()).isEqualTo(String.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(String.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.lang.String\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.lang.String\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterScalar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterScalar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterList() throws Exception {\r\n    MethodParameter methodParameter = new MethodParameter(getClass().getMethod(\"testParameterList\", List.class), 0);\r\n    TypeDescriptor desc = new TypeDescriptor(methodParameter);\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(List.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.List\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.List<java.util.List<java.util.Map<java.lang.Integer, java.lang.Enum<?>>>>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isTrue();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(desc.getElementTypeDescriptor()).isEqualTo(TypeDescriptor.nested(methodParameter, 1));\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor()).isEqualTo(TypeDescriptor.nested(methodParameter, 2));\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor()).isEqualTo(TypeDescriptor.nested(methodParameter, 3));\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapKeyTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor().getType()).isEqualTo(Enum.class);\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterListNoParamTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterListNoParamTypes() throws Exception {\r\n    MethodParameter methodParameter = new MethodParameter(getClass().getMethod(\"testParameterListNoParamTypes\", List.class), 0);\r\n    TypeDescriptor desc = new TypeDescriptor(methodParameter);\r\n    assertThat(desc.getType()).isEqualTo(List.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(List.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.List\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.List<?>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isTrue();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat((Object) desc.getElementTypeDescriptor()).isNull();\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  }
]