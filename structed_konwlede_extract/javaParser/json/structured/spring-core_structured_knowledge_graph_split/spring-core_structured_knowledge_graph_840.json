[
  {
    "head": "org.springframework.core.codec.Hints#getRequiredHint(Map<String,Object>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the value for a required hint.\r\n * @param hints the hints map\r\n * @param hintName the required hint name\r\n * @param <T> the hint type to cast to\r\n * @return the hint value\r\n * @throws IllegalArgumentException if the hint is not found\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <T> T getRequiredHint(@Nullable Map<String, Object> hints, String hintName) {\r\n    if (hints == null) {\r\n        throw new IllegalArgumentException(\"No hints map for required hint '\" + hintName + \"'\");\r\n    }\r\n    T hint = (T) hints.get(hintName);\r\n    if (hint == null) {\r\n        throw new IllegalArgumentException(\"Hints map must contain the hint '\" + hintName + \"'\");\r\n    }\r\n    return hint;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#getRequiredHint(Map<String,Object>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#getRequiredHint(Map<String,Object>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Hints#getLogPrefix(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the hint {@link #LOG_PREFIX_HINT}, if present, or an empty String.\r\n * @param hints the hints passed to the encode method\r\n * @return the log prefix\r\n */\r\npublic static String getLogPrefix(@Nullable Map<String, Object> hints) {\r\n    return (hints != null ? (String) hints.getOrDefault(LOG_PREFIX_HINT, \"\") : \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#getLogPrefix(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#isLoggingSuppressed(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}.\r\n * @param hints the hints map\r\n * @return whether logging of data is allowed\r\n */\r\npublic static boolean isLoggingSuppressed(@Nullable Map<String, Object> hints) {\r\n    return (hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#isLoggingSuppressed(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#merge(Map<String,Object>,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Merge two maps of hints, creating and copying into a new map if both have\r\n * values, or returning the non-empty map, or an empty map if both are empty.\r\n * @param hints1 1st map of hints\r\n * @param hints2 2nd map of hints\r\n * @return a single map with hints from both\r\n */\r\npublic static Map<String, Object> merge(@Nullable Map<String, Object> hints1, @Nullable Map<String, Object> hints2) {\r\n    if (ObjectUtils.isEmpty(hints1) && ObjectUtils.isEmpty(hints2)) {\r\n        return Collections.emptyMap();\r\n    } else if (ObjectUtils.isEmpty(hints2)) {\r\n        return (hints1 != null ? hints1 : Collections.emptyMap());\r\n    } else if (ObjectUtils.isEmpty(hints1)) {\r\n        return hints2;\r\n    }\r\n    Map<String, Object> result = CollectionUtils.newHashMap(hints1.size() + hints2.size());\r\n    result.putAll(hints1);\r\n    result.putAll(hints2);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#merge(Map<String,Object>,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#merge(Map<String,Object>,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Merge a single hint into a map of hints, possibly creating and copying\r\n * all hints into a new map, or otherwise if the map of hints is empty,\r\n * creating a new single entry map.\r\n * @param hints a map of hints to be merged\r\n * @param hintName the hint name to merge\r\n * @param hintValue the hint value to merge\r\n * @return a single map with all hints\r\n */\r\npublic static Map<String, Object> merge(@Nullable Map<String, Object> hints, String hintName, Object hintValue) {\r\n    if (ObjectUtils.isEmpty(hints)) {\r\n        return Collections.singletonMap(hintName, hintValue);\r\n    }\r\n    Map<String, Object> result = CollectionUtils.newHashMap(hints.size() + 1);\r\n    result.putAll(hints);\r\n    result.put(hintName, hintValue);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#merge(Map<String,Object>,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Hints#touchDataBuffer(DataBuffer,Map<String,Object>,Log)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If the hints contain a {@link #LOG_PREFIX_HINT} and the given logger has\r\n * DEBUG level enabled, apply the log prefix as a hint to the given buffer\r\n * via {@link DataBufferUtils#touch(DataBuffer, Object)}.\r\n * @param buffer the buffer to touch\r\n * @param hints the hints map to check for a log prefix\r\n * @param logger the logger whose level to check\r\n * @since 5.3.2\r\n */\r\npublic static void touchDataBuffer(DataBuffer buffer, @Nullable Map<String, Object> hints, Log logger) {\r\n    if (logger.isDebugEnabled() && hints != null) {\r\n        Object logPrefix = hints.get(LOG_PREFIX_HINT);\r\n        if (logPrefix != null) {\r\n            DataBufferUtils.touch(buffer, logPrefix);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Hints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Hints#touchDataBuffer(DataBuffer,Map<String,Object>,Log)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.Netty5BufferDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport io.netty5.buffer.Buffer;\nimport io.netty5.buffer.DefaultBufferAllocators;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.io.buffer.Netty5DataBuffer;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decoder for {@link Buffer Buffers}.\n *\n * @author Violeta Georgieva\n * @since 6.0\n */\npublic class Netty5BufferDecoder extends AbstractDataBufferDecoder<Buffer> {\n\n\tpublic Netty5BufferDecoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (Buffer.class.isAssignableFrom(elementType.toClass()) &&\n\t\t\t\tsuper.canDecode(elementType, mimeType));\n\t}\n\n\t@Override\n\tpublic Buffer decode(DataBuffer dataBuffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(Hints.getLogPrefix(hints) + \"Read \" + dataBuffer.readableByteCount() + \" bytes\");\n\t\t}\n\t\tif (dataBuffer instanceof Netty5DataBuffer netty5DataBuffer) {\n\t\t\treturn netty5DataBuffer.getNativeBuffer();\n\t\t}\n\t\tbyte[] bytes = new byte[dataBuffer.readableByteCount()];\n\t\tdataBuffer.read(bytes);\n\t\tBuffer buffer = DefaultBufferAllocators.preferredAllocator().copyOf(bytes);\n\t\tDataBufferUtils.release(dataBuffer);\n\t\treturn buffer;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (Buffer.class.isAssignableFrom(elementType.toClass()) && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Netty5BufferDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Buffer decode(DataBuffer dataBuffer, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(Hints.getLogPrefix(hints) + \"Read \" + dataBuffer.readableByteCount() + \" bytes\");\r\n    }\r\n    if (dataBuffer instanceof Netty5DataBuffer netty5DataBuffer) {\r\n        return netty5DataBuffer.getNativeBuffer();\r\n    }\r\n    byte[] bytes = new byte[dataBuffer.readableByteCount()];\r\n    dataBuffer.read(bytes);\r\n    Buffer buffer = DefaultBufferAllocators.preferredAllocator().copyOf(bytes);\r\n    DataBufferUtils.release(dataBuffer);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  }
]