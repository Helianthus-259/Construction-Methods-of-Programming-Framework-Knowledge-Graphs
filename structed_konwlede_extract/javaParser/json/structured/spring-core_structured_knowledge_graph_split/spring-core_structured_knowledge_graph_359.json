[
  {
    "head": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a member of the nest. A nest is a set of classes of the same package that share access\r\n * to their private members. One of these classes, called the host, lists the other members of the\r\n * nest, which in turn should link to the host of their nest. This method must be called only if\r\n * the visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\r\n * it's invalid to call this method with the visited class name as argument.\r\n *\r\n * @param nestMember the internal name of a nest member (see {@link Type#getInternalName()}).\r\n */\r\npublic void visitNestMember(final String nestMember) {\r\n    if (api < Opcodes.ASM7) {\r\n        throw new UnsupportedOperationException(\"NestMember requires ASM7\");\r\n    }\r\n    if (cv != null) {\r\n        cv.visitNestMember(nestMember);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitNestMember(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\r\n * current class.\r\n *\r\n * @param permittedSubclass the internal name of a permitted subclass (see {@link\r\n *     Type#getInternalName()}).\r\n */\r\npublic void visitPermittedSubclass(final String permittedSubclass) {\r\n    if (api < Opcodes.ASM9) {\r\n        throw new UnsupportedOperationException(\"PermittedSubclasses requires ASM9\");\r\n    }\r\n    if (cv != null) {\r\n        cv.visitPermittedSubclass(permittedSubclass);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitPermittedSubclass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits information about an inner class. This inner class is not necessarily a member of the\r\n * class being visited. More precisely, every class or interface C which is referenced by this\r\n * class and which is not a package member must be visited with this method. This class must\r\n * reference its nested class or interface members, and its enclosing class, if any. See the JVMS\r\n * 4.7.6 section for more details.\r\n *\r\n * @param name the internal name of C (see {@link Type#getInternalName()}).\r\n * @param outerName the internal name of the class or interface C is a member of (see {@link\r\n *     Type#getInternalName()}). Must be {@literal null} if C is not the member of a class or\r\n *     interface (for example, for local or anonymous classes).\r\n * @param innerName the (simple) name of C. Must be {@literal null} for anonymous inner classes.\r\n * @param access the access flags of C originally declared in the source code from which this\r\n *     class was compiled.\r\n */\r\npublic void visitInnerClass(final String name, final String outerName, final String innerName, final int access) {\r\n    if (cv != null) {\r\n        cv.visitInnerClass(name, outerName, innerName, access);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitInnerClass(String,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a record component of the class.\r\n *\r\n * @param name the record component name.\r\n * @param descriptor the record component descriptor (see {@link Type}).\r\n * @param signature the record component signature. May be {@literal null} if the record component\r\n *     type does not use generic types.\r\n * @return a visitor to visit this record component annotations and attributes, or {@literal null}\r\n *     if this class visitor is not interested in visiting these annotations and attributes.\r\n */\r\npublic RecordComponentVisitor visitRecordComponent(final String name, final String descriptor, final String signature) {\r\n    if (api < Opcodes.ASM8) {\r\n        throw new UnsupportedOperationException(\"Record requires ASM8\");\r\n    }\r\n    if (cv != null) {\r\n        return cv.visitRecordComponent(name, descriptor, signature);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitRecordComponent(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a field of the class.\r\n *\r\n * @param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\r\n *     the field is synthetic and/or deprecated.\r\n * @param name the field's name.\r\n * @param descriptor the field's descriptor (see {@link Type}).\r\n * @param signature the field's signature. May be {@literal null} if the field's type does not use\r\n *     generic types.\r\n * @param value the field's initial value. This parameter, which may be {@literal null} if the\r\n *     field does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\r\n *     Long}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\r\n *     or {@code String} fields respectively). <i>This parameter is only used for static\r\n *     fields</i>. Its value is ignored for non static fields, which must be initialized through\r\n *     bytecode instructions in constructors or methods.\r\n * @return a visitor to visit field annotations and attributes, or {@literal null} if this class\r\n *     visitor is not interested in visiting these annotations and attributes.\r\n */\r\npublic FieldVisitor visitField(final int access, final String name, final String descriptor, final String signature, final Object value) {\r\n    if (cv != null) {\r\n        return cv.visitField(access, name, descriptor, signature, value);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitField(int,String,String,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a method of the class. This method <i>must</i> return a new {@link MethodVisitor}\r\n * instance (or {@literal null}) each time it is called, i.e., it should not return a previously\r\n * returned visitor.\r\n *\r\n * @param access the method's access flags (see {@link Opcodes}). This parameter also indicates if\r\n *     the method is synthetic and/or deprecated.\r\n * @param name the method's name.\r\n * @param descriptor the method's descriptor (see {@link Type}).\r\n * @param signature the method's signature. May be {@literal null} if the method parameters,\r\n *     return type and exceptions do not use generic types.\r\n * @param exceptions the internal names of the method's exception classes (see {@link\r\n *     Type#getInternalName()}). May be {@literal null}.\r\n * @return an object to visit the byte code of the method, or {@literal null} if this class\r\n *     visitor is not interested in visiting the code of this method.\r\n */\r\npublic MethodVisitor visitMethod(final int access, final String name, final String descriptor, final String signature, final String[] exceptions) {\r\n    if (cv != null) {\r\n        return cv.visitMethod(access, name, descriptor, signature, exceptions);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the end of the class. This method, which is the last one to be called, is used to inform\r\n * the visitor that all the fields and methods of the class have been visited.\r\n */\r\npublic void visitEnd() {\r\n    if (cv != null) {\r\n        cv.visitEnd();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SystemPropertyUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * @author Rob Harrop\n * @author Juergen Hoeller\n */\nclass SystemPropertyUtilsTests {\n\n\t@Test\n\tvoid replaceFromSystemProperty() {\n\t\tSystem.setProperty(\"test.prop\", \"bar\");\n\t\ttry {\n\t\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\");\n\t\t\tassertThat(resolved).isEqualTo(\"bar\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid replaceFromSystemPropertyWithDefault() {\n\t\tSystem.setProperty(\"test.prop\", \"bar\");\n\t\ttry {\n\t\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:foo}\");\n\t\t\tassertThat(resolved).isEqualTo(\"bar\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid replaceFromSystemPropertyWithExpressionDefault() {\n\t\tSystem.setProperty(\"test.prop\", \"bar\");\n\t\ttry {\n\t\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:#{foo.bar}}\");\n\t\t\tassertThat(resolved).isEqualTo(\"bar\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid replaceFromSystemPropertyWithExpressionContainingDefault() {\n\t\tSystem.setProperty(\"test.prop\", \"bar\");\n\t\ttry {\n\t\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:Y#{foo.bar}X}\");\n\t\t\tassertThat(resolved).isEqualTo(\"bar\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid replaceWithDefault() {\n\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:foo}\");\n\t\tassertThat(resolved).isEqualTo(\"foo\");\n\t}\n\n\t@Test\n\tvoid replaceWithExpressionDefault() {\n\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:#{foo.bar}}\");\n\t\tassertThat(resolved).isEqualTo(\"#{foo.bar}\");\n\t}\n\n\t@Test\n\tvoid replaceWithExpressionContainingDefault() {\n\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:Y#{foo.bar}X}\");\n\t\tassertThat(resolved).isEqualTo(\"Y#{foo.bar}X\");\n\t}\n\n\t@Test\n\tvoid replaceWithNoDefault() {\n\t\tassertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() ->\n\t\t\t\tSystemPropertyUtils.resolvePlaceholders(\"${test.prop}\"));\n\t}\n\n\t@Test\n\tvoid replaceWithNoDefaultIgnored() {\n\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\", true);\n\t\tassertThat(resolved).isEqualTo(\"${test.prop}\");\n\t}\n\n\t@Test\n\tvoid replaceWithEmptyDefault() {\n\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop:}\");\n\t\tassertThat(resolved).isEmpty();\n\t}\n\n\t@Test\n\tvoid recursiveFromSystemProperty() {\n\t\tSystem.setProperty(\"test.prop\", \"foo=${bar}\");\n\t\tSystem.setProperty(\"bar\", \"baz\");\n\t\ttry {\n\t\t\tString resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\");\n\t\t\tassertThat(resolved).isEqualTo(\"foo=baz\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t\tSystem.clearProperty(\"bar\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid replaceFromEnv() {\n\t\tMap<String,String> env = System.getenv();\n\t\tif (env.containsKey(\"PATH\")) {\n\t\t\tString text = \"${PATH}\";\n\t\t\tassertThat(SystemPropertyUtils.resolvePlaceholders(text)).isEqualTo(env.get(\"PATH\"));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid replaceFromSystemProperty() {\r\n    System.setProperty(\"test.prop\", \"bar\");\r\n    try {\r\n        String resolved = SystemPropertyUtils.resolvePlaceholders(\"${test.prop}\");\r\n        assertThat(resolved).isEqualTo(\"bar\");\r\n    } finally {\r\n        System.clearProperty(\"test.prop\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtilsTests#replaceFromSystemProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]