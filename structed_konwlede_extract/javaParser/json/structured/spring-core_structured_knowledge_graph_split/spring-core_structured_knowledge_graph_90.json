[
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#key",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#copy(InputStreamSource,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void copy(InputStreamSource content, boolean override) {\r\n    this.paths.put(this.key, content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryFileHandler#copy(InputStreamSource,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#copy(InputStreamSource,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.key;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryFileHandler#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryFileHandler",
    "headType": "class",
    "relation": "extend",
    "tail": "FileHandler",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "headType": "class",
    "relation": "use",
    "tail": "@EnabledForTestGroups",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.net.URL;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.UrlResource;\nimport org.springframework.core.testfixture.EnabledForTestGroups;\nimport org.springframework.core.type.classreading.CachingMetadataReaderFactory;\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.core.testfixture.TestGroup.LONG_RUNNING;\n\n/**\n * Tests for checking the behaviour of {@link CachingMetadataReaderFactory} under\n * load. If the cache is not controlled, this test should fail with an out of memory\n * exception around entry 5k.\n *\n * @author Costin Leau\n * @author Sam Brannen\n */\n@EnabledForTestGroups(LONG_RUNNING)\nclass CachingMetadataReaderLeakTests {\n\n\tprivate static final int ITEMS_TO_LOAD = 9999;\n\n\tprivate final MetadataReaderFactory mrf = new CachingMetadataReaderFactory();\n\n\t@Test\n\tvoid significantLoad() throws Exception {\n\t\t// the biggest public class in the JDK (>60k)\n\t\tURL url = getClass().getResource(\"/java/awt/Component.class\");\n\t\tassertThat(url).isNotNull();\n\n\t\t// look at a LOT of items\n\t\tfor (int i = 0; i < ITEMS_TO_LOAD; i++) {\n\t\t\tResource resource = new UrlResource(url) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean equals(@Nullable Object obj) {\n\t\t\t\t\treturn (obj == this);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic int hashCode() {\n\t\t\t\t\treturn System.identityHashCode(this);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tMetadataReader reader = mrf.getMetadataReader(resource);\n\t\t\tassertThat(reader).isNotNull();\n\t\t}\n\n\t\t// useful for profiling to take snapshots\n\t\t// System.in.read();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.CachingMetadataReaderLeakTests#ITEMS_TO_LOAD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests#ITEMS_TO_LOAD",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.CachingMetadataReaderLeakTests#mrf",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests#mrf",
    "headType": "field",
    "relation": "haveType",
    "tail": "MetadataReaderFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests#significantLoad()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid significantLoad() throws Exception {\r\n    // the biggest public class in the JDK (>60k)\r\n    URL url = getClass().getResource(\"/java/awt/Component.class\");\r\n    assertThat(url).isNotNull();\r\n    // look at a LOT of items\r\n    for (int i = 0; i < ITEMS_TO_LOAD; i++) {\r\n        Resource resource = new UrlResource(url) {\r\n\r\n            @Override\r\n            public boolean equals(@Nullable Object obj) {\r\n                return (obj == this);\r\n            }\r\n\r\n            @Override\r\n            public int hashCode() {\r\n                return System.identityHashCode(this);\r\n            }\r\n        };\r\n        MetadataReader reader = mrf.getMetadataReader(resource);\r\n        assertThat(reader).isNotNull();\r\n    }\r\n    // useful for profiling to take snapshots\r\n    // System.in.read();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.CachingMetadataReaderLeakTests#significantLoad()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.CachingMetadataReaderLeakTests#significantLoad()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  }
]