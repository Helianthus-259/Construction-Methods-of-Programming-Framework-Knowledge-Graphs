[
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer#getInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "public static MethodInfoTransformer getInstance() {\r\n    return INSTANCE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfoTransformer#getInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object transform(Object value) {\r\n    if (value instanceof Method method) {\r\n        return ReflectUtils.getMethodInfo(method);\r\n    } else if (value instanceof Constructor<?> constructor) {\r\n        return ReflectUtils.getMethodInfo(constructor);\r\n    } else {\r\n        throw new IllegalArgumentException(\"cannot get method info for \" + value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodInfoTransformer#transform(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.MethodWrapper",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class MethodWrapper {\n\n\t// SPRING PATCH BEGIN\n    private record MethodWrapperKey(String name, List<String> parameterTypes, String returnType) {\n    }\n\t// SPRING PATCH END\n\n    private MethodWrapper() {\n    }\n\n    public static Object create(Method method) {\n\t\t// SPRING PATCH BEGIN\n        return new MethodWrapperKey(method.getName(),\n                                       Arrays.asList(ReflectUtils.getNames(method.getParameterTypes())),\n                                       method.getReturnType().getName());\n\t\t// SPRING PATCH END\n    }\n\n    public static Set createSet(Collection methods) {\n        Set set = new HashSet();\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            set.add(create((Method)it.next()));\n        }\n        return set;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper#create(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Object create(Method method) {\r\n    // SPRING PATCH BEGIN\r\n    return new MethodWrapperKey(method.getName(), Arrays.asList(ReflectUtils.getNames(method.getParameterTypes())), method.getReturnType().getName());\r\n    // SPRING PATCH END\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodWrapper#create(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper#createSet(Collection)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Set createSet(Collection methods) {\r\n    Set set = new HashSet();\r\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\r\n        set.add(create((Method) it.next()));\r\n    }\r\n    return set;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.MethodWrapper",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.MethodWrapper#createSet(Collection)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.NamingPolicy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.NamingPolicy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\n/**\n * Customize the generated class name for {@link AbstractClassGenerator}-based utilities.\n */\npublic interface NamingPolicy {\n    /**\n     * Choose a name for a generated class.\n     * @param prefix a dotted-name chosen by the generating class (possibly to put the generated class in a particular package)\n     * @param source the fully-qualified class name of the generating class (for example \"org.springframework.cglib.Enhancer\")\n     * @param key A key object representing the state of the parameters; for caching to work properly, equal keys should result\n     * in the same generated class name. The default policy incorporates <code>key.hashCode()</code> into the class name.\n     * @param names a predicate that returns true if the given classname has already been used in the same ClassLoader.\n     * @return the fully-qualified class name\n     */\n    String getClassName(String prefix, String source, Object key, Predicate names);\n\n    /**\n     * The <code>NamingPolicy</code> in use does not currently, but may\n     * in the future, affect the caching of classes generated by {@link\n     * AbstractClassGenerator}, so this is a reminder that you should\n     * correctly implement <code>equals</code> and <code>hashCode</code>\n     * to avoid generating too many classes.\n     */\n    @Override\n    boolean equals(Object o);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Choose a name for a generated class.\r\n * @param prefix a dotted-name chosen by the generating class (possibly to put the generated class in a particular package)\r\n * @param source the fully-qualified class name of the generating class (for example \"org.springframework.cglib.Enhancer\")\r\n * @param key A key object representing the state of the parameters; for caching to work properly, equal keys should result\r\n * in the same generated class name. The default policy incorporates <code>key.hashCode()</code> into the class name.\r\n * @param names a predicate that returns true if the given classname has already been used in the same ClassLoader.\r\n * @return the fully-qualified class name\r\n */\r\nString getClassName(String prefix, String source, Object key, Predicate names);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.NamingPolicy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.NamingPolicy#getClassName(String,String,Object,Predicate)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The <code>NamingPolicy</code> in use does not currently, but may\r\n * in the future, affect the caching of classes generated by {@link\r\n * AbstractClassGenerator}, so this is a reminder that you should\r\n * correctly implement <code>equals</code> and <code>hashCode</code>\r\n * to avoid generating too many classes.\r\n */\r\n@Override\r\nboolean equals(Object o);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.NamingPolicy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.NamingPolicy#equals(Object)",
    "tailType": "method"
  }
]