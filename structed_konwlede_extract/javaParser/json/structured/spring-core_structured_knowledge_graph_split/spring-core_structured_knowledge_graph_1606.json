[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationForMultipleMetaAnnotationsWithClashingAttributeNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor() throws Exception {\r\n    assertWebMapping(WebController.class.getMethod(\"getMappedWithValueAttribute\"));\r\n    assertWebMapping(WebController.class.getMethod(\"getMappedWithPathAttribute\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertWebMapping(AnnotatedElement element) {\r\n    WebMapping webMapping = findMergedAnnotation(element, WebMapping.class);\r\n    assertThat(webMapping).isNotNull();\r\n    assertThat(webMapping.value()).as(\"value attribute: \").isEqualTo(asArray(\"/test\"));\r\n    assertThat(webMapping.path()).as(\"path attribute: \").isEqualTo(asArray(\"/test\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertWebMapping(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaLangAnnotationTypeViaFindMergedAnnotation() throws Exception {\r\n    Constructor<?> deprecatedCtor = Date.class.getConstructor(String.class);\r\n    assertThat(findMergedAnnotation(deprecatedCtor, Deprecated.class)).isEqualTo(deprecatedCtor.getAnnotation(Deprecated.class));\r\n    assertThat(findMergedAnnotation(Date.class, Deprecated.class)).isEqualTo(Date.class.getAnnotation(Deprecated.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaLangAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaxAnnotationTypeViaFindMergedAnnotation() {\r\n    assertThat(findMergedAnnotation(ResourceHolder.class, Resource.class)).isEqualTo(ResourceHolder.class.getAnnotation(Resource.class));\r\n    assertThat(findMergedAnnotation(SpringAppConfigClass.class, Resource.class)).isEqualTo(SpringAppConfigClass.class.getAnnotation(Resource.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxAnnotationTypeViaFindMergedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaxMetaAnnotationTypeViaFindMergedAnnotation() {\r\n    assertThat(findMergedAnnotation(ParametersAreNonnullByDefault.class, Nonnull.class)).isEqualTo(ParametersAreNonnullByDefault.class.getAnnotation(Nonnull.class));\r\n    assertThat(findMergedAnnotation(ResourceHolder.class, Nonnull.class)).isEqualTo(ParametersAreNonnullByDefault.class.getAnnotation(Nonnull.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#javaxMetaAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullableAnnotationTypeViaFindMergedAnnotation() throws Exception {\r\n    Method method = TransactionalServiceImpl.class.getMethod(\"doIt\");\r\n    assertThat(findMergedAnnotation(method, Resource.class)).isEqualTo(method.getAnnotation(Resource.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#nullableAnnotationTypeViaFindMergedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllMergedAnnotationsOnClassWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllMergedAnnotationsOnClassWithInterface() throws Exception {\r\n    Method method = TransactionalServiceImpl.class.getMethod(\"doIt\");\r\n    Set<Transactional> allMergedAnnotations = getAllMergedAnnotations(method, Transactional.class);\r\n    assertThat(allMergedAnnotations).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getAllMergedAnnotationsOnClassWithInterface()",
    "tailType": "method"
  }
]