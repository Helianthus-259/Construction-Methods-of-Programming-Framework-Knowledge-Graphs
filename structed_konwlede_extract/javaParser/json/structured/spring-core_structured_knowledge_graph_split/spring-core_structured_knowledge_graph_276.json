[
  {
    "head": "org.springframework.asm.AnnotationVisitor#av",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#getDelegate()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The annotation visitor to which this visitor must delegate method calls. May be {@literal\r\n * null}.\r\n *\r\n * @return the annotation visitor to which this visitor must delegate method calls, or {@literal\r\n *     null}.\r\n */\r\npublic AnnotationVisitor getDelegate() {\r\n    return av;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#getDelegate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#visit(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a primitive value of the annotation.\r\n *\r\n * @param name the value name.\r\n * @param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\r\n *     Character}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\r\n *     {@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\r\n *     value can also be an array of byte, boolean, short, char, int, long, float or double values\r\n *     (this is equivalent to using {@link #visitArray} and visiting each array element in turn,\r\n *     but is more convenient).\r\n */\r\npublic void visit(final String name, final Object value) {\r\n    if (av != null) {\r\n        av.visit(name, value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#visit(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an enumeration value of the annotation.\r\n *\r\n * @param name the value name.\r\n * @param descriptor the class descriptor of the enumeration class.\r\n * @param value the actual enumeration value.\r\n */\r\npublic void visitEnum(final String name, final String descriptor, final String value) {\r\n    if (av != null) {\r\n        av.visitEnum(name, descriptor, value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#visitEnum(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a nested annotation value of the annotation.\r\n *\r\n * @param name the value name.\r\n * @param descriptor the class descriptor of the nested annotation class.\r\n * @return a visitor to visit the actual nested annotation value, or {@literal null} if this\r\n *     visitor is not interested in visiting this nested annotation. <i>The nested annotation\r\n *     value must be fully visited before calling other methods on this annotation visitor</i>.\r\n */\r\npublic AnnotationVisitor visitAnnotation(final String name, final String descriptor) {\r\n    if (av != null) {\r\n        return av.visitAnnotation(name, descriptor);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#visitAnnotation(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#visitArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an array value of the annotation. Note that arrays of primitive values (such as byte,\r\n * boolean, short, char, int, long, float or double) can be passed as value to {@link #visit\r\n * visit}. This is what {@link ClassReader} does for non empty arrays of primitive values.\r\n *\r\n * @param name the value name.\r\n * @return a visitor to visit the actual array value elements, or {@literal null} if this visitor\r\n *     is not interested in visiting these values. The 'name' parameters passed to the methods of\r\n *     this visitor are ignored. <i>All the array values must be visited before calling other\r\n *     methods on this annotation visitor</i>.\r\n */\r\npublic AnnotationVisitor visitArray(final String name) {\r\n    if (av != null) {\r\n        return av.visitArray(name);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#visitArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the end of the annotation.\r\n */\r\npublic void visitEnd() {\r\n    if (av != null) {\r\n        av.visitEnd();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ObjectUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.UnknownHostException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.sql.SQLException;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Currency;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.UUID;\nimport java.util.regex.Pattern;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.springframework.util.ObjectUtils.isEmpty;\n\n/**\n * Tests for {@link ObjectUtils}.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Rick Evans\n * @author Sam Brannen\n * @author Hyunjin Choi\n * @author Ngoc Nhan\n */\nclass ObjectUtilsTests {\n\n\t@Test\n\tvoid isCheckedException() {\n\t\tassertThat(ObjectUtils.isCheckedException(new Exception())).isTrue();\n\t\tassertThat(ObjectUtils.isCheckedException(new SQLException())).isTrue();\n\n\t\tassertThat(ObjectUtils.isCheckedException(new RuntimeException())).isFalse();\n\t\tassertThat(ObjectUtils.isCheckedException(new IllegalArgumentException(\"\"))).isFalse();\n\n\t\t// Any Throwable other than RuntimeException and Error\n\t\t// has to be considered checked according to the JLS.\n\t\tassertThat(ObjectUtils.isCheckedException(new Throwable())).isTrue();\n\t}\n\n\t@Test\n\tvoid isCompatibleWithThrowsClause() {\n\t\tClass<?>[] empty = new Class<?>[0];\n\t\tClass<?>[] exception = new Class<?>[] {Exception.class};\n\t\tClass<?>[] sqlAndIO = new Class<?>[] {SQLException.class, IOException.class};\n\t\tClass<?>[] throwable = new Class<?>[] {Throwable.class};\n\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException())).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), empty)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), exception)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), sqlAndIO)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), throwable)).isTrue();\n\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception())).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), empty)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), exception)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), sqlAndIO)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), throwable)).isTrue();\n\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException())).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), empty)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), exception)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), sqlAndIO)).isTrue();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), throwable)).isTrue();\n\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable())).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), empty)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), exception)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), sqlAndIO)).isFalse();\n\t\tassertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), throwable)).isTrue();\n\t}\n\n\t@Test\n\tvoid isEmptyNull() {\n\t\tassertThat(isEmpty(null)).isTrue();\n\t}\n\n\t@Test\n\tvoid isEmptyArray() {\n\t\tassertThat(isEmpty(new char[0])).isTrue();\n\t\tassertThat(isEmpty(new Object[0])).isTrue();\n\t\tassertThat(isEmpty(new Integer[0])).isTrue();\n\n\t\tassertThat(isEmpty(new int[] {42})).isFalse();\n\t\tassertThat(isEmpty(new Integer[] {42})).isFalse();\n\t}\n\n\t@Test\n\tvoid isEmptyCollection() {\n\t\tassertThat(isEmpty(Collections.emptyList())).isTrue();\n\t\tassertThat(isEmpty(Collections.emptySet())).isTrue();\n\n\t\tSet<String> set = new HashSet<>();\n\t\tset.add(\"foo\");\n\t\tassertThat(isEmpty(set)).isFalse();\n\t\tassertThat(isEmpty(Collections.singletonList(\"foo\"))).isFalse();\n\t}\n\n\t@Test\n\tvoid isEmptyMap() {\n\t\tassertThat(isEmpty(Collections.emptyMap())).isTrue();\n\n\t\tHashMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"foo\", 42L);\n\t\tassertThat(isEmpty(map)).isFalse();\n\t}\n\n\t@Test\n\tvoid isEmptyCharSequence() {\n\t\tassertThat(isEmpty(new StringBuilder())).isTrue();\n\t\tassertThat(isEmpty(\"\")).isTrue();\n\n\t\tassertThat(isEmpty(new StringBuilder(\"foo\"))).isFalse();\n\t\tassertThat(isEmpty(\"   \")).isFalse();\n\t\tassertThat(isEmpty(\"\\t\")).isFalse();\n\t\tassertThat(isEmpty(\"foo\")).isFalse();\n\t}\n\n\t@Test\n\tvoid isEmptyUnsupportedObjectType() {\n\t\tassertThat(isEmpty(42L)).isFalse();\n\t\tassertThat(isEmpty(new Object())).isFalse();\n\t}\n\n\t@Test\n\tvoid toObjectArray() {\n\t\tint[] a = new int[] {1, 2, 3, 4, 5};\n\t\tInteger[] wrapper = (Integer[]) ObjectUtils.toObjectArray(a);\n\t\tassertThat(wrapper).hasSize(5);\n\t\tfor (int i = 0; i < wrapper.length; i++) {\n\t\t\tassertThat(wrapper[i]).isEqualTo(a[i]);\n\t\t}\n\t}\n\n\t@Test\n\tvoid toObjectArrayWithNull() {\n\t\tObject[] objects = ObjectUtils.toObjectArray(null);\n\t\tassertThat(objects).isNotNull();\n\t\tassertThat(objects).isEmpty();\n\t}\n\n\t@Test\n\tvoid toObjectArrayWithEmptyPrimitiveArray() {\n\t\tObject[] objects = ObjectUtils.toObjectArray(new byte[] {});\n\t\tassertThat(objects).isNotNull();\n\t\tassertThat(objects).isEmpty();\n\t}\n\n\t@Test\n\tvoid toObjectArrayWithNonArrayType() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> ObjectUtils.toObjectArray(\"Not an []\"))\n\t\t\t\t.withMessageStartingWith(\"Source is not an array\");\n\t}\n\n\t@Test\n\tvoid toObjectArrayWithNonPrimitiveArray() {\n\t\tString[] source = {\"Bingo\"};\n\t\tassertThat(ObjectUtils.toObjectArray(source)).isSameAs(source);\n\t}\n\n\t@Test\n\tvoid addObjectToArraySunnyDay() {\n\t\tString[] array = {\"foo\", \"bar\"};\n\t\tString newElement = \"baz\";\n\t\tObject[] newArray = ObjectUtils.addObjectToArray(array, newElement);\n\t\tassertThat(newArray).hasSize(3);\n\t\tassertThat(newArray[2]).isEqualTo(newElement);\n\t}\n\n\t@Test\n\tvoid addObjectToArraysAtPosition() {\n\t\tString[] array = {\"foo\", \"bar\", \"baz\"};\n\t\tassertThat(ObjectUtils.addObjectToArray(array, \"bat\", 3)).containsExactly(\"foo\", \"bar\", \"baz\", \"bat\");\n\t\tassertThat(ObjectUtils.addObjectToArray(array, \"bat\", 2)).containsExactly(\"foo\", \"bar\", \"bat\", \"baz\");\n\t\tassertThat(ObjectUtils.addObjectToArray(array, \"bat\", 1)).containsExactly(\"foo\", \"bat\", \"bar\", \"baz\");\n\t\tassertThat(ObjectUtils.addObjectToArray(array, \"bat\", 0)).containsExactly(\"bat\", \"foo\", \"bar\", \"baz\");\n\t}\n\n\t@Test\n\tvoid addObjectToArrayWhenEmpty() {\n\t\tString[] array = new String[0];\n\t\tString newElement = \"foo\";\n\t\tString[] newArray = ObjectUtils.addObjectToArray(array, newElement);\n\t\tassertThat(newArray).hasSize(1);\n\t\tassertThat(newArray[0]).isEqualTo(newElement);\n\t}\n\n\t@Test\n\tvoid addObjectToSingleNonNullElementArray() {\n\t\tString existingElement = \"foo\";\n\t\tString[] array = {existingElement};\n\t\tString newElement = \"bar\";\n\t\tString[] newArray = ObjectUtils.addObjectToArray(array, newElement);\n\t\tassertThat(newArray).hasSize(2);\n\t\tassertThat(newArray[0]).isEqualTo(existingElement);\n\t\tassertThat(newArray[1]).isEqualTo(newElement);\n\t}\n\n\t@Test\n\tvoid addObjectToSingleNullElementArray() {\n\t\tString[] array = {null};\n\t\tString newElement = \"bar\";\n\t\tString[] newArray = ObjectUtils.addObjectToArray(array, newElement);\n\t\tassertThat(newArray).hasSize(2);\n\t\tassertThat(newArray[0]).isNull();\n\t\tassertThat(newArray[1]).isEqualTo(newElement);\n\t}\n\n\t@Test\n\tvoid addObjectToNullArray() {\n\t\tString newElement = \"foo\";\n\t\tString[] newArray = ObjectUtils.addObjectToArray(null, newElement);\n\t\tassertThat(newArray).hasSize(1);\n\t\tassertThat(newArray[0]).isEqualTo(newElement);\n\t}\n\n\t@Test\n\tvoid addNullObjectToNullArray() {\n\t\tObject[] newArray = ObjectUtils.addObjectToArray(null, null);\n\t\tassertThat(newArray).hasSize(1);\n\t\tassertThat(newArray[0]).isNull();\n\t}\n\n\t@Test\n\tvoid nullSafeEqualsWithArrays() {\n\t\tassertThat(ObjectUtils.nullSafeEquals(new String[] {\"a\", \"b\", \"c\"}, new String[] {\"a\", \"b\", \"c\"})).isTrue();\n\t\tassertThat(ObjectUtils.nullSafeEquals(new int[] {1, 2, 3}, new int[] {1, 2, 3})).isTrue();\n\t}\n\n\t@Test\n\tvoid identityToString() {\n\t\tObject obj = new Object();\n\t\tString expected = obj.getClass().getName() + \"@\" + ObjectUtils.getIdentityHexString(obj);\n\t\tString actual = ObjectUtils.identityToString(obj);\n\t\tassertThat(actual).isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid identityToStringWithNullObject() {\n\t\tassertThat(ObjectUtils.identityToString(null)).isEmpty();\n\t}\n\n\t@Test\n\tvoid isArrayOfPrimitivesWithBooleanArray() {\n\t\tassertThat(ClassUtils.isPrimitiveArray(boolean[].class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isArrayOfPrimitivesWithObjectArray() {\n\t\tassertThat(ClassUtils.isPrimitiveArray(Object[].class)).isFalse();\n\t}\n\n\t@Test\n\tvoid isArrayOfPrimitivesWithNonArray() {\n\t\tassertThat(ClassUtils.isPrimitiveArray(String.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithBooleanPrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(boolean.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithBooleanWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Boolean.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithBytePrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(byte.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithByteWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Byte.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithCharacterClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Character.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithCharClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(char.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithDoublePrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(double.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithDoubleWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Double.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithFloatPrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(float.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithFloatWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Float.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithIntClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(int.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithIntegerClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Integer.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithLongPrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(long.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithLongWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Long.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithNonPrimitiveOrWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Object.class)).isFalse();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithShortPrimitiveClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(short.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid isPrimitiveOrWrapperWithShortWrapperClass() {\n\t\tassertThat(ClassUtils.isPrimitiveOrWrapper(Short.class)).isTrue();\n\t}\n\n\t@Test\n\tvoid nullSafeHashWithNull() {\n\t\tassertThat(ObjectUtils.nullSafeHash((Object[]) null)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid nullSafeHashWithIntermediateNullElements() {\n\t\tassertThat(ObjectUtils.nullSafeHash(3, null, 5)).isEqualTo(Objects.hash(3, null, 5));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullBooleanArray() {\n\t\tboolean[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithBooleanArray() {\n\t\tboolean[] array = {true, false};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingBooleanArray() {\n\t\tObject array = new boolean[] {true, false};\n\t\tint expected = ObjectUtils.nullSafeHashCode((boolean[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullByteArray() {\n\t\tbyte[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithByteArray() {\n\t\tbyte[] array = {8, 10};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingByteArray() {\n\t\tObject array = new byte[] {6, 39};\n\t\tint expected = ObjectUtils.nullSafeHashCode((byte[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullCharArray() {\n\t\tchar[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithCharArray() {\n\t\tchar[] array = {'a', 'E'};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingCharArray() {\n\t\tObject array = new char[] {'l', 'M'};\n\t\tint expected = ObjectUtils.nullSafeHashCode((char[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullDoubleArray() {\n\t\tdouble[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithDoubleArray() {\n\t\tdouble[] array = {8449.65, 9944.923};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingDoubleArray() {\n\t\tObject array = new double[] {68930.993, 9022.009};\n\t\tint expected = ObjectUtils.nullSafeHashCode((double[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullFloatArray() {\n\t\tfloat[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithFloatArray() {\n\t\tfloat[] array = {9.6f, 7.4f};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingFloatArray() {\n\t\tObject array = new float[] {9.9f, 9.54f};\n\t\tint expected = ObjectUtils.nullSafeHashCode((float[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullIntArray() {\n\t\tint[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithIntArray() {\n\t\tint[] array = {884, 340};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingIntArray() {\n\t\tObject array = new int[] {89, 32};\n\t\tint expected = ObjectUtils.nullSafeHashCode((int[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullLongArray() {\n\t\tlong[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithLongArray() {\n\t\tlong[] array = {7993L, 84320L};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingLongArray() {\n\t\tObject array = new long[] {4389, 320};\n\t\tint expected = ObjectUtils.nullSafeHashCode((long[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithNullShortArray() {\n\t\tshort[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithShortArray() {\n\t\tshort[] array = {4, 25};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingShortArray() {\n\t\tObject array = new short[] {5, 3};\n\t\tint expected = ObjectUtils.nullSafeHashCode((short[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\tvoid nullSafeHashCodeWithObject() {\n\t\tString str = \"Luke\";\n\t\tassertThat(ObjectUtils.nullSafeHashCode(str)).isEqualTo(str.hashCode());\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectArray() {\n\t\tObject[] array = {\"Leia\", \"Han\"};\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(Arrays.hashCode(array));\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeHashCode((Object[]) null)).isEqualTo(0);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectBeingObjectArray() {\n\t\tObject array = new Object[] {\"Luke\", \"Anakin\"};\n\t\tint expected = ObjectUtils.nullSafeHashCode((Object[]) array);\n\t\tassertEqualHashCodes(expected, array);\n\t}\n\n\t@Test\n\t@Deprecated\n\tvoid nullSafeHashCodeWithObjectEqualToNull() {\n\t\tObject[] array = null;\n\t\tassertThat(ObjectUtils.nullSafeHashCode(array)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithBooleanArray() {\n\t\tboolean[] array = {true, false};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{true, false}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithBooleanArrayBeingEmpty() {\n\t\tboolean[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithBooleanArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((boolean[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithByteArray() {\n\t\tbyte[] array = {5, 8};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{5, 8}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithByteArrayBeingEmpty() {\n\t\tbyte[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithByteArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((byte[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithCharArray() {\n\t\tchar[] array = {'A', 'B'};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{'A', 'B'}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithCharArrayBeingEmpty() {\n\t\tchar[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithCharArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((char[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithDoubleArray() {\n\t\tdouble[] array = {8594.93, 8594023.95};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{8594.93, 8594023.95}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithDoubleArrayBeingEmpty() {\n\t\tdouble[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithDoubleArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((double[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithFloatArray() {\n\t\tfloat[] array = {8.6f, 43.8f};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{8.6, 43.8}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithFloatArrayBeingEmpty() {\n\t\tfloat[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithFloatArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((float[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithIntArray() {\n\t\tint[] array = {9, 64};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{9, 64}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithIntArrayBeingEmpty() {\n\t\tint[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithIntArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((int[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithLongArray() {\n\t\tlong[] array = {434L, 23423L};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{434, 23423}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithLongArrayBeingEmpty() {\n\t\tlong[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithLongArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((long[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithPlainOldString() {\n\t\tassertThat(ObjectUtils.nullSafeToString(\"I shoh love tha taste of mangoes\")).isEqualTo(\"I shoh love tha taste of mangoes\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithObjectArray() {\n\t\tObject[] array = {\"Han\", 43L};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{Han, 43}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithObjectArrayBeingEmpty() {\n\t\tObject[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithObjectArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((Object[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithShortArray() {\n\t\tshort[] array = {7, 9};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{7, 9}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithShortArrayBeingEmpty() {\n\t\tshort[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithShortArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((short[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithStringArray() {\n\t\tString[] array = {\"Luke\", \"Anakin\"};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{Luke, Anakin}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithStringArrayBeingEmpty() {\n\t\tString[] array = {};\n\t\tassertThat(ObjectUtils.nullSafeToString(array)).isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid nullSafeToStringWithStringArrayEqualToNull() {\n\t\tassertThat(ObjectUtils.nullSafeToString((String[]) null)).isEqualTo(\"null\");\n\t}\n\n\t@Test\n\tvoid containsConstant() {\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"FOO\")).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"foo\")).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"BaR\")).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"bar\")).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"BAZ\")).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"baz\")).isTrue();\n\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"BOGUS\")).isFalse();\n\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"FOO\", true)).isTrue();\n\t\tassertThat(ObjectUtils.containsConstant(Tropes.values(), \"foo\", true)).isFalse();\n\t}\n\n\t@Test\n\tvoid containsElement() {\n\t\tObject[] array = {\"foo\", \"bar\", 42, new String[] {\"baz\", \"quux\"}};\n\n\t\tassertThat(ObjectUtils.containsElement(null, \"foo\")).isFalse();\n\t\tassertThat(ObjectUtils.containsElement(array, null)).isFalse();\n\t\tassertThat(ObjectUtils.containsElement(array, \"bogus\")).isFalse();\n\n\t\tassertThat(ObjectUtils.containsElement(array, \"foo\")).isTrue();\n\t\tassertThat(ObjectUtils.containsElement(array, \"bar\")).isTrue();\n\t\tassertThat(ObjectUtils.containsElement(array, 42)).isTrue();\n\t\tassertThat(ObjectUtils.containsElement(array, new String[] {\"baz\", \"quux\"})).isTrue();\n\t}\n\n\t@Test\n\tvoid caseInsensitiveValueOf() {\n\t\tassertThat(ObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"foo\")).isEqualTo(Tropes.FOO);\n\t\tassertThat(ObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"BAR\")).isEqualTo(Tropes.BAR);\n\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tObjectUtils.caseInsensitiveValueOf(Tropes.values(), \"bogus\"))\n\t\t\t.withMessage(\"Constant [bogus] does not exist in enum type org.springframework.util.ObjectUtilsTests$Tropes\");\n\t}\n\n\n\tprivate static void assertEqualHashCodes(int expected, Object array) {\n\t\tint actual = ObjectUtils.nullSafeHashCode(array);\n\t\tassertThat(actual).isEqualTo(expected);\n\t\tassertThat(array.hashCode()).isNotEqualTo(actual);\n\t}\n\n\n\tenum Tropes {FOO, BAR, baz}\n\n\n\t@Nested\n\tclass NullSafeConciseToStringTests {\n\n\t\tprivate static final String truncated = \" (truncated)...\";\n\t\tprivate static final int truncatedLength = 100 + truncated.length();\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNull() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(null)).isEqualTo(\"null\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForEmptyOptional() {\n\t\t\tOptional<String> optional = Optional.empty();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(\"Optional.empty\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNonEmptyOptionals() {\n\t\t\tOptional<Tropes> optionalEnum = Optional.of(Tropes.BAR);\n\t\t\tString expected = \"Optional[BAR]\";\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(optionalEnum)).isEqualTo(expected);\n\n\t\t\tString repeat100 = \"X\".repeat(100);\n\t\t\tString repeat101 = \"X\".repeat(101);\n\n\t\t\tOptional<String> optionalString = Optional.of(repeat100);\n\t\t\texpected = \"Optional[%s]\".formatted(repeat100);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\n\n\t\t\toptionalString = Optional.of(repeat101);\n\t\t\texpected = \"Optional[%s]\".formatted(repeat100 + truncated);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(optionalString)).isEqualTo(expected);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNonEmptyOptionalCustomType() {\n\t\t\tclass CustomType {\n\t\t\t}\n\n\t\t\tCustomType customType = new CustomType();\n\t\t\tOptional<CustomType> optional = Optional.of(customType);\n\t\t\tString expected = \"Optional[%s]\".formatted(ObjectUtils.nullSafeConciseToString(customType));\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(optional)).isEqualTo(expected);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForClass() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(String.class)).isEqualTo(\"java.lang.String\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForStrings() {\n\t\t\tString repeat100 = \"X\".repeat(100);\n\t\t\tString repeat101 = \"X\".repeat(101);\n\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"\")).isEqualTo(\"\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(\"foo\")).isEqualTo(\"foo\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat100)).isEqualTo(repeat100);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(repeat101)).hasSize(truncatedLength).endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForStringBuilders() {\n\t\t\tString repeat100 = \"X\".repeat(100);\n\t\t\tString repeat101 = \"X\".repeat(101);\n\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(\"foo\"))).isEqualTo(\"foo\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat100))).isEqualTo(repeat100);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new StringBuilder(repeat101))).hasSize(truncatedLength).endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForEnum() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(Tropes.FOO)).isEqualTo(\"FOO\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForPrimitivesAndWrappers() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(true)).isEqualTo(\"true\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString('X')).isEqualTo(\"X\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(42L)).isEqualTo(\"42\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(99.1234D)).isEqualTo(\"99.1234\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForBigNumbers() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(BigInteger.valueOf(42L))).isEqualTo(\"42\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(BigDecimal.valueOf(99.1234D))).isEqualTo(\"99.1234\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForDate() {\n\t\t\tDate date = new Date();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(date)).isEqualTo(date.toString());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForTemporal() {\n\t\t\tLocalDate localDate = LocalDate.now();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(localDate)).isEqualTo(localDate.toString());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForUUID() {\n\t\t\tUUID id = UUID.randomUUID();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(id)).isEqualTo(id.toString());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForFile() {\n\t\t\tString path = \"/tmp/file.txt\".replace('/', File.separatorChar);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new File(path))).isEqualTo(path);\n\n\t\t\tpath = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new File(path)))\n\t\t\t\t\t.hasSize(truncatedLength)\n\t\t\t\t\t.startsWith(path.subSequence(0, 100))\n\t\t\t\t\t.endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForPath() {\n\t\t\tString path = \"/tmp/file.txt\".replace('/', File.separatorChar);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).isEqualTo(path);\n\n\t\t\tpath = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(Path.of(path)))\n\t\t\t\t\t.hasSize(truncatedLength)\n\t\t\t\t\t.startsWith(path.subSequence(0, 100))\n\t\t\t\t\t.endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForURI() {\n\t\t\tString uri = \"https://www.example.com/?foo=1&bar=2&baz=3\";\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).isEqualTo(uri);\n\n\t\t\turi += \"&qux=\" + \"4\".repeat(60);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri)))\n\t\t\t\t\t.hasSize(truncatedLength)\n\t\t\t\t\t.startsWith(uri.subSequence(0, 100))\n\t\t\t\t\t.endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForURL() throws Exception {\n\t\t\tString url = \"https://www.example.com/?foo=1&bar=2&baz=3\";\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).isEqualTo(url);\n\n\t\t\turl += \"&qux=\" + \"4\".repeat(60);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new URL(url)))\n\t\t\t\t\t.hasSize(truncatedLength)\n\t\t\t\t\t.startsWith(url.subSequence(0, 100))\n\t\t\t\t\t.endsWith(truncated);\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForInetAddress() {\n\t\t\tInetAddress localhost = getLocalhost();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(localhost)).isEqualTo(localhost.toString());\n\t\t}\n\n\t\tprivate static InetAddress getLocalhost() {\n\t\t\ttry {\n\t\t\t\treturn InetAddress.getLocalHost();\n\t\t\t}\n\t\t\tcatch (UnknownHostException ex) {\n\t\t\t\treturn InetAddress.getLoopbackAddress();\n\t\t\t}\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForCharset() {\n\t\t\tCharset charset = StandardCharsets.UTF_8;\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(charset)).isEqualTo(charset.name());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForCurrency() {\n\t\t\tCurrency currency = Currency.getInstance(Locale.US);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(currency)).isEqualTo(currency.toString());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForLocale() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(Locale.GERMANY)).isEqualTo(\"de_DE\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForRegExPattern() {\n\t\t\tPattern pattern = Pattern.compile(\"^(foo|bar)$\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(pattern)).isEqualTo(pattern.toString());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForTimeZone() {\n\t\t\tTimeZone timeZone = TimeZone.getDefault();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(timeZone)).isEqualTo(timeZone.getID());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForZoneId() {\n\t\t\tZoneId zoneId = ZoneId.systemDefault();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(zoneId)).isEqualTo(zoneId.getId());\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForEmptyArrays() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new char[] {})).isEqualTo(\"{}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new int[][] {})).isEqualTo(\"{}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new String[] {})).isEqualTo(\"{}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] {})).isEqualTo(\"{}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNonEmptyArrays() {\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new char[] {'a'})).isEqualTo(\"{...}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new int[][] {{1}, {2}})).isEqualTo(\"{...}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new String[] {\"enigma\"})).isEqualTo(\"{...}\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(new Integer[][] {{1}, {2}})).isEqualTo(\"{...}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForEmptyCollections() {\n\t\t\tList<String> list = List.of();\n\t\t\tSet<Integer> set = Set.of();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNonEmptyCollections() {\n\t\t\tList<String> list = List.of(\"a\", \"b\");\n\t\t\tSet<Integer> set = Set.of(1);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(list)).isEqualTo(\"[...]\");\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(set)).isEqualTo(\"[...]\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForEmptyMaps() {\n\t\t\tMap<String, String> map = Map.of();\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForNonEmptyMaps() {\n\t\t\tMap<String, Integer> map = Map.of(\"a\", 1, \"b\", 2, \"c\", 3);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(map)).isEqualTo(\"{...}\");\n\t\t}\n\n\t\t@Test\n\t\tvoid nullSafeConciseToStringForCustomTypes() {\n\t\t\tclass ExplosiveType {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\tthrow new UnsupportedOperationException(\"no-go\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tExplosiveType explosiveType = new ExplosiveType();\n\t\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(explosiveType::toString);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(explosiveType)).startsWith(prefix(ExplosiveType.class));\n\n\t\t\tclass WordyType {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\treturn \"blah blah\".repeat(20);\n\t\t\t\t}\n\t\t\t}\n\t\t\tWordyType wordyType = new WordyType();\n\t\t\tassertThat(wordyType).asString().hasSizeGreaterThanOrEqualTo(180 /* 9x20 */);\n\t\t\tassertThat(ObjectUtils.nullSafeConciseToString(wordyType)).startsWith(prefix(WordyType.class));\n\t\t}\n\n\t\tprivate static String prefix(Class<?> clazz) {\n\t\t\treturn clazz.getTypeName() + \"@\";\n\t\t}\n\t}\n\n\t@Test\n\tvoid unwrapOptional() {\n\n\t\tassertThat(ObjectUtils.unwrapOptional(null)).isNull();\n\t\tassertThat(ObjectUtils.unwrapOptional(\"some value\")).isEqualTo(\"some value\");\n\t\tassertThat(ObjectUtils.unwrapOptional(Optional.empty())).isNull();\n\t\tassertThat(ObjectUtils.unwrapOptional(Optional.of(\"some value\"))).isEqualTo(\"some value\");\n\n\t\tOptional<Optional<Object>> nestedEmptyOptional = Optional.of(Optional.empty());\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedEmptyOptional))\n\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n\n\t\tOptional<Optional<String>> nestedStringOptional = Optional.of(Optional.of(\"some value\"));\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> ObjectUtils.unwrapOptional(nestedStringOptional))\n\t\t\t.withMessage(\"Multi-level Optional usage not supported\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#isCheckedException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isCheckedException() {\r\n    assertThat(ObjectUtils.isCheckedException(new Exception())).isTrue();\r\n    assertThat(ObjectUtils.isCheckedException(new SQLException())).isTrue();\r\n    assertThat(ObjectUtils.isCheckedException(new RuntimeException())).isFalse();\r\n    assertThat(ObjectUtils.isCheckedException(new IllegalArgumentException(\"\"))).isFalse();\r\n    // Any Throwable other than RuntimeException and Error\r\n    // has to be considered checked according to the JLS.\r\n    assertThat(ObjectUtils.isCheckedException(new Throwable())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#isCheckedException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#isCheckedException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#isCompatibleWithThrowsClause()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isCompatibleWithThrowsClause() {\r\n    Class<?>[] empty = new Class<?>[0];\r\n    Class<?>[] exception = new Class<?>[] { Exception.class };\r\n    Class<?>[] sqlAndIO = new Class<?>[] { SQLException.class, IOException.class };\r\n    Class<?>[] throwable = new Class<?>[] { Throwable.class };\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException())).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), empty)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), exception)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), sqlAndIO)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException(), throwable)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception())).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), empty)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), exception)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), sqlAndIO)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Exception(), throwable)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException())).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), empty)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), exception)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), sqlAndIO)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new SQLException(), throwable)).isTrue();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable())).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), empty)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), exception)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), sqlAndIO)).isFalse();\r\n    assertThat(ObjectUtils.isCompatibleWithThrowsClause(new Throwable(), throwable)).isTrue();\r\n}",
    "tailType": "method_code"
  }
]