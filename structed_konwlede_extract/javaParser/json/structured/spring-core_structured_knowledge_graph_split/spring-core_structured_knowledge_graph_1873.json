[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigIntegerToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bigIntegerToString() {\r\n    assertThat(conversionService.convert(new BigInteger(\"100\"), String.class)).isEqualTo(\"100\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigIntegerToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigIntegerToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBigDecimal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToBigDecimal() {\r\n    assertThat(conversionService.convert(\"1.0\", BigDecimal.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBigDecimal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToBigDecimal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigDecimalToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid bigDecimalToString() {\r\n    assertThat(conversionService.convert(new BigDecimal(\"100.00\"), String.class)).isEqualTo(\"100.00\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigDecimalToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#bigDecimalToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumber()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToNumber() {\r\n    assertThat(conversionService.convert(\"1.0\", Number.class)).isEqualTo(new BigDecimal(\"1.0\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumber()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumberEmptyString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToNumberEmptyString() {\r\n    assertThat(conversionService.convert(\"\", Number.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumberEmptyString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToNumberEmptyString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnum() {\r\n    assertThat(conversionService.convert(\"BAR\", Foo.class)).isEqualTo(Foo.BAR);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumWithSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumWithSubclass() {\r\n    assertThat(conversionService.convert(\"BAZ\", SubFoo.BAR.getClass())).isEqualTo(SubFoo.BAZ);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#stringToEnumWithSubclass()",
    "tailType": "method"
  }
]