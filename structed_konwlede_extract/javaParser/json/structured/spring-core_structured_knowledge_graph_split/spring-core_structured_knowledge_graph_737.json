[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#hasAnnotation(AnnotatedElement,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find the first annotation of the specified {@code annotationType} within\r\n * the annotation hierarchy <em>above</em> the supplied {@code element} and\r\n * merge that annotation's attributes with <em>matching</em> attributes from\r\n * annotations in lower levels of the annotation hierarchy.\r\n * <p>Attributes from lower levels in the annotation hierarchy override\r\n * attributes of the same name from higher levels, and\r\n * {@link AliasFor @AliasFor} semantics are fully supported, both\r\n * within a single annotation and within the annotation hierarchy.\r\n * <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm\r\n * used by this method will stop searching the annotation hierarchy once the\r\n * first annotation of the specified {@code annotationType} has been found.\r\n * As a consequence, additional annotations of the specified\r\n * {@code annotationType} will be ignored.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationType the annotation type to find\r\n * @param classValuesAsString whether to convert Class references into\r\n * Strings or to preserve them as Class references\r\n * @param nestedAnnotationsAsMap whether to convert nested Annotation instances into\r\n * {@code AnnotationAttributes} maps or to preserve them as Annotation instances\r\n * @return the merged {@code AnnotationAttributes}, or {@code null} if not found\r\n * @since 4.2\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n */\r\n@Nullable\r\npublic static AnnotationAttributes findMergedAnnotationAttributes(AnnotatedElement element, Class<? extends Annotation> annotationType, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {\r\n    MergedAnnotation<?> mergedAnnotation = findAnnotations(element).get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared());\r\n    return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,Class<? extends Annotation>,boolean,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,String,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find the first annotation of the specified {@code annotationName} within\r\n * the annotation hierarchy <em>above</em> the supplied {@code element} and\r\n * merge that annotation's attributes with <em>matching</em> attributes from\r\n * annotations in lower levels of the annotation hierarchy.\r\n * <p>Attributes from lower levels in the annotation hierarchy override\r\n * attributes of the same name from higher levels, and\r\n * {@link AliasFor @AliasFor} semantics are fully supported, both\r\n * within a single annotation and within the annotation hierarchy.\r\n * <p>In contrast to {@link #getAllAnnotationAttributes}, the search\r\n * algorithm used by this method will stop searching the annotation\r\n * hierarchy once the first annotation of the specified\r\n * {@code annotationName} has been found. As a consequence, additional\r\n * annotations of the specified {@code annotationName} will be ignored.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationName the fully qualified class name of the annotation type to find\r\n * @param classValuesAsString whether to convert Class references into Strings or to\r\n * preserve them as Class references\r\n * @param nestedAnnotationsAsMap whether to convert nested Annotation instances into\r\n * {@code AnnotationAttributes} maps or to preserve them as Annotation instances\r\n * @return the merged {@code AnnotationAttributes}, or {@code null} if not found\r\n * @since 4.2\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n */\r\n@Nullable\r\npublic static AnnotationAttributes findMergedAnnotationAttributes(AnnotatedElement element, String annotationName, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {\r\n    MergedAnnotation<?> mergedAnnotation = findAnnotations(element).get(annotationName, null, MergedAnnotationSelectors.firstDirectlyDeclared());\r\n    return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,String,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotationAttributes(AnnotatedElement,String,boolean,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find the first annotation of the specified {@code annotationType} within\r\n * the annotation hierarchy <em>above</em> the supplied {@code element},\r\n * merge that annotation's attributes with <em>matching</em> attributes from\r\n * annotations in lower levels of the annotation hierarchy, and synthesize\r\n * the result back into an annotation of the specified {@code annotationType}.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both\r\n * within a single annotation and within the annotation hierarchy.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element\r\n * @param annotationType the annotation type to find\r\n * @return the merged, synthesized {@code Annotation}, or {@code null} if not found\r\n * @since 4.2\r\n * @see #findAllMergedAnnotations(AnnotatedElement, Class)\r\n * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)\r\n * @see #getMergedAnnotationAttributes(AnnotatedElement, Class)\r\n */\r\n@Nullable\r\npublic static <A extends Annotation> A findMergedAnnotation(AnnotatedElement element, Class<A> annotationType) {\r\n    // Shortcut: directly present on the element, with no merging needed?\r\n    if (AnnotationFilter.PLAIN.matches(annotationType) || AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {\r\n        return element.getDeclaredAnnotation(annotationType);\r\n    }\r\n    // Exhaustive retrieval of merged annotations...\r\n    return findAnnotations(element).get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared()).synthesize(MergedAnnotation::isPresent).orElse(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotation(AnnotatedElement,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findAllMergedAnnotations(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find <strong>all</strong> annotations of the specified {@code annotationType}\r\n * within the annotation hierarchy <em>above</em> the supplied {@code element};\r\n * and for each annotation found, merge that annotation's attributes with\r\n * <em>matching</em> attributes from annotations in lower levels of the annotation\r\n * hierarchy and synthesize the results back into an annotation of the specified\r\n * {@code annotationType}.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a\r\n * single annotation and within annotation hierarchies.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element (never {@code null})\r\n * @param annotationType the annotation type to find (never {@code null})\r\n * @return the set of all merged, synthesized {@code Annotations} found,\r\n * or an empty set if none were found\r\n * @since 4.3\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #getAllMergedAnnotations(AnnotatedElement, Class)\r\n */\r\npublic static <A extends Annotation> Set<A> findAllMergedAnnotations(AnnotatedElement element, Class<A> annotationType) {\r\n    return findAnnotations(element).stream(annotationType).sorted(highAggregateIndexesFirst()).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findAllMergedAnnotations(AnnotatedElement,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findAllMergedAnnotations(AnnotatedElement,Set<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find <strong>all</strong> annotations of the specified {@code annotationTypes}\r\n * within the annotation hierarchy <em>above</em> the supplied {@code element};\r\n * and for each annotation found, merge that annotation's attributes with\r\n * <em>matching</em> attributes from annotations in lower levels of the\r\n * annotation hierarchy and synthesize the results back into an annotation\r\n * of the corresponding {@code annotationType}.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a\r\n * single annotation and within annotation hierarchies.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element (never {@code null})\r\n * @param annotationTypes the annotation types to find\r\n * @return the set of all merged, synthesized {@code Annotations} found,\r\n * or an empty set if none were found\r\n * @since 5.1\r\n * @see #findAllMergedAnnotations(AnnotatedElement, Class)\r\n */\r\npublic static Set<Annotation> findAllMergedAnnotations(AnnotatedElement element, Set<Class<? extends Annotation>> annotationTypes) {\r\n    return findAnnotations(element).stream().filter(MergedAnnotationPredicates.typeIn(annotationTypes)).sorted(highAggregateIndexesFirst()).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findAllMergedAnnotations(AnnotatedElement,Set<Class<? extends Annotation>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedRepeatableAnnotations(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find all <em>repeatable annotations</em> of the specified {@code annotationType}\r\n * within the annotation hierarchy <em>above</em> the supplied {@code element};\r\n * and for each annotation found, merge that annotation's attributes with\r\n * <em>matching</em> attributes from annotations in lower levels of the annotation\r\n * hierarchy and synthesize the results back into an annotation of the specified\r\n * {@code annotationType}.\r\n * <p>The container type that holds the repeatable annotations will be looked up\r\n * via {@link java.lang.annotation.Repeatable}.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a\r\n * single annotation and within annotation hierarchies.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * @param element the annotated element (never {@code null})\r\n * @param annotationType the annotation type to find (never {@code null})\r\n * @return the set of all merged repeatable {@code Annotations} found,\r\n * or an empty set if none were found\r\n * @throws IllegalArgumentException if the {@code element} or {@code annotationType}\r\n * is {@code null}, or if the container type cannot be resolved\r\n * @since 4.3\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #findAllMergedAnnotations(AnnotatedElement, Class)\r\n * @see #findMergedRepeatableAnnotations(AnnotatedElement, Class, Class)\r\n */\r\npublic static <A extends Annotation> Set<A> findMergedRepeatableAnnotations(AnnotatedElement element, Class<A> annotationType) {\r\n    return findMergedRepeatableAnnotations(element, annotationType, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedRepeatableAnnotations(AnnotatedElement,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedRepeatableAnnotations(AnnotatedElement,Class<A>,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find all <em>repeatable annotations</em> of the specified {@code annotationType}\r\n * within the annotation hierarchy <em>above</em> the supplied {@code element};\r\n * and for each annotation found, merge that annotation's attributes with\r\n * <em>matching</em> attributes from annotations in lower levels of the annotation\r\n * hierarchy and synthesize the results back into an annotation of the specified\r\n * {@code annotationType}.\r\n * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a\r\n * single annotation and within annotation hierarchies.\r\n * <p>This method follows <em>find semantics</em> as described in the\r\n * {@linkplain AnnotatedElementUtils class-level javadoc}.\r\n * <p><strong>WARNING</strong>: if the supplied {@code containerType} is not\r\n * {@code null}, the search will be restricted to supporting only repeatable\r\n * annotations whose container is the supplied {@code containerType}. This\r\n * prevents the search from finding repeatable annotations declared as\r\n * meta-annotations on other types of repeatable annotations. If you need to\r\n * support such a use case, favor {@link #findMergedRepeatableAnnotations(AnnotatedElement, Class)}\r\n * over this method or alternatively use the {@link MergedAnnotations} API\r\n * directly in conjunction with {@link RepeatableContainers} that are\r\n * {@linkplain RepeatableContainers#and(Class, Class) composed} to support\r\n * multiple repeatable annotation types.\r\n * @param element the annotated element (never {@code null})\r\n * @param annotationType the annotation type to find (never {@code null})\r\n * @param containerType the type of the container that holds the annotations;\r\n * may be {@code null} if the container type should be looked up via\r\n * {@link java.lang.annotation.Repeatable}\r\n * @return the set of all merged repeatable {@code Annotations} found,\r\n * or an empty set if none were found\r\n * @throws IllegalArgumentException if the {@code element} or {@code annotationType}\r\n * is {@code null}, or if the container type cannot be resolved\r\n * @throws AnnotationConfigurationException if the supplied {@code containerType}\r\n * is not a valid container annotation for the supplied {@code annotationType}\r\n * @since 4.3\r\n * @see #findMergedAnnotation(AnnotatedElement, Class)\r\n * @see #findAllMergedAnnotations(AnnotatedElement, Class)\r\n */\r\npublic static <A extends Annotation> Set<A> findMergedRepeatableAnnotations(AnnotatedElement element, Class<A> annotationType, @Nullable Class<? extends Annotation> containerType) {\r\n    return findRepeatableAnnotations(element, containerType, annotationType).stream(annotationType).sorted(highAggregateIndexesFirst()).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#findMergedRepeatableAnnotations(AnnotatedElement,Class<A>,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils#getAnnotations(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static MergedAnnotations getAnnotations(AnnotatedElement element) {\r\n    return MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtils#getAnnotations(AnnotatedElement)",
    "tailType": "method"
  }
]