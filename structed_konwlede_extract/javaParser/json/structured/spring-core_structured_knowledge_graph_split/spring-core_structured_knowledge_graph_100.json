[
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationTypes() {\r\n    assertThat(standardMetadata.getAnnotationTypes()).containsExactlyInAnyOrder(NamedAnnotation3.class.getName(), InheritedComposedAnnotation.class.getName());\r\n    assertThat(asmMetadata.getAnnotationTypes()).containsExactly(NamedAnnotation3.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasAnnotation() {\r\n    assertThat(standardMetadata.hasAnnotation(InheritedComposedAnnotation.class.getName())).isTrue();\r\n    assertThat(standardMetadata.hasAnnotation(NamedAnnotation3.class.getName())).isTrue();\r\n    // true because @NamedAnnotation3 is also directly present\r\n    assertThat(asmMetadata.hasAnnotation(NamedAnnotation3.class.getName())).isTrue();\r\n    assertThat(asmMetadata.hasAnnotation(InheritedComposedAnnotation.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getMetaAnnotationTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMetaAnnotationTypes() {\r\n    Set<String> metaAnnotationTypes;\r\n    metaAnnotationTypes = standardMetadata.getMetaAnnotationTypes(InheritedComposedAnnotation.class.getName());\r\n    assertThat(metaAnnotationTypes).containsExactlyInAnyOrder(MetaAnnotation.class.getName(), NamedAnnotation1.class.getName(), NamedAnnotation2.class.getName(), NamedAnnotation3.class.getName());\r\n    metaAnnotationTypes = asmMetadata.getMetaAnnotationTypes(InheritedComposedAnnotation.class.getName());\r\n    assertThat(metaAnnotationTypes).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getMetaAnnotationTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getMetaAnnotationTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasMetaAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasMetaAnnotation() {\r\n    assertThat(standardMetadata.hasMetaAnnotation(NamedAnnotation1.class.getName())).isTrue();\r\n    assertThat(standardMetadata.hasMetaAnnotation(NamedAnnotation2.class.getName())).isTrue();\r\n    assertThat(standardMetadata.hasMetaAnnotation(NamedAnnotation3.class.getName())).isTrue();\r\n    assertThat(standardMetadata.hasMetaAnnotation(MetaAnnotation.class.getName())).isTrue();\r\n    assertThat(asmMetadata.hasMetaAnnotation(NamedAnnotation1.class.getName())).isFalse();\r\n    assertThat(asmMetadata.hasMetaAnnotation(NamedAnnotation2.class.getName())).isFalse();\r\n    assertThat(asmMetadata.hasMetaAnnotation(NamedAnnotation3.class.getName())).isFalse();\r\n    assertThat(asmMetadata.hasMetaAnnotation(MetaAnnotation.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#hasMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#isAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAnnotated() {\r\n    assertThat(standardMetadata.isAnnotated(InheritedComposedAnnotation.class.getName())).isTrue();\r\n    assertThat(standardMetadata.isAnnotated(NamedAnnotation1.class.getName())).isTrue();\r\n    assertThat(standardMetadata.isAnnotated(NamedAnnotation2.class.getName())).isTrue();\r\n    assertThat(standardMetadata.isAnnotated(NamedAnnotation3.class.getName())).isTrue();\r\n    assertThat(standardMetadata.isAnnotated(MetaAnnotation.class.getName())).isTrue();\r\n    // true because @NamedAnnotation3 is also directly present\r\n    assertThat(asmMetadata.isAnnotated(NamedAnnotation3.class.getName())).isTrue();\r\n    assertThat(asmMetadata.isAnnotated(InheritedComposedAnnotation.class.getName())).isFalse();\r\n    assertThat(asmMetadata.isAnnotated(NamedAnnotation1.class.getName())).isFalse();\r\n    assertThat(asmMetadata.isAnnotated(NamedAnnotation2.class.getName())).isFalse();\r\n    assertThat(asmMetadata.isAnnotated(MetaAnnotation.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#isAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#isAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributes() {\r\n    Map<String, Object> annotationAttributes;\r\n    annotationAttributes = standardMetadata.getAnnotationAttributes(NamedAnnotation1.class.getName());\r\n    assertThat(annotationAttributes.get(\"name\")).isEqualTo(\"name 1\");\r\n    annotationAttributes = asmMetadata.getAnnotationAttributes(NamedAnnotation1.class.getName());\r\n    assertThat(annotationAttributes).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAnnotationAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAllAnnotationAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllAnnotationAttributes() {\r\n    MultiValueMap<String, Object> annotationAttributes;\r\n    annotationAttributes = standardMetadata.getAllAnnotationAttributes(NamedAnnotation3.class.getName());\r\n    assertThat(annotationAttributes).containsKey(\"name\");\r\n    assertThat(annotationAttributes.get(\"name\")).containsExactlyInAnyOrder(\"name 3\", \"local\");\r\n    annotationAttributes = asmMetadata.getAllAnnotationAttributes(NamedAnnotation1.class.getName());\r\n    assertThat(annotationAttributes).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.InheritedAnnotationsAnnotationMetadataTests#getAllAnnotationAttributes()",
    "tailType": "method"
  }
]