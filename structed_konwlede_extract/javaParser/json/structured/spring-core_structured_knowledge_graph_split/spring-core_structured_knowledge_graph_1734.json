[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotSynthesizeNonsynthesizableAnnotationsWhenUsingMergedAnnotationsFromApi()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotResynthesizeAlreadySynthesizedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If an attempt is made to synthesize an annotation from an annotation instance\r\n * that has already been synthesized, the original synthesized annotation should\r\n * ideally be returned as-is without creating a new proxy instance with the same\r\n * values.\r\n */\r\n@Test\r\nvoid synthesizeShouldNotResynthesizeAlreadySynthesizedAnnotations() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithValueAttribute\");\r\n    RequestMapping webMapping = method.getAnnotation(RequestMapping.class);\r\n    assertThat(webMapping).isNotNull();\r\n    MergedAnnotation<RequestMapping> mergedAnnotation1 = MergedAnnotation.from(webMapping);\r\n    RequestMapping synthesizedWebMapping1 = mergedAnnotation1.synthesize();\r\n    RequestMapping synthesizedWebMapping2 = MergedAnnotation.from(webMapping).synthesize();\r\n    assertSynthesized(synthesizedWebMapping1);\r\n    assertSynthesized(synthesizedWebMapping2);\r\n    assertThat(synthesizedWebMapping1).isEqualTo(synthesizedWebMapping2);\r\n    // Synthesizing an annotation from a different MergedAnnotation results in a different synthesized annotation instance.\r\n    assertThat(synthesizedWebMapping1).isNotSameAs(synthesizedWebMapping2);\r\n    // Synthesizing an annotation from the same MergedAnnotation results in the same synthesized annotation instance.\r\n    assertThat(synthesizedWebMapping1).isSameAs(mergedAnnotation1.synthesize());\r\n    RequestMapping synthesizedAgainWebMapping = MergedAnnotation.from(synthesizedWebMapping1).synthesize();\r\n    assertThat(synthesizedWebMapping1).isEqualTo(synthesizedAgainWebMapping);\r\n    // Synthesizing an already synthesized annotation results in the original synthesized annotation instance.\r\n    assertThat(synthesizedWebMapping1).isSameAs(synthesizedAgainWebMapping);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotResynthesizeAlreadySynthesizedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeShouldNotResynthesizeAlreadySynthesizedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForIsMissingAttributeDeclaration()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAliasForIsMissingAttributeDeclaration() {\r\n    AliasForWithMissingAttributeDeclaration annotation = AliasForWithMissingAttributeDeclarationClass.class.getAnnotation(AliasForWithMissingAttributeDeclaration.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"@AliasFor declaration on attribute 'foo' in annotation\").withMessageContaining(AliasForWithMissingAttributeDeclaration.class.getName()).withMessageContaining(\"points to itself\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForIsMissingAttributeDeclaration()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForIsMissingAttributeDeclaration()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForHasDuplicateAttributeDeclaration()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAliasForHasDuplicateAttributeDeclaration() {\r\n    AliasForWithDuplicateAttributeDeclaration annotation = AliasForWithDuplicateAttributeDeclarationClass.class.getAnnotation(AliasForWithDuplicateAttributeDeclaration.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"In @AliasFor declared on attribute 'foo' in annotation\").withMessageContaining(AliasForWithDuplicateAttributeDeclaration.class.getName()).withMessageContaining(\"attribute 'attribute' and its alias 'value' are present with values of 'baz' and 'bar'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForHasDuplicateAttributeDeclaration()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAliasForHasDuplicateAttributeDeclaration()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForNonexistentAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasForNonexistentAttribute() {\r\n    AliasForNonexistentAttribute annotation = AliasForNonexistentAttributeClass.class.getAnnotation(AliasForNonexistentAttribute.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"@AliasFor declaration on attribute 'foo' in annotation\").withMessageContaining(AliasForNonexistentAttribute.class.getName()).withMessageContaining(\"declares an alias for 'bar' which is not present\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForNonexistentAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForNonexistentAttribute()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasWithMirroredAliasForWrongAttribute()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasWithMirroredAliasForWrongAttribute() {\r\n    AliasForWithMirroredAliasForWrongAttribute annotation = AliasForWithMirroredAliasForWrongAttributeClass.class.getAnnotation(AliasForWithMirroredAliasForWrongAttribute.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessage(\"@AliasFor declaration on attribute 'bar' in annotation [\" + AliasForWithMirroredAliasForWrongAttribute.class.getName() + \"] declares an alias for 'quux' which is not present.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasWithMirroredAliasForWrongAttribute()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasWithMirroredAliasForWrongAttribute()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeOfDifferentType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasForAttributeOfDifferentType() {\r\n    AliasForAttributeOfDifferentType annotation = AliasForAttributeOfDifferentTypeClass.class.getAnnotation(AliasForAttributeOfDifferentType.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"Misconfigured aliases\").withMessageContaining(AliasForAttributeOfDifferentType.class.getName()).withMessageContaining(\"attribute 'foo'\").withMessageContaining(\"attribute 'bar'\").withMessageContaining(\"same return type\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeOfDifferentType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForAttributeOfDifferentType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#synthesizeWhenAttributeAliasForWithMissingDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeWhenAttributeAliasForWithMissingDefaultValues() {\r\n    AliasForWithMissingDefaultValues annotation = AliasForWithMissingDefaultValuesClass.class.getAnnotation(AliasForWithMissingDefaultValues.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotation.from(annotation)).withMessageStartingWith(\"Misconfigured aliases\").withMessageContaining(AliasForWithMissingDefaultValues.class.getName()).withMessageContaining(\"attribute 'foo' in annotation\").withMessageContaining(\"attribute 'bar' in annotation\").withMessageContaining(\"default values\");\r\n}",
    "tailType": "method_code"
  }
]