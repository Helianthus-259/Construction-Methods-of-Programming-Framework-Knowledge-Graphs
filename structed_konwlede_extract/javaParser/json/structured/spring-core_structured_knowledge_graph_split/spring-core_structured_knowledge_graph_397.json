[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.DomContentHandlerTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.StringReader;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\n\nimport org.springframework.core.testfixture.xml.XmlContent;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link DomContentHandler}.\n */\nclass DomContentHandlerTests {\n\n\tprivate static final String XML_1 =\n\t\t\t\"<?xml version='1.0' encoding='UTF-8'?>\" + \"<?pi content?>\" + \"<root xmlns='namespace'>\" +\n\t\t\t\t\t\"<prefix:child xmlns:prefix='namespace2' xmlns:prefix2='namespace3' prefix2:attr='value'>content</prefix:child>\" +\n\t\t\t\t\t\"</root>\";\n\n\tprivate static final String XML_2_EXPECTED =\n\t\t\t\"<?xml version='1.0' encoding='UTF-8'?>\" + \"<root xmlns='namespace'>\" + \"<child xmlns='namespace2' />\" +\n\t\t\t\t\t\"</root>\";\n\n\tprivate static final String XML_2_SNIPPET =\n\t\t\t\"<?xml version='1.0' encoding='UTF-8'?>\" + \"<child xmlns='namespace2' />\";\n\n\n\tprivate Document expected;\n\n\tprivate DomContentHandler handler;\n\n\tprivate Document result;\n\n\tprivate XMLReader xmlReader;\n\n\tprivate DocumentBuilder documentBuilder;\n\n\n\t@BeforeEach\n\tvoid setUp() throws Exception {\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tdocumentBuilderFactory.setNamespaceAware(true);\n\t\tdocumentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t\tresult = documentBuilder.newDocument();\n\t\tSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n\t\tsaxParserFactory.setNamespaceAware(true);\n\t\tSAXParser saxParser = saxParserFactory.newSAXParser();\n\t\txmlReader = saxParser.getXMLReader();\n\t}\n\n\n\t@Test\n\tvoid contentHandlerDocumentNamespacePrefixes() throws Exception {\n\t\txmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\n\t\thandler = new DomContentHandler(result);\n\t\texpected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));\n\t\txmlReader.setContentHandler(handler);\n\t\txmlReader.parse(new InputSource(new StringReader(XML_1)));\n\t\tassertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\n\t}\n\n\t@Test\n\tvoid contentHandlerDocumentNoNamespacePrefixes() throws Exception {\n\t\thandler = new DomContentHandler(result);\n\t\texpected = documentBuilder.parse(new InputSource(new StringReader(XML_1)));\n\t\txmlReader.setContentHandler(handler);\n\t\txmlReader.parse(new InputSource(new StringReader(XML_1)));\n\t\tassertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\n\t}\n\n\t@Test\n\tvoid contentHandlerElement() throws Exception {\n\t\tElement rootElement = result.createElementNS(\"namespace\", \"root\");\n\t\tresult.appendChild(rootElement);\n\t\thandler = new DomContentHandler(rootElement);\n\t\texpected = documentBuilder.parse(new InputSource(new StringReader(XML_2_EXPECTED)));\n\t\txmlReader.setContentHandler(handler);\n\t\txmlReader.parse(new InputSource(new StringReader(XML_2_SNIPPET)));\n\t\tassertThat(XmlContent.of(result)).as(\"Invalid result\").isSimilarTo(expected);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#XML_1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#XML_1",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#XML_2_EXPECTED",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#XML_2_EXPECTED",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#XML_2_SNIPPET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#XML_2_SNIPPET",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#expected",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#expected",
    "headType": "field",
    "relation": "haveType",
    "tail": "Document",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#handler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#handler",
    "headType": "field",
    "relation": "haveType",
    "tail": "DomContentHandler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#result",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#result",
    "headType": "field",
    "relation": "haveType",
    "tail": "Document",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#xmlReader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#xmlReader",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLReader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomContentHandlerTests#documentBuilder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#documentBuilder",
    "headType": "field",
    "relation": "haveType",
    "tail": "DocumentBuilder",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomContentHandlerTests#setUp()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setUp() throws Exception {\r\n    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n    documentBuilderFactory.setNamespaceAware(true);\r\n    documentBuilder = documentBuilderFactory.newDocumentBuilder();\r\n    result = documentBuilder.newDocument();\r\n    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\r\n    saxParserFactory.setNamespaceAware(true);\r\n    SAXParser saxParser = saxParserFactory.newSAXParser();\r\n    xmlReader = saxParser.getXMLReader();\r\n}",
    "tailType": "method_code"
  }
]