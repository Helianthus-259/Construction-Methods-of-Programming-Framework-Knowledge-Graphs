[
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver#validateRequiredProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Validate that each of the properties specified by\r\n * {@link #setRequiredProperties} is present and resolves to a\r\n * non-{@code null} value.\r\n * @throws MissingRequiredPropertiesException if any of the required\r\n * properties are not resolvable.\r\n */\r\nvoid validateRequiredProperties() throws MissingRequiredPropertiesException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ConfigurablePropertyResolver#validateRequiredProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ConfigurablePropertyResolver",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertyResolver",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.EnumerablePropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport org.springframework.util.ObjectUtils;\n\n/**\n * A {@link PropertySource} implementation capable of interrogating its\n * underlying source object to enumerate all possible property name/value\n * pairs. Exposes the {@link #getPropertyNames()} method to allow callers\n * to introspect available properties without having to access the underlying\n * source object. This also facilitates a more efficient implementation of\n * {@link #containsProperty(String)}, in that it can call {@link #getPropertyNames()}\n * and iterate through the returned array rather than attempting a call to\n * {@link #getProperty(String)} which may be more expensive. Implementations may\n * consider caching the result of {@link #getPropertyNames()} to fully exploit this\n * performance opportunity.\n *\n * <p>Most framework-provided {@code PropertySource} implementations are enumerable;\n * a counter-example would be {@code JndiPropertySource} where, due to the\n * nature of JNDI it is not possible to determine all possible property names at\n * any given time; rather it is only possible to try to access a property\n * (via {@link #getProperty(String)}) in order to evaluate whether it is present\n * or not.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @param <T> the source type\n */\npublic abstract class EnumerablePropertySource<T> extends PropertySource<T> {\n\n\t/**\n\t * Create a new {@code EnumerablePropertySource} with the given name and source object.\n\t * @param name the associated name\n\t * @param source the source object\n\t */\n\tpublic EnumerablePropertySource(String name, T source) {\n\t\tsuper(name, source);\n\t}\n\n\t/**\n\t * Create a new {@code EnumerablePropertySource} with the given name and with a new\n\t * {@code Object} instance as the underlying source.\n\t * @param name the associated name\n\t */\n\tprotected EnumerablePropertySource(String name) {\n\t\tsuper(name);\n\t}\n\n\n\t/**\n\t * Return whether this {@code PropertySource} contains a property with the given name.\n\t * <p>This implementation checks for the presence of the given name within the\n\t * {@link #getPropertyNames()} array.\n\t * @param name the name of the property to find\n\t */\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn ObjectUtils.containsElement(getPropertyNames(), name);\n\t}\n\n\t/**\n\t * Return the names of all properties contained by the\n\t * {@linkplain #getSource() source} object (never {@code null}).\n\t */\n\tpublic abstract String[] getPropertyNames();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this {@code PropertySource} contains a property with the given name.\r\n * <p>This implementation checks for the presence of the given name within the\r\n * {@link #getPropertyNames()} array.\r\n * @param name the name of the property to find\r\n */\r\n@Override\r\npublic boolean containsProperty(String name) {\r\n    return ObjectUtils.containsElement(getPropertyNames(), name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.EnumerablePropertySource#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource#getPropertyNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the names of all properties contained by the\r\n * {@linkplain #getSource() source} object (never {@code null}).\r\n */\r\npublic abstract String[] getPropertyNames();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.EnumerablePropertySource#getPropertyNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.EnumerablePropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.Environment",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\n/**\n * Interface representing the environment in which the current application is running.\n * Models two key aspects of the application environment: <em>profiles</em> and\n * <em>properties</em>. Methods related to property access are exposed via the\n * {@link PropertyResolver} superinterface.\n *\n * <p>A <em>profile</em> is a named, logical group of bean definitions to be registered\n * with the container only if the given profile is <em>active</em>. Beans may be assigned\n * to a profile whether defined in XML or via annotations; see the spring-beans 3.1 schema\n * or the {@link org.springframework.context.annotation.Profile @Profile} annotation for\n * syntax details. The role of the {@code Environment} object with relation to profiles is\n * in determining which profiles (if any) are currently {@linkplain #getActiveProfiles\n * active}, and which profiles (if any) should be {@linkplain #getDefaultProfiles active\n * by default}.\n *\n * <p><em>Properties</em> play an important role in almost all applications, and may\n * originate from a variety of sources: properties files, JVM system properties, system\n * environment variables, JNDI, servlet context parameters, ad-hoc Properties objects,\n * Maps, and so on. The role of the {@code Environment} object with relation to properties\n * is to provide the user with a convenient service interface for configuring property\n * sources and resolving properties from them.\n *\n * <p>Beans managed within an {@code ApplicationContext} may register to be {@link\n * org.springframework.context.EnvironmentAware EnvironmentAware} or {@code @Inject} the\n * {@code Environment} in order to query profile state or resolve properties directly.\n *\n * <p>In most cases, however, application-level beans should not need to interact with the\n * {@code Environment} directly but instead may request to have {@code ${...}} property\n * values replaced by a property placeholder configurer such as\n * {@link org.springframework.context.support.PropertySourcesPlaceholderConfigurer\n * PropertySourcesPlaceholderConfigurer}, which itself is {@code EnvironmentAware} and\n * registered by default when using {@code <context:property-placeholder/>}.\n *\n * <p>Configuration of the {@code Environment} object must be done through the\n * {@code ConfigurableEnvironment} interface, returned from all\n * {@code AbstractApplicationContext} subclass {@code getEnvironment()} methods. See\n * {@link ConfigurableEnvironment} Javadoc for usage examples demonstrating manipulation\n * of property sources prior to application context {@code refresh()}.\n *\n * @author Chris Beams\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 3.1\n * @see PropertyResolver\n * @see EnvironmentCapable\n * @see ConfigurableEnvironment\n * @see AbstractEnvironment\n * @see StandardEnvironment\n * @see org.springframework.context.EnvironmentAware\n * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment\n * @see org.springframework.context.ConfigurableApplicationContext#setEnvironment\n * @see org.springframework.context.support.AbstractApplicationContext#createEnvironment\n */\npublic interface Environment extends PropertyResolver {\n\n\t/**\n\t * Return the set of profiles explicitly made active for this environment. Profiles\n\t * are used for creating logical groupings of bean definitions to be registered\n\t * conditionally, for example based on deployment environment. Profiles can be\n\t * activated by setting {@linkplain AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME\n\t * \"spring.profiles.active\"} as a system property or by calling\n\t * {@link ConfigurableEnvironment#setActiveProfiles(String...)}.\n\t * <p>If no profiles have explicitly been specified as active, then any\n\t * {@linkplain #getDefaultProfiles() default profiles} will automatically be activated.\n\t * @see #getDefaultProfiles\n\t * @see ConfigurableEnvironment#setActiveProfiles\n\t * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME\n\t */\n\tString[] getActiveProfiles();\n\n\t/**\n\t * Return the set of profiles to be active by default when no active profiles have\n\t * been set explicitly.\n\t * @see #getActiveProfiles\n\t * @see ConfigurableEnvironment#setDefaultProfiles\n\t * @see AbstractEnvironment#DEFAULT_PROFILES_PROPERTY_NAME\n\t */\n\tString[] getDefaultProfiles();\n\n\t/**\n\t * Determine whether one of the given profile expressions matches the\n\t * {@linkplain #getActiveProfiles() active profiles} &mdash; or in the case\n\t * of no explicit active profiles, whether one of the given profile expressions\n\t * matches the {@linkplain #getDefaultProfiles() default profiles}.\n\t * <p>Profile expressions allow for complex, boolean profile logic to be\n\t * expressed &mdash; for example {@code \"p1 & p2\"}, {@code \"(p1 & p2) | p3\"},\n\t * etc. See {@link Profiles#of(String...)} for details on the supported\n\t * expression syntax.\n\t * <p>This method is a convenient shortcut for\n\t * {@code env.acceptsProfiles(Profiles.of(profileExpressions))}.\n\t * @since 5.3.28\n\t * @see Profiles#of(String...)\n\t * @see #acceptsProfiles(Profiles)\n\t */\n\tdefault boolean matchesProfiles(String... profileExpressions) {\n\t\treturn acceptsProfiles(Profiles.of(profileExpressions));\n\t}\n\n\t/**\n\t * Determine whether one or more of the given profiles is active &mdash; or\n\t * in the case of no explicit {@linkplain #getActiveProfiles() active profiles},\n\t * whether one or more of the given profiles is included in the set of\n\t * {@linkplain #getDefaultProfiles() default profiles}.\n\t * <p>If a profile begins with '!' the logic is inverted, meaning this method\n\t * will return {@code true} if the given profile is <em>not</em> active. For\n\t * example, {@code env.acceptsProfiles(\"p1\", \"!p2\")} will return {@code true}\n\t * if profile 'p1' is active or 'p2' is not active.\n\t * @throws IllegalArgumentException if called with a {@code null} array, an\n\t * empty array, zero arguments or if any profile is {@code null}, empty, or\n\t * whitespace only\n\t * @see #getActiveProfiles\n\t * @see #getDefaultProfiles\n\t * @see #matchesProfiles(String...)\n\t * @see #acceptsProfiles(Profiles)\n\t * @deprecated as of 5.1 in favor of {@link #acceptsProfiles(Profiles)} or\n\t * {@link #matchesProfiles(String...)}\n\t */\n\t@Deprecated\n\tboolean acceptsProfiles(String... profiles);\n\n\t/**\n\t * Determine whether the given {@link Profiles} predicate matches the\n\t * {@linkplain #getActiveProfiles() active profiles} &mdash; or in the case\n\t * of no explicit active profiles, whether the given {@code Profiles} predicate\n\t * matches the {@linkplain #getDefaultProfiles() default profiles}.\n\t * <p>If you wish provide profile expressions directly as strings, use\n\t * {@link #matchesProfiles(String...)} instead.\n\t * @since 5.1\n\t * @see #matchesProfiles(String...)\n\t * @see Profiles#of(String...)\n\t */\n\tboolean acceptsProfiles(Profiles profiles);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.Environment#getActiveProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of profiles explicitly made active for this environment. Profiles\r\n * are used for creating logical groupings of bean definitions to be registered\r\n * conditionally, for example based on deployment environment. Profiles can be\r\n * activated by setting {@linkplain AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME\r\n * \"spring.profiles.active\"} as a system property or by calling\r\n * {@link ConfigurableEnvironment#setActiveProfiles(String...)}.\r\n * <p>If no profiles have explicitly been specified as active, then any\r\n * {@linkplain #getDefaultProfiles() default profiles} will automatically be activated.\r\n * @see #getDefaultProfiles\r\n * @see ConfigurableEnvironment#setActiveProfiles\r\n * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME\r\n */\r\nString[] getActiveProfiles();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Environment#getActiveProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Environment#getDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of profiles to be active by default when no active profiles have\r\n * been set explicitly.\r\n * @see #getActiveProfiles\r\n * @see ConfigurableEnvironment#setDefaultProfiles\r\n * @see AbstractEnvironment#DEFAULT_PROFILES_PROPERTY_NAME\r\n */\r\nString[] getDefaultProfiles();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Environment#getDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Environment#matchesProfiles(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether one of the given profile expressions matches the\r\n * {@linkplain #getActiveProfiles() active profiles} &mdash; or in the case\r\n * of no explicit active profiles, whether one of the given profile expressions\r\n * matches the {@linkplain #getDefaultProfiles() default profiles}.\r\n * <p>Profile expressions allow for complex, boolean profile logic to be\r\n * expressed &mdash; for example {@code \"p1 & p2\"}, {@code \"(p1 & p2) | p3\"},\r\n * etc. See {@link Profiles#of(String...)} for details on the supported\r\n * expression syntax.\r\n * <p>This method is a convenient shortcut for\r\n * {@code env.acceptsProfiles(Profiles.of(profileExpressions))}.\r\n * @since 5.3.28\r\n * @see Profiles#of(String...)\r\n * @see #acceptsProfiles(Profiles)\r\n */\r\ndefault boolean matchesProfiles(String... profileExpressions) {\r\n    return acceptsProfiles(Profiles.of(profileExpressions));\r\n}",
    "tailType": "method_code"
  }
]