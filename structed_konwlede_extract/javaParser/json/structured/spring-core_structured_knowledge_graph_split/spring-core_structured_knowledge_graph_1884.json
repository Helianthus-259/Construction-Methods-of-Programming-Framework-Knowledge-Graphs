[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToPrimitiveFloatArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToPrimitiveFloatArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToByteWrapperArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertPrimitiveByteArrayToByteWrapperArray() {\r\n    byte[] byteArray = { 1, 2, 3 };\r\n    Byte[] converted = conversionService.convert(byteArray, Byte[].class);\r\n    assertThat(converted).isEqualTo(new Byte[] { 1, 2, 3 });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToByteWrapperArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToByteWrapperArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToPrimitiveByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-14200, SPR-9566\r\n@Test\r\nvoid convertPrimitiveByteArrayToPrimitiveByteArray() {\r\n    byte[] byteArray = new byte[] { 1, 2, 3 };\r\n    byte[] result = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(result).isSameAs(byteArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToPrimitiveByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertPrimitiveByteArrayToPrimitiveByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-14200, SPR-9566\r\n@Test\r\nvoid convertIntArrayToIntArray() {\r\n    int[] intArray = new int[] { 1, 2, 3 };\r\n    int[] result = conversionService.convert(intArray, int[].class);\r\n    assertThat(result).isSameAs(intArray);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfNonStringifiable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertListOfNonStringifiable() {\r\n    List<Object> list = List.of(new TestEntity(1L), new TestEntity(2L));\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    try {\r\n        conversionService.convert(list, String.class);\r\n    } catch (ConversionFailedException ex) {\r\n        assertThat(ex.getMessage()).contains(list.getClass().getName());\r\n        assertThat(ex.getCause()).isInstanceOf(ConverterNotFoundException.class);\r\n        assertThat(ex.getCause().getMessage()).contains(TestEntity.class.getName());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfNonStringifiable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfNonStringifiable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfStringToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertListOfStringToString() {\r\n    List<String> list = List.of(\"Foo\", \"Bar\");\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfStringToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfStringToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfListToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertListOfListToString() {\r\n    List<String> list1 = List.of(\"Foo\", \"Bar\");\r\n    List<String> list2 = List.of(\"Baz\", \"Boop\");\r\n    List<List<String>> list = List.of(list1, list2);\r\n    assertThat(conversionService.canConvert(list.getClass(), String.class)).isTrue();\r\n    String result = conversionService.convert(list, String.class);\r\n    assertThat(result).isEqualTo(\"Foo,Bar,Baz,Boop\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfListToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertListOfListToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]