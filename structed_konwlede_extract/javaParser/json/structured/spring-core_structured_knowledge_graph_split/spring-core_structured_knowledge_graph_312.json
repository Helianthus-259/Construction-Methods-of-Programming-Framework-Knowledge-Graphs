[
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.EscapedTests#parser",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.EscapedTests#parser",
    "headType": "field",
    "relation": "haveType",
    "tail": "PlaceholderParser",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorInNestedPlaceholder(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest(name = \"{0} -> {1}\")\r\n@MethodSource(\"escapedInNestedPlaceholders\")\r\nvoid escapedSeparatorInNestedPlaceholder(String text, String expected) {\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"app.environment\", \"qa\");\r\n    properties.setProperty(\"app.service\", \"protocol\");\r\n    properties.setProperty(\"protocol://host/qa/name\", \"protocol://example.com/qa/name\");\r\n    properties.setProperty(\"service/host/qa/name\", \"https://example.com/qa/name\");\r\n    properties.setProperty(\"service/host/qa/name:value\", \"https://example.com/qa/name-value\");\r\n    assertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedSeparatorInNestedPlaceholder(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorInNestedPlaceholder(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorInNestedPlaceholder(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedInNestedPlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> escapedInNestedPlaceholders() {\r\n    return Stream.of(Arguments.of(\"${protocol\\\\://host/${app.environment}/name}\", \"protocol://example.com/qa/name\"), Arguments.of(\"${${app.service}\\\\://host/${app.environment}/name}\", \"protocol://example.com/qa/name\"), Arguments.of(\"${service/host/${app.environment}/name:\\\\value}\", \"https://example.com/qa/name\"), Arguments.of(\"${service/host/${name\\\\:value}/}\", \"${service/host/${name:value}/}\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedInNestedPlaceholders()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedPlaceholderIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest(name = \"{0} -> {1}\")\r\n@MethodSource(\"escapedPlaceholders\")\r\nvoid escapedPlaceholderIsNotReplaced(String text, String expected) {\r\n    PlaceholderResolver resolver = mockPlaceholderResolver(\"firstName\", \"John\", \"nested0\", \"first\", \"nested1\", \"Name\", \"${test}\", \"John\", \"p1\", \"v1\", \"p2\", \"\\\\${p1:default}\", \"p3\", \"${p2}\", \"p4\", \"adc${p0:\\\\${p1}}\", \"p5\", \"adc${\\\\${p0}:${p1}}\", \"p6\", \"adc${p0:def\\\\${p1}}\", \"p7\", \"adc\\\\${\");\r\n    assertThat(this.parser.replacePlaceholders(text, resolver)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedPlaceholderIsNotReplaced(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedPlaceholderIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedPlaceholderIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedPlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> escapedPlaceholders() {\r\n    return Stream.of(Arguments.of(\"\\\\${firstName}\", \"${firstName}\"), Arguments.of(\"First name: \\\\${firstName}\", \"First name: ${firstName}\"), Arguments.of(\"$\\\\${firstName}\", \"$${firstName}\"), Arguments.of(\"\\\\}${firstName}\", \"\\\\}John\"), Arguments.of(\"${\\\\${test}}\", \"John\"), Arguments.of(\"${p2}\", \"${p1:default}\"), Arguments.of(\"${p3}\", \"${p1:default}\"), Arguments.of(\"${p4}\", \"adc${p1}\"), Arguments.of(\"${p5}\", \"adcv1\"), Arguments.of(\"${p6}\", \"adcdef${p1}\"), Arguments.of(\"${p7}\", \"adc\\\\${\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedPlaceholders()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest(name = \"{0} -> {1}\")\r\n@MethodSource(\"escapedSeparators\")\r\nvoid escapedSeparatorIsNotReplaced(String text, String expected) {\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"first:Name\", \"John\");\r\n    properties.setProperty(\"nested0\", \"first\");\r\n    properties.setProperty(\"nested1\", \"Name\");\r\n    assertThat(this.parser.replacePlaceholders(text, properties::getProperty)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedSeparatorIsNotReplaced(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparatorIsNotReplaced(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.EscapedTests#escapedSeparators()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> escapedSeparators() {\r\n    return Stream.of(Arguments.of(\"${first\\\\:Name}\", \"John\"), Arguments.of(\"${last\\\\:Name}\", \"${last:Name}\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.EscapedTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.EscapedTests#escapedSeparators()",
    "tailType": "method"
  }
]