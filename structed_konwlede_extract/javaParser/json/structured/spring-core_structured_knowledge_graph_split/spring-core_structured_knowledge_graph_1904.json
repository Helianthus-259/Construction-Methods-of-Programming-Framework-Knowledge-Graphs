[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convert()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convert()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNullSource() {\r\n    assertThat(conversionService.convert(null, Integer.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTarget()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNullSourcePrimitiveTarget() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(null, int.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTarget()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTargetTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNullSourcePrimitiveTargetTypeDescriptor() {\r\n    assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> conversionService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(int.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTargetTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNullSourcePrimitiveTargetTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNotNullSourceNullSourceTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNotNullSourceNullSourceTypeDescriptor() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.convert(\"3\", null, TypeDescriptor.valueOf(int.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNotNullSourceNullSourceTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertNotNullSourceNullSourceTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertAssignableSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertAssignableSource() {\r\n    assertThat(conversionService.convert(false, boolean.class)).isFalse();\r\n    assertThat(conversionService.convert(false, Boolean.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertAssignableSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertAssignableSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#converterNotFound()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid converterNotFound() {\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> conversionService.convert(\"3\", Integer.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#converterNotFound()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#converterNotFound()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]