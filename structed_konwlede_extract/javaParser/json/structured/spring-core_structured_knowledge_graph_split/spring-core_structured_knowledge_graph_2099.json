[
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericOfGenericWithAs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid genericOfGenericWithAs() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringListList\")).asCollection();\r\n    assertThat(type.toString()).isEqualTo(\"java.util.Collection<java.util.List<java.lang.String>>\");\r\n    assertThat(type.getGeneric().asCollection().toString()).isEqualTo(\"java.util.Collection<java.lang.String>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#genericOfGenericWithAs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericOfGenericWithAs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOfGenericByIndexes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericOfGenericByIndexes() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringListList\"));\r\n    assertThat(type.getGeneric(0, 0).getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericOfGenericByIndexes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOfGenericByIndexes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOutOfBounds()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericOutOfBounds() {\r\n    ResolvableType type = ResolvableType.forClass(List.class, ExtendsList.class);\r\n    assertThat(type.getGeneric(0)).isNotEqualTo(ResolvableType.NONE);\r\n    assertThat(type.getGeneric(1)).isEqualTo(ResolvableType.NONE);\r\n    assertThat(type.getGeneric(0, 1)).isEqualTo(ResolvableType.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericOutOfBounds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericOutOfBounds()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasGenerics() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class);\r\n    assertThat(type.hasGenerics()).isFalse();\r\n    assertThat(type.asCollection().hasGenerics()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hasGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hasGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericsFromParameterizedType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericsFromParameterizedType() {\r\n    ResolvableType type = ResolvableType.forClass(List.class, ExtendsList.class);\r\n    ResolvableType[] generics = type.getGenerics();\r\n    assertThat(generics).hasSize(1);\r\n    assertThat(generics[0].resolve()).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericsFromParameterizedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericsFromParameterizedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericsFromClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGenericsFromClass() {\r\n    ResolvableType type = ResolvableType.forClass(List.class);\r\n    ResolvableType[] generics = type.getGenerics();\r\n    assertThat(generics).hasSize(1);\r\n    assertThat(generics[0].getType().toString()).isEqualTo(\"E\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getGenericsFromClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getGenericsFromClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#noGetGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noGetGenerics() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class);\r\n    ResolvableType[] generics = type.getGenerics();\r\n    assertThat(generics).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#noGetGenerics()",
    "tailType": "method"
  }
]