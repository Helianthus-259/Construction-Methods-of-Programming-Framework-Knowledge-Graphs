[
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link PropertySourceProcessor}.\n *\n * @author Sam Brannen\n * @since 6.0.12\n */\nclass PropertySourceProcessorTests {\n\n\tprivate static final String PROPS_FILE = ClassUtils.classPackageAsResourcePath(PropertySourceProcessorTests.class) + \"/test.properties\";\n\n\tprivate final StandardEnvironment environment = new StandardEnvironment();\n\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\tprivate final PropertySourceProcessor processor = new PropertySourceProcessor(environment, resourceLoader);\n\n\n\t@BeforeEach\n\tvoid checkInitialPropertySources() {\n\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t}\n\n\t@Test\n\tvoid processorRegistersPropertySource() throws Exception {\n\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(\n\t\t\t\tList.of(PROPS_FILE), false, null, DefaultPropertySourceFactory.class, null);\n\t\tprocessor.processPropertySource(descriptor);\n\t\tassertThat(environment.getPropertySources()).hasSize(3);\n\t\tassertThat(environment.getProperty(\"enigma\")).isEqualTo(\"42\");\n\t}\n\n\n\t@Nested\n\tclass FailOnErrorTests {\n\n\t\t@Test\n\t\tvoid processorFailsOnPlaceholderResolutionException() {\n\t\t\tassertProcessorFailsOnError(PlaceholderResolutionExceptionPropertySourceFactory.class, PlaceholderResolutionException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorFailsOnFileNotFoundException() {\n\t\t\tassertProcessorFailsOnError(FileNotFoundExceptionPropertySourceFactory.class, FileNotFoundException.class);\n\t\t}\n\n\t\tprivate void assertProcessorFailsOnError(\n\t\t\t\tClass<? extends PropertySourceFactory> factoryClass, Class<? extends Throwable> exceptionType) {\n\n\t\t\tPropertySourceDescriptor descriptor =\n\t\t\t\t\tnew PropertySourceDescriptor(List.of(PROPS_FILE), false, null, factoryClass, null);\n\t\t\tassertThatExceptionOfType(exceptionType).isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass IgnoreResourceNotFoundTests {\n\n\t\t@Test\n\t\tvoid processorIgnoresIllegalArgumentException() {\n\t\t\tassertProcessorIgnoresFailure(PlaceholderResolutionExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresFileNotFoundException() {\n\t\t\tassertProcessorIgnoresFailure(FileNotFoundExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresUnknownHostException() {\n\t\t\tassertProcessorIgnoresFailure(UnknownHostExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSocketException() {\n\t\t\tassertProcessorIgnoresFailure(SocketExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInIllegalStateException() {\n\t\t\tassertProcessorIgnoresFailure(WrappedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInUncheckedIOException() {\n\t\t\tassertProcessorIgnoresFailure(UncheckedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\tprivate void assertProcessorIgnoresFailure(Class<? extends PropertySourceFactory> factoryClass) {\n\t\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(List.of(PROPS_FILE), true, null, factoryClass, null);\n\t\t\tassertThatNoException().isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\tprivate static class PlaceholderResolutionExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow mock(PlaceholderResolutionException.class);\n\t\t}\n\t}\n\n\tprivate static class FileNotFoundExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new FileNotFoundException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class UnknownHostExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new UnknownHostException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class SocketExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new SocketException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class WrappedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new IllegalStateException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n\tprivate static class UncheckedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new UncheckedIOException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\r\n    throw new SocketException(\"bogus\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SocketExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link PropertySourceProcessor}.\n *\n * @author Sam Brannen\n * @since 6.0.12\n */\nclass PropertySourceProcessorTests {\n\n\tprivate static final String PROPS_FILE = ClassUtils.classPackageAsResourcePath(PropertySourceProcessorTests.class) + \"/test.properties\";\n\n\tprivate final StandardEnvironment environment = new StandardEnvironment();\n\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\tprivate final PropertySourceProcessor processor = new PropertySourceProcessor(environment, resourceLoader);\n\n\n\t@BeforeEach\n\tvoid checkInitialPropertySources() {\n\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t}\n\n\t@Test\n\tvoid processorRegistersPropertySource() throws Exception {\n\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(\n\t\t\t\tList.of(PROPS_FILE), false, null, DefaultPropertySourceFactory.class, null);\n\t\tprocessor.processPropertySource(descriptor);\n\t\tassertThat(environment.getPropertySources()).hasSize(3);\n\t\tassertThat(environment.getProperty(\"enigma\")).isEqualTo(\"42\");\n\t}\n\n\n\t@Nested\n\tclass FailOnErrorTests {\n\n\t\t@Test\n\t\tvoid processorFailsOnPlaceholderResolutionException() {\n\t\t\tassertProcessorFailsOnError(PlaceholderResolutionExceptionPropertySourceFactory.class, PlaceholderResolutionException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorFailsOnFileNotFoundException() {\n\t\t\tassertProcessorFailsOnError(FileNotFoundExceptionPropertySourceFactory.class, FileNotFoundException.class);\n\t\t}\n\n\t\tprivate void assertProcessorFailsOnError(\n\t\t\t\tClass<? extends PropertySourceFactory> factoryClass, Class<? extends Throwable> exceptionType) {\n\n\t\t\tPropertySourceDescriptor descriptor =\n\t\t\t\t\tnew PropertySourceDescriptor(List.of(PROPS_FILE), false, null, factoryClass, null);\n\t\t\tassertThatExceptionOfType(exceptionType).isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass IgnoreResourceNotFoundTests {\n\n\t\t@Test\n\t\tvoid processorIgnoresIllegalArgumentException() {\n\t\t\tassertProcessorIgnoresFailure(PlaceholderResolutionExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresFileNotFoundException() {\n\t\t\tassertProcessorIgnoresFailure(FileNotFoundExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresUnknownHostException() {\n\t\t\tassertProcessorIgnoresFailure(UnknownHostExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSocketException() {\n\t\t\tassertProcessorIgnoresFailure(SocketExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInIllegalStateException() {\n\t\t\tassertProcessorIgnoresFailure(WrappedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInUncheckedIOException() {\n\t\t\tassertProcessorIgnoresFailure(UncheckedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\tprivate void assertProcessorIgnoresFailure(Class<? extends PropertySourceFactory> factoryClass) {\n\t\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(List.of(PROPS_FILE), true, null, factoryClass, null);\n\t\t\tassertThatNoException().isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\tprivate static class PlaceholderResolutionExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow mock(PlaceholderResolutionException.class);\n\t\t}\n\t}\n\n\tprivate static class FileNotFoundExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new FileNotFoundException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class UnknownHostExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new UnknownHostException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class SocketExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new SocketException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class WrappedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new IllegalStateException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n\tprivate static class UncheckedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new UncheckedIOException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\r\n    throw new IllegalStateException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.WrappedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link PropertySourceProcessor}.\n *\n * @author Sam Brannen\n * @since 6.0.12\n */\nclass PropertySourceProcessorTests {\n\n\tprivate static final String PROPS_FILE = ClassUtils.classPackageAsResourcePath(PropertySourceProcessorTests.class) + \"/test.properties\";\n\n\tprivate final StandardEnvironment environment = new StandardEnvironment();\n\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\tprivate final PropertySourceProcessor processor = new PropertySourceProcessor(environment, resourceLoader);\n\n\n\t@BeforeEach\n\tvoid checkInitialPropertySources() {\n\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t}\n\n\t@Test\n\tvoid processorRegistersPropertySource() throws Exception {\n\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(\n\t\t\t\tList.of(PROPS_FILE), false, null, DefaultPropertySourceFactory.class, null);\n\t\tprocessor.processPropertySource(descriptor);\n\t\tassertThat(environment.getPropertySources()).hasSize(3);\n\t\tassertThat(environment.getProperty(\"enigma\")).isEqualTo(\"42\");\n\t}\n\n\n\t@Nested\n\tclass FailOnErrorTests {\n\n\t\t@Test\n\t\tvoid processorFailsOnPlaceholderResolutionException() {\n\t\t\tassertProcessorFailsOnError(PlaceholderResolutionExceptionPropertySourceFactory.class, PlaceholderResolutionException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorFailsOnFileNotFoundException() {\n\t\t\tassertProcessorFailsOnError(FileNotFoundExceptionPropertySourceFactory.class, FileNotFoundException.class);\n\t\t}\n\n\t\tprivate void assertProcessorFailsOnError(\n\t\t\t\tClass<? extends PropertySourceFactory> factoryClass, Class<? extends Throwable> exceptionType) {\n\n\t\t\tPropertySourceDescriptor descriptor =\n\t\t\t\t\tnew PropertySourceDescriptor(List.of(PROPS_FILE), false, null, factoryClass, null);\n\t\t\tassertThatExceptionOfType(exceptionType).isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass IgnoreResourceNotFoundTests {\n\n\t\t@Test\n\t\tvoid processorIgnoresIllegalArgumentException() {\n\t\t\tassertProcessorIgnoresFailure(PlaceholderResolutionExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresFileNotFoundException() {\n\t\t\tassertProcessorIgnoresFailure(FileNotFoundExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresUnknownHostException() {\n\t\t\tassertProcessorIgnoresFailure(UnknownHostExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSocketException() {\n\t\t\tassertProcessorIgnoresFailure(SocketExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInIllegalStateException() {\n\t\t\tassertProcessorIgnoresFailure(WrappedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInUncheckedIOException() {\n\t\t\tassertProcessorIgnoresFailure(UncheckedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\tprivate void assertProcessorIgnoresFailure(Class<? extends PropertySourceFactory> factoryClass) {\n\t\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(List.of(PROPS_FILE), true, null, factoryClass, null);\n\t\t\tassertThatNoException().isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\tprivate static class PlaceholderResolutionExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow mock(PlaceholderResolutionException.class);\n\t\t}\n\t}\n\n\tprivate static class FileNotFoundExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new FileNotFoundException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class UnknownHostExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new UnknownHostException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class SocketExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new SocketException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class WrappedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new IllegalStateException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n\tprivate static class UncheckedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new UncheckedIOException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\r\n    throw new UncheckedIOException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.UncheckedIOExceptionPropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.beans.PropertyEditor;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.FileUrlResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests for {@link ResourceArrayPropertyEditor}.\n *\n * @author Dave Syer\n * @author Juergen Hoeller\n * @author Yanming Zhou\n * @author Stephane Nicoll\n */\nclass ResourceArrayPropertyEditorTests {\n\n\t@Test\n\tvoid vanillaResource() {\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor();\n\t\teditor.setAsText(\"classpath:org/springframework/core/io/support/ResourceArrayPropertyEditor.class\");\n\t\tResource[] resources = (Resource[]) editor.getValue();\n\t\tassertThat(resources).isNotNull();\n\t\tassertThat(resources[0].exists()).isTrue();\n\t}\n\n\t@Test\n\tvoid patternResource() {\n\t\t// N.B. this will sometimes fail if you use classpath: instead of classpath*:.\n\t\t// The result depends on the classpath - if test-classes are segregated from classes\n\t\t// and they come first on the classpath (like in Maven) then it breaks, if classes\n\t\t// comes first (like in Spring Build) then it is OK.\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor();\n\t\teditor.setAsText(\"classpath*:org/springframework/core/io/support/Resource*Editor.class\");\n\t\tResource[] resources = (Resource[]) editor.getValue();\n\t\tassertThat(resources).isNotNull();\n\t\tassertThat(resources[0].exists()).isTrue();\n\t}\n\n\t@Test\n\tvoid systemPropertyReplacement() {\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor();\n\t\tSystem.setProperty(\"test.prop\", \"foo\");\n\t\ttry {\n\t\t\teditor.setAsText(\"${test.prop}\");\n\t\t\tResource[] resources = (Resource[]) editor.getValue();\n\t\t\tassertThat(resources[0].getFilename()).isEqualTo(\"foo\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid strictSystemPropertyReplacementWithUnresolvablePlaceholder() {\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor(\n\t\t\t\tnew PathMatchingResourcePatternResolver(), new StandardEnvironment(),\n\t\t\t\tfalse);\n\t\tSystem.setProperty(\"test.prop\", \"foo\");\n\t\ttry {\n\t\t\tassertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() ->\n\t\t\t\t\teditor.setAsText(\"${test.prop}-${bar}\"));\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid commaDelimitedResourcesWithSingleResource() {\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor();\n\t\teditor.setAsText(\"classpath:org/springframework/core/io/support/ResourceArrayPropertyEditor.class,file:/test.txt\");\n\t\tResource[] resources = (Resource[]) editor.getValue();\n\t\tassertThat(resources).isNotNull();\n\t\tassertThat(resources[0]).isInstanceOfSatisfying(ClassPathResource.class,\n\t\t\t\tresource -> assertThat(resource.exists()).isTrue());\n\t\tassertThat(resources[1]).isInstanceOfSatisfying(FileUrlResource.class,\n\t\t\t\tresource -> assertThat(resource.getFilename()).isEqualTo(\"test.txt\"));\n\t}\n\n\t@Test\n\tvoid commaDelimitedResourcesWithMultipleResources() {\n\t\tPropertyEditor editor = new ResourceArrayPropertyEditor();\n\t\teditor.setAsText(\"file:/test.txt, classpath:org/springframework/core/io/support/test-resources/*.txt\");\n\t\tResource[] resources = (Resource[]) editor.getValue();\n\t\tassertThat(resources).isNotNull();\n\t\tassertThat(resources[0]).isInstanceOfSatisfying(FileUrlResource.class,\n\t\t\t\tresource -> assertThat(resource.getFilename()).isEqualTo(\"test.txt\"));\n\t\tassertThat(resources).anySatisfy(candidate ->\n\t\t\t\tassertThat(candidate.getFilename()).isEqualTo(\"resource1.txt\"));\n\t\tassertThat(resources).anySatisfy(candidate ->\n\t\t\t\tassertThat(candidate.getFilename()).isEqualTo(\"resource2.txt\"));\n\t\tassertThat(resources).hasSize(3);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#vanillaResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid vanillaResource() {\r\n    PropertyEditor editor = new ResourceArrayPropertyEditor();\r\n    editor.setAsText(\"classpath:org/springframework/core/io/support/ResourceArrayPropertyEditor.class\");\r\n    Resource[] resources = (Resource[]) editor.getValue();\r\n    assertThat(resources).isNotNull();\r\n    assertThat(resources[0].exists()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditorTests#vanillaResource()",
    "tailType": "method"
  }
]