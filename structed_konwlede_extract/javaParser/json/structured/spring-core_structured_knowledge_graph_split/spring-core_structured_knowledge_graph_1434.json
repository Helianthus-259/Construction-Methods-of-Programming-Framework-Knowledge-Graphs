[
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#closed",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object next() {\r\n    try {\r\n        return nextEvent();\r\n    } catch (XMLStreamException ex) {\r\n        throw new NoSuchElementException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLEventReader#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#remove()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void remove() {\r\n    throw new UnsupportedOperationException(\"remove not supported on \" + ClassUtils.getShortName(getClass()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLEventReader#remove()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation throws an {@code IllegalArgumentException} for any property.\r\n * @throws IllegalArgumentException when called\r\n */\r\n@Override\r\npublic Object getProperty(String name) throws IllegalArgumentException {\r\n    throw new IllegalArgumentException(\"Property not supported: [\" + name + \"]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLEventReader#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() {\r\n    this.closed = true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLEventReader#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader#checkIfClosed()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check if the reader is closed, and throws a {@code XMLStreamException} if so.\r\n * @throws XMLStreamException if the reader is closed\r\n * @see #close()\r\n */\r\nprotected void checkIfClosed() throws XMLStreamException {\r\n    if (this.closed) {\r\n        throw new XMLStreamException(\"XMLEventReader has been closed\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLEventReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLEventReader#checkIfClosed()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.AbstractXMLReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.DTDHandler;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXNotRecognizedException;\nimport org.xml.sax.SAXNotSupportedException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.ext.LexicalHandler;\n\n/**\n * Abstract base class for SAX {@code XMLReader} implementations.\n * Contains properties as defined in {@link XMLReader}, and does not recognize any features.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n * @see #setContentHandler(org.xml.sax.ContentHandler)\n * @see #setDTDHandler(org.xml.sax.DTDHandler)\n * @see #setEntityResolver(org.xml.sax.EntityResolver)\n * @see #setErrorHandler(org.xml.sax.ErrorHandler)\n */\nabstract class AbstractXMLReader implements XMLReader {\n\n\tprivate @Nullable DTDHandler dtdHandler;\n\n\tprivate @Nullable ContentHandler contentHandler;\n\n\tprivate @Nullable EntityResolver entityResolver;\n\n\tprivate @Nullable ErrorHandler errorHandler;\n\n\tprivate @Nullable LexicalHandler lexicalHandler;\n\n\n\t@Override\n\tpublic void setContentHandler(@Nullable ContentHandler contentHandler) {\n\t\tthis.contentHandler = contentHandler;\n\t}\n\n\t@Override\n\tpublic @Nullable ContentHandler getContentHandler() {\n\t\treturn this.contentHandler;\n\t}\n\n\t@Override\n\tpublic void setDTDHandler(@Nullable DTDHandler dtdHandler) {\n\t\tthis.dtdHandler = dtdHandler;\n\t}\n\n\t@Override\n\tpublic @Nullable DTDHandler getDTDHandler() {\n\t\treturn this.dtdHandler;\n\t}\n\n\t@Override\n\tpublic void setEntityResolver(@Nullable EntityResolver entityResolver) {\n\t\tthis.entityResolver = entityResolver;\n\t}\n\n\t@Override\n\tpublic @Nullable EntityResolver getEntityResolver() {\n\t\treturn this.entityResolver;\n\t}\n\n\t@Override\n\tpublic void setErrorHandler(@Nullable ErrorHandler errorHandler) {\n\t\tthis.errorHandler = errorHandler;\n\t}\n\n\t@Override\n\tpublic @Nullable ErrorHandler getErrorHandler() {\n\t\treturn this.errorHandler;\n\t}\n\n\tprotected @Nullable LexicalHandler getLexicalHandler() {\n\t\treturn this.lexicalHandler;\n\t}\n\n\n\t/**\n\t * This implementation throws a {@code SAXNotRecognizedException} exception\n\t * for any feature outside the \"http://xml.org/sax/features/\" namespace\n\t * and returns {@code false} for any feature within.\n\t */\n\t@Override\n\tpublic boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\tif (name.startsWith(\"http://xml.org/sax/features/\")) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tthrow new SAXNotRecognizedException(name);\n\t\t}\n\t}\n\n\t/**\n\t * This implementation throws a {@code SAXNotRecognizedException} exception\n\t * for any feature outside the \"http://xml.org/sax/features/\" namespace\n\t * and accepts a {@code false} value for any feature within.\n\t */\n\t@Override\n\tpublic void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\tif (name.startsWith(\"http://xml.org/sax/features/\")) {\n\t\t\tif (value) {\n\t\t\t\tthrow new SAXNotSupportedException(name);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new SAXNotRecognizedException(name);\n\t\t}\n\t}\n\n\t/**\n\t * Throws a {@code SAXNotRecognizedException} exception when the given property does not signify a lexical\n\t * handler. The property name for a lexical handler is {@code http://xml.org/sax/properties/lexical-handler}.\n\t */\n\t@Override\n\tpublic @Nullable Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\tif (\"http://xml.org/sax/properties/lexical-handler\".equals(name)) {\n\t\t\treturn this.lexicalHandler;\n\t\t}\n\t\telse {\n\t\t\tthrow new SAXNotRecognizedException(name);\n\t\t}\n\t}\n\n\t/**\n\t * Throws a {@code SAXNotRecognizedException} exception when the given property does not signify a lexical\n\t * handler. The property name for a lexical handler is {@code http://xml.org/sax/properties/lexical-handler}.\n\t */\n\t@Override\n\tpublic void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException {\n\t\tif (\"http://xml.org/sax/properties/lexical-handler\".equals(name)) {\n\t\t\tthis.lexicalHandler = (LexicalHandler) value;\n\t\t}\n\t\telse {\n\t\t\tthrow new SAXNotRecognizedException(name);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.AbstractXMLReader#dtdHandler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#dtdHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "DTDHandler",
    "tailType": "type"
  }
]