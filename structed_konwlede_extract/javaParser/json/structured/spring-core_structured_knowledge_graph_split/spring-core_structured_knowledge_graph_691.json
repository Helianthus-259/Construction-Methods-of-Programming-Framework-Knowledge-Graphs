[
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.ClassTransformerChain",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic class ClassTransformerChain extends AbstractClassTransformer {\n    private ClassTransformer[] chain;\n\n    public ClassTransformerChain(ClassTransformer[] chain) {\n        this.chain = chain.clone();\n    }\n\n    @Override\n\tpublic void setTarget(ClassVisitor v) {\n        super.setTarget(chain[0]);\n        ClassVisitor next = v;\n        for (int i = chain.length - 1; i >= 0; i--) {\n            chain[i].setTarget(next);\n            next = chain[i];\n        }\n    }\n\n    @Override\n\tpublic MethodVisitor visitMethod(int access,\n                                     String name,\n                                     String desc,\n                                     String signature,\n                                     String[] exceptions) {\n        return cv.visitMethod(access, name, desc, signature, exceptions);\n    }\n\n    @Override\n\tpublic String toString() {\n\t\tStringBuilder sb = new StringBuilder();\n        sb.append(\"ClassTransformerChain{\");\n        for (int i = 0; i < chain.length; i++) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n            sb.append(chain[i].toString());\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassTransformerChain#chain",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#chain",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassTransformer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor v) {\r\n    super.setTarget(chain[0]);\r\n    ClassVisitor next = v;\r\n    for (int i = chain.length - 1; i >= 0; i--) {\r\n        chain[i].setTarget(next);\r\n        next = chain[i];\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return cv.visitMethod(access, name, desc, signature, exceptions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ClassTransformerChain{\");\r\n    for (int i = 0; i < chain.length; i++) {\r\n        if (i > 0) {\r\n            sb.append(\", \");\r\n        }\r\n        sb.append(chain[i].toString());\r\n    }\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerChain",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.ClassTransformerFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic interface ClassTransformerFactory {\n    ClassTransformer newInstance();\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "ClassTransformer newInstance();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassTransformerFactory#newInstance()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  }
]