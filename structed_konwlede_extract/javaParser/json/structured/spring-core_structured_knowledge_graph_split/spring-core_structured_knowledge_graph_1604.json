[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesInheritedFromBridgedMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Bridge/bridged method setup code copied from\r\n * {@link org.springframework.core.BridgeMethodResolverTests#withGenericParameter()}.\r\n * @since 4.2\r\n */\r\n@Test\r\nvoid findMergedAnnotationAttributesFromBridgeMethod() {\r\n    Method[] methods = StringGenericParameter.class.getMethods();\r\n    Method bridgeMethod = null;\r\n    Method bridgedMethod = null;\r\n    for (Method method : methods) {\r\n        if (\"getFor\".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {\r\n            if (method.getReturnType().equals(Object.class)) {\r\n                bridgeMethod = method;\r\n            } else {\r\n                bridgedMethod = method;\r\n            }\r\n        }\r\n    }\r\n    assertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\r\n    boolean condition = bridgedMethod != null && !bridgedMethod.isBridge();\r\n    assertThat(condition).isTrue();\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(bridgeMethod, Order.class);\r\n    assertThat(attributes).as(\"Should find @Order on StringGenericParameter.getFor() bridge method\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesFromBridgeMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig() {\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(MetaAndLocalTxConfigClass.class, Transactional.class);\r\n    assertThat(attributes).as(\"Should find @Transactional on MetaAndLocalTxConfigClass\").isNotNull();\r\n    assertThat(attributes.getString(\"qualifier\")).as(\"TX qualifier for MetaAndLocalTxConfigClass.\").isEqualTo(\"localTxMgr\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithMetaAndLocalTxConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation() {\r\n    String qualifier = \"aliasForQualifier\";\r\n    // 1) Find and merge AnnotationAttributes from the annotation hierarchy\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(AliasedTransactionalComponentClass.class, AliasedTransactional.class);\r\n    assertThat(attributes).as(\"@AliasedTransactional on AliasedTransactionalComponentClass.\").isNotNull();\r\n    // 2) Synthesize the AnnotationAttributes back into the target annotation\r\n    AliasedTransactional annotation = AnnotationUtils.synthesizeAnnotation(attributes, AliasedTransactional.class, AliasedTransactionalComponentClass.class);\r\n    assertThat(annotation).isNotNull();\r\n    // 3) Verify that the AnnotationAttributes and synthesized annotation are equivalent\r\n    assertThat(attributes.getString(\"value\")).as(\"TX value via attributes.\").isEqualTo(qualifier);\r\n    assertThat(annotation.value()).as(\"TX value via synthesized annotation.\").isEqualTo(qualifier);\r\n    assertThat(attributes.getString(\"qualifier\")).as(\"TX qualifier via attributes.\").isEqualTo(qualifier);\r\n    assertThat(annotation.qualifier()).as(\"TX qualifier via synthesized annotation.\").isEqualTo(qualifier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findAndSynthesizeAnnotationAttributesOnClassWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() {\r\n    AnnotationAttributes attributes = assertComponentScanAttributes(TestComponentScanClass.class, \"com.example.app.test\");\r\n    Filter[] excludeFilters = attributes.getAnnotationArray(\"excludeFilters\", Filter.class);\r\n    assertThat(excludeFilters).isNotNull();\r\n    List<String> patterns = stream(excludeFilters).map(Filter::pattern).collect(toList());\r\n    assertThat(patterns).isEqualTo(asList(\"*Test\", \"*Tests\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This test ensures that {@link AnnotationUtils#postProcessAnnotationAttributes}\r\n * uses {@code ObjectUtils.nullSafeEquals()} to check for equality between annotation\r\n * attributes since attributes may be arrays.\r\n */\r\n@Test\r\nvoid findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared() {\r\n    assertComponentScanAttributes(ComponentScanWithBasePackagesAndValueAliasClass.class, \"com.example.app.test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @since 5.2.1\r\n * @see <a href=\"https://github.com/spring-projects/spring-framework/issues/23767\">#23767</a>\r\n */\r\n@Test\r\nvoid findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation() throws Exception {\r\n    Method method = getClass().getDeclaredMethod(\"composedTransactionalMethod\");\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(method, AliasedTransactional.class);\r\n    assertThat(attributes).as(\"Should find @AliasedTransactional on \" + method).isNotNull();\r\n    assertThat(attributes.getString(\"value\")).as(\"TX qualifier for \" + method).isEqualTo(\"anotherTransactionManager\");\r\n    assertThat(attributes.getString(\"qualifier\")).as(\"TX qualifier for \" + method).isEqualTo(\"anotherTransactionManager\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnMethodWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @since 5.2.1\r\n * @see <a href=\"https://github.com/spring-projects/spring-framework/issues/23767\">#23767</a>\r\n */\r\n@Test\r\nvoid findMergedAnnotationOnMethodWithComposedMetaTransactionalAnnotation() throws Exception {\r\n    Method method = getClass().getDeclaredMethod(\"composedTransactionalMethod\");\r\n    AliasedTransactional annotation = findMergedAnnotation(method, AliasedTransactional.class);\r\n    assertThat(annotation).as(\"Should find @AliasedTransactional on \" + method).isNotNull();\r\n    assertThat(annotation.value()).as(\"TX qualifier for \" + method).isEqualTo(\"anotherTransactionManager\");\r\n    assertThat(annotation.qualifier()).as(\"TX qualifier for \" + method).isEqualTo(\"anotherTransactionManager\");\r\n}",
    "tailType": "method_code"
  }
]