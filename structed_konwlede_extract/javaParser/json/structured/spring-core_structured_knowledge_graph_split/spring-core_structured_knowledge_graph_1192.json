[
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ArrayVisitor#visit(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visit(String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnum(String name, String descriptor, String value) {\r\n    MergedAnnotationReadingVisitor.this.visitEnum(descriptor, value, this.elements::add);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ArrayVisitor#visitEnum(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitEnum(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic AnnotationVisitor visitAnnotation(String name, String descriptor) {\r\n    return MergedAnnotationReadingVisitor.this.visitAnnotation(descriptor, this.elements::add);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ArrayVisitor#visitAnnotation(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitAnnotation(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    Class<?> componentType = getComponentType();\r\n    Object[] array = (Object[]) Array.newInstance(componentType, this.elements.size());\r\n    this.consumer.accept(this.elements.toArray(array));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ArrayVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor#getComponentType()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<?> getComponentType() {\r\n    if (this.elements.isEmpty()) {\r\n        return Object.class;\r\n    }\r\n    Object firstElement = this.elements.get(0);\r\n    if (firstElement instanceof Enum<?> enumeration) {\r\n        return enumeration.getDeclaringClass();\r\n    }\r\n    return firstElement.getClass();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.ArrayVisitor#getComponentType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.ArrayVisitor",
    "headType": "class",
    "relation": "extend",
    "tail": "AnnotationVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.MetadataReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2009 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.core.type.ClassMetadata;\n\n/**\n * Simple facade for accessing class metadata,\n * as read by an ASM {@link org.springframework.asm.ClassReader}.\n *\n * @author Juergen Hoeller\n * @since 2.5\n */\npublic interface MetadataReader {\n\n\t/**\n\t * Return the resource reference for the class file.\n\t */\n\tResource getResource();\n\n\t/**\n\t * Read basic class metadata for the underlying class.\n\t */\n\tClassMetadata getClassMetadata();\n\n\t/**\n\t * Read full annotation metadata for the underlying class,\n\t * including metadata for annotated methods.\n\t */\n\tAnnotationMetadata getAnnotationMetadata();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader#getResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the resource reference for the class file.\r\n */\r\nResource getResource();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MetadataReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MetadataReader#getResource()",
    "tailType": "method"
  }
]