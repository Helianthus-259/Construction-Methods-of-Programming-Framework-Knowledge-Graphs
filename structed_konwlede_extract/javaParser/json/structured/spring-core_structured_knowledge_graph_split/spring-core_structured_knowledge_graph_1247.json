[
  {
    "head": "org.springframework.util.ClassUtils#primitiveTypeNameMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtils#commonClassCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtils#commonClassCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtils#javaLanguageInterfaces",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtils#javaLanguageInterfaces",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtils#interfaceMethodCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtils#interfaceMethodCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Method, Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtils#publicInterfaceMethodCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtils#publicInterfaceMethodCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Method, Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.ClassUtils#publiclyAccessibleMethodCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.ClassUtils#publiclyAccessibleMethodCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Method, Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.ClassUtils#registerCommonClasses(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the given common classes with the ClassUtils cache.\r\n */\r\nprivate static void registerCommonClasses(Class<?>... commonClasses) {\r\n    for (Class<?> clazz : commonClasses) {\r\n        commonClassCache.put(clazz.getName(), clazz);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#registerCommonClasses(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the default ClassLoader to use: typically the thread context\r\n * ClassLoader, if available; the ClassLoader that loaded the ClassUtils\r\n * class will be used as fallback.\r\n * <p>Call this method if you intend to use the thread context ClassLoader\r\n * in a scenario where you clearly prefer a non-null ClassLoader reference:\r\n * for example, for class path resource loading (but not necessarily for\r\n * {@code Class.forName}, which accepts a {@code null} ClassLoader\r\n * reference as well).\r\n * @return the default ClassLoader (only {@code null} if even the system\r\n * ClassLoader isn't accessible)\r\n * @see Thread#getContextClassLoader()\r\n * @see ClassLoader#getSystemClassLoader()\r\n */\r\n@Nullable\r\npublic static ClassLoader getDefaultClassLoader() {\r\n    ClassLoader cl = null;\r\n    try {\r\n        cl = Thread.currentThread().getContextClassLoader();\r\n    } catch (Throwable ex) {\r\n        // Cannot access thread context ClassLoader - falling back...\r\n    }\r\n    if (cl == null) {\r\n        // No thread context class loader -> use class loader of this class.\r\n        cl = ClassUtils.class.getClassLoader();\r\n        if (cl == null) {\r\n            // getClassLoader() returning null indicates the bootstrap ClassLoader\r\n            try {\r\n                cl = ClassLoader.getSystemClassLoader();\r\n            } catch (Throwable ex) {\r\n                // Cannot access system ClassLoader - oh well, maybe the caller can live with null...\r\n            }\r\n        }\r\n    }\r\n    return cl;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#overrideThreadContextClassLoader(ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Override the thread context ClassLoader with the environment's bean ClassLoader\r\n * if necessary, i.e. if the bean ClassLoader is not equivalent to the thread\r\n * context ClassLoader already.\r\n * @param classLoaderToUse the actual ClassLoader to use for the thread context\r\n * @return the original thread context ClassLoader, or {@code null} if not overridden\r\n */\r\n@Nullable\r\npublic static ClassLoader overrideThreadContextClassLoader(@Nullable ClassLoader classLoaderToUse) {\r\n    Thread currentThread = Thread.currentThread();\r\n    ClassLoader threadContextClassLoader = currentThread.getContextClassLoader();\r\n    if (classLoaderToUse != null && !classLoaderToUse.equals(threadContextClassLoader)) {\r\n        currentThread.setContextClassLoader(classLoaderToUse);\r\n        return threadContextClassLoader;\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#overrideThreadContextClassLoader(ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#overrideThreadContextClassLoader(ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#forName(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Replacement for {@code Class.forName()} that also returns Class instances\r\n * for primitives (for example, \"int\") and array class names (for example, \"String[]\").\r\n * Furthermore, it is also capable of resolving nested class names in Java source\r\n * style (for example, \"java.lang.Thread.State\" instead of \"java.lang.Thread$State\").\r\n * @param name the name of the Class\r\n * @param classLoader the class loader to use\r\n * (can be {@code null}, which indicates the default class loader)\r\n * @return a class instance for the supplied name\r\n * @throws ClassNotFoundException if the class was not found\r\n * @throws LinkageError if the class file could not be loaded\r\n * @see Class#forName(String, boolean, ClassLoader)\r\n */\r\npublic static Class<?> forName(String name, @Nullable ClassLoader classLoader) throws ClassNotFoundException, LinkageError {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    Class<?> clazz = resolvePrimitiveClassName(name);\r\n    if (clazz == null) {\r\n        clazz = commonClassCache.get(name);\r\n    }\r\n    if (clazz != null) {\r\n        return clazz;\r\n    }\r\n    // \"java.lang.String[]\" style arrays\r\n    if (name.endsWith(ARRAY_SUFFIX)) {\r\n        String elementClassName = name.substring(0, name.length() - ARRAY_SUFFIX.length());\r\n        Class<?> elementClass = forName(elementClassName, classLoader);\r\n        return elementClass.arrayType();\r\n    }\r\n    ClassLoader clToUse = classLoader;\r\n    if (clToUse == null) {\r\n        clToUse = getDefaultClassLoader();\r\n    }\r\n    try {\r\n        return Class.forName(name, false, clToUse);\r\n    } catch (ClassNotFoundException ex) {\r\n        int lastDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR);\r\n        int previousDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR, lastDotIndex - 1);\r\n        if (lastDotIndex != -1 && previousDotIndex != -1 && Character.isUpperCase(name.charAt(previousDotIndex + 1))) {\r\n            String nestedClassName = name.substring(0, lastDotIndex) + NESTED_CLASS_SEPARATOR + name.substring(lastDotIndex + 1);\r\n            try {\r\n                return Class.forName(nestedClassName, false, clToUse);\r\n            } catch (ClassNotFoundException ex2) {\r\n                // Swallow - let original exception get through\r\n            }\r\n        }\r\n        throw ex;\r\n    }\r\n}",
    "tailType": "method_code"
  }
]