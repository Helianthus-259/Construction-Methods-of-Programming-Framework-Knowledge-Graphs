[
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedVarargMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedVarargMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodInHierarchy() throws Exception {\r\n    Method bridgeMethod = DateAdder.class.getMethod(\"add\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    assertThat(bridgedMethod.getName()).isEqualTo(\"add\");\r\n    assertThat(bridgedMethod.getParameterCount()).isEqualTo(1);\r\n    assertThat(bridgedMethod.getParameterTypes()[0]).isEqualTo(Date.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodInHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodFromOriginalMethodInHierarchy() throws Exception {\r\n    Method originalMethod = Adder.class.getMethod(\"add\", Object.class);\r\n    assertThat(originalMethod.isBridge()).isFalse();\r\n    Method bridgedMethod = BridgeMethodResolver.getMostSpecificMethod(originalMethod, DateAdder.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    assertThat(bridgedMethod.getName()).isEqualTo(\"add\");\r\n    assertThat(bridgedMethod.getParameterCount()).isEqualTo(1);\r\n    assertThat(bridgedMethod.getParameterTypes()[0]).isEqualTo(Date.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodInHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodInHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodNotInHierarchy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodFromOriginalMethodNotInHierarchy() throws Exception {\r\n    Method originalMethod = Adder.class.getMethod(\"add\", Object.class);\r\n    Method mostSpecificMethod = BridgeMethodResolver.getMostSpecificMethod(originalMethod, FakeAdder.class);\r\n    assertThat(mostSpecificMethod).isSameAs(originalMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodNotInHierarchy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodFromOriginalMethodNotInHierarchy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchyWithBoundedGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findBridgedMethodInHierarchyWithBoundedGenerics() throws Exception {\r\n    Method originalMethod = Bar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\r\n    assertThat(originalMethod.isBridge()).isFalse();\r\n    Method bridgedMethod = BridgeMethodResolver.getMostSpecificMethod(originalMethod, SubBar.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    assertThat(bridgedMethod.getName()).isEqualTo(\"someMethod\");\r\n    assertThat(bridgedMethod.getParameterCount()).isEqualTo(2);\r\n    assertThat(bridgedMethod.getParameterTypes()[0]).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchyWithBoundedGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#findBridgedMethodInHierarchyWithBoundedGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#isBridgeMethodFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isBridgeMethodFor() throws Exception {\r\n    Method bridged = MyBar.class.getDeclaredMethod(\"someMethod\", String.class, Object.class);\r\n    Method other = MyBar.class.getDeclaredMethod(\"someMethod\", Integer.class, Object.class);\r\n    Method bridge;\r\n    if (IdeUtils.runningInEclipse()) {\r\n        bridge = InterBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\r\n    } else {\r\n        bridge = MyBar.class.getDeclaredMethod(\"someMethod\", Object.class, Object.class);\r\n    }\r\n    assertThat(bridge.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, bridged, MyBar.class)).as(\"Should be bridge method\").isTrue();\r\n    assertThat(BridgeMethodResolver.isBridgeMethodFor(bridge, other, MyBar.class)).as(\"Should not be bridge method\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#isBridgeMethodFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#isBridgeMethodFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#doubleParameterization()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doubleParameterization() throws Exception {\r\n    Method objectBridge = MyBoo.class.getDeclaredMethod(\"foo\", Object.class);\r\n    Method serializableBridge = MyBoo.class.getDeclaredMethod(\"foo\", Serializable.class);\r\n    Method stringFoo = MyBoo.class.getDeclaredMethod(\"foo\", String.class);\r\n    Method integerFoo = MyBoo.class.getDeclaredMethod(\"foo\", Integer.class);\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(objectBridge)).as(\"foo(String) not resolved.\").isEqualTo(stringFoo);\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(serializableBridge)).as(\"foo(Integer) not resolved.\").isEqualTo(integerFoo);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#doubleParameterization()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#doubleParameterization()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]