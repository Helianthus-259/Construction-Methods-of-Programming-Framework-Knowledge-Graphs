[
  {
    "head": "org.springframework.core.convert.converter.ConditionalConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport org.springframework.core.convert.TypeDescriptor;\n\n/**\n * Allows a {@link Converter}, {@link GenericConverter} or {@link ConverterFactory} to\n * conditionally execute based on attributes of the {@code source} and {@code target}\n * {@link TypeDescriptor}.\n *\n * <p>Often used to selectively match custom conversion logic based on the presence of a\n * field or class-level characteristic, such as an annotation or method. For example, when\n * converting from a String field to a Date field, an implementation might return\n * {@code true} if the target field has also been annotated with {@code @DateTimeFormat}.\n *\n * <p>As another example, when converting from a String field to an {@code Account} field,\n * an implementation might return {@code true} if the target Account class defines a\n * {@code public static findAccount(String)} method.\n *\n * @author Phillip Webb\n * @author Keith Donald\n * @since 3.2\n * @see Converter\n * @see GenericConverter\n * @see ConverterFactory\n * @see ConditionalGenericConverter\n */\npublic interface ConditionalConverter {\n\n\t/**\n\t * Should the conversion from {@code sourceType} to {@code targetType} currently under\n\t * consideration be selected?\n\t * @param sourceType the type descriptor of the field we are converting from\n\t * @param targetType the type descriptor of the field we are converting to\n\t * @return true if conversion should be performed, false otherwise\n\t */\n\tboolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConditionalConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Should the conversion from {@code sourceType} to {@code targetType} currently under\r\n * consideration be selected?\r\n * @param sourceType the type descriptor of the field we are converting from\r\n * @param targetType the type descriptor of the field we are converting to\r\n * @return true if conversion should be performed, false otherwise\r\n */\r\nboolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConditionalConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConditionalConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConditionalGenericConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConditionalGenericConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport org.springframework.core.convert.TypeDescriptor;\n\n/**\n * A {@link GenericConverter} that may conditionally execute based on attributes\n * of the {@code source} and {@code target} {@link TypeDescriptor}.\n *\n * <p>See {@link ConditionalConverter} for details.\n *\n * @author Keith Donald\n * @author Phillip Webb\n * @since 3.0\n * @see GenericConverter\n * @see ConditionalConverter\n */\npublic interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter {\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConditionalGenericConverter",
    "headType": "class",
    "relation": "extend",
    "tail": "GenericConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConditionalGenericConverter",
    "headType": "class",
    "relation": "extend",
    "tail": "ConditionalConverter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.Converter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A converter converts a source object of type {@code S} to a target of type {@code T}.\n *\n * <p>Implementations of this interface are thread-safe and can be shared.\n *\n * <p>Implementations may additionally implement {@link ConditionalConverter}.\n *\n * @author Keith Donald\n * @author Josh Cummings\n * @since 3.0\n * @param <S> the source type\n * @param <T> the target type\n */\n@FunctionalInterface\npublic interface Converter<S, T> {\n\n\t/**\n\t * Convert the source object of type {@code S} to target type {@code T}.\n\t * @param source the source object to convert, which must be an instance of {@code S} (never {@code null})\n\t * @return the converted object, which must be an instance of {@code T} (potentially {@code null})\n\t * @throws IllegalArgumentException if the source cannot be converted to the desired target type\n\t */\n\t@Nullable T convert(S source);\n\n\t/**\n\t * Construct a composed {@link Converter} that first applies this {@link Converter}\n\t * to its input, and then applies the {@code after} {@link Converter} to the\n\t * result.\n\t * @param after the {@link Converter} to apply after this {@link Converter}\n\t * is applied\n\t * @param <U> the type of output of both the {@code after} {@link Converter}\n\t * and the composed {@link Converter}\n\t * @return a composed {@link Converter} that first applies this {@link Converter}\n\t * and then applies the {@code after} {@link Converter}\n\t * @since 5.3\n\t */\n\tdefault <U> Converter<S, U> andThen(Converter<? super T, ? extends U> after) {\n\t\tAssert.notNull(after, \"'after' Converter must not be null\");\n\t\treturn (S s) -> {\n\t\t\tT initialResult = convert(s);\n\t\t\treturn (initialResult != null ? after.convert(initialResult) : null);\n\t\t};\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter#convert(S)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the source object of type {@code S} to target type {@code T}.\r\n * @param source the source object to convert, which must be an instance of {@code S} (never {@code null})\r\n * @return the converted object, which must be an instance of {@code T} (potentially {@code null})\r\n * @throws IllegalArgumentException if the source cannot be converted to the desired target type\r\n */\r\n@Nullable\r\nT convert(S source);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.Converter#convert(S)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter#convert(S)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter#andThen(Converter<? super T,? extends U>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Construct a composed {@link Converter} that first applies this {@link Converter}\r\n * to its input, and then applies the {@code after} {@link Converter} to the\r\n * result.\r\n * @param after the {@link Converter} to apply after this {@link Converter}\r\n * is applied\r\n * @param <U> the type of output of both the {@code after} {@link Converter}\r\n * and the composed {@link Converter}\r\n * @return a composed {@link Converter} that first applies this {@link Converter}\r\n * and then applies the {@code after} {@link Converter}\r\n * @since 5.3\r\n */\r\ndefault <U> Converter<S, U> andThen(Converter<? super T, ? extends U> after) {\r\n    Assert.notNull(after, \"'after' Converter must not be null\");\r\n    return (S s) -> {\r\n        T initialResult = convert(s);\r\n        return (initialResult != null ? after.convert(initialResult) : null);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.Converter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.Converter#andThen(Converter<? super T,? extends U>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConverterFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\n/**\n * A factory for \"ranged\" converters that can convert objects from S to subtypes of R.\n *\n * <p>Implementations may additionally implement {@link ConditionalConverter}.\n *\n * @author Keith Donald\n * @since 3.0\n * @param <S> the source type converters created by this factory can convert from\n * @param <R> the target range (or base) type converters created by this factory can convert to;\n * for example {@link Number} for a set of number subtypes.\n * @see ConditionalConverter\n */\npublic interface ConverterFactory<S, R> {\n\n\t/**\n\t * Get the converter to convert from S to target type T, where T is also an instance of R.\n\t * @param <T> the target type\n\t * @param targetType the target type to convert to\n\t * @return a converter from S to T\n\t */\n\t<T extends R> Converter<S, T> getConverter(Class<T> targetType);\n\n}\n",
    "tailType": "class_code"
  }
]