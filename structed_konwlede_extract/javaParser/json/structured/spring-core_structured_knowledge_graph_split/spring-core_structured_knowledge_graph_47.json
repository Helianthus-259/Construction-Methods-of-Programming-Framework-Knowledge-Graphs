[
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptLongRunning()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseAllExceptLongRunning() {\r\n    Set<TestGroup> expected = EnumSet.allOf(TestGroup.class);\r\n    expected.remove(TestGroup.LONG_RUNNING);\r\n    assertThat(TestGroup.parse(\"all-long_running\")).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptLongRunning()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptLongRunning()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptMissing()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseAllExceptMissing() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> TestGroup.parse(\"all-missing\")).withMessageContaining(\"Unable to find test group 'missing' when parsing \" + \"testGroups value: 'all-missing'. Available groups include: \" + \"[LONG_RUNNING]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptMissing()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.TestGroupParsingTests#parseAllExceptMissing()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.util.Assert;\n\n/**\n * Default {@link GenerationContext} implementation.\n *\n * <p>Generated classes can be flushed out using {@link #writeGeneratedContent()}\n * which should be called only once after the generation process using this instance\n * has completed.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @since 6.0\n */\npublic class DefaultGenerationContext implements GenerationContext {\n\n\tprivate final Map<String, AtomicInteger> sequenceGenerator;\n\n\tprivate final GeneratedClasses generatedClasses;\n\n\tprivate final GeneratedFiles generatedFiles;\n\n\tprivate final RuntimeHints runtimeHints;\n\n\n\t/**\n\t * Create a new {@link DefaultGenerationContext} instance backed by the\n\t * specified {@link ClassNameGenerator} and {@link GeneratedFiles}.\n\t * @param classNameGenerator the naming convention to use for generated\n\t * class names\n\t * @param generatedFiles the generated files\n\t */\n\tpublic DefaultGenerationContext(ClassNameGenerator classNameGenerator, GeneratedFiles generatedFiles) {\n\t\tthis(classNameGenerator, generatedFiles, new RuntimeHints());\n\t}\n\n\t/**\n\t * Create a new {@link DefaultGenerationContext} instance backed by the\n\t * specified {@link ClassNameGenerator}, {@link GeneratedFiles}, and\n\t * {@link RuntimeHints}.\n\t * @param classNameGenerator the naming convention to use for generated\n\t * class names\n\t * @param generatedFiles the generated files\n\t * @param runtimeHints the runtime hints\n\t */\n\tpublic DefaultGenerationContext(ClassNameGenerator classNameGenerator, GeneratedFiles generatedFiles,\n\t\t\tRuntimeHints runtimeHints) {\n\t\tthis(new GeneratedClasses(classNameGenerator), generatedFiles, runtimeHints);\n\t}\n\n\t/**\n\t * Create a new {@link DefaultGenerationContext} instance backed by the\n\t * specified items.\n\t * @param generatedClasses the generated classes\n\t * @param generatedFiles the generated files\n\t * @param runtimeHints the runtime hints\n\t */\n\tDefaultGenerationContext(GeneratedClasses generatedClasses,\n\t\t\tGeneratedFiles generatedFiles, RuntimeHints runtimeHints) {\n\n\t\tAssert.notNull(generatedClasses, \"'generatedClasses' must not be null\");\n\t\tAssert.notNull(generatedFiles, \"'generatedFiles' must not be null\");\n\t\tAssert.notNull(runtimeHints, \"'runtimeHints' must not be null\");\n\t\tthis.sequenceGenerator = new ConcurrentHashMap<>();\n\t\tthis.generatedClasses = generatedClasses;\n\t\tthis.generatedFiles = generatedFiles;\n\t\tthis.runtimeHints = runtimeHints;\n\t}\n\n\t/**\n\t * Create a new {@link DefaultGenerationContext} instance based on the\n\t * supplied {@code existing} context and feature name.\n\t * @param existing the existing context upon which to base the new one\n\t * @param featureName the feature name to use\n\t * @since 6.0.12\n\t */\n\tprotected DefaultGenerationContext(DefaultGenerationContext existing, String featureName) {\n\t\tint sequence = existing.sequenceGenerator.computeIfAbsent(featureName, key -> new AtomicInteger()).getAndIncrement();\n\t\tif (sequence > 0) {\n\t\t\tfeatureName += sequence;\n\t\t}\n\t\tthis.sequenceGenerator = existing.sequenceGenerator;\n\t\tthis.generatedClasses = existing.generatedClasses.withFeatureNamePrefix(featureName);\n\t\tthis.generatedFiles = existing.generatedFiles;\n\t\tthis.runtimeHints = existing.runtimeHints;\n\t}\n\n\n\t@Override\n\tpublic GeneratedClasses getGeneratedClasses() {\n\t\treturn this.generatedClasses;\n\t}\n\n\t@Override\n\tpublic GeneratedFiles getGeneratedFiles() {\n\t\treturn this.generatedFiles;\n\t}\n\n\t@Override\n\tpublic RuntimeHints getRuntimeHints() {\n\t\treturn this.runtimeHints;\n\t}\n\n\t@Override\n\tpublic DefaultGenerationContext withName(String name) {\n\t\treturn new DefaultGenerationContext(this, name);\n\t}\n\n\t/**\n\t * Write any generated content out to the generated files.\n\t */\n\tpublic void writeGeneratedContent() {\n\t\tthis.generatedClasses.writeTo(this.generatedFiles);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#sequenceGenerator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#sequenceGenerator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, AtomicInteger>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#generatedClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#generatedClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedClasses",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#generatedFiles",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#generatedFiles",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedFiles",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#runtimeHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#runtimeHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic GeneratedClasses getGeneratedClasses() {\r\n    return this.generatedClasses;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContext#getGeneratedClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]