[
  {
    "head": "org.springframework.cglib.reflect.FastMember",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMember#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return member.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMember#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(Object o) {\r\n    if (o == null || !(o instanceof FastMember other)) {\r\n        return false;\r\n    }\r\n    return member.equals(other.member);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMember#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMember#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.reflect",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.reflect",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.reflect.FastMethod",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.reflect;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.Signature;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class FastMethod extends FastMember\n{\n    FastMethod(FastClass fc, Method method) {\n        super(fc, method, helper(fc, method));\n    }\n\n    private static int helper(FastClass fc, Method method) {\n        int index = fc.getIndex(new Signature(method.getName(), Type.getMethodDescriptor(method)));\n        if (index < 0) {\n            Class[] types = method.getParameterTypes();\n            System.err.println(\"hash=\" + method.getName().hashCode() + \" size=\" + types.length);\n            for (int i = 0; i < types.length; i++) {\n                System.err.println(\"  types[\" + i + \"]=\" + types[i].getName());\n            }\n            throw new IllegalArgumentException(\"Cannot find method \" + method);\n        }\n        return index;\n    }\n\n    public Class getReturnType() {\n        return ((Method)member).getReturnType();\n    }\n\n    @Override\n\tpublic Class[] getParameterTypes() {\n        return ((Method)member).getParameterTypes();\n    }\n\n    @Override\n\tpublic Class[] getExceptionTypes() {\n        return ((Method)member).getExceptionTypes();\n    }\n\n    public Object invoke(Object obj, Object[] args) throws InvocationTargetException {\n        return fc.invoke(index, obj, args);\n    }\n\n    public Method getJavaMethod() {\n        return (Method)member;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod#helper(FastClass,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int helper(FastClass fc, Method method) {\r\n    int index = fc.getIndex(new Signature(method.getName(), Type.getMethodDescriptor(method)));\r\n    if (index < 0) {\r\n        Class[] types = method.getParameterTypes();\r\n        System.err.println(\"hash=\" + method.getName().hashCode() + \" size=\" + types.length);\r\n        for (int i = 0; i < types.length; i++) {\r\n            System.err.println(\"  types[\" + i + \"]=\" + types[i].getName());\r\n        }\r\n        throw new IllegalArgumentException(\"Cannot find method \" + method);\r\n    }\r\n    return index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMethod#helper(FastClass,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod#getReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Class getReturnType() {\r\n    return ((Method) member).getReturnType();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMethod#getReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod#getParameterTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class[] getParameterTypes() {\r\n    return ((Method) member).getParameterTypes();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.reflect.FastMethod#getParameterTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod#getParameterTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.reflect.FastMethod#getExceptionTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class[] getExceptionTypes() {\r\n    return ((Method) member).getExceptionTypes();\r\n}",
    "tailType": "method_code"
  }
]