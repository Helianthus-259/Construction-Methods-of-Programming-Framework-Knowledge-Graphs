[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ClassRelativeResourceLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link ResourceLoader} implementation that interprets plain resource paths\n * as relative to a given {@code java.lang.Class}.\n *\n * @author Juergen Hoeller\n * @since 3.0\n * @see Class#getResource(String)\n * @see ClassPathResource#ClassPathResource(String, Class)\n */\npublic class ClassRelativeResourceLoader extends DefaultResourceLoader {\n\n\tprivate final Class<?> clazz;\n\n\n\t/**\n\t * Create a new ClassRelativeResourceLoader for the given class.\n\t * @param clazz the class to load resources through\n\t */\n\tpublic ClassRelativeResourceLoader(Class<?> clazz) {\n\t\tAssert.notNull(clazz, \"Class must not be null\");\n\t\tthis.clazz = clazz;\n\t\tsetClassLoader(clazz.getClassLoader());\n\t}\n\n\t@Override\n\tprotected Resource getResourceByPath(String path) {\n\t\treturn new ClassRelativeContextResource(path, this.clazz);\n\t}\n\n\n\t/**\n\t * ClassPathResource that explicitly expresses a context-relative path\n\t * through implementing the ContextResource interface.\n\t */\n\tprivate static class ClassRelativeContextResource extends ClassPathResource implements ContextResource {\n\n\t\tprivate final Class<?> clazz;\n\n\t\tpublic ClassRelativeContextResource(String path, Class<?> clazz) {\n\t\t\tsuper(path, clazz);\n\t\t\tthis.clazz = clazz;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPathWithinContext() {\n\t\t\treturn getPath();\n\t\t}\n\n\t\t@Override\n\t\tpublic Resource createRelative(String relativePath) {\n\t\t\tString pathToUse = StringUtils.applyRelativePath(getPath(), relativePath);\n\t\t\treturn new ClassRelativeContextResource(pathToUse, this.clazz);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassRelativeResourceLoader#clazz",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader#clazz",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader#getResourceByPath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Resource getResourceByPath(String path) {\r\n    return new ClassRelativeContextResource(path, this.clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassRelativeResourceLoader#getResourceByPath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader#getResourceByPath(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeResourceLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "DefaultResourceLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ClassRelativeContextResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link ResourceLoader} implementation that interprets plain resource paths\n * as relative to a given {@code java.lang.Class}.\n *\n * @author Juergen Hoeller\n * @since 3.0\n * @see Class#getResource(String)\n * @see ClassPathResource#ClassPathResource(String, Class)\n */\npublic class ClassRelativeResourceLoader extends DefaultResourceLoader {\n\n\tprivate final Class<?> clazz;\n\n\n\t/**\n\t * Create a new ClassRelativeResourceLoader for the given class.\n\t * @param clazz the class to load resources through\n\t */\n\tpublic ClassRelativeResourceLoader(Class<?> clazz) {\n\t\tAssert.notNull(clazz, \"Class must not be null\");\n\t\tthis.clazz = clazz;\n\t\tsetClassLoader(clazz.getClassLoader());\n\t}\n\n\t@Override\n\tprotected Resource getResourceByPath(String path) {\n\t\treturn new ClassRelativeContextResource(path, this.clazz);\n\t}\n\n\n\t/**\n\t * ClassPathResource that explicitly expresses a context-relative path\n\t * through implementing the ContextResource interface.\n\t */\n\tprivate static class ClassRelativeContextResource extends ClassPathResource implements ContextResource {\n\n\t\tprivate final Class<?> clazz;\n\n\t\tpublic ClassRelativeContextResource(String path, Class<?> clazz) {\n\t\t\tsuper(path, clazz);\n\t\t\tthis.clazz = clazz;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPathWithinContext() {\n\t\t\treturn getPath();\n\t\t}\n\n\t\t@Override\n\t\tpublic Resource createRelative(String relativePath) {\n\t\t\tString pathToUse = StringUtils.applyRelativePath(getPath(), relativePath);\n\t\t\treturn new ClassRelativeContextResource(pathToUse, this.clazz);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassRelativeContextResource#clazz",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource#clazz",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPathWithinContext() {\r\n    return getPath();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassRelativeContextResource#getPathWithinContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource createRelative(String relativePath) {\r\n    String pathToUse = StringUtils.applyRelativePath(getPath(), relativePath);\r\n    return new ClassRelativeContextResource(pathToUse, this.clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassRelativeContextResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassRelativeContextResource",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassPathResource",
    "tailType": "class"
  }
]