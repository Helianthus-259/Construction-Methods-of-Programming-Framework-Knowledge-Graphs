[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnClassAndSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRepeatableAnnotationsDeclaredOnMultipleSuperclasses() {\r\n    final Class<?> clazz = SubSubMyRepeatableWithAdditionalLocalDeclarationsClass.class;\r\n    final List<String> expectedValuesJava = asList(\"X\", \"Y\", \"Z\");\r\n    final List<String> expectedValuesSpring = asList(\"X\", \"Y\", \"Z\", \"meta2\");\r\n    // Java 8\r\n    MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    List<String> values = stream(array).map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesJava);\r\n    // Spring\r\n    Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getRepeatableAnnotations(clazz, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getRepeatableAnnotationsDeclaredOnMultipleSuperclasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDeclaredRepeatableAnnotationsDeclaredOnClass() {\r\n    final List<String> expectedValuesJava = asList(\"A\", \"B\", \"C\");\r\n    final List<String> expectedValuesSpring = asList(\"A\", \"B\", \"C\", \"meta1\");\r\n    // Java 8\r\n    MyRepeatable[] array = MyRepeatableClass.class.getDeclaredAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    List<String> values = stream(array).map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesJava);\r\n    // Spring\r\n    Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getDeclaredRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    values = set.stream().map(MyRepeatable::value).collect(toList());\r\n    assertThat(values).isEqualTo(expectedValuesSpring);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDeclaredRepeatableAnnotationsDeclaredOnSuperclass() {\r\n    final Class<?> clazz = SubMyRepeatableClass.class;\r\n    // Java 8\r\n    MyRepeatable[] array = clazz.getDeclaredAnnotationsByType(MyRepeatable.class);\r\n    assertThat(array).isNotNull();\r\n    assertThat(array).isEmpty();\r\n    // Spring\r\n    Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);\r\n    assertThat(set).isNotNull();\r\n    assertThat(set).isEmpty();\r\n    // When container type is omitted and therefore inferred from @Repeatable\r\n    set = getDeclaredRepeatableAnnotations(clazz, MyRepeatable.class);\r\n    assertThat(set).isNotNull();\r\n    assertThat(set).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDeclaredRepeatableAnnotationsDeclaredOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues() {\r\n    Class<?> clazz = ImplicitAliasesWithMissingDefaultValuesContextConfigClass.class;\r\n    Class<ImplicitAliasesWithMissingDefaultValuesContextConfig> annotationType = ImplicitAliasesWithMissingDefaultValuesContextConfig.class;\r\n    ImplicitAliasesWithMissingDefaultValuesContextConfig config = clazz.getAnnotation(annotationType);\r\n    assertThat(config).isNotNull();\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> synthesizeAnnotation(config, clazz)).withMessageStartingWith(\"Misconfigured aliases:\").withMessageContaining(\"attribute 'location1' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"attribute 'location2' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"default values\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithMissingDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues() {\r\n    Class<?> clazz = ImplicitAliasesWithDifferentDefaultValuesContextConfigClass.class;\r\n    Class<ImplicitAliasesWithDifferentDefaultValuesContextConfig> annotationType = ImplicitAliasesWithDifferentDefaultValuesContextConfig.class;\r\n    ImplicitAliasesWithDifferentDefaultValuesContextConfig config = clazz.getAnnotation(annotationType);\r\n    assertThat(config).isNotNull();\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> synthesizeAnnotation(config, clazz)).withMessageStartingWith(\"Misconfigured aliases:\").withMessageContaining(\"attribute 'location1' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"attribute 'location2' in annotation [\" + annotationType.getName() + \"]\").withMessageContaining(\"same default value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDifferentDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationWithImplicitAliasesWithDuplicateValues() {\r\n    Class<?> clazz = ImplicitAliasesWithDuplicateValuesContextConfigClass.class;\r\n    Class<ImplicitAliasesWithDuplicateValuesContextConfig> annotationType = ImplicitAliasesWithDuplicateValuesContextConfig.class;\r\n    ImplicitAliasesWithDuplicateValuesContextConfig config = clazz.getAnnotation(annotationType);\r\n    assertThat(config).isNotNull();\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> synthesizeAnnotation(config, clazz).location1()).withMessageStartingWith(\"Different @AliasFor mirror values\").withMessageContaining(annotationType.getName()).withMessageContaining(\"declared on class\").withMessageContaining(clazz.getName()).withMessageContaining(\"attribute 'location1' and its alias 'location2'\").withMessageContaining(\"with values of [1] and [2]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationWithImplicitAliasesWithDuplicateValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithoutAttributeAliases() {\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    Map<String, Object> map = Collections.singletonMap(VALUE, \"webController\");\r\n    Component synthesizedComponent = synthesizeAnnotation(map, Component.class, WebController.class);\r\n    assertThat(synthesizedComponent).isNotNull();\r\n    assertThat(synthesizedComponent).isNotSameAs(component);\r\n    assertThat(component.value()).as(\"value from component: \").isEqualTo(\"webController\");\r\n    assertThat(synthesizedComponent.value()).as(\"value from synthesized component: \").isEqualTo(\"webController\");\r\n}",
    "tailType": "method_code"
  }
]