[
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#substringMatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#substringMatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid countOccurrencesOf() {\r\n    assertThat(StringUtils.countOccurrencesOf(null, null)).as(\"nullx2 = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(\"s\", null)).as(\"null string = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(null, \"s\")).as(\"null substring = 0\").isEqualTo(0);\r\n    String s = \"erowoiueoiur\";\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"WERWER\")).as(\"not found = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"x\")).as(\"not found char = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \" \")).as(\"not found ws = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"\")).as(\"not found empty string = 0\").isEqualTo(0);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"e\")).as(\"found char=2\").isEqualTo(2);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"oi\")).as(\"found substring=2\").isEqualTo(2);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"oiu\")).as(\"found substring=2\").isEqualTo(2);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"oiur\")).as(\"found substring=3\").isEqualTo(1);\r\n    assertThat(StringUtils.countOccurrencesOf(s, \"r\")).as(\"test last\").isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#countOccurrencesOf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#replace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid replace() {\r\n    String inString = \"a6AazAaa77abaa\";\r\n    String oldPattern = \"aa\";\r\n    String newPattern = \"foo\";\r\n    // Simple replace\r\n    String s = StringUtils.replace(inString, oldPattern, newPattern);\r\n    assertThat(s).as(\"Replace 1 worked\").isEqualTo(\"a6AazAfoo77abfoo\");\r\n    // Non match: no change\r\n    s = StringUtils.replace(inString, \"qwoeiruqopwieurpoqwieur\", newPattern);\r\n    assertThat(s).as(\"Replace non-matched is returned as-is\").isSameAs(inString);\r\n    // Null new pattern: should ignore\r\n    s = StringUtils.replace(inString, oldPattern, null);\r\n    assertThat(s).as(\"Replace non-matched is returned as-is\").isSameAs(inString);\r\n    // Null old pattern: should ignore\r\n    s = StringUtils.replace(inString, null, newPattern);\r\n    assertThat(s).as(\"Replace non-matched is returned as-is\").isSameAs(inString);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#replace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#replace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#delete()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid delete() {\r\n    String inString = \"The quick brown fox jumped over the lazy dog\";\r\n    String noThe = StringUtils.delete(inString, \"the\");\r\n    assertThat(noThe).as(\"Result has no the [\" + noThe + \"]\").isEqualTo(\"The quick brown fox jumped over  lazy dog\");\r\n    String nohe = StringUtils.delete(inString, \"he\");\r\n    assertThat(nohe).as(\"Result has no he [\" + nohe + \"]\").isEqualTo(\"T quick brown fox jumped over t lazy dog\");\r\n    String nosp = StringUtils.delete(inString, \" \");\r\n    assertThat(nosp).as(\"Result has no spaces\").isEqualTo(\"Thequickbrownfoxjumpedoverthelazydog\");\r\n    String killEnd = StringUtils.delete(inString, \"dog\");\r\n    assertThat(killEnd).as(\"Result has no dog\").isEqualTo(\"The quick brown fox jumped over the lazy \");\r\n    String mismatch = StringUtils.delete(inString, \"dxxcxcxog\");\r\n    assertThat(mismatch).as(\"Result is unchanged\").isEqualTo(inString);\r\n    String nochange = StringUtils.delete(inString, \"\");\r\n    assertThat(nochange).as(\"Result is unchanged\").isEqualTo(inString);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#delete()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#delete()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#deleteAny()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deleteAny() {\r\n    String inString = \"Able was I ere I saw Elba\";\r\n    String res = StringUtils.deleteAny(inString, \"I\");\r\n    assertThat(res).as(\"Result has no 'I'\").isEqualTo(\"Able was  ere  saw Elba\");\r\n    res = StringUtils.deleteAny(inString, \"AeEba!\");\r\n    assertThat(res).as(\"Result has no 'AeEba!'\").isEqualTo(\"l ws I r I sw l\");\r\n    res = StringUtils.deleteAny(inString, \"#@$#$^\");\r\n    assertThat(res).as(\"Result is unchanged\").isEqualTo(inString);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#deleteAny()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#deleteAny()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid deleteAnyWhitespace() {\r\n    String whitespace = \"This is\\n\\n\\n    \\t   a messagy string with whitespace\\n\";\r\n    assertThat(whitespace).as(\"Has CR\").contains(\"\\n\");\r\n    assertThat(whitespace).as(\"Has tab\").contains(\"\\t\");\r\n    assertThat(whitespace).as(\"Has space\").contains(\" \");\r\n    String cleaned = StringUtils.deleteAny(whitespace, \"\\n\\t \");\r\n    assertThat(cleaned).as(\"Has no CR\").doesNotContain(\"\\n\");\r\n    assertThat(cleaned).as(\"Has no tab\").doesNotContain(\"\\t\");\r\n    assertThat(cleaned).as(\"Has no space\").doesNotContain(\" \");\r\n    assertThat(cleaned.length()).as(\"Still has chars\").isGreaterThan(10);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#deleteAnyWhitespace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#quote()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid quote() {\r\n    assertThat(StringUtils.quote(\"myString\")).isEqualTo(\"'myString'\");\r\n    assertThat(StringUtils.quote(\"\")).isEqualTo(\"''\");\r\n    assertThat(StringUtils.quote(null)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#quote()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#quote()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]