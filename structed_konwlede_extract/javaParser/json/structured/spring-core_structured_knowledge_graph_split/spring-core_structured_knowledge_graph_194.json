[
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerPatternIfPresent(ClassLoader,String,Consumer<ResourcePatternHints.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register a pattern if the given {@code location} is available on the\r\n * classpath. This delegates to {@link ClassLoader#getResource(String)}\r\n * which validates directories as well. The location is not included in\r\n * the hint.\r\n * @param classLoader the classloader to use\r\n * @param location a '/'-separated path name that should exist\r\n * @param resourceHint a builder to customize the resource pattern\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerPatternIfPresent(@Nullable ClassLoader classLoader, String location, Consumer<ResourcePatternHints.Builder> resourceHint) {\r\n    ClassLoader classLoaderToUse = (classLoader != null ? classLoader : getClass().getClassLoader());\r\n    if (classLoaderToUse.getResource(location) != null) {\r\n        registerPattern(resourceHint);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerPatternIfPresent(ClassLoader,String,Consumer<ResourcePatternHints.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerPattern(Consumer<ResourcePatternHints.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the resources matching the specified pattern should be\r\n * made available at runtime.\r\n * @param resourceHint a builder to further customize the resource pattern\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerPattern(@Nullable Consumer<ResourcePatternHints.Builder> resourceHint) {\r\n    ResourcePatternHints.Builder builder = new ResourcePatternHints.Builder();\r\n    if (resourceHint != null) {\r\n        resourceHint.accept(builder);\r\n    }\r\n    this.resourcePatternHints.add(builder.build());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerPattern(Consumer<ResourcePatternHints.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerPattern(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the resources matching the specified pattern should be\r\n * made available at runtime.\r\n * @param include a pattern of the resources to include (see {@link ResourcePatternHint} documentation)\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerPattern(String include) {\r\n    return registerPattern(builder -> builder.includes(include));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerPattern(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerResource(Resource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the supplied resource should be made available at runtime.\r\n * @param resource the resource to register\r\n * @throws IllegalArgumentException if the supplied resource is not a\r\n * {@link ClassPathResource} or does not {@linkplain Resource#exists() exist}\r\n * @see #registerPattern(String)\r\n * @see ClassPathResource#getPath()\r\n */\r\npublic void registerResource(Resource resource) {\r\n    if (resource instanceof ClassPathResource classPathResource && classPathResource.exists()) {\r\n        registerPattern(classPathResource.getPath());\r\n    } else {\r\n        throw new IllegalArgumentException(\"Resource must be a ClassPathResource that exists: \" + resource);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerResource(Resource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerType(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the bytecode of the type defined by the specified\r\n * {@link TypeReference} should be made available at runtime.\r\n * @param type the type to include\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerType(TypeReference type) {\r\n    this.types.add(type);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerType(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the bytecode of the specified type should be made\r\n * available at runtime.\r\n * @param type the type to include\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerType(Class<?> type) {\r\n    return registerType(TypeReference.of(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerResourceBundle(String,Consumer<ResourceBundleHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the resource bundle with the specified base name should\r\n * be made available at runtime.\r\n * @param baseName the base name of the resource bundle\r\n * @param resourceHint a builder to further customize the resource bundle\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerResourceBundle(String baseName, @Nullable Consumer<ResourceBundleHint.Builder> resourceHint) {\r\n    ResourceBundleHint.Builder builder = new ResourceBundleHint.Builder(baseName);\r\n    if (resourceHint != null) {\r\n        resourceHint.accept(builder);\r\n    }\r\n    this.resourceBundleHints.add(builder.build());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerResourceBundle(String,Consumer<ResourceBundleHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#registerResourceBundle(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that the resource bundle with the specified base name should\r\n * be made available at runtime.\r\n * @param baseName the base name of the resource bundle\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ResourceHints registerResourceBundle(String baseName) {\r\n    return registerResourceBundle(baseName, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#registerResourceBundle(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#typesPatternResourceHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "private ResourcePatternHints typesPatternResourceHint() {\r\n    ResourcePatternHints.Builder builder = new ResourcePatternHints.Builder();\r\n    this.types.forEach(type -> builder.includes(toIncludePattern(type)));\r\n    return builder.build();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#typesPatternResourceHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints#toIncludePattern(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String toIncludePattern(TypeReference type) {\r\n    return type.getName().replace(\".\", \"/\") + \".class\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHints#toIncludePattern(TypeReference)",
    "tailType": "method"
  }
]