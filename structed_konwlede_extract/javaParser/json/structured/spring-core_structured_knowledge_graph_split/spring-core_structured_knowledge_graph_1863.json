[
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#array()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#array()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#list()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid list() {\r\n    assertThat(Conventions.getVariableName(Collections.singletonList(new TestObject()))).as(\"Incorrect plural List form\").isEqualTo(\"testObjectList\");\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(List.class))).as(\"Incorrect plural List form\").isEqualTo(\"testObjectList\");\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(List.class))).as(\"Incorrect plural List form\").isEqualTo(\"testObjectList\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#list()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#list()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#emptyList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyList() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Conventions.getVariableName(new ArrayList<>()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#emptyList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#emptyList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#set()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid set() {\r\n    assertThat(Conventions.getVariableName(Collections.singleton(new TestObject()))).as(\"Incorrect plural Set form\").isEqualTo(\"testObjectList\");\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(Set.class))).as(\"Incorrect plural Set form\").isEqualTo(\"testObjectList\");\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(Set.class))).as(\"Incorrect plural Set form\").isEqualTo(\"testObjectList\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#set()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#set()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#reactiveParameters()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reactiveParameters() {\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(Mono.class))).isEqualTo(\"testObjectMono\");\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(Flux.class))).isEqualTo(\"testObjectFlux\");\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(Single.class))).isEqualTo(\"testObjectSingle\");\r\n    assertThat(Conventions.getVariableNameForParameter(getMethodParameter(Observable.class))).isEqualTo(\"testObjectObservable\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#reactiveParameters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#reactiveParameters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#reactiveReturnTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reactiveReturnTypes() {\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(Mono.class))).isEqualTo(\"testObjectMono\");\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(Flux.class))).isEqualTo(\"testObjectFlux\");\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(Single.class))).isEqualTo(\"testObjectSingle\");\r\n    assertThat(Conventions.getVariableNameForReturnType(getMethodForReturnType(Observable.class))).isEqualTo(\"testObjectObservable\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#reactiveReturnTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#reactiveReturnTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ConventionsTests#attributeNameToPropertyName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid attributeNameToPropertyName() {\r\n    assertThat(Conventions.attributeNameToPropertyName(\"transaction-manager\")).isEqualTo(\"transactionManager\");\r\n    assertThat(Conventions.attributeNameToPropertyName(\"pointcut-ref\")).isEqualTo(\"pointcutRef\");\r\n    assertThat(Conventions.attributeNameToPropertyName(\"lookup-on-startup\")).isEqualTo(\"lookupOnStartup\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConventionsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConventionsTests#attributeNameToPropertyName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConventionsTests#attributeNameToPropertyName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]