[
  {
    "head": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the arrays using the quicksort algorithm.\r\n * @param index array (column) to sort by\r\n * @param lo starting array index (row), inclusive\r\n * @param hi ending array index (row), exclusive\r\n * @param cmp Comparator to use if the specified column is non-primitive\r\n */\r\npublic void quickSort(int index, int lo, int hi, Comparator cmp) {\r\n    chooseComparer(index, cmp);\r\n    super.quickSort(lo, hi - 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#quickSort(int,int,int,Comparator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @param index array (column) to sort by\r\n */\r\npublic void mergeSort(int index) {\r\n    mergeSort(index, 0, len(), null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#mergeSort(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the arrays using an in-place merge sort.\r\n * @param index array (column) to sort by\r\n * @param lo starting array index (row), inclusive\r\n * @param hi ending array index (row), exclusive\r\n */\r\npublic void mergeSort(int index, int lo, int hi) {\r\n    mergeSort(index, lo, hi, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the arrays using an in-place merge sort.\r\n * @param index array (column) to sort by\r\n * @param cmp Comparator to use if the specified column is non-primitive\r\n */\r\npublic void mergeSort(int index, Comparator cmp) {\r\n    mergeSort(index, 0, len(), cmp);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,Comparator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the arrays using an in-place merge sort.\r\n * @param index array (column) to sort by\r\n * @param lo starting array index (row), inclusive\r\n * @param hi ending array index (row), exclusive\r\n * @param cmp Comparator to use if the specified column is non-primitive\r\n */\r\npublic void mergeSort(int index, int lo, int hi, Comparator cmp) {\r\n    chooseComparer(index, cmp);\r\n    super.mergeSort(lo, hi - 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#mergeSort(int,int,int,Comparator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#chooseComparer(int,Comparator)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void chooseComparer(int index, Comparator cmp) {\r\n    Object array = a[index];\r\n    Class type = array.getClass().componentType();\r\n    if (type.equals(Integer.TYPE)) {\r\n        comparer = new IntComparer((int[]) array);\r\n    } else if (type.equals(Long.TYPE)) {\r\n        comparer = new LongComparer((long[]) array);\r\n    } else if (type.equals(Double.TYPE)) {\r\n        comparer = new DoubleComparer((double[]) array);\r\n    } else if (type.equals(Float.TYPE)) {\r\n        comparer = new FloatComparer((float[]) array);\r\n    } else if (type.equals(Short.TYPE)) {\r\n        comparer = new ShortComparer((short[]) array);\r\n    } else if (type.equals(Byte.TYPE)) {\r\n        comparer = new ByteComparer((byte[]) array);\r\n    } else if (cmp != null) {\r\n        comparer = new ComparatorComparer((Object[]) array, cmp);\r\n    } else {\r\n        comparer = new ObjectComparer((Object[]) array);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#chooseComparer(int,Comparator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected int compare(int i, int j) {\r\n    return comparer.compare(i, j);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter#compare(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.util.ParallelSorter",
    "headType": "class",
    "relation": "extend",
    "tail": "SorterTemplate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.util.Comparer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.util.Comparer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.util;\n\nimport java.util.Comparator;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.AbstractClassGenerator;\nimport org.springframework.cglib.core.ClassesKey;\nimport org.springframework.cglib.core.ReflectUtils;\n\n/**\n * For the efficient sorting of multiple arrays in parallel.\n * <p>\n * Given two arrays of equal length and varying types, the standard\n * technique for sorting them in parallel is to create a new temporary\n * object for each row, store the objects in a temporary array, sort the\n * array using a custom comparator, and the extract the original values\n * back into their respective arrays. This is wasteful in both time and\n * memory.\n * <p>\n * This class generates bytecode customized to the particular set of\n * arrays you need to sort, in such a way that both arrays are sorted\n * in-place, simultaneously.\n * <p>\n * Two sorting algorithms are provided.\n * Quicksort is best when you only need to sort by a single column, as\n * it requires very few comparisons and swaps. Mergesort is best used\n * when sorting multiple columns, as it is a \"stable\" sort--that is, it\n * does not affect the relative order of equal objects from previous sorts.\n * <p>\n * The mergesort algorithm here is an \"in-place\" variant, which while\n * slower, does not require a temporary array.\n *\n * @author Chris Nokleberg\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nabstract public class ParallelSorter extends SorterTemplate {\n    protected Object[] a;\n    private Comparer comparer;\n\n    protected ParallelSorter() {\n    }\n\n    abstract public ParallelSorter newInstance(Object[] arrays);\n\n    /**\n     * Create a new ParallelSorter object for a set of arrays. You may\n     * sort the arrays multiple times via the same ParallelSorter object.\n     * @param arrays An array of arrays to sort. The arrays may be a mix\n     * of primitive and non-primitive types, but should all be the same\n     * length.\n     */\n    public static ParallelSorter create(Object[] arrays) {\n        Generator gen = new Generator();\n        gen.setArrays(arrays);\n        return gen.create();\n    }\n\n    private int len() {\n        return ((Object[])a[0]).length;\n    }\n\n    /**\n     * Sort the arrays using the quicksort algorithm.\n     * @param index array (column) to sort by\n     */\n    public void quickSort(int index) {\n        quickSort(index, 0, len(), null);\n    }\n\n    /**\n     * Sort the arrays using the quicksort algorithm.\n     * @param index array (column) to sort by\n     * @param lo starting array index (row), inclusive\n     * @param hi ending array index (row), exclusive\n     */\n    public void quickSort(int index, int lo, int hi) {\n        quickSort(index, lo, hi, null);\n    }\n\n    /**\n     * Sort the arrays using the quicksort algorithm.\n     * @param index array (column) to sort by\n     * @param cmp Comparator to use if the specified column is non-primitive\n     */\n    public void quickSort(int index, Comparator cmp) {\n        quickSort(index, 0, len(), cmp);\n    }\n\n    /**\n     * Sort the arrays using the quicksort algorithm.\n     * @param index array (column) to sort by\n     * @param lo starting array index (row), inclusive\n     * @param hi ending array index (row), exclusive\n     * @param cmp Comparator to use if the specified column is non-primitive\n     */\n    public void quickSort(int index, int lo, int hi, Comparator cmp) {\n        chooseComparer(index, cmp);\n        super.quickSort(lo, hi - 1);\n    }\n\n    /**\n     * @param index array (column) to sort by\n     */\n    public void mergeSort(int index) {\n        mergeSort(index, 0, len(), null);\n    }\n\n    /**\n     * Sort the arrays using an in-place merge sort.\n     * @param index array (column) to sort by\n     * @param lo starting array index (row), inclusive\n     * @param hi ending array index (row), exclusive\n     */\n    public void mergeSort(int index, int lo, int hi) {\n        mergeSort(index, lo, hi, null);\n    }\n\n    /**\n     * Sort the arrays using an in-place merge sort.\n     * @param index array (column) to sort by\n     * @param cmp Comparator to use if the specified column is non-primitive\n     */\n    public void mergeSort(int index, Comparator cmp) {\n        mergeSort(index, 0, len(), cmp);\n    }\n\n    /**\n     * Sort the arrays using an in-place merge sort.\n     * @param index array (column) to sort by\n     * @param lo starting array index (row), inclusive\n     * @param hi ending array index (row), exclusive\n     * @param cmp Comparator to use if the specified column is non-primitive\n     */\n    public void mergeSort(int index, int lo, int hi, Comparator cmp) {\n        chooseComparer(index, cmp);\n        super.mergeSort(lo, hi - 1);\n    }\n\n    private void chooseComparer(int index, Comparator cmp) {\n        Object array = a[index];\n        Class type = array.getClass().componentType();\n        if (type.equals(Integer.TYPE)) {\n            comparer = new IntComparer((int[])array);\n        } else if (type.equals(Long.TYPE)) {\n            comparer = new LongComparer((long[])array);\n        } else if (type.equals(Double.TYPE)) {\n            comparer = new DoubleComparer((double[])array);\n        } else if (type.equals(Float.TYPE)) {\n            comparer = new FloatComparer((float[])array);\n        } else if (type.equals(Short.TYPE)) {\n            comparer = new ShortComparer((short[])array);\n        } else if (type.equals(Byte.TYPE)) {\n            comparer = new ByteComparer((byte[])array);\n        } else if (cmp != null) {\n            comparer = new ComparatorComparer((Object[])array, cmp);\n        } else {\n            comparer = new ObjectComparer((Object[])array);\n        }\n    }\n\n    @Override\n    protected int compare(int i, int j) {\n        return comparer.compare(i, j);\n    }\n\n    interface Comparer {\n        int compare(int i, int j);\n    }\n\n    static class ComparatorComparer implements Comparer {\n        private final Object[] a;\n        private final Comparator cmp;\n\n        public ComparatorComparer(Object[] a, Comparator cmp) {\n            this.a = a;\n            this.cmp = cmp;\n        }\n\n        @Override\n        public int compare(int i, int j) {\n            return cmp.compare(a[i], a[j]);\n        }\n    }\n\n    static class ObjectComparer implements Comparer {\n        private final Object[] a;\n        public ObjectComparer(Object[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) {\n            return ((Comparable)a[i]).compareTo(a[j]);\n        }\n    }\n\n    static class IntComparer implements Comparer {\n        private final int[] a;\n        public IntComparer(int[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) { return a[i] - a[j]; }\n    }\n\n    static class LongComparer implements Comparer {\n        private final long[] a;\n        public LongComparer(long[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) {\n            long vi = a[i];\n            long vj = a[j];\n            return Long.compare(vi, vj);\n        }\n    }\n\n    static class FloatComparer implements Comparer {\n        private final float[] a;\n        public FloatComparer(float[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) {\n            float vi = a[i];\n            float vj = a[j];\n            return Float.compare(vi, vj);\n        }\n    }\n\n    static class DoubleComparer implements Comparer {\n        private final double[] a;\n        public DoubleComparer(double[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) {\n            double vi = a[i];\n            double vj = a[j];\n            return Double.compare(vi, vj);\n        }\n    }\n\n    static class ShortComparer implements Comparer {\n        private final short[] a;\n        public ShortComparer(short[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) { return a[i] - a[j]; }\n    }\n\n    static class ByteComparer implements Comparer {\n        private final byte[] a;\n        public ByteComparer(byte[] a) { this.a = a; }\n        @Override\n        public int compare(int i, int j) { return a[i] - a[j]; }\n    }\n\n    public static class Generator extends AbstractClassGenerator {\n        private static final Source SOURCE = new Source(ParallelSorter.class.getName());\n\n        private Object[] arrays;\n\n        public Generator() {\n            super(SOURCE);\n        }\n\n        @Override\n        protected ClassLoader getDefaultClassLoader() {\n            return null; // TODO\n        }\n\n        public void setArrays(Object[] arrays) {\n            this.arrays = arrays;\n        }\n\n        public ParallelSorter create() {\n            return (ParallelSorter)super.create(ClassesKey.create(arrays));\n        }\n\n        @Override\n        public void generateClass(ClassVisitor v) throws Exception {\n            if (arrays.length == 0) {\n                throw new IllegalArgumentException(\"No arrays specified to sort\");\n            }\n            for (Object array : arrays) {\n                if (!array.getClass().isArray()) {\n                    throw new IllegalArgumentException(array.getClass() + \" is not an array\");\n                }\n            }\n            new ParallelSorterEmitter(v, getClassName(), arrays);\n        }\n\n        @Override\n        protected Object firstInstance(Class type) {\n            return ((ParallelSorter)ReflectUtils.newInstance(type)).newInstance(arrays);\n        }\n\n        @Override\n        protected Object nextInstance(Object instance) {\n            return ((ParallelSorter)instance).newInstance(arrays);\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.util.Comparer#compare(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "int compare(int i, int j);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.util.Comparer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.util.Comparer#compare(int,int)",
    "tailType": "method"
  }
]