[
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#tryAdvance(Consumer<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#tryAdvance(Consumer<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#tryAdvance(Aggregate,Consumer<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean tryAdvance(Aggregate aggregate, Consumer<? super MergedAnnotation<A>> action) {\r\n    if (this.mappingCursors == null) {\r\n        this.mappingCursors = new int[aggregate.size()];\r\n    }\r\n    int lowestDistance = Integer.MAX_VALUE;\r\n    int annotationResult = -1;\r\n    for (int annotationIndex = 0; annotationIndex < aggregate.size(); annotationIndex++) {\r\n        AnnotationTypeMapping mapping = getNextSuitableMapping(aggregate, annotationIndex);\r\n        if (mapping != null && mapping.getDistance() < lowestDistance) {\r\n            annotationResult = annotationIndex;\r\n            lowestDistance = mapping.getDistance();\r\n        }\r\n        if (lowestDistance == 0) {\r\n            break;\r\n        }\r\n    }\r\n    if (annotationResult != -1) {\r\n        MergedAnnotation<A> mergedAnnotation = aggregate.createMergedAnnotationIfPossible(annotationResult, this.mappingCursors[annotationResult], this.requiredType != null ? IntrospectionFailureLogger.INFO : IntrospectionFailureLogger.DEBUG);\r\n        this.mappingCursors[annotationResult]++;\r\n        if (mergedAnnotation == null) {\r\n            return tryAdvance(aggregate, action);\r\n        }\r\n        action.accept(mergedAnnotation);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#tryAdvance(Aggregate,Consumer<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#getNextSuitableMapping(Aggregate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate AnnotationTypeMapping getNextSuitableMapping(Aggregate aggregate, int annotationIndex) {\r\n    int[] cursors = this.mappingCursors;\r\n    if (cursors != null) {\r\n        AnnotationTypeMapping mapping;\r\n        do {\r\n            mapping = aggregate.getMapping(annotationIndex, cursors[annotationIndex]);\r\n            if (mapping != null && isMappingForType(mapping, annotationFilter, this.requiredType)) {\r\n                return mapping;\r\n            }\r\n            cursors[annotationIndex]++;\r\n        } while (mapping != null);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#getNextSuitableMapping(Aggregate,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#getNextSuitableMapping(Aggregate,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#trySplit()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Spliterator<MergedAnnotation<A>> trySplit() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#trySplit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#trySplit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#trySplit()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#estimateSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic long estimateSize() {\r\n    int size = 0;\r\n    for (int aggregateIndex = this.aggregateCursor; aggregateIndex < this.aggregates.size(); aggregateIndex++) {\r\n        Aggregate aggregate = this.aggregates.get(aggregateIndex);\r\n        for (int annotationIndex = 0; annotationIndex < aggregate.size(); annotationIndex++) {\r\n            AnnotationTypeMappings mappings = aggregate.getMappings(annotationIndex);\r\n            int numberOfMappings = mappings.size();\r\n            if (aggregateIndex == this.aggregateCursor && this.mappingCursors != null) {\r\n                numberOfMappings -= Math.min(this.mappingCursors[annotationIndex], mappings.size());\r\n            }\r\n            size += numberOfMappings;\r\n        }\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#estimateSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#estimateSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#characteristics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int characteristics() {\r\n    return NONNULL | IMMUTABLE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AggregatesSpliterator#characteristics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AggregatesSpliterator#characteristics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.ValueExtractor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.ValueExtractor",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  }
]