[
  {
    "head": "org.springframework.aot.hint.Builder#build()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link JavaSerializationHint} based on the state of this builder.\r\n * @return a java serialization hint\r\n */\r\nJavaSerializationHint build() {\r\n    return new JavaSerializationHint(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#build()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\n\nimport org.assertj.core.api.InstanceOfAssertFactories;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.io.SerializationTestUtils;\nimport org.springframework.tests.sample.objects.TestObject;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Rob Harrop\n * @author Juergen Hoeller\n */\nclass AutoPopulatingListTests {\n\n\t@Test\n\tvoid withClass() {\n\t\tdoTestWithClass(new AutoPopulatingList<>(TestObject.class));\n\t}\n\n\t@Test\n\tvoid withClassAndUserSuppliedBackingList() {\n\t\tdoTestWithClass(new AutoPopulatingList<>(new ArrayList<>(), TestObject.class));\n\t}\n\n\t@Test\n\tvoid withElementFactory() {\n\t\tdoTestWithElementFactory(new AutoPopulatingList<>(new MockElementFactory()));\n\t}\n\n\t@Test\n\tvoid withElementFactoryAndUserSuppliedBackingList() {\n\t\tdoTestWithElementFactory(new AutoPopulatingList<>(new ArrayList<>(), new MockElementFactory()));\n\t}\n\n\tprivate void doTestWithClass(AutoPopulatingList<Object> list) {\n\t\tObject lastElement = null;\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\tObject element = list.get(x);\n\t\t\tassertThat(list.get(x)).as(\"Element is null\").isNotNull();\n\t\t\tboolean condition = element instanceof TestObject;\n\t\t\tassertThat(condition).as(\"Element is incorrect type\").isTrue();\n\t\t\tassertThat(element).isNotSameAs(lastElement);\n\t\t\tlastElement = element;\n\t\t}\n\n\t\tString helloWorld = \"Hello World!\";\n\t\tlist.add(10, null);\n\t\tlist.add(11, helloWorld);\n\t\tassertThat(list).element(11, InstanceOfAssertFactories.STRING).isEqualTo(helloWorld);\n\n\t\tboolean condition3 = list.get(10) instanceof TestObject;\n\t\tassertThat(condition3).isTrue();\n\t\tboolean condition2 = list.get(12) instanceof TestObject;\n\t\tassertThat(condition2).isTrue();\n\t\tboolean condition1 = list.get(13) instanceof TestObject;\n\t\tassertThat(condition1).isTrue();\n\t\tboolean condition = list.get(20) instanceof TestObject;\n\t\tassertThat(condition).isTrue();\n\t}\n\n\tprivate void doTestWithElementFactory(AutoPopulatingList<Object> list) {\n\t\tdoTestWithClass(list);\n\n\t\tfor (int x = 0; x < list.size(); x++) {\n\t\t\tObject element = list.get(x);\n\t\t\tif (element instanceof TestObject) {\n\t\t\t\tassertThat(((TestObject) element).getAge()).isEqualTo(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Test\n\tvoid serialization() throws Exception {\n\t\tAutoPopulatingList<?> list = new AutoPopulatingList<Object>(TestObject.class);\n\t\tassertThat(SerializationTestUtils.serializeAndDeserialize(list)).isEqualTo(list);\n\t}\n\n\n\tprivate static class MockElementFactory implements AutoPopulatingList.ElementFactory<Object> {\n\n\t\t@Override\n\t\tpublic Object createElement(int index) {\n\t\t\tTestObject bean = new TestObject();\n\t\t\tbean.setAge(index);\n\t\t\treturn bean;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withClass() {\r\n    doTestWithClass(new AutoPopulatingList<>(TestObject.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#withClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withClassAndUserSuppliedBackingList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withClassAndUserSuppliedBackingList() {\r\n    doTestWithClass(new AutoPopulatingList<>(new ArrayList<>(), TestObject.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#withClassAndUserSuppliedBackingList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withClassAndUserSuppliedBackingList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withElementFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withElementFactory() {\r\n    doTestWithElementFactory(new AutoPopulatingList<>(new MockElementFactory()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#withElementFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withElementFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withElementFactoryAndUserSuppliedBackingList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withElementFactoryAndUserSuppliedBackingList() {\r\n    doTestWithElementFactory(new AutoPopulatingList<>(new ArrayList<>(), new MockElementFactory()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#withElementFactoryAndUserSuppliedBackingList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#withElementFactoryAndUserSuppliedBackingList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#doTestWithClass(AutoPopulatingList<Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestWithClass(AutoPopulatingList<Object> list) {\r\n    Object lastElement = null;\r\n    for (int x = 0; x < 10; x++) {\r\n        Object element = list.get(x);\r\n        assertThat(list.get(x)).as(\"Element is null\").isNotNull();\r\n        boolean condition = element instanceof TestObject;\r\n        assertThat(condition).as(\"Element is incorrect type\").isTrue();\r\n        assertThat(element).isNotSameAs(lastElement);\r\n        lastElement = element;\r\n    }\r\n    String helloWorld = \"Hello World!\";\r\n    list.add(10, null);\r\n    list.add(11, helloWorld);\r\n    assertThat(list).element(11, InstanceOfAssertFactories.STRING).isEqualTo(helloWorld);\r\n    boolean condition3 = list.get(10) instanceof TestObject;\r\n    assertThat(condition3).isTrue();\r\n    boolean condition2 = list.get(12) instanceof TestObject;\r\n    assertThat(condition2).isTrue();\r\n    boolean condition1 = list.get(13) instanceof TestObject;\r\n    assertThat(condition1).isTrue();\r\n    boolean condition = list.get(20) instanceof TestObject;\r\n    assertThat(condition).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#doTestWithClass(AutoPopulatingList<Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#doTestWithElementFactory(AutoPopulatingList<Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestWithElementFactory(AutoPopulatingList<Object> list) {\r\n    doTestWithClass(list);\r\n    for (int x = 0; x < list.size(); x++) {\r\n        Object element = list.get(x);\r\n        if (element instanceof TestObject) {\r\n            assertThat(((TestObject) element).getAge()).isEqualTo(x);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#doTestWithElementFactory(AutoPopulatingList<Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#serialization()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid serialization() throws Exception {\r\n    AutoPopulatingList<?> list = new AutoPopulatingList<Object>(TestObject.class);\r\n    assertThat(SerializationTestUtils.serializeAndDeserialize(list)).isEqualTo(list);\r\n}",
    "tailType": "method_code"
  }
]