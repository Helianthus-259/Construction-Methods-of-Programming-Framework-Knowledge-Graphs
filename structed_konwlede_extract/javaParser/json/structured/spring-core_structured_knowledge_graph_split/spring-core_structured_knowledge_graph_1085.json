[
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.VfsUtils#getFile(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#getRoot(URI)",
    "headType": "method",
    "relation": "provide",
    "tail": "static Object getRoot(URI url) throws IOException {\r\n    return invokeVfsMethod(VFS_METHOD_GET_ROOT_URI, null, url);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.VfsUtils#getRoot(URI)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#getRoot(URL)",
    "headType": "method",
    "relation": "provide",
    "tail": "// protected methods used by the support sub-package\r\nprotected static Object getRoot(URL url) throws IOException {\r\n    return invokeVfsMethod(VFS_METHOD_GET_ROOT_URL, null, url);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.VfsUtils#getRoot(URL)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#doGetVisitorAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprotected static Object doGetVisitorAttributes() {\r\n    return ReflectionUtils.getField(VISITOR_ATTRIBUTES_FIELD_RECURSE, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.VfsUtils#doGetVisitorAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#doGetVisitorAttributes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#doGetPath(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprotected static String doGetPath(Object resource) {\r\n    return (String) ReflectionUtils.invokeMethod(VIRTUAL_FILE_METHOD_GET_PATH_NAME, resource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.VfsUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.VfsUtils#doGetPath(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.VfsUtils#doGetPath(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.WritableResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.WritableResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.channels.Channels;\nimport java.nio.channels.WritableByteChannel;\n\n/**\n * Extended interface for a resource that supports writing to it.\n * Provides an {@link #getOutputStream() OutputStream accessor}.\n *\n * @author Juergen Hoeller\n * @since 3.1\n * @see java.io.OutputStream\n */\npublic interface WritableResource extends Resource {\n\n\t/**\n\t * Indicate whether the contents of this resource can be written\n\t * via {@link #getOutputStream()}.\n\t * <p>Will be {@code true} for typical resource descriptors;\n\t * note that actual content writing may still fail when attempted.\n\t * However, a value of {@code false} is a definitive indication\n\t * that the resource content cannot be modified.\n\t * @see #getOutputStream()\n\t * @see #isReadable()\n\t */\n\tdefault boolean isWritable() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return an {@link OutputStream} for the underlying resource,\n\t * allowing to (over-)write its content.\n\t * @throws IOException if the stream could not be opened\n\t * @see #getInputStream()\n\t */\n\tOutputStream getOutputStream() throws IOException;\n\n\t/**\n\t * Return a {@link WritableByteChannel}.\n\t * <p>It is expected that each call creates a <i>fresh</i> channel.\n\t * <p>The default implementation returns {@link Channels#newChannel(OutputStream)}\n\t * with the result of {@link #getOutputStream()}.\n\t * @return the byte channel for the underlying resource (must not be {@code null})\n\t * @throws java.io.FileNotFoundException if the underlying resource doesn't exist\n\t * @throws IOException if the content channel could not be opened\n\t * @since 5.0\n\t * @see #getOutputStream()\n\t */\n\tdefault WritableByteChannel writableChannel() throws IOException {\n\t\treturn Channels.newChannel(getOutputStream());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.WritableResource#isWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Indicate whether the contents of this resource can be written\r\n * via {@link #getOutputStream()}.\r\n * <p>Will be {@code true} for typical resource descriptors;\r\n * note that actual content writing may still fail when attempted.\r\n * However, a value of {@code false} is a definitive indication\r\n * that the resource content cannot be modified.\r\n * @see #getOutputStream()\r\n * @see #isReadable()\r\n */\r\ndefault boolean isWritable() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.WritableResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.WritableResource#isWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.WritableResource#getOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an {@link OutputStream} for the underlying resource,\r\n * allowing to (over-)write its content.\r\n * @throws IOException if the stream could not be opened\r\n * @see #getInputStream()\r\n */\r\nOutputStream getOutputStream() throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.WritableResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.WritableResource#getOutputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.WritableResource#writableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link WritableByteChannel}.\r\n * <p>It is expected that each call creates a <i>fresh</i> channel.\r\n * <p>The default implementation returns {@link Channels#newChannel(OutputStream)}\r\n * with the result of {@link #getOutputStream()}.\r\n * @return the byte channel for the underlying resource (must not be {@code null})\r\n * @throws java.io.FileNotFoundException if the underlying resource doesn't exist\r\n * @throws IOException if the content channel could not be opened\r\n * @since 5.0\r\n * @see #getOutputStream()\r\n */\r\ndefault WritableByteChannel writableChannel() throws IOException {\r\n    return Channels.newChannel(getOutputStream());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.WritableResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.WritableResource#writableChannel()",
    "tailType": "method"
  }
]