[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.MapBenchmarkState",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Benchmarks for {@link GenericConversionService}.\n *\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class GenericConversionServiceBenchmark {\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerWithConversionService(ListBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerBaseline(ListBenchmarkState state, Blackhole bh) {\n\t\tList<Integer> target = new ArrayList<>(state.source.size());\n\t\tfor (String element : state.source) {\n\t\t\ttarget.add(Integer.valueOf(element));\n\t\t}\n\t\tbh.consume(target);\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class ListBenchmarkState extends BenchmarkState {\n\n\t\tList<String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf).toList();\n\t\t\tList<Integer> target = new ArrayList<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerWithConversionService(MapBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerBaseline(MapBenchmarkState state, Blackhole bh) {\n\t\tMap<String, Integer> target = CollectionUtils.newHashMap(state.source.size());\n\t\tstate.source.forEach((k, v) -> target.put(k, Integer.valueOf(v)));\n\t\tbh.consume(target);\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class MapBenchmarkState extends BenchmarkState {\n\n\t\tMap<String, String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = CollectionUtils.newHashMap(this.collectionSize);\n\t\t\tMap<String, Integer> target = new HashMap<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf)\n\t\t\t\t\t.collect(Collectors.toMap(String::valueOf, String::valueOf));\n\t\t}\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkState {\n\n\t\tGenericConversionService conversionService = new GenericConversionService();\n\n\t\t@Param({\"10\"})\n\t\tint collectionSize;\n\n\t\tTypeDescriptor targetTypeDesc;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.MapBenchmarkState#source",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState#source",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Trial)\r\npublic void setup() throws Exception {\r\n    this.source = CollectionUtils.newHashMap(this.collectionSize);\r\n    Map<String, Integer> target = new HashMap<>();\r\n    this.targetTypeDesc = TypeDescriptor.forObject(target);\r\n    this.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf).collect(Collectors.toMap(String::valueOf, String::valueOf));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.MapBenchmarkState#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.MapBenchmarkState",
    "headType": "class",
    "relation": "extend",
    "tail": "BenchmarkState",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.BenchmarkState",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.CollectionUtils;\n\n/**\n * Benchmarks for {@link GenericConversionService}.\n *\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class GenericConversionServiceBenchmark {\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerWithConversionService(ListBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertListOfStringToListOfIntegerBaseline(ListBenchmarkState state, Blackhole bh) {\n\t\tList<Integer> target = new ArrayList<>(state.source.size());\n\t\tfor (String element : state.source) {\n\t\t\ttarget.add(Integer.valueOf(element));\n\t\t}\n\t\tbh.consume(target);\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class ListBenchmarkState extends BenchmarkState {\n\n\t\tList<String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf).toList();\n\t\t\tList<Integer> target = new ArrayList<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t}\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerWithConversionService(MapBenchmarkState state, Blackhole bh) {\n\t\tTypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(state.source);\n\t\tbh.consume(state.conversionService.convert(state.source, sourceTypeDesc, state.targetTypeDesc));\n\t}\n\n\t@Benchmark\n\tpublic void convertMapOfStringToListOfIntegerBaseline(MapBenchmarkState state, Blackhole bh) {\n\t\tMap<String, Integer> target = CollectionUtils.newHashMap(state.source.size());\n\t\tstate.source.forEach((k, v) -> target.put(k, Integer.valueOf(v)));\n\t\tbh.consume(target);\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class MapBenchmarkState extends BenchmarkState {\n\n\t\tMap<String, String> source;\n\n\t\t@Setup(Level.Trial)\n\t\tpublic void setup() throws Exception {\n\t\t\tthis.source = CollectionUtils.newHashMap(this.collectionSize);\n\t\t\tMap<String, Integer> target = new HashMap<>();\n\t\t\tthis.targetTypeDesc = TypeDescriptor.forObject(target);\n\t\t\tthis.source = IntStream.rangeClosed(1, collectionSize).mapToObj(String::valueOf)\n\t\t\t\t\t.collect(Collectors.toMap(String::valueOf, String::valueOf));\n\t\t}\n\t}\n\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkState {\n\n\t\tGenericConversionService conversionService = new GenericConversionService();\n\n\t\t@Param({\"10\"})\n\t\tint collectionSize;\n\n\t\tTypeDescriptor targetTypeDesc;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.BenchmarkState#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "GenericConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.BenchmarkState#collectionSize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState#collectionSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.BenchmarkState#targetTypeDesc",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.BenchmarkState#targetTypeDesc",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.SortedPropertiesTests",
    "tailType": "class"
  }
]