[
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getRequiredAttribute(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getRequiredAttribute(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    Iterator<Map.Entry<String, @Nullable Object>> entries = entrySet().iterator();\r\n    StringBuilder sb = new StringBuilder(\"{\");\r\n    while (entries.hasNext()) {\r\n        Map.Entry<String, @Nullable Object> entry = entries.next();\r\n        sb.append(entry.getKey());\r\n        sb.append('=');\r\n        sb.append(valueToString(entry.getValue()));\r\n        if (entries.hasNext()) {\r\n            sb.append(\", \");\r\n        }\r\n    }\r\n    sb.append('}');\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#valueToString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String valueToString(@Nullable Object value) {\r\n    if (value == this) {\r\n        return \"(this Map)\";\r\n    }\r\n    if (value instanceof Object[] objects) {\r\n        return \"[\" + StringUtils.arrayToDelimitedString(objects, \", \") + \"]\";\r\n    }\r\n    return String.valueOf(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#valueToString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#fromMap(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an {@link AnnotationAttributes} instance based on the given map.\r\n * <p>If the map is already an {@code AnnotationAttributes} instance, it\r\n * will be cast and returned immediately without creating a new instance.\r\n * Otherwise a new instance will be created by passing the supplied map\r\n * to the {@link #AnnotationAttributes(Map)} constructor.\r\n * @param map original source of annotation attribute <em>key-value</em> pairs\r\n */\r\n@Nullable\r\npublic static AnnotationAttributes fromMap(@Nullable Map<String, @Nullable Object> map) {\r\n    if (map == null) {\r\n        return null;\r\n    }\r\n    if (map instanceof AnnotationAttributes annotationAttributes) {\r\n        return annotationAttributes;\r\n    }\r\n    return new AnnotationAttributes(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#fromMap(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#fromMap(Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "extend",
    "tail": "LinkedHashMap",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.DecoratingProxy;\nimport org.springframework.core.OrderComparator;\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\n\n/**\n * {@code AnnotationAwareOrderComparator} is an extension of\n * {@link OrderComparator} that supports Spring's\n * {@link org.springframework.core.Ordered} interface as well as the\n * {@link Order @Order} and {@link jakarta.annotation.Priority @Priority}\n * annotations, with an order value provided by an {@code Ordered}\n * instance overriding a statically defined annotation value (if any).\n *\n * <p>Consult the Javadoc for {@link OrderComparator} for details on the\n * sort semantics for non-ordered objects.\n *\n * @author Juergen Hoeller\n * @author Oliver Gierke\n * @author Stephane Nicoll\n * @since 2.0.1\n * @see org.springframework.core.Ordered\n * @see org.springframework.core.annotation.Order\n * @see jakarta.annotation.Priority\n */\npublic class AnnotationAwareOrderComparator extends OrderComparator {\n\n\t/**\n\t * Shared default instance of {@code AnnotationAwareOrderComparator}.\n\t */\n\tpublic static final AnnotationAwareOrderComparator INSTANCE = new AnnotationAwareOrderComparator();\n\n\n\t/**\n\t * This implementation checks for {@link Order @Order} or\n\t * {@link jakarta.annotation.Priority @Priority} on various kinds of\n\t * elements, in addition to the {@link org.springframework.core.Ordered}\n\t * check in the superclass.\n\t */\n\t@Override\n\tprotected @Nullable Integer findOrder(Object obj) {\n\t\tInteger order = super.findOrder(obj);\n\t\tif (order != null) {\n\t\t\treturn order;\n\t\t}\n\t\treturn findOrderFromAnnotation(obj);\n\t}\n\n\tprivate @Nullable Integer findOrderFromAnnotation(Object obj) {\n\t\tAnnotatedElement element = (obj instanceof AnnotatedElement ae ? ae : obj.getClass());\n\t\tMergedAnnotations annotations = MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY);\n\t\tInteger order = OrderUtils.getOrderFromAnnotations(element, annotations);\n\t\tif (order == null && obj instanceof DecoratingProxy decoratingProxy) {\n\t\t\treturn findOrderFromAnnotation(decoratingProxy.getDecoratedClass());\n\t\t}\n\t\treturn order;\n\t}\n\n\t/**\n\t * This implementation retrieves an @{@link jakarta.annotation.Priority}\n\t * value, allowing for additional semantics over the regular @{@link Order}\n\t * annotation: typically, selecting one object over another in case of\n\t * multiple matches but only one object to be returned.\n\t */\n\t@Override\n\tpublic @Nullable Integer getPriority(Object obj) {\n\t\tif (obj instanceof Class<?> clazz) {\n\t\t\treturn OrderUtils.getPriority(clazz);\n\t\t}\n\t\tInteger priority = OrderUtils.getPriority(obj.getClass());\n\t\tif (priority == null && obj instanceof DecoratingProxy decoratingProxy) {\n\t\t\treturn getPriority(decoratingProxy.getDecoratedClass());\n\t\t}\n\t\treturn priority;\n\t}\n\n\n\t/**\n\t * Sort the given list with a default {@link AnnotationAwareOrderComparator}.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param list the List to sort\n\t * @see java.util.List#sort(java.util.Comparator)\n\t */\n\tpublic static void sort(List<?> list) {\n\t\tif (list.size() > 1) {\n\t\t\tlist.sort(INSTANCE);\n\t\t}\n\t}\n\n\t/**\n\t * Sort the given array with a default AnnotationAwareOrderComparator.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param array the array to sort\n\t * @see java.util.Arrays#sort(Object[], java.util.Comparator)\n\t */\n\tpublic static void sort(Object[] array) {\n\t\tif (array.length > 1) {\n\t\t\tArrays.sort(array, INSTANCE);\n\t\t}\n\t}\n\n\t/**\n\t * Sort the given array or List with a default AnnotationAwareOrderComparator,\n\t * if necessary. Simply skips sorting when given any other value.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param value the array or List to sort\n\t * @see java.util.Arrays#sort(Object[], java.util.Comparator)\n\t */\n\tpublic static void sortIfNecessary(Object value) {\n\t\tif (value instanceof Object[] objects) {\n\t\t\tsort(objects);\n\t\t}\n\t\telse if (value instanceof List<?> list) {\n\t\t\tsort(list);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationAwareOrderComparator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrder(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks for {@link Order @Order} or\r\n * {@link jakarta.annotation.Priority @Priority} on various kinds of\r\n * elements, in addition to the {@link org.springframework.core.Ordered}\r\n * check in the superclass.\r\n */\r\n@Override\r\n@Nullable\r\nprotected Integer findOrder(Object obj) {\r\n    Integer order = super.findOrder(obj);\r\n    if (order != null) {\r\n        return order;\r\n    }\r\n    return findOrderFromAnnotation(obj);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrder(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrder(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrder(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]