[
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withNoArgs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionArgsOnly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withOptionArgsOnly() {\r\n    CommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o2\");\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o3\")).isFalse();\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"v1\");\r\n    assertThat(ps.getProperty(\"o2\")).isEmpty();\r\n    assertThat(ps.getProperty(\"o3\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionArgsOnly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionArgsOnly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withRepeatedOptionArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-34282\r\n@Test\r\nvoid withRepeatedOptionArgs() {\r\n    CommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o1=v2\", \"--o1=v3\");\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isFalse();\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"v1,v2,v3\");\r\n    assertThat(ps.getProperty(\"o2\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withRepeatedOptionArgs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withRepeatedOptionArgs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionalArg_andArgIsEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-24464\r\n@Test\r\nvoid withOptionalArg_andArgIsEmpty() {\r\n    EnumerablePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--foo=\");\r\n    assertThat(ps.containsProperty(\"foo\")).isTrue();\r\n    assertThat(ps.getProperty(\"foo\")).isEqualTo(\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionalArg_andArgIsEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withOptionalArg_andArgIsEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    EnumerablePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"--o2\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isNull();\r\n    assertThat(ps.getPropertyNames()).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNonOptionArgsPresent() {\r\n    CommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    String nonOptionArgs = ps.getProperty(\"nonOptionArgs\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withCustomNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    CommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    ps.setNonOptionArgsPropertyName(\"NOA\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"NOA\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    String nonOptionArgs = ps.getProperty(\"NOA\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySourceTests#covertNonOptionArgsToStringArrayAndList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid covertNonOptionArgsToStringArrayAndList() {\r\n    CommandLinePropertySource<?> ps = new SimpleCommandLinePropertySource(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    StandardEnvironment env = new StandardEnvironment();\r\n    env.getPropertySources().addFirst(ps);\r\n    String nonOptionArgs = env.getProperty(\"nonOptionArgs\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n    String[] nonOptionArgsArray = env.getProperty(\"nonOptionArgs\", String[].class);\r\n    assertThat(nonOptionArgsArray[0]).isEqualTo(\"noa1\");\r\n    assertThat(nonOptionArgsArray[1]).isEqualTo(\"noa2\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<String> nonOptionArgsList = env.getProperty(\"nonOptionArgs\", List.class);\r\n    assertThat(nonOptionArgsList).containsExactly(\"noa1\", \"noa2\");\r\n}",
    "tailType": "method_code"
  }
]