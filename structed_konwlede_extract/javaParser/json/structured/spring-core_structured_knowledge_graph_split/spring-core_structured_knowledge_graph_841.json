[
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Netty5BufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.Netty5BufferEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport io.netty5.buffer.Buffer;\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.core.io.buffer.Netty5DataBufferFactory;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Encoder for {@link Buffer Buffers}.\n *\n * @author Violeta Georgieva\n * @since 6.0\n */\npublic class Netty5BufferEncoder extends AbstractEncoder<Buffer> {\n\n\tpublic Netty5BufferEncoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canEncode(ResolvableType type, @Nullable MimeType mimeType) {\n\t\tClass<?> clazz = type.toClass();\n\t\treturn super.canEncode(type, mimeType) && Buffer.class.isAssignableFrom(clazz);\n\t}\n\n\t@Override\n\tpublic Flux<DataBuffer> encode(Publisher<? extends Buffer> inputStream,\n\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(inputStream).map(byteBuffer ->\n\t\t\t\tencodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\n\t}\n\n\t@Override\n\tpublic DataBuffer encodeValue(Buffer buffer, DataBufferFactory bufferFactory, ResolvableType valueType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n\t\t\tString logPrefix = Hints.getLogPrefix(hints);\n\t\t\tlogger.debug(logPrefix + \"Writing \" + buffer.readableBytes() + \" bytes\");\n\t\t}\n\t\tif (bufferFactory instanceof Netty5DataBufferFactory netty5DataBufferFactory) {\n\t\t\treturn netty5DataBufferFactory.wrap(buffer);\n\t\t}\n\t\tbyte[] bytes = new byte[buffer.readableBytes()];\n\t\tbuffer.readBytes(bytes, 0, bytes.length);\n\t\tbuffer.close();\n\t\treturn bufferFactory.wrap(bytes);\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canEncode(ResolvableType type, @Nullable MimeType mimeType) {\r\n    Class<?> clazz = type.toClass();\r\n    return super.canEncode(type, mimeType) && Buffer.class.isAssignableFrom(clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Netty5BufferEncoder#canEncode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#encode(Publisher<? extends Buffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> encode(Publisher<? extends Buffer> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(inputStream).map(byteBuffer -> encodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Netty5BufferEncoder#encode(Publisher<? extends Buffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#encode(Publisher<? extends Buffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#encodeValue(Buffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer encodeValue(Buffer buffer, DataBufferFactory bufferFactory, ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\r\n        String logPrefix = Hints.getLogPrefix(hints);\r\n        logger.debug(logPrefix + \"Writing \" + buffer.readableBytes() + \" bytes\");\r\n    }\r\n    if (bufferFactory instanceof Netty5DataBufferFactory netty5DataBufferFactory) {\r\n        return netty5DataBufferFactory.wrap(buffer);\r\n    }\r\n    byte[] bytes = new byte[buffer.readableBytes()];\r\n    buffer.readBytes(bytes, 0, bytes.length);\r\n    buffer.close();\r\n    return bufferFactory.wrap(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Netty5BufferEncoder#encodeValue(Buffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder#encodeValue(Buffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Netty5BufferEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.NettyByteBufDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.io.buffer.NettyDataBuffer;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decoder for {@link ByteBuf ByteBufs}.\n *\n * @author Vladislav Kisel\n * @since 5.3\n */\npublic class NettyByteBufDecoder extends AbstractDataBufferDecoder<ByteBuf> {\n\n\tpublic NettyByteBufDecoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (ByteBuf.class.isAssignableFrom(elementType.toClass()) &&\n\t\t\t\tsuper.canDecode(elementType, mimeType));\n\t}\n\n\t@Override\n\tpublic ByteBuf decode(DataBuffer dataBuffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(Hints.getLogPrefix(hints) + \"Read \" + dataBuffer.readableByteCount() + \" bytes\");\n\t\t}\n\t\tif (dataBuffer instanceof NettyDataBuffer nettyDataBuffer) {\n\t\t\treturn nettyDataBuffer.getNativeBuffer();\n\t\t}\n\t\tByteBuf byteBuf;\n\t\tbyte[] bytes = new byte[dataBuffer.readableByteCount()];\n\t\tdataBuffer.read(bytes);\n\t\tbyteBuf = Unpooled.wrappedBuffer(bytes);\n\t\tDataBufferUtils.release(dataBuffer);\n\t\treturn byteBuf;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.NettyByteBufDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (ByteBuf.class.isAssignableFrom(elementType.toClass()) && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  }
]