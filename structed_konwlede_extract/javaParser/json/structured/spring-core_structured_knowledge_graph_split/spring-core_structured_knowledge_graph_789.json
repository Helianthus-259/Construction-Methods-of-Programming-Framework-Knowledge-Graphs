[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Stream<MergedAnnotation<Annotation>> stream() {\r\n    return StreamSupport.stream(spliterator(), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#stream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#stream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#isMappingForType(AnnotationTypeMapping,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isMappingForType(AnnotationTypeMapping mapping, @Nullable Object requiredType) {\r\n    if (requiredType == null) {\r\n        return true;\r\n    }\r\n    Class<? extends Annotation> actualType = mapping.getAnnotationType();\r\n    return (actualType == requiredType || actualType.getName().equals(requiredType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#isMappingForType(AnnotationTypeMapping,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection#of(Collection<MergedAnnotation<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "static MergedAnnotations of(Collection<MergedAnnotation<?>> annotations) {\r\n    Assert.notNull(annotations, \"Annotations must not be null\");\r\n    if (annotations.isEmpty()) {\r\n        return TypeMappedAnnotations.NONE;\r\n    }\r\n    return new MergedAnnotationsCollection(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollection#of(Collection<MergedAnnotation<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link MergedAnnotations} implementation backed by a {@link Collection} of\n * {@link MergedAnnotation} instances that represent direct annotations.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see MergedAnnotations#of(Collection)\n */\nfinal class MergedAnnotationsCollection implements MergedAnnotations {\n\n\tprivate final MergedAnnotation<?>[] annotations;\n\n\tprivate final AnnotationTypeMappings[] mappings;\n\n\n\tprivate MergedAnnotationsCollection(Collection<MergedAnnotation<?>> annotations) {\n\t\tAssert.notNull(annotations, \"Annotations must not be null\");\n\t\tthis.annotations = annotations.toArray(new MergedAnnotation<?>[0]);\n\t\tthis.mappings = new AnnotationTypeMappings[this.annotations.length];\n\t\tfor (int i = 0; i < this.annotations.length; i++) {\n\t\t\tMergedAnnotation<?> annotation = this.annotations[i];\n\t\t\tAssert.notNull(annotation, \"Annotation must not be null\");\n\t\t\tAssert.isTrue(annotation.isDirectlyPresent(), \"Annotation must be directly present\");\n\t\t\tAssert.isTrue(annotation.getAggregateIndex() == 0, \"Annotation must have aggregate index of zero\");\n\t\t\tthis.mappings[i] = AnnotationTypeMappings.forAnnotationType(annotation.getType());\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic Iterator<MergedAnnotation<Annotation>> iterator() {\n\t\treturn Spliterators.iterator(spliterator());\n\t}\n\n\t@Override\n\tpublic Spliterator<MergedAnnotation<Annotation>> spliterator() {\n\t\treturn spliterator(null);\n\t}\n\n\tprivate <A extends Annotation> Spliterator<MergedAnnotation<A>> spliterator(@Nullable Object annotationType) {\n\t\treturn new AnnotationsSpliterator<>(annotationType);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> boolean isPresent(Class<A> annotationType) {\n\t\treturn isPresent(annotationType, false);\n\t}\n\n\t@Override\n\tpublic boolean isPresent(String annotationType) {\n\t\treturn isPresent(annotationType, false);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType) {\n\t\treturn isPresent(annotationType, true);\n\t}\n\n\t@Override\n\tpublic boolean isDirectlyPresent(String annotationType) {\n\t\treturn isPresent(annotationType, true);\n\t}\n\n\tprivate boolean isPresent(Object requiredType, boolean directOnly) {\n\t\tfor (MergedAnnotation<?> annotation : this.annotations) {\n\t\t\tClass<? extends Annotation> type = annotation.getType();\n\t\t\tif (type == requiredType || type.getName().equals(requiredType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (!directOnly) {\n\t\t\tfor (AnnotationTypeMappings mappings : this.mappings) {\n\t\t\t\tfor (int i = 1; i < mappings.size(); i++) {\n\t\t\t\t\tAnnotationTypeMapping mapping = mappings.get(i);\n\t\t\t\t\tif (isMappingForType(mapping, requiredType)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType) {\n\t\treturn get(annotationType, null, null);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,\n\t\t\t@Nullable Predicate<? super MergedAnnotation<A>> predicate) {\n\n\t\treturn get(annotationType, predicate, null);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,\n\t\t\t@Nullable Predicate<? super MergedAnnotation<A>> predicate,\n\t\t\t@Nullable MergedAnnotationSelector<A> selector) {\n\n\t\tMergedAnnotation<A> result = find(annotationType, predicate, selector);\n\t\treturn (result != null ? result : MergedAnnotation.missing());\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(String annotationType) {\n\t\treturn get(annotationType, null, null);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(String annotationType,\n\t\t\t@Nullable Predicate<? super MergedAnnotation<A>> predicate) {\n\n\t\treturn get(annotationType, predicate, null);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> MergedAnnotation<A> get(String annotationType,\n\t\t\t@Nullable Predicate<? super MergedAnnotation<A>> predicate,\n\t\t\t@Nullable MergedAnnotationSelector<A> selector) {\n\n\t\tMergedAnnotation<A> result = find(annotationType, predicate, selector);\n\t\treturn (result != null ? result : MergedAnnotation.missing());\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate <A extends Annotation> @Nullable MergedAnnotation<A> find(Object requiredType,\n\t\t\t@Nullable Predicate<? super MergedAnnotation<A>> predicate,\n\t\t\t@Nullable MergedAnnotationSelector<A> selector) {\n\n\t\tif (selector == null) {\n\t\t\tselector = MergedAnnotationSelectors.nearest();\n\t\t}\n\n\t\tMergedAnnotation<A> result = null;\n\t\tfor (int i = 0; i < this.annotations.length; i++) {\n\t\t\tMergedAnnotation<?> root = this.annotations[i];\n\t\t\tif (root != null) {\n\t\t\t\tAnnotationTypeMappings mappings = this.mappings[i];\n\t\t\t\tfor (int mappingIndex = 0; mappingIndex < mappings.size(); mappingIndex++) {\n\t\t\t\t\tAnnotationTypeMapping mapping = mappings.get(mappingIndex);\n\t\t\t\t\tif (!isMappingForType(mapping, requiredType)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tMergedAnnotation<A> candidate = (mappingIndex == 0 ? (MergedAnnotation<A>) root :\n\t\t\t\t\t\t\tTypeMappedAnnotation.createIfPossible(mapping, root, IntrospectionFailureLogger.INFO));\n\t\t\t\t\tif (candidate != null && (predicate == null || predicate.test(candidate))) {\n\t\t\t\t\t\tif (selector.isBestCandidate(candidate)) {\n\t\t\t\t\t\t\treturn candidate;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult = (result != null ? selector.select(result, candidate) : candidate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType) {\n\t\treturn StreamSupport.stream(spliterator(annotationType), false);\n\t}\n\n\t@Override\n\tpublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType) {\n\t\treturn StreamSupport.stream(spliterator(annotationType), false);\n\t}\n\n\t@Override\n\tpublic Stream<MergedAnnotation<Annotation>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\tprivate static boolean isMappingForType(AnnotationTypeMapping mapping, @Nullable Object requiredType) {\n\t\tif (requiredType == null) {\n\t\t\treturn true;\n\t\t}\n\t\tClass<? extends Annotation> actualType = mapping.getAnnotationType();\n\t\treturn (actualType == requiredType || actualType.getName().equals(requiredType));\n\t}\n\n\tstatic MergedAnnotations of(Collection<MergedAnnotation<?>> annotations) {\n\t\tAssert.notNull(annotations, \"Annotations must not be null\");\n\t\tif (annotations.isEmpty()) {\n\t\t\treturn TypeMappedAnnotations.NONE;\n\t\t}\n\t\treturn new MergedAnnotationsCollection(annotations);\n\t}\n\n\n\tprivate class AnnotationsSpliterator<A extends Annotation> implements Spliterator<MergedAnnotation<A>> {\n\n\t\tprivate final @Nullable Object requiredType;\n\n\t\tprivate final int[] mappingCursors;\n\n\t\tpublic AnnotationsSpliterator(@Nullable Object requiredType) {\n\t\t\tthis.mappingCursors = new int[annotations.length];\n\t\t\tthis.requiredType = requiredType;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean tryAdvance(Consumer<? super MergedAnnotation<A>> action) {\n\t\t\tint lowestDistance = Integer.MAX_VALUE;\n\t\t\tint annotationResult = -1;\n\t\t\tfor (int annotationIndex = 0; annotationIndex < annotations.length; annotationIndex++) {\n\t\t\t\tAnnotationTypeMapping mapping = getNextSuitableMapping(annotationIndex);\n\t\t\t\tif (mapping != null && mapping.getDistance() < lowestDistance) {\n\t\t\t\t\tannotationResult = annotationIndex;\n\t\t\t\t\tlowestDistance = mapping.getDistance();\n\t\t\t\t}\n\t\t\t\tif (lowestDistance == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (annotationResult != -1) {\n\t\t\t\tMergedAnnotation<A> mergedAnnotation = createMergedAnnotationIfPossible(\n\t\t\t\t\t\tannotationResult, this.mappingCursors[annotationResult]);\n\t\t\t\tthis.mappingCursors[annotationResult]++;\n\t\t\t\tif (mergedAnnotation == null) {\n\t\t\t\t\treturn tryAdvance(action);\n\t\t\t\t}\n\t\t\t\taction.accept(mergedAnnotation);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate @Nullable AnnotationTypeMapping getNextSuitableMapping(int annotationIndex) {\n\t\t\tAnnotationTypeMapping mapping;\n\t\t\tdo {\n\t\t\t\tmapping = getMapping(annotationIndex, this.mappingCursors[annotationIndex]);\n\t\t\t\tif (mapping != null && isMappingForType(mapping, this.requiredType)) {\n\t\t\t\t\treturn mapping;\n\t\t\t\t}\n\t\t\t\tthis.mappingCursors[annotationIndex]++;\n\t\t\t}\n\t\t\twhile (mapping != null);\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate @Nullable AnnotationTypeMapping getMapping(int annotationIndex, int mappingIndex) {\n\t\t\tAnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[annotationIndex];\n\t\t\treturn (mappingIndex < mappings.size() ? mappings.get(mappingIndex) : null);\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tprivate @Nullable MergedAnnotation<A> createMergedAnnotationIfPossible(int annotationIndex, int mappingIndex) {\n\t\t\tMergedAnnotation<?> root = annotations[annotationIndex];\n\t\t\tif (mappingIndex == 0) {\n\t\t\t\treturn (MergedAnnotation<A>) root;\n\t\t\t}\n\t\t\tIntrospectionFailureLogger logger = (this.requiredType != null ?\n\t\t\t\t\tIntrospectionFailureLogger.INFO : IntrospectionFailureLogger.DEBUG);\n\t\t\treturn TypeMappedAnnotation.createIfPossible(\n\t\t\t\t\tmappings[annotationIndex].get(mappingIndex), root, logger);\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Spliterator<MergedAnnotation<A>> trySplit() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic long estimateSize() {\n\t\t\tint size = 0;\n\t\t\tfor (int i = 0; i < annotations.length; i++) {\n\t\t\t\tAnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[i];\n\t\t\t\tint numberOfMappings = mappings.size();\n\t\t\t\tnumberOfMappings -= Math.min(this.mappingCursors[i], mappings.size());\n\t\t\t\tsize += numberOfMappings;\n\t\t\t}\n\t\t\treturn size;\n\t\t}\n\n\t\t@Override\n\t\tpublic int characteristics() {\n\t\t\treturn NONNULL | IMMUTABLE;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#requiredType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#requiredType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#mappingCursors",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#mappingCursors",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#tryAdvance(Consumer<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean tryAdvance(Consumer<? super MergedAnnotation<A>> action) {\r\n    int lowestDistance = Integer.MAX_VALUE;\r\n    int annotationResult = -1;\r\n    for (int annotationIndex = 0; annotationIndex < annotations.length; annotationIndex++) {\r\n        AnnotationTypeMapping mapping = getNextSuitableMapping(annotationIndex);\r\n        if (mapping != null && mapping.getDistance() < lowestDistance) {\r\n            annotationResult = annotationIndex;\r\n            lowestDistance = mapping.getDistance();\r\n        }\r\n        if (lowestDistance == 0) {\r\n            break;\r\n        }\r\n    }\r\n    if (annotationResult != -1) {\r\n        MergedAnnotation<A> mergedAnnotation = createMergedAnnotationIfPossible(annotationResult, this.mappingCursors[annotationResult]);\r\n        this.mappingCursors[annotationResult]++;\r\n        if (mergedAnnotation == null) {\r\n            return tryAdvance(action);\r\n        }\r\n        action.accept(mergedAnnotation);\r\n        return true;\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#tryAdvance(Consumer<? super MergedAnnotation<A>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#tryAdvance(Consumer<? super MergedAnnotation<A>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#getNextSuitableMapping(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate AnnotationTypeMapping getNextSuitableMapping(int annotationIndex) {\r\n    AnnotationTypeMapping mapping;\r\n    do {\r\n        mapping = getMapping(annotationIndex, this.mappingCursors[annotationIndex]);\r\n        if (mapping != null && isMappingForType(mapping, this.requiredType)) {\r\n            return mapping;\r\n        }\r\n        this.mappingCursors[annotationIndex]++;\r\n    } while (mapping != null);\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsSpliterator#getNextSuitableMapping(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#getNextSuitableMapping(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsSpliterator#getMapping(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate AnnotationTypeMapping getMapping(int annotationIndex, int mappingIndex) {\r\n    AnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[annotationIndex];\r\n    return (mappingIndex < mappings.size() ? mappings.get(mappingIndex) : null);\r\n}",
    "tailType": "method_code"
  }
]