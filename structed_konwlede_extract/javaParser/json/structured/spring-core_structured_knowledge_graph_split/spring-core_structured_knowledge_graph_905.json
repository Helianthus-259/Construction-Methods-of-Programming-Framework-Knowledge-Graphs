[
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is this type an array type?\r\n */\r\npublic boolean isArray() {\r\n    return getType().isArray();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getElementTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is an array, returns the array's component type.\r\n * If this type is a {@code Stream}, returns the stream's component type.\r\n * If this type is a {@link Collection} and it is parameterized, returns the Collection's element type.\r\n * If the Collection is not parameterized, returns {@code null} indicating the element type is not declared.\r\n * @return the array component type or Collection element type, or {@code null} if this type is not\r\n * an array type or a {@code java.util.Collection} or if its element type is not parameterized\r\n * @see #elementTypeDescriptor(Object)\r\n */\r\n@Nullable\r\npublic TypeDescriptor getElementTypeDescriptor() {\r\n    if (getResolvableType().isArray()) {\r\n        return new TypeDescriptor(getResolvableType().getComponentType(), null, getAnnotations());\r\n    }\r\n    if (Stream.class.isAssignableFrom(getType())) {\r\n        return getRelatedIfResolvable(getResolvableType().as(Stream.class).getGeneric(0));\r\n    }\r\n    return getRelatedIfResolvable(getResolvableType().asCollection().getGeneric(0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getElementTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getElementTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#elementTypeDescriptor(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is a {@link Collection} or an array, creates an element TypeDescriptor\r\n * from the provided collection or array element.\r\n * <p>Narrows the {@link #getElementTypeDescriptor() elementType} property to the class\r\n * of the provided collection or array element. For example, if this describes a\r\n * {@code java.util.List<java.lang.Number>} and the element argument is a\r\n * {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}.\r\n * If this describes a {@code java.util.List<?>} and the element argument is a\r\n * {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}\r\n * as well.\r\n * <p>Annotation and nested type context will be preserved in the narrowed\r\n * TypeDescriptor that is returned.\r\n * @param element the collection or array element\r\n * @return an element type descriptor, narrowed to the type of the provided element\r\n * @see #getElementTypeDescriptor()\r\n * @see #narrow(Object)\r\n */\r\n@Nullable\r\npublic TypeDescriptor elementTypeDescriptor(Object element) {\r\n    return narrow(element, getElementTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#elementTypeDescriptor(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#elementTypeDescriptor(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#isMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Is this type a {@link Map} type?\r\n */\r\npublic boolean isMap() {\r\n    return Map.class.isAssignableFrom(getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#isMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is a {@link Map} and its key type is parameterized,\r\n * returns the map's key type. If the Map's key type is not parameterized,\r\n * returns {@code null} indicating the key type is not declared.\r\n * @return the Map key type, or {@code null} if this type is a Map\r\n * but its key type is not parameterized\r\n * @throws IllegalStateException if this type is not a {@code java.util.Map}\r\n */\r\n@Nullable\r\npublic TypeDescriptor getMapKeyTypeDescriptor() {\r\n    Assert.state(isMap(), \"Not a [java.util.Map]\");\r\n    return getRelatedIfResolvable(getResolvableType().asMap().getGeneric(0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is a {@link Map}, creates a mapKey {@link TypeDescriptor}\r\n * from the provided map key.\r\n * <p>Narrows the {@link #getMapKeyTypeDescriptor() mapKeyType} property\r\n * to the class of the provided map key. For example, if this describes a\r\n * {@code java.util.Map<java.lang.Number, java.lang.String>} and the key\r\n * argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be\r\n * {@code java.lang.Integer}. If this describes a {@code java.util.Map<?, ?>}\r\n * and the key argument is a {@code java.lang.Integer}, the returned\r\n * TypeDescriptor will be {@code java.lang.Integer} as well.\r\n * <p>Annotation and nested type context will be preserved in the narrowed\r\n * TypeDescriptor that is returned.\r\n * @param mapKey the map key\r\n * @return the map key type descriptor\r\n * @throws IllegalStateException if this type is not a {@code java.util.Map}\r\n * @see #narrow(Object)\r\n */\r\n@Nullable\r\npublic TypeDescriptor getMapKeyTypeDescriptor(Object mapKey) {\r\n    return narrow(mapKey, getMapKeyTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapKeyTypeDescriptor(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is a {@link Map} and its value type is parameterized,\r\n * returns the map's value type.\r\n * <p>If the Map's value type is not parameterized, returns {@code null}\r\n * indicating the value type is not declared.\r\n * @return the Map value type, or {@code null} if this type is a Map\r\n * but its value type is not parameterized\r\n * @throws IllegalStateException if this type is not a {@code java.util.Map}\r\n */\r\n@Nullable\r\npublic TypeDescriptor getMapValueTypeDescriptor() {\r\n    Assert.state(isMap(), \"Not a [java.util.Map]\");\r\n    return getRelatedIfResolvable(getResolvableType().asMap().getGeneric(1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]