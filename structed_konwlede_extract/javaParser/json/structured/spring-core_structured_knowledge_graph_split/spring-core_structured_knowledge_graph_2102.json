[
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldTypeUnknown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableFromFieldTypeUnknown() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"));\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric().resolve()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldTypeUnknown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldTypeUnknown()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableFromInheritedField() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringIntegerMultiValueMap\")).as(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(String.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric(1, 0).resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedFieldSwitched()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableFromInheritedFieldSwitched() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringIntegerMultiValueMapSwitched\")).as(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(String.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric(1, 0).resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedFieldSwitched()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromInheritedFieldSwitched()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#doesResolveFromOuterOwner()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid doesResolveFromOuterOwner() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"listOfListOfUnknown\")).as(Collection.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric(0).as(Collection.class).getGeneric(0).as(Collection.class).resolve()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#doesResolveFromOuterOwner()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#doesResolveFromOuterOwner()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#intArrayNotAssignableToIntegerArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid intArrayNotAssignableToIntegerArray() throws Exception {\r\n    ResolvableType integerArray = ResolvableType.forField(Fields.class.getField(\"integerArray\"));\r\n    ResolvableType intArray = ResolvableType.forField(Fields.class.getField(\"intArray\"));\r\n    assertThat(integerArray.isAssignableFrom(intArray)).isFalse();\r\n    assertThat(intArray.isAssignableFrom(integerArray)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#intArrayNotAssignableToIntegerArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#intArrayNotAssignableToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableResult()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveBoundedTypeVariableResult() throws Exception {\r\n    ResolvableType type = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"boundedTypeVariableResult\"));\r\n    assertThat(type.resolve()).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableResult()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableResult()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableWildcardResult()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveBoundedTypeVariableWildcardResult() throws Exception {\r\n    ResolvableType type = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"boundedTypeVariableWildcardResult\"));\r\n    assertThat(type.getGeneric(1).asCollection().resolveGeneric()).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableWildcardResult()",
    "tailType": "method"
  }
]