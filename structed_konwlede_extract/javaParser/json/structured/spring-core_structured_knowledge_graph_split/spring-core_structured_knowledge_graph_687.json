[
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#filter",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#classPath",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#classPath",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#DOMAIN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#DOMAIN",
    "headType": "field",
    "relation": "haveType",
    "tail": "java.security.ProtectionDomain",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class loadClass(String name) throws ClassNotFoundException {\r\n    Class loaded = findLoadedClass(name);\r\n    if (loaded != null) {\r\n        if (loaded.getClassLoader() == this) {\r\n            return loaded;\r\n        }\r\n        //else reload with this class loader\r\n    }\r\n    if (!filter.accept(name)) {\r\n        return super.loadClass(name);\r\n    }\r\n    ClassReader r;\r\n    try {\r\n        java.io.InputStream is = classPath.getResourceAsStream(name.replace('.', '/') + \".class\");\r\n        if (is == null) {\r\n            throw new ClassNotFoundException(name);\r\n        }\r\n        try {\r\n            r = new ClassReader(is);\r\n        } finally {\r\n            is.close();\r\n        }\r\n    } catch (IOException e) {\r\n        throw new ClassNotFoundException(name + \":\" + e.getMessage());\r\n    }\r\n    try {\r\n        DebuggingClassWriter w = new DebuggingClassWriter(ClassWriter.COMPUTE_FRAMES);\r\n        getGenerator(r).generateClass(w);\r\n        byte[] b = w.toByteArray();\r\n        Class c = super.defineClass(name, b, 0, b.length, DOMAIN);\r\n        postProcess(c);\r\n        return c;\r\n    } catch (RuntimeException | Error e) {\r\n        throw e;\r\n    } catch (Exception e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#loadClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected ClassGenerator getGenerator(ClassReader r) {\r\n    return new ClassReaderGenerator(r, attributes(), getFlags());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#getGenerator(ClassReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#getFlags()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected int getFlags() {\r\n    return 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#getFlags()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Attribute[] attributes() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#attributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void postProcess(Class c) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#postProcess(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.AbstractClassTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.ClassTransformer;\nimport org.springframework.cglib.core.Constants;\n\nabstract public class AbstractClassTransformer extends ClassTransformer {\n    protected AbstractClassTransformer() {\n        super(Constants.ASM_API);\n    }\n\n    @Override\n\tpublic void setTarget(ClassVisitor target) {\n        cv = target;\n    }\n}\n",
    "tailType": "class_code"
  }
]