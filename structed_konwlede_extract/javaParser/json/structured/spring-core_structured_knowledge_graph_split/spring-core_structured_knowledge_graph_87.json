[
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternNoMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid annotationPatternNoMatches() throws Exception {\r\n    assertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@org.springframework.stereotype.Repository *..*\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternNoMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternNoMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid compositionPatternMatches() throws Exception {\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"!*..SomeOtherClass\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeInterface+ \" + \"&& example.type.AspectJTypeFilterTestsTypes.SomeClass+ \" + \"&& example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeInterface+ \" + \"|| example.type.AspectJTypeFilterTestsTypes.SomeClass+ \" + \"|| example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport org.springframework.aot.hint.ProxyHints;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.SerializationHints;\n\n/**\n * Central interface used for code generation.\n *\n * <p>A generation context provides:\n * <ul>\n * <li>Management of all {@linkplain #getGeneratedClasses() generated classes},\n * including naming convention support.</li>\n * <li>Central management of all {@linkplain #getGeneratedFiles() generated files}.</li>\n * <li>Support for recording {@linkplain #getRuntimeHints() runtime hints}.</li>\n * </ul>\n *\n * <p>If a dedicated round of code generation is required while processing, it\n * is possible to create a specialized context using {@link #withName(String)}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic interface GenerationContext {\n\n\t/**\n\t * Get the {@link GeneratedClasses} used by the context.\n\t * <p>All generated classes are written at the end of AOT processing.\n\t * @return the generated classes\n\t */\n\tGeneratedClasses getGeneratedClasses();\n\n\t/**\n\t * Get the {@link GeneratedFiles} used by the context.\n\t * <p>Used to write resource, java source, or class bytecode files.\n\t * @return the generated files\n\t */\n\tGeneratedFiles getGeneratedFiles();\n\n\t/**\n\t * Get the {@link RuntimeHints} used by the context.\n\t * <p>Used to record {@linkplain ReflectionHints reflection},\n\t * {@linkplain ResourceHints resource}, {@linkplain SerializationHints\n\t * serialization}, and {@linkplain ProxyHints proxy} hints so that the\n\t * application can run as a native image.\n\t * @return the runtime hints\n\t */\n\tRuntimeHints getRuntimeHints();\n\n\t/**\n\t * Create a new {@link GenerationContext} instance using the specified\n\t * name to qualify generated assets for a dedicated round of code\n\t * generation.\n\t * <p>If the specified name is already in use, a unique sequence is added\n\t * to ensure the name is unique.\n\t * @param name the name to use\n\t * @return a specialized {@link GenerationContext} for the specified name\n\t */\n\tGenerationContext withName(String name);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternNoMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid compositionPatternNoMatches() throws Exception {\r\n    assertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"*..Bogus && example.type.AspectJTypeFilterTestsTypes.SomeClass\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternNoMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#compositionPatternNoMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext#getGeneratedClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@link GeneratedClasses} used by the context.\r\n * <p>All generated classes are written at the end of AOT processing.\r\n * @return the generated classes\r\n */\r\nGeneratedClasses getGeneratedClasses();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GenerationContext#getGeneratedClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext#getGeneratedFiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@link GeneratedFiles} used by the context.\r\n * <p>Used to write resource, java source, or class bytecode files.\r\n * @return the generated files\r\n */\r\nGeneratedFiles getGeneratedFiles();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GenerationContext#getGeneratedFiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext#getRuntimeHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@link RuntimeHints} used by the context.\r\n * <p>Used to record {@linkplain ReflectionHints reflection},\r\n * {@linkplain ResourceHints resource}, {@linkplain SerializationHints\r\n * serialization}, and {@linkplain ProxyHints proxy} hints so that the\r\n * application can run as a native image.\r\n * @return the runtime hints\r\n */\r\nRuntimeHints getRuntimeHints();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GenerationContext#getRuntimeHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext#withName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link GenerationContext} instance using the specified\r\n * name to qualify generated assets for a dedicated round of code\r\n * generation.\r\n * <p>If the specified name is already in use, a unique sequence is added\r\n * to ensure the name is unique.\r\n * @param name the name to use\r\n * @return a specialized {@link GenerationContext} for the specified name\r\n */\r\nGenerationContext withName(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GenerationContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GenerationContext#withName(String)",
    "tailType": "method"
  }
]