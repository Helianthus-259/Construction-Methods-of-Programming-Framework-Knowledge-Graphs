[
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\r\n    target.visitInnerClass(name, outerName, innerName, access);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\r\n    return target.visitField(access, name, desc, signature, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    return target.visitMethod(access, name, desc, signature, exceptions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    target.visitEnd();\r\n    // just to be safe\r\n    target = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassFilterTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport java.io.IOException;\n\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.ClassReader;\nimport org.springframework.asm.ClassWriter;\nimport org.springframework.cglib.core.ClassGenerator;\nimport org.springframework.cglib.core.CodeGenerationException;\nimport org.springframework.cglib.core.DebuggingClassWriter;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nabstract public class AbstractClassLoader extends ClassLoader {\n    private ClassFilter filter;\n    private ClassLoader classPath;\n    private static java.security.ProtectionDomain DOMAIN ;\n\n    static{\n        DOMAIN = AbstractClassLoader.class.getProtectionDomain();\n     }\n\n    protected AbstractClassLoader(ClassLoader parent, ClassLoader classPath, ClassFilter filter) {\n        super(parent);\n        this.filter = filter;\n        this.classPath = classPath;\n    }\n\n    @Override\n\tpublic Class loadClass(String name) throws ClassNotFoundException {\n\n        Class loaded = findLoadedClass(name);\n\n        if( loaded != null ){\n            if( loaded.getClassLoader() == this ){\n               return loaded;\n            }//else reload with this class loader\n        }\n\n        if (!filter.accept(name)) {\n            return super.loadClass(name);\n        }\n        ClassReader r;\n        try {\n\n           java.io.InputStream is = classPath.getResourceAsStream(\n                       name.replace('.','/') + \".class\"\n                  );\n\n           if (is == null) {\n\n              throw new ClassNotFoundException(name);\n\n           }\n           try {\n\n              r = new ClassReader(is);\n\n           } finally {\n\n              is.close();\n\n           }\n        } catch (IOException e) {\n            throw new ClassNotFoundException(name + \":\" + e.getMessage());\n        }\n\n        try {\n            DebuggingClassWriter w =\n        \t    new DebuggingClassWriter(ClassWriter.COMPUTE_FRAMES);\n            getGenerator(r).generateClass(w);\n            byte[] b = w.toByteArray();\n            Class c = super.defineClass(name, b, 0, b.length, DOMAIN);\n            postProcess(c);\n            return c;\n        } catch (RuntimeException | Error e) {\n            throw e;\n        } catch (Exception e) {\n            throw new CodeGenerationException(e);\n        }\n    }\n\n    protected ClassGenerator getGenerator(ClassReader r) {\n        return new ClassReaderGenerator(r, attributes(), getFlags());\n    }\n\n    protected int getFlags() {\n        return 0;\n    }\n\n    protected Attribute[] attributes() {\n        return null;\n    }\n\n    protected void postProcess(Class c) {\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.AbstractClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.AbstractClassLoader#filter",
    "tailType": "field"
  }
]