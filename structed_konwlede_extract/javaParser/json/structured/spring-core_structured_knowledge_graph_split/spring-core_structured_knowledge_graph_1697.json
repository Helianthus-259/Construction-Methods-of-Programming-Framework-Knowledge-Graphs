[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInClassArrayWhenNameMatchesAccepts()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInClassArrayWhenNameDoesNotMatchRejects()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeInClassArrayWhenNameDoesNotMatchRejects() {\r\n    MergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\r\n    assertThat(MergedAnnotationPredicates.typeIn(MissingAnnotation.class)).rejects(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInClassArrayWhenNameDoesNotMatchRejects()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInClassArrayWhenNameDoesNotMatchRejects()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesStringInCollectionAccepts()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeInCollectionWhenMatchesStringInCollectionAccepts() {\r\n    MergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\r\n    assertThat(MergedAnnotationPredicates.typeIn(Collections.singleton(TestAnnotation.class.getName()))).accepts(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesStringInCollectionAccepts()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesStringInCollectionAccepts()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesClassInCollectionAccepts()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeInCollectionWhenMatchesClassInCollectionAccepts() {\r\n    MergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\r\n    assertThat(MergedAnnotationPredicates.typeIn(Collections.singleton(TestAnnotation.class))).accepts(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesClassInCollectionAccepts()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenMatchesClassInCollectionAccepts()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenDoesNotMatchAnyRejects()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeInCollectionWhenDoesNotMatchAnyRejects() {\r\n    MergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\r\n    assertThat(MergedAnnotationPredicates.typeIn(Arrays.asList(MissingAnnotation.class.getName(), MissingAnnotation.class))).rejects(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenDoesNotMatchAnyRejects()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#typeInCollectionWhenDoesNotMatchAnyRejects()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfAcceptsOnlyFirstRun()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid firstRunOfAcceptsOnlyFirstRun() {\r\n    List<MergedAnnotation<TestAnnotation>> filtered = MergedAnnotations.from(WithMultipleTestAnnotation.class).stream(TestAnnotation.class).filter(MergedAnnotationPredicates.firstRunOf(this::firstCharOfValue)).toList();\r\n    assertThat(filtered.stream().map(annotation -> annotation.getString(\"value\"))).containsExactly(\"a1\", \"a2\", \"a3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfAcceptsOnlyFirstRun()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfAcceptsOnlyFirstRun()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfWhenValueExtractorIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid firstRunOfWhenValueExtractorIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> MergedAnnotationPredicates.firstRunOf(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfWhenValueExtractorIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#firstRunOfWhenValueExtractorIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicatesTests#uniqueAcceptsUniquely()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid uniqueAcceptsUniquely() {\r\n    List<MergedAnnotation<TestAnnotation>> filtered = MergedAnnotations.from(WithMultipleTestAnnotation.class).stream(TestAnnotation.class).filter(MergedAnnotationPredicates.unique(this::firstCharOfValue)).toList();\r\n    assertThat(filtered.stream().map(annotation -> annotation.getString(\"value\"))).containsExactly(\"a1\", \"b1\", \"c1\");\r\n}",
    "tailType": "method_code"
  }
]