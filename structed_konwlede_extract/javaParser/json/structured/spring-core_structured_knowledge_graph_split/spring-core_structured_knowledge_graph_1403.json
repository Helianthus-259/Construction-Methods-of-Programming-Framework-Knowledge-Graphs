[
  {
    "head": "org.springframework.util.StringValueResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringValueResolver#resolveStringValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringValueResolver#resolveStringValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SystemPropertyUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Helper class for resolving placeholders in texts. Usually applied to file paths.\n *\n * <p>A text may contain {@code ${...}} placeholders, to be resolved as system properties:\n * for example, {@code ${user.dir}}. Default values can be supplied using the \":\" separator\n * between key and value.\n *\n * @author Juergen Hoeller\n * @author Rob Harrop\n * @author Dave Syer\n * @since 1.2.5\n * @see #PLACEHOLDER_PREFIX\n * @see #PLACEHOLDER_SUFFIX\n * @see System#getProperty(String)\n */\npublic abstract class SystemPropertyUtils {\n\n\t/** Prefix for system property placeholders: {@value}. */\n\tpublic static final String PLACEHOLDER_PREFIX = \"${\";\n\n\t/** Suffix for system property placeholders: {@value}. */\n\tpublic static final String PLACEHOLDER_SUFFIX = \"}\";\n\n\t/** Value separator for system property placeholders: {@value}. */\n\tpublic static final String VALUE_SEPARATOR = \":\";\n\n\t/** Default escape character: {@code '\\'}. */\n\tpublic static final Character ESCAPE_CHARACTER = '\\\\';\n\n\n\tprivate static final PropertyPlaceholderHelper strictHelper =\n\t\t\tnew PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR,\n\t\t\t\t\tESCAPE_CHARACTER, false);\n\n\tprivate static final PropertyPlaceholderHelper nonStrictHelper =\n\t\t\tnew PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR,\n\t\t\t\t\tESCAPE_CHARACTER, true);\n\n\n\t/**\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values.\n\t * @param text the String to resolve\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t */\n\tpublic static String resolvePlaceholders(String text) {\n\t\treturn resolvePlaceholders(text, false);\n\t}\n\n\t/**\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values. Unresolvable placeholders with no default\n\t * value are ignored and passed through unchanged if the flag is set to {@code true}.\n\t * @param text the String to resolve\n\t * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\n\t */\n\tpublic static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {\n\t\tif (text.isEmpty()) {\n\t\t\treturn text;\n\t\t}\n\t\tPropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);\n\t\treturn helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));\n\t}\n\n\n\t/**\n\t * PlaceholderResolver implementation that resolves against system properties\n\t * and system environment variables.\n\t */\n\tprivate static class SystemPropertyPlaceholderResolver implements PropertyPlaceholderHelper.PlaceholderResolver {\n\n\t\tprivate final String text;\n\n\t\tpublic SystemPropertyPlaceholderResolver(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable String resolvePlaceholder(String placeholderName) {\n\t\t\ttry {\n\t\t\t\tString propVal = System.getProperty(placeholderName);\n\t\t\t\tif (propVal == null) {\n\t\t\t\t\t// Fall back to searching the system environment.\n\t\t\t\t\tpropVal = System.getenv(placeholderName);\n\t\t\t\t}\n\t\t\t\treturn propVal;\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tSystem.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" +\n\t\t\t\t\t\tthis.text + \"] as system property: \" + ex);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#PLACEHOLDER_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#PLACEHOLDER_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#PLACEHOLDER_SUFFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#PLACEHOLDER_SUFFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#VALUE_SEPARATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#VALUE_SEPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#ESCAPE_CHARACTER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#ESCAPE_CHARACTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "Character",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#strictHelper",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#strictHelper",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertyPlaceholderHelper",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyUtils#nonStrictHelper",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#nonStrictHelper",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertyPlaceholderHelper",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values.\r\n * @param text the String to resolve\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n */\r\npublic static String resolvePlaceholders(String text) {\r\n    return resolvePlaceholders(text, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve {@code ${...}} placeholders in the given text, replacing them with\r\n * corresponding system property values. Unresolvable placeholders with no default\r\n * value are ignored and passed through unchanged if the flag is set to {@code true}.\r\n * @param text the String to resolve\r\n * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\r\n * @return the resolved String\r\n * @throws IllegalArgumentException if there is an unresolvable placeholder\r\n * @see #PLACEHOLDER_PREFIX\r\n * @see #PLACEHOLDER_SUFFIX\r\n * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\r\n */\r\npublic static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {\r\n    if (text.isEmpty()) {\r\n        return text;\r\n    }\r\n    PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);\r\n    return helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));\r\n}",
    "tailType": "method_code"
  }
]