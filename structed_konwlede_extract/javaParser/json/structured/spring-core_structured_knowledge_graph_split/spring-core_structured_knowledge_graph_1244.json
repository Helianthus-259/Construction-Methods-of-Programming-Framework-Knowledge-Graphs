[
  {
    "head": "org.springframework.util.backoff.ExponentialBackOffExecution#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.backoff",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.backoff",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.backoff.FixedBackOff",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.backoff;\n\n/**\n * A simple {@link BackOff} implementation that provides a fixed interval\n * between two attempts and a maximum number of retries.\n *\n * @author Stephane Nicoll\n * @since 4.1\n */\npublic class FixedBackOff implements BackOff {\n\n\t/**\n\t * The default recovery interval: 5000 ms = 5 seconds.\n\t */\n\tpublic static final long DEFAULT_INTERVAL = 5000;\n\n\t/**\n\t * Constant value indicating an unlimited number of attempts.\n\t */\n\tpublic static final long UNLIMITED_ATTEMPTS = Long.MAX_VALUE;\n\n\tprivate long interval = DEFAULT_INTERVAL;\n\n\tprivate long maxAttempts = UNLIMITED_ATTEMPTS;\n\n\n\t/**\n\t * Create an instance with an interval of {@value #DEFAULT_INTERVAL}\n\t * ms and an unlimited number of attempts.\n\t */\n\tpublic FixedBackOff() {\n\t}\n\n\t/**\n\t * Create an instance.\n\t * @param interval the interval between two attempts\n\t * @param maxAttempts the maximum number of attempts\n\t */\n\tpublic FixedBackOff(long interval, long maxAttempts) {\n\t\tthis.interval = interval;\n\t\tthis.maxAttempts = maxAttempts;\n\t}\n\n\n\t/**\n\t * Set the interval between two attempts in milliseconds.\n\t */\n\tpublic void setInterval(long interval) {\n\t\tthis.interval = interval;\n\t}\n\n\t/**\n\t * Return the interval between two attempts in milliseconds.\n\t */\n\tpublic long getInterval() {\n\t\treturn this.interval;\n\t}\n\n\t/**\n\t * Set the maximum number of attempts in milliseconds.\n\t */\n\tpublic void setMaxAttempts(long maxAttempts) {\n\t\tthis.maxAttempts = maxAttempts;\n\t}\n\n\t/**\n\t * Return the maximum number of attempts in milliseconds.\n\t */\n\tpublic long getMaxAttempts() {\n\t\treturn this.maxAttempts;\n\t}\n\n\t@Override\n\tpublic BackOffExecution start() {\n\t\treturn new FixedBackOffExecution();\n\t}\n\n\n\tprivate class FixedBackOffExecution implements BackOffExecution {\n\n\t\tprivate long currentAttempts = 0;\n\n\t\t@Override\n\t\tpublic long nextBackOff() {\n\t\t\tthis.currentAttempts++;\n\t\t\tif (this.currentAttempts <= getMaxAttempts()) {\n\t\t\t\treturn getInterval();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn STOP;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tString attemptValue = (FixedBackOff.this.maxAttempts == Long.MAX_VALUE ?\n\t\t\t\t\t\"unlimited\" : String.valueOf(FixedBackOff.this.maxAttempts));\n\t\t\treturn \"FixedBackOff{interval=\" + FixedBackOff.this.interval +\n\t\t\t\t\t\", currentAttempts=\" + this.currentAttempts +\n\t\t\t\t\t\", maxAttempts=\" + attemptValue +\n\t\t\t\t\t'}';\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.FixedBackOff#DEFAULT_INTERVAL",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#DEFAULT_INTERVAL",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.FixedBackOff#UNLIMITED_ATTEMPTS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#UNLIMITED_ATTEMPTS",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.FixedBackOff#interval",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#interval",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.backoff.FixedBackOff#maxAttempts",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#maxAttempts",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#setInterval(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the interval between two attempts in milliseconds.\r\n */\r\npublic void setInterval(long interval) {\r\n    this.interval = interval;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.FixedBackOff#setInterval(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#getInterval()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the interval between two attempts in milliseconds.\r\n */\r\npublic long getInterval() {\r\n    return this.interval;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.FixedBackOff#getInterval()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#setMaxAttempts(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the maximum number of attempts in milliseconds.\r\n */\r\npublic void setMaxAttempts(long maxAttempts) {\r\n    this.maxAttempts = maxAttempts;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.FixedBackOff#setMaxAttempts(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff#getMaxAttempts()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum number of attempts in milliseconds.\r\n */\r\npublic long getMaxAttempts() {\r\n    return this.maxAttempts;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.FixedBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.FixedBackOff#getMaxAttempts()",
    "tailType": "method"
  }
]