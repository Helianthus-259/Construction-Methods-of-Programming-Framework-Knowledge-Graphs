[
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#store(Properties,OutputStream,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#store(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#store(Properties,Writer,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void store(Properties props, Writer writer, String header) throws IOException {\r\n    props.store(writer, header);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#store(Properties,Writer,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#store(Properties,Writer,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#loadFromXml(Properties,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void loadFromXml(Properties props, InputStream is) throws IOException {\r\n    props.loadFromXML(is);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#loadFromXml(Properties,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#loadFromXml(Properties,InputStream)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void storeToXml(Properties props, OutputStream os, String header) throws IOException {\r\n    props.storeToXML(os, header);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException {\r\n    props.storeToXML(os, header, encoding);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultPropertiesPersister#storeToXml(Properties,OutputStream,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.DigestUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n/**\n * Miscellaneous methods for calculating digests.\n *\n * <p>Mainly for internal use within the framework; consider\n * <a href=\"https://commons.apache.org/codec/\">Apache Commons Codec</a>\n * for a more comprehensive suite of digest utilities.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @author Craig Andrews\n * @since 3.0\n */\npublic abstract class DigestUtils {\n\n\tprivate static final String MD5_ALGORITHM_NAME = \"MD5\";\n\n\tprivate static final char[] HEX_CHARS =\n\t\t\t{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n\n\n\t/**\n\t * Calculate the MD5 digest of the given bytes.\n\t * @param bytes the bytes to calculate the digest over\n\t * @return the digest\n\t */\n\tpublic static byte[] md5Digest(byte[] bytes) {\n\t\treturn digest(MD5_ALGORITHM_NAME, bytes);\n\t}\n\n\t/**\n\t * Calculate the MD5 digest of the given stream.\n\t * <p>This method does <strong>not</strong> close the input stream.\n\t * @param inputStream the InputStream to calculate the digest over\n\t * @return the digest\n\t * @since 4.2\n\t */\n\tpublic static byte[] md5Digest(InputStream inputStream) throws IOException {\n\t\treturn digest(MD5_ALGORITHM_NAME, inputStream);\n\t}\n\n\t/**\n\t * Return a hexadecimal string representation of the MD5 digest of the given bytes.\n\t * @param bytes the bytes to calculate the digest over\n\t * @return a hexadecimal digest string\n\t */\n\tpublic static String md5DigestAsHex(byte[] bytes) {\n\t\treturn digestAsHexString(MD5_ALGORITHM_NAME, bytes);\n\t}\n\n\t/**\n\t * Return a hexadecimal string representation of the MD5 digest of the given stream.\n\t * <p>This method does <strong>not</strong> close the input stream.\n\t * @param inputStream the InputStream to calculate the digest over\n\t * @return a hexadecimal digest string\n\t * @since 4.2\n\t */\n\tpublic static String md5DigestAsHex(InputStream inputStream) throws IOException {\n\t\treturn digestAsHexString(MD5_ALGORITHM_NAME, inputStream);\n\t}\n\n\t/**\n\t * Append a hexadecimal string representation of the MD5 digest of the given\n\t * bytes to the given {@link StringBuilder}.\n\t * @param bytes the bytes to calculate the digest over\n\t * @param builder the string builder to append the digest to\n\t * @return the given string builder\n\t */\n\tpublic static StringBuilder appendMd5DigestAsHex(byte[] bytes, StringBuilder builder) {\n\t\treturn appendDigestAsHex(MD5_ALGORITHM_NAME, bytes, builder);\n\t}\n\n\t/**\n\t * Append a hexadecimal string representation of the MD5 digest of the given\n\t * inputStream to the given {@link StringBuilder}.\n\t * <p>This method does <strong>not</strong> close the input stream.\n\t * @param inputStream the inputStream to calculate the digest over\n\t * @param builder the string builder to append the digest to\n\t * @return the given string builder\n\t * @since 4.2\n\t */\n\tpublic static StringBuilder appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder) throws IOException {\n\t\treturn appendDigestAsHex(MD5_ALGORITHM_NAME, inputStream, builder);\n\t}\n\n\n\t/**\n\t * Create a new {@link MessageDigest} with the given algorithm.\n\t * <p>Necessary because {@code MessageDigest} is not thread-safe.\n\t */\n\tprivate static MessageDigest getDigest(String algorithm) {\n\t\ttry {\n\t\t\treturn MessageDigest.getInstance(algorithm);\n\t\t}\n\t\tcatch (NoSuchAlgorithmException ex) {\n\t\t\tthrow new IllegalStateException(\"Could not find MessageDigest with algorithm \\\"\" + algorithm + \"\\\"\", ex);\n\t\t}\n\t}\n\n\tprivate static byte[] digest(String algorithm, byte[] bytes) {\n\t\treturn getDigest(algorithm).digest(bytes);\n\t}\n\n\tprivate static byte[] digest(String algorithm, InputStream inputStream) throws IOException {\n\t\tMessageDigest messageDigest = getDigest(algorithm);\n\t\tif (inputStream instanceof UpdateMessageDigestInputStream digestInputStream){\n\t\t\tdigestInputStream.updateMessageDigest(messageDigest);\n\t\t\treturn messageDigest.digest();\n\t\t}\n\t\telse {\n\t\t\tfinal byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];\n\t\t\tint bytesRead;\n\t\t\twhile ((bytesRead = inputStream.read(buffer)) != -1) {\n\t\t\t\tmessageDigest.update(buffer, 0, bytesRead);\n\t\t\t}\n\t\t\treturn messageDigest.digest();\n\t\t}\n\t}\n\n\tprivate static String digestAsHexString(String algorithm, byte[] bytes) {\n\t\tchar[] hexDigest = digestAsHexChars(algorithm, bytes);\n\t\treturn new String(hexDigest);\n\t}\n\n\tprivate static String digestAsHexString(String algorithm, InputStream inputStream) throws IOException {\n\t\tchar[] hexDigest = digestAsHexChars(algorithm, inputStream);\n\t\treturn new String(hexDigest);\n\t}\n\n\tprivate static StringBuilder appendDigestAsHex(String algorithm, byte[] bytes, StringBuilder builder) {\n\t\tchar[] hexDigest = digestAsHexChars(algorithm, bytes);\n\t\treturn builder.append(hexDigest);\n\t}\n\n\tprivate static StringBuilder appendDigestAsHex(String algorithm, InputStream inputStream, StringBuilder builder)\n\t\t\tthrows IOException {\n\n\t\tchar[] hexDigest = digestAsHexChars(algorithm, inputStream);\n\t\treturn builder.append(hexDigest);\n\t}\n\n\tprivate static char[] digestAsHexChars(String algorithm, byte[] bytes) {\n\t\tbyte[] digest = digest(algorithm, bytes);\n\t\treturn encodeHex(digest);\n\t}\n\n\tprivate static char[] digestAsHexChars(String algorithm, InputStream inputStream) throws IOException {\n\t\tbyte[] digest = digest(algorithm, inputStream);\n\t\treturn encodeHex(digest);\n\t}\n\n\tprivate static char[] encodeHex(byte[] bytes) {\n\t\tchar[] chars = new char[32];\n\t\tfor (int i = 0; i < chars.length; i = i + 2) {\n\t\t\tbyte b = bytes[i / 2];\n\t\t\tchars[i] = HEX_CHARS[(b >>> 0x4) & 0xf];\n\t\t\tchars[i + 1] = HEX_CHARS[b & 0xf];\n\t\t}\n\t\treturn chars;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DigestUtils#MD5_ALGORITHM_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DigestUtils#MD5_ALGORITHM_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DigestUtils#HEX_CHARS",
    "tailType": "field"
  }
]