[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector#isBestCandidate(MergedAnnotation<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the existing annotation is known to be the best\r\n * candidate and any subsequent selections may be skipped.\r\n * @param annotation the annotation to check\r\n * @return {@code true} if the annotation is known to be the best candidate\r\n */\r\ndefault boolean isBestCandidate(MergedAnnotation<A> annotation) {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelector#isBestCandidate(MergedAnnotation<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector#select(MergedAnnotation<A>,MergedAnnotation<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Select the annotation that should be used.\r\n * @param existing an existing annotation returned from an earlier result\r\n * @param candidate a candidate annotation that may be better suited\r\n * @return the most appropriate annotation from the {@code existing} or\r\n * {@code candidate}\r\n */\r\nMergedAnnotation<A> select(MergedAnnotation<A> existing, MergedAnnotation<A> candidate);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelector#select(MergedAnnotation<A>,MergedAnnotation<A>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.function.Predicate;\n\n/**\n * {@link MergedAnnotationSelector} implementations that provide various options\n * for {@link MergedAnnotation} instances.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see MergedAnnotations#get(Class, Predicate, MergedAnnotationSelector)\n * @see MergedAnnotations#get(String, Predicate, MergedAnnotationSelector)\n */\npublic abstract class MergedAnnotationSelectors {\n\n\tprivate static final MergedAnnotationSelector<?> NEAREST = new Nearest();\n\n\tprivate static final MergedAnnotationSelector<?> FIRST_DIRECTLY_DECLARED = new FirstDirectlyDeclared();\n\n\n\tprivate MergedAnnotationSelectors() {\n\t}\n\n\n\t/**\n\t * Select the nearest annotation, i.e. the one with the lowest distance.\n\t * @return a selector that picks the annotation with the lowest distance\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> nearest() {\n\t\treturn (MergedAnnotationSelector<A>) NEAREST;\n\t}\n\n\t/**\n\t * Select the first directly declared annotation when possible. If no direct\n\t * annotations are declared then the nearest annotation is selected.\n\t * @return a selector that picks the first directly declared annotation whenever possible\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> firstDirectlyDeclared() {\n\t\treturn (MergedAnnotationSelector<A>) FIRST_DIRECTLY_DECLARED;\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the nearest annotation.\n\t */\n\tprivate static class Nearest implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (candidate.getDistance() < existing.getDistance()) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the first directly declared\n\t * annotation.\n\t */\n\tprivate static class FirstDirectlyDeclared implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (existing.getDistance() > 0 && candidate.getDistance() == 0) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelectors#NEAREST",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#NEAREST",
    "headType": "field",
    "relation": "haveType",
    "tail": "MergedAnnotationSelector<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelectors#FIRST_DIRECTLY_DECLARED",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#FIRST_DIRECTLY_DECLARED",
    "headType": "field",
    "relation": "haveType",
    "tail": "MergedAnnotationSelector<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#nearest()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Select the nearest annotation, i.e. the one with the lowest distance.\r\n * @return a selector that picks the annotation with the lowest distance\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <A extends Annotation> MergedAnnotationSelector<A> nearest() {\r\n    return (MergedAnnotationSelector<A>) NEAREST;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelectors#nearest()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#nearest()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#firstDirectlyDeclared()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Select the first directly declared annotation when possible. If no direct\r\n * annotations are declared then the nearest annotation is selected.\r\n * @return a selector that picks the first directly declared annotation whenever possible\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <A extends Annotation> MergedAnnotationSelector<A> firstDirectlyDeclared() {\r\n    return (MergedAnnotationSelector<A>) FIRST_DIRECTLY_DECLARED;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationSelectors#firstDirectlyDeclared()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationSelectors#firstDirectlyDeclared()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.Nearest",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.Nearest",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.function.Predicate;\n\n/**\n * {@link MergedAnnotationSelector} implementations that provide various options\n * for {@link MergedAnnotation} instances.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see MergedAnnotations#get(Class, Predicate, MergedAnnotationSelector)\n * @see MergedAnnotations#get(String, Predicate, MergedAnnotationSelector)\n */\npublic abstract class MergedAnnotationSelectors {\n\n\tprivate static final MergedAnnotationSelector<?> NEAREST = new Nearest();\n\n\tprivate static final MergedAnnotationSelector<?> FIRST_DIRECTLY_DECLARED = new FirstDirectlyDeclared();\n\n\n\tprivate MergedAnnotationSelectors() {\n\t}\n\n\n\t/**\n\t * Select the nearest annotation, i.e. the one with the lowest distance.\n\t * @return a selector that picks the annotation with the lowest distance\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> nearest() {\n\t\treturn (MergedAnnotationSelector<A>) NEAREST;\n\t}\n\n\t/**\n\t * Select the first directly declared annotation when possible. If no direct\n\t * annotations are declared then the nearest annotation is selected.\n\t * @return a selector that picks the first directly declared annotation whenever possible\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> firstDirectlyDeclared() {\n\t\treturn (MergedAnnotationSelector<A>) FIRST_DIRECTLY_DECLARED;\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the nearest annotation.\n\t */\n\tprivate static class Nearest implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (candidate.getDistance() < existing.getDistance()) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the first directly declared\n\t * annotation.\n\t */\n\tprivate static class FirstDirectlyDeclared implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (existing.getDistance() > 0 && candidate.getDistance() == 0) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.Nearest#isBestCandidate(MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\r\n    return annotation.getDistance() == 0;\r\n}",
    "tailType": "method_code"
  }
]