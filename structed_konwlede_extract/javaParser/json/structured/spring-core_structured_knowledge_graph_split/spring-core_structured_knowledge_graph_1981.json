[
  {
    "head": "org.springframework.core.env.MatchesProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MatchesProfilesTests#activeProfileSetProgrammatically()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#activeProfileSetProgrammatically()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#activeProfileSetViaProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid activeProfileSetViaProperty() {\r\n    assertThat(environment.matchesProfiles(\"p1\")).isFalse();\r\n    environment.getPropertySources().addFirst(new MockPropertySource().withProperty(ACTIVE_PROFILES_PROPERTY_NAME, \"p1\"));\r\n    assertThat(environment.matchesProfiles(\"p1\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MatchesProfilesTests#activeProfileSetViaProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#activeProfileSetViaProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#defaultProfile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultProfile() {\r\n    assertThat(environment.matchesProfiles(\"pd\")).isFalse();\r\n    environment.setDefaultProfiles(\"pd\");\r\n    assertThat(environment.matchesProfiles(\"pd\")).isTrue();\r\n    environment.setActiveProfiles(\"p1\");\r\n    assertThat(environment.matchesProfiles(\"pd\")).isFalse();\r\n    assertThat(environment.matchesProfiles(\"p1\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MatchesProfilesTests#defaultProfile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#defaultProfile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#withNotOperator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withNotOperator() {\r\n    assertThat(environment.matchesProfiles(\"p1\")).isFalse();\r\n    assertThat(environment.matchesProfiles(\"!p1\")).isTrue();\r\n    environment.addActiveProfile(\"p1\");\r\n    assertThat(environment.matchesProfiles(\"p1\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"!p1\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MatchesProfilesTests#withNotOperator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#withNotOperator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#withProfileExpressions()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withProfileExpressions() {\r\n    assertThat(environment.matchesProfiles(\"p1 & p2\")).isFalse();\r\n    environment.addActiveProfile(\"p1\");\r\n    assertThat(environment.matchesProfiles(\"p1 | p2\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"p1 & p2\")).isFalse();\r\n    environment.addActiveProfile(\"p2\");\r\n    assertThat(environment.matchesProfiles(\"p1 & p2\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"p1 | p2\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"foo | p1\", \"p2\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"foo | p2\", \"p1\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"foo | (p2 & p1)\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"p2 & (foo | p1)\")).isTrue();\r\n    assertThat(environment.matchesProfiles(\"foo\", \"(p2 & p1)\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MatchesProfilesTests#withProfileExpressions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MatchesProfilesTests#withProfileExpressions()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySourceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySourceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SystemEnvironmentPropertySource}.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n */\nclass SystemEnvironmentPropertySourceTests {\n\n\tprivate Map<String, Object> envMap;\n\n\tprivate PropertySource<?> ps;\n\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tenvMap = new HashMap<>();\n\t\tps = new SystemEnvironmentPropertySource(\"sysEnv\", envMap);\n\t}\n\n\n\t@Test\n\tvoid none() {\n\t\tassertThat(ps.containsProperty(\"a.key\")).isFalse();\n\t\tassertThat(ps.getProperty(\"a.key\")).isNull();\n\t}\n\n\t@Test\n\tvoid normalWithoutPeriod() {\n\t\tenvMap.put(\"akey\", \"avalue\");\n\n\t\tassertThat(ps.containsProperty(\"akey\")).isTrue();\n\t\tassertThat(ps.getProperty(\"akey\")).isEqualTo(\"avalue\");\n\t}\n\n\t@Test\n\tvoid normalWithPeriod() {\n\t\tenvMap.put(\"a.key\", \"a.value\");\n\n\t\tassertThat(ps.containsProperty(\"a.key\")).isTrue();\n\t\tassertThat(ps.getProperty(\"a.key\")).isEqualTo(\"a.value\");\n\t}\n\n\t@Test\n\tvoid withUnderscore() {\n\t\tenvMap.put(\"a_key\", \"a_value\");\n\n\t\tassertThat(ps.containsProperty(\"a_key\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"a.key\")).isTrue();\n\n\t\tassertThat(ps.getProperty(\"a_key\")).isEqualTo(\"a_value\");\n\t\tassertThat( ps.getProperty(\"a.key\")).isEqualTo(\"a_value\");\n\t}\n\n\t@Test\n\tvoid withBothPeriodAndUnderscore() {\n\t\tenvMap.put(\"a_key\", \"a_value\");\n\t\tenvMap.put(\"a.key\", \"a.value\");\n\n\t\tassertThat(ps.getProperty(\"a_key\")).isEqualTo(\"a_value\");\n\t\tassertThat( ps.getProperty(\"a.key\")).isEqualTo(\"a.value\");\n\t}\n\n\t@Test\n\tvoid withUppercase() {\n\t\tenvMap.put(\"A_KEY\", \"a_value\");\n\t\tenvMap.put(\"A_LONG_KEY\", \"a_long_value\");\n\t\tenvMap.put(\"A_DOT.KEY\", \"a_dot_value\");\n\t\tenvMap.put(\"A_HYPHEN-KEY\", \"a_hyphen_value\");\n\n\t\tassertThat(ps.containsProperty(\"A_KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"a_key\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"a.key\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"a-key\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_LONG_KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.LONG.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-LONG-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.LONG-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-LONG.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_long_KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.long.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-long-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.long-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-long.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_DOT.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-DOT.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_dot.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A-dot.KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_HYPHEN-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.HYPHEN-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A_hyphen-KEY\")).isTrue();\n\t\tassertThat(ps.containsProperty(\"A.hyphen-KEY\")).isTrue();\n\n\t\tassertThat(ps.getProperty(\"A_KEY\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"A.KEY\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"A-KEY\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"a_key\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"a.key\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"a-key\")).isEqualTo(\"a_value\");\n\t\tassertThat(ps.getProperty(\"A_LONG_KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A.LONG.KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A-LONG-KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A.LONG-KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A-LONG.KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A_long_KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A.long.KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A-long-KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A.long-KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A-long.KEY\")).isEqualTo(\"a_long_value\");\n\t\tassertThat(ps.getProperty(\"A_DOT.KEY\")).isEqualTo(\"a_dot_value\");\n\t\tassertThat(ps.getProperty(\"A-DOT.KEY\")).isEqualTo(\"a_dot_value\");\n\t\tassertThat(ps.getProperty(\"A_dot.KEY\")).isEqualTo(\"a_dot_value\");\n\t\tassertThat(ps.getProperty(\"A-dot.KEY\")).isEqualTo(\"a_dot_value\");\n\t\tassertThat(ps.getProperty(\"A_HYPHEN-KEY\")).isEqualTo(\"a_hyphen_value\");\n\t\tassertThat(ps.getProperty(\"A.HYPHEN-KEY\")).isEqualTo(\"a_hyphen_value\");\n\t\tassertThat(ps.getProperty(\"A_hyphen-KEY\")).isEqualTo(\"a_hyphen_value\");\n\t\tassertThat(ps.getProperty(\"A.hyphen-KEY\")).isEqualTo(\"a_hyphen_value\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySourceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySourceTests#envMap",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySourceTests#envMap",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySourceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySourceTests#ps",
    "tailType": "field"
  }
]