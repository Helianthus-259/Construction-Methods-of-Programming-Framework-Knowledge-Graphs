[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.TransformingClassGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.ClassGenerator;\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic class TransformingClassGenerator implements ClassGenerator {\n    private final ClassGenerator gen;\n    private final ClassTransformer t;\n\n    public TransformingClassGenerator(ClassGenerator gen, ClassTransformer t) {\n        this.gen = gen;\n        this.t = t;\n    }\n\n    @Override\n    public void generateClass(ClassVisitor v) throws Exception {\n        t.setTarget(v);\n        gen.generateClass(t);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.TransformingClassGenerator#gen",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator#gen",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.TransformingClassGenerator#t",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator#t",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassTransformer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    t.setTarget(v);\r\n    gen.generateClass(t);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.TransformingClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassReader;\nimport org.springframework.cglib.core.ClassGenerator;\nimport org.springframework.cglib.core.ClassTransformer;\n\npublic class TransformingClassLoader extends AbstractClassLoader {\n    private final ClassTransformerFactory t;\n\n    public TransformingClassLoader(ClassLoader parent, ClassFilter filter, ClassTransformerFactory t) {\n        super(parent, parent, filter);\n        this.t = t;\n    }\n\n    @Override\n    protected ClassGenerator getGenerator(ClassReader r) {\n        ClassTransformer t2 = t.newInstance();\n        return new TransformingClassGenerator(super.getGenerator(r), t2);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.TransformingClassLoader#t",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader#t",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassTransformerFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassGenerator getGenerator(ClassReader r) {\r\n    ClassTransformer t2 = t.newInstance();\r\n    return new TransformingClassGenerator(super.getGenerator(r), t2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader#getGenerator(ClassReader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.TransformingClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.util",
    "tailType": "package"
  }
]