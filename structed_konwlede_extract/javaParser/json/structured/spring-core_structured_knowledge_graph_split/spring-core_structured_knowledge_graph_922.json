[
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getProperty(String key, String defaultValue) {\r\n    String value = getProperty(key);\r\n    return (value != null ? value : defaultValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,Class<T>,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> T getProperty(String key, Class<T> targetType, T defaultValue) {\r\n    T value = getProperty(key, targetType);\r\n    return (value != null ? value : defaultValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,Class<T>,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String,Class<T>,T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getRequiredProperty(String key) throws IllegalStateException {\r\n    String value = getProperty(key);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"Required key '\" + key + \"' not found\");\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> T getRequiredProperty(String key, Class<T> valueType) throws IllegalStateException {\r\n    T value = getProperty(key, valueType);\r\n    if (value == null) {\r\n        throw new IllegalStateException(\"Required key '\" + key + \"' not found\");\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getRequiredProperty(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#resolvePlaceholders(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String resolvePlaceholders(String text) {\r\n    if (this.nonStrictHelper == null) {\r\n        this.nonStrictHelper = createPlaceholderHelper(true);\r\n    }\r\n    return doResolvePlaceholders(text, this.nonStrictHelper);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#resolvePlaceholders(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#resolvePlaceholders(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#resolveRequiredPlaceholders(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String resolveRequiredPlaceholders(String text) throws IllegalArgumentException {\r\n    if (this.strictHelper == null) {\r\n        this.strictHelper = createPlaceholderHelper(false);\r\n    }\r\n    return doResolvePlaceholders(text, this.strictHelper);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#resolveRequiredPlaceholders(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#resolveRequiredPlaceholders(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#resolveNestedPlaceholders(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve placeholders within the given string, deferring to the value of\r\n * {@link #setIgnoreUnresolvableNestedPlaceholders} to determine whether any\r\n * unresolvable placeholders should raise an exception or be ignored.\r\n * <p>Invoked from {@link #getProperty} and its variants, implicitly resolving\r\n * nested placeholders. In contrast, {@link #resolvePlaceholders} and\r\n * {@link #resolveRequiredPlaceholders} do <i>not</i> delegate\r\n * to this method but rather perform their own handling of unresolvable\r\n * placeholders, as specified by each of those methods.\r\n * @since 3.2\r\n * @see #setIgnoreUnresolvableNestedPlaceholders\r\n */\r\nprotected String resolveNestedPlaceholders(String value) {\r\n    if (value.isEmpty()) {\r\n        return value;\r\n    }\r\n    return (this.ignoreUnresolvableNestedPlaceholders ? resolvePlaceholders(value) : resolveRequiredPlaceholders(value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#resolveNestedPlaceholders(String)",
    "tailType": "method"
  }
]