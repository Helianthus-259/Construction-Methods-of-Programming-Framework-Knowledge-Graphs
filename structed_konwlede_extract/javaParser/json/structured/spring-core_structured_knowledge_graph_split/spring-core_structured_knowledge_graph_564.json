[
  {
    "head": "org.springframework.cglib.core.FieldInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.FieldInfo#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.FieldInfo#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.FieldInfo#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return access ^ name.hashCode() ^ type.hashCode() ^ ((value == null) ? 0 : value.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.FieldInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.FieldInfo#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.FieldInfo#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.ClassesKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\npublic class ClassesKey {\n    private static final Key FACTORY = (Key)KeyFactory.create(Key.class);\n\n    interface Key {\n        Object newInstance(Object[] array);\n    }\n\n    private ClassesKey() {\n    }\n\n    public static Object create(Object[] array) {\n        return FACTORY.newInstance(classNames(array));\n    }\n\n    private static String[] classNames(Object[] objects) {\n        if (objects == null) {\n            return null;\n        }\n        String[] classNames = new String[objects.length];\n        for (int i = 0; i < objects.length; i++) {\n            Object object = objects[i];\n            if (object != null) {\n                Class<?> aClass = object.getClass();\n                classNames[i] = aClass == null ? null : aClass.getName();\n            }\n        }\n        return classNames;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ClassesKey#FACTORY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey#FACTORY",
    "headType": "field",
    "relation": "haveType",
    "tail": "Key",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey#create(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Object create(Object[] array) {\r\n    return FACTORY.newInstance(classNames(array));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassesKey#create(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey#classNames(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String[] classNames(Object[] objects) {\r\n    if (objects == null) {\r\n        return null;\r\n    }\r\n    String[] classNames = new String[objects.length];\r\n    for (int i = 0; i < objects.length; i++) {\r\n        Object object = objects[i];\r\n        if (object != null) {\r\n            Class<?> aClass = object.getClass();\r\n            classNames[i] = aClass == null ? null : aClass.getName();\r\n        }\r\n    }\r\n    return classNames;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassesKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassesKey#classNames(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.Key",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.Key",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\npublic class ClassesKey {\n    private static final Key FACTORY = (Key)KeyFactory.create(Key.class);\n\n    interface Key {\n        Object newInstance(Object[] array);\n    }\n\n    private ClassesKey() {\n    }\n\n    public static Object create(Object[] array) {\n        return FACTORY.newInstance(classNames(array));\n    }\n\n    private static String[] classNames(Object[] objects) {\n        if (objects == null) {\n            return null;\n        }\n        String[] classNames = new String[objects.length];\n        for (int i = 0; i < objects.length; i++) {\n            Object object = objects[i];\n            if (object != null) {\n                Class<?> aClass = object.getClass();\n                classNames[i] = aClass == null ? null : aClass.getName();\n            }\n        }\n        return classNames;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.Key#newInstance(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "Object newInstance(Object[] array);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.Key",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.Key#newInstance(Object[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.ClassGenerator",
    "tailType": "class"
  }
]