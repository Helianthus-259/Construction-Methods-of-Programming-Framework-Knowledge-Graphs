[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyListToObject() {\r\n    conversionService.addConverter(new CollectionToObjectConverter(conversionService));\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    List<String> list = new ArrayList<>();\r\n    TypeDescriptor sourceType = TypeDescriptor.forObject(list);\r\n    TypeDescriptor targetType = TypeDescriptor.valueOf(Integer.class);\r\n    assertThat(conversionService.canConvert(sourceType, targetType)).isTrue();\r\n    assertThat(conversionService.convert(list, sourceType, targetType)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#emptyListToObject()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToArrayCanConvert()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToArrayCanConvert() {\r\n    conversionService.addConverter(new StringToArrayConverter(conversionService));\r\n    assertThat(conversionService.canConvert(String.class, Integer[].class)).isFalse();\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(String.class, Integer[].class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToArrayCanConvert()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToArrayCanConvert()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToCollectionCanConvert()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToCollectionCanConvert() throws Exception {\r\n    conversionService.addConverter(new StringToCollectionConverter(conversionService));\r\n    assertThat(conversionService.canConvert(String.class, Collection.class)).isTrue();\r\n    TypeDescriptor targetType = new TypeDescriptor(getClass().getField(\"integerCollection\"));\r\n    assertThat(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType)).isFalse();\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToCollectionCanConvert()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToCollectionCanConvert()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairsInSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertiblePairsInSet() {\r\n    Set<GenericConverter.ConvertiblePair> set = new HashSet<>();\r\n    set.add(new GenericConverter.ConvertiblePair(Number.class, String.class));\r\n    assert set.contains(new GenericConverter.ConvertiblePair(Number.class, String.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairsInSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairsInSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairEqualsAndHash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertiblePairEqualsAndHash() {\r\n    GenericConverter.ConvertiblePair pair = new GenericConverter.ConvertiblePair(Number.class, String.class);\r\n    GenericConverter.ConvertiblePair pairEqual = new GenericConverter.ConvertiblePair(Number.class, String.class);\r\n    assertThat(pairEqual).isEqualTo(pair);\r\n    assertThat(pairEqual.hashCode()).isEqualTo(pair.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairEqualsAndHash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairEqualsAndHash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairDifferentEqualsAndHash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertiblePairDifferentEqualsAndHash() {\r\n    GenericConverter.ConvertiblePair pair = new GenericConverter.ConvertiblePair(Number.class, String.class);\r\n    GenericConverter.ConvertiblePair pairOpposite = new GenericConverter.ConvertiblePair(String.class, Number.class);\r\n    assertThat(pair).isNotEqualTo(pairOpposite);\r\n    assertThat(pair.hashCode()).isNotEqualTo(pairOpposite.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairDifferentEqualsAndHash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertiblePairDifferentEqualsAndHash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertIllegalArgumentNullTargetTypeFromClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertIllegalArgumentNullTargetTypeFromClass() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.canConvert(String.class, null));\r\n}",
    "tailType": "method_code"
  }
]