[
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks whether the underlying file is marked as readable\r\n * (and corresponds to an actual file with content, not to a directory).\r\n * @see java.io.File#canRead()\r\n * @see java.io.File#isDirectory()\r\n * @see java.nio.file.Files#isReadable(Path)\r\n * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic boolean isReadable() {\r\n    return (this.file != null ? this.file.canRead() && !this.file.isDirectory() : Files.isReadable(this.filePath) && !Files.isDirectory(this.filePath));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens an NIO file stream for the underlying file.\r\n * @see java.nio.file.Files#newInputStream(Path, java.nio.file.OpenOption...)\r\n */\r\n@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    try {\r\n        return Files.newInputStream(this.filePath);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte[] getContentAsByteArray() throws IOException {\r\n    try {\r\n        return Files.readAllBytes(this.filePath);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getContentAsByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getContentAsString(Charset charset) throws IOException {\r\n    try {\r\n        return Files.readString(this.filePath, charset);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getContentAsString(Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks whether the underlying file is marked as writable\r\n * (and corresponds to an actual file with content, not to a directory).\r\n * @see java.io.File#canWrite()\r\n * @see java.io.File#isDirectory()\r\n * @see java.nio.file.Files#isWritable(Path)\r\n * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)\r\n */\r\n@Override\r\npublic boolean isWritable() {\r\n    return (this.file != null ? this.file.canWrite() && !this.file.isDirectory() : Files.isWritable(this.filePath) && !Files.isDirectory(this.filePath));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#isWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isWritable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens a FileOutputStream for the underlying file.\r\n * @see java.nio.file.Files#newOutputStream(Path, java.nio.file.OpenOption...)\r\n */\r\n@Override\r\npublic OutputStream getOutputStream() throws IOException {\r\n    return Files.newOutputStream(this.filePath);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getOutputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getOutputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]