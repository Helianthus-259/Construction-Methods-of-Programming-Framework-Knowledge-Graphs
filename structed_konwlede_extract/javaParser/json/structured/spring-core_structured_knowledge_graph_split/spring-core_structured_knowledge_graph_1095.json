[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.LogFormatUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.logging.Log;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Utility methods for formatting and logging messages.\n *\n * <p>Mainly for internal use within the framework with Apache Commons Logging.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 5.1\n */\npublic abstract class LogFormatUtils {\n\n\tprivate static final Pattern NEWLINE_PATTERN = Pattern.compile(\"[\\n\\r]\");\n\n\tprivate static final Pattern CONTROL_CHARACTER_PATTERN = Pattern.compile(\"\\\\p{Cc}\");\n\n\n\t/**\n\t * Convenience variant of {@link #formatValue(Object, int, boolean)} that\n\t * limits the length of a log message to 100 characters and also replaces\n\t * newline and control characters if {@code limitLength} is set to \"true\".\n\t * @param value the value to format\n\t * @param limitLength whether to truncate the value at a length of 100\n\t * @return the formatted value\n\t */\n\tpublic static String formatValue(@Nullable Object value, boolean limitLength) {\n\t\treturn formatValue(value, (limitLength ? 100 : -1), limitLength);\n\t}\n\n\t/**\n\t * Format the given value via {@code toString()}, quoting it if it is a\n\t * {@link CharSequence}, truncating at the specified {@code maxLength}, and\n\t * compacting it into a single line when {@code replaceNewLines} is set.\n\t * @param value the value to be formatted\n\t * @param maxLength the max length, after which to truncate, or -1 for unlimited\n\t * @param replaceNewlinesAndControlCharacters whether to replace newline and\n\t * control characters with placeholders\n\t * @return the formatted value\n\t */\n\tpublic static String formatValue(\n\t\t\t@Nullable Object value, int maxLength, boolean replaceNewlinesAndControlCharacters) {\n\n\t\tif (value == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString result;\n\t\ttry {\n\t\t\tresult = ObjectUtils.nullSafeToString(value);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tresult = ObjectUtils.nullSafeToString(ex);\n\t\t}\n\t\tif (maxLength != -1) {\n\t\t\tresult = StringUtils.truncate(result, maxLength);\n\t\t}\n\t\tif (replaceNewlinesAndControlCharacters) {\n\t\t\tresult = NEWLINE_PATTERN.matcher(result).replaceAll(\"<EOL>\");\n\t\t\tresult = CONTROL_CHARACTER_PATTERN.matcher(result).replaceAll(\"?\");\n\t\t}\n\t\tif (value instanceof CharSequence) {\n\t\t\tresult = \"\\\"\" + result + \"\\\"\";\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Use this to log a message with different levels of detail (or different\n\t * messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:\n\t * <pre class=\"code\">\n\t * if (logger.isDebugEnabled()) {\n\t *   String str = logger.isTraceEnabled() ? \"...\" : \"...\";\n\t *   if (logger.isTraceEnabled()) {\n\t *     logger.trace(str);\n\t *   }\n\t *   else {\n\t *     logger.debug(str);\n\t *   }\n\t * }\n\t * </pre>\n\t * @param logger the logger to use to log the message\n\t * @param messageFactory function that accepts a boolean set to the value\n\t * of {@link Log#isTraceEnabled()}\n\t */\n\tpublic static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tboolean traceEnabled = logger.isTraceEnabled();\n\t\t\tString logMessage = messageFactory.apply(traceEnabled);\n\t\t\tif (traceEnabled) {\n\t\t\t\tlogger.trace(logMessage);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.debug(logMessage);\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.LogFormatUtils#NEWLINE_PATTERN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils#NEWLINE_PATTERN",
    "headType": "field",
    "relation": "haveType",
    "tail": "Pattern",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.LogFormatUtils#CONTROL_CHARACTER_PATTERN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils#CONTROL_CHARACTER_PATTERN",
    "headType": "field",
    "relation": "haveType",
    "tail": "Pattern",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils#formatValue(Object,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convenience variant of {@link #formatValue(Object, int, boolean)} that\r\n * limits the length of a log message to 100 characters and also replaces\r\n * newline and control characters if {@code limitLength} is set to \"true\".\r\n * @param value the value to format\r\n * @param limitLength whether to truncate the value at a length of 100\r\n * @return the formatted value\r\n */\r\npublic static String formatValue(@Nullable Object value, boolean limitLength) {\r\n    return formatValue(value, (limitLength ? 100 : -1), limitLength);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogFormatUtils#formatValue(Object,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils#formatValue(Object,int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Format the given value via {@code toString()}, quoting it if it is a\r\n * {@link CharSequence}, truncating at the specified {@code maxLength}, and\r\n * compacting it into a single line when {@code replaceNewLines} is set.\r\n * @param value the value to be formatted\r\n * @param maxLength the max length, after which to truncate, or -1 for unlimited\r\n * @param replaceNewlinesAndControlCharacters whether to replace newline and\r\n * control characters with placeholders\r\n * @return the formatted value\r\n */\r\npublic static String formatValue(@Nullable Object value, int maxLength, boolean replaceNewlinesAndControlCharacters) {\r\n    if (value == null) {\r\n        return \"\";\r\n    }\r\n    String result;\r\n    try {\r\n        result = ObjectUtils.nullSafeToString(value);\r\n    } catch (Throwable ex) {\r\n        result = ObjectUtils.nullSafeToString(ex);\r\n    }\r\n    if (maxLength != -1) {\r\n        result = StringUtils.truncate(result, maxLength);\r\n    }\r\n    if (replaceNewlinesAndControlCharacters) {\r\n        result = NEWLINE_PATTERN.matcher(result).replaceAll(\"<EOL>\");\r\n        result = CONTROL_CHARACTER_PATTERN.matcher(result).replaceAll(\"?\");\r\n    }\r\n    if (value instanceof CharSequence) {\r\n        result = \"\\\"\" + result + \"\\\"\";\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogFormatUtils#formatValue(Object,int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils#traceDebug(Log,Function<Boolean,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Use this to log a message with different levels of detail (or different\r\n * messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:\r\n * <pre class=\"code\">\r\n * if (logger.isDebugEnabled()) {\r\n *   String str = logger.isTraceEnabled() ? \"...\" : \"...\";\r\n *   if (logger.isTraceEnabled()) {\r\n *     logger.trace(str);\r\n *   }\r\n *   else {\r\n *     logger.debug(str);\r\n *   }\r\n * }\r\n * </pre>\r\n * @param logger the logger to use to log the message\r\n * @param messageFactory function that accepts a boolean set to the value\r\n * of {@link Log#isTraceEnabled()}\r\n */\r\npublic static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {\r\n    if (logger.isDebugEnabled()) {\r\n        boolean traceEnabled = logger.isTraceEnabled();\r\n        String logMessage = messageFactory.apply(traceEnabled);\r\n        if (traceEnabled) {\r\n            logger.trace(logMessage);\r\n        } else {\r\n            logger.debug(logMessage);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogFormatUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogFormatUtils#traceDebug(Log,Function<Boolean,String>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.LogMessage",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A simple log message type for use with Commons Logging, allowing for convenient\n * lazy resolution of a given {@link Supplier} instance (typically bound to a lambda\n * expression) or a printf-style format string ({@link String#format}) in its\n * {@link #toString()}.\n *\n * @author Juergen Hoeller\n * @author Sebastien Deleuze\n * @since 5.2\n * @see #of(Supplier)\n * @see #format(String, Object)\n * @see #format(String, Object...)\n * @see org.apache.commons.logging.Log#fatal(Object)\n * @see org.apache.commons.logging.Log#error(Object)\n * @see org.apache.commons.logging.Log#warn(Object)\n * @see org.apache.commons.logging.Log#info(Object)\n * @see org.apache.commons.logging.Log#debug(Object)\n * @see org.apache.commons.logging.Log#trace(Object)\n */\npublic abstract class LogMessage implements CharSequence {\n\n\tprivate @Nullable String result;\n\n\n\t@Override\n\tpublic int length() {\n\t\treturn toString().length();\n\t}\n\n\t@Override\n\tpublic char charAt(int index) {\n\t\treturn toString().charAt(index);\n\t}\n\n\t@Override\n\tpublic CharSequence subSequence(int start, int end) {\n\t\treturn toString().subSequence(start, end);\n\t}\n\n\t/**\n\t * This will be called by the logging provider, potentially once\n\t * per log target (therefore locally caching the result here).\n\t */\n\t@Override\n\tpublic String toString() {\n\t\tif (this.result == null) {\n\t\t\tthis.result = buildString();\n\t\t}\n\t\treturn this.result;\n\t}\n\n\tabstract String buildString();\n\n\n\t/**\n\t * Build a lazily resolving message from the given supplier.\n\t * @param supplier the supplier (typically bound to a lambda expression)\n\t * @see #toString()\n\t */\n\tpublic static LogMessage of(Supplier<? extends CharSequence> supplier) {\n\t\treturn new SupplierMessage(supplier);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and argument.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1) {\n\t\treturn new FormatMessage1(format, arg1);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2) {\n\t\treturn new FormatMessage2(format, arg1, arg2);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @param arg3 the third argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3) {\n\t\treturn new FormatMessage3(format, arg1, arg2, arg3);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and arguments.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param arg1 the first argument (can be {@code null})\n\t * @param arg2 the second argument (can be {@code null})\n\t * @param arg3 the third argument (can be {@code null})\n\t * @param arg4 the fourth argument (can be {@code null})\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3,\n\t\t\t@Nullable Object arg4) {\n\t\treturn new FormatMessage4(format, arg1, arg2, arg3, arg4);\n\t}\n\n\t/**\n\t * Build a lazily formatted message from the given format string and varargs.\n\t * <p>This varargs {@code format()} variant may be costly. You should therefore\n\t * use the individual argument variants whenever possible;\n\t * {@link #format(String, Object)}, {@link #format(String, Object, Object)}, etc.\n\t * @param format the format string (following {@link String#format} rules)\n\t * @param args the varargs array (can be {@code null} and can contain {@code null}\n\t * elements)\n\t * @see String#format(String, Object...)\n\t */\n\tpublic static LogMessage format(String format, @Nullable Object... args) {\n\t\treturn new FormatMessageX(format, args);\n\t}\n\n\n\tprivate static final class SupplierMessage extends LogMessage {\n\n\t\tprivate final Supplier<? extends CharSequence> supplier;\n\n\t\tSupplierMessage(Supplier<? extends CharSequence> supplier) {\n\t\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\t\tthis.supplier = supplier;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn this.supplier.get().toString();\n\t\t}\n\t}\n\n\n\tprivate abstract static class FormatMessage extends LogMessage {\n\n\t\tprotected final String format;\n\n\t\tFormatMessage(String format) {\n\t\t\tAssert.notNull(format, \"Format must not be null\");\n\t\t\tthis.format = format;\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage1 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tFormatMessage1(String format, @Nullable Object arg1) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t}\n\n\t\t@Override\n\t\tprotected String buildString() {\n\t\t\treturn String.format(this.format, this.arg1);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage2 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tFormatMessage2(String format, @Nullable Object arg1, @Nullable Object arg2) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage3 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tprivate final @Nullable Object arg3;\n\n\t\tFormatMessage3(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t\tthis.arg3 = arg3;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2, this.arg3);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessage4 extends FormatMessage {\n\n\t\tprivate final @Nullable Object arg1;\n\n\t\tprivate final @Nullable Object arg2;\n\n\t\tprivate final @Nullable Object arg3;\n\n\t\tprivate final @Nullable Object arg4;\n\n\t\tFormatMessage4(String format, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3,\n\t\t\t\t@Nullable Object arg4) {\n\t\t\tsuper(format);\n\t\t\tthis.arg1 = arg1;\n\t\t\tthis.arg2 = arg2;\n\t\t\tthis.arg3 = arg3;\n\t\t\tthis.arg4 = arg4;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.arg1, this.arg2, this.arg3, this.arg4);\n\t\t}\n\t}\n\n\n\tprivate static final class FormatMessageX extends FormatMessage {\n\n\t\tprivate final @Nullable Object[] args;\n\n\t\tFormatMessageX(String format, @Nullable Object... args) {\n\t\t\tsuper(format);\n\t\t\tthis.args = args;\n\t\t}\n\n\t\t@Override\n\t\tString buildString() {\n\t\t\treturn String.format(this.format, this.args);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.LogMessage#result",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.LogMessage#result",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.LogMessage#length()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int length() {\r\n    return toString().length();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogMessage",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogMessage#length()",
    "tailType": "method"
  }
]