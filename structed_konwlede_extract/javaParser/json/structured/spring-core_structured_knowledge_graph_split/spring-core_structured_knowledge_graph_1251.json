[
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#createCompositeInterface(Class<?>[],ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#createCompositeInterface(Class<?>[],ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#determineCommonAncestor(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the common ancestor of the given classes, if any.\r\n * @param clazz1 the class to introspect\r\n * @param clazz2 the other class to introspect\r\n * @return the common ancestor (i.e. common superclass, one interface\r\n * extending the other), or {@code null} if none found. If any of the\r\n * given classes is {@code null}, the other class will be returned.\r\n * @since 3.2.6\r\n */\r\n@Nullable\r\npublic static Class<?> determineCommonAncestor(@Nullable Class<?> clazz1, @Nullable Class<?> clazz2) {\r\n    if (clazz1 == null) {\r\n        return clazz2;\r\n    }\r\n    if (clazz2 == null) {\r\n        return clazz1;\r\n    }\r\n    if (clazz1.isAssignableFrom(clazz2)) {\r\n        return clazz1;\r\n    }\r\n    if (clazz2.isAssignableFrom(clazz1)) {\r\n        return clazz2;\r\n    }\r\n    Class<?> ancestor = clazz1;\r\n    do {\r\n        ancestor = ancestor.getSuperclass();\r\n        if (ancestor == null || Object.class == ancestor) {\r\n            return null;\r\n        }\r\n    } while (!ancestor.isAssignableFrom(clazz2));\r\n    return ancestor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#determineCommonAncestor(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#determineCommonAncestor(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#isJavaLanguageInterface(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given interface is a common Java language interface:\r\n * {@link Serializable}, {@link Externalizable}, {@link Closeable}, {@link AutoCloseable},\r\n * {@link Cloneable}, {@link Comparable} - all of which can be ignored when looking\r\n * for 'primary' user-level interfaces. Common characteristics: no service-level\r\n * operations, no bean property methods, no default methods.\r\n * @param ifc the interface to check\r\n * @since 5.0.3\r\n */\r\npublic static boolean isJavaLanguageInterface(Class<?> ifc) {\r\n    return javaLanguageInterfaces.contains(ifc);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isJavaLanguageInterface(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isStaticClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied class is a static class.\r\n * @return {@code true} if the supplied class is a static class\r\n * @since 6.0\r\n * @see Modifier#isStatic(int)\r\n * @see #isInnerClass(Class)\r\n */\r\npublic static boolean isStaticClass(Class<?> clazz) {\r\n    return Modifier.isStatic(clazz.getModifiers());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isStaticClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isInnerClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied class is an <em>inner class</em>,\r\n * i.e. a non-static member of an enclosing class.\r\n * @return {@code true} if the supplied class is an inner class\r\n * @since 5.0.5\r\n * @see Class#isMemberClass()\r\n * @see #isStaticClass(Class)\r\n */\r\npublic static boolean isInnerClass(Class<?> clazz) {\r\n    return (clazz.isMemberClass() && !isStaticClass(clazz));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isInnerClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isLambdaClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied {@link Class} is a JVM-generated implementation\r\n * class for a lambda expression or method reference.\r\n * <p>This method makes a best-effort attempt at determining this, based on\r\n * checks that work on modern, mainstream JVMs.\r\n * @param clazz the class to check\r\n * @return {@code true} if the class is a lambda implementation class\r\n * @since 5.3.19\r\n */\r\npublic static boolean isLambdaClass(Class<?> clazz) {\r\n    return (clazz.isSynthetic() && (clazz.getSuperclass() == Object.class) && (clazz.getInterfaces().length > 0) && clazz.getName().contains(\"$$Lambda\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isLambdaClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxy(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given object is a CGLIB proxy.\r\n * @param object the object to check\r\n * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)\r\n * @deprecated as of 5.2, in favor of custom (possibly narrower) checks\r\n * such as for a Spring AOP proxy\r\n */\r\n@Deprecated\r\npublic static boolean isCglibProxy(Object object) {\r\n    return isCglibProxyClass(object.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isCglibProxy(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxy(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxyClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the specified class is a CGLIB-generated class.\r\n * @param clazz the class to check\r\n * @see #getUserClass(Class)\r\n * @deprecated as of 5.2, in favor of custom (possibly narrower) checks\r\n * or simply a check for containing {@link #CGLIB_CLASS_SEPARATOR}\r\n */\r\n@Deprecated\r\npublic static boolean isCglibProxyClass(@Nullable Class<?> clazz) {\r\n    return (clazz != null && isCglibProxyClassName(clazz.getName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isCglibProxyClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxyClass(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxyClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the specified class name is a CGLIB-generated class.\r\n * @param className the class name to check\r\n * @see #CGLIB_CLASS_SEPARATOR\r\n * @deprecated as of 5.2, in favor of custom (possibly narrower) checks\r\n * or simply a check for containing {@link #CGLIB_CLASS_SEPARATOR}\r\n */\r\n@Deprecated\r\npublic static boolean isCglibProxyClassName(@Nullable String className) {\r\n    return (className != null && className.contains(CGLIB_CLASS_SEPARATOR));\r\n}",
    "tailType": "method_code"
  }
]