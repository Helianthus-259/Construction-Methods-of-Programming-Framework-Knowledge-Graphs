[
  {
    "head": "org.springframework.util.SystemPropertyUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyUtils#resolvePlaceholders(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.SystemPropertyPlaceholderResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Helper class for resolving placeholders in texts. Usually applied to file paths.\n *\n * <p>A text may contain {@code ${...}} placeholders, to be resolved as system properties:\n * for example, {@code ${user.dir}}. Default values can be supplied using the \":\" separator\n * between key and value.\n *\n * @author Juergen Hoeller\n * @author Rob Harrop\n * @author Dave Syer\n * @since 1.2.5\n * @see #PLACEHOLDER_PREFIX\n * @see #PLACEHOLDER_SUFFIX\n * @see System#getProperty(String)\n */\npublic abstract class SystemPropertyUtils {\n\n\t/** Prefix for system property placeholders: {@value}. */\n\tpublic static final String PLACEHOLDER_PREFIX = \"${\";\n\n\t/** Suffix for system property placeholders: {@value}. */\n\tpublic static final String PLACEHOLDER_SUFFIX = \"}\";\n\n\t/** Value separator for system property placeholders: {@value}. */\n\tpublic static final String VALUE_SEPARATOR = \":\";\n\n\t/** Default escape character: {@code '\\'}. */\n\tpublic static final Character ESCAPE_CHARACTER = '\\\\';\n\n\n\tprivate static final PropertyPlaceholderHelper strictHelper =\n\t\t\tnew PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR,\n\t\t\t\t\tESCAPE_CHARACTER, false);\n\n\tprivate static final PropertyPlaceholderHelper nonStrictHelper =\n\t\t\tnew PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR,\n\t\t\t\t\tESCAPE_CHARACTER, true);\n\n\n\t/**\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values.\n\t * @param text the String to resolve\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t */\n\tpublic static String resolvePlaceholders(String text) {\n\t\treturn resolvePlaceholders(text, false);\n\t}\n\n\t/**\n\t * Resolve {@code ${...}} placeholders in the given text, replacing them with\n\t * corresponding system property values. Unresolvable placeholders with no default\n\t * value are ignored and passed through unchanged if the flag is set to {@code true}.\n\t * @param text the String to resolve\n\t * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored\n\t * @return the resolved String\n\t * @throws IllegalArgumentException if there is an unresolvable placeholder\n\t * @see #PLACEHOLDER_PREFIX\n\t * @see #PLACEHOLDER_SUFFIX\n\t * and the \"ignoreUnresolvablePlaceholders\" flag is {@code false}\n\t */\n\tpublic static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {\n\t\tif (text.isEmpty()) {\n\t\t\treturn text;\n\t\t}\n\t\tPropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);\n\t\treturn helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));\n\t}\n\n\n\t/**\n\t * PlaceholderResolver implementation that resolves against system properties\n\t * and system environment variables.\n\t */\n\tprivate static class SystemPropertyPlaceholderResolver implements PropertyPlaceholderHelper.PlaceholderResolver {\n\n\t\tprivate final String text;\n\n\t\tpublic SystemPropertyPlaceholderResolver(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable String resolvePlaceholder(String placeholderName) {\n\t\t\ttry {\n\t\t\t\tString propVal = System.getProperty(placeholderName);\n\t\t\t\tif (propVal == null) {\n\t\t\t\t\t// Fall back to searching the system environment.\n\t\t\t\t\tpropVal = System.getenv(placeholderName);\n\t\t\t\t}\n\t\t\t\treturn propVal;\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tSystem.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" +\n\t\t\t\t\t\tthis.text + \"] as system property: \" + ex);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.SystemPropertyPlaceholderResolver#text",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver#text",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver#resolvePlaceholder(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String resolvePlaceholder(String placeholderName) {\r\n    try {\r\n        String propVal = System.getProperty(placeholderName);\r\n        if (propVal == null) {\r\n            // Fall back to searching the system environment.\r\n            propVal = System.getenv(placeholderName);\r\n        }\r\n        return propVal;\r\n    } catch (Throwable ex) {\r\n        System.err.println(\"Could not resolve placeholder '\" + placeholderName + \"' in [\" + this.text + \"] as system property: \" + ex);\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SystemPropertyPlaceholderResolver#resolvePlaceholder(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver#resolvePlaceholder(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SystemPropertyPlaceholderResolver#resolvePlaceholder(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.TypeUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.WildcardType;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Utility to work with generic type parameters.\n *\n * <p>Mainly for internal use within the framework.\n *\n * @author Ramnivas Laddad\n * @author Juergen Hoeller\n * @author Chris Beams\n * @author Sam Brannen\n * @since 2.0.7\n */\npublic abstract class TypeUtils {\n\n\tprivate static final Type[] IMPLICIT_LOWER_BOUNDS = { null };\n\n\tprivate static final Type[] IMPLICIT_UPPER_BOUNDS = { Object.class };\n\n\t/**\n\t * Check if the right-hand side type may be assigned to the left-hand side\n\t * type following the Java generics rules.\n\t * @param lhsType the target type (left-hand side (LHS) type)\n\t * @param rhsType the value type (right-hand side (RHS) type) that should\n\t * be assigned to the target type\n\t * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\n\t * @see ClassUtils#isAssignable(Class, Class)\n\t */\n\tpublic static boolean isAssignable(Type lhsType, Type rhsType) {\n\t\tAssert.notNull(lhsType, \"Left-hand side type must not be null\");\n\t\tAssert.notNull(rhsType, \"Right-hand side type must not be null\");\n\n\t\t// all types are assignable to themselves and to class Object\n\t\tif (lhsType.equals(rhsType) || Object.class == lhsType) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (lhsType instanceof Class<?> lhsClass) {\n\t\t\t// just comparing two classes\n\t\t\tif (rhsType instanceof Class<?> rhsClass) {\n\t\t\t\treturn ClassUtils.isAssignable(lhsClass, rhsClass);\n\t\t\t}\n\n\t\t\tif (rhsType instanceof ParameterizedType rhsParameterizedType) {\n\t\t\t\tType rhsRaw = rhsParameterizedType.getRawType();\n\n\t\t\t\t// a parameterized type is always assignable to its raw class type\n\t\t\t\tif (rhsRaw instanceof Class<?> rhRawClass) {\n\t\t\t\t\treturn ClassUtils.isAssignable(lhsClass, rhRawClass);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (lhsClass.isArray() && rhsType instanceof GenericArrayType rhsGenericArrayType) {\n\t\t\t\tType rhsComponent = rhsGenericArrayType.getGenericComponentType();\n\n\t\t\t\treturn isAssignable(lhsClass.componentType(), rhsComponent);\n\t\t\t}\n\t\t}\n\n\t\t// parameterized types are only assignable to other parameterized types and class types\n\t\tif (lhsType instanceof ParameterizedType lhsParameterizedType) {\n\t\t\tif (rhsType instanceof Class<?> rhsClass) {\n\t\t\t\tType lhsRaw = lhsParameterizedType.getRawType();\n\n\t\t\t\tif (lhsRaw instanceof Class<?> lhsClass) {\n\t\t\t\t\treturn ClassUtils.isAssignable(lhsClass, rhsClass);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rhsType instanceof ParameterizedType rhsParameterizedType) {\n\t\t\t\treturn isAssignable(lhsParameterizedType, rhsParameterizedType);\n\t\t\t}\n\t\t}\n\n\t\tif (lhsType instanceof GenericArrayType lhsGenericArrayType) {\n\t\t\tType lhsComponent = lhsGenericArrayType.getGenericComponentType();\n\n\t\t\tif (rhsType instanceof Class<?> rhsClass && rhsClass.isArray()) {\n\t\t\t\treturn isAssignable(lhsComponent, rhsClass.componentType());\n\t\t\t}\n\t\t\telse if (rhsType instanceof GenericArrayType rhsGenericArrayType) {\n\t\t\t\tType rhsComponent = rhsGenericArrayType.getGenericComponentType();\n\n\t\t\t\treturn isAssignable(lhsComponent, rhsComponent);\n\t\t\t}\n\t\t}\n\n\t\tif (lhsType instanceof WildcardType lhsWildcardType) {\n\t\t\treturn isAssignable(lhsWildcardType, rhsType);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static boolean isAssignable(ParameterizedType lhsType, ParameterizedType rhsType) {\n\t\tif (lhsType.equals(rhsType)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tType[] lhsTypeArguments = lhsType.getActualTypeArguments();\n\t\tType[] rhsTypeArguments = rhsType.getActualTypeArguments();\n\n\t\tif (lhsTypeArguments.length != rhsTypeArguments.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (int size = lhsTypeArguments.length, i = 0; i < size; ++i) {\n\t\t\tType lhsArg = lhsTypeArguments[i];\n\t\t\tType rhsArg = rhsTypeArguments[i];\n\n\t\t\tif (!lhsArg.equals(rhsArg) &&\n\t\t\t\t\t!(lhsArg instanceof WildcardType wildcardType && isAssignable(wildcardType, rhsArg))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static boolean isAssignable(WildcardType lhsType, Type rhsType) {\n\t\tType[] lUpperBounds = getUpperBounds(lhsType);\n\n\t\tType[] lLowerBounds = getLowerBounds(lhsType);\n\n\t\tif (rhsType instanceof WildcardType rhsWcType) {\n\t\t\t// both the upper and lower bounds of the right-hand side must be\n\t\t\t// completely enclosed in the upper and lower bounds of the left-\n\t\t\t// hand side.\n\t\t\tType[] rUpperBounds = getUpperBounds(rhsWcType);\n\n\t\t\tType[] rLowerBounds = getLowerBounds(rhsWcType);\n\n\t\t\tfor (Type lBound : lUpperBounds) {\n\t\t\t\tfor (Type rBound : rUpperBounds) {\n\t\t\t\t\tif (!isAssignableBound(lBound, rBound)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (Type rBound : rLowerBounds) {\n\t\t\t\t\tif (!isAssignableBound(lBound, rBound)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (Type lBound : lLowerBounds) {\n\t\t\t\tfor (Type rBound : rUpperBounds) {\n\t\t\t\t\tif (!isAssignableBound(rBound, lBound)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (Type rBound : rLowerBounds) {\n\t\t\t\t\tif (!isAssignableBound(rBound, lBound)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (Type lBound : lUpperBounds) {\n\t\t\t\tif (!isAssignableBound(lBound, rhsType)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (Type lBound : lLowerBounds) {\n\t\t\t\tif (!isAssignableBound(rhsType, lBound)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static Type[] getLowerBounds(WildcardType wildcardType) {\n\t\tType[] lowerBounds = wildcardType.getLowerBounds();\n\n\t\t// supply the implicit lower bound if none are specified\n\t\treturn (lowerBounds.length == 0 ? IMPLICIT_LOWER_BOUNDS : lowerBounds);\n\t}\n\n\tprivate static Type[] getUpperBounds(WildcardType wildcardType) {\n\t\tType[] upperBounds = wildcardType.getUpperBounds();\n\n\t\t// supply the implicit upper bound if none are specified\n\t\treturn (upperBounds.length == 0 ? IMPLICIT_UPPER_BOUNDS : upperBounds);\n\t}\n\n\tpublic static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {\n\t\tif (rhsType == null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (lhsType == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn isAssignable(lhsType, rhsType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtils#IMPLICIT_LOWER_BOUNDS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtils#IMPLICIT_LOWER_BOUNDS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtils#IMPLICIT_UPPER_BOUNDS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtils#IMPLICIT_UPPER_BOUNDS",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtils#isAssignable(Type,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check if the right-hand side type may be assigned to the left-hand side\r\n * type following the Java generics rules.\r\n * @param lhsType the target type (left-hand side (LHS) type)\r\n * @param rhsType the value type (right-hand side (RHS) type) that should\r\n * be assigned to the target type\r\n * @return {@code true} if {@code rhsType} is assignable to {@code lhsType}\r\n * @see ClassUtils#isAssignable(Class, Class)\r\n */\r\npublic static boolean isAssignable(Type lhsType, Type rhsType) {\r\n    Assert.notNull(lhsType, \"Left-hand side type must not be null\");\r\n    Assert.notNull(rhsType, \"Right-hand side type must not be null\");\r\n    // all types are assignable to themselves and to class Object\r\n    if (lhsType.equals(rhsType) || Object.class == lhsType) {\r\n        return true;\r\n    }\r\n    if (lhsType instanceof Class<?> lhsClass) {\r\n        // just comparing two classes\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n        }\r\n        if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            Type rhsRaw = rhsParameterizedType.getRawType();\r\n            // a parameterized type is always assignable to its raw class type\r\n            if (rhsRaw instanceof Class<?> rhRawClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhRawClass);\r\n            }\r\n        } else if (lhsClass.isArray() && rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsClass.componentType(), rhsComponent);\r\n        }\r\n    }\r\n    // parameterized types are only assignable to other parameterized types and class types\r\n    if (lhsType instanceof ParameterizedType lhsParameterizedType) {\r\n        if (rhsType instanceof Class<?> rhsClass) {\r\n            Type lhsRaw = lhsParameterizedType.getRawType();\r\n            if (lhsRaw instanceof Class<?> lhsClass) {\r\n                return ClassUtils.isAssignable(lhsClass, rhsClass);\r\n            }\r\n        } else if (rhsType instanceof ParameterizedType rhsParameterizedType) {\r\n            return isAssignable(lhsParameterizedType, rhsParameterizedType);\r\n        }\r\n    }\r\n    if (lhsType instanceof GenericArrayType lhsGenericArrayType) {\r\n        Type lhsComponent = lhsGenericArrayType.getGenericComponentType();\r\n        if (rhsType instanceof Class<?> rhsClass && rhsClass.isArray()) {\r\n            return isAssignable(lhsComponent, rhsClass.componentType());\r\n        } else if (rhsType instanceof GenericArrayType rhsGenericArrayType) {\r\n            Type rhsComponent = rhsGenericArrayType.getGenericComponentType();\r\n            return isAssignable(lhsComponent, rhsComponent);\r\n        }\r\n    }\r\n    if (lhsType instanceof WildcardType lhsWildcardType) {\r\n        return isAssignable(lhsWildcardType, rhsType);\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#isAssignable(Type,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtils#isAssignable(ParameterizedType,ParameterizedType)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isAssignable(ParameterizedType lhsType, ParameterizedType rhsType) {\r\n    if (lhsType.equals(rhsType)) {\r\n        return true;\r\n    }\r\n    Type[] lhsTypeArguments = lhsType.getActualTypeArguments();\r\n    Type[] rhsTypeArguments = rhsType.getActualTypeArguments();\r\n    if (lhsTypeArguments.length != rhsTypeArguments.length) {\r\n        return false;\r\n    }\r\n    for (int size = lhsTypeArguments.length, i = 0; i < size; ++i) {\r\n        Type lhsArg = lhsTypeArguments[i];\r\n        Type rhsArg = rhsTypeArguments[i];\r\n        if (!lhsArg.equals(rhsArg) && !(lhsArg instanceof WildcardType wildcardType && isAssignable(wildcardType, rhsArg))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtils#isAssignable(ParameterizedType,ParameterizedType)",
    "tailType": "method"
  }
]