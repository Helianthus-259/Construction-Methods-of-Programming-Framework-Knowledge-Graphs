[
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#putAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#putAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clear() {\r\n    this.adapter.clear();\r\n    assertThat(this.adapter).isEmpty();\r\n    assertThat(this.delegate).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid keySet() {\r\n    assertThat(this.adapter.keySet()).containsExactly(\"foo\", \"qux\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#values()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid values() {\r\n    assertThat(this.adapter.values()).containsExactly(\"bar\", \"quux\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#values()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#values()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid entrySet() {\r\n    assertThat(this.adapter.entrySet()).containsExactly(entry(\"foo\", \"bar\"), entry(\"qux\", \"quux\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiToSingleValueMapAdapterTests#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiToSingleValueMapAdapterTests#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.util.Comparator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.aot.hint.ConditionalHint;\nimport org.springframework.aot.hint.ResourceBundleHint;\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.ResourcePatternHint;\nimport org.springframework.aot.hint.ResourcePatternHints;\n\n/**\n * Collect {@link ResourceHints} as map attributes ready for JSON serialization for the GraalVM\n * {@code native-image} compiler.\n *\n * @author Sebastien Deleuze\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 6.0\n * @see <a href=\"https://www.graalvm.org/22.1/reference-manual/native-image/Resources/\">Accessing Resources in Native Images</a>\n * @see <a href=\"https://www.graalvm.org/22.1/reference-manual/native-image/BuildConfiguration/\">Native Image Build Configuration</a>\n */\nclass ResourceHintsAttributes {\n\n\tprivate static final Comparator<ResourcePatternHint> RESOURCE_PATTERN_HINT_COMPARATOR =\n\t\t\tComparator.comparing(ResourcePatternHint::getPattern);\n\n\tprivate static final Comparator<ResourceBundleHint> RESOURCE_BUNDLE_HINT_COMPARATOR =\n\t\t\tComparator.comparing(ResourceBundleHint::getBaseName);\n\n\n\tpublic List<Map<String, Object>> resources(ResourceHints hint) {\n\t\treturn hint.resourcePatternHints()\n\t\t\t\t.map(ResourcePatternHints::getIncludes).flatMap(List::stream).distinct()\n\t\t\t\t.sorted(RESOURCE_PATTERN_HINT_COMPARATOR)\n\t\t\t\t.map(this::toAttributes).toList();\n\t}\n\n\tpublic List<Map<String, Object>> resourceBundles(ResourceHints hint) {\n\t\treturn hint.resourceBundleHints()\n\t\t\t\t.sorted(RESOURCE_BUNDLE_HINT_COMPARATOR)\n\t\t\t\t.map(this::toAttributes).toList();\n\t}\n\n\tprivate Map<String, Object> toAttributes(ResourceBundleHint hint) {\n\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n\t\thandleCondition(attributes, hint);\n\t\tattributes.put(\"name\", hint.getBaseName());\n\t\treturn attributes;\n\t}\n\n\tprivate Map<String, Object> toAttributes(ResourcePatternHint hint) {\n\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n\t\thandleCondition(attributes, hint);\n\t\tattributes.put(\"glob\", hint.getPattern());\n\t\treturn attributes;\n\t}\n\n\tprivate void handleCondition(Map<String, Object> attributes, ConditionalHint hint) {\n\t\tif (hint.getReachableType() != null) {\n\t\t\tMap<String, Object> conditionAttributes = new LinkedHashMap<>();\n\t\t\tconditionAttributes.put(\"typeReached\", hint.getReachableType());\n\t\t\tattributes.put(\"condition\", conditionAttributes);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#RESOURCE_PATTERN_HINT_COMPARATOR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes#RESOURCE_PATTERN_HINT_COMPARATOR",
    "headType": "field",
    "relation": "haveType",
    "tail": "Comparator<ResourcePatternHint>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.ResourceHintsAttributes",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.ResourceHintsAttributes#RESOURCE_BUNDLE_HINT_COMPARATOR",
    "tailType": "field"
  }
]