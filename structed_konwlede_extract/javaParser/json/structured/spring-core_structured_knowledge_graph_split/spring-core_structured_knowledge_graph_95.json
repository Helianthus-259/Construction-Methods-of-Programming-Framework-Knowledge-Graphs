[
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleArrayTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasSimpleArrayTypesCreatesAnnotation() {\r\n    loadFrom(WithSimpleArrayTypesAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(SimpleArrayTypesAnnotation.class);\r\n    assertThat(this.annotation.getValue(\"stringValue\")).contains(new String[] { \"string\" });\r\n    assertThat(this.annotation.getValue(\"byteValue\")).contains(new byte[] { 1 });\r\n    assertThat(this.annotation.getValue(\"shortValue\")).contains(new short[] { 2 });\r\n    assertThat(this.annotation.getValue(\"intValue\")).contains(new int[] { 3 });\r\n    assertThat(this.annotation.getValue(\"longValue\")).contains(new long[] { 4 });\r\n    assertThat(this.annotation.getValue(\"booleanValue\")).contains(new boolean[] { true });\r\n    assertThat(this.annotation.getValue(\"charValue\")).contains(new char[] { 'c' });\r\n    assertThat(this.annotation.getValue(\"doubleValue\")).contains(new double[] { 5.0 });\r\n    assertThat(this.annotation.getValue(\"floatValue\")).contains(new float[] { 6.0f });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleArrayTypesCreatesAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasSimpleArrayTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEmptySimpleArrayTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasEmptySimpleArrayTypesCreatesAnnotation() {\r\n    loadFrom(WithSimpleEmptyArrayTypesAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(SimpleArrayTypesAnnotation.class);\r\n    assertThat(this.annotation.getValue(\"stringValue\")).contains(new String[] ;);\r\n    assertThat(this.annotation.getValue(\"byteValue\")).contains(new byte[] ;);\r\n    assertThat(this.annotation.getValue(\"shortValue\")).contains(new short[] ;);\r\n    assertThat(this.annotation.getValue(\"intValue\")).contains(new int[] ;);\r\n    assertThat(this.annotation.getValue(\"longValue\")).contains(new long[] ;);\r\n    assertThat(this.annotation.getValue(\"booleanValue\")).contains(new boolean[] ;);\r\n    assertThat(this.annotation.getValue(\"charValue\")).contains(new char[] ;);\r\n    assertThat(this.annotation.getValue(\"doubleValue\")).contains(new double[] ;);\r\n    assertThat(this.annotation.getValue(\"floatValue\")).contains(new float[] ;);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEmptySimpleArrayTypesCreatesAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEmptySimpleArrayTypesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEnumAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasEnumAttributesCreatesAnnotation() {\r\n    loadFrom(WithEnumAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(EnumAnnotation.class);\r\n    assertThat(this.annotation.getValue(\"enumValue\")).contains(ExampleEnum.ONE);\r\n    assertThat(this.annotation.getValue(\"enumArrayValue\")).contains(new ExampleEnum[] { ExampleEnum.ONE, ExampleEnum.TWO });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEnumAttributesCreatesAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasEnumAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasAnnotationAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasAnnotationAttributesCreatesAnnotation() {\r\n    loadFrom(WithAnnotationAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(AnnotationAnnotation.class);\r\n    MergedAnnotation<NestedAnnotation> value = this.annotation.getAnnotation(\"annotationValue\", NestedAnnotation.class);\r\n    assertThat(value.isPresent()).isTrue();\r\n    assertThat(value.getString(MergedAnnotation.VALUE)).isEqualTo(\"a\");\r\n    MergedAnnotation<NestedAnnotation>[] arrayValue = this.annotation.getAnnotationArray(\"annotationArrayValue\", NestedAnnotation.class);\r\n    assertThat(arrayValue).hasSize(2);\r\n    assertThat(arrayValue[0].getString(MergedAnnotation.VALUE)).isEqualTo(\"b\");\r\n    assertThat(arrayValue[1].getString(MergedAnnotation.VALUE)).isEqualTo(\"c\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasAnnotationAttributesCreatesAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasAnnotationAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasClassAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid visitWhenHasClassAttributesCreatesAnnotation() {\r\n    loadFrom(WithClassAnnotation.class);\r\n    assertThat(this.annotation.getType()).isEqualTo(ClassAnnotation.class);\r\n    assertThat(this.annotation.getString(\"classValue\")).isEqualTo(InputStream.class.getName());\r\n    assertThat(this.annotation.getClass(\"classValue\")).isEqualTo(InputStream.class);\r\n    assertThat(this.annotation.getValue(\"classValue\")).contains(InputStream.class);\r\n    assertThat(this.annotation.getStringArray(\"classArrayValue\")).containsExactly(OutputStream.class.getName());\r\n    assertThat(this.annotation.getValue(\"classArrayValue\")).contains(new Class<?>[] { OutputStream.class });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasClassAttributesCreatesAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#visitWhenHasClassAttributesCreatesAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#loadFrom(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void loadFrom(Class<?> type) {\r\n    ClassVisitor visitor = new ClassVisitor(SpringAsmInfo.ASM_VERSION) {\r\n\r\n        @Override\r\n        public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\r\n            return MergedAnnotationReadingVisitor.get(getClass().getClassLoader(), null, descriptor, visible, annotation -> MergedAnnotationMetadataVisitorTests.this.annotation = annotation);\r\n        }\r\n    };\r\n    try {\r\n        new ClassReader(type.getName()).accept(visitor, ClassReader.SKIP_DEBUG | ClassReader.SKIP_CODE | ClassReader.SKIP_FRAMES);\r\n    } catch (IOException ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationMetadataVisitorTests#loadFrom(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.WithSimpleTypesAnnotation",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.WithSimpleTypesAnnotation",
    "headType": "class",
    "relation": "use",
    "tail": "@SimpleTypesAnnotation",
    "tailType": "annotation"
  }
]