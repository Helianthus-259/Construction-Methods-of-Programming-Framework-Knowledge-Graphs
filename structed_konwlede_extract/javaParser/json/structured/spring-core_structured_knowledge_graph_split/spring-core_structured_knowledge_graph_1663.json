[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithNestedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithNestedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributesWithAttributeAliases() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithValueAttribute\");\r\n    WebMapping webMapping = method.getAnnotation(WebMapping.class);\r\n    AnnotationAttributes attributes = (AnnotationAttributes) getAnnotationAttributes(webMapping);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.annotationType()).isEqualTo(WebMapping.class);\r\n    assertThat(attributes.getString(\"name\")).as(\"name attribute: \").isEqualTo(\"foo\");\r\n    assertThat(attributes.getStringArray(VALUE)).as(\"value attribute: \").isEqualTo(asArray(\"/test\"));\r\n    assertThat(attributes.getStringArray(\"path\")).as(\"path attribute: \").isEqualTo(asArray(\"/test\"));\r\n    method = WebController.class.getMethod(\"handleMappedWithPathAttribute\");\r\n    webMapping = method.getAnnotation(WebMapping.class);\r\n    attributes = (AnnotationAttributes) getAnnotationAttributes(webMapping);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.annotationType()).isEqualTo(WebMapping.class);\r\n    assertThat(attributes.getString(\"name\")).as(\"name attribute: \").isEqualTo(\"bar\");\r\n    assertThat(attributes.getStringArray(VALUE)).as(\"value attribute: \").isEqualTo(asArray(\"/test\"));\r\n    assertThat(attributes.getStringArray(\"path\")).as(\"path attribute: \").isEqualTo(asArray(\"/test\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationAttributesWithAttributeAliasesWithDifferentValues() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithDifferentPathAndValueAttributes\");\r\n    WebMapping webMapping = method.getAnnotation(WebMapping.class);\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> getAnnotationAttributes(webMapping)).withMessageContaining(\"attribute 'path' and its alias 'value'\").withMessageContaining(\"values of [{/test}] and [{/enigma}]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliasesWithDifferentValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getAnnotationAttributesWithAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValueFromAnnotation() throws Exception {\r\n    Method method = SimpleFoo.class.getMethod(\"something\", Object.class);\r\n    Order order = findAnnotation(method, Order.class);\r\n    assertThat(getValue(order, VALUE)).isEqualTo(1);\r\n    assertThat(getValue(order)).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValueFromNonPublicAnnotation() {\r\n    Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();\r\n    assertThat(declaredAnnotations).hasSize(1);\r\n    Annotation annotation = declaredAnnotations[0];\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.annotationType().getSimpleName()).isEqualTo(\"NonPublicAnnotation\");\r\n    assertThat(getValue(annotation, VALUE)).isEqualTo(42);\r\n    assertThat(getValue(annotation)).isEqualTo(42);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromAnnotation() throws Exception {\r\n    Method method = SimpleFoo.class.getMethod(\"something\", Object.class);\r\n    Order order = findAnnotation(method, Order.class);\r\n    assertThat(getDefaultValue(order, VALUE)).isEqualTo(Ordered.LOWEST_PRECEDENCE);\r\n    assertThat(getDefaultValue(order)).isEqualTo(Ordered.LOWEST_PRECEDENCE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultValueFromNonPublicAnnotation() {\r\n    Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();\r\n    assertThat(declaredAnnotations).hasSize(1);\r\n    Annotation annotation = declaredAnnotations[0];\r\n    assertThat(annotation).isNotNull();\r\n    assertThat(annotation.annotationType().getSimpleName()).isEqualTo(\"NonPublicAnnotation\");\r\n    assertThat(getDefaultValue(annotation, VALUE)).isEqualTo(-1);\r\n    assertThat(getDefaultValue(annotation)).isEqualTo(-1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromNonPublicAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#getDefaultValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]