[
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ArrayToStringConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Converts an array to a comma-delimited String. First adapts the source array\n * to a List, then delegates to {@link CollectionToStringConverter} to perform\n * the target String conversion.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class ArrayToStringConverter implements ConditionalGenericConverter {\n\n\tprivate final CollectionToStringConverter helperConverter;\n\n\n\tpublic ArrayToStringConverter(ConversionService conversionService) {\n\t\tthis.helperConverter = new CollectionToStringConverter(conversionService);\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Object[].class, String.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn this.helperConverter.matches(sourceType, targetType);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn this.helperConverter.convert(Arrays.asList(ObjectUtils.toObjectArray(source)), sourceType, targetType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ArrayToStringConverter#helperConverter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#helperConverter",
    "headType": "field",
    "relation": "haveType",
    "tail": "CollectionToStringConverter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Object[].class, String.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ArrayToStringConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return this.helperConverter.matches(sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ArrayToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return this.helperConverter.convert(Arrays.asList(ObjectUtils.toObjectArray(source)), sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ArrayToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ArrayToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.nio.ByteBuffer;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\n\n/**\n * Converts a {@link ByteBuffer} directly to and from {@code byte[] ByteBuffer} directly to and from {@code byte[]s} and indirectly\n * to any type that the {@link ConversionService} support via {@code byte[]}.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @since 4.0\n */\nfinal class ByteBufferConverter implements ConditionalGenericConverter {\n\n\tprivate static final TypeDescriptor BYTE_BUFFER_TYPE = TypeDescriptor.valueOf(ByteBuffer.class);\n\n\tprivate static final TypeDescriptor BYTE_ARRAY_TYPE = TypeDescriptor.valueOf(byte[].class);\n\n\tprivate static final Set<ConvertiblePair> CONVERTIBLE_PAIRS = Set.of(\n\t\t\t\tnew ConvertiblePair(ByteBuffer.class, byte[].class),\n\t\t\t\tnew ConvertiblePair(byte[].class, ByteBuffer.class),\n\t\t\t\tnew ConvertiblePair(ByteBuffer.class, Object.class),\n\t\t\t\tnew ConvertiblePair(Object.class, ByteBuffer.class));\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic ByteBufferConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn CONVERTIBLE_PAIRS;\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tboolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);\n\t\tif (sourceType.isAssignableTo(BYTE_BUFFER_TYPE)) {\n\t\t\treturn (byteBufferTarget || matchesFromByteBuffer(targetType));\n\t\t}\n\t\treturn (byteBufferTarget && matchesToByteBuffer(sourceType));\n\t}\n\n\tprivate boolean matchesFromByteBuffer(TypeDescriptor targetType) {\n\t\treturn (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||\n\t\t\t\tthis.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));\n\t}\n\n\tprivate boolean matchesToByteBuffer(TypeDescriptor sourceType) {\n\t\treturn (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||\n\t\t\t\tthis.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tboolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);\n\t\tif (source instanceof ByteBuffer buffer) {\n\t\t\treturn (byteBufferTarget ? buffer.duplicate() : convertFromByteBuffer(buffer, targetType));\n\t\t}\n\t\tif (byteBufferTarget) {\n\t\t\treturn convertToByteBuffer(source, sourceType);\n\t\t}\n\t\t// Should not happen\n\t\tthrow new IllegalStateException(\"Unexpected source/target types\");\n\t}\n\n\tprivate @Nullable Object convertFromByteBuffer(ByteBuffer source, TypeDescriptor targetType) {\n\t\tbyte[] bytes = new byte[source.remaining()];\n\t\tsource.get(bytes);\n\n\t\tif (targetType.isAssignableTo(BYTE_ARRAY_TYPE)) {\n\t\t\treturn bytes;\n\t\t}\n\t\treturn this.conversionService.convert(bytes, BYTE_ARRAY_TYPE, targetType);\n\t}\n\n\tprivate Object convertToByteBuffer(@Nullable Object source, TypeDescriptor sourceType) {\n\t\tbyte[] bytes = (byte[]) (source instanceof byte[] ? source :\n\t\t\t\tthis.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));\n\n\t\tif (bytes == null) {\n\t\t\treturn ByteBuffer.wrap(new byte[0]);\n\t\t}\n\n\t\tByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length);\n\t\tbyteBuffer.put(bytes);\n\n\t\treturn byteBuffer.rewind();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#BYTE_BUFFER_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#BYTE_BUFFER_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#BYTE_ARRAY_TYPE",
    "tailType": "field"
  }
]