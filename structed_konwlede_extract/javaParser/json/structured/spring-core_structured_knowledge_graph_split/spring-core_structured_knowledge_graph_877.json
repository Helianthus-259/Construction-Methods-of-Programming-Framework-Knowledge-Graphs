[
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#removeConvertible(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void removeConvertible(Class<?> sourceType, Class<?> targetType) {\r\n    this.converters.remove(sourceType, targetType);\r\n    invalidateCache();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#removeConvertible(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#removeConvertible(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#canConvert(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// ConversionService implementation\r\n@Override\r\npublic boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType) {\r\n    Assert.notNull(targetType, \"Target type to convert to cannot be null\");\r\n    return canConvert((sourceType != null ? TypeDescriptor.valueOf(sourceType) : null), TypeDescriptor.valueOf(targetType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#canConvert(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#canConvert(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#canConvert(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    Assert.notNull(targetType, \"Target type to convert to cannot be null\");\r\n    return (sourceType == null || getConverter(sourceType, targetType) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#canConvert(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#canConvert(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#canBypassConvert(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether conversion between the source type and the target type can be bypassed.\r\n * <p>More precisely, this method will return true if objects of sourceType can be\r\n * converted to the target type by returning the source object unchanged.\r\n * @param sourceType context about the source type to convert from\r\n * (may be {@code null} if source is {@code null})\r\n * @param targetType context about the target type to convert to (required)\r\n * @return {@code true} if conversion can be bypassed; {@code false} otherwise\r\n * @throws IllegalArgumentException if targetType is {@code null}\r\n * @since 3.2\r\n */\r\npublic boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    Assert.notNull(targetType, \"Target type to convert to cannot be null\");\r\n    return (sourceType == null || getConverter(sourceType, targetType) == NO_OP_CONVERTER);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#canBypassConvert(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Override\r\n@Nullable\r\npublic <T> T convert(@Nullable Object source, Class<T> targetType) {\r\n    Assert.notNull(targetType, \"Target type to convert to cannot be null\");\r\n    return (T) convert(source, TypeDescriptor.forObject(source), TypeDescriptor.valueOf(targetType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#convert(Object,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    Assert.notNull(targetType, \"Target type to convert to cannot be null\");\r\n    if (sourceType == null) {\r\n        Assert.isTrue(source == null, \"Source must be [null] if source type == [null]\");\r\n        return handleResult(null, targetType, convertNullSource(null, targetType));\r\n    }\r\n    if (source != null && !sourceType.getObjectType().isInstance(source)) {\r\n        throw new IllegalArgumentException(\"Source to convert from must be an instance of [\" + sourceType + \"]; instead it was a [\" + source.getClass().getName() + \"]\");\r\n    }\r\n    GenericConverter converter = getConverter(sourceType, targetType);\r\n    if (converter != null) {\r\n        Object result = ConversionUtils.invokeConverter(converter, source, sourceType, targetType);\r\n        return handleResult(sourceType, targetType, result);\r\n    }\r\n    return handleConverterNotFound(source, sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]