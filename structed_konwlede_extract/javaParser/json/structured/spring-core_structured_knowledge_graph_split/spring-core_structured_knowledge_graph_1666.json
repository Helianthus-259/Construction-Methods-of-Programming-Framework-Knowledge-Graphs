[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid synthesizeAnnotationFromMapWithNestedMap() {\r\n    ComponentScanSingleFilter componentScan = ComponentScanSingleFilterClass.class.getAnnotation(ComponentScanSingleFilter.class);\r\n    assertThat(componentScan).isNotNull();\r\n    assertThat(componentScan.value().pattern()).as(\"value from ComponentScan: \").isEqualTo(\"*Foo\");\r\n    AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanSingleFilterClass.class, componentScan, false, true);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.annotationType()).isEqualTo(ComponentScanSingleFilter.class);\r\n    Map<String, Object> filterMap = (Map<String, Object>) attributes.get(\"value\");\r\n    assertThat(filterMap).isNotNull();\r\n    assertThat(filterMap.get(\"pattern\")).isEqualTo(\"*Foo\");\r\n    // Modify nested map\r\n    filterMap.put(\"pattern\", \"newFoo\");\r\n    filterMap.put(\"enigma\", 42);\r\n    ComponentScanSingleFilter synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScanSingleFilter.class, ComponentScanSingleFilterClass.class);\r\n    assertThat(synthesizedComponentScan).isNotNull();\r\n    assertThat(synthesizedComponentScan).isNotSameAs(componentScan);\r\n    assertThat(synthesizedComponentScan.value().pattern()).as(\"value from synthesized ComponentScan: \").isEqualTo(\"newFoo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid synthesizeAnnotationFromMapWithNestedArrayOfMaps() {\r\n    ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class);\r\n    assertThat(componentScan).isNotNull();\r\n    AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true);\r\n    assertThat(attributes).isNotNull();\r\n    assertThat(attributes.annotationType()).isEqualTo(ComponentScan.class);\r\n    Map<String, Object>[] filters = (Map[]) attributes.get(\"excludeFilters\");\r\n    assertThat(filters).isNotNull();\r\n    List<String> patterns = stream(filters).map(m -> (String) m.get(\"pattern\")).collect(toList());\r\n    assertThat(patterns).isEqualTo(asList(\"*Foo\", \"*Bar\"));\r\n    // Modify nested maps\r\n    filters[0].put(\"pattern\", \"newFoo\");\r\n    filters[0].put(\"enigma\", 42);\r\n    filters[1].put(\"pattern\", \"newBar\");\r\n    filters[1].put(\"enigma\", 42);\r\n    ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class);\r\n    assertThat(synthesizedComponentScan).isNotNull();\r\n    assertThat(synthesizedComponentScan).isNotSameAs(componentScan);\r\n    patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::pattern).collect(toList());\r\n    assertThat(patterns).isEqualTo(asList(\"newFoo\", \"newBar\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNestedArrayOfMaps()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromDefaultsWithoutAttributeAliases() {\r\n    AnnotationWithDefaults annotationWithDefaults = synthesizeAnnotation(AnnotationWithDefaults.class);\r\n    assertThat(annotationWithDefaults).isNotNull();\r\n    assertThat(annotationWithDefaults.text()).as(\"text: \").isEqualTo(\"enigma\");\r\n    assertThat(annotationWithDefaults.predicate()).as(\"predicate: \").isTrue();\r\n    assertThat(annotationWithDefaults.characters()).as(\"characters: \").isEqualTo(new char[] { 'a', 'b', 'c' });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromDefaultsWithAttributeAliases() {\r\n    ContextConfig contextConfig = synthesizeAnnotation(ContextConfig.class);\r\n    assertThat(contextConfig).isNotNull();\r\n    assertThat(contextConfig.value()).as(\"value: \").isEmpty();\r\n    assertThat(contextConfig.location()).as(\"location: \").isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromDefaultsWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases() {\r\n    Map<String, Object> map = Collections.singletonMap(\"location\", \"test.xml\");\r\n    ContextConfig contextConfig = synthesizeAnnotation(map, ContextConfig.class, null);\r\n    assertThat(contextConfig).isNotNull();\r\n    assertThat(contextConfig.value()).as(\"value: \").isEqualTo(\"test.xml\");\r\n    assertThat(contextConfig.location()).as(\"location: \").isEqualTo(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMinimalAttributesWithAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements() {\r\n    Map<String, Object> map = Collections.singletonMap(\"value\", \"/foo\");\r\n    Get get = synthesizeAnnotation(map, Get.class, null);\r\n    assertThat(get).isNotNull();\r\n    assertThat(get.value()).as(\"value: \").isEqualTo(\"/foo\");\r\n    assertThat(get.path()).as(\"path: \").isEqualTo(\"/foo\");\r\n    map = Collections.singletonMap(\"path\", \"/foo\");\r\n    get = synthesizeAnnotation(map, Get.class, null);\r\n    assertThat(get).isNotNull();\r\n    assertThat(get.value()).as(\"value: \").isEqualTo(\"/foo\");\r\n    assertThat(get.path()).as(\"path: \").isEqualTo(\"/foo\");\r\n}",
    "tailType": "method_code"
  }
]