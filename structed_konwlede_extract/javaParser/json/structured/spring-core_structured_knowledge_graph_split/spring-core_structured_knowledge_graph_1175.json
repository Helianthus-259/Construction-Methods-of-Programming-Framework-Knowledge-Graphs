[
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#active",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#active",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#setVirtualThreads(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Switch this executor to virtual threads. Requires Java 21 or higher.\r\n * <p>The default is {@code false}, indicating platform threads.\r\n * Set this flag to {@code true} in order to create virtual threads instead.\r\n * @since 6.1\r\n */\r\npublic void setVirtualThreads(boolean virtual) {\r\n    this.virtualThreadDelegate = (virtual ? new VirtualThreadDelegate() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#setVirtualThreads(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#setThreadFactory(ThreadFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify an external factory to use for creating new Threads,\r\n * instead of relying on the local properties of this executor.\r\n * <p>You may specify an inner ThreadFactory bean or also a ThreadFactory reference\r\n * obtained from JNDI (on a Jakarta EE server) or some other lookup mechanism.\r\n * @see #setThreadNamePrefix\r\n * @see #setThreadPriority\r\n */\r\npublic void setThreadFactory(@Nullable ThreadFactory threadFactory) {\r\n    this.threadFactory = threadFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#setThreadFactory(ThreadFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#getThreadFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the external factory to use for creating new Threads, if any.\r\n */\r\n@Nullable\r\npublic final ThreadFactory getThreadFactory() {\r\n    return this.threadFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#getThreadFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#getThreadFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#setTaskDecorator(TaskDecorator)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}\r\n * about to be executed.\r\n * <p>Note that such a decorator is not necessarily being applied to the\r\n * user-supplied {@code Runnable}/{@code Callable} but rather to the actual\r\n * execution callback (which may be a wrapper around the user-supplied task).\r\n * <p>The primary use case is to set some execution context around the task's\r\n * invocation, or to provide some monitoring/statistics for task execution.\r\n * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\r\n * is limited to plain {@code Runnable} execution via {@code execute} calls.\r\n * In case of {@code #submit} calls, the exposed {@code Runnable} will be a\r\n * {@code FutureTask} which does not propagate any exceptions; you might\r\n * have to cast it and call {@code Future#get} to evaluate exceptions.\r\n * @since 4.3\r\n */\r\npublic void setTaskDecorator(TaskDecorator taskDecorator) {\r\n    this.taskDecorator = taskDecorator;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#setTaskDecorator(TaskDecorator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#setTaskTerminationTimeout(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify a timeout (in milliseconds) for task termination when closing\r\n * this executor. The default is 0, not waiting for task termination at all.\r\n * <p>Note that a concrete >0 timeout specified here will lead to the\r\n * wrapping of every submitted task into a task-tracking runnable which\r\n * involves considerable overhead in case of a high number of tasks.\r\n * However, for a modest level of submissions with longer-running\r\n * tasks, this is feasible in order to arrive at a graceful shutdown.\r\n * <p>Note that {@code SimpleAsyncTaskExecutor} does not participate in\r\n * a coordinated lifecycle stop but rather just awaits task termination\r\n * on {@link #close()}.\r\n * @param timeout the timeout in milliseconds\r\n * @since 6.1\r\n * @see #close()\r\n * @see org.springframework.scheduling.concurrent.ExecutorConfigurationSupport#setAwaitTerminationMillis\r\n */\r\npublic void setTaskTerminationTimeout(long timeout) {\r\n    Assert.isTrue(timeout >= 0, \"Timeout value must be >=0\");\r\n    this.taskTerminationTimeout = timeout;\r\n    this.activeThreads = (timeout > 0 ? ConcurrentHashMap.newKeySet() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#setTaskTerminationTimeout(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#setConcurrencyLimit(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the maximum number of parallel task executions allowed.\r\n * The default of -1 indicates no concurrency limit at all.\r\n * <p>This is the equivalent of a maximum pool size in a thread pool,\r\n * preventing temporary overload of the thread management system.\r\n * However, in contrast to a thread pool with a managed task queue,\r\n * this executor will block the submitter until the task can be\r\n * accepted when the configured concurrency limit has been reached.\r\n * If you prefer queue-based task hand-offs without such blocking,\r\n * consider using a {@code ThreadPoolTaskExecutor} instead.\r\n * @see #UNBOUNDED_CONCURRENCY\r\n * @see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor#setMaxPoolSize\r\n */\r\npublic void setConcurrencyLimit(int concurrencyLimit) {\r\n    this.concurrencyThrottle.setConcurrencyLimit(concurrencyLimit);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#setConcurrencyLimit(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#getConcurrencyLimit()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum number of parallel task executions allowed.\r\n */\r\npublic final int getConcurrencyLimit() {\r\n    return this.concurrencyThrottle.getConcurrencyLimit();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#getConcurrencyLimit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#isThrottleActive()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the concurrency throttle is currently active.\r\n * @return {@code true} if the concurrency limit for this instance is active\r\n * @see #getConcurrencyLimit()\r\n * @see #setConcurrencyLimit\r\n */\r\npublic final boolean isThrottleActive() {\r\n    return this.concurrencyThrottle.isThrottleActive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SimpleAsyncTaskExecutor#isThrottleActive()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SimpleAsyncTaskExecutor#isActive()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this executor is still active, i.e. not closed yet,\r\n * and therefore accepts further task submissions. Otherwise, it is\r\n * either in the task termination phase or entirely shut down already.\r\n * @since 6.1\r\n * @see #setTaskTerminationTimeout\r\n * @see #close()\r\n */\r\npublic boolean isActive() {\r\n    return this.active;\r\n}",
    "tailType": "method_code"
  }
]