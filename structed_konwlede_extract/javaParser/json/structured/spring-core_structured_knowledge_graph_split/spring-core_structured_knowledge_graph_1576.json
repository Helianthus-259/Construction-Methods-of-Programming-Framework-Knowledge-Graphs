[
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash() {\r\n    FilePatternResourceHintsRegistrar.forClassPathLocations(\"classpath:/META-INF\").withFilePrefixes(\"test\").withFileExtensions(\".txt\").registerHints(this.hints, null);\r\n    assertThat(this.hints.resourcePatternHints()).singleElement().satisfies(includes(\"/\", \"META-INF\", \"META-INF/test*.txt\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithClasspathLocationUsingResourceClasspathPrefixAndTrailingSlash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerWithNonExistingLocationDoesNotRegisterHint() {\r\n    FilePatternResourceHintsRegistrar.forClassPathLocations(\"does-not-exist/\").withClassPathLocations(\"another-does-not-exist/\").withFilePrefixes(\"test\").withFileExtensions(\".txt\").registerHints(this.hints, null);\r\n    assertThat(this.hints.resourcePatternHints()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#registerWithNonExistingLocationDoesNotRegisterHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#includes(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Consumer<ResourcePatternHints> includes(String... patterns) {\r\n    return hint -> assertThat(hint.getIncludes().stream().map(ResourcePatternHint::getPattern)).containsExactlyInAnyOrder(patterns);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.FilePatternResourceHintsRegistrarTests#includes(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link KotlinDetectorRuntimeHints}.\n * @author Brian Clozel\n */\nclass KotlinDetectorRuntimeHintsTests {\n\n\tprivate RuntimeHints hints;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.hints = new RuntimeHints();\n\t\tSpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\")\n\t\t\t\t.load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar\n\t\t\t\t\t\t.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\n\t}\n\n\t@Test\n\tvoid kotlinMetadataHasHints() {\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(kotlin.Metadata.class)).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid kotlinReflectHasHints() {\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(kotlin.reflect.full.KClasses.class)).accepts(this.hints);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#hints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#hints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    this.hints = new RuntimeHints();\r\n    SpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\").load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid kotlinMetadataHasHints() {\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(kotlin.Metadata.class)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinMetadataHasHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid kotlinReflectHasHints() {\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(kotlin.reflect.full.KClasses.class)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  }
]