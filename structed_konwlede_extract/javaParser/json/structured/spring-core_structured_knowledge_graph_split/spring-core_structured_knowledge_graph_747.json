[
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrderFromAnnotation(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Integer findOrderFromAnnotation(Object obj) {\r\n    AnnotatedElement element = (obj instanceof AnnotatedElement ae ? ae : obj.getClass());\r\n    MergedAnnotations annotations = MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY);\r\n    Integer order = OrderUtils.getOrderFromAnnotations(element, annotations);\r\n    if (order == null && obj instanceof DecoratingProxy decoratingProxy) {\r\n        return findOrderFromAnnotation(decoratingProxy.getDecoratedClass());\r\n    }\r\n    return order;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrderFromAnnotation(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#findOrderFromAnnotation(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#getPriority(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation retrieves an @{@link jakarta.annotation.Priority}\r\n * value, allowing for additional semantics over the regular @{@link Order}\r\n * annotation: typically, selecting one object over another in case of\r\n * multiple matches but only one object to be returned.\r\n */\r\n@Override\r\n@Nullable\r\npublic Integer getPriority(Object obj) {\r\n    if (obj instanceof Class<?> clazz) {\r\n        return OrderUtils.getPriority(clazz);\r\n    }\r\n    Integer priority = OrderUtils.getPriority(obj.getClass());\r\n    if (priority == null && obj instanceof DecoratingProxy decoratingProxy) {\r\n        return getPriority(decoratingProxy.getDecoratedClass());\r\n    }\r\n    return priority;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#getPriority(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#getPriority(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#getPriority(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sort(List<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given list with a default {@link AnnotationAwareOrderComparator}.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param list the List to sort\r\n * @see java.util.List#sort(java.util.Comparator)\r\n */\r\npublic static void sort(List<?> list) {\r\n    if (list.size() > 1) {\r\n        list.sort(INSTANCE);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sort(List<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sort(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given array with a default AnnotationAwareOrderComparator.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param array the array to sort\r\n * @see java.util.Arrays#sort(Object[], java.util.Comparator)\r\n */\r\npublic static void sort(Object[] array) {\r\n    if (array.length > 1) {\r\n        Arrays.sort(array, INSTANCE);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sort(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sortIfNecessary(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given array or List with a default AnnotationAwareOrderComparator,\r\n * if necessary. Simply skips sorting when given any other value.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param value the array or List to sort\r\n * @see java.util.Arrays#sort(Object[], java.util.Comparator)\r\n */\r\npublic static void sortIfNecessary(Object value) {\r\n    if (value instanceof Object[] objects) {\r\n        sort(objects);\r\n    } else if (value instanceof List<?> list) {\r\n        sort(list);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparator#sortIfNecessary(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparator",
    "headType": "class",
    "relation": "extend",
    "tail": "OrderComparator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationConfigurationException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationConfigurationException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationConfigurationException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport org.springframework.core.NestedRuntimeException;\n\n/**\n * Thrown by {@link AnnotationUtils} and <em>synthesized annotations</em>\n * if an annotation is improperly configured.\n *\n * @author Sam Brannen\n * @since 4.2\n * @see AnnotationUtils\n * @see AnnotationUtils#isSynthesizedAnnotation(java.lang.annotation.Annotation)\n */\n@SuppressWarnings(\"serial\")\npublic class AnnotationConfigurationException extends NestedRuntimeException {\n\n\t/**\n\t * Construct a new {@code AnnotationConfigurationException} with the\n\t * supplied message.\n\t * @param message the detail message\n\t */\n\tpublic AnnotationConfigurationException(String message) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t * Construct a new {@code AnnotationConfigurationException} with the\n\t * supplied message and cause.\n\t * @param message the detail message\n\t * @param cause the root cause\n\t */\n\tpublic AnnotationConfigurationException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationConfigurationException",
    "headType": "class",
    "relation": "extend",
    "tail": "NestedRuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  }
]