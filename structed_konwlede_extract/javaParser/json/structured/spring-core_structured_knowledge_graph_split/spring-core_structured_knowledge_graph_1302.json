[
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digestAsHexString(String,byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digestAsHexString(String,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String digestAsHexString(String algorithm, InputStream inputStream) throws IOException {\r\n    char[] hexDigest = digestAsHexChars(algorithm, inputStream);\r\n    return new String(hexDigest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digestAsHexString(String,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#appendDigestAsHex(String,byte[],StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static StringBuilder appendDigestAsHex(String algorithm, byte[] bytes, StringBuilder builder) {\r\n    char[] hexDigest = digestAsHexChars(algorithm, bytes);\r\n    return builder.append(hexDigest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#appendDigestAsHex(String,byte[],StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#appendDigestAsHex(String,InputStream,StringBuilder)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static StringBuilder appendDigestAsHex(String algorithm, InputStream inputStream, StringBuilder builder) throws IOException {\r\n    char[] hexDigest = digestAsHexChars(algorithm, inputStream);\r\n    return builder.append(hexDigest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#appendDigestAsHex(String,InputStream,StringBuilder)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digestAsHexChars(String,byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static char[] digestAsHexChars(String algorithm, byte[] bytes) {\r\n    byte[] digest = digest(algorithm, bytes);\r\n    return encodeHex(digest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digestAsHexChars(String,byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#digestAsHexChars(String,InputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static char[] digestAsHexChars(String algorithm, InputStream inputStream) throws IOException {\r\n    byte[] digest = digest(algorithm, inputStream);\r\n    return encodeHex(digest);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#digestAsHexChars(String,InputStream)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtils#encodeHex(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static char[] encodeHex(byte[] bytes) {\r\n    char[] chars = new char[32];\r\n    for (int i = 0; i < chars.length; i = i + 2) {\r\n        byte b = bytes[i / 2];\r\n        chars[i] = HEX_CHARS[(b >>> 0x4) & 0xf];\r\n        chars[i + 1] = HEX_CHARS[b & 0xf];\r\n    }\r\n    return chars;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtils#encodeHex(byte[])",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ErrorHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ErrorHandler",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ErrorHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\n/**\n * A strategy for handling errors. This is especially useful for handling\n * errors that occur during asynchronous execution of tasks that have been\n * submitted to a TaskScheduler. In such cases, it may not be possible to\n * throw the error to the original caller.\n *\n * @author Mark Fisher\n * @since 3.0\n */\n@FunctionalInterface\npublic interface ErrorHandler {\n\n\t/**\n\t * Handle the given error, possibly rethrowing it as a fatal exception.\n\t */\n\tvoid handleError(Throwable t);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ErrorHandler#handleError(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Handle the given error, possibly rethrowing it as a fatal exception.\r\n */\r\nvoid handleError(Throwable t);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ErrorHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ErrorHandler#handleError(Throwable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  }
]