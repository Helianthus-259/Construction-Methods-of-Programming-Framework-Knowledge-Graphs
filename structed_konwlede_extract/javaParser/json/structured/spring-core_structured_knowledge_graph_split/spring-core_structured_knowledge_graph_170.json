[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onType(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflection hint is registered for the given type.\r\n * <p>The returned type exposes additional methods that refine the predicate behavior.\r\n * @param type the type\r\n * @return the {@link RuntimeHints} predicate\r\n */\r\npublic TypeHintPredicate onType(Class<?> type) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    return new TypeHintPredicate(TypeReference.of(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onConstructor(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflection hint is registered for the given constructor.\r\n * By default, both introspection and invocation hints match.\r\n * <p>The returned type exposes additional methods that refine the predicate behavior.\r\n * @param constructor the constructor\r\n * @return the {@link RuntimeHints} predicate\r\n * @deprecated since 7.0 in favor of {@link #onConstructorInvocation(Constructor)}\r\n * or {@link #onType(Class)}.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic ConstructorHintPredicate onConstructor(Constructor<?> constructor) {\r\n    Assert.notNull(constructor, \"'constructor' must not be null\");\r\n    return new ConstructorHintPredicate(constructor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onConstructor(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onConstructor(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onConstructorInvocation(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the given constructor.\r\n * @param constructor the constructor\r\n * @return the {@link RuntimeHints} predicate\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onConstructorInvocation(Constructor<?> constructor) {\r\n    Assert.notNull(constructor, \"'constructor' must not be null\");\r\n    return new ConstructorHintPredicate(constructor).invoke();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onConstructorInvocation(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflection hint is registered for the given method.\r\n * By default, both introspection and invocation hints match.\r\n * <p>The returned type exposes additional methods that refine the predicate behavior.\r\n * @param method the method\r\n * @return the {@link RuntimeHints} predicate\r\n * @deprecated since 7.0 in favor of {@link #onMethodInvocation(Method)}\r\n * or {@link #onType(Class)}.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic MethodHintPredicate onMethod(Method method) {\r\n    Assert.notNull(method, \"'method' must not be null\");\r\n    return new MethodHintPredicate(method);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the given method.\r\n * @param method the method\r\n * @return the {@link RuntimeHints} predicate\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onMethodInvocation(Method method) {\r\n    Assert.notNull(method, \"'method' must not be null\");\r\n    return new MethodHintPredicate(method).invoke();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflection hint is registered for the method that matches the given selector.\r\n * This looks up a method on the given type with the expected name, if unique.\r\n * By default, both introspection and invocation hints match.\r\n * <p>The returned type exposes additional methods that refine the predicate behavior.\r\n * @param type the type holding the method\r\n * @param methodName the method name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws IllegalArgumentException if the method cannot be found or if multiple methods are found with the same name.\r\n * @deprecated since 7.0 in favor of {@link #onMethodInvocation(Class, String)}\r\n * or {@link #onType(Class)}.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic MethodHintPredicate onMethod(Class<?> type, String methodName) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    Assert.hasText(methodName, \"'methodName' must not be empty\");\r\n    return new MethodHintPredicate(getMethod(type, methodName));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether an invocation hint is registered for the method that matches the given selector.\r\n * This looks up a method on the given type with the expected name, if unique.\r\n * @param type the type holding the method\r\n * @param methodName the method name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws IllegalArgumentException if the method cannot be found or if multiple methods are found with the same name.\r\n * @since 7.0\r\n */\r\npublic Predicate<RuntimeHints> onMethodInvocation(Class<?> type, String methodName) {\r\n    Assert.notNull(type, \"'type' must not be null\");\r\n    Assert.hasText(methodName, \"'methodName' must not be empty\");\r\n    return new MethodHintPredicate(getMethod(type, methodName)).invoke();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethodInvocation(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate that checks whether a reflection hint is registered for the method that matches the given selector.\r\n * This looks up a method on the given type with the expected name, if unique.\r\n * By default, both introspection and invocation hints match.\r\n * <p>The returned type exposes additional methods that refine the predicate behavior.\r\n * @param className the name of the class holding the method\r\n * @param methodName the method name\r\n * @return the {@link RuntimeHints} predicate\r\n * @throws ClassNotFoundException if the class cannot be resolved.\r\n * @throws IllegalArgumentException if the method cannot be found or if multiple methods are found with the same name.\r\n * @deprecated since 7.0 in favor of {@link #onMethodInvocation(String, String)}\r\n * or {@link #onType(Class)}.\r\n */\r\n@Deprecated(since = \"7.0\", forRemoval = true)\r\npublic MethodHintPredicate onMethod(String className, String methodName) throws ClassNotFoundException {\r\n    Assert.hasText(className, \"'className' must not be empty\");\r\n    Assert.hasText(methodName, \"'methodName' must not be empty\");\r\n    return onMethod(Class.forName(className), methodName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionHintsPredicates#onMethod(String,String)",
    "tailType": "method"
  }
]