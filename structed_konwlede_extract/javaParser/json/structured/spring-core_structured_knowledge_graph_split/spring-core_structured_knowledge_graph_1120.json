[
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.function.Supplier;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link ThreadLocal} subclass that exposes a specified name\n * as {@link #toString()} result (allowing for introspection).\n *\n * @author Juergen Hoeller\n * @author Qimiao Chen\n * @since 2.5.2\n * @param <T> the value type\n * @see NamedInheritableThreadLocal\n */\npublic class NamedThreadLocal<T> extends ThreadLocal<T> {\n\n\tprivate final String name;\n\n\n\t/**\n\t * Create a new NamedThreadLocal with the given name.\n\t * @param name a descriptive name for this ThreadLocal\n\t */\n\tpublic NamedThreadLocal(String name) {\n\t\tAssert.hasText(name, \"Name must not be empty\");\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\n\n\t/**\n\t * Create a named thread local variable. The initial value of the variable is\n\t * determined by invoking the {@code get} method on the {@code Supplier}.\n\t * @param <S> the type of the named thread local's value\n\t * @param name a descriptive name for the thread local\n\t * @param supplier the supplier to be used to determine the initial value\n\t * @return a new named thread local\n\t * @since 6.1\n\t */\n\tpublic static <S> ThreadLocal<S> withInitial(String name, Supplier<? extends S> supplier) {\n\t\treturn new SuppliedNamedThreadLocal<>(name, supplier);\n\t}\n\n\n\t/**\n\t * An extension of NamedThreadLocal that obtains its initial value from\n\t * the specified {@code Supplier}.\n\t * @param <T> the type of the named thread local's value\n\t */\n\tprivate static final class SuppliedNamedThreadLocal<T> extends NamedThreadLocal<T> {\n\n\t\tprivate final Supplier<? extends T> supplier;\n\n\t\tSuppliedNamedThreadLocal(String name, Supplier<? extends T> supplier) {\n\t\t\tsuper(name);\n\t\t\tAssert.notNull(supplier, \"Supplier must not be null\");\n\t\t\tthis.supplier = supplier;\n\t\t}\n\n\t\t@Override\n\t\tprotected T initialValue() {\n\t\t\treturn this.supplier.get();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.SuppliedNamedThreadLocal#supplier",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal#supplier",
    "headType": "field",
    "relation": "haveType",
    "tail": "Supplier<? extends T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal#initialValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected T initialValue() {\r\n    return this.supplier.get();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SuppliedNamedThreadLocal#initialValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal#initialValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SuppliedNamedThreadLocal",
    "headType": "class",
    "relation": "extend",
    "tail": "NamedThreadLocal",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NativeDetector",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NativeDetector",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A common delegate for detecting a GraalVM native image environment.\n *\n * @author Sebastien Deleuze\n * @since 5.3.4\n */\npublic abstract class NativeDetector {\n\n\t// See https://github.com/oracle/graal/blob/master/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/ImageInfo.java\n\tprivate static final @Nullable String imageCode = System.getProperty(\"org.graalvm.nativeimage.imagecode\");\n\n\tprivate static final boolean inNativeImage = (imageCode != null);\n\n\n\t/**\n\t * Returns {@code true} if running in a native image context (for example\n\t * {@code buildtime}, {@code runtime}, or {@code agent}) expressed by setting the\n\t * {@code org.graalvm.nativeimage.imagecode} system property to any value.\n\t */\n\tpublic static boolean inNativeImage() {\n\t\treturn inNativeImage;\n\t}\n\n\t/**\n\t * Returns {@code true} if running in any of the specified native image context(s).\n\t * @param contexts the native image context(s)\n\t * @since 6.0.10\n\t */\n\tpublic static boolean inNativeImage(Context... contexts) {\n\t\tfor (Context context: contexts) {\n\t\t\tif (context.key.equals(imageCode)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Native image context as defined in GraalVM's\n\t * <a href=\"https://github.com/oracle/graal/blob/master/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/ImageInfo.java\">ImageInfo</a>.\n\t * @since 6.0.10\n\t */\n\tpublic enum Context {\n\n\t\t/**\n\t\t * The code is executing in the context of image building.\n\t\t */\n\t\tBUILD(\"buildtime\"),\n\n\t\t/**\n\t\t * The code is executing at image runtime.\n\t\t */\n\t\tRUN(\"runtime\");\n\n\t\tprivate final String key;\n\n\t\tContext(final String key) {\n\t\t\tthis.key = key;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.key;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NativeDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NativeDetector#imageCode",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NativeDetector#imageCode",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NativeDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NativeDetector#inNativeImage",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NativeDetector#inNativeImage",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NativeDetector#inNativeImage()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@code true} if running in a native image context (for example\r\n * {@code buildtime}, {@code runtime}, or {@code agent}) expressed by setting the\r\n * {@code org.graalvm.nativeimage.imagecode} system property to any value.\r\n */\r\npublic static boolean inNativeImage() {\r\n    return inNativeImage;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NativeDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NativeDetector#inNativeImage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NativeDetector#inNativeImage(Context)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@code true} if running in any of the specified native image context(s).\r\n * @param contexts the native image context(s)\r\n * @since 6.0.10\r\n */\r\npublic static boolean inNativeImage(Context... contexts) {\r\n    for (Context context : contexts) {\r\n        if (context.key.equals(imageCode)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NativeDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NativeDetector#inNativeImage(Context)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NestedCheckedException",
    "tailType": "class"
  }
]