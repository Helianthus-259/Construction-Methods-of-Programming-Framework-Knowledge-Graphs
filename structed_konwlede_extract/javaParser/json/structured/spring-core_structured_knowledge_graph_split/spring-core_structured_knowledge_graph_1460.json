[
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#handleDtd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader#handleEntityReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEntityReference() throws SAXException {\r\n    if (getLexicalHandler() != null) {\r\n        getLexicalHandler().startEntity(this.reader.getLocalName());\r\n    }\r\n    if (getLexicalHandler() != null) {\r\n        getLexicalHandler().endEntity(this.reader.getLocalName());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#handleEntityReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader#handleEndDocument()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEndDocument() throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        getContentHandler().endDocument();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#handleEndDocument()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader#handleProcessingInstruction()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleProcessingInstruction() throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        getContentHandler().processingInstruction(this.reader.getPITarget(), this.reader.getPIData());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#handleProcessingInstruction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader#getAttributes()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Attributes getAttributes() {\r\n    AttributesImpl attributes = new AttributesImpl();\r\n    for (int i = 0; i < this.reader.getAttributeCount(); i++) {\r\n        String namespace = this.reader.getAttributeNamespace(i);\r\n        if (namespace == null || !hasNamespacesFeature()) {\r\n            namespace = \"\";\r\n        }\r\n        String type = this.reader.getAttributeType(i);\r\n        if (type == null) {\r\n            type = \"CDATA\";\r\n        }\r\n        attributes.addAttribute(namespace, this.reader.getAttributeLocalName(i), toQualifiedName(this.reader.getAttributeName(i)), type, this.reader.getAttributeValue(i));\r\n    }\r\n    if (hasNamespacePrefixesFeature()) {\r\n        for (int i = 0; i < this.reader.getNamespaceCount(); i++) {\r\n            String prefix = this.reader.getNamespacePrefix(i);\r\n            String namespaceUri = this.reader.getNamespaceURI(i);\r\n            String qName;\r\n            if (StringUtils.hasLength(prefix)) {\r\n                qName = \"xmlns:\" + prefix;\r\n            } else {\r\n                qName = \"xmlns\";\r\n            }\r\n            attributes.addAttribute(\"\", \"\", qName, \"CDATA\", namespaceUri);\r\n        }\r\n    }\r\n    return attributes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxStreamXMLReader#getAttributes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxStreamXMLReader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractStaxXMLReader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.StaxUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.function.Supplier;\n\nimport javax.xml.stream.XMLEventFactory;\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLResolver;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.stream.events.XMLEvent;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.stax.StAXResult;\nimport javax.xml.transform.stax.StAXSource;\n\nimport org.jspecify.annotations.Nullable;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.XMLReader;\n\n/**\n * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3\n * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher.\n *\n * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with\n * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX\n * readers/handlers and vice-versa.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic abstract class StaxUtils {\n\n\tprivate static final XMLResolver NO_OP_XML_RESOLVER =\n\t\t\t(publicID, systemID, base, ns) -> InputStream.nullInputStream();\n\n\n\t/**\n\t * Create an {@link XMLInputFactory} with Spring's defensive setup,\n\t * i.e. no support for the resolution of DTDs and external entities.\n\t * @return a new defensively initialized input factory instance to use\n\t * @since 5.0\n\t */\n\tpublic static XMLInputFactory createDefensiveInputFactory() {\n\t\treturn createDefensiveInputFactory(XMLInputFactory::newInstance);\n\t}\n\n\t/**\n\t * Variant of {@link #createDefensiveInputFactory()} with a custom instance.\n\t * @param instanceSupplier supplier for the input factory instance\n\t * @return a new defensively initialized input factory instance to use\n\t * @since 5.0.12\n\t */\n\tpublic static <T extends XMLInputFactory> T createDefensiveInputFactory(Supplier<T> instanceSupplier) {\n\t\tT inputFactory = instanceSupplier.get();\n\t\tinputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n\t\tinputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n\t\tinputFactory.setXMLResolver(NO_OP_XML_RESOLVER);\n\t\treturn inputFactory;\n\t}\n\n\t/**\n\t * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLStreamReader}.\n\t * @param streamReader the StAX stream reader\n\t * @return a source wrapping the {@code streamReader}\n\t */\n\tpublic static Source createStaxSource(XMLStreamReader streamReader) {\n\t\treturn new StAXSource(streamReader);\n\t}\n\n\t/**\n\t * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}.\n\t * @param eventReader the StAX event reader\n\t * @return a source wrapping the {@code eventReader}\n\t */\n\tpublic static Source createStaxSource(XMLEventReader eventReader) throws XMLStreamException {\n\t\treturn new StAXSource(eventReader);\n\t}\n\n\t/**\n\t * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLStreamReader}.\n\t * @param streamReader the StAX stream reader\n\t * @return a source wrapping the {@code streamReader}\n\t */\n\tpublic static Source createCustomStaxSource(XMLStreamReader streamReader) {\n\t\treturn new StaxSource(streamReader);\n\t}\n\n\t/**\n\t * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLEventReader}.\n\t * @param eventReader the StAX event reader\n\t * @return a source wrapping the {@code eventReader}\n\t */\n\tpublic static Source createCustomStaxSource(XMLEventReader eventReader) {\n\t\treturn new StaxSource(eventReader);\n\t}\n\n\t/**\n\t * Indicate whether the given {@link Source} is a JAXP 1.4 StAX Source or\n\t * custom StAX Source.\n\t * @return {@code true} if {@code source} is a JAXP 1.4 {@link StAXSource} or\n\t * custom StAX Source; {@code false} otherwise\n\t */\n\tpublic static boolean isStaxSource(Source source) {\n\t\treturn (source instanceof StAXSource || source instanceof StaxSource);\n\t}\n\n\t/**\n\t * Return the {@link XMLStreamReader} for the given StAX Source.\n\t * @param source a JAXP 1.4 {@link StAXSource}\n\t * @return the {@link XMLStreamReader}\n\t * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}\n\t * or custom StAX Source\n\t */\n\tpublic static @Nullable XMLStreamReader getXMLStreamReader(Source source) {\n\t\tif (source instanceof StAXSource stAXSource) {\n\t\t\treturn stAXSource.getXMLStreamReader();\n\t\t}\n\t\telse if (source instanceof StaxSource staxSource) {\n\t\t\treturn staxSource.getXMLStreamReader();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Source '\" + source + \"' is neither StaxSource nor StAXSource\");\n\t\t}\n\t}\n\n\t/**\n\t * Return the {@link XMLEventReader} for the given StAX Source.\n\t * @param source a JAXP 1.4 {@link StAXSource}\n\t * @return the {@link XMLEventReader}\n\t * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}\n\t * or custom StAX Source\n\t */\n\tpublic static @Nullable XMLEventReader getXMLEventReader(Source source) {\n\t\tif (source instanceof StAXSource stAXSource) {\n\t\t\treturn stAXSource.getXMLEventReader();\n\t\t}\n\t\telse if (source instanceof StaxSource staxSource) {\n\t\t\treturn staxSource.getXMLEventReader();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Source '\" + source + \"' is neither StaxSource nor StAXSource\");\n\t\t}\n\t}\n\n\t/**\n\t * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLStreamWriter}.\n\t * @param streamWriter the StAX stream writer\n\t * @return a result wrapping the {@code streamWriter}\n\t */\n\tpublic static Result createStaxResult(XMLStreamWriter streamWriter) {\n\t\treturn new StAXResult(streamWriter);\n\t}\n\n\t/**\n\t * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLEventWriter}.\n\t * @param eventWriter the StAX event writer\n\t * @return a result wrapping {@code streamReader}\n\t */\n\tpublic static Result createStaxResult(XMLEventWriter eventWriter) {\n\t\treturn new StAXResult(eventWriter);\n\t}\n\n\t/**\n\t * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLStreamWriter}.\n\t * @param streamWriter the StAX stream writer\n\t * @return a source wrapping the {@code streamWriter}\n\t */\n\tpublic static Result createCustomStaxResult(XMLStreamWriter streamWriter) {\n\t\treturn new StaxResult(streamWriter);\n\t}\n\n\t/**\n\t * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLEventWriter}.\n\t * @param eventWriter the StAX event writer\n\t * @return a source wrapping the {@code eventWriter}\n\t */\n\tpublic static Result createCustomStaxResult(XMLEventWriter eventWriter) {\n\t\treturn new StaxResult(eventWriter);\n\t}\n\n\t/**\n\t * Indicate whether the given {@link Result} is a JAXP 1.4 StAX Result or\n\t * custom StAX Result.\n\t * @return {@code true} if {@code result} is a JAXP 1.4 {@link StAXResult} or\n\t * custom StAX Result; {@code false} otherwise\n\t */\n\tpublic static boolean isStaxResult(Result result) {\n\t\treturn (result instanceof StAXResult || result instanceof StaxResult);\n\t}\n\n\t/**\n\t * Return the {@link XMLStreamWriter} for the given StAX Result.\n\t * @param result a JAXP 1.4 {@link StAXResult}\n\t * @return the {@link XMLStreamReader}\n\t * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}\n\t * or custom StAX Result\n\t */\n\tpublic static @Nullable XMLStreamWriter getXMLStreamWriter(Result result) {\n\t\tif (result instanceof StAXResult stAXResult) {\n\t\t\treturn stAXResult.getXMLStreamWriter();\n\t\t}\n\t\telse if (result instanceof StaxResult staxResult) {\n\t\t\treturn staxResult.getXMLStreamWriter();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\n\t\t}\n\t}\n\n\t/**\n\t * Return the {@link XMLEventWriter} for the given StAX Result.\n\t * @param result a JAXP 1.4 {@link StAXResult}\n\t * @return the {@link XMLStreamReader}\n\t * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}\n\t * or custom StAX Result\n\t */\n\tpublic static @Nullable XMLEventWriter getXMLEventWriter(Result result) {\n\t\tif (result instanceof StAXResult stAXResult) {\n\t\t\treturn stAXResult.getXMLEventWriter();\n\t\t}\n\t\telse if (result instanceof StaxResult staxResult) {\n\t\t\treturn staxResult.getXMLEventWriter();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Result '\" + result + \"' is neither StaxResult nor StAXResult\");\n\t\t}\n\t}\n\n\t/**\n\t * Create a {@link XMLEventReader} from the given list of {@link XMLEvent}.\n\t * @param events the list of {@link XMLEvent XMLEvents}.\n\t * @return an {@code XMLEventReader} that reads from the given events\n\t * @since 5.0\n\t */\n\tpublic static XMLEventReader createXMLEventReader(List<XMLEvent> events) {\n\t\treturn new ListBasedXMLEventReader(events);\n\t}\n\n\t/**\n\t * Create a SAX {@link ContentHandler} that writes to the given StAX {@link XMLStreamWriter}.\n\t * @param streamWriter the StAX stream writer\n\t * @return a content handler writing to the {@code streamWriter}\n\t */\n\tpublic static ContentHandler createContentHandler(XMLStreamWriter streamWriter) {\n\t\treturn new StaxStreamHandler(streamWriter);\n\t}\n\n\t/**\n\t * Create a SAX {@link ContentHandler} that writes events to the given StAX {@link XMLEventWriter}.\n\t * @param eventWriter the StAX event writer\n\t * @return a content handler writing to the {@code eventWriter}\n\t */\n\tpublic static ContentHandler createContentHandler(XMLEventWriter eventWriter) {\n\t\treturn new StaxEventHandler(eventWriter);\n\t}\n\n\t/**\n\t * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLStreamReader}.\n\t * @param streamReader the StAX stream reader\n\t * @return a XMLReader reading from the {@code streamWriter}\n\t */\n\tpublic static XMLReader createXMLReader(XMLStreamReader streamReader) {\n\t\treturn new StaxStreamXMLReader(streamReader);\n\t}\n\n\t/**\n\t * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLEventReader}.\n\t * @param eventReader the StAX event reader\n\t * @return a XMLReader reading from the {@code eventWriter}\n\t */\n\tpublic static XMLReader createXMLReader(XMLEventReader eventReader) {\n\t\treturn new StaxEventXMLReader(eventReader);\n\t}\n\n\t/**\n\t * Return a {@link XMLStreamReader} that reads from a {@link XMLEventReader}.\n\t * Useful because the StAX {@code XMLInputFactory} allows one to create an\n\t * event reader from a stream reader, but not vice-versa.\n\t * @return a stream reader that reads from an event reader\n\t */\n\tpublic static XMLStreamReader createEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {\n\t\treturn new XMLEventStreamReader(eventReader);\n\t}\n\n\t/**\n\t * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.\n\t * @return a stream writer that writes to an event writer\n\t * @since 3.2\n\t */\n\tpublic static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter) {\n\t\treturn new XMLEventStreamWriter(eventWriter, XMLEventFactory.newFactory());\n\t}\n\n\t/**\n\t * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.\n\t * @return a stream writer that writes to an event writer\n\t * @since 3.0.5\n\t */\n\tpublic static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {\n\t\treturn new XMLEventStreamWriter(eventWriter, eventFactory);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.StaxUtils#NO_OP_XML_RESOLVER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#NO_OP_XML_RESOLVER",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLResolver",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createDefensiveInputFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create an {@link XMLInputFactory} with Spring's defensive setup,\r\n * i.e. no support for the resolution of DTDs and external entities.\r\n * @return a new defensively initialized input factory instance to use\r\n * @since 5.0\r\n */\r\npublic static XMLInputFactory createDefensiveInputFactory() {\r\n    return createDefensiveInputFactory(XMLInputFactory::newInstance);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createDefensiveInputFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createDefensiveInputFactory(Supplier<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Variant of {@link #createDefensiveInputFactory()} with a custom instance.\r\n * @param instanceSupplier supplier for the input factory instance\r\n * @return a new defensively initialized input factory instance to use\r\n * @since 5.0.12\r\n */\r\npublic static <T extends XMLInputFactory> T createDefensiveInputFactory(Supplier<T> instanceSupplier) {\r\n    T inputFactory = instanceSupplier.get();\r\n    inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\r\n    inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\r\n    inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);\r\n    return inputFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxUtils#createDefensiveInputFactory(Supplier<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxUtils#createStaxSource(XMLStreamReader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLStreamReader}.\r\n * @param streamReader the StAX stream reader\r\n * @return a source wrapping the {@code streamReader}\r\n */\r\npublic static Source createStaxSource(XMLStreamReader streamReader) {\r\n    return new StAXSource(streamReader);\r\n}",
    "tailType": "method_code"
  }
]