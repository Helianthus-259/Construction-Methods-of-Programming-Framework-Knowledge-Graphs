[
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitTypeAnnotation(typeRef, typePath, desc, visible), fv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "extend",
    "tail": "FieldVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\n/**\n * @author Chris Nokleberg\n */\npublic class AbstractInterceptFieldCallback implements InterceptFieldCallback {\n\n    @Override\n\tpublic int writeInt(Object obj, String name, int oldValue, int newValue) { return newValue; }\n    @Override\n\tpublic char writeChar(Object obj, String name, char oldValue, char newValue) { return newValue; }\n    @Override\n\tpublic byte writeByte(Object obj, String name, byte oldValue, byte newValue) { return newValue; }\n    @Override\n\tpublic boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue) { return newValue; }\n    @Override\n\tpublic short writeShort(Object obj, String name, short oldValue, short newValue) { return newValue; }\n    @Override\n\tpublic float writeFloat(Object obj, String name, float oldValue, float newValue) { return newValue; }\n    @Override\n\tpublic double writeDouble(Object obj, String name, double oldValue, double newValue) { return newValue; }\n    @Override\n\tpublic long writeLong(Object obj, String name, long oldValue, long newValue) { return newValue; }\n    @Override\n\tpublic Object writeObject(Object obj, String name, Object oldValue, Object newValue) { return newValue; }\n\n    @Override\n\tpublic int readInt(Object obj, String name, int oldValue) { return oldValue; }\n    @Override\n\tpublic char readChar(Object obj, String name, char oldValue) { return oldValue; }\n    @Override\n\tpublic byte readByte(Object obj, String name, byte oldValue) { return oldValue; }\n    @Override\n\tpublic boolean readBoolean(Object obj, String name, boolean oldValue) { return oldValue; }\n    @Override\n\tpublic short readShort(Object obj, String name, short oldValue) { return oldValue; }\n    @Override\n\tpublic float readFloat(Object obj, String name, float oldValue) { return oldValue; }\n    @Override\n\tpublic double readDouble(Object obj, String name, double oldValue) { return oldValue; }\n    @Override\n\tpublic long readLong(Object obj, String name, long oldValue) { return oldValue; }\n    @Override\n\tpublic Object readObject(Object obj, String name, Object oldValue) { return oldValue; }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int writeInt(Object obj, String name, int oldValue, int newValue) {\r\n    return newValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeInt(Object,String,int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic char writeChar(Object obj, String name, char oldValue, char newValue) {\r\n    return newValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeChar(Object,String,char,char)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte writeByte(Object obj, String name, byte oldValue, byte newValue) {\r\n    return newValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeByte(Object,String,byte,byte)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean writeBoolean(Object obj, String name, boolean oldValue, boolean newValue) {\r\n    return newValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AbstractInterceptFieldCallback#writeBoolean(Object,String,boolean,boolean)",
    "tailType": "method"
  }
]