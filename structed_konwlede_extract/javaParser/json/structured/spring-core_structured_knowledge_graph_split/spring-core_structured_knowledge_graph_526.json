[
  {
    "head": "org.springframework.asm.TypeReference#INSTANCEOF",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#NEW",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#NEW",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CONSTRUCTOR_REFERENCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CONSTRUCTOR_REFERENCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#METHOD_REFERENCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#METHOD_REFERENCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CAST",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CAST",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.TypeReference#targetTypeAndInfo",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.TypeReference#targetTypeAndInfo",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.TypeReference#newTypeReference(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a type reference of the given sort.\r\n *\r\n * @param sort one of {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link\r\n *     #LOCAL_VARIABLE}, {@link #RESOURCE_VARIABLE}, {@link #INSTANCEOF}, {@link #NEW}, {@link\r\n *     #CONSTRUCTOR_REFERENCE}, or {@link #METHOD_REFERENCE}.\r\n * @return a type reference of the given sort.\r\n */\r\npublic static TypeReference newTypeReference(final int sort) {\r\n    return new TypeReference(sort << 24);\r\n}",
    "tailType": "method_code"
  }
]