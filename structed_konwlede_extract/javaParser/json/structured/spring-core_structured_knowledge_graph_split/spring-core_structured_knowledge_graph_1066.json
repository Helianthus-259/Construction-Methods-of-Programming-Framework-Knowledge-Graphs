[
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderUtils#loadAllProperties(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderUtils#loadAllProperties(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load all properties from the specified class path resource\r\n * (in ISO-8859-1 encoding), using the given class loader.\r\n * <p>Merges properties if more than one resource of the same name\r\n * found in the class path.\r\n * @param resourceName the name of the class path resource\r\n * @param classLoader the ClassLoader to use for loading\r\n * (or {@code null} to use the default class loader)\r\n * @return the populated Properties instance\r\n * @throws IOException if loading failed\r\n */\r\npublic static Properties loadAllProperties(String resourceName, @Nullable ClassLoader classLoader) throws IOException {\r\n    Assert.notNull(resourceName, \"Resource name must not be null\");\r\n    ClassLoader classLoaderToUse = classLoader;\r\n    if (classLoaderToUse == null) {\r\n        classLoaderToUse = ClassUtils.getDefaultClassLoader();\r\n    }\r\n    Enumeration<URL> urls = (classLoaderToUse != null ? classLoaderToUse.getResources(resourceName) : ClassLoader.getSystemResources(resourceName));\r\n    Properties props = new Properties();\r\n    while (urls.hasMoreElements()) {\r\n        URL url = urls.nextElement();\r\n        URLConnection con = url.openConnection();\r\n        ResourceUtils.useCachesIfNecessary(con);\r\n        try (InputStream is = con.getInputStream()) {\r\n            if (resourceName.endsWith(XML_FILE_EXTENSION)) {\r\n                props.loadFromXML(is);\r\n            } else {\r\n                props.load(is);\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertiesLoaderUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertiesLoaderUtils#loadAllProperties(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.PropertySourceFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.PropertySource;\n\n/**\n * Strategy interface for creating resource-based {@link PropertySource} wrappers.\n *\n * @author Juergen Hoeller\n * @since 4.3\n * @see DefaultPropertySourceFactory\n * @see ResourcePropertySource\n */\npublic interface PropertySourceFactory {\n\n\t/**\n\t * Create a {@link PropertySource} that wraps the given resource.\n\t * <p>Implementations will typically create {@link ResourcePropertySource}\n\t * instances, with {@link PropertySourceProcessor} automatically adapting\n\t * property source names via {@link ResourcePropertySource#withResourceName()}\n\t * if necessary, for example, when combining multiple sources for the same name\n\t * into a {@link org.springframework.core.env.CompositePropertySource}.\n\t * Custom implementations with custom {@link PropertySource} types need\n\t * to make sure to expose distinct enough names, possibly deriving from\n\t * {@link ResourcePropertySource} where possible.\n\t * @param name the name of the property source\n\t * (can be {@code null} in which case the factory implementation\n\t * will have to generate a name based on the given resource)\n\t * @param resource the resource (potentially encoded) to wrap\n\t * @return the new {@link PropertySource} (never {@code null})\n\t * @throws IOException if resource resolution failed\n\t */\n\tPropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource) throws IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceFactory#createPropertySource(String,EncodedResource)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link PropertySource} that wraps the given resource.\r\n * <p>Implementations will typically create {@link ResourcePropertySource}\r\n * instances, with {@link PropertySourceProcessor} automatically adapting\r\n * property source names via {@link ResourcePropertySource#withResourceName()}\r\n * if necessary, for example, when combining multiple sources for the same name\r\n * into a {@link org.springframework.core.env.CompositePropertySource}.\r\n * Custom implementations with custom {@link PropertySource} types need\r\n * to make sure to expose distinct enough names, possibly deriving from\r\n * {@link ResourcePropertySource} where possible.\r\n * @param name the name of the property source\r\n * (can be {@code null} in which case the factory implementation\r\n * will have to generate a name based on the given resource)\r\n * @param resource the resource (potentially encoded) to wrap\r\n * @return the new {@link PropertySource} (never {@code null})\r\n * @throws IOException if resource resolution failed\r\n */\r\nPropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceFactory#createPropertySource(String,EncodedResource)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.CompositePropertySource;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.Assert;\nimport org.springframework.util.PlaceholderResolutionException;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Contribute {@link PropertySource property sources} to the {@link Environment}.\n *\n * <p>This class is stateful and merges descriptors with the same name in a\n * single {@link PropertySource} rather than creating dedicated ones.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n * @author Juergen Hoeller\n * @since 6.0\n * @see PropertySourceDescriptor\n */\npublic class PropertySourceProcessor {\n\n\tprivate static final PropertySourceFactory defaultPropertySourceFactory = new DefaultPropertySourceFactory();\n\n\tprivate static final Log logger = LogFactory.getLog(PropertySourceProcessor.class);\n\n\n\tprivate final ConfigurableEnvironment environment;\n\n\tprivate final ResourcePatternResolver resourcePatternResolver;\n\n\tprivate final List<String> propertySourceNames = new ArrayList<>();\n\n\n\tpublic PropertySourceProcessor(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {\n\t\tthis.environment = environment;\n\t\tthis.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);\n\t}\n\n\n\t/**\n\t * Process the specified {@link PropertySourceDescriptor} against the\n\t * environment managed by this instance.\n\t * @param descriptor the descriptor to process\n\t * @throws IOException if loading the properties failed\n\t */\n\tpublic void processPropertySource(PropertySourceDescriptor descriptor) throws IOException {\n\t\tString name = descriptor.name();\n\t\tString encoding = descriptor.encoding();\n\t\tList<String> locations = descriptor.locations();\n\t\tAssert.isTrue(locations.size() > 0, \"At least one @PropertySource(value) location is required\");\n\t\tboolean ignoreResourceNotFound = descriptor.ignoreResourceNotFound();\n\t\tPropertySourceFactory factory = (descriptor.propertySourceFactory() != null ?\n\t\t\t\tinstantiateClass(descriptor.propertySourceFactory()) : defaultPropertySourceFactory);\n\n\t\tfor (String location : locations) {\n\t\t\ttry {\n\t\t\t\tString resolvedLocation = this.environment.resolveRequiredPlaceholders(location);\n\t\t\t\tfor (Resource resource : this.resourcePatternResolver.getResources(resolvedLocation)) {\n\t\t\t\t\taddPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (RuntimeException | IOException ex) {\n\t\t\t\t// Placeholders not resolvable or resource not found when trying to open it\n\t\t\t\tif (ignoreResourceNotFound && (ex instanceof PlaceholderResolutionException || isIgnorableException(ex) ||\n\t\t\t\t\t\tisIgnorableException(ex.getCause()))) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"Properties location [\" + location + \"] not resolvable: \" + ex.getMessage());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void addPropertySource(PropertySource<?> propertySource) {\n\t\tString name = propertySource.getName();\n\t\tMutablePropertySources propertySources = this.environment.getPropertySources();\n\n\t\tif (this.propertySourceNames.contains(name)) {\n\t\t\t// We've already added a version, we need to extend it\n\t\t\tPropertySource<?> existing = propertySources.get(name);\n\t\t\tif (existing != null) {\n\t\t\t\tPropertySource<?> newSource = (propertySource instanceof ResourcePropertySource rps ?\n\t\t\t\t\t\trps.withResourceName() : propertySource);\n\t\t\t\tif (existing instanceof CompositePropertySource cps) {\n\t\t\t\t\tcps.addFirstPropertySource(newSource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (existing instanceof ResourcePropertySource rps) {\n\t\t\t\t\t\texisting = rps.withResourceName();\n\t\t\t\t\t}\n\t\t\t\t\tCompositePropertySource composite = new CompositePropertySource(name);\n\t\t\t\t\tcomposite.addPropertySource(newSource);\n\t\t\t\t\tcomposite.addPropertySource(existing);\n\t\t\t\t\tpropertySources.replace(name, composite);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (this.propertySourceNames.isEmpty()) {\n\t\t\tpropertySources.addLast(propertySource);\n\t\t}\n\t\telse {\n\t\t\tString lastAdded = this.propertySourceNames.get(this.propertySourceNames.size() - 1);\n\t\t\tpropertySources.addBefore(lastAdded, propertySource);\n\t\t}\n\t\tthis.propertySourceNames.add(name);\n\t}\n\n\n\tprivate static PropertySourceFactory instantiateClass(Class<? extends PropertySourceFactory> type) {\n\t\ttry {\n\t\t\tConstructor<? extends PropertySourceFactory> constructor = type.getDeclaredConstructor();\n\t\t\tReflectionUtils.makeAccessible(constructor);\n\t\t\treturn constructor.newInstance();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to instantiate \" + type, ex);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the supplied exception can be ignored according to\n\t * {@code ignoreResourceNotFound} semantics.\n\t */\n\tprivate static boolean isIgnorableException(@Nullable Throwable ex) {\n\t\treturn (ex instanceof FileNotFoundException ||\n\t\t\t\tex instanceof UnknownHostException ||\n\t\t\t\tex instanceof SocketException);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#defaultPropertySourceFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#defaultPropertySourceFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertySourceFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#environment",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#environment",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConfigurableEnvironment",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#resourcePatternResolver",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#resourcePatternResolver",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourcePatternResolver",
    "tailType": "type"
  }
]