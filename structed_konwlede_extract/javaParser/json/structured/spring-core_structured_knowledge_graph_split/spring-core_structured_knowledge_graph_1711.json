[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnSuperclassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenComposedOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, TYPE_HIERARCHY, ComposedRepeatableClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenComposedMixedWithContainerOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, TYPE_HIERARCHY, ComposedRepeatableMixedWithContainerClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedMixedWithContainerOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyWhenComposedContainerForRepeatableOnClassReturnsAnnotations() {\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, TYPE_HIERARCHY, ComposedContainerClass.class);\r\n    assertThat(annotations.stream().map(PeteRepeat::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyWhenComposedContainerForRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations() {\r\n    Set<Noninherited> annotations = getAnnotations(null, Noninherited.class, TYPE_HIERARCHY, NoninheritedRepeatableClass.class);\r\n    assertThat(annotations.stream().map(Noninherited::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnClassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations() {\r\n    Set<Noninherited> annotations = getAnnotations(null, Noninherited.class, TYPE_HIERARCHY, SubNoninheritedRepeatableClass.class);\r\n    assertThat(annotations.stream().map(Noninherited::value)).containsExactly(\"A\", \"B\", \"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWhenNoninheritedComposedRepeatableOnSuperclassReturnsAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWithLocalComposedAnnotationWhoseRepeatableMetaAnnotationsAreFiltered()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyAnnotationsWithLocalComposedAnnotationWhoseRepeatableMetaAnnotationsAreFiltered() {\r\n    Class<WithRepeatedMetaAnnotationsClass> element = WithRepeatedMetaAnnotationsClass.class;\r\n    SearchStrategy searchStrategy = TYPE_HIERARCHY;\r\n    AnnotationFilter annotationFilter = PeteRepeat.class.getName()::equals;\r\n    Set<PeteRepeat> annotations = getAnnotations(null, PeteRepeat.class, searchStrategy, element, annotationFilter);\r\n    assertThat(annotations).isEmpty();\r\n    MergedAnnotations mergedAnnotations = MergedAnnotations.from(element, searchStrategy, RepeatableContainers.standardRepeatables(), annotationFilter);\r\n    Stream<Class<? extends Annotation>> annotationTypes = mergedAnnotations.stream().map(MergedAnnotation::synthesize).map(Annotation::annotationType);\r\n    assertThat(annotationTypes).containsExactly(WithRepeatedMetaAnnotations.class, Noninherited.class, Noninherited.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWithLocalComposedAnnotationWhoseRepeatableMetaAnnotationsAreFiltered()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsRepeatableAnnotationTests#typeHierarchyAnnotationsWithLocalComposedAnnotationWhoseRepeatableMetaAnnotationsAreFiltered()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]