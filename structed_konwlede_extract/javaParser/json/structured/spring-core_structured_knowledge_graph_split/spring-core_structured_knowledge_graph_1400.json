[
  {
    "head": "org.springframework.util.StringUtils#parseLocaleString(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#parseLocaleString(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#validateLocalePart(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void validateLocalePart(String localePart) {\r\n    for (int i = 0; i < localePart.length(); i++) {\r\n        char ch = localePart.charAt(i);\r\n        if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {\r\n            throw new IllegalArgumentException(\"Locale part \\\"\" + localePart + \"\\\" contains invalid characters\");\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#validateLocalePart(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#parseTimeZoneString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given {@code timeZoneString} value into a {@link TimeZone}.\r\n * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}\r\n * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification\r\n * @return a corresponding {@link TimeZone} instance\r\n * @throws IllegalArgumentException in case of an invalid time zone specification\r\n */\r\npublic static TimeZone parseTimeZoneString(String timeZoneString) {\r\n    TimeZone timeZone = TimeZone.getTimeZone(timeZoneString);\r\n    if (\"GMT\".equals(timeZone.getID()) && !timeZoneString.startsWith(\"GMT\")) {\r\n        // We don't want that GMT fallback...\r\n        throw new IllegalArgumentException(\"Invalid time zone specification '\" + timeZoneString + \"'\");\r\n    }\r\n    return timeZone;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#parseTimeZoneString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#toStringArray(Collection<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Convenience methods for working with String arrays\r\n//---------------------------------------------------------------------\r\n/**\r\n * Copy the given {@link Collection} into a {@code String} array.\r\n * <p>The {@code Collection} must contain {@code String} elements only.\r\n * @param collection the {@code Collection} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Collection<String> collection) {\r\n    return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_STRING_ARRAY) : EMPTY_STRING_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#toStringArray(Collection<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#toStringArray(Enumeration<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the given {@link Enumeration} into a {@code String} array.\r\n * <p>The {@code Enumeration} must contain {@code String} elements only.\r\n * @param enumeration the {@code Enumeration} to copy\r\n * (potentially {@code null} or empty)\r\n * @return the resulting {@code String} array\r\n */\r\npublic static String[] toStringArray(@Nullable Enumeration<String> enumeration) {\r\n    return (enumeration != null ? toStringArray(Collections.list(enumeration)) : EMPTY_STRING_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#toStringArray(Enumeration<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#addStringToArray(String[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Append the given {@code String} to the given {@code String} array,\r\n * returning a new array consisting of the input array contents plus\r\n * the given {@code String}.\r\n * @param array the array to append to (can be {@code null})\r\n * @param str the {@code String} to append\r\n * @return the new array (never {@code null})\r\n */\r\npublic static String[] addStringToArray(String @Nullable [] array, String str) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return new String[] { str };\r\n    }\r\n    String[] newArr = new String[array.length + 1];\r\n    System.arraycopy(array, 0, newArr, 0, array.length);\r\n    newArr[array.length] = str;\r\n    return newArr;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#addStringToArray(String[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#concatenateStringArrays(String[],String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Concatenate the given {@code String} arrays into one,\r\n * with overlapping array elements included twice.\r\n * <p>The order of elements in the original arrays is preserved.\r\n * @param array1 the first array (can be {@code null})\r\n * @param array2 the second array (can be {@code null})\r\n * @return the new array ({@code null} if both given arrays were {@code null})\r\n */\r\npublic static String @Nullable [] concatenateStringArrays(String @Nullable [] array1, String @Nullable [] array2) {\r\n    if (ObjectUtils.isEmpty(array1)) {\r\n        return array2;\r\n    }\r\n    if (ObjectUtils.isEmpty(array2)) {\r\n        return array1;\r\n    }\r\n    String[] newArr = new String[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, newArr, 0, array1.length);\r\n    System.arraycopy(array2, 0, newArr, array1.length, array2.length);\r\n    return newArr;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#concatenateStringArrays(String[],String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#sortStringArray(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given {@code String} array if necessary.\r\n * @param array the original array (potentially empty)\r\n * @return the array in sorted form (never {@code null})\r\n */\r\npublic static String[] sortStringArray(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Arrays.sort(array);\r\n    return array;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#sortStringArray(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimArrayElements(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Trim the elements of the given {@code String} array, calling\r\n * {@code String.trim()} on each non-null element.\r\n * @param array the original {@code String} array (potentially empty)\r\n * @return the resulting array (of the same size) with trimmed elements\r\n */\r\n@Nullable\r\npublic static String[] trimArrayElements(@Nullable String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    @Nullable\r\n    String[] result = new String[array.length];\r\n    for (int i = 0; i < array.length; i++) {\r\n        String element = array[i];\r\n        result[i] = (element != null ? element.trim() : null);\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#trimArrayElements(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#trimArrayElements(String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#removeDuplicateStrings(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove duplicate strings from the given array.\r\n * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}.\r\n * @param array the {@code String} array (potentially empty)\r\n * @return an array without duplicates, in natural sort order\r\n */\r\npublic static String[] removeDuplicateStrings(String[] array) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Set<String> set = new LinkedHashSet<>(Arrays.asList(array));\r\n    return toStringArray(set);\r\n}",
    "tailType": "method_code"
  }
]