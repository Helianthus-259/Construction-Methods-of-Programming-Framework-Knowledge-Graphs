[
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.LimitedClassLoader#constructorArgumentFactories",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader#constructorArgumentFactories",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.LimitedClassLoader#multipleArgumentFactories",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader#multipleArgumentFactories",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader#toUrl(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static URL toUrl(String location) {\r\n    try {\r\n        return new File(\"src/test/resources/org/springframework/core/io/support/\" + location + \"/\").toURI().toURL();\r\n    } catch (MalformedURLException ex) {\r\n        throw new IllegalStateException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.LimitedClassLoader#toUrl(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.LimitedClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "URLClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.CompositeLogTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.logging.Log;\nimport org.junit.jupiter.api.Test;\n\nimport static org.mockito.BDDMockito.when;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;\n\n\n/**\n * Tests for {@link CompositeLog}.\n *\n * @author Rossen Stoyanchev\n */\nclass CompositeLogTests {\n\n\tprivate final Log logger1 = mock();\n\n\tprivate final Log logger2 = mock();\n\n\tprivate final CompositeLog compositeLog = new CompositeLog(Arrays.asList(logger1, logger2));\n\n\n\t@Test\n\tvoid useFirstLogger() {\n\t\twhen(logger1.isInfoEnabled()).thenReturn(true);\n\t\twhen(logger2.isInfoEnabled()).thenReturn(true);\n\n\t\tthis.compositeLog.info(\"info message\");\n\n\t\tverify(this.logger1).isInfoEnabled();\n\t\tverify(this.logger1).info(\"info message\");\n\n\t\tverifyNoMoreInteractions(this.logger1);\n\t\tverifyNoMoreInteractions(this.logger2);\n\t}\n\n\t@Test\n\tvoid useSecondLogger() {\n\t\twhen(logger1.isInfoEnabled()).thenReturn(false);\n\t\twhen(logger2.isInfoEnabled()).thenReturn(true);\n\n\t\tthis.compositeLog.info(\"info message\");\n\n\t\tverify(this.logger1).isInfoEnabled();\n\t\tverify(this.logger2).isInfoEnabled();\n\t\tverify(this.logger2).info(\"info message\");\n\n\t\tverifyNoMoreInteractions(this.logger1);\n\t\tverifyNoMoreInteractions(this.logger2);\n\t}\n\n\t@Test\n\tvoid useNeitherLogger() {\n\t\twhen(logger1.isInfoEnabled()).thenReturn(false);\n\t\twhen(logger2.isInfoEnabled()).thenReturn(false);\n\n\t\tthis.compositeLog.info(\"info message\");\n\n\t\tverify(this.logger1).isInfoEnabled();\n\t\tverify(this.logger2).isInfoEnabled();\n\n\t\tverifyNoMoreInteractions(this.logger1);\n\t\tverifyNoMoreInteractions(this.logger2);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.CompositeLogTests#logger1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#logger1",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.CompositeLogTests#logger2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#logger2",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.CompositeLogTests#compositeLog",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#compositeLog",
    "headType": "field",
    "relation": "haveType",
    "tail": "CompositeLog",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useFirstLogger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid useFirstLogger() {\r\n    when(logger1.isInfoEnabled()).thenReturn(true);\r\n    when(logger2.isInfoEnabled()).thenReturn(true);\r\n    this.compositeLog.info(\"info message\");\r\n    verify(this.logger1).isInfoEnabled();\r\n    verify(this.logger1).info(\"info message\");\r\n    verifyNoMoreInteractions(this.logger1);\r\n    verifyNoMoreInteractions(this.logger2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLogTests#useFirstLogger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useFirstLogger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useSecondLogger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid useSecondLogger() {\r\n    when(logger1.isInfoEnabled()).thenReturn(false);\r\n    when(logger2.isInfoEnabled()).thenReturn(true);\r\n    this.compositeLog.info(\"info message\");\r\n    verify(this.logger1).isInfoEnabled();\r\n    verify(this.logger2).isInfoEnabled();\r\n    verify(this.logger2).info(\"info message\");\r\n    verifyNoMoreInteractions(this.logger1);\r\n    verifyNoMoreInteractions(this.logger2);\r\n}",
    "tailType": "method_code"
  }
]