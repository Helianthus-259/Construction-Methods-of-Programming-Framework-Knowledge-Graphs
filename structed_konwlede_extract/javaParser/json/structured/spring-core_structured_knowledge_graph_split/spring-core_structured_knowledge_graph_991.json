[
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#hasNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic ByteBuffer next() {\r\n    if (!this.hasNext) {\r\n        throw new NoSuchElementException();\r\n    } else {\r\n        this.hasNext = false;\r\n        return this.buffer;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.ByteBufferIterator#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\nimport org.springframework.util.Assert;\n\n/**\n * Default implementation of the {@code DataBufferFactory} interface. Allows for\n * specification of the default initial capacity at construction time, as well\n * as whether heap-based or direct buffers are to be preferred.\n *\n * @author Arjen Poutsma\n * @since 5.0\n */\npublic class DefaultDataBufferFactory implements DataBufferFactory {\n\n\t/**\n\t * The default capacity when none is specified.\n\t * @see #DefaultDataBufferFactory()\n\t * @see #DefaultDataBufferFactory(boolean)\n\t */\n\tpublic static final int DEFAULT_INITIAL_CAPACITY = 256;\n\n\t/**\n\t * Shared instance based on the default constructor.\n\t * @since 5.3\n\t */\n\tpublic static final DefaultDataBufferFactory sharedInstance = new DefaultDataBufferFactory();\n\n\n\tprivate final boolean preferDirect;\n\n\tprivate final int defaultInitialCapacity;\n\n\n\t/**\n\t * Creates a new {@code DefaultDataBufferFactory} with default settings.\n\t * @see #sharedInstance\n\t */\n\tpublic DefaultDataBufferFactory() {\n\t\tthis(false);\n\t}\n\n\t/**\n\t * Creates a new {@code DefaultDataBufferFactory}, indicating whether direct\n\t * buffers should be created by {@link #allocateBuffer()} and\n\t * {@link #allocateBuffer(int)}.\n\t * @param preferDirect {@code true} if direct buffers are to be preferred;\n\t * {@code false} otherwise\n\t */\n\tpublic DefaultDataBufferFactory(boolean preferDirect) {\n\t\tthis(preferDirect, DEFAULT_INITIAL_CAPACITY);\n\t}\n\n\t/**\n\t * Creates a new {@code DefaultDataBufferFactory}, indicating whether direct\n\t * buffers should be created by {@link #allocateBuffer()} and\n\t * {@link #allocateBuffer(int)}, and what the capacity is to be used for\n\t * {@link #allocateBuffer()}.\n\t * @param preferDirect {@code true} if direct buffers are to be preferred;\n\t * {@code false} otherwise\n\t */\n\tpublic DefaultDataBufferFactory(boolean preferDirect, int defaultInitialCapacity) {\n\t\tAssert.isTrue(defaultInitialCapacity > 0, \"'defaultInitialCapacity' should be larger than 0\");\n\t\tthis.preferDirect = preferDirect;\n\t\tthis.defaultInitialCapacity = defaultInitialCapacity;\n\t}\n\n\n\t@Override\n\t@Deprecated\n\tpublic DefaultDataBuffer allocateBuffer() {\n\t\treturn allocateBuffer(this.defaultInitialCapacity);\n\t}\n\n\t@Override\n\tpublic DefaultDataBuffer allocateBuffer(int initialCapacity) {\n\t\tByteBuffer byteBuffer = (this.preferDirect ?\n\t\t\t\tByteBuffer.allocateDirect(initialCapacity) :\n\t\t\t\tByteBuffer.allocate(initialCapacity));\n\t\treturn DefaultDataBuffer.fromEmptyByteBuffer(this, byteBuffer);\n\t}\n\n\t@Override\n\tpublic DefaultDataBuffer wrap(ByteBuffer byteBuffer) {\n\t\treturn DefaultDataBuffer.fromFilledByteBuffer(this, byteBuffer.slice());\n\t}\n\n\t@Override\n\tpublic DefaultDataBuffer wrap(byte[] bytes) {\n\t\treturn DefaultDataBuffer.fromFilledByteBuffer(this, ByteBuffer.wrap(bytes));\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * <p>This implementation creates a single {@link DefaultDataBuffer}\n\t * to contain the data in {@code dataBuffers}.\n\t */\n\t@Override\n\tpublic DefaultDataBuffer join(List<? extends DataBuffer> dataBuffers) {\n\t\tAssert.notEmpty(dataBuffers, \"DataBuffer List must not be empty\");\n\t\tint capacity = dataBuffers.stream().mapToInt(DataBuffer::readableByteCount).sum();\n\t\tDefaultDataBuffer result = allocateBuffer(capacity);\n\t\tdataBuffers.forEach(result::write);\n\t\tdataBuffers.forEach(DataBufferUtils::release);\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean isDirect() {\n\t\treturn this.preferDirect;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"DefaultDataBufferFactory (preferDirect=\" + this.preferDirect + \")\";\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#DEFAULT_INITIAL_CAPACITY",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#DEFAULT_INITIAL_CAPACITY",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#sharedInstance",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#sharedInstance",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#preferDirect",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#preferDirect",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#defaultInitialCapacity",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#defaultInitialCapacity",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic DefaultDataBuffer allocateBuffer() {\r\n    return allocateBuffer(this.defaultInitialCapacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer()",
    "tailType": "method"
  }
]