[
  {
    "head": "org.springframework.util.AntPathMatcher#setPathSeparator(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the path separator to use for pattern parsing.\r\n * <p>Default is \"/\", as in Ant.\r\n */\r\npublic void setPathSeparator(@Nullable String pathSeparator) {\r\n    this.pathSeparator = (pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR);\r\n    this.pathSeparatorPatternCache = new PathSeparatorPatternCache(this.pathSeparator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#setPathSeparator(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#setCaseSensitive(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify whether to perform pattern matching in a case-sensitive fashion.\r\n * <p>Default is {@code true}. Switch this to {@code false} for case-insensitive matching.\r\n * @since 4.2\r\n */\r\npublic void setCaseSensitive(boolean caseSensitive) {\r\n    this.caseSensitive = caseSensitive;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#setCaseSensitive(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#setTrimTokens(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify whether to trim tokenized paths and patterns.\r\n * <p>Default is {@code false}.\r\n */\r\npublic void setTrimTokens(boolean trimTokens) {\r\n    this.trimTokens = trimTokens;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#setTrimTokens(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#setCachePatterns(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify whether to cache parsed pattern metadata for patterns passed\r\n * into this matcher's {@link #match} method. A value of {@code true}\r\n * activates an unlimited pattern cache; a value of {@code false} turns\r\n * the pattern cache off completely.\r\n * <p>Default is for the cache to be on, but with the variant to automatically\r\n * turn it off when encountering too many patterns to cache at runtime\r\n * (the threshold is 65536), assuming that arbitrary permutations of patterns\r\n * are coming in, with little chance for encountering a recurring pattern.\r\n * @since 4.0.1\r\n * @see #getStringMatcher(String)\r\n */\r\npublic void setCachePatterns(boolean cachePatterns) {\r\n    this.cachePatterns = cachePatterns;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#setCachePatterns(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#deactivatePatternCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void deactivatePatternCache() {\r\n    this.cachePatterns = false;\r\n    this.tokenizedPatternCache.clear();\r\n    this.stringMatcherCache.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#deactivatePatternCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#isPattern(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isPattern(@Nullable String path) {\r\n    if (path == null) {\r\n        return false;\r\n    }\r\n    boolean uriVar = false;\r\n    for (int i = 0; i < path.length(); i++) {\r\n        char c = path.charAt(i);\r\n        if (c == '*' || c == '?') {\r\n            return true;\r\n        }\r\n        if (c == '{') {\r\n            uriVar = true;\r\n            continue;\r\n        }\r\n        if (c == '}' && uriVar) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#isPattern(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#isPattern(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#match(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean match(String pattern, String path) {\r\n    return doMatch(pattern, path, true, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#match(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#match(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#matchStart(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matchStart(String pattern, String path) {\r\n    return doMatch(pattern, path, false, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#matchStart(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#matchStart(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#doMatch(String,String,boolean,Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Actually match the given {@code path} against the given {@code pattern}.\r\n * @param pattern the pattern to match against\r\n * @param path the path to test\r\n * @param fullMatch whether a full pattern match is required (else a pattern match\r\n * as far as the given base path goes is sufficient)\r\n * @return {@code true} if the supplied {@code path} matched, {@code false} if it didn't\r\n */\r\nprotected boolean doMatch(String pattern, @Nullable String path, boolean fullMatch, @Nullable Map<String, String> uriTemplateVariables) {\r\n    if (path == null || path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {\r\n        return false;\r\n    }\r\n    String[] pattDirs = tokenizePattern(pattern);\r\n    if (fullMatch && this.caseSensitive && !isPotentialMatch(path, pattDirs)) {\r\n        return false;\r\n    }\r\n    String[] pathDirs = tokenizePath(path);\r\n    int pattIdxStart = 0;\r\n    int pattIdxEnd = pattDirs.length - 1;\r\n    int pathIdxStart = 0;\r\n    int pathIdxEnd = pathDirs.length - 1;\r\n    // Match all elements up to the first **\r\n    while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\r\n        String pattDir = pattDirs[pattIdxStart];\r\n        if (\"**\".equals(pattDir)) {\r\n            break;\r\n        }\r\n        if (!matchStrings(pattDir, pathDirs[pathIdxStart], uriTemplateVariables)) {\r\n            return false;\r\n        }\r\n        pattIdxStart++;\r\n        pathIdxStart++;\r\n    }\r\n    if (pathIdxStart > pathIdxEnd) {\r\n        // Path is exhausted, only match if rest of pattern is * or **'s\r\n        if (pattIdxStart > pattIdxEnd) {\r\n            return (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));\r\n        }\r\n        if (!fullMatch) {\r\n            return true;\r\n        }\r\n        if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(\"*\") && path.endsWith(this.pathSeparator)) {\r\n            return true;\r\n        }\r\n        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\r\n            if (!pattDirs[i].equals(\"**\")) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    } else if (pattIdxStart > pattIdxEnd) {\r\n        // String not exhausted, but pattern is. Failure.\r\n        return false;\r\n    } else if (!fullMatch && \"**\".equals(pattDirs[pattIdxStart])) {\r\n        // Path start definitely matches due to \"**\" part in pattern.\r\n        return true;\r\n    }\r\n    // up to last '**'\r\n    while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\r\n        String pattDir = pattDirs[pattIdxEnd];\r\n        if (pattDir.equals(\"**\")) {\r\n            break;\r\n        }\r\n        if (!matchStrings(pattDir, pathDirs[pathIdxEnd], uriTemplateVariables)) {\r\n            return false;\r\n        }\r\n        if (pattIdxEnd == (pattDirs.length - 1) && pattern.endsWith(this.pathSeparator) != path.endsWith(this.pathSeparator)) {\r\n            return false;\r\n        }\r\n        pattIdxEnd--;\r\n        pathIdxEnd--;\r\n    }\r\n    if (pathIdxStart > pathIdxEnd) {\r\n        // String is exhausted\r\n        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\r\n            if (!pattDirs[i].equals(\"**\")) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {\r\n        int patIdxTmp = -1;\r\n        for (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {\r\n            if (pattDirs[i].equals(\"**\")) {\r\n                patIdxTmp = i;\r\n                break;\r\n            }\r\n        }\r\n        if (patIdxTmp == pattIdxStart + 1) {\r\n            // '**/**' situation, so skip one\r\n            pattIdxStart++;\r\n            continue;\r\n        }\r\n        // Find the pattern between padIdxStart & padIdxTmp in str between\r\n        // strIdxStart & strIdxEnd\r\n        int patLength = (patIdxTmp - pattIdxStart - 1);\r\n        int strLength = (pathIdxEnd - pathIdxStart + 1);\r\n        int foundIdx = -1;\r\n        strLoop: for (int i = 0; i <= strLength - patLength; i++) {\r\n            for (int j = 0; j < patLength; j++) {\r\n                String subPat = pattDirs[pattIdxStart + j + 1];\r\n                String subStr = pathDirs[pathIdxStart + i + j];\r\n                if (!matchStrings(subPat, subStr, uriTemplateVariables)) {\r\n                    continue strLoop;\r\n                }\r\n            }\r\n            foundIdx = pathIdxStart + i;\r\n            break;\r\n        }\r\n        if (foundIdx == -1) {\r\n            return false;\r\n        }\r\n        pattIdxStart = patIdxTmp;\r\n        pathIdxStart = foundIdx + patLength;\r\n    }\r\n    for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\r\n        if (!pattDirs[i].equals(\"**\")) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  }
]