[
  {
    "head": "org.springframework.core.env.ProfilesTests#ofComplexExpressionEnclosedInParentheses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofComplexExpressionEnclosedInParentheses() {\r\n    Profiles profiles = Profiles.of(\"((spring & framework) | (spring & java))\");\r\n    assertComplexExpression(profiles);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#ofComplexExpressionEnclosedInParentheses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#ofComplexExpressionEnclosedInParentheses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#assertComplexExpression(Profiles)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertComplexExpression(Profiles profiles) {\r\n    assertThat(profiles.matches(activeProfiles(\"spring\"))).isFalse();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"framework\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"java\", \"framework\"))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#assertComplexExpression(Profiles)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#malformedExpressions()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid malformedExpressions() {\r\n    assertMalformed(() -> Profiles.of(\"(\"));\r\n    assertMalformed(() -> Profiles.of(\")\"));\r\n    assertMalformed(() -> Profiles.of(\"a & b | c\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#malformedExpressions()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#malformedExpressions()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#sensibleToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sensibleToString() {\r\n    assertThat(Profiles.of(\"spring\")).hasToString(\"spring\");\r\n    assertThat(Profiles.of(\"(spring & framework) | (spring & java)\")).hasToString(\"(spring & framework) | (spring & java)\");\r\n    assertThat(Profiles.of(\"(spring&framework)|(spring&java)\")).hasToString(\"(spring&framework)|(spring&java)\");\r\n    assertThat(Profiles.of(\"spring & framework\", \"java | kotlin\")).hasToString(\"(spring & framework) | (java | kotlin)\");\r\n    assertThat(Profiles.of(\"java | kotlin\", \"spring & framework\")).hasToString(\"(java | kotlin) | (spring & framework)\");\r\n    assertThat(Profiles.of(\"java | kotlin\", \"spring & framework\", \"cat | dog\")).hasToString(\"(java | kotlin) | (spring & framework) | (cat | dog)\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#sensibleToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#sensibleToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#toStringGeneratesValidCompositeProfileExpression()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toStringGeneratesValidCompositeProfileExpression() {\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"(spring & kotlin) | (spring & java)\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring & kotlin\", \"spring & java\");\r\n    assertThatToStringGeneratesValidCompositeProfileExpression(\"spring & kotlin\", \"spring & java\", \"cat | dog\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#toStringGeneratesValidCompositeProfileExpression()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#toStringGeneratesValidCompositeProfileExpression()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#assertThatToStringGeneratesValidCompositeProfileExpression(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertThatToStringGeneratesValidCompositeProfileExpression(String... profileExpressions) {\r\n    Profiles profiles = Profiles.of(profileExpressions);\r\n    assertThat(profiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(profiles.matches(activeProfiles(\"kotlin\"))).isFalse();\r\n    Profiles compositeProfiles = Profiles.of(profiles.toString());\r\n    assertThat(compositeProfiles.matches(activeProfiles(\"spring\", \"java\"))).isTrue();\r\n    assertThat(compositeProfiles.matches(activeProfiles(\"kotlin\"))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#assertThatToStringGeneratesValidCompositeProfileExpression(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#sensibleEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sensibleEquals() {\r\n    assertEqual(\"(spring & framework) | (spring & java)\");\r\n    assertEqual(\"(spring&framework)|(spring&java)\");\r\n    assertEqual(\"spring & framework\", \"java | kotlin\");\r\n    // Ensure order of individual expressions does not affect equals().\r\n    String expression1 = \"A | B\";\r\n    String expression2 = \"C & (D | E)\";\r\n    Profiles profiles1 = Profiles.of(expression1, expression2);\r\n    Profiles profiles2 = Profiles.of(expression2, expression1);\r\n    assertThat(profiles1).isEqualTo(profiles2);\r\n    assertThat(profiles2).isEqualTo(profiles1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesTests#sensibleEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#sensibleEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ProfilesTests#assertEqual(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertEqual(String... expressions) {\r\n    Profiles profiles1 = Profiles.of(expressions);\r\n    Profiles profiles2 = Profiles.of(expressions);\r\n    assertThat(profiles1).isEqualTo(profiles2);\r\n    assertThat(profiles2).isEqualTo(profiles1);\r\n}",
    "tailType": "method_code"
  }
]