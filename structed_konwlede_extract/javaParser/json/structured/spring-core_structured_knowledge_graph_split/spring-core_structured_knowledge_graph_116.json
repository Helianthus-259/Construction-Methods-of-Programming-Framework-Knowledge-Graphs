[
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#setName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setName(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getAge()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int getAge() {\r\n    return this.age;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#getAge()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getAge()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\r\n    if (element instanceof Class<?> type) {\r\n        registerTypeHint(hints, type);\r\n    } else if (element instanceof Constructor<?> constructor) {\r\n        registerConstructorHint(hints, constructor);\r\n    } else if (element instanceof Field field) {\r\n        registerFieldHint(hints, field);\r\n    } else if (element instanceof Method method) {\r\n        registerMethodHint(hints, method);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setAge(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAge(int age) {\r\n    this.age = age;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#setAge(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setAge(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getSpouse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic TestObject getSpouse() {\r\n    return this.spouse;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#getSpouse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getSpouse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerTypeHint(ReflectionHints,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register {@link ReflectionHints} against the specified {@link Class}.\r\n * @param hints the reflection hints instance to use\r\n * @param type the class to process\r\n */\r\nprotected void registerTypeHint(ReflectionHints hints, Class<?> type) {\r\n    hints.registerType(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor#registerTypeHint(ReflectionHints,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setSpouse(TestObject)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setSpouse(TestObject spouse) {\r\n    this.spouse = spouse;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#setSpouse(TestObject)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#setSpouse(TestObject)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]