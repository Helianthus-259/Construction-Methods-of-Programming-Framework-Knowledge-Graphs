[
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#factory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#indexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the index of the first byte in this buffer that matches\r\n * the given predicate.\r\n * @param predicate the predicate to match\r\n * @param fromIndex the index to start the search from\r\n * @return the index of the first byte that matches {@code predicate};\r\n * or {@code -1} if none match\r\n */\r\nint indexOf(IntPredicate predicate, int fromIndex);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#indexOf(IntPredicate,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#lastIndexOf(IntPredicate,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the index of the last byte in this buffer that matches\r\n * the given predicate.\r\n * @param predicate the predicate to match\r\n * @param fromIndex the index to start the search from\r\n * @return the index of the last byte that matches {@code predicate};\r\n * or {@code -1} if none match\r\n */\r\nint lastIndexOf(IntPredicate predicate, int fromIndex);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#lastIndexOf(IntPredicate,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#readableByteCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the number of bytes that can be read from this data buffer.\r\n * @return the readable byte count\r\n */\r\nint readableByteCount();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#readableByteCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#writableByteCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the number of bytes that can be written to this data buffer.\r\n * @return the writable byte count\r\n * @since 5.0.1\r\n */\r\nint writableByteCount();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#writableByteCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#capacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the number of bytes that this buffer can contain.\r\n * @return the capacity\r\n * @since 5.0.1\r\n */\r\nint capacity();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#capacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#capacity(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the number of bytes that this buffer can contain.\r\n * <p>If the new capacity is lower than the current capacity, the contents\r\n * of this buffer will be truncated. If the new capacity is higher than\r\n * the current capacity, it will be expanded.\r\n * @param capacity the new capacity\r\n * @return this buffer\r\n * @deprecated as of 6.0, in favor of {@link #ensureWritable(int)}, which\r\n * has different semantics\r\n */\r\n@Deprecated(since = \"6.0\")\r\nDataBuffer capacity(int capacity);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#capacity(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#capacity(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#ensureCapacity(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Ensure that the current buffer has enough {@link #writableByteCount()}\r\n * to write the amount of data given as an argument. If not, the missing\r\n * capacity will be added to the buffer.\r\n * @param capacity the writable capacity to check for\r\n * @return this buffer\r\n * @since 5.1.4\r\n * @deprecated since 6.0, in favor of {@link #ensureWritable(int)}\r\n */\r\n@Deprecated(since = \"6.0\")\r\ndefault DataBuffer ensureCapacity(int capacity) {\r\n    return ensureWritable(capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#ensureCapacity(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#ensureCapacity(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#ensureWritable(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Ensure that the current buffer has enough {@link #writableByteCount()}\r\n * to write the amount of data given as an argument. If not, the missing\r\n * capacity will be added to the buffer.\r\n * @param capacity the writable capacity to check for\r\n * @return this buffer\r\n * @since 6.0\r\n */\r\nDataBuffer ensureWritable(int capacity);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#ensureWritable(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#readPosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the position from which this buffer will read.\r\n * @return the read position\r\n * @since 5.0.1\r\n */\r\nint readPosition();",
    "tailType": "method_code"
  }
]