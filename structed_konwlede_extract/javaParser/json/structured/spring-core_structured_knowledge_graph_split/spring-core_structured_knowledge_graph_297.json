[
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForPath() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Path.of(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForURI() {\r\n    String uri = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).isEqualTo(uri);\r\n    uri += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(URI.create(uri))).hasSize(truncatedLength).startsWith(uri.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForURL() throws Exception {\r\n    String url = \"https://www.example.com/?foo=1&bar=2&baz=3\";\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).isEqualTo(url);\r\n    url += \"&qux=\" + \"4\".repeat(60);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new URL(url))).hasSize(truncatedLength).startsWith(url.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForInetAddress()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForInetAddress() {\r\n    InetAddress localhost = getLocalhost();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localhost)).isEqualTo(localhost.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForInetAddress()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForInetAddress()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#getLocalhost()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static InetAddress getLocalhost() {\r\n    try {\r\n        return InetAddress.getLocalHost();\r\n    } catch (UnknownHostException ex) {\r\n        return InetAddress.getLoopbackAddress();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#getLocalhost()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForCharset() {\r\n    Charset charset = StandardCharsets.UTF_8;\r\n    assertThat(ObjectUtils.nullSafeConciseToString(charset)).isEqualTo(charset.name());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForCurrency()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForCurrency() {\r\n    Currency currency = Currency.getInstance(Locale.US);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(currency)).isEqualTo(currency.toString());\r\n}",
    "tailType": "method_code"
  }
]