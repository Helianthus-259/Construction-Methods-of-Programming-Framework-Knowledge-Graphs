[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType) {\r\n    if (this.annotationFilter == AnnotationFilter.ALL) {\r\n        return Stream.empty();\r\n    }\r\n    return StreamSupport.stream(spliterator(annotationType), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#stream(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType) {\r\n    if (this.annotationFilter == AnnotationFilter.ALL) {\r\n        return Stream.empty();\r\n    }\r\n    return StreamSupport.stream(spliterator(annotationType), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#stream(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Stream<MergedAnnotation<Annotation>> stream() {\r\n    if (this.annotationFilter == AnnotationFilter.ALL) {\r\n        return Stream.empty();\r\n    }\r\n    return StreamSupport.stream(spliterator(), false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#stream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#stream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#iterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Iterator<MergedAnnotation<Annotation>> iterator() {\r\n    if (this.annotationFilter == AnnotationFilter.ALL) {\r\n        return Collections.emptyIterator();\r\n    }\r\n    return Spliterators.iterator(spliterator());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#iterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#iterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#spliterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Spliterator<MergedAnnotation<Annotation>> spliterator() {\r\n    if (this.annotationFilter == AnnotationFilter.ALL) {\r\n        return Spliterators.emptySpliterator();\r\n    }\r\n    return spliterator(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#spliterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#spliterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#spliterator(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private <A extends Annotation> Spliterator<MergedAnnotation<A>> spliterator(@Nullable Object annotationType) {\r\n    return new AggregatesSpliterator<>(annotationType, getAggregates());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#spliterator(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#getAggregates()",
    "headType": "method",
    "relation": "provide",
    "tail": "private List<Aggregate> getAggregates() {\r\n    List<Aggregate> aggregates = this.aggregates;\r\n    if (aggregates == null) {\r\n        aggregates = scan(this, new AggregatesCollector());\r\n        if (aggregates == null || aggregates.isEmpty()) {\r\n            aggregates = Collections.emptyList();\r\n        }\r\n        this.aggregates = aggregates;\r\n    }\r\n    return aggregates;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotations#getAggregates()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotations#scan(C,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate <C, R> R scan(C criteria, AnnotationsProcessor<C, R> processor) {\r\n    if (this.annotations != null) {\r\n        R result = processor.doWithAnnotations(criteria, 0, this.source, this.annotations);\r\n        return processor.finish(result);\r\n    }\r\n    if (this.element != null && this.searchStrategy != null) {\r\n        return AnnotationsScanner.scan(criteria, this.element, this.searchStrategy, this.searchEnclosingClass, processor);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  }
]