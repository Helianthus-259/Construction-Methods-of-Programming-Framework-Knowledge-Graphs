[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createSynthesizedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\nprotected A createSynthesizedAnnotation() {\r\n    // Check root annotation\r\n    if (this.rootAttributes instanceof Annotation ann && isTargetAnnotation(ann) && !isSynthesizable(ann)) {\r\n        return (A) ann;\r\n    }\r\n    // Check meta-annotation\r\n    Annotation meta = this.mapping.getAnnotation();\r\n    if (meta != null && isTargetAnnotation(meta) && !isSynthesizable(meta)) {\r\n        return (A) meta;\r\n    }\r\n    return SynthesizedMergedAnnotationInvocationHandler.createProxy(this, getType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#createSynthesizedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createSynthesizedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createSynthesizedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#isTargetAnnotation(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied object is an annotation of the required\r\n * {@linkplain #getType() type}.\r\n * @param obj the object to check\r\n * @since 5.3.22\r\n */\r\nprivate boolean isTargetAnnotation(Object obj) {\r\n    return getType().isInstance(obj);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#isTargetAnnotation(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#isSynthesizable(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied annotation has not already been synthesized\r\n * <strong>and</strong> whether the mapped annotation is a composed annotation\r\n * that needs to have its attributes merged or the mapped annotation is\r\n * {@linkplain AnnotationTypeMapping#isSynthesizable() synthesizable} in general.\r\n * @param annotation the annotation to check\r\n * @since 5.3.22\r\n */\r\nprivate boolean isSynthesizable(Annotation annotation) {\r\n    // Already synthesized?\r\n    if (AnnotationUtils.isSynthesizedAnnotation(annotation)) {\r\n        return false;\r\n    }\r\n    // Is this a mapped annotation for a composed annotation, and are there\r\n    // annotation attributes (mirrors) that need to be merged?\r\n    if (getDistance() > 0 && this.resolvedMirrors.length > 0) {\r\n        return true;\r\n    }\r\n    // Is the mapped annotation itself synthesizable?\r\n    return this.mapping.isSynthesizable();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#isSynthesizable(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeValue(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\nprotected <T> T getAttributeValue(String attributeName, Class<T> type) {\r\n    int attributeIndex = getAttributeIndex(attributeName, false);\r\n    return (attributeIndex != -1 ? getValue(attributeIndex, type) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeValue(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeValue(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeValue(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getRequiredValue(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object getRequiredValue(int attributeIndex, String attributeName) {\r\n    Object value = getValue(attributeIndex, Object.class);\r\n    if (value == null) {\r\n        throw new NoSuchElementException(\"No element at attribute index \" + attributeIndex + \" for name \" + attributeName);\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getRequiredValue(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate <T> T getValue(int attributeIndex, Class<T> type) {\r\n    Method attribute = this.mapping.getAttributes().get(attributeIndex);\r\n    Object value = getValue(attributeIndex, true, false);\r\n    if (value == null) {\r\n        value = attribute.getDefaultValue();\r\n    }\r\n    return adapt(attribute, value, type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object getValue(int attributeIndex, boolean useConventionMapping, boolean forMirrorResolution) {\r\n    AnnotationTypeMapping mapping = this.mapping;\r\n    if (this.useMergedValues) {\r\n        int mappedIndex = this.mapping.getAliasMapping(attributeIndex);\r\n        if (mappedIndex == -1 && useConventionMapping) {\r\n            mappedIndex = this.mapping.getConventionMapping(attributeIndex);\r\n        }\r\n        if (mappedIndex != -1) {\r\n            mapping = mapping.getRoot();\r\n            attributeIndex = mappedIndex;\r\n        }\r\n    }\r\n    if (!forMirrorResolution) {\r\n        attributeIndex = (mapping.getDistance() != 0 ? this.resolvedMirrors : this.resolvedRootMirrors)[attributeIndex];\r\n    }\r\n    if (attributeIndex == -1) {\r\n        return null;\r\n    }\r\n    if (mapping.getDistance() == 0) {\r\n        Method attribute = mapping.getAttributes().get(attributeIndex);\r\n        Object result = this.valueExtractor.extract(attribute, this.rootAttributes);\r\n        return (result != null ? result : attribute.getDefaultValue());\r\n    }\r\n    return getValueFromMetaAnnotation(attributeIndex, forMirrorResolution);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getValue(int,boolean,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]