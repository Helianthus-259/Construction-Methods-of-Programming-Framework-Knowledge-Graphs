[
  {
    "head": "org.springframework.util.ClassUtilsTests#isNotLambda()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"Convert2Lambda\")\r\nvoid isNotLambda() {\r\n    assertIsNotLambda(new EnigmaSupplier());\r\n    assertIsNotLambda(new Supplier<>() {\r\n\r\n        @Override\r\n        public String get() {\r\n            return \"anonymous inner class\";\r\n        }\r\n    });\r\n    assertIsNotLambda(new Fake$$LambdaSupplier());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isNotLambda()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isNotLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isNotLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertInterfaceMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertInterfaceMethod(Method method) {\r\n    assertThat(method.getDeclaringClass()).as(\"%s must be an interface method\", method).isInterface();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertInterfaceMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertNotInterfaceMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertNotInterfaceMethod(Method method) {\r\n    assertThat(method.getDeclaringClass()).as(\"%s must not be an interface method\", method).isNotInterface();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertNotInterfaceMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertPubliclyAccessible(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertPubliclyAccessible(Method method) {\r\n    assertPublic(method);\r\n    assertPublic(method.getDeclaringClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertPubliclyAccessible(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertNotPubliclyAccessible(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertNotPubliclyAccessible(Method method) {\r\n    assertThat(!isPublic(method) || !isPublic(method.getDeclaringClass())).as(\"%s must not be publicly accessible\", method).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertNotPubliclyAccessible(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertPublic(Member)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertPublic(Member member) {\r\n    assertThat(isPublic(member)).as(\"%s must be public\", member).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertPublic(Member)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertPublic(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertPublic(Class<?> clazz) {\r\n    assertThat(isPublic(clazz)).as(\"%s must be public\", clazz).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertPublic(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertNotPublic(Member)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertNotPublic(Member member) {\r\n    assertThat(!isPublic(member)).as(\"%s must be not be public\", member).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertNotPublic(Member)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#assertNotPublic(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertNotPublic(Class<?> clazz) {\r\n    assertThat(!isPublic(clazz)).as(\"%s must be not be public\", clazz).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#assertNotPublic(Class<?>)",
    "tailType": "method"
  }
]