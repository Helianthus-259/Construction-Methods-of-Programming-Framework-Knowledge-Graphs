[
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#parkedThread",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#parkedThread",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicReference<Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#workAmount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#workAmount",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#closed",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#closed",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#consumed",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#consumed",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#available",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#available",
    "headType": "field",
    "relation": "haveType",
    "tail": "DataBuffer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#subscription",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#subscription",
    "headType": "field",
    "relation": "haveType",
    "tail": "Subscription",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#done",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#done",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#error",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#error",
    "headType": "field",
    "relation": "haveType",
    "tail": "Throwable",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onSubscribe(Subscription)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void onSubscribe(Subscription subscription) {\r\n    if (this.subscription != null) {\r\n        subscription.cancel();\r\n        return;\r\n    }\r\n    this.subscription = subscription;\r\n    subscription.request(this.prefetch == Integer.MAX_VALUE ? Long.MAX_VALUE : this.prefetch);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.SubscriberInputStream#onSubscribe(Subscription)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onSubscribe(Subscription)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.SubscriberInputStream#onNext(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void onNext(DataBuffer buffer) {\r\n    Assert.notNull(buffer, \"DataBuffer must not be null\");\r\n    if (this.done) {\r\n        discard(buffer);\r\n        return;\r\n    }\r\n    if (!this.queue.offer(buffer)) {\r\n        discard(buffer);\r\n        this.error = new RuntimeException(\"Buffer overflow\");\r\n        this.done = true;\r\n    }\r\n    int previousWorkState = addWork();\r\n    if (previousWorkState == Integer.MIN_VALUE) {\r\n        DataBuffer value = this.queue.poll();\r\n        if (value != null) {\r\n            discard(value);\r\n        }\r\n        return;\r\n    }\r\n    if (previousWorkState == 0) {\r\n        resume();\r\n    }\r\n}",
    "tailType": "method_code"
  }
]