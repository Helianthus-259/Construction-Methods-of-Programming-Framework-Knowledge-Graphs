[
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#isEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#isEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergeArrayIntoCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mergeArrayIntoCollection() {\r\n    Object[] arr = new Object[] { \"value1\", \"value2\" };\r\n    List<Comparable<?>> list = new ArrayList<>();\r\n    list.add(\"value3\");\r\n    CollectionUtils.mergeArrayIntoCollection(arr, list);\r\n    assertThat(list).containsExactly(\"value3\", \"value1\", \"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#mergeArrayIntoCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergeArrayIntoCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergePrimitiveArrayIntoCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mergePrimitiveArrayIntoCollection() {\r\n    int[] arr = new int[] { 1, 2 };\r\n    List<Comparable<?>> list = new ArrayList<>();\r\n    list.add(3);\r\n    CollectionUtils.mergeArrayIntoCollection(arr, list);\r\n    assertThat(list).containsExactly(3, 1, 2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#mergePrimitiveArrayIntoCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergePrimitiveArrayIntoCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergePropertiesIntoMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid mergePropertiesIntoMap() {\r\n    Properties defaults = new Properties();\r\n    defaults.setProperty(\"prop1\", \"value1\");\r\n    Properties props = new Properties(defaults);\r\n    props.setProperty(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", 3);\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\"prop4\", \"value4\");\r\n    CollectionUtils.mergePropertiesIntoMap(props, map);\r\n    assertThat(map.get(\"prop1\")).isEqualTo(\"value1\");\r\n    assertThat(map.get(\"prop2\")).isEqualTo(\"value2\");\r\n    assertThat(map.get(\"prop3\")).isEqualTo(3);\r\n    assertThat(map.get(\"prop4\")).isEqualTo(\"value4\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#mergePropertiesIntoMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#mergePropertiesIntoMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#contains()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contains() {\r\n    assertThat(CollectionUtils.contains((Iterator<String>) null, \"myElement\")).isFalse();\r\n    assertThat(CollectionUtils.contains((Enumeration<String>) null, \"myElement\")).isFalse();\r\n    assertThat(CollectionUtils.contains(new ArrayList<String>().iterator(), \"myElement\")).isFalse();\r\n    assertThat(CollectionUtils.contains(new Hashtable<String, Object>().keys(), \"myElement\")).isFalse();\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"myElement\");\r\n    assertThat(CollectionUtils.contains(list.iterator(), \"myElement\")).isTrue();\r\n    Hashtable<String, String> ht = new Hashtable<>();\r\n    ht.put(\"myElement\", \"myValue\");\r\n    assertThat(CollectionUtils.contains(ht.keys(), \"myElement\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#contains()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#contains()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsAny()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsAny() {\r\n    List<String> source = new ArrayList<>();\r\n    source.add(\"abc\");\r\n    source.add(\"def\");\r\n    source.add(\"ghi\");\r\n    List<String> candidates = new ArrayList<>();\r\n    candidates.add(\"xyz\");\r\n    candidates.add(\"def\");\r\n    candidates.add(\"abc\");\r\n    assertThat(CollectionUtils.containsAny(source, candidates)).isTrue();\r\n    candidates.remove(\"def\");\r\n    assertThat(CollectionUtils.containsAny(source, candidates)).isTrue();\r\n    candidates.remove(\"abc\");\r\n    assertThat(CollectionUtils.containsAny(source, candidates)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#containsAny()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsAny()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsInstanceWithNullCollection() {\r\n    assertThat(CollectionUtils.containsInstance(null, this)).as(\"Must return false if supplied Collection argument is null\").isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#containsInstanceWithNullCollection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]