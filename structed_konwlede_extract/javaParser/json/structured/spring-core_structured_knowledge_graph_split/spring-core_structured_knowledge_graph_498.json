[
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic LeakAwareDataBufferFactory factory() {\r\n    return this.dataBufferFactory;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#factory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return String.format(\"LeakAwareDataBuffer (%s)\", dataBuffer());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "extend",
    "tail": "DataBufferWrapper",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.Symbol",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * An entry of the constant pool, of the BootstrapMethods attribute, or of the (ASM specific) type\n * table of a class.\n *\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.4\">JVMS\n *     4.4</a>\n * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.23\">JVMS\n *     4.7.23</a>\n * @author Eric Bruneton\n */\nabstract class Symbol {\n\n  // Tag values for the constant pool entries (using the same order as in the JVMS).\n\n  /** The tag value of CONSTANT_Class_info JVMS structures. */\n  static final int CONSTANT_CLASS_TAG = 7;\n\n  /** The tag value of CONSTANT_Fieldref_info JVMS structures. */\n  static final int CONSTANT_FIELDREF_TAG = 9;\n\n  /** The tag value of CONSTANT_Methodref_info JVMS structures. */\n  static final int CONSTANT_METHODREF_TAG = 10;\n\n  /** The tag value of CONSTANT_InterfaceMethodref_info JVMS structures. */\n  static final int CONSTANT_INTERFACE_METHODREF_TAG = 11;\n\n  /** The tag value of CONSTANT_String_info JVMS structures. */\n  static final int CONSTANT_STRING_TAG = 8;\n\n  /** The tag value of CONSTANT_Integer_info JVMS structures. */\n  static final int CONSTANT_INTEGER_TAG = 3;\n\n  /** The tag value of CONSTANT_Float_info JVMS structures. */\n  static final int CONSTANT_FLOAT_TAG = 4;\n\n  /** The tag value of CONSTANT_Long_info JVMS structures. */\n  static final int CONSTANT_LONG_TAG = 5;\n\n  /** The tag value of CONSTANT_Double_info JVMS structures. */\n  static final int CONSTANT_DOUBLE_TAG = 6;\n\n  /** The tag value of CONSTANT_NameAndType_info JVMS structures. */\n  static final int CONSTANT_NAME_AND_TYPE_TAG = 12;\n\n  /** The tag value of CONSTANT_Utf8_info JVMS structures. */\n  static final int CONSTANT_UTF8_TAG = 1;\n\n  /** The tag value of CONSTANT_MethodHandle_info JVMS structures. */\n  static final int CONSTANT_METHOD_HANDLE_TAG = 15;\n\n  /** The tag value of CONSTANT_MethodType_info JVMS structures. */\n  static final int CONSTANT_METHOD_TYPE_TAG = 16;\n\n  /** The tag value of CONSTANT_Dynamic_info JVMS structures. */\n  static final int CONSTANT_DYNAMIC_TAG = 17;\n\n  /** The tag value of CONSTANT_InvokeDynamic_info JVMS structures. */\n  static final int CONSTANT_INVOKE_DYNAMIC_TAG = 18;\n\n  /** The tag value of CONSTANT_Module_info JVMS structures. */\n  static final int CONSTANT_MODULE_TAG = 19;\n\n  /** The tag value of CONSTANT_Package_info JVMS structures. */\n  static final int CONSTANT_PACKAGE_TAG = 20;\n\n  // Tag values for the BootstrapMethods attribute entries (ASM specific tag).\n\n  /** The tag value of the BootstrapMethods attribute entries. */\n  static final int BOOTSTRAP_METHOD_TAG = 64;\n\n  // Tag values for the type table entries (ASM specific tags).\n\n  /** The tag value of a normal type entry in the (ASM specific) type table of a class. */\n  static final int TYPE_TAG = 128;\n\n  /**\n   * The tag value of an uninitialized type entry in the type table of a class. This type is used\n   * for the normal case where the NEW instruction is before the &lt;init&gt; constructor call (in\n   * bytecode offset order), i.e. when the label of the NEW instruction is resolved when the\n   * constructor call is visited. If the NEW instruction is after the constructor call, use the\n   * {@link #FORWARD_UNINITIALIZED_TYPE_TAG} tag value instead.\n   */\n  static final int UNINITIALIZED_TYPE_TAG = 129;\n\n  /**\n   * The tag value of an uninitialized type entry in the type table of a class. This type is used\n   * for the unusual case where the NEW instruction is after the &lt;init&gt; constructor call (in\n   * bytecode offset order), i.e. when the label of the NEW instruction is not resolved when the\n   * constructor call is visited. If the NEW instruction is before the constructor call, use the\n   * {@link #UNINITIALIZED_TYPE_TAG} tag value instead.\n   */\n  static final int FORWARD_UNINITIALIZED_TYPE_TAG = 130;\n\n  /** The tag value of a merged type entry in the (ASM specific) type table of a class. */\n  static final int MERGED_TYPE_TAG = 131;\n\n  // Instance fields.\n\n  /**\n   * The index of this symbol in the constant pool, in the BootstrapMethods attribute, or in the\n   * (ASM specific) type table of a class (depending on the {@link #tag} value).\n   */\n  final int index;\n\n  /**\n   * A tag indicating the type of this symbol. Must be one of the static tag values defined in this\n   * class.\n   */\n  final int tag;\n\n  /**\n   * The internal name of the owner class of this symbol. Only used for {@link\n   * #CONSTANT_FIELDREF_TAG}, {@link #CONSTANT_METHODREF_TAG}, {@link\n   * #CONSTANT_INTERFACE_METHODREF_TAG}, and {@link #CONSTANT_METHOD_HANDLE_TAG} symbols.\n   */\n  final String owner;\n\n  /**\n   * The name of the class field or method corresponding to this symbol. Only used for {@link\n   * #CONSTANT_FIELDREF_TAG}, {@link #CONSTANT_METHODREF_TAG}, {@link\n   * #CONSTANT_INTERFACE_METHODREF_TAG}, {@link #CONSTANT_NAME_AND_TYPE_TAG}, {@link\n   * #CONSTANT_METHOD_HANDLE_TAG}, {@link #CONSTANT_DYNAMIC_TAG} and {@link\n   * #CONSTANT_INVOKE_DYNAMIC_TAG} symbols.\n   */\n  final String name;\n\n  /**\n   * The string value of this symbol. This is:\n   *\n   * <ul>\n   *   <li>a field or method descriptor for {@link #CONSTANT_FIELDREF_TAG}, {@link\n   *       #CONSTANT_METHODREF_TAG}, {@link #CONSTANT_INTERFACE_METHODREF_TAG}, {@link\n   *       #CONSTANT_NAME_AND_TYPE_TAG}, {@link #CONSTANT_METHOD_HANDLE_TAG}, {@link\n   *       #CONSTANT_METHOD_TYPE_TAG}, {@link #CONSTANT_DYNAMIC_TAG} and {@link\n   *       #CONSTANT_INVOKE_DYNAMIC_TAG} symbols,\n   *   <li>an arbitrary string for {@link #CONSTANT_UTF8_TAG} and {@link #CONSTANT_STRING_TAG}\n   *       symbols,\n   *   <li>an internal class name for {@link #CONSTANT_CLASS_TAG}, {@link #TYPE_TAG}, {@link\n   *       #UNINITIALIZED_TYPE_TAG} and {@link #FORWARD_UNINITIALIZED_TYPE_TAG} symbols,\n   *   <li>{@literal null} for the other types of symbol.\n   * </ul>\n   */\n  final String value;\n\n  /**\n   * The numeric value of this symbol. This is:\n   *\n   * <ul>\n   *   <li>the symbol's value for {@link #CONSTANT_INTEGER_TAG},{@link #CONSTANT_FLOAT_TAG}, {@link\n   *       #CONSTANT_LONG_TAG}, {@link #CONSTANT_DOUBLE_TAG},\n   *   <li>the CONSTANT_MethodHandle_info reference_kind field value for {@link\n   *       #CONSTANT_METHOD_HANDLE_TAG} symbols (or this value left shifted by 8 bits for\n   *       reference_kind values larger than or equal to H_INVOKEVIRTUAL and if the method owner is\n   *       an interface),\n   *   <li>the CONSTANT_InvokeDynamic_info bootstrap_method_attr_index field value for {@link\n   *       #CONSTANT_INVOKE_DYNAMIC_TAG} symbols,\n   *   <li>the offset of a bootstrap method in the BootstrapMethods boostrap_methods array, for\n   *       {@link #CONSTANT_DYNAMIC_TAG} or {@link #BOOTSTRAP_METHOD_TAG} symbols,\n   *   <li>the bytecode offset of the NEW instruction that created an {@link\n   *       Frame#ITEM_UNINITIALIZED} type for {@link #UNINITIALIZED_TYPE_TAG} symbols,\n   *   <li>the index of the {@link Label} (in the {@link SymbolTable#labelTable} table) of the NEW\n   *       instruction that created an {@link Frame#ITEM_UNINITIALIZED} type for {@link\n   *       #FORWARD_UNINITIALIZED_TYPE_TAG} symbols,\n   *   <li>the indices (in the class' type table) of two {@link #TYPE_TAG} source types for {@link\n   *       #MERGED_TYPE_TAG} symbols,\n   *   <li>0 for the other types of symbol.\n   * </ul>\n   */\n  final long data;\n\n  /**\n   * Additional information about this symbol, generally computed lazily. <i>Warning: the value of\n   * this field is ignored when comparing Symbol instances</i> (to avoid duplicate entries in a\n   * SymbolTable). Therefore, this field should only contain data that can be computed from the\n   * other fields of this class. It contains:\n   *\n   * <ul>\n   *   <li>the {@link Type#getArgumentsAndReturnSizes} of the symbol's method descriptor for {@link\n   *       #CONSTANT_METHODREF_TAG}, {@link #CONSTANT_INTERFACE_METHODREF_TAG} and {@link\n   *       #CONSTANT_INVOKE_DYNAMIC_TAG} symbols,\n   *   <li>the index in the InnerClasses_attribute 'classes' array (plus one) corresponding to this\n   *       class, for {@link #CONSTANT_CLASS_TAG} symbols,\n   *   <li>the index (in the class' type table) of the merged type of the two source types for\n   *       {@link #MERGED_TYPE_TAG} symbols,\n   *   <li>0 for the other types of symbol, or if this field has not been computed yet.\n   * </ul>\n   */\n  int info;\n\n  /**\n   * Constructs a new Symbol. This constructor can't be used directly because the Symbol class is\n   * abstract. Instead, use the factory methods of the {@link SymbolTable} class.\n   *\n   * @param index the symbol index in the constant pool, in the BootstrapMethods attribute, or in\n   *     the (ASM specific) type table of a class (depending on 'tag').\n   * @param tag the symbol type. Must be one of the static tag values defined in this class.\n   * @param owner The internal name of the symbol's owner class. Maybe {@literal null}.\n   * @param name The name of the symbol's corresponding class field or method. Maybe {@literal\n   *     null}.\n   * @param value The string value of this symbol. Maybe {@literal null}.\n   * @param data The numeric value of this symbol.\n   */\n  Symbol(\n      final int index,\n      final int tag,\n      final String owner,\n      final String name,\n      final String value,\n      final long data) {\n    this.index = index;\n    this.tag = tag;\n    this.owner = owner;\n    this.name = name;\n    this.value = value;\n    this.data = data;\n  }\n\n  /**\n   * Returns the result {@link Type#getArgumentsAndReturnSizes} on {@link #value}.\n   *\n   * @return the result {@link Type#getArgumentsAndReturnSizes} on {@link #value} (memoized in\n   *     {@link #info} for efficiency). This should only be used for {@link\n   *     #CONSTANT_METHODREF_TAG}, {@link #CONSTANT_INTERFACE_METHODREF_TAG} and {@link\n   *     #CONSTANT_INVOKE_DYNAMIC_TAG} symbols.\n   */\n  int getArgumentsAndReturnSizes() {\n    if (info == 0) {\n      info = Type.getArgumentsAndReturnSizes(value);\n    }\n    return info;\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Symbol#CONSTANT_CLASS_TAG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Symbol#CONSTANT_CLASS_TAG",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Symbol#CONSTANT_FIELDREF_TAG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Symbol#CONSTANT_FIELDREF_TAG",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Symbol#CONSTANT_METHODREF_TAG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Symbol#CONSTANT_METHODREF_TAG",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Symbol#CONSTANT_INTERFACE_METHODREF_TAG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Symbol#CONSTANT_INTERFACE_METHODREF_TAG",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Symbol",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Symbol#CONSTANT_STRING_TAG",
    "tailType": "field"
  }
]