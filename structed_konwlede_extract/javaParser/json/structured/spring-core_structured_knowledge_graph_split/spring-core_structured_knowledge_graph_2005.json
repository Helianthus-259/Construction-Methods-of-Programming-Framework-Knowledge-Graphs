[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancelWithoutDemand(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-22107\r\n@ParameterizedDataBufferAllocatingTest\r\nvoid readAsynchronousFileChannelCancelWithoutDemand(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    URI uri = this.resource.getURI();\r\n    Flux<DataBuffer> flux = DataBufferUtils.readAsynchronousFileChannel(() -> AsynchronousFileChannel.open(Paths.get(uri), StandardOpenOption.READ), super.bufferFactory, 3);\r\n    BaseSubscriber<DataBuffer> subscriber = new ZeroDemandSubscriber();\r\n    flux.subscribe(subscriber);\r\n    subscriber.cancel();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancelWithoutDemand(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readAsynchronousFileChannelCancelWithoutDemand(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readPath(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readPath(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    Flux<DataBuffer> flux = DataBufferUtils.read(this.resource.getFile().toPath(), super.bufferFactory, 3);\r\n    verifyReadData(flux);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readPath(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readPath(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResource(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readResource(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    Flux<DataBuffer> flux = DataBufferUtils.read(this.resource, super.bufferFactory, 3);\r\n    verifyReadData(flux);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResource(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResource(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePosition(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readResourcePosition(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    Flux<DataBuffer> flux = DataBufferUtils.read(this.resource, 9, super.bufferFactory, 3);\r\n    StepVerifier.create(flux).consumeNextWith(stringConsumer(\"qux\")).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePosition(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#verifyReadData(Flux<DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void verifyReadData(Flux<DataBuffer> buffers) {\r\n    StepVerifier.create(buffers).consumeNextWith(stringConsumer(\"foo\")).consumeNextWith(stringConsumer(\"bar\")).consumeNextWith(stringConsumer(\"baz\")).consumeNextWith(stringConsumer(\"qux\")).expectComplete().verify(Duration.ofSeconds(3));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#verifyReadData(Flux<DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePositionAndTakeUntil(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readResourcePositionAndTakeUntil(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    Resource resource = new ClassPathResource(\"DataBufferUtilsTests.txt\", getClass());\r\n    Flux<DataBuffer> flux = DataBufferUtils.read(resource, 3, super.bufferFactory, 3);\r\n    flux = DataBufferUtils.takeUntilByteCount(flux, 5);\r\n    StepVerifier.create(flux).consumeNextWith(stringConsumer(\"bar\")).consumeNextWith(stringConsumer(\"ba\")).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePositionAndTakeUntil(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readResourcePositionAndTakeUntil(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteArrayResourcePositionAndTakeUntil(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readByteArrayResourcePositionAndTakeUntil(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    Resource resource = new ByteArrayResource(\"foobarbazqux\".getBytes());\r\n    Flux<DataBuffer> flux = DataBufferUtils.read(resource, 3, super.bufferFactory, 3);\r\n    flux = DataBufferUtils.takeUntilByteCount(flux, 5);\r\n    StepVerifier.create(flux).consumeNextWith(stringConsumer(\"bar\")).consumeNextWith(stringConsumer(\"ba\")).expectComplete().verify(Duration.ofSeconds(5));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#readByteArrayResourcePositionAndTakeUntil(DataBufferFactory)",
    "tailType": "method"
  }
]