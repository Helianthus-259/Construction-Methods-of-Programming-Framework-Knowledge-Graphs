[
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertIntegerArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Integer[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntegerArrayToIntArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntegerArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertIntArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new int[] { 1, 2 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntegerArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntegerArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertObjectArrayToIntegerArray() {\r\n    Integer[] result = conversionService.convert(new Object[] { 1, 2, 3 }, Integer[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntegerArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntegerArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertObjectArrayToIntArray() {\r\n    int[] result = conversionService.convert(new Object[] { 1, 2, 3 }, int[].class);\r\n    assertThat(result).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertObjectArrayToIntArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToObjectArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-33212\r\n@Test\r\nvoid convertIntArrayToObjectArray() {\r\n    Object[] result = conversionService.convert(new int[] { 1, 2 }, Object[].class);\r\n    assertThat(result).containsExactly(1, 2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToObjectArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToObjectArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToFloatArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertIntArrayToFloatArray() {\r\n    Float[] result = conversionService.convert(new int[] { 1, 2 }, Float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToFloatArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToFloatArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.DefaultConversionServiceTests#convertIntArrayToPrimitiveFloatArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertIntArrayToPrimitiveFloatArray() {\r\n    float[] result = conversionService.convert(new int[] { 1, 2 }, float[].class);\r\n    assertThat(result).containsExactly(1.0F, 2.0F);\r\n}",
    "tailType": "method_code"
  }
]