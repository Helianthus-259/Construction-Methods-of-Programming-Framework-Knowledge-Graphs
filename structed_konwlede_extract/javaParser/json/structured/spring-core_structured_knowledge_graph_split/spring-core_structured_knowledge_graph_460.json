[
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Subclasses should implement this method to test {@link Encoder#encode}, possibly using\r\n * {@link #testEncodeAll} or other helper methods.\r\n */\r\n@Test\r\nprotected abstract void encode() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeAll(Publisher<? extends T>,Class<? extends T>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method that tests for a variety of encoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testEncode(Publisher, ResolvableType, MimeType, Map, Consumer)}</li>\r\n *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param input the input to be provided to the encoder\r\n * @param inputClass the input class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testEncodeAll(Publisher<? extends T> input, Class<? extends T> inputClass, Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\r\n    testEncodeAll(input, ResolvableType.forClass(inputClass), null, null, stepConsumer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeAll(Publisher<? extends T>,Class<? extends T>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeAll(Publisher<? extends T>,ResolvableType,MimeType,Map<String,Object>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Helper method that tests for a variety of decoding scenarios. This method\r\n * invokes:\r\n * <ul>\r\n *     <li>{@link #testEncode(Publisher, ResolvableType, MimeType, Map, Consumer)}</li>\r\n *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>\r\n *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>\r\n * </ul>\r\n *\r\n * @param <T> the output type\r\n * @param input the input to be provided to the encoder\r\n * @param inputType the input type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n */\r\nprotected <T> void testEncodeAll(Publisher<? extends T> input, ResolvableType inputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints, Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\r\n    testEncode(input, inputType, mimeType, hints, stepConsumer);\r\n    testEncodeError(input, inputType, mimeType, hints);\r\n    testEncodeCancel(input, inputType, mimeType, hints);\r\n    testEncodeEmpty(inputType, mimeType, hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeAll(Publisher<? extends T>,ResolvableType,MimeType,Map<String,Object>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncode(Publisher<? extends T>,Class<? extends T>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Encoder#encode encode} scenario.\r\n *\r\n * @param input the input to be provided to the encoder\r\n * @param inputClass the input class\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n * @param <T> the output type\r\n */\r\nprotected <T> void testEncode(Publisher<? extends T> input, Class<? extends T> inputClass, Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\r\n    testEncode(input, ResolvableType.forClass(inputClass), null, null, stepConsumer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncode(Publisher<? extends T>,Class<? extends T>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncode(Publisher<? extends T>,ResolvableType,MimeType,Map<String,Object>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a standard {@link Encoder#encode encode} scenario.\r\n *\r\n * @param <T> the output type\r\n * @param input the input to be provided to the encoder\r\n * @param inputType the input type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output\r\n */\r\nprotected <T> void testEncode(Publisher<? extends T> input, ResolvableType inputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints, Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {\r\n    Flux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType, hints);\r\n    StepVerifier.FirstStep<DataBuffer> step = StepVerifier.create(result);\r\n    stepConsumer.accept(step);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncode(Publisher<? extends T>,ResolvableType,MimeType,Map<String,Object>,Consumer<StepVerifier.FirstStep<DataBuffer>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeError(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Encoder#encode encode} scenario where the input stream contains an error.\r\n * This test method will feed the first element of the {@code input} stream to the encoder,\r\n * followed by an {@link InputException}.\r\n * The result is expected to contain one \"normal\" element, followed by the error.\r\n *\r\n * @param input the input to be provided to the encoder\r\n * @param inputType the input type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n * @see InputException\r\n */\r\nprotected void testEncodeError(Publisher<?> input, ResolvableType inputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    input = Flux.concat(Flux.from(input).take(1), Flux.error(new InputException()));\r\n    Flux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType, hints);\r\n    StepVerifier.create(result).consumeNextWith(DataBufferUtils::release).expectError(InputException.class).verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeError(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeCancel(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Encoder#encode encode} scenario where the input stream is canceled.\r\n * This test method will feed the first element of the {@code input} stream to the decoder,\r\n * followed by a cancel signal.\r\n * The result is expected to contain one \"normal\" element.\r\n *\r\n * @param input the input to be provided to the encoder\r\n * @param inputType the input type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n */\r\nprotected void testEncodeCancel(Publisher<?> input, ResolvableType inputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType, hints);\r\n    StepVerifier.create(result).consumeNextWith(DataBufferUtils::release).thenCancel().verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeCancel(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeEmpty(ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test a {@link Encoder#encode encode} scenario where the input stream is empty.\r\n * The output is expected to be empty as well.\r\n *\r\n * @param inputType the input type\r\n * @param mimeType the mime type to use for decoding. May be {@code null}.\r\n * @param hints the hints used for decoding. May be {@code null}.\r\n */\r\nprotected void testEncodeEmpty(ResolvableType inputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<?> input = Flux.empty();\r\n    Flux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType, mimeType, hints);\r\n    StepVerifier.create(result).verifyComplete();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.codec.AbstractEncoderTests#testEncodeEmpty(ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.codec.AbstractEncoderTests#expectBytes(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a result consumer that expects the given bytes.\r\n * @param expected the expected bytes\r\n * @return a consumer that expects the given data buffer to be equal to {@code expected}\r\n */\r\nprotected final Consumer<DataBuffer> expectBytes(byte[] expected) {\r\n    return dataBuffer -> {\r\n        byte[] resultBytes = new byte[dataBuffer.readableByteCount()];\r\n        dataBuffer.read(resultBytes);\r\n        release(dataBuffer);\r\n        assertThat(resultBytes).isEqualTo(expected);\r\n    };\r\n}",
    "tailType": "method_code"
  }
]