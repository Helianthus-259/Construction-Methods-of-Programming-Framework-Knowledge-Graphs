[
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.Ordered",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.Ordered",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\n/**\n * {@code Ordered} is an interface that can be implemented by objects that\n * should be <em>orderable</em>, for example in a {@code Collection}.\n *\n * <p>The actual {@link #getOrder() order} can be interpreted as prioritization,\n * with the first object (with the lowest order value) having the highest\n * priority.\n *\n * <p>Note that there is also a <em>priority</em> marker for this interface:\n * {@link PriorityOrdered}. Consult the Javadoc for {@code PriorityOrdered} for\n * details on how {@code PriorityOrdered} objects are ordered relative to\n * <em>plain</em> {@link Ordered} objects.\n *\n * <p>Consult the Javadoc for {@link OrderComparator} for details on the\n * sort semantics for non-ordered objects.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 07.04.2003\n * @see PriorityOrdered\n * @see OrderComparator\n * @see org.springframework.core.annotation.Order\n * @see org.springframework.core.annotation.AnnotationAwareOrderComparator\n */\npublic interface Ordered {\n\n\t/**\n\t * Useful constant for the highest precedence value.\n\t * @see java.lang.Integer#MIN_VALUE\n\t */\n\tint HIGHEST_PRECEDENCE = Integer.MIN_VALUE;\n\n\t/**\n\t * Useful constant for the lowest precedence value.\n\t * @see java.lang.Integer#MAX_VALUE\n\t */\n\tint LOWEST_PRECEDENCE = Integer.MAX_VALUE;\n\n\n\t/**\n\t * Get the order value of this object.\n\t * <p>Higher values are interpreted as lower priority. As a consequence,\n\t * the object with the lowest value has the highest priority (somewhat\n\t * analogous to Servlet {@code load-on-startup} values).\n\t * <p>Same order values will result in arbitrary sort positions for the\n\t * affected objects.\n\t * @return the order value\n\t * @see #HIGHEST_PRECEDENCE\n\t * @see #LOWEST_PRECEDENCE\n\t */\n\tint getOrder();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.Ordered",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Ordered#HIGHEST_PRECEDENCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Ordered#HIGHEST_PRECEDENCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Ordered",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Ordered#LOWEST_PRECEDENCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Ordered#LOWEST_PRECEDENCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Ordered#getOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the order value of this object.\r\n * <p>Higher values are interpreted as lower priority. As a consequence,\r\n * the object with the lowest value has the highest priority (somewhat\r\n * analogous to Servlet {@code load-on-startup} values).\r\n * <p>Same order values will result in arbitrary sort positions for the\r\n * affected objects.\r\n * @return the order value\r\n * @see #HIGHEST_PRECEDENCE\r\n * @see #LOWEST_PRECEDENCE\r\n */\r\nint getOrder();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Ordered",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Ordered#getOrder()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.OverridingClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.FileCopyUtils;\n\n/**\n * {@code ClassLoader} that does <i>not</i> always delegate to the parent loader\n * as normal class loaders do. This enables, for example, instrumentation to be\n * forced in the overriding ClassLoader, or a \"throwaway\" class loading behavior\n * where selected application classes are temporarily loaded in the overriding\n * {@code ClassLoader} for introspection purposes before eventually loading an\n * instrumented version of the class in the given parent {@code ClassLoader}.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @since 2.0.1\n */\npublic class OverridingClassLoader extends DecoratingClassLoader {\n\n\t/** Packages that are excluded by default. */\n\tpublic static final String[] DEFAULT_EXCLUDED_PACKAGES = new String[]\n\t\t\t{\"java.\", \"javax.\", \"sun.\", \"oracle.\", \"javassist.\", \"org.aspectj.\", \"net.sf.cglib.\"};\n\n\tprivate static final String CLASS_FILE_SUFFIX = \".class\";\n\n\tstatic {\n\t\tClassLoader.registerAsParallelCapable();\n\t}\n\n\n\tprivate final @Nullable ClassLoader overrideDelegate;\n\n\n\t/**\n\t * Create a new OverridingClassLoader for the given ClassLoader.\n\t * @param parent the ClassLoader to build an overriding ClassLoader for\n\t */\n\tpublic OverridingClassLoader(@Nullable ClassLoader parent) {\n\t\tthis(parent, null);\n\t}\n\n\t/**\n\t * Create a new OverridingClassLoader for the given ClassLoader.\n\t * @param parent the ClassLoader to build an overriding ClassLoader for\n\t * @param overrideDelegate the ClassLoader to delegate to for overriding\n\t * @since 4.3\n\t */\n\tpublic OverridingClassLoader(@Nullable ClassLoader parent, @Nullable ClassLoader overrideDelegate) {\n\t\tsuper(parent);\n\t\tthis.overrideDelegate = overrideDelegate;\n\t\tfor (String packageName : DEFAULT_EXCLUDED_PACKAGES) {\n\t\t\texcludePackage(packageName);\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n\t\tif (this.overrideDelegate != null && isEligibleForOverriding(name)) {\n\t\t\treturn this.overrideDelegate.loadClass(name);\n\t\t}\n\t\treturn super.loadClass(name);\n\t}\n\n\t@Override\n\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n\t\tif (isEligibleForOverriding(name)) {\n\t\t\tClass<?> result = loadClassForOverriding(name);\n\t\t\tif (result != null) {\n\t\t\t\tif (resolve) {\n\t\t\t\t\tresolveClass(result);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn super.loadClass(name, resolve);\n\t}\n\n\t/**\n\t * Determine whether the specified class is eligible for overriding\n\t * by this class loader.\n\t * @param className the class name to check\n\t * @return whether the specified class is eligible\n\t * @see #isExcluded\n\t */\n\tprotected boolean isEligibleForOverriding(String className) {\n\t\treturn !isExcluded(className);\n\t}\n\n\t/**\n\t * Load the specified class for overriding purposes in this ClassLoader.\n\t * <p>The default implementation delegates to {@link #findLoadedClass},\n\t * {@link #loadBytesForClass} and {@link #defineClass}.\n\t * @param name the name of the class\n\t * @return the Class object, or {@code null} if no class defined for that name\n\t * @throws ClassNotFoundException if the class for the given name couldn't be loaded\n\t */\n\tprotected @Nullable Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\n\t\tClass<?> result = findLoadedClass(name);\n\t\tif (result == null) {\n\t\t\tbyte[] bytes = loadBytesForClass(name);\n\t\t\tif (bytes != null) {\n\t\t\t\tresult = defineClass(name, bytes, 0, bytes.length);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Load the defining bytes for the given class,\n\t * to be turned into a Class object through a {@link #defineClass} call.\n\t * <p>The default implementation delegates to {@link #openStreamForClass}\n\t * and {@link #transformIfNecessary}.\n\t * @param name the name of the class\n\t * @return the byte content (with transformers already applied),\n\t * or {@code null} if no class defined for that name\n\t * @throws ClassNotFoundException if the class for the given name couldn't be loaded\n\t */\n\tprotected byte @Nullable [] loadBytesForClass(String name) throws ClassNotFoundException {\n\t\tInputStream is = openStreamForClass(name);\n\t\tif (is == null) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\t// Load the raw bytes.\n\t\t\tbyte[] bytes = FileCopyUtils.copyToByteArray(is);\n\t\t\t// Transform if necessary and use the potentially transformed bytes.\n\t\t\treturn transformIfNecessary(name, bytes);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new ClassNotFoundException(\"Cannot load resource for class [\" + name + \"]\", ex);\n\t\t}\n\t}\n\n\t/**\n\t * Open an InputStream for the specified class.\n\t * <p>The default implementation loads a standard class file through\n\t * the parent ClassLoader's {@code getResourceAsStream} method.\n\t * @param name the name of the class\n\t * @return the InputStream containing the byte code for the specified class\n\t */\n\tprotected @Nullable InputStream openStreamForClass(String name) {\n\t\tString internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX;\n\t\treturn getParent().getResourceAsStream(internalName);\n\t}\n\n\n\t/**\n\t * Transformation hook to be implemented by subclasses.\n\t * <p>The default implementation simply returns the given bytes as-is.\n\t * @param name the fully-qualified name of the class being transformed\n\t * @param bytes the raw bytes of the class\n\t * @return the transformed bytes (never {@code null};\n\t * same as the input bytes if the transformation produced no changes)\n\t */\n\tprotected byte[] transformIfNecessary(String name, byte[] bytes) {\n\t\treturn bytes;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.OverridingClassLoader#DEFAULT_EXCLUDED_PACKAGES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#DEFAULT_EXCLUDED_PACKAGES",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.OverridingClassLoader#CLASS_FILE_SUFFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#CLASS_FILE_SUFFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.OverridingClassLoader#overrideDelegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#overrideDelegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class<?> loadClass(String name) throws ClassNotFoundException {\r\n    if (this.overrideDelegate != null && isEligibleForOverriding(name)) {\r\n        return this.overrideDelegate.loadClass(name);\r\n    }\r\n    return super.loadClass(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#loadClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]