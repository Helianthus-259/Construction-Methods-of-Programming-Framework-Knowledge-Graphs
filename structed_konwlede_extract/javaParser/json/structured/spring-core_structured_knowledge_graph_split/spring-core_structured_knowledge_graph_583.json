[
  {
    "head": "org.springframework.cglib.core.CodeGenerationException#getCause()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.CodeGenerationException",
    "headType": "class",
    "relation": "extend",
    "tail": "RuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.CollectionUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Chris Nokleberg\n * @version $Id: CollectionUtils.java,v 1.7 2004/06/24 21:15:21 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class CollectionUtils {\n    private CollectionUtils() { }\n\n    public static Map bucket(Collection c, Transformer t) {\n        Map buckets = new HashMap();\n        for (Object value : c) {\n            Object key = t.transform(value);\n            List bucket = (List)buckets.get(key);\n            if (bucket == null) {\n                buckets.put(key, bucket = new LinkedList());\n            }\n            bucket.add(value);\n        }\n        return buckets;\n    }\n\n    public static void reverse(Map source, Map target) {\n        for (Object key : source.keySet()) {\n            target.put(source.get(key), key);\n        }\n    }\n\n    public static Collection filter(Collection c, Predicate p) {\n        c.removeIf(o -> !p.evaluate(o));\n        return c;\n    }\n\n    public static List transform(Collection c, Transformer t) {\n        List result = new ArrayList(c.size());\n        for (Iterator it = c.iterator(); it.hasNext();) {\n            result.add(t.transform(it.next()));\n        }\n        return result;\n    }\n\n    public static Map getIndexMap(List list) {\n        Map indexes = new HashMap();\n        int index = 0;\n        for (Iterator it = list.iterator(); it.hasNext();) {\n            indexes.put(it.next(), index++);\n        }\n        return indexes;\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Map bucket(Collection c, Transformer t) {\r\n    Map buckets = new HashMap();\r\n    for (Object value : c) {\r\n        Object key = t.transform(value);\r\n        List bucket = (List) buckets.get(key);\r\n        if (bucket == null) {\r\n            buckets.put(key, bucket = new LinkedList());\r\n        }\r\n        bucket.add(value);\r\n    }\r\n    return buckets;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CollectionUtils#bucket(Collection,Transformer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void reverse(Map source, Map target) {\r\n    for (Object key : source.keySet()) {\r\n        target.put(source.get(key), key);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CollectionUtils#reverse(Map,Map)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils#filter(Collection,Predicate)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Collection filter(Collection c, Predicate p) {\r\n    c.removeIf(o -> !p.evaluate(o));\r\n    return c;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CollectionUtils#filter(Collection,Predicate)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils#transform(Collection,Transformer)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static List transform(Collection c, Transformer t) {\r\n    List result = new ArrayList(c.size());\r\n    for (Iterator it = c.iterator(); it.hasNext(); ) {\r\n        result.add(t.transform(it.next()));\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CollectionUtils#transform(Collection,Transformer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils#getIndexMap(List)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Map getIndexMap(List list) {\r\n    Map indexes = new HashMap();\r\n    int index = 0;\r\n    for (Iterator it = list.iterator(); it.hasNext(); ) {\r\n        indexes.put(it.next(), index++);\r\n    }\r\n    return indexes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CollectionUtils#getIndexMap(List)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.Constants",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.Constants",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.Constants",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.core;\n\nimport org.springframework.asm.Type;\n\n/**\n * @author Juozas Baliuka <a href=\"mailto:baliuka@mwm.lt\">baliuka@mwm.lt</a>\n * @version $Id: Constants.java,v 1.21 2006/03/05 02:43:19 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic interface Constants extends org.springframework.asm.Opcodes {\n\n    /* Indicates the ASM API version that is used throughout cglib */\n    public static final int ASM_API = AsmApi.value();\n\n    public static final Class[] EMPTY_CLASS_ARRAY = {};\n    public static final Type[] TYPES_EMPTY = {};\n\n    public static final Signature SIG_STATIC =\n      TypeUtils.parseSignature(\"void <clinit>()\");\n\n    public static final Type TYPE_OBJECT_ARRAY = TypeUtils.parseType(\"Object[]\");\n    public static final Type TYPE_CLASS_ARRAY = TypeUtils.parseType(\"Class[]\");\n    public static final Type TYPE_STRING_ARRAY = TypeUtils.parseType(\"String[]\");\n\n    public static final Type TYPE_OBJECT = TypeUtils.parseType(\"Object\");\n    public static final Type TYPE_CLASS = TypeUtils.parseType(\"Class\");\n    public static final Type TYPE_CLASS_LOADER = TypeUtils.parseType(\"ClassLoader\");\n    public static final Type TYPE_CHARACTER = TypeUtils.parseType(\"Character\");\n    public static final Type TYPE_BOOLEAN = TypeUtils.parseType(\"Boolean\");\n    public static final Type TYPE_DOUBLE = TypeUtils.parseType(\"Double\");\n    public static final Type TYPE_FLOAT = TypeUtils.parseType(\"Float\");\n    public static final Type TYPE_LONG = TypeUtils.parseType(\"Long\");\n    public static final Type TYPE_INTEGER = TypeUtils.parseType(\"Integer\");\n    public static final Type TYPE_SHORT = TypeUtils.parseType(\"Short\");\n    public static final Type TYPE_BYTE = TypeUtils.parseType(\"Byte\");\n    public static final Type TYPE_NUMBER = TypeUtils.parseType(\"Number\");\n    public static final Type TYPE_STRING = TypeUtils.parseType(\"String\");\n    public static final Type TYPE_THROWABLE = TypeUtils.parseType(\"Throwable\");\n    public static final Type TYPE_BIG_INTEGER = TypeUtils.parseType(\"java.math.BigInteger\");\n    public static final Type TYPE_BIG_DECIMAL = TypeUtils.parseType(\"java.math.BigDecimal\");\n    public static final Type TYPE_STRING_BUFFER = TypeUtils.parseType(\"StringBuffer\");\n    public static final Type TYPE_RUNTIME_EXCEPTION = TypeUtils.parseType(\"RuntimeException\");\n    public static final Type TYPE_ERROR = TypeUtils.parseType(\"Error\");\n    public static final Type TYPE_SYSTEM = TypeUtils.parseType(\"System\");\n    public static final Type TYPE_SIGNATURE = TypeUtils.parseType(\"org.springframework.cglib.core.Signature\");\n    public static final Type TYPE_TYPE = Type.getType(Type.class);\n\n    public static final String CONSTRUCTOR_NAME = \"<init>\";\n    public static final String STATIC_NAME = \"<clinit>\";\n    public static final String SOURCE_FILE = \"<generated>\";\n    public static final String SUID_FIELD_NAME = \"serialVersionUID\";\n\n    public static final int PRIVATE_FINAL_STATIC = ACC_PRIVATE | ACC_FINAL | ACC_STATIC;\n\n    public static final int SWITCH_STYLE_TRIE = 0;\n    public static final int SWITCH_STYLE_HASH = 1;\n    public static final int SWITCH_STYLE_HASHONLY = 2;\n}\n",
    "tailType": "class_code"
  }
]