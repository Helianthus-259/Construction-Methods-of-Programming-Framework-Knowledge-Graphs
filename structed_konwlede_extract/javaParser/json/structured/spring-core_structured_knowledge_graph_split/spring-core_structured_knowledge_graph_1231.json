[
  {
    "head": "org.springframework.util.Assert#isNull(Object,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an object is {@code null}.\r\n * <pre class=\"code\">\r\n * Assert.isNull(value, () -&gt; \"The value '\" + value + \"' must be null\");\r\n * </pre>\r\n * @param object the object to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the object is not {@code null}\r\n * @since 5.0\r\n */\r\n@Contract(\"!null, _ -> fail\")\r\npublic static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {\r\n    if (object != null) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isNull(Object,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isNull(Object,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#notNull(Object,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an object is not {@code null}.\r\n * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\r\n * @param object the object to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the object is {@code null}\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notNull(@Nullable Object object, String message) {\r\n    if (object == null) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notNull(Object,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notNull(Object,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#notNull(Object,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an object is not {@code null}.\r\n * <pre class=\"code\">\r\n * Assert.notNull(entity.getId(),\r\n *     () -&gt; \"ID for entity \" + entity.getName() + \" must not be null\");\r\n * </pre>\r\n * @param object the object to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the object is {@code null}\r\n * @since 5.0\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {\r\n    if (object == null) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notNull(Object,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notNull(Object,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#hasLength(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given String is not empty; that is,\r\n * it must not be {@code null} and not the empty String.\r\n * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\r\n * @param text the String to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the text is empty\r\n * @see StringUtils#hasLength\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void hasLength(@Nullable String text, String message) {\r\n    if (!StringUtils.hasLength(text)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#hasLength(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#hasLength(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#hasLength(String,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given String is not empty; that is,\r\n * it must not be {@code null} and not the empty String.\r\n * <pre class=\"code\">\r\n * Assert.hasLength(account.getName(),\r\n *     () -&gt; \"Name for account '\" + account.getId() + \"' must not be empty\");\r\n * </pre>\r\n * @param text the String to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the text is empty\r\n * @since 5.0\r\n * @see StringUtils#hasLength\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {\r\n    if (!StringUtils.hasLength(text)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#hasLength(String,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#hasLength(String,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#hasText(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given String contains valid text content; that is, it must not\r\n * be {@code null} and must contain at least one non-whitespace character.\r\n * <pre class=\"code\">Assert.hasText(name, \"'name' must not be empty\");</pre>\r\n * @param text the String to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the text does not contain valid text content\r\n * @see StringUtils#hasText\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void hasText(@Nullable String text, String message) {\r\n    if (!StringUtils.hasText(text)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#hasText(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#hasText(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#hasText(String,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given String contains valid text content; that is, it must not\r\n * be {@code null} and must contain at least one non-whitespace character.\r\n * <pre class=\"code\">\r\n * Assert.hasText(account.getName(),\r\n *     () -&gt; \"Name for account '\" + account.getId() + \"' must not be empty\");\r\n * </pre>\r\n * @param text the String to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the text does not contain valid text content\r\n * @since 5.0\r\n * @see StringUtils#hasText\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void hasText(@Nullable String text, Supplier<String> messageSupplier) {\r\n    if (!StringUtils.hasText(text)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#hasText(String,Supplier<String>)",
    "tailType": "method"
  }
]