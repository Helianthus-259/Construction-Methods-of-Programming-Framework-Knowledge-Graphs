[
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.NullSafeComparatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link NullSafeComparator}.\n *\n * @author Keith Donald\n * @author Chris Beams\n * @author Phillip Webb\n */\n@Deprecated\nclass NullSafeComparatorTests {\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid shouldCompareWithNullsLow() {\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tComparator<String> c = NullSafeComparator.NULLS_LOW;\n\n\t\tassertThat(c.compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(c.compare(null, null)).isZero();\n\t\tassertThat(c.compare(null, \"boo\")).isNegative();\n\t\tassertThat(c.compare(\"boo\", null)).isPositive();\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid shouldCompareWithNullsHigh() {\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tComparator<String> c = NullSafeComparator.NULLS_HIGH;\n\n\t\tassertThat(c.compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(c.compare(null, null)).isZero();\n\t\tassertThat(c.compare(null, \"boo\")).isPositive();\n\t\tassertThat(c.compare(\"boo\", null)).isNegative();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsLow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid shouldCompareWithNullsLow() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    Comparator<String> c = NullSafeComparator.NULLS_LOW;\r\n    assertThat(c.compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(c.compare(null, null)).isZero();\r\n    assertThat(c.compare(null, \"boo\")).isNegative();\r\n    assertThat(c.compare(\"boo\", null)).isPositive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsLow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsLow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsLow()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsHigh()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid shouldCompareWithNullsHigh() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    Comparator<String> c = NullSafeComparator.NULLS_HIGH;\r\n    assertThat(c.compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(c.compare(null, null)).isZero();\r\n    assertThat(c.compare(null, \"boo\")).isPositive();\r\n    assertThat(c.compare(\"boo\", null)).isNegative();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsHigh()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsHigh()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparatorTests#shouldCompareWithNullsHigh()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ProxyHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\n/**\n * Gather the need for using proxies at runtime.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic class ProxyHints {\n\n\tprivate final Set<JdkProxyHint> jdkProxies = new LinkedHashSet<>();\n\n\n\t/**\n\t * Return the interface-based proxies that are required.\n\t * @return a stream of {@link JdkProxyHint}\n\t */\n\tpublic Stream<JdkProxyHint> jdkProxyHints() {\n\t\treturn this.jdkProxies.stream();\n\t}\n\n\t/**\n\t * Register a {@link JdkProxyHint}.\n\t * @param jdkProxyHint the consumer of the hint builder\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ProxyHints registerJdkProxy(Consumer<JdkProxyHint.Builder> jdkProxyHint) {\n\t\tJdkProxyHint.Builder builder = new JdkProxyHint.Builder();\n\t\tjdkProxyHint.accept(builder);\n\t\tthis.jdkProxies.add(builder.build());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register that a JDK proxy implementing the interfaces defined by the\n\t * specified {@linkplain TypeReference type references} is required.\n\t * @param proxiedInterfaces the type references for the interfaces the proxy\n\t * should implement\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ProxyHints registerJdkProxy(TypeReference... proxiedInterfaces) {\n\t\treturn registerJdkProxy(jdkProxyHint ->\n\t\t\t\tjdkProxyHint.proxiedInterfaces(proxiedInterfaces));\n\t}\n\n\t/**\n\t * Register that a JDK proxy implementing the specified interfaces is\n\t * required.\n\t * <p>When registering a JDK proxy for Spring AOP, consider using\n\t * {@link org.springframework.aop.framework.AopProxyUtils#completeJdkProxyInterfaces(Class...)\n\t * AopProxyUtils.completeJdkProxyInterfaces()} for convenience.\n\t * @param proxiedInterfaces the interfaces the proxy should implement\n\t * @return {@code this}, to facilitate method chaining\n\t */\n\tpublic ProxyHints registerJdkProxy(Class<?>... proxiedInterfaces) {\n\t\treturn registerJdkProxy(jdkProxyHint ->\n\t\t\t\tjdkProxyHint.proxiedInterfaces(proxiedInterfaces));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ProxyHints#jdkProxies",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints#jdkProxies",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<JdkProxyHint>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints#jdkProxyHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the interface-based proxies that are required.\r\n * @return a stream of {@link JdkProxyHint}\r\n */\r\npublic Stream<JdkProxyHint> jdkProxyHints() {\r\n    return this.jdkProxies.stream();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHints#jdkProxyHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(Consumer<JdkProxyHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register a {@link JdkProxyHint}.\r\n * @param jdkProxyHint the consumer of the hint builder\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ProxyHints registerJdkProxy(Consumer<JdkProxyHint.Builder> jdkProxyHint) {\r\n    JdkProxyHint.Builder builder = new JdkProxyHint.Builder();\r\n    jdkProxyHint.accept(builder);\r\n    this.jdkProxies.add(builder.build());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(Consumer<JdkProxyHint.Builder>)",
    "tailType": "method"
  }
]