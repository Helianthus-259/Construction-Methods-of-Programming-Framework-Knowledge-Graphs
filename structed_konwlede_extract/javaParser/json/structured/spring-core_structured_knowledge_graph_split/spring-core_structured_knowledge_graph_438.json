[
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitMethodInsn(int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitMethodInsn(int,String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitMethodInsn(int,String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a method instruction. A method instruction is an instruction that invokes a method.\r\n *\r\n * @param opcode the opcode of the type instruction to be visited. This opcode is either\r\n *     INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\r\n * @param owner the internal name of the method's owner class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the method's name.\r\n * @param descriptor the method's descriptor (see {@link Type}).\r\n * @param isInterface if the method's owner class is an interface.\r\n */\r\npublic void visitMethodInsn(final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    if (api < Opcodes.ASM5 && (opcode & Opcodes.SOURCE_DEPRECATED) == 0) {\r\n        if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) {\r\n            throw new UnsupportedOperationException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\");\r\n        }\r\n        visitMethodInsn(opcode, owner, name, descriptor);\r\n        return;\r\n    }\r\n    if (mv != null) {\r\n        mv.visitMethodInsn(opcode & ~Opcodes.SOURCE_MASK, owner, name, descriptor, isInterface);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitMethodInsn(int,String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an invokedynamic instruction.\r\n *\r\n * @param name the method's name.\r\n * @param descriptor the method's descriptor (see {@link Type}).\r\n * @param bootstrapMethodHandle the bootstrap method.\r\n * @param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\r\n *     an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\r\n *     Type}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\r\n *     the content of the array so a caller should expect that this array may change.\r\n */\r\npublic void visitInvokeDynamicInsn(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(REQUIRES_ASM5);\r\n    }\r\n    if (mv != null) {\r\n        mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitJumpInsn(int,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a jump instruction. A jump instruction is an instruction that may jump to another\r\n * instruction.\r\n *\r\n * @param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\r\n *     IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\r\n *     IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\r\n * @param label the operand of the instruction to be visited. This operand is a label that\r\n *     designates the instruction to which the jump instruction may jump.\r\n */\r\npublic void visitJumpInsn(final int opcode, final Label label) {\r\n    if (mv != null) {\r\n        mv.visitJumpInsn(opcode, label);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitJumpInsn(int,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLabel(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a label. A label designates the instruction that will be visited just after it.\r\n *\r\n * @param label a {@link Label} object.\r\n */\r\npublic void visitLabel(final Label label) {\r\n    if (mv != null) {\r\n        mv.visitLabel(label);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLabel(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLdcInsn(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Special instructions\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Visits a LDC instruction. Note that new constant types may be added in future versions of the\r\n * Java Virtual Machine. To easily detect new constant types, implementations of this method\r\n * should check for unexpected constant types, like this:\r\n *\r\n * <pre>\r\n * if (cst instanceof Integer) {\r\n *     // ...\r\n * } else if (cst instanceof Float) {\r\n *     // ...\r\n * } else if (cst instanceof Long) {\r\n *     // ...\r\n * } else if (cst instanceof Double) {\r\n *     // ...\r\n * } else if (cst instanceof String) {\r\n *     // ...\r\n * } else if (cst instanceof Type) {\r\n *     int sort = ((Type) cst).getSort();\r\n *     if (sort == Type.OBJECT) {\r\n *         // ...\r\n *     } else if (sort == Type.ARRAY) {\r\n *         // ...\r\n *     } else if (sort == Type.METHOD) {\r\n *         // ...\r\n *     } else {\r\n *         // throw an exception\r\n *     }\r\n * } else if (cst instanceof Handle) {\r\n *     // ...\r\n * } else if (cst instanceof ConstantDynamic) {\r\n *     // ...\r\n * } else {\r\n *     // throw an exception\r\n * }\r\n * </pre>\r\n *\r\n * @param value the constant to be loaded on the stack. This parameter must be a non null {@link\r\n *     Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link\r\n *     Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is\r\n *     49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle\r\n *     constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant\r\n *     dynamic for classes whose version is 55.\r\n */\r\npublic void visitLdcInsn(final Object value) {\r\n    if (api < Opcodes.ASM5 && (value instanceof Handle || (value instanceof Type && ((Type) value).getSort() == Type.METHOD))) {\r\n        throw new UnsupportedOperationException(REQUIRES_ASM5);\r\n    }\r\n    if (api < Opcodes.ASM7 && value instanceof ConstantDynamic) {\r\n        throw new UnsupportedOperationException(\"This feature requires ASM7\");\r\n    }\r\n    if (mv != null) {\r\n        mv.visitLdcInsn(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLdcInsn(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitIincInsn(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an IINC instruction.\r\n *\r\n * @param varIndex index of the local variable to be incremented.\r\n * @param increment amount to increment the local variable by.\r\n */\r\npublic void visitIincInsn(final int varIndex, final int increment) {\r\n    if (mv != null) {\r\n        mv.visitIincInsn(varIndex, increment);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitIincInsn(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitTableSwitchInsn(int,int,Label,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a TABLESWITCH instruction.\r\n *\r\n * @param min the minimum key value.\r\n * @param max the maximum key value.\r\n * @param dflt beginning of the default handler block.\r\n * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\r\n *     handler block for the {@code min + i} key.\r\n */\r\npublic void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label... labels) {\r\n    if (mv != null) {\r\n        mv.visitTableSwitchInsn(min, max, dflt, labels);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitTableSwitchInsn(int,int,Label,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitLookupSwitchInsn(Label,int[],Label[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a LOOKUPSWITCH instruction.\r\n *\r\n * @param dflt beginning of the default handler block.\r\n * @param keys the values of the keys.\r\n * @param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the\r\n *     handler block for the {@code keys[i]} key.\r\n */\r\npublic void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {\r\n    if (mv != null) {\r\n        mv.visitLookupSwitchInsn(dflt, keys, labels);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitLookupSwitchInsn(Label,int[],Label[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodVisitor#visitMultiANewArrayInsn(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a MULTIANEWARRAY instruction.\r\n *\r\n * @param descriptor an array type descriptor (see {@link Type}).\r\n * @param numDimensions the number of dimensions of the array to allocate.\r\n */\r\npublic void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {\r\n    if (mv != null) {\r\n        mv.visitMultiANewArrayInsn(descriptor, numDimensions);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodVisitor#visitMultiANewArrayInsn(String,int)",
    "tailType": "method"
  }
]