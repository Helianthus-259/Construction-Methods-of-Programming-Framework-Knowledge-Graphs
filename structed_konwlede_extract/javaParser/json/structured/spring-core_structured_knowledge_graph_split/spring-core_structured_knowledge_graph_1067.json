[
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#propertySourceNames",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#propertySourceNames",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#processPropertySource(PropertySourceDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Process the specified {@link PropertySourceDescriptor} against the\r\n * environment managed by this instance.\r\n * @param descriptor the descriptor to process\r\n * @throws IOException if loading the properties failed\r\n */\r\npublic void processPropertySource(PropertySourceDescriptor descriptor) throws IOException {\r\n    String name = descriptor.name();\r\n    String encoding = descriptor.encoding();\r\n    List<String> locations = descriptor.locations();\r\n    Assert.isTrue(locations.size() > 0, \"At least one @PropertySource(value) location is required\");\r\n    boolean ignoreResourceNotFound = descriptor.ignoreResourceNotFound();\r\n    PropertySourceFactory factory = (descriptor.propertySourceFactory() != null ? instantiateClass(descriptor.propertySourceFactory()) : defaultPropertySourceFactory);\r\n    for (String location : locations) {\r\n        try {\r\n            String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);\r\n            for (Resource resource : this.resourcePatternResolver.getResources(resolvedLocation)) {\r\n                addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));\r\n            }\r\n        } catch (RuntimeException | IOException ex) {\r\n            // Placeholders not resolvable or resource not found when trying to open it\r\n            if (ignoreResourceNotFound && (ex instanceof PlaceholderResolutionException || isIgnorableException(ex) || isIgnorableException(ex.getCause()))) {\r\n                if (logger.isInfoEnabled()) {\r\n                    logger.info(\"Properties location [\" + location + \"] not resolvable: \" + ex.getMessage());\r\n                }\r\n            } else {\r\n                throw ex;\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#processPropertySource(PropertySourceDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#addPropertySource(PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addPropertySource(PropertySource<?> propertySource) {\r\n    String name = propertySource.getName();\r\n    MutablePropertySources propertySources = this.environment.getPropertySources();\r\n    if (this.propertySourceNames.contains(name)) {\r\n        // We've already added a version, we need to extend it\r\n        PropertySource<?> existing = propertySources.get(name);\r\n        if (existing != null) {\r\n            PropertySource<?> newSource = (propertySource instanceof ResourcePropertySource rps ? rps.withResourceName() : propertySource);\r\n            if (existing instanceof CompositePropertySource cps) {\r\n                cps.addFirstPropertySource(newSource);\r\n            } else {\r\n                if (existing instanceof ResourcePropertySource rps) {\r\n                    existing = rps.withResourceName();\r\n                }\r\n                CompositePropertySource composite = new CompositePropertySource(name);\r\n                composite.addPropertySource(newSource);\r\n                composite.addPropertySource(existing);\r\n                propertySources.replace(name, composite);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    if (this.propertySourceNames.isEmpty()) {\r\n        propertySources.addLast(propertySource);\r\n    } else {\r\n        String lastAdded = this.propertySourceNames.get(this.propertySourceNames.size() - 1);\r\n        propertySources.addBefore(lastAdded, propertySource);\r\n    }\r\n    this.propertySourceNames.add(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#addPropertySource(PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#instantiateClass(Class<? extends PropertySourceFactory>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static PropertySourceFactory instantiateClass(Class<? extends PropertySourceFactory> type) {\r\n    try {\r\n        Constructor<? extends PropertySourceFactory> constructor = type.getDeclaredConstructor();\r\n        ReflectionUtils.makeAccessible(constructor);\r\n        return constructor.newInstance();\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(\"Failed to instantiate \" + type, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#instantiateClass(Class<? extends PropertySourceFactory>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor#isIgnorableException(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if the supplied exception can be ignored according to\r\n * {@code ignoreResourceNotFound} semantics.\r\n */\r\nprivate static boolean isIgnorableException(@Nullable Throwable ex) {\r\n    return (ex instanceof FileNotFoundException || ex instanceof UnknownHostException || ex instanceof SocketException);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessor#isIgnorableException(Throwable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.beans.PropertyEditorSupport;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.PropertyResolver;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Editor for {@link org.springframework.core.io.Resource} arrays, to\n * automatically convert {@code String} location patterns\n * (for example, {@code \"file:C:/my*.txt\"} or {@code \"classpath*:myfile.txt\"})\n * to {@code Resource} array properties. Can also translate a collection\n * or array of location patterns into a merged Resource array.\n *\n * <p>A path may contain {@code ${...}} placeholders, to be\n * resolved as {@link org.springframework.core.env.Environment} properties:\n * for example, {@code ${user.dir}}. Unresolvable placeholders are ignored by default.\n *\n * <p>Delegates to a {@link ResourcePatternResolver},\n * by default using a {@link PathMatchingResourcePatternResolver}.\n *\n * @author Juergen Hoeller\n * @author Chris Beams\n * @author Yanming Zhou\n * @author Stephane Nicoll\n * @since 1.1.2\n * @see org.springframework.core.io.Resource\n * @see ResourcePatternResolver\n * @see PathMatchingResourcePatternResolver\n */\npublic class ResourceArrayPropertyEditor extends PropertyEditorSupport {\n\n\tprivate static final Log logger = LogFactory.getLog(ResourceArrayPropertyEditor.class);\n\n\tprivate final ResourcePatternResolver resourcePatternResolver;\n\n\tprivate @Nullable PropertyResolver propertyResolver;\n\n\tprivate final boolean ignoreUnresolvablePlaceholders;\n\n\n\t/**\n\t * Create a new ResourceArrayPropertyEditor with a default\n\t * {@link PathMatchingResourcePatternResolver} and {@link StandardEnvironment}.\n\t * @see PathMatchingResourcePatternResolver\n\t * @see Environment\n\t */\n\tpublic ResourceArrayPropertyEditor() {\n\t\tthis(new PathMatchingResourcePatternResolver(), null, true);\n\t}\n\n\t/**\n\t * Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver}\n\t * and {@link PropertyResolver} (typically an {@link Environment}).\n\t * @param resourcePatternResolver the ResourcePatternResolver to use\n\t * @param propertyResolver the PropertyResolver to use\n\t */\n\tpublic ResourceArrayPropertyEditor(\n\t\t\tResourcePatternResolver resourcePatternResolver, @Nullable PropertyResolver propertyResolver) {\n\n\t\tthis(resourcePatternResolver, propertyResolver, true);\n\t}\n\n\t/**\n\t * Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver}\n\t * and {@link PropertyResolver} (typically an {@link Environment}).\n\t * @param resourcePatternResolver the ResourcePatternResolver to use\n\t * @param propertyResolver the PropertyResolver to use\n\t * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders\n\t * if no corresponding system property could be found\n\t */\n\tpublic ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver,\n\t\t\t@Nullable PropertyResolver propertyResolver, boolean ignoreUnresolvablePlaceholders) {\n\n\t\tAssert.notNull(resourcePatternResolver, \"ResourcePatternResolver must not be null\");\n\t\tthis.resourcePatternResolver = resourcePatternResolver;\n\t\tthis.propertyResolver = propertyResolver;\n\t\tthis.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;\n\t}\n\n\n\t/**\n\t * Treat the given text as a location pattern or comma delimited location patterns\n\t * and convert it to a Resource array.\n\t */\n\t@Override\n\tpublic void setAsText(String text) {\n\t\tString pattern = resolvePath(text).trim();\n\t\tString[] locationPatterns = StringUtils.commaDelimitedListToStringArray(pattern);\n\t\tif (locationPatterns.length == 1) {\n\t\t\tsetValue(getResources(locationPatterns[0]));\n\t\t}\n\t\telse {\n\t\t\tResource[] resources = Arrays.stream(locationPatterns).map(String::trim)\n\t\t\t\t\t.map(this::getResources).flatMap(Arrays::stream).toArray(Resource[]::new);\n\t\t\tsetValue(resources);\n\t\t}\n\t}\n\n\tprivate Resource[] getResources(String locationPattern) {\n\t\ttry {\n\t\t\treturn this.resourcePatternResolver.getResources(locationPattern);\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Could not resolve resource location pattern [\" + locationPattern + \"]: \" + ex.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Treat the given value as a collection or array and convert it to a Resource array.\n\t * <p>Considers String elements as location patterns and takes Resource elements as-is.\n\t */\n\t@Override\n\tpublic void setValue(Object value) throws IllegalArgumentException {\n\t\tif (value instanceof Collection || (value instanceof Object[] && !(value instanceof Resource[]))) {\n\t\t\tCollection<?> input = (value instanceof Collection<?> collection ? collection : Arrays.asList((Object[]) value));\n\t\t\tSet<Resource> merged = new LinkedHashSet<>();\n\t\t\tfor (Object element : input) {\n\t\t\t\tif (element instanceof String path) {\n\t\t\t\t\t// A location pattern: resolve it into a Resource array.\n\t\t\t\t\t// Might point to a single resource or to multiple resources.\n\t\t\t\t\tString pattern = resolvePath(path.trim());\n\t\t\t\t\ttry {\n\t\t\t\t\t\tResource[] resources = this.resourcePatternResolver.getResources(pattern);\n\t\t\t\t\t\tCollections.addAll(merged, resources);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t\t// ignore - might be an unresolved placeholder or non-existing base directory\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Could not retrieve resources for pattern '\" + pattern + \"'\", ex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (element instanceof Resource resource) {\n\t\t\t\t\t// A Resource object: add it to the result.\n\t\t\t\t\tmerged.add(resource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Cannot convert element [\" + element + \"] to [\" +\n\t\t\t\t\t\t\tResource.class.getName() + \"]: only location String and Resource object supported\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuper.setValue(merged.toArray(new Resource[0]));\n\t\t}\n\n\t\telse {\n\t\t\t// An arbitrary value: probably a String or a Resource array.\n\t\t\t// setAsText will be called for a String; a Resource array will be used as-is.\n\t\t\tsuper.setValue(value);\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the given path, replacing placeholders with\n\t * corresponding system property values if necessary.\n\t * @param path the original file path\n\t * @return the resolved file path\n\t * @see PropertyResolver#resolvePlaceholders\n\t * @see PropertyResolver#resolveRequiredPlaceholders(String)\n\t */\n\tprotected String resolvePath(String path) {\n\t\tif (this.propertyResolver == null) {\n\t\t\tthis.propertyResolver = new StandardEnvironment();\n\t\t}\n\t\treturn (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) :\n\t\t\t\tthis.propertyResolver.resolveRequiredPlaceholders(path));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#resourcePatternResolver",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#resourcePatternResolver",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourcePatternResolver",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#propertyResolver",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#propertyResolver",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertyResolver",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#ignoreUnresolvablePlaceholders",
    "tailType": "field"
  }
]