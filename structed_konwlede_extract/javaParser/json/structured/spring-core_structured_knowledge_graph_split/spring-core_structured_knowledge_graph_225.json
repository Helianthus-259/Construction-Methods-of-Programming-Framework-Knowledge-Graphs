[
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#RESOURCE_LOCATIONS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#RESOURCE_LOCATIONS",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\r\n    ClassLoader classLoaderToUse = (classLoader != null ? classLoader : SpringFactoriesLoaderRuntimeHints.class.getClassLoader());\r\n    for (String resourceLocation : RESOURCE_LOCATIONS) {\r\n        registerHints(hints, classLoaderToUse, resourceLocation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void registerHints(RuntimeHints hints, ClassLoader classLoader, String resourceLocation) {\r\n    hints.resources().registerPattern(resourceLocation);\r\n    Map<String, List<String>> factories = ExtendedSpringFactoriesLoader.accessLoadFactoriesResource(classLoader, resourceLocation);\r\n    factories.forEach((factoryClassName, implementationClassNames) -> registerHints(hints, classLoader, factoryClassName, implementationClassNames));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader,String,List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void registerHints(RuntimeHints hints, ClassLoader classLoader, String factoryClassName, List<String> implementationClassNames) {\r\n    Class<?> factoryClass = resolveClassName(classLoader, factoryClassName);\r\n    if (factoryClass == null) {\r\n        if (logger.isTraceEnabled()) {\r\n            logger.trace(LogMessage.format(\"Skipping factories for [%s]\", factoryClassName));\r\n        }\r\n        return;\r\n    }\r\n    if (logger.isTraceEnabled()) {\r\n        logger.trace(LogMessage.format(\"Processing factories for [%s]\", factoryClassName));\r\n    }\r\n    hints.reflection().registerType(factoryClass, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n    for (String implementationClassName : implementationClassNames) {\r\n        Class<?> implementationType = resolveClassName(classLoader, implementationClassName);\r\n        if (logger.isTraceEnabled()) {\r\n            logger.trace(LogMessage.format(\"%s factory type [%s] and implementation [%s]\", (implementationType != null ? \"Processing\" : \"Skipping\"), factoryClassName, implementationClassName));\r\n        }\r\n        if (implementationType != null) {\r\n            hints.reflection().registerType(implementationType, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#registerHints(RuntimeHints,ClassLoader,String,List<String>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#resolveClassName(ClassLoader,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Class<?> resolveClassName(ClassLoader classLoader, String factoryClassName) {\r\n    try {\r\n        Class<?> clazz = ClassUtils.resolveClassName(factoryClassName, classLoader);\r\n        // Force resolution of all constructors to cache\r\n        clazz.getDeclaredConstructors();\r\n        return clazz;\r\n    } catch (Throwable ex) {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#resolveClassName(ClassLoader,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FilteredIteratorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringFactoriesLoaderRuntimeHints#resolveClassName(ClassLoader,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.core.log.LogMessage;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link RuntimeHintsRegistrar} to register hints for {@code spring.factories}.\n *\n * @author Brian Clozel\n * @author Phillip Webb\n * @since 6.0\n * @see SpringFactoriesLoader\n */\nclass SpringFactoriesLoaderRuntimeHints implements RuntimeHintsRegistrar {\n\n\tprivate static final List<String> RESOURCE_LOCATIONS =\n\t\t\tList.of(SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION);\n\n\tprivate static final Log logger = LogFactory.getLog(SpringFactoriesLoaderRuntimeHints.class);\n\n\n\t@Override\n\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\tClassLoader classLoaderToUse = (classLoader != null ? classLoader :\n\t\t\t\tSpringFactoriesLoaderRuntimeHints.class.getClassLoader());\n\t\tfor (String resourceLocation : RESOURCE_LOCATIONS) {\n\t\t\tregisterHints(hints, classLoaderToUse, resourceLocation);\n\t\t}\n\t}\n\n\tprivate void registerHints(RuntimeHints hints, ClassLoader classLoader, String resourceLocation) {\n\t\thints.resources().registerPattern(resourceLocation);\n\t\tMap<String, List<String>> factories =\n\t\t\t\tExtendedSpringFactoriesLoader.accessLoadFactoriesResource(classLoader, resourceLocation);\n\t\tfactories.forEach((factoryClassName, implementationClassNames) ->\n\t\t\t\tregisterHints(hints, classLoader, factoryClassName, implementationClassNames));\n\t}\n\n\tprivate void registerHints(RuntimeHints hints, ClassLoader classLoader,\n\t\t\tString factoryClassName, List<String> implementationClassNames) {\n\n\t\tClass<?> factoryClass = resolveClassName(classLoader, factoryClassName);\n\t\tif (factoryClass == null) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.format(\"Skipping factories for [%s]\", factoryClassName));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(LogMessage.format(\"Processing factories for [%s]\", factoryClassName));\n\t\t}\n\t\thints.reflection().registerType(factoryClass, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\tfor (String implementationClassName : implementationClassNames) {\n\t\t\tClass<?> implementationType = resolveClassName(classLoader, implementationClassName);\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(LogMessage.format(\"%s factory type [%s] and implementation [%s]\",\n\t\t\t\t\t\t(implementationType != null ? \"Processing\" : \"Skipping\"), factoryClassName,\n\t\t\t\t\t\timplementationClassName));\n\t\t\t}\n\t\t\tif (implementationType != null) {\n\t\t\t\thints.reflection().registerType(implementationType, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate @Nullable Class<?> resolveClassName(ClassLoader classLoader, String factoryClassName) {\n\t\ttry {\n\t\t\tClass<?> clazz = ClassUtils.resolveClassName(factoryClassName, classLoader);\n\t\t\t// Force resolution of all constructors to cache\n\t\t\tclazz.getDeclaredConstructors();\n\t\t\treturn clazz;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\tprivate static class ExtendedSpringFactoriesLoader extends SpringFactoriesLoader {\n\n\t\tExtendedSpringFactoriesLoader(@Nullable ClassLoader classLoader, Map<String, List<String>> factories) {\n\t\t\tsuper(classLoader, factories);\n\t\t}\n\n\t\tstatic Map<String, List<String>> accessLoadFactoriesResource(ClassLoader classLoader, String resourceLocation) {\n\t\t\treturn SpringFactoriesLoader.loadFactoriesResource(classLoader, resourceLocation);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader#accessLoadFactoriesResource(ClassLoader,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "static Map<String, List<String>> accessLoadFactoriesResource(ClassLoader classLoader, String resourceLocation) {\r\n    return SpringFactoriesLoader.loadFactoriesResource(classLoader, resourceLocation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader#accessLoadFactoriesResource(ClassLoader,String)",
    "tailType": "method"
  }
]