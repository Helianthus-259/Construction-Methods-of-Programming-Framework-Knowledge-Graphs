[
  {
    "head": "org.springframework.util.comparator.ComparableComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.ComparableComparator#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "ComparableComparator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator#compare(T,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(T o1, T o2) {\r\n    return o1.compareTo(o2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparableComparator#compare(T,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator#compare(T,T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.Comparators",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\n/**\n * Convenient entry point with generically typed factory methods\n * for common Spring {@link Comparator} variants.\n *\n * @author Juergen Hoeller\n * @since 5.0\n */\npublic abstract class Comparators {\n\n\t/**\n\t * Return a {@link Comparable} adapter.\n\t * @see Comparator#naturalOrder()\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> Comparator<T> comparable() {\n\t\treturn (Comparator<T>) Comparator.naturalOrder();\n\t}\n\n\t/**\n\t * Return a {@link Comparable} adapter which accepts\n\t * null values and sorts them lower than non-null values.\n\t * @see Comparator#nullsFirst(Comparator)\n\t */\n\tpublic static <T> Comparator<T> nullsLow() {\n\t\treturn nullsLow(comparable());\n\t}\n\n\t/**\n\t * Return a decorator for the given comparator which accepts\n\t * null values and sorts them lower than non-null values.\n\t * @see Comparator#nullsFirst(Comparator)\n\t */\n\tpublic static <T> Comparator<T> nullsLow(Comparator<T> comparator) {\n\t\treturn Comparator.nullsFirst(comparator);\n\t}\n\n\t/**\n\t * Return a {@link Comparable} adapter which accepts\n\t * null values and sorts them higher than non-null values.\n\t * @see Comparator#nullsLast(Comparator)\n\t */\n\tpublic static <T> Comparator<T> nullsHigh() {\n\t\treturn nullsHigh(comparable());\n\t}\n\n\t/**\n\t * Return a decorator for the given comparator which accepts\n\t * null values and sorts them higher than non-null values.\n\t * @see Comparator#nullsLast(Comparator)\n\t */\n\tpublic static <T> Comparator<T> nullsHigh(Comparator<T> comparator) {\n\t\treturn Comparator.nullsLast(comparator);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#comparable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link Comparable} adapter.\r\n * @see Comparator#naturalOrder()\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <T> Comparator<T> comparable() {\r\n    return (Comparator<T>) Comparator.naturalOrder();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.Comparators#comparable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#comparable()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#nullsLow()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link Comparable} adapter which accepts\r\n * null values and sorts them lower than non-null values.\r\n * @see Comparator#nullsFirst(Comparator)\r\n */\r\npublic static <T> Comparator<T> nullsLow() {\r\n    return nullsLow(comparable());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.Comparators#nullsLow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#nullsLow(Comparator<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a decorator for the given comparator which accepts\r\n * null values and sorts them lower than non-null values.\r\n * @see Comparator#nullsFirst(Comparator)\r\n */\r\npublic static <T> Comparator<T> nullsLow(Comparator<T> comparator) {\r\n    return Comparator.nullsFirst(comparator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.Comparators#nullsLow(Comparator<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#nullsHigh()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link Comparable} adapter which accepts\r\n * null values and sorts them higher than non-null values.\r\n * @see Comparator#nullsLast(Comparator)\r\n */\r\npublic static <T> Comparator<T> nullsHigh() {\r\n    return nullsHigh(comparable());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.Comparators#nullsHigh()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.Comparators#nullsHigh(Comparator<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a decorator for the given comparator which accepts\r\n * null values and sorts them higher than non-null values.\r\n * @see Comparator#nullsLast(Comparator)\r\n */\r\npublic static <T> Comparator<T> nullsHigh(Comparator<T> comparator) {\r\n    return Comparator.nullsLast(comparator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.Comparators",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.Comparators#nullsHigh(Comparator<T>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  }
]