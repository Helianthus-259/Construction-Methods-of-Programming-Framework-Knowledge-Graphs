[
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHintsTests#kotlinReflectHasHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport java.net.URI;\nimport java.time.LocalDate;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ObjectToObjectConverterRuntimeHints}.\n *\n * @author Sebastien Deleuze\n */\nclass ObjectToObjectConverterRuntimeHintsTests {\n\n\tprivate RuntimeHints hints;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.hints = new RuntimeHints();\n\t\tSpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\")\n\t\t\t\t.load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar\n\t\t\t\t\t\t.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\n\t}\n\n\t@Test\n\tvoid javaSqlDateHasHints() throws NoSuchMethodException {\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(java.sql.Date.class, \"toLocalDate\")).accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(java.sql.Date.class.getMethod(\"valueOf\", LocalDate.class))).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid uriHasHints() throws NoSuchMethodException {\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(URI.class)).accepts(this.hints);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#hints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#hints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid setup() {\r\n    this.hints = new RuntimeHints();\r\n    SpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\").load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaSqlDateHasHints() throws NoSuchMethodException {\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(java.sql.Date.class, \"toLocalDate\")).accepts(this.hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(java.sql.Date.class.getMethod(\"valueOf\", LocalDate.class))).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#javaSqlDateHasHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#uriHasHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid uriHasHints() throws NoSuchMethodException {\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(URI.class)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#uriHasHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHintsTests#uriHasHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\nimport org.springframework.util.ClassUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link PathMatchingResourcePatternResolverRuntimeHints}.\n *\n * @author Brian Clozel\n */\nclass PathMatchingResourcePatternResolverRuntimeHintsTests {\n\n\tprivate RuntimeHints hints;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tthis.hints = new RuntimeHints();\n\t\tSpringFactoriesLoader.forResourceLocation(\"META-INF/spring/aot.factories\")\n\t\t\t\t.load(RuntimeHintsRegistrar.class).forEach(registrar -> registrar\n\t\t\t\t\t\t.registerHints(this.hints, ClassUtils.getDefaultClassLoader()));\n\t}\n\n\t@Test\n\tvoid EclipseOsgiFileLocatorHasHints() {\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(TypeReference.of(\"org.eclipse.core.runtime.FileLocator\"))).accepts(this.hints);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.support.PathMatchingResourcePatternResolverRuntimeHintsTests#hints",
    "tailType": "field"
  }
]