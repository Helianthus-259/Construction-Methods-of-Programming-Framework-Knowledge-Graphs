[
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotationTests#asMapWithFactoryReturnsNewMapFromFactory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid asMapWithFactoryReturnsNewMapFromFactory() {\r\n    Map<String, Object> map = this.missing.asMap(annotation -> new ConcurrentReferenceHashMap<>());\r\n    assertThat(map).isInstanceOf(ConcurrentReferenceHashMap.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotationTests#asMapWithFactoryReturnsNewMapFromFactory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotationTests#asMapWithFactoryReturnsNewMapFromFactory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotationTests#assertThatNoSuchElementException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private static ThrowableTypeAssert<NoSuchElementException> assertThatNoSuchElementException() {\r\n    return assertThatExceptionOfType(NoSuchElementException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotationTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotationTests#assertThatNoSuchElementException()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Method;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.findAllMergedAnnotations;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.getAllMergedAnnotations;\n\n/**\n * Unit tests that verify support for finding multiple composed annotations on\n * a single annotated element.\n *\n * <p>See <a href=\"https://jira.spring.io/browse/SPR-13486\">SPR-13486</a>.\n *\n * @author Sam Brannen\n * @since 4.3\n * @see AnnotatedElementUtils\n * @see AnnotatedElementUtilsTests\n * @see ComposedRepeatableAnnotationsTests\n */\nclass MultipleComposedAnnotationsOnSingleAnnotatedElementTests {\n\n\t@Test\n\tvoid getMultipleComposedAnnotationsOnClass() {\n\t\tassertGetAllMergedAnnotationsBehavior(MultipleComposedCachesClass.class);\n\t}\n\n\t@Test\n\tvoid getMultipleInheritedComposedAnnotationsOnSuperclass() {\n\t\tassertGetAllMergedAnnotationsBehavior(SubMultipleComposedCachesClass.class);\n\t}\n\n\t@Test\n\tvoid getMultipleNoninheritedComposedAnnotationsOnClass() {\n\t\tClass<?> element = MultipleNoninheritedComposedCachesClass.class;\n\t\tSet<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).hasSize(2);\n\n\t\tIterator<Cacheable> iterator = cacheables.iterator();\n\t\tCacheable cacheable1 = iterator.next();\n\t\tCacheable cacheable2 = iterator.next();\n\t\tassertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\n\t\tassertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\n\t}\n\n\t@Test\n\tvoid getMultipleNoninheritedComposedAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubMultipleNoninheritedComposedCachesClass.class;\n\t\tSet<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).isEmpty();\n\t}\n\n\t@Test\n\tvoid getComposedPlusLocalAnnotationsOnClass() {\n\t\tassertGetAllMergedAnnotationsBehavior(ComposedPlusLocalCachesClass.class);\n\t}\n\n\t@Test\n\tvoid getMultipleComposedAnnotationsOnInterface() {\n\t\tClass<MultipleComposedCachesOnInterfaceClass> element = MultipleComposedCachesOnInterfaceClass.class;\n\t\tSet<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).isEmpty();\n\t}\n\n\t@Test\n\tvoid getMultipleComposedAnnotationsOnMethod() throws Exception {\n\t\tAnnotatedElement element = getClass().getDeclaredMethod(\"multipleComposedCachesMethod\");\n\t\tassertGetAllMergedAnnotationsBehavior(element);\n\t}\n\n\t@Test\n\tvoid getComposedPlusLocalAnnotationsOnMethod() throws Exception {\n\t\tAnnotatedElement element = getClass().getDeclaredMethod(\"composedPlusLocalCachesMethod\");\n\t\tassertGetAllMergedAnnotationsBehavior(element);\n\t}\n\n\t@Test\n\t@Disabled(\"Disabled since some Java 8 updates handle the bridge method differently\")\n\tvoid getMultipleComposedAnnotationsOnBridgeMethod() {\n\t\tSet<Cacheable> cacheables = getAllMergedAnnotations(getBridgeMethod(), Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).isEmpty();\n\t}\n\n\t@Test\n\tvoid findMultipleComposedAnnotationsOnClass() {\n\t\tassertFindAllMergedAnnotationsBehavior(MultipleComposedCachesClass.class);\n\t}\n\n\t@Test\n\tvoid findMultipleInheritedComposedAnnotationsOnSuperclass() {\n\t\tassertFindAllMergedAnnotationsBehavior(SubMultipleComposedCachesClass.class);\n\t}\n\n\t@Test\n\tvoid findMultipleNoninheritedComposedAnnotationsOnClass() {\n\t\tClass<?> element = MultipleNoninheritedComposedCachesClass.class;\n\t\tSet<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).hasSize(2);\n\n\t\tIterator<Cacheable> iterator = cacheables.iterator();\n\t\tCacheable cacheable1 = iterator.next();\n\t\tCacheable cacheable2 = iterator.next();\n\t\tassertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\n\t\tassertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\n\t}\n\n\t@Test\n\tvoid findMultipleNoninheritedComposedAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubMultipleNoninheritedComposedCachesClass.class;\n\t\tSet<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).hasSize(2);\n\n\t\tIterator<Cacheable> iterator = cacheables.iterator();\n\t\tCacheable cacheable1 = iterator.next();\n\t\tCacheable cacheable2 = iterator.next();\n\t\tassertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\n\t\tassertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\n\t}\n\n\t@Test\n\tvoid findComposedPlusLocalAnnotationsOnClass() {\n\t\tassertFindAllMergedAnnotationsBehavior(ComposedPlusLocalCachesClass.class);\n\t}\n\n\t@Test\n\tvoid findMultipleComposedAnnotationsOnInterface() {\n\t\tassertFindAllMergedAnnotationsBehavior(MultipleComposedCachesOnInterfaceClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedCacheOnInterfaceAndLocalCacheOnClass() {\n\t\tassertFindAllMergedAnnotationsBehavior(ComposedCacheOnInterfaceAndLocalCacheClass.class);\n\t}\n\n\t@Test\n\tvoid findMultipleComposedAnnotationsOnMethod() throws Exception {\n\t\tAnnotatedElement element = getClass().getDeclaredMethod(\"multipleComposedCachesMethod\");\n\t\tassertFindAllMergedAnnotationsBehavior(element);\n\t}\n\n\t@Test\n\tvoid findComposedPlusLocalAnnotationsOnMethod() throws Exception {\n\t\tAnnotatedElement element = getClass().getDeclaredMethod(\"composedPlusLocalCachesMethod\");\n\t\tassertFindAllMergedAnnotationsBehavior(element);\n\t}\n\n\t@Test\n\tvoid findMultipleComposedAnnotationsOnBridgeMethod() {\n\t\tassertFindAllMergedAnnotationsBehavior(getBridgeMethod());\n\t}\n\n\t/**\n\t * Bridge/bridged method setup code copied from\n\t * {@link org.springframework.core.BridgeMethodResolverTests#withGenericParameter()}.\n\t */\n\tMethod getBridgeMethod() {\n\t\tMethod[] methods = StringGenericParameter.class.getMethods();\n\t\tMethod bridgeMethod = null;\n\t\tMethod bridgedMethod = null;\n\n\t\tfor (Method method : methods) {\n\t\t\tif (\"getFor\".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {\n\t\t\t\tif (method.getReturnType().equals(Object.class)) {\n\t\t\t\t\tbridgeMethod = method;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbridgedMethod = method;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tassertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\n\t\tboolean condition = bridgedMethod != null && !bridgedMethod.isBridge();\n\t\tassertThat(condition).isTrue();\n\n\t\treturn bridgeMethod;\n\t}\n\n\tprivate void assertGetAllMergedAnnotationsBehavior(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).hasSize(2);\n\n\t\tIterator<Cacheable> iterator = cacheables.iterator();\n\t\tCacheable fooCacheable = iterator.next();\n\t\tCacheable barCacheable = iterator.next();\n\t\tassertThat(fooCacheable.key()).isEqualTo(\"fooKey\");\n\t\tassertThat(fooCacheable.value()).isEqualTo(\"fooCache\");\n\t\tassertThat(barCacheable.key()).isEqualTo(\"barKey\");\n\t\tassertThat(barCacheable.value()).isEqualTo(\"barCache\");\n\t}\n\n\tprivate void assertFindAllMergedAnnotationsBehavior(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\n\t\tassertThat(cacheables).isNotNull();\n\t\tassertThat(cacheables).hasSize(2);\n\n\t\tIterator<Cacheable> iterator = cacheables.iterator();\n\t\tCacheable fooCacheable = iterator.next();\n\t\tCacheable barCacheable = iterator.next();\n\t\tassertThat(fooCacheable.key()).isEqualTo(\"fooKey\");\n\t\tassertThat(fooCacheable.value()).isEqualTo(\"fooCache\");\n\t\tassertThat(barCacheable.key()).isEqualTo(\"barKey\");\n\t\tassertThat(barCacheable.value()).isEqualTo(\"barCache\");\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\t/**\n\t * Mock of {@code org.springframework.cache.annotation.Cacheable}.\n\t */\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface Cacheable {\n\n\t\t@AliasFor(\"cacheName\")\n\t\tString value() default \"\";\n\n\t\t@AliasFor(\"value\")\n\t\tString cacheName() default \"\";\n\n\t\tString key() default \"\";\n\t}\n\n\t@Cacheable(\"fooCache\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface FooCache {\n\n\t\t@AliasFor(annotation = Cacheable.class)\n\t\tString key() default \"\";\n\t}\n\n\t@Cacheable(\"barCache\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface BarCache {\n\n\t\t@AliasFor(annotation = Cacheable.class)\n\t\tString key();\n\t}\n\n\t@Cacheable(\"noninheritedCache1\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NoninheritedCache1 {\n\n\t\t@AliasFor(annotation = Cacheable.class)\n\t\tString key() default \"\";\n\t}\n\n\t@Cacheable(\"noninheritedCache2\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NoninheritedCache2 {\n\n\t\t@AliasFor(annotation = Cacheable.class)\n\t\tString key() default \"\";\n\t}\n\n\t@FooCache(key = \"fooKey\")\n\t@BarCache(key = \"barKey\")\n\tprivate static class MultipleComposedCachesClass {\n\t}\n\n\tprivate static class SubMultipleComposedCachesClass extends MultipleComposedCachesClass {\n\t}\n\n\t@NoninheritedCache1\n\t@NoninheritedCache2\n\tprivate static class MultipleNoninheritedComposedCachesClass {\n\t}\n\n\tprivate static class SubMultipleNoninheritedComposedCachesClass extends MultipleNoninheritedComposedCachesClass {\n\t}\n\n\t@Cacheable(cacheName = \"fooCache\", key = \"fooKey\")\n\t@BarCache(key = \"barKey\")\n\tprivate static class ComposedPlusLocalCachesClass {\n\t}\n\n\t@FooCache(key = \"fooKey\")\n\t@BarCache(key = \"barKey\")\n\tprivate interface MultipleComposedCachesInterface {\n\t}\n\n\tprivate static class MultipleComposedCachesOnInterfaceClass implements MultipleComposedCachesInterface {\n\t}\n\n\t@Cacheable(cacheName = \"fooCache\", key = \"fooKey\")\n\tprivate interface ComposedCacheInterface {\n\t}\n\n\t@BarCache(key = \"barKey\")\n\tprivate static class ComposedCacheOnInterfaceAndLocalCacheClass implements ComposedCacheInterface {\n\t}\n\n\n\t@FooCache(key = \"fooKey\")\n\t@BarCache(key = \"barKey\")\n\tprivate void multipleComposedCachesMethod() {\n\t}\n\n\t@Cacheable(cacheName = \"fooCache\", key = \"fooKey\")\n\t@BarCache(key = \"barKey\")\n\tprivate void composedPlusLocalCachesMethod() {\n\t}\n\n\n\tpublic interface GenericParameter<T> {\n\n\t\tT getFor(Class<T> cls);\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static class StringGenericParameter implements GenericParameter<String> {\n\n\t\t@FooCache(key = \"fooKey\")\n\t\t@BarCache(key = \"barKey\")\n\t\t@Override\n\t\tpublic String getFor(Class<String> cls) {\n\t\t\treturn \"foo\";\n\t\t}\n\n\t\tpublic String getFor(Integer integer) {\n\t\t\treturn \"foo\";\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMultipleComposedAnnotationsOnClass() {\r\n    assertGetAllMergedAnnotationsBehavior(MultipleComposedCachesClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleComposedAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleInheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMultipleInheritedComposedAnnotationsOnSuperclass() {\r\n    assertGetAllMergedAnnotationsBehavior(SubMultipleComposedCachesClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleInheritedComposedAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleInheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMultipleNoninheritedComposedAnnotationsOnClass() {\r\n    Class<?> element = MultipleNoninheritedComposedCachesClass.class;\r\n    Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).hasSize(2);\r\n    Iterator<Cacheable> iterator = cacheables.iterator();\r\n    Cacheable cacheable1 = iterator.next();\r\n    Cacheable cacheable2 = iterator.next();\r\n    assertThat(cacheable1.value()).isEqualTo(\"noninheritedCache1\");\r\n    assertThat(cacheable2.value()).isEqualTo(\"noninheritedCache2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMultipleNoninheritedComposedAnnotationsOnSuperclass() {\r\n    Class<?> element = SubMultipleNoninheritedComposedCachesClass.class;\r\n    Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]