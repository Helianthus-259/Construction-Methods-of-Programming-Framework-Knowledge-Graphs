[
  {
    "head": "org.springframework.core.CollectionFactory#isApproximableCollectionType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given collection type is an <em>approximable</em> type,\r\n * i.e. a type that {@link #createApproximateCollection} can approximate.\r\n * @param collectionType the collection type to check\r\n * @return {@code true} if the type is <em>approximable</em>\r\n */\r\npublic static boolean isApproximableCollectionType(@Nullable Class<?> collectionType) {\r\n    return (collectionType != null && (approximableCollectionTypes.contains(collectionType) || collectionType.getName().equals(\"java.util.SequencedSet\") || collectionType.getName().equals(\"java.util.SequencedCollection\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#isApproximableCollectionType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createApproximateCollection(Object,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most approximate collection for the given collection.\r\n * <p><strong>Warning</strong>: Since the parameterized type {@code E} is\r\n * not bound to the type of elements contained in the supplied\r\n * {@code collection}, type safety cannot be guaranteed if the supplied\r\n * {@code collection} is an {@link EnumSet}. In such scenarios, the caller\r\n * is responsible for ensuring that the element type for the supplied\r\n * {@code collection} is an enum type matching type {@code E}. As an\r\n * alternative, the caller may wish to treat the return value as a raw\r\n * collection or collection of {@link Object}.\r\n * @param collection the original collection object, potentially {@code null}\r\n * @param capacity the initial capacity\r\n * @return a new, empty collection instance\r\n * @see #isApproximableCollectionType\r\n * @see java.util.LinkedList\r\n * @see java.util.ArrayList\r\n * @see java.util.EnumSet\r\n * @see java.util.TreeSet\r\n * @see java.util.LinkedHashSet\r\n */\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\npublic static <E> Collection<E> createApproximateCollection(@Nullable Object collection, int capacity) {\r\n    if (collection instanceof EnumSet enumSet) {\r\n        Collection<E> copy = EnumSet.copyOf(enumSet);\r\n        copy.clear();\r\n        return copy;\r\n    } else if (collection instanceof SortedSet sortedSet) {\r\n        return new TreeSet<>(sortedSet.comparator());\r\n    } else if (collection instanceof LinkedList) {\r\n        return new LinkedList<>();\r\n    } else if (collection instanceof List) {\r\n        return new ArrayList<>(capacity);\r\n    } else {\r\n        return new LinkedHashSet<>(capacity);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createApproximateCollection(Object,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createApproximateCollection(Object,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createCollection(Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most appropriate collection for the given collection type.\r\n * <p>Delegates to {@link #createCollection(Class, Class, int)} with a\r\n * {@code null} element type.\r\n * @param collectionType the desired type of the target collection (never {@code null})\r\n * @param capacity the initial capacity\r\n * @return a new collection instance\r\n * @throws IllegalArgumentException if the supplied {@code collectionType}\r\n * is {@code null} or of type {@link EnumSet}\r\n */\r\npublic static <E> Collection<E> createCollection(Class<?> collectionType, int capacity) {\r\n    return createCollection(collectionType, null, capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createCollection(Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createCollection(Class<?>,Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most appropriate collection for the given collection type.\r\n * <p><strong>Warning</strong>: Since the parameterized type {@code E} is\r\n * not bound to the supplied {@code elementType}, type safety cannot be\r\n * guaranteed if the desired {@code collectionType} is {@link EnumSet}.\r\n * In such scenarios, the caller is responsible for ensuring that the\r\n * supplied {@code elementType} is an enum type matching type {@code E}.\r\n * As an alternative, the caller may wish to treat the return value as a\r\n * raw collection or collection of {@link Object}.\r\n * @param collectionType the desired type of the target collection (never {@code null})\r\n * @param elementType the collection's element type, or {@code null} if unknown\r\n * (note: only relevant for {@link EnumSet} creation)\r\n * @param capacity the initial capacity\r\n * @return a new collection instance\r\n * @throws IllegalArgumentException if the supplied {@code collectionType} is\r\n * {@code null}; or if the desired {@code collectionType} is {@link EnumSet} and\r\n * the supplied {@code elementType} is not a subtype of {@link Enum}\r\n * @since 4.1.3\r\n * @see java.util.LinkedHashSet\r\n * @see java.util.ArrayList\r\n * @see java.util.TreeSet\r\n * @see java.util.EnumSet\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <E> Collection<E> createCollection(Class<?> collectionType, @Nullable Class<?> elementType, int capacity) {\r\n    Assert.notNull(collectionType, \"Collection type must not be null\");\r\n    if (LinkedHashSet.class == collectionType || Set.class == collectionType || Collection.class == collectionType || collectionType.getName().equals(\"java.util.SequencedSet\") || collectionType.getName().equals(\"java.util.SequencedCollection\")) {\r\n        return new LinkedHashSet<>(capacity);\r\n    } else if (ArrayList.class == collectionType || List.class == collectionType) {\r\n        return new ArrayList<>(capacity);\r\n    } else if (LinkedList.class == collectionType) {\r\n        return new LinkedList<>();\r\n    } else if (TreeSet.class == collectionType || NavigableSet.class == collectionType || SortedSet.class == collectionType) {\r\n        return new TreeSet<>();\r\n    } else if (EnumSet.class.isAssignableFrom(collectionType)) {\r\n        Assert.notNull(elementType, \"Cannot create EnumSet for unknown element type\");\r\n        return EnumSet.noneOf(asEnumType(elementType));\r\n    } else if (HashSet.class == collectionType) {\r\n        return new HashSet<>(capacity);\r\n    } else {\r\n        if (collectionType.isInterface() || !Collection.class.isAssignableFrom(collectionType)) {\r\n            throw new IllegalArgumentException(\"Unsupported Collection type: \" + collectionType.getName());\r\n        }\r\n        try {\r\n            return (Collection<E>) ReflectionUtils.accessibleConstructor(collectionType).newInstance();\r\n        } catch (Throwable ex) {\r\n            throw new IllegalArgumentException(\"Could not instantiate Collection type: \" + collectionType.getName(), ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createCollection(Class<?>,Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createCollection(Class<?>,Class<?>,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactory#isApproximableMapType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given map type is an <em>approximable</em> type,\r\n * i.e. a type that {@link #createApproximateMap} can approximate.\r\n * @param mapType the map type to check\r\n * @return {@code true} if the type is <em>approximable</em>\r\n */\r\npublic static boolean isApproximableMapType(@Nullable Class<?> mapType) {\r\n    return (mapType != null && (approximableMapTypes.contains(mapType) || mapType.getName().equals(\"java.util.SequencedMap\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#isApproximableMapType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createApproximateMap(Object,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most approximate map for the given map.\r\n * <p><strong>Warning</strong>: Since the parameterized type {@code K} is\r\n * not bound to the type of keys contained in the supplied {@code map},\r\n * type safety cannot be guaranteed if the supplied {@code map} is an\r\n * {@link EnumMap}. In such scenarios, the caller is responsible for\r\n * ensuring that the key type in the supplied {@code map} is an enum type\r\n * matching type {@code K}. As an alternative, the caller may wish to\r\n * treat the return value as a raw map or map keyed by {@link Object}.\r\n * @param map the original map object, potentially {@code null}\r\n * @param capacity the initial capacity\r\n * @return a new, empty map instance\r\n * @see #isApproximableMapType\r\n * @see java.util.EnumMap\r\n * @see java.util.TreeMap\r\n * @see java.util.LinkedHashMap\r\n */\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\npublic static <K, V> Map<K, V> createApproximateMap(@Nullable Object map, int capacity) {\r\n    if (map instanceof EnumMap enumMap) {\r\n        EnumMap copy = new EnumMap(enumMap);\r\n        copy.clear();\r\n        return copy;\r\n    } else if (map instanceof SortedMap sortedMap) {\r\n        return new TreeMap<>(sortedMap.comparator());\r\n    } else if (map instanceof MultiValueMap) {\r\n        return new LinkedMultiValueMap(capacity);\r\n    } else {\r\n        return new LinkedHashMap<>(capacity);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createApproximateMap(Object,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createApproximateMap(Object,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createMap(Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most appropriate map for the given map type.\r\n * <p>Delegates to {@link #createMap(Class, Class, int)} with a\r\n * {@code null} key type.\r\n * @param mapType the desired type of the target map\r\n * @param capacity the initial capacity\r\n * @return a new map instance\r\n * @throws IllegalArgumentException if the supplied {@code mapType} is\r\n * {@code null} or of type {@link EnumMap}\r\n */\r\npublic static <K, V> Map<K, V> createMap(Class<?> mapType, int capacity) {\r\n    return createMap(mapType, null, capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createMap(Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createMap(Class<?>,Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create the most appropriate map for the given map type.\r\n * <p><strong>Warning</strong>: Since the parameterized type {@code K}\r\n * is not bound to the supplied {@code keyType}, type safety cannot be\r\n * guaranteed if the desired {@code mapType} is {@link EnumMap}. In such\r\n * scenarios, the caller is responsible for ensuring that the {@code keyType}\r\n * is an enum type matching type {@code K}. As an alternative, the caller\r\n * may wish to treat the return value as a raw map or map keyed by\r\n * {@link Object}. Similarly, type safety cannot be enforced if the\r\n * desired {@code mapType} is {@link MultiValueMap}.\r\n * @param mapType the desired type of the target map (never {@code null})\r\n * @param keyType the map's key type, or {@code null} if unknown\r\n * (note: only relevant for {@link EnumMap} creation)\r\n * @param capacity the initial capacity\r\n * @return a new map instance\r\n * @throws IllegalArgumentException if the supplied {@code mapType} is\r\n * {@code null}; or if the desired {@code mapType} is {@link EnumMap} and\r\n * the supplied {@code keyType} is not a subtype of {@link Enum}\r\n * @since 4.1.3\r\n * @see java.util.LinkedHashMap\r\n * @see java.util.TreeMap\r\n * @see org.springframework.util.LinkedMultiValueMap\r\n * @see java.util.EnumMap\r\n */\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\npublic static <K, V> Map<K, V> createMap(Class<?> mapType, @Nullable Class<?> keyType, int capacity) {\r\n    Assert.notNull(mapType, \"Map type must not be null\");\r\n    if (LinkedHashMap.class == mapType || Map.class == mapType || mapType.getName().equals(\"java.util.SequencedMap\")) {\r\n        return new LinkedHashMap<>(capacity);\r\n    } else if (LinkedMultiValueMap.class == mapType || MultiValueMap.class == mapType) {\r\n        return new LinkedMultiValueMap();\r\n    } else if (TreeMap.class == mapType || SortedMap.class == mapType || NavigableMap.class == mapType) {\r\n        return new TreeMap<>();\r\n    } else if (EnumMap.class == mapType) {\r\n        Assert.notNull(keyType, \"Cannot create EnumMap for unknown key type\");\r\n        return new EnumMap(asEnumType(keyType));\r\n    } else if (HashMap.class == mapType) {\r\n        return new HashMap<>(capacity);\r\n    } else {\r\n        if (mapType.isInterface() || !Map.class.isAssignableFrom(mapType)) {\r\n            throw new IllegalArgumentException(\"Unsupported Map type: \" + mapType.getName());\r\n        }\r\n        try {\r\n            return (Map<K, V>) ReflectionUtils.accessibleConstructor(mapType).newInstance();\r\n        } catch (Throwable ex) {\r\n            throw new IllegalArgumentException(\"Could not instantiate Map type: \" + mapType.getName(), ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createMap(Class<?>,Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createMap(Class<?>,Class<?>,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]