[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaAndLocalTxConfig()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaAndLocalTxConfig()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromClassWithAttributeAliasesInTargetAnnotation() {\r\n    MergedAnnotation<AliasedTransactional> mergedAnnotation = MergedAnnotations.from(AliasedTransactionalComponentClass.class, SearchStrategy.TYPE_HIERARCHY).get(AliasedTransactional.class);\r\n    AliasedTransactional synthesizedAnnotation = mergedAnnotation.synthesize();\r\n    String qualifier = \"aliasForQualifier\";\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(qualifier);\r\n    assertThat(mergedAnnotation.getString(\"qualifier\")).isEqualTo(qualifier);\r\n    assertThat(synthesizedAnnotation.value()).isEqualTo(qualifier);\r\n    assertThat(synthesizedAnnotation.qualifier()).isEqualTo(qualifier);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasesInTargetAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasesInTargetAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23767\r\n@Test\r\nvoid getWithTypeHierarchyFromClassWithComposedMetaTransactionalAnnotation() {\r\n    MergedAnnotation<AliasedTransactional> mergedAnnotation = MergedAnnotations.from(ComposedTransactionalClass.class, SearchStrategy.TYPE_HIERARCHY).get(AliasedTransactional.class);\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"anotherTransactionManager\");\r\n    assertThat(mergedAnnotation.getString(\"qualifier\")).isEqualTo(\"anotherTransactionManager\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithComposedMetaTransactionalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithComposedMetaTransactionalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaMetaAliasedTransactional()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-23767\r\n@Test\r\nvoid getWithTypeHierarchyFromClassWithMetaMetaAliasedTransactional() {\r\n    MergedAnnotation<AliasedTransactional> mergedAnnotation = MergedAnnotations.from(MetaMetaAliasedTransactionalClass.class, SearchStrategy.TYPE_HIERARCHY).get(AliasedTransactional.class);\r\n    assertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"meta\");\r\n    assertThat(mergedAnnotation.getString(\"qualifier\")).isEqualTo(\"meta\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaMetaAliasedTransactional()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithMetaMetaAliasedTransactional()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() {\r\n    MergedAnnotation<?> annotation = testGetWithTypeHierarchy(TestComponentScanClass.class, \"com.example.app.test\");\r\n    MergedAnnotation<Filter>[] excludeFilters = annotation.getAnnotationArray(\"excludeFilters\", Filter.class);\r\n    assertThat(Arrays.stream(excludeFilters).map(filter -> filter.getString(\"pattern\"))).containsExactly(\"*Test\", \"*Tests\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithBothAttributesOfAnAliasPairDeclared()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromClassWithBothAttributesOfAnAliasPairDeclared() {\r\n    testGetWithTypeHierarchy(ComponentScanWithBasePackagesAndValueAliasClass.class, \"com.example.app.test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithBothAttributesOfAnAliasPairDeclared()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromClassWithBothAttributesOfAnAliasPairDeclared()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyWithSingleElementOverridingAnArrayViaAliasFor() {\r\n    testGetWithTypeHierarchy(AliasForBasedSinglePackageComponentScanClass.class, \"com.example.app.test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]