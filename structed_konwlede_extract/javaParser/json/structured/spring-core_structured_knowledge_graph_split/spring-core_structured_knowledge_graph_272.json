[
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#convertBigDecimalToBigInteger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertBigDecimalToBigInteger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertNonExactBigDecimalToBigInteger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convertNonExactBigDecimalToBigInteger() {\r\n    BigDecimal decimal = new BigDecimal(\"987459837583750387355346.14\");\r\n    assertThat(NumberUtils.convertNumberToTargetClass(decimal, BigInteger.class)).isEqualTo(new BigInteger(\"987459837583750387355346\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#convertNonExactBigDecimalToBigInteger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#convertNonExactBigDecimalToBigInteger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseBigDecimalNumber1() {\r\n    String bigDecimalAsString = \"0.10\";\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseBigDecimalNumber2() {\r\n    String bigDecimalAsString = \"0.001\";\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber3()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseBigDecimalNumber3() {\r\n    String bigDecimalAsString = \"3.14159265358979323846\";\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber3()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseBigDecimalNumber3()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocalizedBigDecimalNumber1() {\r\n    String bigDecimalAsString = \"0.10\";\r\n    NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocalizedBigDecimalNumber2() {\r\n    String bigDecimalAsString = \"0.001\";\r\n    NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);\r\n    Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);\r\n    assertThat(bigDecimal).isEqualTo(new BigDecimal(bigDecimalAsString));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#parseLocalizedBigDecimalNumber2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]