[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromSuperType() {\r\n    ResolvableType type = ResolvableType.forClass(ExtendsList.class);\r\n    assertThat(type.resolve()).isEqualTo(ExtendsList.class);\r\n    assertThat(type.asCollection().resolveGeneric()).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSuperType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSuperType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromClassWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromClassWithImplementsClass() {\r\n    ResolvableType type = ResolvableType.forClass(MySuperclassType.class, MyCollectionSuperclassType.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(Collection.class);\r\n    assertThat(type.resolveGeneric(0, 0)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromClassWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromClassWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromConstructorParameter() throws Exception {\r\n    Constructor<?> constructor = Constructors.class.getConstructor(List.class);\r\n    ResolvableType type = ResolvableType.forConstructorParameter(constructor, 0);\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.resolveGeneric(0)).isEqualTo(CharSequence.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveUnknownTypeVariableFromConstructorParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveUnknownTypeVariableFromConstructorParameter() throws Exception {\r\n    Constructor<?> constructor = Constructors.class.getConstructor(Map.class);\r\n    ResolvableType type = ResolvableType.forConstructorParameter(constructor, 0);\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.resolveGeneric(0)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveUnknownTypeVariableFromConstructorParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveUnknownTypeVariableFromConstructorParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameterWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromConstructorParameterWithImplementsClass() throws Exception {\r\n    Constructor<?> constructor = Constructors.class.getConstructor(Map.class);\r\n    ResolvableType type = ResolvableType.forConstructorParameter(constructor, 0, TypedConstructors.class);\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.resolveGeneric(0)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameterWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromConstructorParameterWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromMethodParameter() throws Exception {\r\n    Method method = Methods.class.getMethod(\"typedParameter\", Object.class);\r\n    ResolvableType type = ResolvableType.forMethodParameter(method, 0);\r\n    assertThat(type.resolve()).isNull();\r\n    assertThat(type.getType().toString()).isEqualTo(\"T\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromMethodParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]