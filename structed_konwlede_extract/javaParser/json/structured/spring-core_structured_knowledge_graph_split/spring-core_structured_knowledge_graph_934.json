[
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#addFirst(PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#addLast(PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given property source object with the lowest precedence.\r\n */\r\npublic void addLast(PropertySource<?> propertySource) {\r\n    synchronized (this.propertySourceList) {\r\n        removeIfPresent(propertySource);\r\n        this.propertySourceList.add(propertySource);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#addLast(PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#addBefore(String,PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given property source object with precedence immediately higher\r\n * than the named relative property source.\r\n */\r\npublic void addBefore(String relativePropertySourceName, PropertySource<?> propertySource) {\r\n    assertLegalRelativeAddition(relativePropertySourceName, propertySource);\r\n    synchronized (this.propertySourceList) {\r\n        removeIfPresent(propertySource);\r\n        int index = assertPresentAndGetIndex(relativePropertySourceName);\r\n        addAtIndex(index, propertySource);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#addBefore(String,PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#addAfter(String,PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given property source object with precedence immediately lower\r\n * than the named relative property source.\r\n */\r\npublic void addAfter(String relativePropertySourceName, PropertySource<?> propertySource) {\r\n    assertLegalRelativeAddition(relativePropertySourceName, propertySource);\r\n    synchronized (this.propertySourceList) {\r\n        removeIfPresent(propertySource);\r\n        int index = assertPresentAndGetIndex(relativePropertySourceName);\r\n        addAtIndex(index + 1, propertySource);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#addAfter(String,PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#precedenceOf(PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the precedence of the given property source, {@code -1} if not found.\r\n */\r\npublic int precedenceOf(PropertySource<?> propertySource) {\r\n    return this.propertySourceList.indexOf(propertySource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#precedenceOf(PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#remove(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove and return the property source with the given name, {@code null} if not found.\r\n * @param name the name of the property source to find and remove\r\n */\r\n@Nullable\r\npublic PropertySource<?> remove(String name) {\r\n    synchronized (this.propertySourceList) {\r\n        int index = this.propertySourceList.indexOf(PropertySource.named(name));\r\n        return (index != -1 ? this.propertySourceList.remove(index) : null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#remove(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#remove(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#replace(String,PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Replace the property source with the given name with the given property source object.\r\n * @param name the name of the property source to find and replace\r\n * @param propertySource the replacement property source\r\n * @throws IllegalArgumentException if no property source with the given name is present\r\n * @see #contains\r\n */\r\npublic void replace(String name, PropertySource<?> propertySource) {\r\n    synchronized (this.propertySourceList) {\r\n        int index = assertPresentAndGetIndex(name);\r\n        this.propertySourceList.set(index, propertySource);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#replace(String,PropertySource<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the number of {@link PropertySource} objects contained.\r\n */\r\npublic int size() {\r\n    return this.propertySourceList.size();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.propertySourceList.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.MutablePropertySources#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySources#assertLegalRelativeAddition(String,PropertySource<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Ensure that the given property source is not being added relative to itself.\r\n */\r\nprotected void assertLegalRelativeAddition(String relativePropertySourceName, PropertySource<?> propertySource) {\r\n    String newPropertySourceName = propertySource.getName();\r\n    if (relativePropertySourceName.equals(newPropertySourceName)) {\r\n        throw new IllegalArgumentException(\"PropertySource named '\" + newPropertySourceName + \"' cannot be added relative to itself\");\r\n    }\r\n}",
    "tailType": "method_code"
  }
]