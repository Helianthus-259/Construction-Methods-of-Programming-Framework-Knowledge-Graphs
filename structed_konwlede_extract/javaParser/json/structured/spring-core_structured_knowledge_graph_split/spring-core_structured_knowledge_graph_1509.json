[
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileContentWhenFileIsMissingReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileExistsReturnsInputStreamSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGeneratedFileWhenFileExistsReturnsInputStreamSource() {\r\n    this.generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    assertThat(this.generatedFiles.getGeneratedFile(Kind.RESOURCE, \"META-INF/test\")).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileExistsReturnsInputStreamSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileExistsReturnsInputStreamSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileIsMissingReturnsNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getGeneratedFileWhenFileIsMissingReturnsNull() {\r\n    this.generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    assertThat(this.generatedFiles.getGeneratedFile(Kind.RESOURCE, \"META-INF/missing\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileIsMissingReturnsNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.InMemoryGeneratedFilesTests#getGeneratedFileWhenFileIsMissingReturnsNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.MethodNameTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link MethodName}.\n *\n * @author Phillip Webb\n */\nclass MethodNameTests {\n\n\t@Test\n\tvoid ofWhenPartsIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> MethodName.of((String[]) null))\n\t\t\t\t.withMessage(\"'parts' must not be null\");\n\t}\n\n\t@Test\n\tvoid ofReturnsMethodName() {\n\t\tassertThat(MethodName.of(\"get\", \"bean\", \"factory\")).hasToString(\"getBeanFactory\");\n\t\tassertThat(MethodName.of(\"get\", null, \"factory\")).hasToString(\"getFactory\");\n\t\tassertThat(MethodName.of(null, null)).hasToString(\"$$aot\");\n\t\tassertThat(MethodName.of(\"\", null)).hasToString(\"$$aot\");\n\t\tassertThat(MethodName.of(\"get\", \"InputStream\")).hasToString(\"getInputStream\");\n\t\tassertThat(MethodName.of(\"register\", \"myBean123\", \"bean\")).hasToString(\"registerMyBeanBean\");\n\t\tassertThat(MethodName.of(\"register\", \"org.springframework.example.bean\"))\n\t\t\t\t.hasToString(\"registerOrgSpringframeworkExampleBean\");\n\t}\n\n\t@Test\n\tvoid andPartsWhenPartsIsNullThrowsException() {\n\t\tMethodName name = MethodName.of(\"myBean\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> name.and(((String[]) null)))\n\t\t\t\t.withMessage(\"'parts' must not be null\");\n\t}\n\n\t@Test\n\tvoid andPartsReturnsMethodName() {\n\t\tMethodName name = MethodName.of(\"myBean\");\n\t\tassertThat(name.and(\"test\")).hasToString(\"myBeanTest\");\n\t\tassertThat(name.and(\"test\", null)).hasToString(\"myBeanTest\");\n\t\tassertThat(name.and(\"getName\")).hasToString(\"getMyBeanName\");\n\t\tassertThat(name.and(\"setName\")).hasToString(\"setMyBeanName\");\n\t\tassertThat(name.and(\"isDoingOk\")).hasToString(\"isMyBeanDoingOk\");\n\t\tassertThat(name.and(\"this\", \"that\", \"the\", \"other\")).hasToString(\"myBeanThisThatTheOther\");\n\t}\n\n\t@Test\n\tvoid andNameWhenPartsIsNullThrowsException() {\n\t\tMethodName name = MethodName.of(\"myBean\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> name.and(((MethodName) null)))\n\t\t\t\t.withMessage(\"'name' must not be null\");\n\t}\n\n\t@Test\n\tvoid andNameReturnsMethodName() {\n\t\tMethodName name = MethodName.of(\"myBean\");\n\t\tassertThat(name.and(MethodName.of(\"test\"))).hasToString(\"myBeanTest\");\n\t}\n\n\t@Test\n\tvoid hashCodeAndEquals() {\n\t\tMethodName name1 = MethodName.of(\"myBean\");\n\t\tMethodName name2 = MethodName.of(\"my\", \"bean\");\n\t\tMethodName name3 = MethodName.of(\"myOtherBean\");\n\t\tassertThat(name1.hashCode()).isEqualTo(name2.hashCode());\n\t\tassertThat(name1).isEqualTo(name1).isEqualTo(name2).isNotEqualTo(name3);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#ofWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofWhenPartsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> MethodName.of((String[]) null)).withMessage(\"'parts' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#ofWhenPartsIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#ofWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#ofReturnsMethodName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofReturnsMethodName() {\r\n    assertThat(MethodName.of(\"get\", \"bean\", \"factory\")).hasToString(\"getBeanFactory\");\r\n    assertThat(MethodName.of(\"get\", null, \"factory\")).hasToString(\"getFactory\");\r\n    assertThat(MethodName.of(null, null)).hasToString(\"$$aot\");\r\n    assertThat(MethodName.of(\"\", null)).hasToString(\"$$aot\");\r\n    assertThat(MethodName.of(\"get\", \"InputStream\")).hasToString(\"getInputStream\");\r\n    assertThat(MethodName.of(\"register\", \"myBean123\", \"bean\")).hasToString(\"registerMyBeanBean\");\r\n    assertThat(MethodName.of(\"register\", \"org.springframework.example.bean\")).hasToString(\"registerOrgSpringframeworkExampleBean\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#ofReturnsMethodName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#ofReturnsMethodName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andPartsWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andPartsWhenPartsIsNullThrowsException() {\r\n    MethodName name = MethodName.of(\"myBean\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> name.and(((String[]) null))).withMessage(\"'parts' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#andPartsWhenPartsIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andPartsWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andPartsReturnsMethodName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andPartsReturnsMethodName() {\r\n    MethodName name = MethodName.of(\"myBean\");\r\n    assertThat(name.and(\"test\")).hasToString(\"myBeanTest\");\r\n    assertThat(name.and(\"test\", null)).hasToString(\"myBeanTest\");\r\n    assertThat(name.and(\"getName\")).hasToString(\"getMyBeanName\");\r\n    assertThat(name.and(\"setName\")).hasToString(\"setMyBeanName\");\r\n    assertThat(name.and(\"isDoingOk\")).hasToString(\"isMyBeanDoingOk\");\r\n    assertThat(name.and(\"this\", \"that\", \"the\", \"other\")).hasToString(\"myBeanThisThatTheOther\");\r\n}",
    "tailType": "method_code"
  }
]