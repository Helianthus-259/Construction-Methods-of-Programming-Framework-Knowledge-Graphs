[
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Decoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.Decoder#getDecodableMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of MIME types supported by this Decoder. The list may not\r\n * apply to every possible target element type and calls to this method\r\n * should typically be guarded via {@link #canDecode(ResolvableType, MimeType)\r\n * canDecode(elementType, null)}. The list may also exclude MIME types\r\n * supported only for a specific element type. Alternatively, use\r\n * {@link #getDecodableMimeTypes(ResolvableType)} for a more precise list.\r\n * @return the list of supported MIME types\r\n */\r\nList<MimeType> getDecodableMimeTypes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#getDecodableMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Decoder#getDecodableMimeTypes(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the list of MIME types supported by this Decoder for the given type\r\n * of element. This list may differ from {@link #getDecodableMimeTypes()}\r\n * if the Decoder doesn't support the given element type or if it supports\r\n * it only for a subset of MIME types.\r\n * @param targetType the type of element to check for decoding\r\n * @return the list of MIME types supported for the given target type\r\n * @since 5.3.4\r\n */\r\ndefault List<MimeType> getDecodableMimeTypes(ResolvableType targetType) {\r\n    return (canDecode(targetType, null) ? getDecodableMimeTypes() : Collections.emptyList());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#getDecodableMimeTypes(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.DecodingException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.DecodingException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DecodingException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Indicates an issue with decoding the input stream with a focus on content\n * related issues such as a parse failure. As opposed to more general I/O\n * errors, illegal state, or a {@link CodecException} such as a configuration\n * issue that a {@link Decoder} may choose to raise.\n *\n * <p>For example in server web application, a {@code DecodingException} would\n * translate to a response with a 400 (bad input) status while\n * {@code CodecException} would translate to 500 (server error) status.\n *\n * @author Rossen Stoyanchev\n * @since 5.0\n * @see Decoder\n */\n@SuppressWarnings(\"serial\")\npublic class DecodingException extends CodecException {\n\n\t/**\n\t * Create a new DecodingException.\n\t * @param msg the detail message\n\t */\n\tpublic DecodingException(@Nullable String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Create a new DecodingException.\n\t * @param msg the detail message\n\t * @param cause root cause for the exception, if any\n\t */\n\tpublic DecodingException(@Nullable String msg, @Nullable Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.DecodingException",
    "headType": "class",
    "relation": "extend",
    "tail": "CodecException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.Encoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.util.MimeType;\n\n/**\n * Strategy to encode a stream of Objects of type {@code <T>} into an output\n * stream of bytes.\n *\n * @author Sebastien Deleuze\n * @author Rossen Stoyanchev\n * @since 5.0\n * @param <T> the type of elements in the input stream\n */\npublic interface Encoder<T> {\n\n\t/**\n\t * Whether the encoder supports the given source element type and the MIME\n\t * type for the output stream.\n\t * @param elementType the type of elements in the source stream\n\t * @param mimeType the MIME type for the output stream\n\t * (can be {@code null} if not specified)\n\t * @return {@code true} if supported, {@code false} otherwise\n\t */\n\tboolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType);\n\n\t/**\n\t * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}\n\t * output stream.\n\t * @param inputStream the input stream of Objects to encode. If the input should be\n\t * encoded as a single value rather than as a stream of elements, an instance of\n\t * {@link Mono} should be used.\n\t * @param bufferFactory for creating output stream {@code DataBuffer}'s\n\t * @param elementType the expected type of elements in the input stream;\n\t * this type must have been previously passed to the {@link #canEncode}\n\t * method and it must have returned {@code true}.\n\t * @param mimeType the MIME type for the output content (optional)\n\t * @param hints additional information about how to encode\n\t * @return the output stream\n\t */\n\tFlux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,\n\t\t\tResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);\n\n\t/**\n\t * Encode an Object of type T to a data buffer. This is useful for scenarios,\n\t * that distinct messages (or events) are encoded and handled individually,\n\t * in fully aggregated form.\n\t * <p>By default this method raises {@link UnsupportedOperationException}\n\t * and it is expected that some encoders cannot produce a single buffer or\n\t * cannot do so synchronously (for example, encoding a {@code Resource}).\n\t * @param value the value to be encoded\n\t * @param bufferFactory for creating the output {@code DataBuffer}\n\t * @param valueType the type for the value being encoded\n\t * @param mimeType the MIME type for the output content (optional)\n\t * @param hints additional information about how to encode\n\t * @return the encoded content\n\t * @since 5.2\n\t */\n\tdefault DataBuffer encodeValue(T value, DataBufferFactory bufferFactory,\n\t\t\tResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\t// It may not be possible to produce a single DataBuffer synchronously\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t/**\n\t * Return the list of MIME types supported by this Encoder. The list may not\n\t * apply to every possible target element type and calls to this method should\n\t * typically be guarded via {@link #canEncode(ResolvableType, MimeType)\n\t * canEncode(elementType, null)}. The list may also exclude MIME types\n\t * supported only for a specific element type. Alternatively, use\n\t * {@link #getEncodableMimeTypes(ResolvableType)} for a more precise list.\n\t * @return the list of supported MIME types\n\t */\n\tList<MimeType> getEncodableMimeTypes();\n\n\t/**\n\t * Return the list of MIME types supported by this Encoder for the given type\n\t * of element. This list may differ from the {@link #getEncodableMimeTypes()}\n\t * if the Encoder doesn't support the element type or if it supports it only\n\t * for a subset of MIME types.\n\t * @param elementType the type of element to check for encoding\n\t * @return the list of MIME types supported for the given element type\n\t * @since 5.3.4\n\t */\n\tdefault List<MimeType> getEncodableMimeTypes(ResolvableType elementType) {\n\t\treturn (canEncode(elementType, null) ? getEncodableMimeTypes() : Collections.emptyList());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether the encoder supports the given source element type and the MIME\r\n * type for the output stream.\r\n * @param elementType the type of elements in the source stream\r\n * @param mimeType the MIME type for the output stream\r\n * (can be {@code null} if not specified)\r\n * @return {@code true} if supported, {@code false} otherwise\r\n */\r\nboolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Encoder#canEncode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Encoder#encode(Publisher<? extends T>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}\r\n * output stream.\r\n * @param inputStream the input stream of Objects to encode. If the input should be\r\n * encoded as a single value rather than as a stream of elements, an instance of\r\n * {@link Mono} should be used.\r\n * @param bufferFactory for creating output stream {@code DataBuffer}'s\r\n * @param elementType the expected type of elements in the input stream;\r\n * this type must have been previously passed to the {@link #canEncode}\r\n * method and it must have returned {@code true}.\r\n * @param mimeType the MIME type for the output content (optional)\r\n * @param hints additional information about how to encode\r\n * @return the output stream\r\n */\r\nFlux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Encoder#encode(Publisher<? extends T>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Encoder#encodeValue(T,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Encode an Object of type T to a data buffer. This is useful for scenarios,\r\n * that distinct messages (or events) are encoded and handled individually,\r\n * in fully aggregated form.\r\n * <p>By default this method raises {@link UnsupportedOperationException}\r\n * and it is expected that some encoders cannot produce a single buffer or\r\n * cannot do so synchronously (for example, encoding a {@code Resource}).\r\n * @param value the value to be encoded\r\n * @param bufferFactory for creating the output {@code DataBuffer}\r\n * @param valueType the type for the value being encoded\r\n * @param mimeType the MIME type for the output content (optional)\r\n * @param hints additional information about how to encode\r\n * @return the encoded content\r\n * @since 5.2\r\n */\r\ndefault DataBuffer encodeValue(T value, DataBufferFactory bufferFactory, ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    // It may not be possible to produce a single DataBuffer synchronously\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Encoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Encoder#encodeValue(T,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  }
]