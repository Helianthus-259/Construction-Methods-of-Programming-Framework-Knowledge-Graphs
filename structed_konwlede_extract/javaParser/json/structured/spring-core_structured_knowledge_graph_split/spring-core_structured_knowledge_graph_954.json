[
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the description's hash code.\r\n * @see #getDescription()\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return getDescription().hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the description of this resource.\r\n * @see #getDescription()\r\n */\r\n@Override\r\npublic String toString() {\r\n    return getDescription();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.AbstractResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.AbstractResource#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.AbstractResource#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.CloseableDataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\n/**\n * Extension of {@link DataBuffer} that allows for buffers that can be used\n * in a {@code try}-with-resources statement.\n\n * @author Arjen Poutsma\n * @since 6.0\n */\npublic interface CloseableDataBuffer extends DataBuffer, AutoCloseable {\n\n\t/**\n\t * Closes this data buffer, freeing any resources.\n\t * @throws IllegalStateException if this buffer has already been closed\n\t */\n\t@Override\n\tvoid close();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Closes this data buffer, freeing any resources.\r\n * @throws IllegalStateException if this buffer has already been closed\r\n */\r\n@Override\r\nvoid close();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.CloseableDataBuffer#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer",
    "headType": "class",
    "relation": "extend",
    "tail": "DataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.CloseableDataBuffer",
    "headType": "class",
    "relation": "extend",
    "tail": "AutoCloseable",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.DataBuffer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.io.Closeable;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetEncoder;\nimport java.nio.charset.CoderResult;\nimport java.nio.charset.CodingErrorAction;\nimport java.util.Iterator;\nimport java.util.function.IntPredicate;\n\nimport org.springframework.util.Assert;\n\n/**\n * Basic abstraction over byte buffers.\n *\n * <p>{@code DataBuffer}s has a separate {@linkplain #readPosition() read} and\n * {@linkplain #writePosition() write} position, as opposed to {@code ByteBuffer}'s\n * single {@linkplain ByteBuffer#position() position}. As such, the {@code DataBuffer}\n * does not require a {@linkplain ByteBuffer#flip() flip} to read after writing. In general,\n * the following invariant holds for the read and write positions, and the capacity:\n *\n * <blockquote>\n *     {@code 0} {@code <=}\n *     <i>readPosition</i> {@code <=}\n *     <i>writePosition</i> {@code <=}\n *     <i>capacity</i>\n * </blockquote>\n *\n * <p>The {@linkplain #capacity() capacity} of a {@code DataBuffer} is expanded on demand,\n * similar to {@code StringBuilder}.\n *\n * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper\n * around {@link ByteBuffer} which is similar to Netty's {@link io.netty.buffer.ByteBuf} but\n * can also be used on non-Netty platforms (i.e. Servlet containers).\n *\n * @author Arjen Poutsma\n * @author Brian Clozel\n * @since 5.0\n * @see DataBufferFactory\n */\npublic interface DataBuffer {\n\n\t/**\n\t * Return the {@link DataBufferFactory} that created this buffer.\n\t * @return the creating buffer factory\n\t */\n\tDataBufferFactory factory();\n\n\t/**\n\t * Return the index of the first byte in this buffer that matches\n\t * the given predicate.\n\t * @param predicate the predicate to match\n\t * @param fromIndex the index to start the search from\n\t * @return the index of the first byte that matches {@code predicate};\n\t * or {@code -1} if none match\n\t */\n\tint indexOf(IntPredicate predicate, int fromIndex);\n\n\t/**\n\t * Return the index of the last byte in this buffer that matches\n\t * the given predicate.\n\t * @param predicate the predicate to match\n\t * @param fromIndex the index to start the search from\n\t * @return the index of the last byte that matches {@code predicate};\n\t * or {@code -1} if none match\n\t */\n\tint lastIndexOf(IntPredicate predicate, int fromIndex);\n\n\t/**\n\t * Return the number of bytes that can be read from this data buffer.\n\t * @return the readable byte count\n\t */\n\tint readableByteCount();\n\n\t/**\n\t * Return the number of bytes that can be written to this data buffer.\n\t * @return the writable byte count\n\t * @since 5.0.1\n\t */\n\tint writableByteCount();\n\n\t/**\n\t * Return the number of bytes that this buffer can contain.\n\t * @return the capacity\n\t * @since 5.0.1\n\t */\n\tint capacity();\n\n\t/**\n\t * Set the number of bytes that this buffer can contain.\n\t * <p>If the new capacity is lower than the current capacity, the contents\n\t * of this buffer will be truncated. If the new capacity is higher than\n\t * the current capacity, it will be expanded.\n\t * @param capacity the new capacity\n\t * @return this buffer\n\t * @deprecated as of 6.0, in favor of {@link #ensureWritable(int)}, which\n\t * has different semantics\n\t */\n\t@Deprecated(since = \"6.0\")\n\tDataBuffer capacity(int capacity);\n\n\t/**\n\t * Ensure that the current buffer has enough {@link #writableByteCount()}\n\t * to write the amount of data given as an argument. If not, the missing\n\t * capacity will be added to the buffer.\n\t * @param capacity the writable capacity to check for\n\t * @return this buffer\n\t * @since 5.1.4\n\t * @deprecated since 6.0, in favor of {@link #ensureWritable(int)}\n\t */\n\t@Deprecated(since = \"6.0\")\n\tdefault DataBuffer ensureCapacity(int capacity) {\n\t\treturn ensureWritable(capacity);\n\t}\n\n\t/**\n\t * Ensure that the current buffer has enough {@link #writableByteCount()}\n\t * to write the amount of data given as an argument. If not, the missing\n\t * capacity will be added to the buffer.\n\t * @param capacity the writable capacity to check for\n\t * @return this buffer\n\t * @since 6.0\n\t */\n\tDataBuffer ensureWritable(int capacity);\n\n\t/**\n\t * Return the position from which this buffer will read.\n\t * @return the read position\n\t * @since 5.0.1\n\t */\n\tint readPosition();\n\n\t/**\n\t * Set the position from which this buffer will read.\n\t * @param readPosition the new read position\n\t * @return this buffer\n\t * @throws IndexOutOfBoundsException if {@code readPosition} is smaller than 0\n\t * or greater than {@link #writePosition()}\n\t * @since 5.0.1\n\t */\n\tDataBuffer readPosition(int readPosition);\n\n\t/**\n\t * Return the position to which this buffer will write.\n\t * @return the write position\n\t * @since 5.0.1\n\t */\n\tint writePosition();\n\n\t/**\n\t * Set the position to which this buffer will write.\n\t * @param writePosition the new write position\n\t * @return this buffer\n\t * @throws IndexOutOfBoundsException if {@code writePosition} is smaller than\n\t * {@link #readPosition()} or greater than {@link #capacity()}\n\t * @since 5.0.1\n\t */\n\tDataBuffer writePosition(int writePosition);\n\n\t/**\n\t * Read a single byte at the given index from this data buffer.\n\t * @param index the index at which the byte will be read\n\t * @return the byte at the given index\n\t * @throws IndexOutOfBoundsException when {@code index} is out of bounds\n\t * @since 5.0.4\n\t */\n\tbyte getByte(int index);\n\n\t/**\n\t * Read a single byte from the current reading position from this data buffer.\n\t * @return the byte at this buffer's current reading position\n\t */\n\tbyte read();\n\n\t/**\n\t * Read this buffer's data into the specified destination, starting at the current\n\t * reading position of this buffer.\n\t * @param destination the array into which the bytes are to be written\n\t * @return this buffer\n\t */\n\tDataBuffer read(byte[] destination);\n\n\t/**\n\t * Read at most {@code length} bytes of this buffer into the specified destination,\n\t * starting at the current reading position of this buffer.\n\t * @param destination the array into which the bytes are to be written\n\t * @param offset the index within {@code destination} of the first byte to be written\n\t * @param length the maximum number of bytes to be written in {@code destination}\n\t * @return this buffer\n\t */\n\tDataBuffer read(byte[] destination, int offset, int length);\n\n\t/**\n\t * Write a single byte into this buffer at the current writing position.\n\t * @param b the byte to be written\n\t * @return this buffer\n\t */\n\tDataBuffer write(byte b);\n\n\t/**\n\t * Write the given source into this buffer, starting at the current writing position\n\t * of this buffer.\n\t * @param source the bytes to be written into this buffer\n\t * @return this buffer\n\t */\n\tDataBuffer write(byte[] source);\n\n\t/**\n\t * Write at most {@code length} bytes of the given source into this buffer, starting\n\t * at the current writing position of this buffer.\n\t * @param source the bytes to be written into this buffer\n\t * @param offset the index within {@code source} to start writing from\n\t * @param length the maximum number of bytes to be written from {@code source}\n\t * @return this buffer\n\t */\n\tDataBuffer write(byte[] source, int offset, int length);\n\n\t/**\n\t * Write one or more {@code DataBuffer}s to this buffer, starting at the current\n\t * writing position. It is the responsibility of the caller to\n\t * {@linkplain DataBufferUtils#release(DataBuffer) release} the given data buffers.\n\t * @param buffers the byte buffers to write into this buffer\n\t * @return this buffer\n\t */\n\tDataBuffer write(DataBuffer... buffers);\n\n\t/**\n\t * Write one or more {@link ByteBuffer} to this buffer, starting at the current\n\t * writing position.\n\t * @param buffers the byte buffers to write into this buffer\n\t * @return this buffer\n\t */\n\tDataBuffer write(ByteBuffer... buffers);\n\n\t/**\n\t * Write the given {@code CharSequence} using the given {@code Charset},\n\t * starting at the current writing position.\n\t * @param charSequence the char sequence to write into this buffer\n\t * @param charset the charset to encode the char sequence with\n\t * @return this buffer\n\t * @since 5.1.4\n\t */\n\tdefault DataBuffer write(CharSequence charSequence, Charset charset) {\n\t\tAssert.notNull(charSequence, \"CharSequence must not be null\");\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\tif (!charSequence.isEmpty()) {\n\t\t\tCharsetEncoder encoder = charset.newEncoder()\n\t\t\t\t\t.onMalformedInput(CodingErrorAction.REPLACE)\n\t\t\t\t\t.onUnmappableCharacter(CodingErrorAction.REPLACE);\n\t\t\tCharBuffer src = CharBuffer.wrap(charSequence);\n\t\t\tint averageSize = (int) Math.ceil(src.remaining() * encoder.averageBytesPerChar());\n\t\t\tensureWritable(averageSize);\n\t\t\twhile (true) {\n\t\t\t\tCoderResult cr;\n\t\t\t\tif (src.hasRemaining()) {\n\t\t\t\t\ttry (ByteBufferIterator iterator = writableByteBuffers()) {\n\t\t\t\t\t\tAssert.state(iterator.hasNext(), \"No ByteBuffer available\");\n\t\t\t\t\t\tByteBuffer dest = iterator.next();\n\t\t\t\t\t\tcr = encoder.encode(src, dest, true);\n\t\t\t\t\t\tif (cr.isUnderflow()) {\n\t\t\t\t\t\t\tcr = encoder.flush(dest);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twritePosition(writePosition() + dest.position());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcr = CoderResult.UNDERFLOW;\n\t\t\t\t}\n\t\t\t\tif (cr.isUnderflow()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (cr.isOverflow()) {\n\t\t\t\t\tint maxSize = (int) Math.ceil(src.remaining() * encoder.maxBytesPerChar());\n\t\t\t\t\tensureWritable(maxSize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Create a new {@code DataBuffer} whose contents is a shared subsequence of this\n\t * data buffer's content.  Data between this data buffer and the returned buffer is\n\t * shared; though changes in the returned buffer's position will not be reflected\n\t * in the reading nor writing position of this data buffer.\n\t * <p><strong>Note</strong> that this method will <strong>not</strong> call\n\t * {@link DataBufferUtils#retain(DataBuffer)} on the resulting slice: the reference\n\t * count will not be increased.\n\t * @param index the index at which to start the slice\n\t * @param length the length of the slice\n\t * @return the specified slice of this data buffer\n\t * @deprecated as of 6.0, in favor of {@link #split(int)}, which\n\t * has different semantics\n\t */\n\t@Deprecated(since = \"6.0\")\n\tDataBuffer slice(int index, int length);\n\n\t/**\n\t * Create a new {@code DataBuffer} whose contents is a shared, retained subsequence of this\n\t * data buffer's content.  Data between this data buffer and the returned buffer is\n\t * shared; though changes in the returned buffer's position will not be reflected\n\t * in the reading nor writing position of this data buffer.\n\t * <p><strong>Note</strong> that unlike {@link #slice(int, int)}, this method\n\t * <strong>will</strong> call {@link DataBufferUtils#retain(DataBuffer)} (or equivalent) on the\n\t * resulting slice.\n\t * @param index the index at which to start the slice\n\t * @param length the length of the slice\n\t * @return the specified, retained slice of this data buffer\n\t * @since 5.2\n\t * @deprecated as of 6.0, in favor of {@link #split(int)}, which\n\t * has different semantics\n\t */\n\t@Deprecated(since = \"6.0\")\n\tdefault DataBuffer retainedSlice(int index, int length) {\n\t\treturn DataBufferUtils.retain(slice(index, length));\n\t}\n\n\t/**\n\t * Splits this data buffer into two at the given index.\n\t *\n\t * <p>Data that precedes the {@code index} will be returned in a new buffer,\n\t * while this buffer will contain data that follows after {@code index}.\n\t * Memory between the two buffers is shared, but independent and cannot\n\t * overlap (unlike {@link #slice(int, int) slice}).\n\t *\n\t * <p>The {@linkplain #readPosition() read} and\n\t * {@linkplain #writePosition() write} position of the returned buffer are\n\t * truncated to fit within the buffers {@linkplain #capacity() capacity} if\n\t * necessary. The positions of this buffer are set to {@code 0} if they are\n\t * smaller than {@code index}.\n\t * @param index the index at which it should be split\n\t * @return a new data buffer, containing the bytes from index {@code 0} to\n\t * {@code index}\n\t * @since 6.0\n\t */\n\tDataBuffer split(int index);\n\n\t/**\n\t * Expose this buffer's bytes as a {@link ByteBuffer}. Data between this\n\t * {@code DataBuffer} and the returned {@code ByteBuffer} is shared; though\n\t * changes in the returned buffer's {@linkplain ByteBuffer#position() position}\n\t * will not be reflected in the reading nor writing position of this data buffer.\n\t * @return this data buffer as a byte buffer\n\t * @deprecated as of 6.0, in favor of {@link #toByteBuffer(ByteBuffer)},\n\t * {@link #readableByteBuffers()}, or {@link #writableByteBuffers()}.\n\t */\n\t@Deprecated(since = \"6.0\")\n\tByteBuffer asByteBuffer();\n\n\t/**\n\t * Expose a subsequence of this buffer's bytes as a {@link ByteBuffer}. Data between\n\t * this {@code DataBuffer} and the returned {@code ByteBuffer} is shared; though\n\t * changes in the returned buffer's {@linkplain ByteBuffer#position() position}\n\t * will not be reflected in the reading nor writing position of this data buffer.\n\t * @param index the index at which to start the byte buffer\n\t * @param length the length of the returned byte buffer\n\t * @return this data buffer as a byte buffer\n\t * @since 5.0.1\n\t * @deprecated as of 6.0, in favor of {@link #toByteBuffer(int, ByteBuffer, int, int)},\n\t * {@link #readableByteBuffers()}, or {@link #writableByteBuffers()}.\n\t */\n\t@Deprecated(since = \"6.0\")\n\tByteBuffer asByteBuffer(int index, int length);\n\n\t/**\n\t * Returns a {@link ByteBuffer} representation of this data buffer. Data\n\t * between this {@code DataBuffer} and the returned {@code ByteBuffer} is\n\t * <strong>not</strong> shared.\n\t * @return this data buffer as a byte buffer\n\t * @since 6.0\n\t * @see #readableByteBuffers()\n\t * @see #writableByteBuffers()\n\t * @deprecated as of 6.0.5, in favor of {@link #toByteBuffer(ByteBuffer)}\n\t */\n\t@Deprecated(since = \"6.0.5\")\n\tdefault ByteBuffer toByteBuffer() {\n\t\treturn toByteBuffer(readPosition(), readableByteCount());\n\t}\n\n\t/**\n\t * Returns a {@link ByteBuffer} representation of a subsequence of this\n\t * buffer's bytes. Data between this {@code DataBuffer} and the returned\n\t * {@code ByteBuffer} is <strong>not</strong> shared.\n\t * @return this data buffer as a byte buffer\n\t * @since 6.0\n\t * @see #readableByteBuffers()\n\t * @see #writableByteBuffers()\n\t * @deprecated as of 6.0.5, in favor of\n\t * {@link #toByteBuffer(int, ByteBuffer, int, int)}\n\t */\n\t@Deprecated(since = \"6.0.5\")\n\tByteBuffer toByteBuffer(int index, int length);\n\n\t/**\n\t * Copies this entire data buffer into the given destination\n\t * {@code ByteBuffer}, beginning at the current\n\t * {@linkplain #readPosition() reading position}, and the current\n\t * {@linkplain ByteBuffer#position() position} of destination byte buffer.\n\t * @param dest the destination byte buffer\n\t * @since 6.0.5\n\t */\n\tdefault void toByteBuffer(ByteBuffer dest) {\n\t\ttoByteBuffer(readPosition(), dest, dest.position(), readableByteCount());\n\t}\n\n\t/**\n\t * Copies the given length from this data buffer into the given destination\n\t * {@code ByteBuffer}, beginning at the given source position, and the\n\t * given destination position in the destination byte buffer.\n\t * @param srcPos the position of this data buffer from where copying should start\n\t * @param dest the destination byte buffer\n\t * @param destPos the position in {@code dest} to where copying should start\n\t * @param length the amount of data to copy\n\t * @since 6.0.5\n\t */\n\tvoid toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length);\n\n\t/**\n\t * Returns a closeable iterator over each {@link ByteBuffer} in this data\n\t * buffer that can be read. Calling this method is more efficient than\n\t * {@link #toByteBuffer()}, as no data is copied. However, the byte buffers\n\t * provided can only be used during the iteration.\n\t * <p><b>Note</b> that the returned iterator must be used in a\n\t * try-with-resources clause or explicitly\n\t * {@linkplain ByteBufferIterator#close() closed}.\n\t * @return a closeable iterator over the readable byte buffers contained in this data buffer\n\t * @since 6.0.5\n\t */\n\tByteBufferIterator readableByteBuffers();\n\n\t/**\n\t * Returns a closeable iterator over each {@link ByteBuffer} in this data\n\t * buffer that can be written to. The byte buffers provided can only be used\n\t * during the iteration.\n\t * <p><b>Note</b> that the returned iterator must be used in a\n\t * try-with-resources clause or explicitly\n\t * {@linkplain ByteBufferIterator#close() closed}.\n\t * @return a closeable iterator over the writable byte buffers contained in this data buffer\n\t * @since 6.0.5\n\t */\n\tByteBufferIterator writableByteBuffers();\n\n\t/**\n\t * Expose this buffer's data as an {@link InputStream}. Both data and read position are\n\t * shared between the returned stream and this data buffer. The underlying buffer will\n\t * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released}\n\t * when the input stream is {@linkplain InputStream#close() closed}.\n\t * @return this data buffer as an input stream\n\t * @see #asInputStream(boolean)\n\t */\n\tdefault InputStream asInputStream() {\n\t\treturn new DataBufferInputStream(this, false);\n\t}\n\n\t/**\n\t * Expose this buffer's data as an {@link InputStream}. Both data and read position are\n\t * shared between the returned stream and this data buffer.\n\t * @param releaseOnClose whether the underlying buffer will be\n\t * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is\n\t * {@linkplain InputStream#close() closed}.\n\t * @return this data buffer as an input stream\n\t * @since 5.0.4\n\t */\n\tdefault InputStream asInputStream(boolean releaseOnClose) {\n\t\treturn new DataBufferInputStream(this, releaseOnClose);\n\t}\n\n\t/**\n\t * Expose this buffer's data as an {@link OutputStream}. Both data and write position are\n\t * shared between the returned stream and this data buffer.\n\t * @return this data buffer as an output stream\n\t */\n\tdefault OutputStream asOutputStream() {\n\t\treturn new DataBufferOutputStream(this);\n\t}\n\n\t/**\n\t * Return this buffer's data a String using the specified charset. Default implementation\n\t * delegates to {@code toString(readPosition(), readableByteCount(), charset)}.\n\t * @param charset the character set to use\n\t * @return a string representation of all this buffers data\n\t * @since 5.2\n\t */\n\tdefault String toString(Charset charset) {\n\t\tAssert.notNull(charset, \"Charset must not be null\");\n\t\treturn toString(readPosition(), readableByteCount(), charset);\n\t}\n\n\t/**\n\t * Return a part of this buffer's data as a String using the specified charset.\n\t * @param index the index at which to start the string\n\t * @param length the number of bytes to use for the string\n\t * @param charset the charset to use\n\t * @return a string representation of a part of this buffers data\n\t * @since 5.2\n\t */\n\tString toString(int index, int length, Charset charset);\n\n\n\t/**\n\t * A dedicated iterator type that ensures the lifecycle of iterated\n\t * {@link ByteBuffer} elements. This iterator must be used in a\n\t * try-with-resources clause or explicitly {@linkplain #close() closed}.\n\t * @since 6.0.5\n\t * @see DataBuffer#readableByteBuffers()\n\t * @see DataBuffer#writableByteBuffers()\n\t */\n\tinterface ByteBufferIterator extends Iterator<ByteBuffer>, Closeable {\n\n\t\t@Override\n\t\tvoid close();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#factory()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link DataBufferFactory} that created this buffer.\r\n * @return the creating buffer factory\r\n */\r\nDataBufferFactory factory();",
    "tailType": "method_code"
  }
]