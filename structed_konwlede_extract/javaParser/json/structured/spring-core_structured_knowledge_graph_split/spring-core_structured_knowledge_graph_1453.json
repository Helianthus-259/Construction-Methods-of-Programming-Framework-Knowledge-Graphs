[
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#parseInternal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#parseInternal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleStartDocument(XMLEvent)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleStartDocument(final XMLEvent event) throws SAXException {\r\n    if (event.isStartDocument()) {\r\n        StartDocument startDocument = (StartDocument) event;\r\n        String xmlVersion = startDocument.getVersion();\r\n        if (StringUtils.hasLength(xmlVersion)) {\r\n            this.xmlVersion = xmlVersion;\r\n        }\r\n        if (startDocument.encodingSet()) {\r\n            this.encoding = startDocument.getCharacterEncodingScheme();\r\n        }\r\n    }\r\n    ContentHandler contentHandler = getContentHandler();\r\n    if (contentHandler != null) {\r\n        final Location location = event.getLocation();\r\n        contentHandler.setDocumentLocator(new Locator2() {\r\n\r\n            @Override\r\n            public int getColumnNumber() {\r\n                return (location != null ? location.getColumnNumber() : -1);\r\n            }\r\n\r\n            @Override\r\n            public int getLineNumber() {\r\n                return (location != null ? location.getLineNumber() : -1);\r\n            }\r\n\r\n            @Override\r\n            @Nullable\r\n            public String getPublicId() {\r\n                return (location != null ? location.getPublicId() : null);\r\n            }\r\n\r\n            @Override\r\n            @Nullable\r\n            public String getSystemId() {\r\n                return (location != null ? location.getSystemId() : null);\r\n            }\r\n\r\n            @Override\r\n            public String getXMLVersion() {\r\n                return xmlVersion;\r\n            }\r\n\r\n            @Override\r\n            @Nullable\r\n            public String getEncoding() {\r\n                return encoding;\r\n            }\r\n        });\r\n        contentHandler.startDocument();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleStartDocument(XMLEvent)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleStartElement(StartElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleStartElement(StartElement startElement) throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        QName qName = startElement.getName();\r\n        if (hasNamespacesFeature()) {\r\n            for (Iterator i = startElement.getNamespaces(); i.hasNext(); ) {\r\n                Namespace namespace = (Namespace) i.next();\r\n                startPrefixMapping(namespace.getPrefix(), namespace.getNamespaceURI());\r\n            }\r\n            for (Iterator i = startElement.getAttributes(); i.hasNext(); ) {\r\n                Attribute attribute = (Attribute) i.next();\r\n                QName attributeName = attribute.getName();\r\n                startPrefixMapping(attributeName.getPrefix(), attributeName.getNamespaceURI());\r\n            }\r\n            getContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName), getAttributes(startElement));\r\n        } else {\r\n            getContentHandler().startElement(\"\", \"\", toQualifiedName(qName), getAttributes(startElement));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleStartElement(StartElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleCharacters(Characters)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleCharacters(Characters characters) throws SAXException {\r\n    char[] data = characters.getData().toCharArray();\r\n    if (getContentHandler() != null && characters.isIgnorableWhiteSpace()) {\r\n        getContentHandler().ignorableWhitespace(data, 0, data.length);\r\n        return;\r\n    }\r\n    if (characters.isCData() && getLexicalHandler() != null) {\r\n        getLexicalHandler().startCDATA();\r\n    }\r\n    if (getContentHandler() != null) {\r\n        getContentHandler().characters(data, 0, data.length);\r\n    }\r\n    if (characters.isCData() && getLexicalHandler() != null) {\r\n        getLexicalHandler().endCDATA();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleCharacters(Characters)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleEndElement(EndElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEndElement(EndElement endElement) throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        QName qName = endElement.getName();\r\n        if (hasNamespacesFeature()) {\r\n            getContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName));\r\n            for (Iterator i = endElement.getNamespaces(); i.hasNext(); ) {\r\n                Namespace namespace = (Namespace) i.next();\r\n                endPrefixMapping(namespace.getPrefix());\r\n            }\r\n        } else {\r\n            getContentHandler().endElement(\"\", \"\", toQualifiedName(qName));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleEndElement(EndElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleEndDocument()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEndDocument() throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        getContentHandler().endDocument();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleEndDocument()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleNotationDeclaration(NotationDeclaration)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleNotationDeclaration(NotationDeclaration declaration) throws SAXException {\r\n    if (getDTDHandler() != null) {\r\n        getDTDHandler().notationDecl(declaration.getName(), declaration.getPublicId(), declaration.getSystemId());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleNotationDeclaration(NotationDeclaration)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleEntityDeclaration(EntityDeclaration)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleEntityDeclaration(EntityDeclaration entityDeclaration) throws SAXException {\r\n    if (getDTDHandler() != null) {\r\n        getDTDHandler().unparsedEntityDecl(entityDeclaration.getName(), entityDeclaration.getPublicId(), entityDeclaration.getSystemId(), entityDeclaration.getNotationName());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleEntityDeclaration(EntityDeclaration)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleProcessingInstruction(ProcessingInstruction)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleProcessingInstruction(ProcessingInstruction pi) throws SAXException {\r\n    if (getContentHandler() != null) {\r\n        getContentHandler().processingInstruction(pi.getTarget(), pi.getData());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleProcessingInstruction(ProcessingInstruction)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader#handleComment(Comment)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void handleComment(Comment comment) throws SAXException {\r\n    if (getLexicalHandler() != null) {\r\n        char[] ch = comment.getText().toCharArray();\r\n        getLexicalHandler().comment(ch, 0, ch.length);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.StaxEventXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.StaxEventXMLReader#handleComment(Comment)",
    "tailType": "method"
  }
]