[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldResize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnGet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPurgeOnGet() {\r\n    this.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\r\n    for (int i = 1; i <= 5; i++) {\r\n        this.map.put(i, String.valueOf(i));\r\n    }\r\n    this.map.getMockReference(1, Restructure.NEVER).queueForPurge();\r\n    this.map.getMockReference(3, Restructure.NEVER).queueForPurge();\r\n    assertThat(this.map.getReference(1, Restructure.WHEN_NECESSARY)).isNull();\r\n    assertThat(this.map.get(2)).isEqualTo(\"2\");\r\n    assertThat(this.map.getReference(3, Restructure.WHEN_NECESSARY)).isNull();\r\n    assertThat(this.map.get(4)).isEqualTo(\"4\");\r\n    assertThat(this.map.get(5)).isEqualTo(\"5\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnGet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnGet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnPut()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPurgeOnPut() {\r\n    this.map = new TestWeakConcurrentCache<>(1, 0.75f, 1);\r\n    for (int i = 1; i <= 5; i++) {\r\n        this.map.put(i, String.valueOf(i));\r\n    }\r\n    this.map.getMockReference(1, Restructure.NEVER).queueForPurge();\r\n    this.map.getMockReference(3, Restructure.NEVER).queueForPurge();\r\n    this.map.put(1, \"1\");\r\n    assertThat(this.map.get(1)).isEqualTo(\"1\");\r\n    assertThat(this.map.get(2)).isEqualTo(\"2\");\r\n    assertThat(this.map.getReference(3, Restructure.WHEN_NECESSARY)).isNull();\r\n    assertThat(this.map.get(4)).isEqualTo(\"4\");\r\n    assertThat(this.map.get(5)).isEqualTo(\"5\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnPut()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPurgeOnPut()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutIfAbsent() {\r\n    assertThat(this.map.putIfAbsent(123, \"123\")).isNull();\r\n    assertThat(this.map.putIfAbsent(123, \"123b\")).isEqualTo(\"123\");\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutIfAbsentWithNullValue() {\r\n    assertThat(this.map.putIfAbsent(123, null)).isNull();\r\n    assertThat(this.map.putIfAbsent(123, \"123\")).isNull();\r\n    assertThat(this.map.get(123)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutIfAbsentWithNullKey() {\r\n    assertThat(this.map.putIfAbsent(null, \"123\")).isNull();\r\n    assertThat(this.map.putIfAbsent(null, \"123b\")).isEqualTo(\"123\");\r\n    assertThat(this.map.get(null)).isEqualTo(\"123\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutIfAbsentWithNullKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldRemoveKeyAndValue() {\r\n    this.map.put(123, \"123\");\r\n    assertThat(this.map.remove(123, \"456\")).isFalse();\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n    assertThat(this.map.remove(123, \"123\")).isTrue();\r\n    assertThat(this.map.containsKey(123)).isFalse();\r\n    assertThat(this.map).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValueWithExistingNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldRemoveKeyAndValueWithExistingNull() {\r\n    this.map.put(123, null);\r\n    assertThat(this.map.remove(123, \"456\")).isFalse();\r\n    assertThat(this.map.get(123)).isNull();\r\n    assertThat(this.map.remove(123, null)).isTrue();\r\n    assertThat(this.map.containsKey(123)).isFalse();\r\n    assertThat(this.map).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]