[
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#throwIOException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object throwIOException() throws IOException {\r\n    throw new IOException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#throwIOException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#throwIllegalArgumentException()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object throwIllegalArgumentException() {\r\n    throw new IllegalArgumentException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#throwIllegalArgumentException()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.InstanceFilterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static java.util.Arrays.asList;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Stephane Nicoll\n */\nclass InstanceFilterTests {\n\n\t@Test\n\tvoid emptyFilterApplyMatchIfEmpty() {\n\t\tInstanceFilter<String> filter = new InstanceFilter<>(null, null, true);\n\t\tmatch(filter, \"foo\");\n\t\tmatch(filter, \"bar\");\n\t}\n\n\t@Test\n\tvoid includesFilter() {\n\t\tInstanceFilter<String> filter = new InstanceFilter<>(\n\t\t\t\tasList(\"First\", \"Second\"), null, true);\n\t\tmatch(filter, \"Second\");\n\t\tdoNotMatch(filter, \"foo\");\n\t}\n\n\t@Test\n\tvoid excludesFilter() {\n\t\tInstanceFilter<String> filter = new InstanceFilter<>(\n\t\t\t\tnull, asList(\"First\", \"Second\"), true);\n\t\tdoNotMatch(filter, \"Second\");\n\t\tmatch(filter, \"foo\");\n\t}\n\n\t@Test\n\tvoid includesAndExcludesFilters() {\n\t\tInstanceFilter<String> filter = new InstanceFilter<>(\n\t\t\t\tasList(\"foo\", \"Bar\"), asList(\"First\", \"Second\"), true);\n\t\tdoNotMatch(filter, \"Second\");\n\t\tmatch(filter, \"foo\");\n\t}\n\n\t@Test\n\tvoid includesAndExcludesFiltersConflict() {\n\t\tInstanceFilter<String> filter = new InstanceFilter<>(\n\t\t\t\tList.of(\"First\"), List.of(\"First\"), true);\n\t\tdoNotMatch(filter, \"First\");\n\t}\n\n\tprivate <T> void match(InstanceFilter<T> filter, T candidate) {\n\t\tassertThat(filter.match(candidate)).as(\"filter '\" + filter + \"' should match \" + candidate).isTrue();\n\t}\n\n\tprivate <T> void doNotMatch(InstanceFilter<T> filter, T candidate) {\n\t\tassertThat(filter.match(candidate)).as(\"filter '\" + filter + \"' should not match \" + candidate).isFalse();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#emptyFilterApplyMatchIfEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid emptyFilterApplyMatchIfEmpty() {\r\n    InstanceFilter<String> filter = new InstanceFilter<>(null, null, true);\r\n    match(filter, \"foo\");\r\n    match(filter, \"bar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilterTests#emptyFilterApplyMatchIfEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#emptyFilterApplyMatchIfEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#includesFilter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid includesFilter() {\r\n    InstanceFilter<String> filter = new InstanceFilter<>(asList(\"First\", \"Second\"), null, true);\r\n    match(filter, \"Second\");\r\n    doNotMatch(filter, \"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilterTests#includesFilter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#includesFilter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#excludesFilter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid excludesFilter() {\r\n    InstanceFilter<String> filter = new InstanceFilter<>(null, asList(\"First\", \"Second\"), true);\r\n    doNotMatch(filter, \"Second\");\r\n    match(filter, \"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilterTests#excludesFilter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#excludesFilter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#includesAndExcludesFilters()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid includesAndExcludesFilters() {\r\n    InstanceFilter<String> filter = new InstanceFilter<>(asList(\"foo\", \"Bar\"), asList(\"First\", \"Second\"), true);\r\n    doNotMatch(filter, \"Second\");\r\n    match(filter, \"foo\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.InstanceFilterTests#includesAndExcludesFilters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#includesAndExcludesFilters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.InstanceFilterTests#includesAndExcludesFiltersConflict()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid includesAndExcludesFiltersConflict() {\r\n    InstanceFilter<String> filter = new InstanceFilter<>(List.of(\"First\"), List.of(\"First\"), true);\r\n    doNotMatch(filter, \"First\");\r\n}",
    "tailType": "method_code"
  }
]