[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#parameterizedType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#parameterizedType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#arrayClassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid arrayClassType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"arrayClassType\"));\r\n    assertThat(type.getType()).isInstanceOf(Class.class);\r\n    assertThat(((Class) type.getType()).isArray()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#arrayClassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#arrayClassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericArrayType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid genericArrayType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\r\n    assertThat(type.getType()).isInstanceOf(GenericArrayType.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#genericArrayType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#genericArrayType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#wildcardType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid wildcardType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"wildcardType\"));\r\n    assertThat(type.getType()).isInstanceOf(ParameterizedType.class);\r\n    assertThat(type.getGeneric().getType()).isInstanceOf(WildcardType.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#wildcardType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#wildcardType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#typeVariableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeVariableType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"typeVariableType\"));\r\n    assertThat(type.getType()).isInstanceOf(TypeVariable.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#typeVariableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#typeVariableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForClassArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComponentTypeForClassArray() throws Exception {\r\n    Field field = Fields.class.getField(\"arrayClassType\");\r\n    ResolvableType type = ResolvableType.forField(field);\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.getComponentType().getType()).isEqualTo(((Class) field.getGenericType()).componentType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getComponentTypeForClassArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForClassArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForGenericArrayType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getComponentTypeForGenericArrayType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.getComponentType().getType()).isEqualTo(((GenericArrayType) type.getType()).getGenericComponentType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#getComponentTypeForGenericArrayType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#getComponentTypeForGenericArrayType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]