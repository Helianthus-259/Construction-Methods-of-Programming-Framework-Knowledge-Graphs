[
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Callback[],boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] determineTypes(Callback[] callbacks, boolean checkAll) {\r\n    Type[] types = new Type[callbacks.length];\r\n    for (int i = 0; i < types.length; i++) {\r\n        types[i] = determineType(callbacks[i], checkAll);\r\n    }\r\n    return types;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineTypes(Callback[],boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#getGenerators(Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static CallbackGenerator[] getGenerators(Type[] callbackTypes) {\r\n    CallbackGenerator[] generators = new CallbackGenerator[callbackTypes.length];\r\n    for (int i = 0; i < generators.length; i++) {\r\n        generators[i] = getGenerator(callbackTypes[i]);\r\n    }\r\n    return generators;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#getGenerators(Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineType(Callback,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Type determineType(Callback callback, boolean checkAll) {\r\n    if (callback == null) {\r\n        throw new IllegalStateException(\"Callback is null\");\r\n    }\r\n    return determineType(callback.getClass(), checkAll);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineType(Callback,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#determineType(Class,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Type determineType(Class callbackType, boolean checkAll) {\r\n    Class cur = null;\r\n    Type type = null;\r\n    for (CallbackInfo info : CALLBACKS) {\r\n        if (info.cls.isAssignableFrom(callbackType)) {\r\n            if (cur != null) {\r\n                throw new IllegalStateException(\"Callback implements both \" + cur + \" and \" + info.cls);\r\n            }\r\n            cur = info.cls;\r\n            type = info.type;\r\n            if (!checkAll) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (cur == null) {\r\n        throw new IllegalStateException(\"Unknown callback type \" + callbackType);\r\n    }\r\n    return type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#determineType(Class,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo#getGenerator(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static CallbackGenerator getGenerator(Type callbackType) {\r\n    for (CallbackInfo info : CALLBACKS) {\r\n        if (info.type.equals(callbackType)) {\r\n            return info.generator;\r\n        }\r\n    }\r\n    throw new IllegalStateException(\"Unknown callback type \" + callbackType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.CallbackInfo",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.CallbackInfo#getGenerator(Type)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.Dispatcher",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.Dispatcher",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\n/**\n * Dispatching {@link Enhancer} callback. This is identical to the\n * {@link LazyLoader} interface but needs to be separate so that <code>Enhancer</code>\n * knows which type of code to generate.\n */\npublic interface Dispatcher extends Callback {\n    /**\n     * Return the object which the original method invocation should\n     * be dispatched. This method is called for <b>every</b> method invocation.\n     * @return an object that can invoke the method\n     */\n    Object loadObject() throws Exception;\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Dispatcher#loadObject()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the object which the original method invocation should\r\n * be dispatched. This method is called for <b>every</b> method invocation.\r\n * @return an object that can invoke the method\r\n */\r\nObject loadObject() throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Dispatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.Dispatcher#loadObject()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.Dispatcher",
    "headType": "class",
    "relation": "extend",
    "tail": "Callback",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.DispatcherGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.DispatcherGenerator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.DispatcherGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nclass DispatcherGenerator implements CallbackGenerator {\n    public static final DispatcherGenerator INSTANCE =\n      new DispatcherGenerator(false);\n    public static final DispatcherGenerator PROXY_REF_INSTANCE =\n      new DispatcherGenerator(true);\n\n    private static final Type DISPATCHER =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.Dispatcher\");\n    private static final Type PROXY_REF_DISPATCHER =\n      TypeUtils.parseType(\"org.springframework.cglib.proxy.ProxyRefDispatcher\");\n    private static final Signature LOAD_OBJECT =\n      TypeUtils.parseSignature(\"Object loadObject()\");\n    private static final Signature PROXY_REF_LOAD_OBJECT =\n      TypeUtils.parseSignature(\"Object loadObject(Object)\");\n\n    private boolean proxyRef;\n\n    private DispatcherGenerator(boolean proxyRef) {\n        this.proxyRef = proxyRef;\n    }\n\n    @Override\n\tpublic void generate(ClassEmitter ce, Context context, List methods) {\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            MethodInfo method = (MethodInfo)it.next();\n            if (!TypeUtils.isProtected(method.getModifiers())) {\n                CodeEmitter e = context.beginMethod(ce, method);\n                context.emitCallback(e, context.getIndex(method));\n                if (proxyRef) {\n                    e.load_this();\n                    e.invoke_interface(PROXY_REF_DISPATCHER, PROXY_REF_LOAD_OBJECT);\n                } else {\n                    e.invoke_interface(DISPATCHER, LOAD_OBJECT);\n                }\n                e.checkcast(method.getClassInfo().getType());\n                e.load_args();\n                e.invoke(method);\n                e.return_value();\n                e.end_method();\n            }\n        }\n    }\n\n    @Override\n\tpublic void generateStatic(CodeEmitter e, Context context, List methods) { }\n}\n",
    "tailType": "class_code"
  }
]