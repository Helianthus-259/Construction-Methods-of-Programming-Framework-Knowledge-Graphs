[
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#removeAttribute(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#removeAttribute(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#removeAttribute(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#hasAttribute(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasAttribute(String name) {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    return this.attributes.containsKey(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#hasAttribute(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#hasAttribute(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#attributeNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String[] attributeNames() {\r\n    return StringUtils.toStringArray(this.attributes.keySet());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#attributeNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#attributeNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#copyAttributesFrom(AttributeAccessor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the attributes from the supplied AttributeAccessor to this accessor.\r\n * @param source the AttributeAccessor to copy from\r\n */\r\nprotected void copyAttributesFrom(AttributeAccessor source) {\r\n    Assert.notNull(source, \"Source must not be null\");\r\n    String[] attributeNames = source.attributeNames();\r\n    for (String attributeName : attributeNames) {\r\n        setAttribute(attributeName, source.getAttribute(attributeName));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#copyAttributesFrom(AttributeAccessor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof AttributeAccessorSupport that && this.attributes.equals(that.attributes)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.attributes.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.BridgeMethodResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.ReflectionUtils.MethodFilter;\n\n/**\n * Helper for resolving synthetic {@link Method#isBridge bridge Methods} to the\n * {@link Method} being bridged.\n *\n * <p>Given a synthetic {@link Method#isBridge bridge Method} returns the {@link Method}\n * being bridged. A bridge method may be created by the compiler when extending a\n * parameterized type whose methods have parameterized arguments. During runtime\n * invocation the bridge {@link Method} may be invoked and/or used via reflection.\n * When attempting to locate annotations on {@link Method Methods}, it is wise to check\n * for bridge {@link Method Methods} as appropriate and find the bridged {@link Method}.\n *\n * <p>See <a href=\"https://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5\">\n * The Java Language Specification</a> for more details on the use of bridge methods.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Phillip Webb\n * @since 2.0\n */\npublic final class BridgeMethodResolver {\n\n\tprivate static final Map<Object, Method> cache = new ConcurrentReferenceHashMap<>();\n\n\tprivate BridgeMethodResolver() {\n\t}\n\n\n\t/**\n\t * Find the local original method for the supplied {@link Method bridge Method}.\n\t * <p>It is safe to call this method passing in a non-bridge {@link Method} instance.\n\t * In such a case, the supplied {@link Method} instance is returned directly to the caller.\n\t * Callers are <strong>not</strong> required to check for bridging before calling this method.\n\t * @param bridgeMethod the method to introspect against its declaring class\n\t * @return the original method (either the bridged method or the passed-in method\n\t * if no more specific one could be found)\n\t * @see #getMostSpecificMethod(Method, Class)\n\t */\n\tpublic static Method findBridgedMethod(Method bridgeMethod) {\n\t\treturn resolveBridgeMethod(bridgeMethod, bridgeMethod.getDeclaringClass());\n\t}\n\n\t/**\n\t * Determine the most specific method for the supplied {@link Method bridge Method}\n\t * in the given class hierarchy, even if not available on the local declaring class.\n\t * <p>This is effectively a combination of {@link ClassUtils#getMostSpecificMethod}\n\t * and {@link #findBridgedMethod}, resolving the original method even if no bridge\n\t * method has been generated at the same class hierarchy level (a known difference\n\t * between the Eclipse compiler and regular javac).\n\t * @param bridgeMethod the method to introspect against the given target class\n\t * @param targetClass the target class to find the most specific method on\n\t * @return the most specific method corresponding to the given bridge method\n\t * (can be the original method if no more specific one could be found)\n\t * @since 6.1.3\n\t * @see #findBridgedMethod\n\t * @see org.springframework.util.ClassUtils#getMostSpecificMethod\n\t */\n\tpublic static Method getMostSpecificMethod(Method bridgeMethod, @Nullable Class<?> targetClass) {\n\t\tif (targetClass != null &&\n\t\t\t\t!ClassUtils.getUserClass(bridgeMethod.getDeclaringClass()).isAssignableFrom(targetClass) &&\n\t\t\t\t!Proxy.isProxyClass(bridgeMethod.getDeclaringClass())) {\n\t\t\t// From a different class hierarchy, and not a JDK or CGLIB proxy either -> return as-is.\n\t\t\treturn bridgeMethod;\n\t\t}\n\n\t\tMethod specificMethod = ClassUtils.getMostSpecificMethod(bridgeMethod, targetClass);\n\t\treturn resolveBridgeMethod(specificMethod,\n\t\t\t\t(targetClass != null ? targetClass : specificMethod.getDeclaringClass()));\n\t}\n\n\tprivate static Method resolveBridgeMethod(Method bridgeMethod, Class<?> targetClass) {\n\t\tboolean localBridge = (targetClass == bridgeMethod.getDeclaringClass());\n\t\tClass<?> userClass = targetClass;\n\t\tif (!bridgeMethod.isBridge() && localBridge) {\n\t\t\tuserClass = ClassUtils.getUserClass(targetClass);\n\t\t\tif (userClass == targetClass) {\n\t\t\t\treturn bridgeMethod;\n\t\t\t}\n\t\t}\n\n\t\tObject cacheKey = (localBridge ? bridgeMethod : new MethodClassKey(bridgeMethod, targetClass));\n\t\tMethod bridgedMethod = cache.get(cacheKey);\n\t\tif (bridgedMethod == null) {\n\t\t\t// Gather all methods with matching name and parameter size.\n\t\t\tList<Method> candidateMethods = new ArrayList<>();\n\t\t\tMethodFilter filter = (candidateMethod -> isBridgedCandidateFor(candidateMethod, bridgeMethod));\n\t\t\tReflectionUtils.doWithMethods(userClass, candidateMethods::add, filter);\n\t\t\tif (!candidateMethods.isEmpty()) {\n\t\t\t\tbridgedMethod = (candidateMethods.size() == 1 ? candidateMethods.get(0) :\n\t\t\t\t\t\tsearchCandidates(candidateMethods, bridgeMethod));\n\t\t\t}\n\t\t\tif (bridgedMethod == null) {\n\t\t\t\t// A bridge method was passed in but we couldn't find the bridged method.\n\t\t\t\t// Let's proceed with the passed-in method and hope for the best...\n\t\t\t\tbridgedMethod = bridgeMethod;\n\t\t\t}\n\t\t\tcache.put(cacheKey, bridgedMethod);\n\t\t}\n\t\treturn bridgedMethod;\n\t}\n\n\t/**\n\t * Returns {@code true} if the supplied '{@code candidateMethod}' can be\n\t * considered a valid candidate for the {@link Method} that is {@link Method#isBridge() bridged}\n\t * by the supplied {@link Method bridge Method}. This method performs inexpensive\n\t * checks and can be used to quickly filter for a set of possible matches.\n\t */\n\tprivate static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {\n\t\treturn (!candidateMethod.isBridge() &&\n\t\t\t\tcandidateMethod.getName().equals(bridgeMethod.getName()) &&\n\t\t\t\tcandidateMethod.getParameterCount() == bridgeMethod.getParameterCount());\n\t}\n\n\t/**\n\t * Searches for the bridged method in the given candidates.\n\t * @param candidateMethods the List of candidate Methods\n\t * @param bridgeMethod the bridge method\n\t * @return the bridged method, or {@code null} if none found\n\t */\n\tprivate static @Nullable Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {\n\t\tif (candidateMethods.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tMethod previousMethod = null;\n\t\tboolean sameSig = true;\n\t\tfor (Method candidateMethod : candidateMethods) {\n\t\t\tif (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {\n\t\t\t\treturn candidateMethod;\n\t\t\t}\n\t\t\telse if (previousMethod != null) {\n\t\t\t\tsameSig = sameSig && Arrays.equals(\n\t\t\t\t\t\tcandidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());\n\t\t\t}\n\t\t\tpreviousMethod = candidateMethod;\n\t\t}\n\t\treturn (sameSig ? candidateMethods.get(0) : null);\n\t}\n\n\t/**\n\t * Determines whether the bridge {@link Method} is the bridge for the\n\t * supplied candidate {@link Method}.\n\t */\n\tstatic boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {\n\t\tif (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {\n\t\t\treturn true;\n\t\t}\n\t\tMethod method = findGenericDeclaration(bridgeMethod);\n\t\treturn (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass));\n\t}\n\n\t/**\n\t * Returns {@code true} if the {@link Type} signature of both the supplied\n\t * {@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}\n\t * are equal after resolving all types against the declaringType, otherwise\n\t * returns {@code false}.\n\t */\n\tprivate static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {\n\t\tType[] genericParameters = genericMethod.getGenericParameterTypes();\n\t\tif (genericParameters.length != candidateMethod.getParameterCount()) {\n\t\t\treturn false;\n\t\t}\n\t\tClass<?>[] candidateParameters = candidateMethod.getParameterTypes();\n\t\tfor (int i = 0; i < candidateParameters.length; i++) {\n\t\t\tResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass);\n\t\t\tClass<?> candidateParameter = candidateParameters[i];\n\t\t\tif (candidateParameter.isArray()) {\n\t\t\t\t// An array type: compare the component type.\n\t\t\t\tif (!candidateParameter.componentType().equals(genericParameter.getComponentType().toClass())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// A non-array type: compare the type itself.\n\t\t\tif (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(\n\t\t\t\t\tClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Searches for the generic {@link Method} declaration whose erased signature\n\t * matches that of the supplied bridge method.\n\t * @throws IllegalStateException if the generic declaration cannot be found\n\t */\n\tprivate static @Nullable Method findGenericDeclaration(Method bridgeMethod) {\n\t\tif (!bridgeMethod.isBridge()) {\n\t\t\treturn bridgeMethod;\n\t\t}\n\n\t\t// Search parent types for method that has same signature as bridge.\n\t\tClass<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();\n\t\twhile (superclass != null && Object.class != superclass) {\n\t\t\tMethod method = searchForMatch(superclass, bridgeMethod);\n\t\t\tif (method != null && !method.isBridge()) {\n\t\t\t\treturn method;\n\t\t\t}\n\t\t\tsuperclass = superclass.getSuperclass();\n\t\t}\n\n\t\tClass<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());\n\t\treturn searchInterfaces(interfaces, bridgeMethod);\n\t}\n\n\tprivate static @Nullable Method searchInterfaces(Class<?>[] interfaces, Method bridgeMethod) {\n\t\tfor (Class<?> ifc : interfaces) {\n\t\t\tMethod method = searchForMatch(ifc, bridgeMethod);\n\t\t\tif (method != null && !method.isBridge()) {\n\t\t\t\treturn method;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmethod = searchInterfaces(ifc.getInterfaces(), bridgeMethod);\n\t\t\t\tif (method != null) {\n\t\t\t\t\treturn method;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * If the supplied {@link Class} has a declared {@link Method} whose signature matches\n\t * that of the supplied {@link Method}, then this matching {@link Method} is returned,\n\t * otherwise {@code null} is returned.\n\t */\n\tprivate static @Nullable Method searchForMatch(Class<?> type, Method bridgeMethod) {\n\t\ttry {\n\t\t\treturn type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes());\n\t\t}\n\t\tcatch (NoSuchMethodException ex) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Compare the signatures of the bridge method and the method which it bridges. If\n\t * the parameter and return types are the same, it is a 'visibility' bridge method\n\t * introduced in Java 6 to fix <a href=\"https://bugs.openjdk.org/browse/JDK-6342411\">\n\t * JDK-6342411</a>.\n\t * @return whether signatures match as described\n\t */\n\tpublic static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {\n\t\tif (bridgeMethod == bridgedMethod) {\n\t\t\t// Same method: for common purposes, return true to proceed as if it was a visibility bridge.\n\t\t\treturn true;\n\t\t}\n\t\tif (ClassUtils.getUserClass(bridgeMethod.getDeclaringClass()) != bridgeMethod.getDeclaringClass()) {\n\t\t\t// Method on generated subclass: return false to consistently ignore it for visibility purposes.\n\t\t\treturn false;\n\t\t}\n\t\treturn (bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()) &&\n\t\t\t\tbridgeMethod.getParameterCount() == bridgedMethod.getParameterCount() &&\n\t\t\t\tArrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()));\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]