[
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#FLOAT_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#FLOAT_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#LONG_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#LONG_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#DOUBLE_TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#DOUBLE_TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#sort",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#sort",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#valueBuffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#valueBuffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#valueBegin",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#valueBegin",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Type#valueEnd",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Type#valueEnd",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Type#getType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Methods to get Type(s) from a descriptor, a reflected Method or Constructor, other types, etc.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the {@link Type} corresponding to the given type descriptor.\r\n *\r\n * @param typeDescriptor a field or method type descriptor.\r\n * @return the {@link Type} corresponding to the given type descriptor.\r\n */\r\npublic static Type getType(final String typeDescriptor) {\r\n    return getTypeInternal(typeDescriptor, 0, typeDescriptor.length());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link Type} corresponding to the given class.\r\n *\r\n * @param clazz a class.\r\n * @return the {@link Type} corresponding to the given class.\r\n */\r\npublic static Type getType(final Class<?> clazz) {\r\n    if (clazz.isPrimitive()) {\r\n        if (clazz == Integer.TYPE) {\r\n            return INT_TYPE;\r\n        } else if (clazz == Void.TYPE) {\r\n            return VOID_TYPE;\r\n        } else if (clazz == Boolean.TYPE) {\r\n            return BOOLEAN_TYPE;\r\n        } else if (clazz == Byte.TYPE) {\r\n            return BYTE_TYPE;\r\n        } else if (clazz == Character.TYPE) {\r\n            return CHAR_TYPE;\r\n        } else if (clazz == Short.TYPE) {\r\n            return SHORT_TYPE;\r\n        } else if (clazz == Double.TYPE) {\r\n            return DOUBLE_TYPE;\r\n        } else if (clazz == Float.TYPE) {\r\n            return FLOAT_TYPE;\r\n        } else if (clazz == Long.TYPE) {\r\n            return LONG_TYPE;\r\n        } else {\r\n            throw new AssertionError();\r\n        }\r\n    } else {\r\n        return getType(getDescriptor(clazz));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.Type#getType(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the method {@link Type} corresponding to the given constructor.\r\n *\r\n * @param constructor a {@link Constructor} object.\r\n * @return the method {@link Type} corresponding to the given constructor.\r\n */\r\npublic static Type getType(final Constructor<?> constructor) {\r\n    return getType(getConstructorDescriptor(constructor));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.Type",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.Type#getType(Constructor<?>)",
    "tailType": "method"
  }
]