[
  {
    "head": "org.springframework.util.AutoPopulatingListTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AutoPopulatingListTests#serialization()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AutoPopulatingListTests#serialization()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.MockElementFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.MockElementFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\n\nimport org.assertj.core.api.InstanceOfAssertFactories;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.io.SerializationTestUtils;\nimport org.springframework.tests.sample.objects.TestObject;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Rob Harrop\n * @author Juergen Hoeller\n */\nclass AutoPopulatingListTests {\n\n\t@Test\n\tvoid withClass() {\n\t\tdoTestWithClass(new AutoPopulatingList<>(TestObject.class));\n\t}\n\n\t@Test\n\tvoid withClassAndUserSuppliedBackingList() {\n\t\tdoTestWithClass(new AutoPopulatingList<>(new ArrayList<>(), TestObject.class));\n\t}\n\n\t@Test\n\tvoid withElementFactory() {\n\t\tdoTestWithElementFactory(new AutoPopulatingList<>(new MockElementFactory()));\n\t}\n\n\t@Test\n\tvoid withElementFactoryAndUserSuppliedBackingList() {\n\t\tdoTestWithElementFactory(new AutoPopulatingList<>(new ArrayList<>(), new MockElementFactory()));\n\t}\n\n\tprivate void doTestWithClass(AutoPopulatingList<Object> list) {\n\t\tObject lastElement = null;\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\tObject element = list.get(x);\n\t\t\tassertThat(list.get(x)).as(\"Element is null\").isNotNull();\n\t\t\tboolean condition = element instanceof TestObject;\n\t\t\tassertThat(condition).as(\"Element is incorrect type\").isTrue();\n\t\t\tassertThat(element).isNotSameAs(lastElement);\n\t\t\tlastElement = element;\n\t\t}\n\n\t\tString helloWorld = \"Hello World!\";\n\t\tlist.add(10, null);\n\t\tlist.add(11, helloWorld);\n\t\tassertThat(list).element(11, InstanceOfAssertFactories.STRING).isEqualTo(helloWorld);\n\n\t\tboolean condition3 = list.get(10) instanceof TestObject;\n\t\tassertThat(condition3).isTrue();\n\t\tboolean condition2 = list.get(12) instanceof TestObject;\n\t\tassertThat(condition2).isTrue();\n\t\tboolean condition1 = list.get(13) instanceof TestObject;\n\t\tassertThat(condition1).isTrue();\n\t\tboolean condition = list.get(20) instanceof TestObject;\n\t\tassertThat(condition).isTrue();\n\t}\n\n\tprivate void doTestWithElementFactory(AutoPopulatingList<Object> list) {\n\t\tdoTestWithClass(list);\n\n\t\tfor (int x = 0; x < list.size(); x++) {\n\t\t\tObject element = list.get(x);\n\t\t\tif (element instanceof TestObject) {\n\t\t\t\tassertThat(((TestObject) element).getAge()).isEqualTo(x);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Test\n\tvoid serialization() throws Exception {\n\t\tAutoPopulatingList<?> list = new AutoPopulatingList<Object>(TestObject.class);\n\t\tassertThat(SerializationTestUtils.serializeAndDeserialize(list)).isEqualTo(list);\n\t}\n\n\n\tprivate static class MockElementFactory implements AutoPopulatingList.ElementFactory<Object> {\n\n\t\t@Override\n\t\tpublic Object createElement(int index) {\n\t\t\tTestObject bean = new TestObject();\n\t\t\tbean.setAge(index);\n\t\t\treturn bean;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.MockElementFactory#createElement(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Object createElement(int index) {\r\n    TestObject bean = new TestObject();\r\n    bean.setAge(index);\r\n    return bean;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MockElementFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MockElementFactory#createElement(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MockElementFactory#createElement(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.JdkProxyHint",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Proxy;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A hint that describes the need for a JDK interface-based {@link Proxy}.\n *\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @since 6.0\n */\npublic final class JdkProxyHint implements ConditionalHint {\n\n\tprivate final List<TypeReference> proxiedInterfaces;\n\n\tprivate final @Nullable TypeReference reachableType;\n\n\n\tprivate JdkProxyHint(Builder builder) {\n\t\tthis.proxiedInterfaces = List.copyOf(builder.proxiedInterfaces);\n\t\tthis.reachableType = builder.reachableType;\n\t}\n\n\t/**\n\t * Initialize a builder with the proxied interfaces to use.\n\t * @param proxiedInterfaces the interfaces the proxy should implement\n\t * @return a builder for the hint\n\t */\n\tpublic static Builder of(TypeReference... proxiedInterfaces) {\n\t\treturn new Builder().proxiedInterfaces(proxiedInterfaces);\n\t}\n\n\t/**\n\t * Initialize a builder with the proxied interfaces to use.\n\t * @param proxiedInterfaces the interfaces the proxy should implement\n\t * @return a builder for the hint\n\t */\n\tpublic static Builder of(Class<?>... proxiedInterfaces) {\n\t\treturn new Builder().proxiedInterfaces(proxiedInterfaces);\n\t}\n\n\n\t/**\n\t * Return the interfaces to be proxied.\n\t * @return the interfaces that the proxy should implement\n\t */\n\tpublic List<TypeReference> getProxiedInterfaces() {\n\t\treturn this.proxiedInterfaces;\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getReachableType() {\n\t\treturn this.reachableType;\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof JdkProxyHint that &&\n\t\t\t\tthis.proxiedInterfaces.equals(that.proxiedInterfaces) &&\n\t\t\t\tObjects.equals(this.reachableType, that.reachableType)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.proxiedInterfaces);\n\t}\n\n\n\t/**\n\t * Builder for {@link JdkProxyHint}.\n\t */\n\tpublic static class Builder {\n\n\t\tprivate final LinkedList<TypeReference> proxiedInterfaces;\n\n\t\tprivate @Nullable TypeReference reachableType;\n\n\t\tBuilder() {\n\t\t\tthis.proxiedInterfaces = new LinkedList<>();\n\t\t}\n\n\t\t/**\n\t\t * Add the specified interfaces that the proxy should implement.\n\t\t * @param proxiedInterfaces the interfaces the proxy should implement\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder proxiedInterfaces(TypeReference... proxiedInterfaces) {\n\t\t\tthis.proxiedInterfaces.addAll(Arrays.asList(proxiedInterfaces));\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Add the specified interfaces that the proxy should implement.\n\t\t * @param proxiedInterfaces the interfaces the proxy should implement\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder proxiedInterfaces(Class<?>... proxiedInterfaces) {\n\t\t\tthis.proxiedInterfaces.addAll(toTypeReferences(proxiedInterfaces));\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Make this hint conditional on the fact that the specified type can be resolved.\n\t\t * @param reachableType the type that should be reachable for this hint to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder onReachableType(TypeReference reachableType) {\n\t\t\tthis.reachableType = reachableType;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link JdkProxyHint} based on the state of this builder.\n\t\t * @return a JDK proxy hint\n\t\t */\n\t\tJdkProxyHint build() {\n\t\t\treturn new JdkProxyHint(this);\n\t\t}\n\n\t\tprivate static List<TypeReference> toTypeReferences(Class<?>... proxiedInterfaces) {\n\t\t\tList<String> invalidTypes = Arrays.stream(proxiedInterfaces)\n\t\t\t\t\t.filter(candidate -> !candidate.isInterface() || candidate.isSealed())\n\t\t\t\t\t.map(Class::getName)\n\t\t\t\t\t.toList();\n\t\t\tif (!invalidTypes.isEmpty()) {\n\t\t\t\tthrow new IllegalArgumentException(\"The following must be non-sealed interfaces: \" + invalidTypes);\n\t\t\t}\n\t\t\treturn TypeReference.listOf(proxiedInterfaces);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.JdkProxyHint#proxiedInterfaces",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint#proxiedInterfaces",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<TypeReference>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.JdkProxyHint#reachableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint#reachableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint#of(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Initialize a builder with the proxied interfaces to use.\r\n * @param proxiedInterfaces the interfaces the proxy should implement\r\n * @return a builder for the hint\r\n */\r\npublic static Builder of(TypeReference... proxiedInterfaces) {\r\n    return new Builder().proxiedInterfaces(proxiedInterfaces);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHint#of(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint#of(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Initialize a builder with the proxied interfaces to use.\r\n * @param proxiedInterfaces the interfaces the proxy should implement\r\n * @return a builder for the hint\r\n */\r\npublic static Builder of(Class<?>... proxiedInterfaces) {\r\n    return new Builder().proxiedInterfaces(proxiedInterfaces);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHint#of(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint#getProxiedInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the interfaces to be proxied.\r\n * @return the interfaces that the proxy should implement\r\n */\r\npublic List<TypeReference> getProxiedInterfaces() {\r\n    return this.proxiedInterfaces;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.JdkProxyHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.JdkProxyHint#getProxiedInterfaces()",
    "tailType": "method"
  }
]