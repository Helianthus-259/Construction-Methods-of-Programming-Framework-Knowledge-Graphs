[
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#toQName(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a namespace URI and DOM or SAX qualified name to a {@code QName}. The\r\n * qualified name can have the form {@code prefix:localname} or {@code localName}.\r\n * @param namespaceUri the namespace URI\r\n * @param qualifiedName the qualified name\r\n * @return a QName\r\n */\r\nprotected QName toQName(String namespaceUri, String qualifiedName) {\r\n    int idx = qualifiedName.indexOf(':');\r\n    if (idx == -1) {\r\n        return new QName(namespaceUri, qualifiedName);\r\n    } else {\r\n        String prefix = qualifiedName.substring(0, idx);\r\n        String localPart = qualifiedName.substring(idx + 1);\r\n        return new QName(namespaceUri, localPart, prefix);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#toQName(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#isNamespaceDeclaration(QName)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected boolean isNamespaceDeclaration(QName qName) {\r\n    String prefix = qName.getPrefix();\r\n    String localPart = qName.getLocalPart();\r\n    return (XMLConstants.XMLNS_ATTRIBUTE.equals(localPart) && prefix.isEmpty()) || (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix) && !localPart.isEmpty());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#isNamespaceDeclaration(QName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#currentNamespaceMapping()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Map<String, String> currentNamespaceMapping() {\r\n    return this.namespaceMappings.get(this.namespaceMappings.size() - 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#currentNamespaceMapping()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#newNamespaceMapping()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void newNamespaceMapping() {\r\n    this.namespaceMappings.add(new HashMap<>());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#newNamespaceMapping()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#removeNamespaceMapping()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void removeNamespaceMapping() {\r\n    this.namespaceMappings.remove(this.namespaceMappings.size() - 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#removeNamespaceMapping()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#removeAllNamespaceMappings()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void removeAllNamespaceMappings() {\r\n    this.namespaceMappings.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#removeAllNamespaceMappings()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#startDocumentInternal()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void startDocumentInternal() throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#startDocumentInternal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#endDocumentInternal()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void endDocumentInternal() throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#endDocumentInternal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#startElementInternal(QName,Attributes,Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void startElementInternal(QName name, Attributes attributes, Map<String, String> namespaceMapping) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#startElementInternal(QName,Attributes,Map<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#endElementInternal(QName,Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected abstract void endElementInternal(QName name, Map<String, String> namespaceMapping) throws XMLStreamException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#endElementInternal(QName,Map<String,String>)",
    "tailType": "method"
  }
]