[
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#commaDelimitedListToSet(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@link Collection} to a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @param prefix the {@code String} to start each element with\r\n * @param suffix the {@code String} to end each element with\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim, String prefix, String suffix) {\r\n    if (CollectionUtils.isEmpty(coll)) {\r\n        return \"\";\r\n    }\r\n    int totalLength = coll.size() * (prefix.length() + suffix.length()) + (coll.size() - 1) * delim.length();\r\n    for (Object element : coll) {\r\n        totalLength += String.valueOf(element).length();\r\n    }\r\n    StringBuilder sb = new StringBuilder(totalLength);\r\n    Iterator<?> it = coll.iterator();\r\n    while (it.hasNext()) {\r\n        sb.append(prefix).append(it.next()).append(suffix);\r\n        if (it.hasNext()) {\r\n            sb.append(delim);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim) {\r\n    return collectionToDelimitedString(coll, delim, \"\", \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#collectionToDelimitedString(Collection<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#collectionToCommaDelimitedString(Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@code Collection} into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param coll the {@code Collection} to convert (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String collectionToCommaDelimitedString(@Nullable Collection<?> coll) {\r\n    return collectionToDelimitedString(coll, \",\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#collectionToCommaDelimitedString(Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#arrayToDelimitedString(Object[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@code String} array into a delimited {@code String} (for example, CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @param delim the delimiter to use (typically a \",\")\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToDelimitedString(@Nullable Object @Nullable [] arr, String delim) {\r\n    if (ObjectUtils.isEmpty(arr)) {\r\n        return \"\";\r\n    }\r\n    if (arr.length == 1) {\r\n        return ObjectUtils.nullSafeToString(arr[0]);\r\n    }\r\n    StringJoiner sj = new StringJoiner(delim);\r\n    for (Object elem : arr) {\r\n        sj.add(String.valueOf(elem));\r\n    }\r\n    return sj.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#arrayToDelimitedString(Object[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#arrayToCommaDelimitedString(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert a {@code String} array into a comma delimited {@code String}\r\n * (i.e., CSV).\r\n * <p>Useful for {@code toString()} implementations.\r\n * @param arr the array to display (potentially {@code null} or empty)\r\n * @return the delimited {@code String}\r\n */\r\npublic static String arrayToCommaDelimitedString(@Nullable Object @Nullable [] arr) {\r\n    return arrayToDelimitedString(arr, \",\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#arrayToCommaDelimitedString(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#truncate(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>Delegates to {@link #truncate(CharSequence, int)}, supplying {@code 100}\r\n * as the threshold.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence) {\r\n    return truncate(charSequence, DEFAULT_TRUNCATION_THRESHOLD);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#truncate(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#truncate(CharSequence,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Truncate the supplied {@link CharSequence}.\r\n * <p>If the length of the {@code CharSequence} is greater than the threshold,\r\n * this method returns a {@linkplain CharSequence#subSequence(int, int)\r\n * subsequence} of the {@code CharSequence} (up to the threshold) appended\r\n * with the suffix {@code \" (truncated)...\"}. Otherwise, this method returns\r\n * {@code charSequence.toString()}.\r\n * @param charSequence the {@code CharSequence} to truncate\r\n * @param threshold the maximum length after which to truncate; must be a\r\n * positive number\r\n * @return a truncated string, or a string representation of the original\r\n * {@code CharSequence} if its length does not exceed the threshold\r\n * @since 5.3.27\r\n */\r\npublic static String truncate(CharSequence charSequence, int threshold) {\r\n    Assert.isTrue(threshold > 0, () -> \"Truncation threshold must be a positive number: \" + threshold);\r\n    if (charSequence.length() > threshold) {\r\n        return charSequence.subSequence(0, threshold) + TRUNCATION_SUFFIX;\r\n    }\r\n    return charSequence.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#truncate(CharSequence,int)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.StringValueResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.StringValueResolver",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringValueResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Simple strategy interface for resolving a String value.\n * Used by {@link org.springframework.beans.factory.config.ConfigurableBeanFactory}.\n *\n * @author Juergen Hoeller\n * @since 2.5\n * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#resolveAliases\n * @see org.springframework.beans.factory.config.BeanDefinitionVisitor#BeanDefinitionVisitor(StringValueResolver)\n */\n@FunctionalInterface\npublic interface StringValueResolver {\n\n\t/**\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value (never {@code null})\n\t * @return the resolved String value (may be {@code null} when resolved to a null\n\t * value), possibly the original String value itself (in case of no placeholders\n\t * to resolve or when ignoring unresolvable placeholders)\n\t * @throws IllegalArgumentException in case of an unresolvable String value\n\t */\n\t@Nullable String resolveStringValue(String strVal);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.StringValueResolver#resolveStringValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given String value, for example parsing placeholders.\r\n * @param strVal the original String value (never {@code null})\r\n * @return the resolved String value (may be {@code null} when resolved to a null\r\n * value), possibly the original String value itself (in case of no placeholders\r\n * to resolve or when ignoring unresolvable placeholders)\r\n * @throws IllegalArgumentException in case of an unresolvable String value\r\n */\r\n@Nullable\r\nString resolveStringValue(String strVal);",
    "tailType": "method_code"
  }
]