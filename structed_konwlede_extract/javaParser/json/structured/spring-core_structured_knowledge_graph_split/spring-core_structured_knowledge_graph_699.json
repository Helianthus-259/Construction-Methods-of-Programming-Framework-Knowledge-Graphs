[
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#DELEGATE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#DELEGATE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#CSTRUCT_OBJECT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#CSTRUCT_OBJECT",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateIf",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateIf",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateImpl",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateImpl",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#delegateType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        Type[] all = TypeUtils.add(interfaces, TypeUtils.getTypes(delegateIf));\r\n        super.begin_class(version, access, className, superType, all, sourceFile);\r\n        declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, DELEGATE, delegateType, null);\r\n        for (Class element : delegateIf) {\r\n            Method[] methods = element.getMethods();\r\n            for (Method method : methods) {\r\n                if (Modifier.isAbstract(method.getModifiers())) {\r\n                    addDelegate(method);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    final CodeEmitter e = super.begin_method(access, sig, exceptions);\r\n    if (sig.getName().equals(Constants.CONSTRUCTOR_NAME)) {\r\n        return new CodeEmitter(e) {\r\n\r\n            private boolean transformInit = true;\r\n\r\n            @Override\r\n            public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\r\n                super.visitMethodInsn(opcode, owner, name, desc, itf);\r\n                if (transformInit && opcode == Constants.INVOKESPECIAL) {\r\n                    load_this();\r\n                    new_instance(delegateType);\r\n                    dup();\r\n                    load_this();\r\n                    invoke_constructor(delegateType, CSTRUCT_OBJECT);\r\n                    putfield(DELEGATE);\r\n                    transformInit = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    return e;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addDelegate(Method m) {\r\n    Method delegate;\r\n    try {\r\n        delegate = delegateImpl.getMethod(m.getName(), m.getParameterTypes());\r\n        if (!delegate.getReturnType().getName().equals(m.getReturnType().getName())) {\r\n            throw new IllegalArgumentException(\"Invalid delegate signature \" + delegate);\r\n        }\r\n    } catch (NoSuchMethodException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n    final Signature sig = ReflectUtils.getSignature(m);\r\n    Type[] exceptions = TypeUtils.getTypes(m.getExceptionTypes());\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, sig, exceptions);\r\n    e.load_this();\r\n    e.getfield(DELEGATE);\r\n    e.load_args();\r\n    e.invoke_virtual(delegateType, sig);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.AddDelegateTransformer#addDelegate(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.AddDelegateTransformer",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassEmitterTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  }
]