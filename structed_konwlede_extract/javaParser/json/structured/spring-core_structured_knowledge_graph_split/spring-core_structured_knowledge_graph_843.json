[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ResourceDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.InputStreamResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Decoder for {@link Resource Resources}.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @since 5.0\n */\npublic class ResourceDecoder extends AbstractDataBufferDecoder<Resource> {\n\n\t/** Name of hint with a filename for the resource(for example, from \"Content-Disposition\" HTTP header). */\n\tpublic static final String FILENAME_HINT = ResourceDecoder.class.getName() + \".filename\";\n\n\n\tpublic ResourceDecoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (Resource.class.isAssignableFrom(elementType.toClass()) &&\n\t\t\t\tsuper.canDecode(elementType, mimeType));\n\t}\n\n\t@Override\n\tpublic Flux<Resource> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));\n\t}\n\n\t@Override\n\tpublic Resource decode(DataBuffer dataBuffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tbyte[] bytes = new byte[dataBuffer.readableByteCount()];\n\t\tdataBuffer.read(bytes);\n\t\tDataBufferUtils.release(dataBuffer);\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(Hints.getLogPrefix(hints) + \"Read \" + bytes.length + \" bytes\");\n\t\t}\n\n\t\tClass<?> clazz = elementType.toClass();\n\t\tString filename = (hints != null ? (String) hints.get(FILENAME_HINT) : null);\n\t\tif (clazz == InputStreamResource.class) {\n\t\t\treturn new InputStreamResource(new ByteArrayInputStream(bytes)) {\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getFilename() {\n\t\t\t\t\treturn filename;\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic long contentLength() {\n\t\t\t\t\treturn bytes.length;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse if (Resource.class.isAssignableFrom(clazz)) {\n\t\t\treturn new ByteArrayResource(bytes) {\n\t\t\t\t@Override\n\t\t\t\tpublic @Nullable String getFilename() {\n\t\t\t\t\treturn filename;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\"Unsupported resource class: \" + clazz);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ResourceDecoder#FILENAME_HINT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#FILENAME_HINT",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (Resource.class.isAssignableFrom(elementType.toClass()) && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<Resource> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource decode(DataBuffer dataBuffer, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    byte[] bytes = new byte[dataBuffer.readableByteCount()];\r\n    dataBuffer.read(bytes);\r\n    DataBufferUtils.release(dataBuffer);\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(Hints.getLogPrefix(hints) + \"Read \" + bytes.length + \" bytes\");\r\n    }\r\n    Class<?> clazz = elementType.toClass();\r\n    String filename = (hints != null ? (String) hints.get(FILENAME_HINT) : null);\r\n    if (clazz == InputStreamResource.class) {\r\n        return new InputStreamResource(new ByteArrayInputStream(bytes)) {\r\n\r\n            @Override\r\n            @Nullable\r\n            public String getFilename() {\r\n                return filename;\r\n            }\r\n\r\n            @Override\r\n            public long contentLength() {\r\n                return bytes.length;\r\n            }\r\n        };\r\n    } else if (Resource.class.isAssignableFrom(clazz)) {\r\n        return new ByteArrayResource(bytes) {\r\n\r\n            @Override\r\n            @Nullable\r\n            public String getFilename() {\r\n                return filename;\r\n            }\r\n        };\r\n    } else {\r\n        throw new IllegalStateException(\"Unsupported resource class: \" + clazz);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ResourceEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.util.Assert;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\nimport org.springframework.util.StreamUtils;\n\n/**\n * Encoder for {@link Resource Resources}.\n *\n * @author Arjen Poutsma\n * @since 5.0\n */\npublic class ResourceEncoder extends AbstractSingleValueEncoder<Resource> {\n\n\t/**\n\t * The default buffer size used by the encoder.\n\t */\n\tpublic static final int DEFAULT_BUFFER_SIZE = StreamUtils.BUFFER_SIZE;\n\n\tprivate final int bufferSize;\n\n\n\tpublic ResourceEncoder() {\n\t\tthis(DEFAULT_BUFFER_SIZE);\n\t}\n\n\tpublic ResourceEncoder(int bufferSize) {\n\t\tsuper(MimeTypeUtils.APPLICATION_OCTET_STREAM, MimeTypeUtils.ALL);\n\t\tAssert.isTrue(bufferSize > 0, \"'bufferSize' must be larger than 0\");\n\t\tthis.bufferSize = bufferSize;\n\t}\n\n\n\t@Override\n\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\tClass<?> clazz = elementType.toClass();\n\t\treturn (super.canEncode(elementType, mimeType) && Resource.class.isAssignableFrom(clazz));\n\t}\n\n\t@Override\n\tprotected Flux<DataBuffer> encode(Resource resource, DataBufferFactory bufferFactory,\n\t\t\tResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n\t\t\tString logPrefix = Hints.getLogPrefix(hints);\n\t\t\tlogger.debug(logPrefix + \"Writing [\" + resource + \"]\");\n\t\t}\n\t\treturn DataBufferUtils.read(resource, bufferFactory, this.bufferSize);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoder",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ResourceEncoder#DEFAULT_BUFFER_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoder#DEFAULT_BUFFER_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  }
]