[
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotationsSortedByReversedMetaDistance(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotations(Set<TestComponentScan>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertRepeatableAnnotations(Set<TestComponentScan> annotations) {\r\n    assertThat(annotations.stream().map(TestComponentScan::value).flatMap(Arrays::stream)).containsExactly(\"A\", \"B\", \"C\", \"D\");\r\n    assertThat(annotations.stream().map(TestComponentScan::basePackages).flatMap(Arrays::stream)).containsExactly(\"A\", \"B\", \"C\", \"D\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotations(Set<TestComponentScan>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(NamedComposedAnnotationExtended.class);\r\n    assertThat(metadata.hasAnnotation(NamedComposedAnnotation.class.getName())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingSimpleAnnotationMetadata() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(NamedComposedAnnotationExtended.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    assertThat(metadata.hasAnnotation(NamedComposedAnnotation.class.getName())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingSimpleAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#inheritedAnnotationWithMetaAnnotationsWithIdenticalAttributeNamesUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#assertMultipleAnnotationsWithIdenticalAttributeNames(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertMultipleAnnotationsWithIdenticalAttributeNames(AnnotationMetadata metadata) {\r\n    AnnotationAttributes attributes1 = (AnnotationAttributes) metadata.getAnnotationAttributes(NamedAnnotation1.class.getName(), false);\r\n    String name1 = attributes1.getString(\"name\");\r\n    assertThat(name1).as(\"name of NamedAnnotation1\").isEqualTo(\"name 1\");\r\n    AnnotationAttributes attributes2 = (AnnotationAttributes) metadata.getAnnotationAttributes(NamedAnnotation2.class.getName(), false);\r\n    String name2 = attributes2.getString(\"name\");\r\n    assertThat(name2).as(\"name of NamedAnnotation2\").isEqualTo(\"name 2\");\r\n    AnnotationAttributes attributes3 = (AnnotationAttributes) metadata.getAnnotationAttributes(NamedAnnotation3.class.getName(), false);\r\n    String name3 = attributes3.getString(\"name\");\r\n    assertThat(name3).as(\"name of NamedAnnotation3\").isEqualTo(\"name 3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#assertMultipleAnnotationsWithIdenticalAttributeNames(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#doTestAnnotationInfo(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestAnnotationInfo(AnnotationMetadata metadata) {\r\n    assertThat(metadata.getClassName()).isEqualTo(AnnotatedComponent.class.getName());\r\n    assertThat(metadata.isInterface()).isFalse();\r\n    assertThat(metadata.isAnnotation()).isFalse();\r\n    assertThat(metadata.isAbstract()).isFalse();\r\n    assertThat(metadata.isConcrete()).isTrue();\r\n    assertThat(metadata.hasSuperClass()).isTrue();\r\n    assertThat(metadata.getSuperClassName()).isEqualTo(Object.class.getName());\r\n    assertThat(metadata.getInterfaceNames()).hasSize(1);\r\n    assertThat(metadata.getInterfaceNames()[0]).isEqualTo(Serializable.class.getName());\r\n    assertThat(metadata.isAnnotated(Component.class.getName())).isTrue();\r\n    assertThat(metadata.isAnnotated(NamedComposedAnnotation.class.getName())).isTrue();\r\n    assertThat(metadata.hasAnnotation(Component.class.getName())).isTrue();\r\n    assertThat(metadata.hasAnnotation(Scope.class.getName())).isTrue();\r\n    assertThat(metadata.hasAnnotation(SpecialAttr.class.getName())).isTrue();\r\n    assertThat(metadata.hasAnnotation(NamedComposedAnnotation.class.getName())).isTrue();\r\n    assertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(Component.class.getName(), Scope.class.getName(), SpecialAttr.class.getName(), DirectAnnotation.class.getName(), MetaMetaAnnotation.class.getName(), EnumSubclasses.class.getName(), NamedComposedAnnotation.class.getName());\r\n    AnnotationAttributes compAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(Component.class.getName());\r\n    assertThat(compAttrs).hasSize(1);\r\n    assertThat(compAttrs.getString(\"value\")).isEqualTo(\"myName\");\r\n    AnnotationAttributes scopeAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(Scope.class.getName());\r\n    assertThat(scopeAttrs).hasSize(1);\r\n    assertThat(scopeAttrs.getString(\"value\")).isEqualTo(\"myScope\");\r\n    Set<MethodMetadata> methods = metadata.getAnnotatedMethods(DirectAnnotation.class.getName());\r\n    MethodMetadata method = methods.iterator().next();\r\n    assertThat(method.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\")).isEqualTo(\"direct\");\r\n    assertThat(method.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"myValue\")).isEqualTo(\"direct\");\r\n    List<Object> allMeta = method.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\");\r\n    assertThat(new HashSet<>(allMeta)).isEqualTo(new HashSet<>(Arrays.asList(\"direct\", \"meta\")));\r\n    allMeta = method.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get(\"additional\");\r\n    assertThat(new HashSet<>(allMeta)).isEqualTo(new HashSet<>(List.of(\"direct\")));\r\n    assertThat(metadata.isAnnotated(IsAnnotatedAnnotation.class.getName())).isTrue();\r\n    {\r\n        // perform tests with classValuesAsString = false (the default)\r\n        AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName());\r\n        assertThat(specialAttrs).hasSize(6);\r\n        assertThat(String.class.isAssignableFrom(specialAttrs.getClass(\"clazz\"))).isTrue();\r\n        assertThat(specialAttrs.getEnum(\"state\").equals(Thread.State.NEW)).isTrue();\r\n        AnnotationAttributes nestedAnno = specialAttrs.getAnnotation(\"nestedAnno\");\r\n        assertThat(nestedAnno.getString(\"value\")).isEqualTo(\"na\");\r\n        assertThat(nestedAnno.getEnum(\"anEnum\").equals(SomeEnum.LABEL1)).isTrue();\r\n        assertThat((Class<?>[]) nestedAnno.get(\"classArray\")).isEqualTo(new Class<?>[] { String.class });\r\n        AnnotationAttributes[] nestedAnnoArray = specialAttrs.getAnnotationArray(\"nestedAnnoArray\");\r\n        assertThat(nestedAnnoArray).hasSize(2);\r\n        assertThat(nestedAnnoArray[0].getString(\"value\")).isEqualTo(\"default\");\r\n        assertThat(nestedAnnoArray[0].getEnum(\"anEnum\").equals(SomeEnum.DEFAULT)).isTrue();\r\n        assertThat((Class<?>[]) nestedAnnoArray[0].get(\"classArray\")).isEqualTo(new Class<?>[] { Void.class });\r\n        assertThat(nestedAnnoArray[1].getString(\"value\")).isEqualTo(\"na1\");\r\n        assertThat(nestedAnnoArray[1].getEnum(\"anEnum\").equals(SomeEnum.LABEL2)).isTrue();\r\n        assertThat((Class<?>[]) nestedAnnoArray[1].get(\"classArray\")).isEqualTo(new Class<?>[] { Number.class });\r\n        assertThat(nestedAnnoArray[1].getClassArray(\"classArray\")).isEqualTo(new Class<?>[] { Number.class });\r\n        AnnotationAttributes optional = specialAttrs.getAnnotation(\"optional\");\r\n        assertThat(optional.getString(\"value\")).isEqualTo(\"optional\");\r\n        assertThat(optional.getEnum(\"anEnum\").equals(SomeEnum.DEFAULT)).isTrue();\r\n        assertThat((Class<?>[]) optional.get(\"classArray\")).isEqualTo(new Class<?>[] { Void.class });\r\n        assertThat(optional.getClassArray(\"classArray\")).isEqualTo(new Class<?>[] { Void.class });\r\n        AnnotationAttributes[] optionalArray = specialAttrs.getAnnotationArray(\"optionalArray\");\r\n        assertThat(optionalArray).hasSize(1);\r\n        assertThat(optionalArray[0].getString(\"value\")).isEqualTo(\"optional\");\r\n        assertThat(optionalArray[0].getEnum(\"anEnum\").equals(SomeEnum.DEFAULT)).isTrue();\r\n        assertThat((Class<?>[]) optionalArray[0].get(\"classArray\")).isEqualTo(new Class<?>[] { Void.class });\r\n        assertThat(optionalArray[0].getClassArray(\"classArray\")).isEqualTo(new Class<?>[] { Void.class });\r\n        assertThat(metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\")).isEqualTo(\"direct\");\r\n        allMeta = metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\");\r\n        assertThat(new HashSet<>(allMeta)).isEqualTo(new HashSet<>(Arrays.asList(\"direct\", \"meta\")));\r\n        allMeta = metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get(\"additional\");\r\n        assertThat(new HashSet<>(allMeta)).isEqualTo(new HashSet<>(Arrays.asList(\"direct\", \"\")));\r\n        assertThat(metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"additional\")).isEqualTo(\"\");\r\n        assertThat(((String[]) metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"additionalArray\"))).isEmpty();\r\n    }\r\n    {\r\n        // perform tests with classValuesAsString = true\r\n        AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName(), true);\r\n        assertThat(specialAttrs).hasSize(6);\r\n        assertThat(specialAttrs.get(\"clazz\")).isEqualTo(String.class.getName());\r\n        assertThat(specialAttrs.getString(\"clazz\")).isEqualTo(String.class.getName());\r\n        AnnotationAttributes nestedAnno = specialAttrs.getAnnotation(\"nestedAnno\");\r\n        assertThat(nestedAnno.getStringArray(\"classArray\")).isEqualTo(new String[] { String.class.getName() });\r\n        assertThat(nestedAnno.getStringArray(\"classArray\")).isEqualTo(new String[] { String.class.getName() });\r\n        AnnotationAttributes[] nestedAnnoArray = specialAttrs.getAnnotationArray(\"nestedAnnoArray\");\r\n        assertThat((String[]) nestedAnnoArray[0].get(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        assertThat(nestedAnnoArray[0].getStringArray(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        assertThat((String[]) nestedAnnoArray[1].get(\"classArray\")).isEqualTo(new String[] { Number.class.getName() });\r\n        assertThat(nestedAnnoArray[1].getStringArray(\"classArray\")).isEqualTo(new String[] { Number.class.getName() });\r\n        AnnotationAttributes optional = specialAttrs.getAnnotation(\"optional\");\r\n        assertThat((String[]) optional.get(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        assertThat(optional.getStringArray(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        AnnotationAttributes[] optionalArray = specialAttrs.getAnnotationArray(\"optionalArray\");\r\n        assertThat((String[]) optionalArray[0].get(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        assertThat(optionalArray[0].getStringArray(\"classArray\")).isEqualTo(new String[] { Void.class.getName() });\r\n        assertThat(metadata.getAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\")).isEqualTo(\"direct\");\r\n        allMeta = metadata.getAllAnnotationAttributes(DirectAnnotation.class.getName()).get(\"value\");\r\n        assertThat(new HashSet<>(allMeta)).isEqualTo(new HashSet<>(Arrays.asList(\"direct\", \"meta\")));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#doTestAnnotationInfo(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#doTestMethodAnnotationInfo(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestMethodAnnotationInfo(AnnotationMetadata classMetadata) {\r\n    assertThat(classMetadata.getDeclaredMethods()).hasSize(3);\r\n    Set<MethodMetadata> methods = classMetadata.getAnnotatedMethods(TestAutowired.class.getName());\r\n    assertThat(methods).hasSize(1);\r\n    for (MethodMetadata methodMetadata : methods) {\r\n        assertThat(methodMetadata.isAnnotated(TestAutowired.class.getName())).isTrue();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#doTestMethodAnnotationInfo(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.AnnotatedComponent",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AnnotatedComponent",
    "headType": "class",
    "relation": "use",
    "tail": "@Component",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotatedComponent",
    "headType": "class",
    "relation": "use",
    "tail": "@Scope",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotatedComponent",
    "headType": "class",
    "relation": "use",
    "tail": "@SpecialAttr",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotatedComponent",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]