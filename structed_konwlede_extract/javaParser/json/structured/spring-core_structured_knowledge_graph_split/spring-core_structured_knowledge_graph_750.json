[
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#declaredAnnotationCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<AnnotatedElement, Annotation[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#baseTypeMethodsCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#baseTypeMethodsCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class<?>, @Nullable Method[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Scan the hierarchy of the specified element for relevant annotations and\r\n * call the processor as required.\r\n * @param context an optional context object that will be passed back to the\r\n * processor\r\n * @param source the source element to scan\r\n * @param searchStrategy the search strategy to use\r\n * @param searchEnclosingClass a predicate which evaluates to {@code true}\r\n * if a search should be performed on the enclosing class of the class\r\n * supplied to the predicate\r\n * @param processor the processor that receives the annotations\r\n * @return the result of {@link AnnotationsProcessor#finish(Object)}\r\n */\r\n@Nullable\r\nstatic <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\r\n    R result = process(context, source, searchStrategy, searchEnclosingClass, processor);\r\n    return processor.finish(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#scan(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#process(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R process(C context, AnnotatedElement source, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\r\n    if (source instanceof Class<?> clazz) {\r\n        return processClass(context, clazz, searchStrategy, searchEnclosingClass, processor);\r\n    }\r\n    if (source instanceof Method method) {\r\n        return processMethod(context, method, searchStrategy, processor);\r\n    }\r\n    return processElement(context, source, processor);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#process(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#process(C,AnnotatedElement,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClass(C,Class<?>,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processClass(C context, Class<?> source, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass, AnnotationsProcessor<C, R> processor) {\r\n    return switch(searchStrategy) {\r\n        case DIRECT ->\r\n            processElement(context, source, processor);\r\n        case INHERITED_ANNOTATIONS ->\r\n            processClassInheritedAnnotations(context, source, processor);\r\n        case SUPERCLASS ->\r\n            processClassHierarchy(context, source, processor, false, Search.never);\r\n        case TYPE_HIERARCHY ->\r\n            processClassHierarchy(context, source, processor, true, searchEnclosingClass);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processClass(C,Class<?>,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClass(C,Class<?>,SearchStrategy,Predicate<Class<?>>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassInheritedAnnotations(C,Class<?>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processClassInheritedAnnotations(C context, Class<?> source, AnnotationsProcessor<C, R> processor) {\r\n    try {\r\n        if (isWithoutHierarchy(source, Search.never)) {\r\n            return processElement(context, source, processor);\r\n        }\r\n        @Nullable\r\n        Annotation[] relevant = null;\r\n        int remaining = Integer.MAX_VALUE;\r\n        int aggregateIndex = 0;\r\n        Class<?> root = source;\r\n        while (source != null && source != Object.class && remaining > 0 && !hasPlainJavaAnnotationsOnly(source)) {\r\n            R result = processor.doWithAggregate(context, aggregateIndex);\r\n            if (result != null) {\r\n                return result;\r\n            }\r\n            @Nullable\r\n            Annotation[] declaredAnns = getDeclaredAnnotations(source, true);\r\n            if (declaredAnns.length > 0) {\r\n                if (relevant == null) {\r\n                    relevant = root.getAnnotations();\r\n                    remaining = relevant.length;\r\n                }\r\n                for (int i = 0; i < declaredAnns.length; i++) {\r\n                    if (declaredAnns[i] != null) {\r\n                        boolean isRelevant = false;\r\n                        for (int relevantIndex = 0; relevantIndex < relevant.length; relevantIndex++) {\r\n                            //noinspection DataFlowIssue\r\n                            if (relevant[relevantIndex] != null && declaredAnns[i].annotationType() == relevant[relevantIndex].annotationType()) {\r\n                                isRelevant = true;\r\n                                relevant[relevantIndex] = null;\r\n                                remaining--;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!isRelevant) {\r\n                            declaredAnns[i] = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            result = processor.doWithAnnotations(context, aggregateIndex, source, declaredAnns);\r\n            if (result != null) {\r\n                return result;\r\n            }\r\n            source = source.getSuperclass();\r\n            aggregateIndex++;\r\n        }\r\n    } catch (Throwable ex) {\r\n        AnnotationUtils.handleIntrospectionFailure(source, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processClassInheritedAnnotations(C,Class<?>,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassInheritedAnnotations(C,Class<?>,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processClassHierarchy(C context, Class<?> source, AnnotationsProcessor<C, R> processor, boolean includeInterfaces, Predicate<Class<?>> searchEnclosingClass) {\r\n    return processClassHierarchy(context, new int[] { 0 }, source, processor, includeInterfaces, searchEnclosingClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processClassHierarchy(C context, int[] aggregateIndex, Class<?> source, AnnotationsProcessor<C, R> processor, boolean includeInterfaces, Predicate<Class<?>> searchEnclosingClass) {\r\n    try {\r\n        R result = processor.doWithAggregate(context, aggregateIndex[0]);\r\n        if (result != null) {\r\n            return result;\r\n        }\r\n        if (hasPlainJavaAnnotationsOnly(source)) {\r\n            return null;\r\n        }\r\n        @Nullable\r\n        Annotation[] annotations = getDeclaredAnnotations(source, false);\r\n        result = processor.doWithAnnotations(context, aggregateIndex[0], source, annotations);\r\n        if (result != null) {\r\n            return result;\r\n        }\r\n        aggregateIndex[0]++;\r\n        if (includeInterfaces) {\r\n            for (Class<?> interfaceType : source.getInterfaces()) {\r\n                R interfacesResult = processClassHierarchy(context, aggregateIndex, interfaceType, processor, true, searchEnclosingClass);\r\n                if (interfacesResult != null) {\r\n                    return interfacesResult;\r\n                }\r\n            }\r\n        }\r\n        Class<?> superclass = source.getSuperclass();\r\n        if (superclass != Object.class && superclass != null) {\r\n            R superclassResult = processClassHierarchy(context, aggregateIndex, superclass, processor, includeInterfaces, searchEnclosingClass);\r\n            if (superclassResult != null) {\r\n                return superclassResult;\r\n            }\r\n        }\r\n        if (searchEnclosingClass.test(source)) {\r\n            // Since merely attempting to load the enclosing class may result in\r\n            // automatic loading of sibling nested classes that in turn results\r\n            // in an exception such as NoClassDefFoundError, we wrap the following\r\n            // in its own dedicated try-catch block in order not to preemptively\r\n            // halt the annotation scanning process.\r\n            try {\r\n                Class<?> enclosingClass = source.getEnclosingClass();\r\n                if (enclosingClass != null) {\r\n                    R enclosingResult = processClassHierarchy(context, aggregateIndex, enclosingClass, processor, includeInterfaces, searchEnclosingClass);\r\n                    if (enclosingResult != null) {\r\n                        return enclosingResult;\r\n                    }\r\n                }\r\n            } catch (Throwable ex) {\r\n                AnnotationUtils.handleIntrospectionFailure(source, ex);\r\n            }\r\n        }\r\n    } catch (Throwable ex) {\r\n        AnnotationUtils.handleIntrospectionFailure(source, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "tailType": "method"
  }
]