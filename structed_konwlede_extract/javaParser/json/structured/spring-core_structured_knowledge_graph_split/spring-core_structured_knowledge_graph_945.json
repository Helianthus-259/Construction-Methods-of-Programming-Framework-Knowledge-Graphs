[
  {
    "head": "org.springframework.core.env.SimpleCommandLinePropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "CommandLinePropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.StandardEnvironment",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\n/**\n * {@link Environment} implementation suitable for use in 'standard' (i.e. non-web)\n * applications.\n *\n * <p>In addition to the usual functions of a {@link ConfigurableEnvironment} such as\n * property resolution and profile-related operations, this implementation configures two\n * default property sources, to be searched in the following order:\n * <ul>\n * <li>{@linkplain AbstractEnvironment#getSystemProperties() system properties}\n * <li>{@linkplain AbstractEnvironment#getSystemEnvironment() system environment variables}\n * </ul>\n *\n * That is, if the key \"xyz\" is present both in the JVM system properties as well as in\n * the set of environment variables for the current process, the value of key \"xyz\" from\n * system properties will return from a call to {@code environment.getProperty(\"xyz\")}.\n * This ordering is chosen by default because system properties are per-JVM, while\n * environment variables may be the same across many JVMs on a given system.  Giving\n * system properties precedence allows for overriding of environment variables on a\n * per-JVM basis.\n *\n * <p>These default property sources may be removed, reordered, or replaced; and\n * additional property sources may be added using the {@link MutablePropertySources}\n * instance available from {@link #getPropertySources()}. See\n * {@link ConfigurableEnvironment} Javadoc for usage examples.\n *\n * <p>See {@link SystemEnvironmentPropertySource} javadoc for details on special handling\n * of property names in shell environments (for example, Bash) that disallow period characters in\n * variable names.\n *\n * @author Chris Beams\n * @author Phillip Webb\n * @since 3.1\n * @see ConfigurableEnvironment\n * @see SystemEnvironmentPropertySource\n * @see org.springframework.web.context.support.StandardServletEnvironment\n */\npublic class StandardEnvironment extends AbstractEnvironment {\n\n\t/** System environment property source name: {@value}. */\n\tpublic static final String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = \"systemEnvironment\";\n\n\t/** JVM system properties property source name: {@value}. */\n\tpublic static final String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = \"systemProperties\";\n\n\n\t/**\n\t * Create a new {@code StandardEnvironment} instance with a default\n\t * {@link MutablePropertySources} instance.\n\t */\n\tpublic StandardEnvironment() {\n\t}\n\n\t/**\n\t * Create a new {@code StandardEnvironment} instance with a specific\n\t * {@link MutablePropertySources} instance.\n\t * @param propertySources property sources to use\n\t * @since 5.3.4\n\t */\n\tprotected StandardEnvironment(MutablePropertySources propertySources) {\n\t\tsuper(propertySources);\n\t}\n\n\n\t/**\n\t * Customize the set of property sources with those appropriate for any standard\n\t * Java environment:\n\t * <ul>\n\t * <li>{@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME}\n\t * <li>{@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}\n\t * </ul>\n\t * <p>Properties present in {@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME} will\n\t * take precedence over those in {@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}.\n\t * @see AbstractEnvironment#customizePropertySources(MutablePropertySources)\n\t * @see #getSystemProperties()\n\t * @see #getSystemEnvironment()\n\t */\n\t@Override\n\tprotected void customizePropertySources(MutablePropertySources propertySources) {\n\t\tpropertySources.addLast(\n\t\t\t\tnew PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n\t\tpropertySources.addLast(\n\t\t\t\tnew SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.StandardEnvironment#SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment#SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.StandardEnvironment#SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment#SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment#customizePropertySources(MutablePropertySources)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Customize the set of property sources with those appropriate for any standard\r\n * Java environment:\r\n * <ul>\r\n * <li>{@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME}\r\n * <li>{@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}\r\n * </ul>\r\n * <p>Properties present in {@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME} will\r\n * take precedence over those in {@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}.\r\n * @see AbstractEnvironment#customizePropertySources(MutablePropertySources)\r\n * @see #getSystemProperties()\r\n * @see #getSystemEnvironment()\r\n */\r\n@Override\r\nprotected void customizePropertySources(MutablePropertySources propertySources) {\r\n    propertySources.addLast(new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\r\n    propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironment#customizePropertySources(MutablePropertySources)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment#customizePropertySources(MutablePropertySources)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironment",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEnvironment",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Specialization of {@link MapPropertySource} designed for use with\n * {@linkplain AbstractEnvironment#getSystemEnvironment() system environment variables}.\n * Compensates for constraints in Bash and other shells that do not allow for variables\n * containing the period character and/or hyphen character; also allows for uppercase\n * variations on property names for more idiomatic shell use.\n *\n * <p>For example, a call to {@code getProperty(\"foo.bar\")} will attempt to find a value\n * for the original property or any 'equivalent' property, returning the first found:\n * <ul>\n * <li>{@code foo.bar} - the original name</li>\n * <li>{@code foo_bar} - with underscores for periods (if any)</li>\n * <li>{@code FOO.BAR} - original, with upper case</li>\n * <li>{@code FOO_BAR} - with underscores and upper case</li>\n * </ul>\n * Any hyphen variant of the above would work as well, or even mix dot/hyphen variants.\n *\n * <p>The same applies for calls to {@link #containsProperty(String)}, which returns\n * {@code true} if any of the above properties are present, otherwise {@code false}.\n *\n * <p>This feature is particularly useful when specifying active or default profiles as\n * environment variables. The following is not allowable under Bash:\n *\n * <pre class=\"code\">spring.profiles.active=p1 java -classpath ... MyApp</pre>\n *\n * However, the following syntax is permitted and is also more conventional:\n *\n * <pre class=\"code\">SPRING_PROFILES_ACTIVE=p1 java -classpath ... MyApp</pre>\n *\n * <p>Enable debug- or trace-level logging for this class (or package) for messages\n * explaining when these 'property name resolutions' occur.\n *\n * <p>This property source is included by default in {@link StandardEnvironment}\n * and all its subclasses.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see StandardEnvironment\n * @see AbstractEnvironment#getSystemEnvironment()\n * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME\n */\npublic class SystemEnvironmentPropertySource extends MapPropertySource {\n\n\t/**\n\t * Create a new {@code SystemEnvironmentPropertySource} with the given name and\n\t * delegating to the given {@code MapPropertySource}.\n\t */\n\tpublic SystemEnvironmentPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\n\t/**\n\t * Return {@code true} if a property with the given name or any underscore/uppercase variant\n\t * thereof exists in this property source.\n\t */\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn (getProperty(name) != null);\n\t}\n\n\t/**\n\t * This implementation returns {@code true} if a property with the given name or\n\t * any underscore/uppercase variant thereof exists in this property source.\n\t */\n\t@Override\n\tpublic @Nullable Object getProperty(String name) {\n\t\tString actualName = resolvePropertyName(name);\n\t\tif (logger.isDebugEnabled() && !name.equals(actualName)) {\n\t\t\tlogger.debug(\"PropertySource '\" + getName() + \"' does not contain property '\" + name +\n\t\t\t\t\t\"', but found equivalent '\" + actualName + \"'\");\n\t\t}\n\t\treturn super.getProperty(actualName);\n\t}\n\n\t/**\n\t * Check to see if this property source contains a property with the given name, or\n\t * any underscore / uppercase variation thereof. Return the resolved name if one is\n\t * found or otherwise the original name. Never returns {@code null}.\n\t */\n\tprotected final String resolvePropertyName(String name) {\n\t\tAssert.notNull(name, \"Property name must not be null\");\n\t\tString resolvedName = checkPropertyName(name);\n\t\tif (resolvedName != null) {\n\t\t\treturn resolvedName;\n\t\t}\n\t\tString uppercasedName = name.toUpperCase(Locale.ROOT);\n\t\tif (!name.equals(uppercasedName)) {\n\t\t\tresolvedName = checkPropertyName(uppercasedName);\n\t\t\tif (resolvedName != null) {\n\t\t\t\treturn resolvedName;\n\t\t\t}\n\t\t}\n\t\treturn name;\n\t}\n\n\tprivate @Nullable String checkPropertyName(String name) {\n\t\t// Check name as-is\n\t\tif (this.source.containsKey(name)) {\n\t\t\treturn name;\n\t\t}\n\t\t// Check name with just dots replaced\n\t\tString noDotName = name.replace('.', '_');\n\t\tif (!name.equals(noDotName) && this.source.containsKey(noDotName)) {\n\t\t\treturn noDotName;\n\t\t}\n\t\t// Check name with just hyphens replaced\n\t\tString noHyphenName = name.replace('-', '_');\n\t\tif (!name.equals(noHyphenName) && this.source.containsKey(noHyphenName)) {\n\t\t\treturn noHyphenName;\n\t\t}\n\t\t// Check name with dots and hyphens replaced\n\t\tString noDotNoHyphenName = noDotName.replace('-', '_');\n\t\tif (!noDotName.equals(noDotNoHyphenName) && this.source.containsKey(noDotNoHyphenName)) {\n\t\t\treturn noDotNoHyphenName;\n\t\t}\n\t\t// Give up\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if a property with the given name or any underscore/uppercase variant\r\n * thereof exists in this property source.\r\n */\r\n@Override\r\npublic boolean containsProperty(String name) {\r\n    return (getProperty(name) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySource#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns {@code true} if a property with the given name or\r\n * any underscore/uppercase variant thereof exists in this property source.\r\n */\r\n@Override\r\n@Nullable\r\npublic Object getProperty(String name) {\r\n    String actualName = resolvePropertyName(name);\r\n    if (logger.isDebugEnabled() && !name.equals(actualName)) {\r\n        logger.debug(\"PropertySource '\" + getName() + \"' does not contain property '\" + name + \"', but found equivalent '\" + actualName + \"'\");\r\n    }\r\n    return super.getProperty(actualName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySource#getProperty(String)",
    "tailType": "method"
  }
]