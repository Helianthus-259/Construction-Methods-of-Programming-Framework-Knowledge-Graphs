[
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findField(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findField(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findField(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Attempt to find a {@link Field field} on the supplied {@link Class} with the\r\n * supplied {@code name} and/or {@link Class type}. Searches all superclasses\r\n * up to {@link Object}.\r\n * @param clazz the class to introspect\r\n * @param name the name of the field (may be {@code null} if type is specified)\r\n * @param type the type of the field (may be {@code null} if name is specified)\r\n * @return the corresponding Field object, or {@code null} if not found\r\n */\r\n@Nullable\r\npublic static Field findField(Class<?> clazz, @Nullable String name, @Nullable Class<?> type) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.isTrue(name != null || type != null, \"Either name or type of the field must be specified\");\r\n    Class<?> searchType = clazz;\r\n    while (Object.class != searchType && searchType != null) {\r\n        Field[] fields = getDeclaredFields(searchType);\r\n        for (Field field : fields) {\r\n            if ((name == null || name.equals(field.getName())) && (type == null || type.equals(field.getType()))) {\r\n                return field;\r\n            }\r\n        }\r\n        searchType = searchType.getSuperclass();\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findField(Class<?>,String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findField(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findFieldIgnoreCase(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Attempt to find a {@link Field field} on the supplied {@link Class} with the\r\n * supplied {@code name}. Searches all superclasses up to {@link Object}.\r\n * @param clazz the class to introspect\r\n * @param name the name of the field (with upper/lower case to be ignored)\r\n * @return the corresponding Field object, or {@code null} if not found\r\n * @since 6.1\r\n */\r\n@Nullable\r\npublic static Field findFieldIgnoreCase(Class<?> clazz, String name) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    Class<?> searchType = clazz;\r\n    while (Object.class != searchType && searchType != null) {\r\n        Field[] fields = getDeclaredFields(searchType);\r\n        for (Field field : fields) {\r\n            if (name.equalsIgnoreCase(field.getName())) {\r\n                return field;\r\n            }\r\n        }\r\n        searchType = searchType.getSuperclass();\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findFieldIgnoreCase(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findFieldIgnoreCase(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#setField(Field,Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the field represented by the supplied {@linkplain Field field object} on\r\n * the specified {@linkplain Object target object} to the specified {@code value}.\r\n * <p>In accordance with {@link Field#set(Object, Object)} semantics, the new value\r\n * is automatically unwrapped if the underlying field has a primitive type.\r\n * <p>This method does not support setting {@code static final} fields.\r\n * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException(Exception)}.\r\n * @param field the field to set\r\n * @param target the target object on which to set the field\r\n * (or {@code null} for a static field)\r\n * @param value the value to set (may be {@code null})\r\n */\r\npublic static void setField(Field field, @Nullable Object target, @Nullable Object value) {\r\n    try {\r\n        field.set(target, value);\r\n    } catch (IllegalAccessException ex) {\r\n        handleReflectionException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#setField(Field,Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getField(Field,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the field represented by the supplied {@link Field field object} on the\r\n * specified {@link Object target object}. In accordance with {@link Field#get(Object)}\r\n * semantics, the returned value is automatically wrapped if the underlying field\r\n * has a primitive type.\r\n * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException(Exception)}.\r\n * @param field the field to get\r\n * @param target the target object from which to get the field\r\n * (or {@code null} for a static field)\r\n * @return the field's current value\r\n */\r\n@Nullable\r\npublic static Object getField(Field field, @Nullable Object target) {\r\n    try {\r\n        return field.get(target);\r\n    } catch (IllegalAccessException ex) {\r\n        handleReflectionException(ex);\r\n    }\r\n    throw new IllegalStateException(\"Should never get here\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getField(Field,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getField(Field,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithLocalFields(Class<?>,FieldCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the given callback on all locally declared fields in the given class.\r\n * @param clazz the target class to analyze\r\n * @param fc the callback to invoke for each field\r\n * @throws IllegalStateException if introspection fails\r\n * @since 4.2\r\n * @see #doWithFields\r\n */\r\npublic static void doWithLocalFields(Class<?> clazz, FieldCallback fc) {\r\n    for (Field field : getDeclaredFields(clazz)) {\r\n        try {\r\n            fc.doWith(field);\r\n        } catch (IllegalAccessException ex) {\r\n            throw new IllegalStateException(\"Not allowed to access field '\" + field.getName() + \"': \" + ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithLocalFields(Class<?>,FieldCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithFields(Class<?>,FieldCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the given callback on all fields in the target class, going up the\r\n * class hierarchy to get all declared fields.\r\n * @param clazz the target class to analyze\r\n * @param fc the callback to invoke for each field\r\n * @throws IllegalStateException if introspection fails\r\n */\r\npublic static void doWithFields(Class<?> clazz, FieldCallback fc) {\r\n    doWithFields(clazz, fc, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithFields(Class<?>,FieldCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithFields(Class<?>,FieldCallback,FieldFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the given callback on all fields in the target class, going up the\r\n * class hierarchy to get all declared fields.\r\n * @param clazz the target class to analyze\r\n * @param fc the callback to invoke for each field\r\n * @param ff the filter that determines the fields to apply the callback to\r\n * @throws IllegalStateException if introspection fails\r\n */\r\npublic static void doWithFields(Class<?> clazz, FieldCallback fc, @Nullable FieldFilter ff) {\r\n    // Keep backing up the inheritance hierarchy.\r\n    Class<?> targetClass = clazz;\r\n    do {\r\n        for (Field field : getDeclaredFields(targetClass)) {\r\n            if (ff != null && !ff.matches(field)) {\r\n                continue;\r\n            }\r\n            try {\r\n                fc.doWith(field);\r\n            } catch (IllegalAccessException ex) {\r\n                throw new IllegalStateException(\"Not allowed to access field '\" + field.getName() + \"': \" + ex);\r\n            }\r\n        }\r\n        targetClass = targetClass.getSuperclass();\r\n    } while (targetClass != null && targetClass != Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithFields(Class<?>,FieldCallback,FieldFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getDeclaredFields(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This variant retrieves {@link Class#getDeclaredFields()} from a local cache\r\n * in order to avoid defensive array copying.\r\n * @param clazz the class to introspect\r\n * @return the cached array of fields\r\n * @throws IllegalStateException if introspection fails\r\n * @see Class#getDeclaredFields()\r\n */\r\nprivate static Field[] getDeclaredFields(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Field[] result = declaredFieldsCache.get(clazz);\r\n    if (result == null) {\r\n        try {\r\n            result = clazz.getDeclaredFields();\r\n            declaredFieldsCache.put(clazz, (result.length == 0 ? EMPTY_FIELD_ARRAY : result));\r\n        } catch (Throwable ex) {\r\n            throw new IllegalStateException(\"Failed to introspect Class [\" + clazz.getName() + \"] from ClassLoader [\" + clazz.getClassLoader() + \"]\", ex);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  }
]