[
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#setMultiplier(double)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#getMultiplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the value to multiply the current interval by for each retry attempt.\r\n */\r\npublic double getMultiplier() {\r\n    return this.multiplier;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#getMultiplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#setMaxInterval(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the maximum back off time in milliseconds.\r\n */\r\npublic void setMaxInterval(long maxInterval) {\r\n    this.maxInterval = maxInterval;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#setMaxInterval(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#getMaxInterval()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum back off time in milliseconds.\r\n */\r\npublic long getMaxInterval() {\r\n    return this.maxInterval;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#getMaxInterval()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#setMaxElapsedTime(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the maximum elapsed time in milliseconds after which a call to\r\n * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\r\n * @param maxElapsedTime the maximum elapsed time\r\n * @see #setMaxAttempts\r\n */\r\npublic void setMaxElapsedTime(long maxElapsedTime) {\r\n    this.maxElapsedTime = maxElapsedTime;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#setMaxElapsedTime(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#getMaxElapsedTime()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum elapsed time in milliseconds after which a call to\r\n * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\r\n * @return the maximum elapsed time\r\n * @see #getMaxAttempts()\r\n */\r\npublic long getMaxElapsedTime() {\r\n    return this.maxElapsedTime;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#getMaxElapsedTime()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#setMaxAttempts(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The maximum number of attempts after which a call to\r\n * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\r\n * @param maxAttempts the maximum number of attempts\r\n * @since 6.1\r\n * @see #setMaxElapsedTime\r\n */\r\npublic void setMaxAttempts(int maxAttempts) {\r\n    this.maxAttempts = maxAttempts;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#setMaxAttempts(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#getMaxAttempts()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the maximum number of attempts after which a call to\r\n * {@link BackOffExecution#nextBackOff()} returns {@link BackOffExecution#STOP}.\r\n * @return the maximum number of attempts\r\n * @since 6.1\r\n * @see #getMaxElapsedTime()\r\n */\r\npublic int getMaxAttempts() {\r\n    return this.maxAttempts;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#getMaxAttempts()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#start()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic BackOffExecution start() {\r\n    return new ExponentialBackOffExecution();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#start()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#start()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff#checkMultiplier(double)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void checkMultiplier(double multiplier) {\r\n    Assert.isTrue(multiplier >= 1, () -> \"Invalid multiplier '\" + multiplier + \"'. Should be greater than \" + \"or equal to 1. A multiplier of 1 is equivalent to a fixed interval.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.backoff.ExponentialBackOff",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.backoff.ExponentialBackOff#checkMultiplier(double)",
    "tailType": "method"
  }
]