[
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getValueExtractor(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAdaptType(Method,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nprivate <T> Class<T> getAdaptType(Method attribute, Class<T> type) {\r\n    if (type != Object.class) {\r\n        return type;\r\n    }\r\n    Class<?> attributeType = attribute.getReturnType();\r\n    if (attributeType.isAnnotation()) {\r\n        return (Class<T>) MergedAnnotation.class;\r\n    }\r\n    if (attributeType.isArray() && attributeType.componentType().isAnnotation()) {\r\n        return (Class<T>) MergedAnnotation[].class;\r\n    }\r\n    return (Class<T>) ClassUtils.resolvePrimitiveIfNecessary(attributeType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getAdaptType(Method,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAdaptType(Method,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeIndex(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int getAttributeIndex(String attributeName, boolean required) {\r\n    Assert.hasText(attributeName, \"Attribute name must not be null\");\r\n    int attributeIndex = (isFiltered(attributeName) ? -1 : this.mapping.getAttributes().indexOf(attributeName));\r\n    if (attributeIndex == -1 && required) {\r\n        throw new NoSuchElementException(\"No attribute named '\" + attributeName + \"' present in merged annotation \" + getType().getName());\r\n    }\r\n    return attributeIndex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getAttributeIndex(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#isFiltered(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isFiltered(String attributeName) {\r\n    if (this.attributeFilter != null) {\r\n        return !this.attributeFilter.test(attributeName);\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#isFiltered(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate ClassLoader getClassLoader() {\r\n    if (this.classLoader != null) {\r\n        return this.classLoader;\r\n    }\r\n    if (this.source != null) {\r\n        if (this.source instanceof Class<?> clazz) {\r\n            return clazz.getClassLoader();\r\n        }\r\n        if (this.source instanceof Member member) {\r\n            member.getDeclaringClass().getClassLoader();\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#getClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#from(Object,A)",
    "headType": "method",
    "relation": "provide",
    "tail": "static <A extends Annotation> MergedAnnotation<A> from(@Nullable Object source, A annotation) {\r\n    Assert.notNull(annotation, \"Annotation must not be null\");\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(annotation.annotationType());\r\n    return new TypeMappedAnnotation<>(mappings.get(0), null, source, annotation, AnnotationUtils::invokeAnnotationMethod, 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#from(Object,A)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#of(ClassLoader,Object,Class<A>,Map<String,?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "static <A extends Annotation> MergedAnnotation<A> of(@Nullable ClassLoader classLoader, @Nullable Object source, Class<A> annotationType, @Nullable Map<String, ?> attributes) {\r\n    Assert.notNull(annotationType, \"Annotation type must not be null\");\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(annotationType);\r\n    return new TypeMappedAnnotation<>(mappings.get(0), classLoader, source, attributes, TypeMappedAnnotation::extractFromMap, 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#of(ClassLoader,Object,Class<A>,Map<String,?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createIfPossible(AnnotationTypeMapping,MergedAnnotation<?>,IntrospectionFailureLogger)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nstatic <A extends Annotation> TypeMappedAnnotation<A> createIfPossible(AnnotationTypeMapping mapping, MergedAnnotation<?> annotation, IntrospectionFailureLogger logger) {\r\n    if (annotation instanceof TypeMappedAnnotation<?> typeMappedAnnotation) {\r\n        return createIfPossible(mapping, typeMappedAnnotation.source, typeMappedAnnotation.rootAttributes, typeMappedAnnotation.valueExtractor, typeMappedAnnotation.aggregateIndex, logger);\r\n    }\r\n    return createIfPossible(mapping, annotation.getSource(), annotation.synthesize(), annotation.getAggregateIndex(), logger);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#createIfPossible(AnnotationTypeMapping,MergedAnnotation<?>,IntrospectionFailureLogger)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createIfPossible(AnnotationTypeMapping,MergedAnnotation<?>,IntrospectionFailureLogger)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation#createIfPossible(AnnotationTypeMapping,Object,Annotation,int,IntrospectionFailureLogger)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nstatic <A extends Annotation> TypeMappedAnnotation<A> createIfPossible(AnnotationTypeMapping mapping, @Nullable Object source, Annotation annotation, int aggregateIndex, IntrospectionFailureLogger logger) {\r\n    return createIfPossible(mapping, source, annotation, AnnotationUtils::invokeAnnotationMethod, aggregateIndex, logger);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TypeMappedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TypeMappedAnnotation#createIfPossible(AnnotationTypeMapping,Object,Annotation,int,IntrospectionFailureLogger)",
    "tailType": "method"
  }
]