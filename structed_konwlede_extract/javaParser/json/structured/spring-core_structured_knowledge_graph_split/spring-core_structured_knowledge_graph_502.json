[
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#trackCreated",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#trackCreated",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicBoolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Checks whether all the data buffers allocated by this factory have also been released.\r\n * If not, then an {@link AssertionError} is thrown. Typically used from a JUnit <em>after</em>\r\n * method.\r\n */\r\npublic void checkForLeaks() {\r\n    checkForLeaks(Duration.ofSeconds(0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Variant of {@link #checkForLeaks()} with the option to wait for buffer release.\r\n * @param timeout how long to wait for buffers to be released; 0 for no waiting\r\n */\r\npublic void checkForLeaks(Duration timeout) {\r\n    this.trackCreated.set(false);\r\n    Instant start = Instant.now();\r\n    while (true) {\r\n        if (this.created.stream().noneMatch(LeakAwareDataBuffer::isAllocated)) {\r\n            return;\r\n        }\r\n        if (Instant.now().isBefore(start.plus(timeout))) {\r\n            try {\r\n                Thread.sleep(50);\r\n            } catch (InterruptedException ex) {\r\n                // ignore\r\n            }\r\n            continue;\r\n        }\r\n        List<AssertionError> errors = this.created.stream().filter(LeakAwareDataBuffer::isAllocated).map(LeakAwareDataBuffer::leakError).toList();\r\n        errors.forEach(it -> logger.error(\"Leaked error: \", it));\r\n        throw new AssertionError(errors.size() + \" buffer leaks detected (see logs above)\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#checkForLeaks(Duration)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic DataBuffer allocateBuffer() {\r\n    return createLeakAwareDataBuffer(this.delegate.allocateBuffer());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer allocateBuffer(int initialCapacity) {\r\n    return createLeakAwareDataBuffer(this.delegate.allocateBuffer(initialCapacity));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#createLeakAwareDataBuffer(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private DataBuffer createLeakAwareDataBuffer(DataBuffer delegateBuffer) {\r\n    LeakAwareDataBuffer dataBuffer = new LeakAwareDataBuffer(delegateBuffer, this);\r\n    if (this.trackCreated.get()) {\r\n        this.created.add(dataBuffer);\r\n    }\r\n    return dataBuffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#createLeakAwareDataBuffer(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer wrap(ByteBuffer byteBuffer) {\r\n    return this.delegate.wrap(byteBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer wrap(byte[] bytes) {\r\n    return this.delegate.wrap(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBufferFactory#wrap(byte[])",
    "tailType": "method"
  }
]