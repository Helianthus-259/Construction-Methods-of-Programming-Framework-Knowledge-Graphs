[
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithSpecificDeclaration()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithGenericDeclaration()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reflectiveTypeReferenceWithGenericDeclaration() throws Exception {\r\n    Type listType = getClass().getMethod(\"listMethod\").getGenericReturnType();\r\n    ParameterizedTypeReference<?> typeReference = ParameterizedTypeReference.forType(listType);\r\n    assertThat(typeReference.getType()).isEqualTo(listType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithGenericDeclaration()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#reflectiveTypeReferenceWithGenericDeclaration()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#mapMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Map<Object, String> mapMethod() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#mapMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests#listMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "public static List<String> listMethod() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ParameterizedTypeReferenceTests#listMethod()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.tests.sample.objects.TestObject;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass PrioritizedParameterNameDiscovererTests {\n\n\tprivate static final String[] FOO_BAR = new String[] { \"foo\", \"bar\" };\n\n\tprivate static final String[] SOMETHING_ELSE = new String[] { \"something\", \"else\" };\n\n\tprivate final ParameterNameDiscoverer returnsFooBar = new ParameterNameDiscoverer() {\n\t\t@Override\n\t\tpublic String[] getParameterNames(Method m) {\n\t\t\treturn FOO_BAR;\n\t\t}\n\t\t@Override\n\t\tpublic String[] getParameterNames(Constructor<?> ctor) {\n\t\t\treturn FOO_BAR;\n\t\t}\n\t};\n\n\tprivate final ParameterNameDiscoverer returnsSomethingElse = new ParameterNameDiscoverer() {\n\t\t@Override\n\t\tpublic String[] getParameterNames(Method m) {\n\t\t\treturn SOMETHING_ELSE;\n\t\t}\n\t\t@Override\n\t\tpublic String[] getParameterNames(Constructor<?> ctor) {\n\t\t\treturn SOMETHING_ELSE;\n\t\t}\n\t};\n\n\tprivate final Method anyMethod;\n\n\tpublic PrioritizedParameterNameDiscovererTests() throws SecurityException, NoSuchMethodException {\n\t\tanyMethod = TestObject.class.getMethod(\"getAge\");\n\t}\n\n\t@Test\n\tvoid noParametersDiscoverers() {\n\t\tParameterNameDiscoverer pnd = new PrioritizedParameterNameDiscoverer();\n\t\tassertThat(pnd.getParameterNames(anyMethod)).isNull();\n\t\tassertThat(pnd.getParameterNames((Constructor<?>) null)).isNull();\n\t}\n\n\t@Test\n\tvoid orderedParameterDiscoverers1() {\n\t\tPrioritizedParameterNameDiscoverer pnd = new PrioritizedParameterNameDiscoverer();\n\t\tpnd.addDiscoverer(returnsFooBar);\n\t\tassertThat(Arrays.equals(FOO_BAR, pnd.getParameterNames(anyMethod))).isTrue();\n\t\tassertThat(Arrays.equals(FOO_BAR, pnd.getParameterNames((Constructor<?>) null))).isTrue();\n\t\tpnd.addDiscoverer(returnsSomethingElse);\n\t\tassertThat(Arrays.equals(FOO_BAR, pnd.getParameterNames(anyMethod))).isTrue();\n\t\tassertThat(Arrays.equals(FOO_BAR, pnd.getParameterNames((Constructor<?>) null))).isTrue();\n\t}\n\n\t@Test\n\tvoid orderedParameterDiscoverers2() {\n\t\tPrioritizedParameterNameDiscoverer pnd = new PrioritizedParameterNameDiscoverer();\n\t\tpnd.addDiscoverer(returnsSomethingElse);\n\t\tassertThat(Arrays.equals(SOMETHING_ELSE, pnd.getParameterNames(anyMethod))).isTrue();\n\t\tassertThat(Arrays.equals(SOMETHING_ELSE, pnd.getParameterNames((Constructor<?>) null))).isTrue();\n\t\tpnd.addDiscoverer(returnsFooBar);\n\t\tassertThat(Arrays.equals(SOMETHING_ELSE, pnd.getParameterNames(anyMethod))).isTrue();\n\t\tassertThat(Arrays.equals(SOMETHING_ELSE, pnd.getParameterNames((Constructor<?>) null))).isTrue();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests#FOO_BAR",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests#FOO_BAR",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests#SOMETHING_ELSE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests#SOMETHING_ELSE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests#returnsFooBar",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests#returnsFooBar",
    "headType": "field",
    "relation": "haveType",
    "tail": "ParameterNameDiscoverer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests#returnsSomethingElse",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests#returnsSomethingElse",
    "headType": "field",
    "relation": "haveType",
    "tail": "ParameterNameDiscoverer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscovererTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.PrioritizedParameterNameDiscovererTests#anyMethod",
    "tailType": "field"
  }
]