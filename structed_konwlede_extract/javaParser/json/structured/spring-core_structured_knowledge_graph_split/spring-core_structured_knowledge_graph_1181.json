[
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Callable<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> Future<T> submit(Callable<T> task) {\r\n    try {\r\n        if (this.taskDecorator == null && this.concurrentExecutor instanceof ExecutorService executorService) {\r\n            return executorService.submit(task);\r\n        } else {\r\n            FutureTask<T> future = new FutureTask<>(task);\r\n            doExecute(this.concurrentExecutor, this.taskDecorator, future);\r\n            return future;\r\n        }\r\n    } catch (RejectedExecutionException ex) {\r\n        throw new TaskRejectedException(this.concurrentExecutor, task, ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Callable<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#submit(Callable<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter#doExecute(Executor,TaskDecorator,Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Actually execute the given {@code Runnable} (which may be a user-supplied task\r\n * or a wrapper around a user-supplied task) with the given executor.\r\n * @param concurrentExecutor the underlying JDK concurrent executor to delegate to\r\n * @param taskDecorator the specified decorator to be applied, if any\r\n * @param runnable the runnable to execute\r\n * @throws RejectedExecutionException if the given runnable cannot be accepted\r\n * @since 4.3\r\n */\r\nprotected void doExecute(Executor concurrentExecutor, @Nullable TaskDecorator taskDecorator, Runnable runnable) throws RejectedExecutionException {\r\n    concurrentExecutor.execute(taskDecorator != null ? taskDecorator.decorate(runnable) : runnable);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.support.TaskExecutorAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.support.TaskExecutorAdapter#doExecute(Executor,TaskDecorator,Runnable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.SyncTaskExecutor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.SyncTaskExecutor",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.SyncTaskExecutor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.io.Serializable;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link TaskExecutor} implementation that executes each task <i>synchronously</i>\n * in the calling thread.\n *\n * <p>Mainly intended for testing scenarios.\n *\n * <p>Execution in the calling thread does have the advantage of participating\n * in its thread context, for example the thread context class loader or the\n * thread's current transaction association. That said, in many cases,\n * asynchronous execution will be preferable: choose an asynchronous\n * {@code TaskExecutor} instead for such scenarios.\n *\n * @author Juergen Hoeller\n * @since 2.0\n * @see SimpleAsyncTaskExecutor\n */\n@SuppressWarnings(\"serial\")\npublic class SyncTaskExecutor implements TaskExecutor, Serializable {\n\n\t/**\n\t * Executes the given {@code task} synchronously, through direct\n\t * invocation of it's {@link Runnable#run() run()} method.\n\t * @throws IllegalArgumentException if the given {@code task} is {@code null}\n\t */\n\t@Override\n\tpublic void execute(Runnable task) {\n\t\tAssert.notNull(task, \"Runnable must not be null\");\n\t\ttask.run();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.SyncTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Executes the given {@code task} synchronously, through direct\r\n * invocation of it's {@link Runnable#run() run()} method.\r\n * @throws IllegalArgumentException if the given {@code task} is {@code null}\r\n */\r\n@Override\r\npublic void execute(Runnable task) {\r\n    Assert.notNull(task, \"Runnable must not be null\");\r\n    task.run();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.SyncTaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.SyncTaskExecutor#execute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.SyncTaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.TaskDecorator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.TaskDecorator",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskDecorator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\n/**\n * A callback interface for a decorator to be applied to any {@link Runnable}\n * about to be executed.\n *\n * <p>Note that such a decorator is not necessarily being applied to the\n * user-supplied {@code Runnable}/{@code Callable} but rather to the actual\n * execution callback (which may be a wrapper around the user-supplied task).\n *\n * <p>The primary use case is to set some execution context around the task's\n * invocation, or to provide some monitoring/statistics for task execution.\n *\n * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations\n * may be limited. Specifically in case of a {@code Future}-based operation,\n * the exposed {@code Runnable} will be a wrapper which does not propagate\n * any exceptions from its {@code run} method.\n *\n * @author Juergen Hoeller\n * @since 4.3\n * @see TaskExecutor#execute(Runnable)\n * @see SimpleAsyncTaskExecutor#setTaskDecorator\n * @see org.springframework.core.task.support.TaskExecutorAdapter#setTaskDecorator\n */\n@FunctionalInterface\npublic interface TaskDecorator {\n\n\t/**\n\t * Decorate the given {@code Runnable}, returning a potentially wrapped\n\t * {@code Runnable} for actual execution, internally delegating to the\n\t * original {@link Runnable#run()} implementation.\n\t * @param runnable the original {@code Runnable}\n\t * @return the decorated {@code Runnable}\n\t */\n\tRunnable decorate(Runnable runnable);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.TaskDecorator#decorate(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decorate the given {@code Runnable}, returning a potentially wrapped\r\n * {@code Runnable} for actual execution, internally delegating to the\r\n * original {@link Runnable#run()} implementation.\r\n * @param runnable the original {@code Runnable}\r\n * @return the decorated {@code Runnable}\r\n */\r\nRunnable decorate(Runnable runnable);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.TaskDecorator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.TaskDecorator#decorate(Runnable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.TaskExecutor",
    "tailType": "class"
  }
]