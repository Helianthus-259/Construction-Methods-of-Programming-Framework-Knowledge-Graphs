[
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#extractJarFileURL(URL)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#extractArchiveURL(URL)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Extract the URL for the outermost archive from the given jar/war URL\r\n * (which may point to a resource in a jar file or to a jar file itself).\r\n * <p>In the case of a jar file nested within a war file, this will return\r\n * a URL to the war file since that is the one resolvable in the file system.\r\n * @param jarUrl the original URL\r\n * @return the URL for the actual jar file\r\n * @throws MalformedURLException if no valid jar file URL could be extracted\r\n * @since 4.1.8\r\n * @see #extractJarFileURL(URL)\r\n */\r\npublic static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\r\n    String urlFile = jarUrl.getFile();\r\n    int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);\r\n    if (endIndex != -1) {\r\n        // Tomcat's \"war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt\"\r\n        String warFile = urlFile.substring(0, endIndex);\r\n        if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {\r\n            return toURL(warFile);\r\n        }\r\n        int startIndex = warFile.indexOf(WAR_URL_PREFIX);\r\n        if (startIndex != -1) {\r\n            return toURL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));\r\n        }\r\n    }\r\n    // Regular \"jar:file:...myjar.jar!/myentry.txt\"\r\n    return extractJarFileURL(jarUrl);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#extractArchiveURL(URL)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toURI(URL)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a URI instance for the given URL,\r\n * replacing spaces with \"%20\" URI encoding first.\r\n * @param url the URL to convert into a URI instance\r\n * @return the URI instance\r\n * @throws URISyntaxException if the URL wasn't a valid URI\r\n * @see java.net.URL#toURI()\r\n * @see #toURI(String)\r\n */\r\npublic static URI toURI(URL url) throws URISyntaxException {\r\n    return toURI(url.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#toURI(URL)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toURI(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a URI instance for the given location String,\r\n * replacing spaces with \"%20\" URI encoding first.\r\n * @param location the location String to convert into a URI instance\r\n * @return the URI instance\r\n * @throws URISyntaxException if the location wasn't a valid URI\r\n * @see #toURI(URL)\r\n */\r\npublic static URI toURI(String location) throws URISyntaxException {\r\n    return new URI(StringUtils.replace(location, \" \", \"%20\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#toURI(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toURL(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a clean URL instance for the given location String,\r\n * going through URI construction and then URL conversion.\r\n * @param location the location String to convert into a URL instance\r\n * @return the URL instance\r\n * @throws MalformedURLException if the location wasn't a valid URL\r\n * @since 6.0\r\n * @see java.net.URI#toURL()\r\n * @see #toURI(String)\r\n */\r\n// on JDK 20 (deprecated URL constructor)\r\n@SuppressWarnings(\"deprecation\")\r\npublic static URL toURL(String location) throws MalformedURLException {\r\n    try {\r\n        // Prefer URI construction with toURL conversion (as of 6.1)\r\n        return toURI(StringUtils.cleanPath(location)).toURL();\r\n    } catch (URISyntaxException | IllegalArgumentException ex) {\r\n        // Lenient fallback to deprecated URL constructor,\r\n        // e.g. for decoded location Strings with percent characters.\r\n        return new URL(location);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#toURL(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toURL(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toRelativeURL(URL,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a clean URL instance for the given root URL and relative path,\r\n * going through URI construction and then URL conversion.\r\n * @param root the root URL to start from\r\n * @param relativePath the relative path to apply\r\n * @return the relative URL instance\r\n * @throws MalformedURLException if the end result is not a valid URL\r\n * @since 6.0\r\n * @see #toURL(String)\r\n * @see StringUtils#applyRelativePath\r\n */\r\n// on JDK 20 (deprecated URL constructor)\r\n@SuppressWarnings(\"deprecation\")\r\npublic static URL toRelativeURL(URL root, String relativePath) throws MalformedURLException {\r\n    // # can appear in filenames, java.net.URL should not treat it as a fragment\r\n    relativePath = StringUtils.replace(relativePath, \"#\", \"%23\");\r\n    // Retain original URL instance, potentially including custom URLStreamHandler.\r\n    return new URL(root, StringUtils.cleanPath(StringUtils.applyRelativePath(root.toString(), relativePath)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#toRelativeURL(URL,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ResourceUtils#toRelativeURL(URL,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ResourceUtils#useCachesIfNecessary(URLConnection)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the {@link URLConnection#setUseCaches \"useCaches\"} flag on the\r\n * given connection, preferring {@code false} but leaving the flag at\r\n * its JVM default value for jar resources (typically {@code true}).\r\n * @param con the URLConnection to set the flag on\r\n * @see URLConnection#setUseCaches\r\n */\r\npublic static void useCachesIfNecessary(URLConnection con) {\r\n    if (!(con instanceof JarURLConnection)) {\r\n        con.setUseCaches(false);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ResourceUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ResourceUtils#useCachesIfNecessary(URLConnection)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.RouteMatcher",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Contract for matching routes to patterns.\n *\n * <p>Equivalent to {@link PathMatcher}, but enables use of parsed representations\n * of routes and patterns for efficiency reasons in scenarios where routes from\n * incoming messages are continuously matched against a large number of message\n * handler patterns.\n *\n * @author Rossen Stoyanchev\n * @since 5.2\n * @see PathMatcher\n */\npublic interface RouteMatcher {\n\n\t/**\n\t * Return a parsed representation of the given route.\n\t * @param routeValue the route to parse\n\t * @return the parsed representation of the route\n\t */\n\tRoute parseRoute(String routeValue);\n\n\t/**\n\t * Whether the given {@code route} contains pattern syntax which requires\n\t * the {@link #match(String, Route)} method, or if it is a regular String\n\t * that could be compared directly to others.\n\t * @param route the route to check\n\t * @return {@code true} if the given {@code route} represents a pattern\n\t */\n\tboolean isPattern(String route);\n\n\t/**\n\t * Combines two patterns into a single pattern.\n\t * @param pattern1 the first pattern\n\t * @param pattern2 the second pattern\n\t * @return the combination of the two patterns\n\t * @throws IllegalArgumentException when the two patterns cannot be combined\n\t */\n\tString combine(String pattern1, String pattern2);\n\n\t/**\n\t * Match the given route against the given pattern.\n\t * @param pattern the pattern to try to match\n\t * @param route the route to test against\n\t * @return {@code true} if there is a match, {@code false} otherwise\n\t */\n\tboolean match(String pattern, Route route);\n\n\t/**\n\t * Match the pattern to the route and extract template variables.\n\t * @param pattern the pattern, possibly containing templates variables\n\t * @param route the route to extract template variables from\n\t * @return a map with template variables and values\n\t */\n\t@Nullable Map<String, String> matchAndExtract(String pattern, Route route);\n\n\t/**\n\t * Given a route, return a {@link Comparator} suitable for sorting patterns\n\t * in order of explicitness for that route, so that more specific patterns\n\t * come before more generic ones.\n\t * @param route the full path to use for comparison\n\t * @return a comparator capable of sorting patterns in order of explicitness\n\t */\n\tComparator<String> getPatternComparator(Route route);\n\n\n\t/**\n\t * A parsed representation of a route.\n \t */\n\tinterface Route {\n\n\t\t/**\n\t\t * The original route value.\n\t\t */\n\t\tString value();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher#parseRoute(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a parsed representation of the given route.\r\n * @param routeValue the route to parse\r\n * @return the parsed representation of the route\r\n */\r\nRoute parseRoute(String routeValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.RouteMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.RouteMatcher#parseRoute(String)",
    "tailType": "method"
  }
]