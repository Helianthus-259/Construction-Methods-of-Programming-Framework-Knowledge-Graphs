[
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decodeInputStreamResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeInputStreamResource() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    testDecodeAll(input, InputStreamResource.class, step -> step.consumeNextWith(resource -> {\r\n        try {\r\n            byte[] bytes = StreamUtils.copyToByteArray(resource.getInputStream());\r\n            assertThat(new String(bytes)).isEqualTo(\"foobar\");\r\n            assertThat(resource.contentLength()).isEqualTo(fooBytes.length + barBytes.length);\r\n        } catch (IOException ex) {\r\n            throw new AssertionError(ex.getMessage(), ex);\r\n        }\r\n    }).expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceDecoderTests#decodeInputStreamResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests#decodeInputStreamResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.ResourceEncoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.test.StepVerifier;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.InputStreamResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.codec.AbstractEncoderTests;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass ResourceEncoderTests extends AbstractEncoderTests<ResourceEncoder> {\n\n\tprivate final byte[] bytes = \"foo\".getBytes(UTF_8);\n\n\n\tResourceEncoderTests() {\n\t\tsuper(new ResourceEncoder());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canEncode() {\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(InputStreamResource.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(ByteArrayResource.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(Resource.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(InputStreamResource.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\n\t\t// SPR-15464\n\t\tassertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void encode() {\n\t\tFlux<Resource> input = Flux.just(new ByteArrayResource(this.bytes));\n\n\t\ttestEncodeAll(input, Resource.class, step -> step\n\t\t\t\t.consumeNextWith(expectBytes(this.bytes))\n\t\t\t\t.verifyComplete());\n\t}\n\n\t@Override\n\tprotected void testEncodeError(Publisher<?> input, ResolvableType outputType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tFlux<Resource> i = Flux.error(new InputException());\n\n\t\tFlux<DataBuffer> result = this.encoder.encode(i,\n\t\t\t\tthis.bufferFactory, outputType,\n\t\t\t\tmimeType, hints);\n\n\t\tStepVerifier.create(result)\n\t\t\t\t.expectError(InputException.class)\n\t\t\t\t.verify();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ResourceEncoderTests#bytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#bytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    // SPR-15464\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<Resource> input = Flux.just(new ByteArrayResource(this.bytes));\r\n    testEncodeAll(input, Resource.class, step -> step.consumeNextWith(expectBytes(this.bytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceEncoderTests#encode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#testEncodeError(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void testEncodeError(Publisher<?> input, ResolvableType outputType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<Resource> i = Flux.error(new InputException());\r\n    Flux<DataBuffer> result = this.encoder.encode(i, this.bufferFactory, outputType, mimeType, hints);\r\n    StepVerifier.create(result).expectError(InputException.class).verify();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ResourceEncoderTests#testEncodeError(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ResourceEncoderTests#testEncodeError(Publisher<?>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]