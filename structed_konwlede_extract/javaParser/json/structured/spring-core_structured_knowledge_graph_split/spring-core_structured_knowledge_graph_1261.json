[
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.BooleanComparator#TRUE_HIGH",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#TRUE_HIGH",
    "headType": "field",
    "relation": "haveType",
    "tail": "BooleanComparator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.BooleanComparator#trueLow",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#trueLow",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#compare(Boolean,Boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(Boolean left, Boolean right) {\r\n    int multiplier = this.trueLow ? -1 : 1;\r\n    return multiplier * Boolean.compare(left, right);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparator#compare(Boolean,Boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#compare(Boolean,Boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof BooleanComparator that && this.trueLow == that.trueLow));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparator#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return Boolean.hashCode(this.trueLow);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparator#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"BooleanComparator: \" + (this.trueLow ? \"true low\" : \"true high\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.BooleanComparator#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.BooleanComparator#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.ComparableComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\n/**\n * Comparator that adapts Comparables to the Comparator interface.\n * Mainly for internal use in other Comparators, when supposed\n * to work on Comparables.\n *\n * @author Keith Donald\n * @since 1.2.2\n * @param <T> the type of comparable objects that may be compared by this comparator\n * @see Comparable\n * @deprecated as of 6.1 in favor of {@link Comparator#naturalOrder()}\n */\n@Deprecated(since = \"6.1\")\npublic class ComparableComparator<T extends Comparable<T>> implements Comparator<T> {\n\n\t/**\n\t * A shared instance of this default comparator.\n\t * @see Comparators#comparable()\n\t */\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic static final ComparableComparator INSTANCE = new ComparableComparator();\n\n\n\t@Override\n\tpublic int compare(T o1, T o2) {\n\t\treturn o1.compareTo(o2);\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]