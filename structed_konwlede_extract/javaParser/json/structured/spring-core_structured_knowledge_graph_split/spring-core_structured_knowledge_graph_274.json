[
  {
    "head": "org.springframework.util.NumberUtilsTests#convertToLong()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertLongEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertLongEquals(String aLong) {\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class)).as(\"Long did not parse\").isEqualTo(Long.MAX_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertLongEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertIntegerEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertIntegerEquals(String anInteger) {\r\n    assertThat(NumberUtils.parseNumber(anInteger, Integer.class)).as(\"Integer did not parse\").isEqualTo(Integer.MAX_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertIntegerEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertShortEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertShortEquals(String aShort) {\r\n    assertThat(NumberUtils.parseNumber(aShort, Short.class)).as(\"Short did not parse\").isEqualTo(Short.MAX_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertShortEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertByteEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertByteEquals(String aByte) {\r\n    assertThat(NumberUtils.parseNumber(aByte, Byte.class)).as(\"Byte did not parse\").isEqualTo(Byte.MAX_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertByteEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertNegativeLongEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertNegativeLongEquals(String aLong) {\r\n    assertThat(NumberUtils.parseNumber(aLong, Long.class)).as(\"Long did not parse\").isEqualTo(Long.MIN_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertNegativeLongEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertNegativeIntegerEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertNegativeIntegerEquals(String anInteger) {\r\n    assertThat(NumberUtils.parseNumber(anInteger, Integer.class)).as(\"Integer did not parse\").isEqualTo(Integer.MIN_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertNegativeIntegerEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertNegativeShortEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertNegativeShortEquals(String aShort) {\r\n    assertThat(NumberUtils.parseNumber(aShort, Short.class)).as(\"Short did not parse\").isEqualTo(Short.MIN_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertNegativeShortEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertNegativeByteEquals(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertNegativeByteEquals(String aByte) {\r\n    assertThat(NumberUtils.parseNumber(aByte, Byte.class)).as(\"Byte did not parse\").isEqualTo(Byte.MIN_VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertNegativeByteEquals(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests#assertToNumberOverflow(Number,Class<? extends Number>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertToNumberOverflow(Number number, Class<? extends Number> targetClass) {\r\n    String msg = \"overflow: from=\" + number + \", toClass=\" + targetClass;\r\n    assertThatIllegalArgumentException().as(msg).isThrownBy(() -> NumberUtils.convertNumberToTargetClass(number, targetClass)).withMessageEndingWith(\"overflow\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NumberUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NumberUtilsTests#assertToNumberOverflow(Number,Class<? extends Number>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex.substitution",
    "tailType": "package"
  }
]