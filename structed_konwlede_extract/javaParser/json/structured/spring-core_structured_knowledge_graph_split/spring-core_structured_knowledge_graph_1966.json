[
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withNullInput()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolvePlaceholders_withNullInput() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourcesPropertyResolver(new MutablePropertySources()).resolvePlaceholders(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withNullInput()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolvePlaceholders_withNullInput()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveRequiredPlaceholders() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(resolver.resolveRequiredPlaceholders(\"Replace this ${key}\")).isEqualTo(\"Replace this value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withUnresolvable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveRequiredPlaceholders_withUnresolvable() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> resolver.resolveRequiredPlaceholders(\"Replace this ${key} plus ${unknown}\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withUnresolvable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withUnresolvable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withDefaultValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveRequiredPlaceholders_withDefaultValue() {\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MockPropertySource().withProperty(\"key\", \"value\"));\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(resolver.resolveRequiredPlaceholders(\"Replace this ${key} plus ${unknown:defaultValue}\")).isEqualTo(\"Replace this value plus defaultValue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withDefaultValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withDefaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withNullInput()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveRequiredPlaceholders_withNullInput() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourcesPropertyResolver(new MutablePropertySources()).resolveRequiredPlaceholders(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withNullInput()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveRequiredPlaceholders_withNullInput()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#setRequiredProperties_andValidateRequiredProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid setRequiredProperties_andValidateRequiredProperties() {\r\n    // no properties have been marked as required -> validation should pass\r\n    propertyResolver.validateRequiredProperties();\r\n    // mark which properties are required\r\n    propertyResolver.setRequiredProperties(\"foo\", \"bar\");\r\n    // neither foo nor bar properties are present -> validating should throw\r\n    assertThatExceptionOfType(MissingRequiredPropertiesException.class).isThrownBy(propertyResolver::validateRequiredProperties).withMessage(\"The following properties were declared as required \" + \"but could not be resolved: [foo, bar]\");\r\n    // add foo property -> validation should fail only on missing 'bar' property\r\n    testProperties.put(\"foo\", \"fooValue\");\r\n    assertThatExceptionOfType(MissingRequiredPropertiesException.class).isThrownBy(propertyResolver::validateRequiredProperties).withMessage(\"The following properties were declared as required \" + \"but could not be resolved: [bar]\");\r\n    // add bar property -> validation should pass, even with an empty string value\r\n    testProperties.put(\"bar\", \"\");\r\n    propertyResolver.validateRequiredProperties();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#setRequiredProperties_andValidateRequiredProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#setRequiredProperties_andValidateRequiredProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveNestedPropertyPlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveNestedPropertyPlaceholders() {\r\n    MutablePropertySources ps = new MutablePropertySources();\r\n    ps.addFirst(new MockPropertySource().withProperty(\"p1\", \"v1\").withProperty(\"p2\", \"v2\").withProperty(\"p3\", // nested placeholders\r\n    \"${p1}:${p2}\").withProperty(\"p4\", // deeply nested placeholders\r\n    \"${p3}\").withProperty(\"p5\", // unresolvable placeholder\r\n    \"${p1}:${p2}:${bogus}\").withProperty(\"p6\", // unresolvable w/ default\r\n    \"${p1}:${p2}:${bogus:def}\").withProperty(\"pL\", // cyclic reference left\r\n    \"${pR}\").withProperty(\"pR\", // cyclic reference right\r\n    \"${pL}\"));\r\n    ConfigurablePropertyResolver pr = new PropertySourcesPropertyResolver(ps);\r\n    assertThat(pr.getProperty(\"p1\")).isEqualTo(\"v1\");\r\n    assertThat(pr.getProperty(\"p2\")).isEqualTo(\"v2\");\r\n    assertThat(pr.getProperty(\"p3\")).isEqualTo(\"v1:v2\");\r\n    assertThat(pr.getProperty(\"p4\")).isEqualTo(\"v1:v2\");\r\n    assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> pr.getProperty(\"p5\")).withMessageContaining(\"Could not resolve placeholder 'bogus' in value \\\"${p1}:${p2}:${bogus}\\\"\");\r\n    assertThat(pr.getProperty(\"p6\")).isEqualTo(\"v1:v2:def\");\r\n    assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> pr.getProperty(\"pL\")).withMessageContaining(\"Circular\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#resolveNestedPropertyPlaceholders()",
    "tailType": "method"
  }
]