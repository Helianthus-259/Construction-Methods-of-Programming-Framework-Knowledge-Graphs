[
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#getFirst()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getFirst() {\r\n    assertThat(this.adapter.getFirst(\"foo\")).isEqualTo(\"bar\");\r\n    assertThat(this.adapter.getFirst(\"qux\")).isEqualTo(\"quux\");\r\n    assertThat(this.adapter.getFirst(\"corge\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#getFirst()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#getFirst()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#add()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid add() {\r\n    this.adapter.add(\"corge\", \"grault\");\r\n    assertThat(this.adapter.getFirst(\"corge\")).isEqualTo(\"grault\");\r\n    assertThat(this.delegate.get(\"corge\")).isEqualTo(\"grault\");\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> this.adapter.add(\"foo\", \"garply\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#add()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#add()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#addAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addAll() {\r\n    MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\r\n    map.add(\"corge\", \"grault\");\r\n    this.adapter.addAll(map);\r\n    assertThat(this.adapter.getFirst(\"corge\")).isEqualTo(\"grault\");\r\n    assertThat(this.delegate.get(\"corge\")).isEqualTo(\"grault\");\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> this.adapter.addAll(map));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#addAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#addAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#set()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid set() {\r\n    this.adapter.set(\"foo\", \"baz\");\r\n    assertThat(this.delegate.get(\"foo\")).isEqualTo(\"baz\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#set()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#set()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#setAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid setAll() {\r\n    this.adapter.setAll(Map.of(\"foo\", \"baz\"));\r\n    assertThat(this.delegate.get(\"foo\")).isEqualTo(\"baz\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#setAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#setAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid size() {\r\n    assertThat(this.adapter.size()).isEqualTo(this.delegate.size()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#isEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isEmpty() {\r\n    assertThat(this.adapter.isEmpty()).isFalse();\r\n    this.adapter = new SingleToMultiValueMapAdapter<>(Collections.emptyMap());\r\n    assertThat(this.adapter.isEmpty()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#isEmpty()",
    "tailType": "method"
  }
]