[
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#endPrefixMapping(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#startElement(String,String,String,Attributes)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\r\n    try {\r\n        startElementInternal(toQName(uri, qName), atts, currentNamespaceMapping());\r\n        newNamespaceMapping();\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle startElement: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#startElement(String,String,String,Attributes)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#startElement(String,String,String,Attributes)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#endElement(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void endElement(String uri, String localName, String qName) throws SAXException {\r\n    try {\r\n        endElementInternal(toQName(uri, qName), currentNamespaceMapping());\r\n        removeNamespaceMapping();\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle endElement: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#endElement(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#endElement(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#characters(char[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void characters(char[] ch, int start, int length) throws SAXException {\r\n    try {\r\n        String data = new String(ch, start, length);\r\n        if (!this.inCData) {\r\n            charactersInternal(data);\r\n        } else {\r\n            cDataInternal(data);\r\n        }\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle characters: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#characters(char[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#characters(char[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#ignorableWhitespace(char[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\r\n    try {\r\n        ignorableWhitespaceInternal(new String(ch, start, length));\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle ignorableWhitespace:\" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#ignorableWhitespace(char[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#ignorableWhitespace(char[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#processingInstruction(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void processingInstruction(String target, String data) throws SAXException {\r\n    try {\r\n        processingInstructionInternal(target, data);\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle processingInstruction: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#processingInstruction(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#processingInstruction(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#skippedEntity(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void skippedEntity(String name) throws SAXException {\r\n    try {\r\n        skippedEntityInternal(name);\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle skippedEntity: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractStaxHandler#skippedEntity(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#skippedEntity(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractStaxHandler#startDTD(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void startDTD(String name, @Nullable String publicId, String systemId) throws SAXException {\r\n    try {\r\n        StringBuilder builder = new StringBuilder(\"<!DOCTYPE \");\r\n        builder.append(name);\r\n        if (publicId != null) {\r\n            builder.append(\" PUBLIC \\\"\");\r\n            builder.append(publicId);\r\n            builder.append(\"\\\" \\\"\");\r\n        } else {\r\n            builder.append(\" SYSTEM \\\"\");\r\n        }\r\n        builder.append(systemId);\r\n        builder.append(\"\\\">\");\r\n        dtdInternal(builder.toString());\r\n    } catch (XMLStreamException ex) {\r\n        throw new SAXException(\"Could not handle startDTD: \" + ex.getMessage(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]