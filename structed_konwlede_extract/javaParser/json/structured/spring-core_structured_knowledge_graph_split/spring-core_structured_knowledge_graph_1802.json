[
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2583()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2603()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr2603() throws Exception {\r\n    Method objectBridge = YourHomer.class.getDeclaredMethod(\"foo\", Bounded.class);\r\n    Method abstractBoundedFoo = YourHomer.class.getDeclaredMethod(\"foo\", AbstractBounded.class);\r\n    Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(objectBridge);\r\n    assertThat(bridgedMethod).as(\"foo(AbstractBounded) not resolved.\").isEqualTo(abstractBoundedFoo);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr2603()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2603()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2648()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr2648() {\r\n    Method bridgeMethod = ReflectionUtils.findMethod(GenericSqlMapIntegerDao.class, \"saveOrUpdate\", Object.class);\r\n    assertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\r\n    Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(bridgeMethod);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    assertThat(bridgedMethod.getName()).isEqualTo(\"saveOrUpdate\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr2648()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2648()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2763()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr2763() throws Exception {\r\n    Method bridgedMethod = AbstractDao.class.getDeclaredMethod(\"save\", Object.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = UserDaoImpl.class.getDeclaredMethod(\"save\", User.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr2763()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr2763()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3041()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3041() throws Exception {\r\n    Method bridgedMethod = BusinessDao.class.getDeclaredMethod(\"save\", Business.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = BusinessDao.class.getDeclaredMethod(\"save\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3041()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3041()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3173()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3173() throws Exception {\r\n    Method bridgedMethod = UserDaoImpl.class.getDeclaredMethod(\"saveVararg\", User.class, Object[].class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = UserDaoImpl.class.getDeclaredMethod(\"saveVararg\", Object.class, Object[].class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3173()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3173()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3304()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3304() throws Exception {\r\n    Method bridgedMethod = MegaMessageProducerImpl.class.getDeclaredMethod(\"receive\", MegaMessageEvent.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = MegaMessageProducerImpl.class.getDeclaredMethod(\"receive\", MegaEvent.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolverTests#spr3304()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3304()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolverTests#spr3324()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr3324() throws Exception {\r\n    Method bridgedMethod = BusinessDao.class.getDeclaredMethod(\"get\", Long.class);\r\n    assertThat(bridgedMethod.isBridge()).isFalse();\r\n    Method bridgeMethod = BusinessDao.class.getDeclaredMethod(\"get\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(BridgeMethodResolver.findBridgedMethod(bridgeMethod)).isEqualTo(bridgedMethod);\r\n}",
    "tailType": "method_code"
  }
]