[
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLogTests#useSecondLogger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useSecondLogger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useNeitherLogger()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid useNeitherLogger() {\r\n    when(logger1.isInfoEnabled()).thenReturn(false);\r\n    when(logger2.isInfoEnabled()).thenReturn(false);\r\n    this.compositeLog.info(\"info message\");\r\n    verify(this.logger1).isInfoEnabled();\r\n    verify(this.logger2).isInfoEnabled();\r\n    verifyNoMoreInteractions(this.logger1);\r\n    verifyNoMoreInteractions(this.logger2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLogTests#useNeitherLogger()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLogTests#useNeitherLogger()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.LogSupportTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n * @since 5.2\n */\nclass LogSupportTests {\n\n\t@Test\n\tvoid logMessageWithSupplier() {\n\t\tLogMessage msg = LogMessage.of(() -> new StringBuilder(\"a\").append(\" b\"));\n\t\tassertThat(msg.toString()).isEqualTo(\"a b\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n\t@Test\n\tvoid logMessageWithFormat1() {\n\t\tLogMessage msg = LogMessage.format(\"a %s\", \"b\");\n\t\tassertThat(msg.toString()).isEqualTo(\"a b\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n\t@Test\n\tvoid logMessageWithFormat2() {\n\t\tLogMessage msg = LogMessage.format(\"a %s %s\", \"b\", \"c\");\n\t\tassertThat(msg.toString()).isEqualTo(\"a b c\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n\t@Test\n\tvoid logMessageWithFormat3() {\n\t\tLogMessage msg = LogMessage.format(\"a %s %s %s\", \"b\", \"c\", \"d\");\n\t\tassertThat(msg.toString()).isEqualTo(\"a b c d\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n\t@Test\n\tvoid logMessageWithFormat4() {\n\t\tLogMessage msg = LogMessage.format(\"a %s %s %s %s\", \"b\", \"c\", \"d\", \"e\");\n\t\tassertThat(msg.toString()).isEqualTo(\"a b c d e\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n\t@Test\n\tvoid logMessageWithFormatX() {\n\t\tLogMessage msg = LogMessage.format(\"a %s %s %s %s %s\", \"b\", \"c\", \"d\", \"e\", \"f\");\n\t\tassertThat(msg.toString()).isEqualTo(\"a b c d e f\");\n\t\tassertThat(msg.toString()).isSameAs(msg.toString());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid logMessageWithSupplier() {\r\n    LogMessage msg = LogMessage.of(() -> new StringBuilder(\"a\").append(\" b\"));\r\n    assertThat(msg.toString()).isEqualTo(\"a b\");\r\n    assertThat(msg.toString()).isSameAs(msg.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogSupportTests#logMessageWithSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid logMessageWithFormat1() {\r\n    LogMessage msg = LogMessage.format(\"a %s\", \"b\");\r\n    assertThat(msg.toString()).isEqualTo(\"a b\");\r\n    assertThat(msg.toString()).isSameAs(msg.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogSupportTests#logMessageWithFormat1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid logMessageWithFormat2() {\r\n    LogMessage msg = LogMessage.format(\"a %s %s\", \"b\", \"c\");\r\n    assertThat(msg.toString()).isEqualTo(\"a b c\");\r\n    assertThat(msg.toString()).isSameAs(msg.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogSupportTests#logMessageWithFormat2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat3()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid logMessageWithFormat3() {\r\n    LogMessage msg = LogMessage.format(\"a %s %s %s\", \"b\", \"c\", \"d\");\r\n    assertThat(msg.toString()).isEqualTo(\"a b c d\");\r\n    assertThat(msg.toString()).isSameAs(msg.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogSupportTests#logMessageWithFormat3()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogSupportTests#logMessageWithFormat3()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]