[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromAnnotationClassWithMetaDepth2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth0()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromClassWithMetaDepth0() {\r\n    assertThat(MergedAnnotations.from(TransactionalComponentClass.class).isPresent(TransactionalComponent.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth0()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth0()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromSubclassWithMetaDepth0()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromSubclassWithMetaDepth0() {\r\n    assertThat(MergedAnnotations.from(SubTransactionalComponentClass.class).isPresent(TransactionalComponent.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromSubclassWithMetaDepth0()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromSubclassWithMetaDepth0()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromClassWithMetaDepth1() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(TransactionalComponentClass.class);\r\n    assertThat(annotations.isPresent(Transactional.class)).isTrue();\r\n    assertThat(annotations.isPresent(Component.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isPresentWhenFromClassWithMetaDepth2() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponentClass.class);\r\n    assertThat(annotations.isPresent(Transactional.class)).isTrue();\r\n    assertThat(annotations.isPresent(Component.class)).isTrue();\r\n    assertThat(annotations.isPresent(ComposedTransactionalComponent.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#isPresentWhenFromClassWithMetaDepth2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getParent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getParent() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponentClass.class);\r\n    assertThat(annotations.get(TransactionalComponent.class).getMetaSource().getType()).isEqualTo(ComposedTransactionalComponent.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getParent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getParent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenNotDirect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRootWhenNotDirect() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponentClass.class);\r\n    MergedAnnotation<?> annotation = annotations.get(TransactionalComponent.class);\r\n    assertThat(annotation.getDistance()).isGreaterThan(0);\r\n    assertThat(annotation.getRoot().getType()).isEqualTo(ComposedTransactionalComponent.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenNotDirect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenNotDirect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]