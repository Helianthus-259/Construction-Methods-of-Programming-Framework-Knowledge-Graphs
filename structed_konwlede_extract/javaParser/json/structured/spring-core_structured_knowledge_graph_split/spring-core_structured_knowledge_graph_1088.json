[
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.CompositeLog",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.impl.NoOpLog;\n\n\n/**\n * Implementation of {@link Log} that wraps a list of loggers and delegates\n * to the first one for which logging is enabled at the given level.\n *\n * @author Rossen Stoyanchev\n * @since 5.1\n * @see LogDelegateFactory#getCompositeLog\n */\nfinal class CompositeLog implements Log {\n\n\tprivate static final Log NO_OP_LOG = new NoOpLog();\n\n\n\tprivate final List<Log> loggers;\n\n\n\t/**\n\t * Package-private constructor with list of loggers.\n\t * @param loggers the loggers to use\n\t */\n\tCompositeLog(List<Log> loggers) {\n\t\tthis.loggers = loggers;\n\t}\n\n\n\t@Override\n\tpublic boolean isFatalEnabled() {\n\t\treturn isEnabled(Log::isFatalEnabled);\n\t}\n\n\t@Override\n\tpublic boolean isErrorEnabled() {\n\t\treturn isEnabled(Log::isErrorEnabled);\n\t}\n\n\t@Override\n\tpublic boolean isWarnEnabled() {\n\t\treturn isEnabled(Log::isWarnEnabled);\n\t}\n\n\t@Override\n\tpublic boolean isInfoEnabled() {\n\t\treturn isEnabled(Log::isInfoEnabled);\n\t}\n\n\t@Override\n\tpublic boolean isDebugEnabled() {\n\t\treturn isEnabled(Log::isDebugEnabled);\n\t}\n\n\t@Override\n\tpublic boolean isTraceEnabled() {\n\t\treturn isEnabled(Log::isTraceEnabled);\n\t}\n\n\tprivate boolean isEnabled(Predicate<Log> predicate) {\n\t\treturn (getLogger(predicate) != NO_OP_LOG);\n\t}\n\n\t@Override\n\tpublic void fatal(Object message) {\n\t\tgetLogger(Log::isFatalEnabled).fatal(message);\n\t}\n\n\t@Override\n\tpublic void fatal(Object message, Throwable ex) {\n\t\tgetLogger(Log::isFatalEnabled).fatal(message, ex);\n\t}\n\n\t@Override\n\tpublic void error(Object message) {\n\t\tgetLogger(Log::isErrorEnabled).error(message);\n\t}\n\n\t@Override\n\tpublic void error(Object message, Throwable ex) {\n\t\tgetLogger(Log::isErrorEnabled).error(message, ex);\n\t}\n\n\t@Override\n\tpublic void warn(Object message) {\n\t\tgetLogger(Log::isWarnEnabled).warn(message);\n\t}\n\n\t@Override\n\tpublic void warn(Object message, Throwable ex) {\n\t\tgetLogger(Log::isWarnEnabled).warn(message, ex);\n\t}\n\n\t@Override\n\tpublic void info(Object message) {\n\t\tgetLogger(Log::isInfoEnabled).info(message);\n\t}\n\n\t@Override\n\tpublic void info(Object message, Throwable ex) {\n\t\tgetLogger(Log::isInfoEnabled).info(message, ex);\n\t}\n\n\t@Override\n\tpublic void debug(Object message) {\n\t\tgetLogger(Log::isDebugEnabled).debug(message);\n\t}\n\n\t@Override\n\tpublic void debug(Object message, Throwable ex) {\n\t\tgetLogger(Log::isDebugEnabled).debug(message, ex);\n\t}\n\n\t@Override\n\tpublic void trace(Object message) {\n\t\tgetLogger(Log::isTraceEnabled).trace(message);\n\t}\n\n\t@Override\n\tpublic void trace(Object message, Throwable ex) {\n\t\tgetLogger(Log::isTraceEnabled).trace(message, ex);\n\t}\n\n\tprivate Log getLogger(Predicate<Log> predicate) {\n\t\tfor (Log logger : this.loggers) {\n\t\t\tif (predicate.test(logger)) {\n\t\t\t\treturn logger;\n\t\t\t}\n\t\t}\n\t\treturn NO_OP_LOG;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.CompositeLog#NO_OP_LOG",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#NO_OP_LOG",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.log.CompositeLog#loggers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#loggers",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Log>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isFatalEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isFatalEnabled() {\r\n    return isEnabled(Log::isFatalEnabled);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#isFatalEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isFatalEnabled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isErrorEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isErrorEnabled() {\r\n    return isEnabled(Log::isErrorEnabled);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#isErrorEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isErrorEnabled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isWarnEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isWarnEnabled() {\r\n    return isEnabled(Log::isWarnEnabled);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#isWarnEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isWarnEnabled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isInfoEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isInfoEnabled() {\r\n    return isEnabled(Log::isInfoEnabled);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#isInfoEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isInfoEnabled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.log.CompositeLog#isDebugEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDebugEnabled() {\r\n    return isEnabled(Log::isDebugEnabled);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.CompositeLog",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.CompositeLog#isDebugEnabled()",
    "tailType": "method"
  }
]