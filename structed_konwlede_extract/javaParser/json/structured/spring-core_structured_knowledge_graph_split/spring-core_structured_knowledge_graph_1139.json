[
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#getComponentType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#asCollection()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convenience method to return this type as a resolvable {@link Collection} type.\r\n * <p>Returns {@link #NONE} if this type does not implement or extend\r\n * {@link Collection}.\r\n * @see #as(Class)\r\n * @see #asMap()\r\n */\r\npublic ResolvableType asCollection() {\r\n    return as(Collection.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#asCollection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#asMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convenience method to return this type as a resolvable {@link Map} type.\r\n * <p>Returns {@link #NONE} if this type does not implement or extend\r\n * {@link Map}.\r\n * @see #as(Class)\r\n * @see #asCollection()\r\n */\r\npublic ResolvableType asMap() {\r\n    return as(Map.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#asMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#as(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return this type as a {@code ResolvableType} of the specified class. Searches\r\n * {@link #getSuperType() supertype} and {@link #getInterfaces() interface}\r\n * hierarchies to find a match, returning {@link #NONE} if this type does not\r\n * implement or extend the specified class.\r\n * @param type the required type (typically narrowed)\r\n * @return a {@code ResolvableType} representing this object as the specified\r\n * type, or {@link #NONE} if not resolvable as that type\r\n * @see #asCollection()\r\n * @see #asMap()\r\n * @see #getSuperType()\r\n * @see #getInterfaces()\r\n */\r\npublic ResolvableType as(Class<?> type) {\r\n    if (this == NONE) {\r\n        return NONE;\r\n    }\r\n    Class<?> resolved = resolve();\r\n    if (resolved == null || resolved == type) {\r\n        return this;\r\n    }\r\n    for (ResolvableType interfaceType : getInterfaces()) {\r\n        ResolvableType interfaceAsType = interfaceType.as(type);\r\n        if (interfaceAsType != NONE) {\r\n            return interfaceAsType;\r\n        }\r\n    }\r\n    return getSuperType().as(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#as(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#getSuperType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} representing the direct supertype of this type.\r\n * <p>If no supertype is available this method returns {@link #NONE}.\r\n * <p>Note: The resulting {@code ResolvableType} instance may not be {@link Serializable}.\r\n * @see #getInterfaces()\r\n */\r\npublic ResolvableType getSuperType() {\r\n    Class<?> resolved = resolve();\r\n    if (resolved == null) {\r\n        return NONE;\r\n    }\r\n    try {\r\n        Type superclass = resolved.getGenericSuperclass();\r\n        if (superclass == null) {\r\n            return NONE;\r\n        }\r\n        ResolvableType superType = this.superType;\r\n        if (superType == null) {\r\n            superType = forType(superclass, this);\r\n            this.superType = superType;\r\n        }\r\n        return superType;\r\n    } catch (TypeNotPresentException ex) {\r\n        // Ignore non-present types in generic signature\r\n        return NONE;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#getSuperType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#getInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} array representing the direct interfaces\r\n * implemented by this type. If this type does not implement any interfaces an\r\n * empty array is returned.\r\n * <p>Note: The resulting {@code ResolvableType} instances may not be {@link Serializable}.\r\n * @see #getSuperType()\r\n */\r\npublic ResolvableType[] getInterfaces() {\r\n    Class<?> resolved = resolve();\r\n    if (resolved == null) {\r\n        return EMPTY_TYPES_ARRAY;\r\n    }\r\n    ResolvableType[] interfaces = this.interfaces;\r\n    if (interfaces == null) {\r\n        Type[] genericIfcs = resolved.getGenericInterfaces();\r\n        if (genericIfcs.length > 0) {\r\n            interfaces = new ResolvableType[genericIfcs.length];\r\n            for (int i = 0; i < genericIfcs.length; i++) {\r\n                interfaces[i] = forType(genericIfcs[i], this);\r\n            }\r\n        } else {\r\n            interfaces = EMPTY_TYPES_ARRAY;\r\n        }\r\n        this.interfaces = interfaces;\r\n    }\r\n    return interfaces;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#getInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hasGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if this type contains generic parameters.\r\n * @see #getGeneric(int...)\r\n * @see #getGenerics()\r\n */\r\npublic boolean hasGenerics() {\r\n    return (getGenerics().length > 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#hasGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hasResolvableGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if this type contains at least a generic type\r\n * that is resolved. In other words, this returns {@code false} if\r\n * the type contains unresolvable generics only, that is, no substitute\r\n * for any of its declared type variables.\r\n * @since 6.2\r\n */\r\npublic boolean hasResolvableGenerics() {\r\n    if (this == NONE) {\r\n        return false;\r\n    }\r\n    ResolvableType[] generics = getGenerics();\r\n    for (ResolvableType generic : generics) {\r\n        if (!generic.isUnresolvableTypeVariable() && !generic.isWildcardWithoutBounds()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#hasResolvableGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hasUnresolvableGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the underlying type has any unresolvable generics:\r\n * either through an unresolvable type variable on the type itself\r\n * or through implementing a generic interface in a raw fashion,\r\n * i.e. without substituting that interface's type variables.\r\n * The result will be {@code true} only in those two scenarios.\r\n */\r\npublic boolean hasUnresolvableGenerics() {\r\n    if (this == NONE) {\r\n        return false;\r\n    }\r\n    return hasUnresolvableGenerics(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#hasUnresolvableGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hasUnresolvableGenerics(Set<Type>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean hasUnresolvableGenerics(@Nullable Set<Type> alreadySeen) {\r\n    Boolean unresolvableGenerics = this.unresolvableGenerics;\r\n    if (unresolvableGenerics == null) {\r\n        unresolvableGenerics = determineUnresolvableGenerics(alreadySeen);\r\n        this.unresolvableGenerics = unresolvableGenerics;\r\n    }\r\n    return unresolvableGenerics;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#hasUnresolvableGenerics(Set<Type>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#determineUnresolvableGenerics(Set<Type>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean determineUnresolvableGenerics(@Nullable Set<Type> alreadySeen) {\r\n    if (alreadySeen != null && alreadySeen.contains(this.type)) {\r\n        // Self-referencing generic -> not unresolvable\r\n        return false;\r\n    }\r\n    ResolvableType[] generics = getGenerics();\r\n    for (ResolvableType generic : generics) {\r\n        if (generic.isUnresolvableTypeVariable() || generic.isWildcardWithoutBounds() || generic.hasUnresolvableGenerics(currentTypeSeen(alreadySeen))) {\r\n            return true;\r\n        }\r\n    }\r\n    Class<?> resolved = resolve();\r\n    if (resolved != null) {\r\n        try {\r\n            for (Type genericInterface : resolved.getGenericInterfaces()) {\r\n                if (genericInterface instanceof Class<?> clazz) {\r\n                    if (clazz.getTypeParameters().length > 0) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        } catch (TypeNotPresentException ex) {\r\n            // Ignore non-present types in generic signature\r\n        }\r\n        Class<?> superclass = resolved.getSuperclass();\r\n        if (superclass != null && superclass != Object.class) {\r\n            return getSuperType().hasUnresolvableGenerics(currentTypeSeen(alreadySeen));\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  }
]