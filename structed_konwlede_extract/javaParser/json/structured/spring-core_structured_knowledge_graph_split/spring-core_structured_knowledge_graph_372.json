[
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#numberOfNestMemberClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#numberOfNestMemberClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#nestMemberClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#nestMemberClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteVector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#numberOfPermittedSubclasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#numberOfPermittedSubclasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#permittedSubclasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#permittedSubclasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteVector",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#firstRecordComponent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#firstRecordComponent",
    "headType": "field",
    "relation": "haveType",
    "tail": "RecordComponentWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#lastRecordComponent",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#lastRecordComponent",
    "headType": "field",
    "relation": "haveType",
    "tail": "RecordComponentWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#firstAttribute",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#firstAttribute",
    "headType": "field",
    "relation": "haveType",
    "tail": "Attribute",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassWriter#compute",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassWriter#compute",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassWriter#hasFlags(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Accessors\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns true if all the given flags were passed to the constructor.\r\n *\r\n * @param flags some option flags. Must be zero or more of {@link #COMPUTE_MAXS} and {@link\r\n *     #COMPUTE_FRAMES}.\r\n * @return true if all the given flags, or more, were passed to the constructor.\r\n */\r\npublic boolean hasFlags(final int flags) {\r\n    return (this.flags & flags) == flags;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#hasFlags(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Implementation of the ClassVisitor abstract class\r\n// -----------------------------------------------------------------------------------------------\r\n@Override\r\npublic final void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) {\r\n    this.version = version;\r\n    this.accessFlags = access;\r\n    this.thisClass = symbolTable.setMajorVersionAndClassName(version & 0xFFFF, name);\r\n    if (signature != null) {\r\n        this.signatureIndex = symbolTable.addConstantUtf8(signature);\r\n    }\r\n    this.superClass = superName == null ? 0 : symbolTable.addConstantClass(superName).index;\r\n    if (interfaces != null && interfaces.length > 0) {\r\n        interfaceCount = interfaces.length;\r\n        this.interfaces = new int[interfaceCount];\r\n        for (int i = 0; i < interfaceCount; ++i) {\r\n            this.interfaces[i] = symbolTable.addConstantClass(interfaces[i]).index;\r\n        }\r\n    }\r\n    if (compute == MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL && (version & 0xFFFF) >= Opcodes.V1_7) {\r\n        compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL_FROM_FRAMES;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassWriter#visit(int,int,String,String,String,String[])",
    "tailType": "method"
  }
]