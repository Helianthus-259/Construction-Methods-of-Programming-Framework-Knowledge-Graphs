[
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.NoOpGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.MethodInfo;\nimport org.springframework.cglib.core.TypeUtils;\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nclass NoOpGenerator\nimplements CallbackGenerator\n{\n    public static final NoOpGenerator INSTANCE = new NoOpGenerator();\n\n    @Override\n\tpublic void generate(ClassEmitter ce, Context context, List methods) {\n        for (Iterator it = methods.iterator(); it.hasNext();) {\n            MethodInfo method = (MethodInfo)it.next();\n            if (TypeUtils.isBridge(method.getModifiers()) || (\n                    TypeUtils.isProtected(context.getOriginalModifiers(method)) &&\n                    TypeUtils.isPublic(method.getModifiers()))) {\n                CodeEmitter e = EmitUtils.begin_method(ce, method);\n                e.load_this();\n                context.emitLoadArgsAndInvoke(e, method);\n                e.return_value();\n                e.end_method();\n            }\n        }\n    }\n\n    @Override\n\tpublic void generateStatic(CodeEmitter e, Context context, List methods) { }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.NoOpGenerator#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "NoOpGenerator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generate(ClassEmitter ce, Context context, List methods) {\r\n    for (Iterator it = methods.iterator(); it.hasNext(); ) {\r\n        MethodInfo method = (MethodInfo) it.next();\r\n        if (TypeUtils.isBridge(method.getModifiers()) || (TypeUtils.isProtected(context.getOriginalModifiers(method)) && TypeUtils.isPublic(method.getModifiers()))) {\r\n            CodeEmitter e = EmitUtils.begin_method(ce, method);\r\n            e.load_this();\r\n            context.emitLoadArgsAndInvoke(e, method);\r\n            e.return_value();\r\n            e.end_method();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator#generate(ClassEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateStatic(CodeEmitter e, Context context, List methods) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.NoOpGenerator#generateStatic(CodeEmitter,Context,List)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.NoOpGenerator#generateStatic(CodeEmitter,Context,List)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.Proxy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.proxy;\n\nimport java.io.Serializable;\n\nimport org.springframework.cglib.core.CodeGenerationException;\n\n/**\n * This class is meant to be used as replacement for\n * <code>java.lang.reflect.Proxy</code> under JDK 1.2. There are some known\n * subtle differences:\n * <ul>\n * <li>The exceptions returned by invoking <code>getExceptionTypes</code>\n * on the <code>Method</code> passed to the <code>invoke</code> method\n * <b>are</b> the exact set that can be thrown without resulting in an\n * <code>UndeclaredThrowableException</code> being thrown.\n * <li>{@link UndeclaredThrowableException} is used instead\n * of <code>java.lang.reflect.UndeclaredThrowableException</code>.\n * </ul>\n * <p>\n * @version $Id: Proxy.java,v 1.6 2004/06/24 21:15:19 herbyderby Exp $\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\", \"serial\"})\npublic class Proxy implements Serializable {\n    protected InvocationHandler h;\n\n    private static final CallbackFilter BAD_OBJECT_METHOD_FILTER = method -> {\n\t    if (method.getDeclaringClass().getName().equals(\"java.lang.Object\")) {\n\t        String name = method.getName();\n\t        if (!(name.equals(\"hashCode\") ||\n\t              name.equals(\"equals\") ||\n\t              name.equals(\"toString\"))) {\n\t            return 1;\n\t        }\n\t    }\n\t    return 0;\n\t};\n\n    protected Proxy(InvocationHandler h) {\n        Enhancer.registerCallbacks(getClass(), new Callback[]{ h, null });\n        this.h = h;\n    }\n\n    // private for security of isProxyClass\n    private static class ProxyImpl extends Proxy {\n        protected ProxyImpl(InvocationHandler h) {\n            super(h);\n        }\n    }\n\n    public static InvocationHandler getInvocationHandler(Object proxy) {\n        if (!(proxy instanceof ProxyImpl)) {\n            throw new IllegalArgumentException(\"Object is not a proxy\");\n        }\n        return ((Proxy)proxy).h;\n    }\n\n    public static Class getProxyClass(ClassLoader loader, Class[] interfaces) {\n        Enhancer e = new Enhancer();\n        e.setSuperclass(ProxyImpl.class);\n        e.setInterfaces(interfaces);\n        e.setCallbackTypes(new Class[]{\n            InvocationHandler.class,\n            NoOp.class,\n        });\n        e.setCallbackFilter(BAD_OBJECT_METHOD_FILTER);\n        e.setUseFactory(false);\n        return e.createClass();\n    }\n\n    public static boolean isProxyClass(Class cl) {\n        return cl.getSuperclass().equals(ProxyImpl.class);\n    }\n\n    public static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) {\n        try {\n            Class clazz = getProxyClass(loader, interfaces);\n            return clazz.getConstructor(new Class[]{ InvocationHandler.class }).newInstance(new Object[]{ h });\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new CodeGenerationException(e);\n        }\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.Proxy#h",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy#h",
    "headType": "field",
    "relation": "haveType",
    "tail": "InvocationHandler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.proxy.Proxy#BAD_OBJECT_METHOD_FILTER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.proxy.Proxy#BAD_OBJECT_METHOD_FILTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "CallbackFilter",
    "tailType": "type"
  }
]