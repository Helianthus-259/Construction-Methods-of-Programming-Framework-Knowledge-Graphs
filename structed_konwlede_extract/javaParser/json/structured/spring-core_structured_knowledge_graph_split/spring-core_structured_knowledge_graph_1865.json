[
  {
    "head": "org.springframework.core.TestBean#handleToFlux()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Flux<TestObject> handleToFlux() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TestBean",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TestBean#handleToFlux()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TestBean#handleToSingle()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Single<TestObject> handleToSingle() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TestBean",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TestBean#handleToSingle()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TestBean#handleToObservable()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Observable<TestObject> handleToObservable() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TestBean",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TestBean#handleToObservable()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.converter",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConverterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link Converter}\n *\n * @author Josh Cummings\n * @author Sam Brannen\n * @since 5.3\n */\nclass ConverterTests {\n\n\tprivate final Converter<Integer, Integer> moduloTwo = number -> number % 2;\n\tprivate final Converter<Integer, Integer> addOne = number -> number + 1;\n\n\n\t@Test\n\tvoid andThenWhenGivenANullConverterThenThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.moduloTwo.andThen(null));\n\t}\n\n\t@Test\n\tvoid andThenWhenGivenConverterThenComposesInOrder() {\n\t\tassertThat(this.moduloTwo.andThen(this.addOne).convert(13)).isEqualTo(2);\n\t\tassertThat(this.addOne.andThen(this.moduloTwo).convert(13)).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid andThenCanConvertfromDifferentSourceType() {\n\t\tConverter<String, Integer> length = String::length;\n\t\tassertThat(length.andThen(this.moduloTwo).convert(\"example\")).isEqualTo(1);\n\t\tassertThat(length.andThen(this.addOne).convert(\"example\")).isEqualTo(8);\n\t}\n\n\t@Test\n\tvoid andThenCanConvertToDifferentTargetType() {\n\t\tConverter<String, Integer> length = String::length;\n\t\tConverter<Integer, String> toString = Object::toString;\n\t\tassertThat(length.andThen(toString).convert(\"example\")).isEqualTo(\"7\");\n\t\tassertThat(toString.andThen(length).convert(1_000)).isEqualTo(4);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConverterTests#moduloTwo",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#moduloTwo",
    "headType": "field",
    "relation": "haveType",
    "tail": "Converter<Integer, Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConverterTests#addOne",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#addOne",
    "headType": "field",
    "relation": "haveType",
    "tail": "Converter<Integer, Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenANullConverterThenThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andThenWhenGivenANullConverterThenThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.moduloTwo.andThen(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenANullConverterThenThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenANullConverterThenThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenConverterThenComposesInOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andThenWhenGivenConverterThenComposesInOrder() {\r\n    assertThat(this.moduloTwo.andThen(this.addOne).convert(13)).isEqualTo(2);\r\n    assertThat(this.addOne.andThen(this.moduloTwo).convert(13)).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenConverterThenComposesInOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#andThenWhenGivenConverterThenComposesInOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.ConverterTests#andThenCanConvertfromDifferentSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andThenCanConvertfromDifferentSourceType() {\r\n    Converter<String, Integer> length = String::length;\r\n    assertThat(length.andThen(this.moduloTwo).convert(\"example\")).isEqualTo(1);\r\n    assertThat(length.andThen(this.addOne).convert(\"example\")).isEqualTo(8);\r\n}",
    "tailType": "method_code"
  }
]