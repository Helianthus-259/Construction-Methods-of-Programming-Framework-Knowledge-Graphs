[
  {
    "head": "org.springframework.asm.ClassReader#MAX_BUFFER_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#INPUT_STREAM_DATA_CHUNK_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#INPUT_STREAM_DATA_CHUNK_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#b",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#b",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#header",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#header",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#classFileBuffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#classFileBuffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#cpInfoOffsets",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#cpInfoOffsets",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#constantUtf8Values",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#constantUtf8Values",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#constantDynamicValues",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#constantDynamicValues",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConstantDynamic",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#bootstrapMethodOffsets",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#bootstrapMethodOffsets",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassReader#maxStringLength",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassReader#maxStringLength",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassReader#readStream(InputStream,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads the given input stream and returns its content as a byte array.\r\n *\r\n * @param inputStream an input stream.\r\n * @param close true to close the input stream after reading.\r\n * @return the content of the given input stream.\r\n * @throws IOException if a problem occurs during reading.\r\n */\r\n@SuppressWarnings(\"PMD.UseTryWithResources\")\r\nprivate static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException {\r\n    if (inputStream == null) {\r\n        throw new IOException(\"Class not found\");\r\n    }\r\n    int bufferSize = computeBufferSize(inputStream);\r\n    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\r\n        byte[] data = new byte[bufferSize];\r\n        int bytesRead;\r\n        int readCount = 0;\r\n        while ((bytesRead = inputStream.read(data, 0, bufferSize)) != -1) {\r\n            outputStream.write(data, 0, bytesRead);\r\n            readCount++;\r\n        }\r\n        outputStream.flush();\r\n        if (readCount == 1) {\r\n            // SPRING PATCH: some misbehaving InputStreams return -1 but still write to buffer (gh-27429)\r\n            // return data;\r\n            // END OF PATCH\r\n        }\r\n        return outputStream.toByteArray();\r\n    } finally {\r\n        if (close) {\r\n            inputStream.close();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  }
]