[
  {
    "head": "org.springframework.cglib.core.CodeEmitter#push(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void push(String value) {\r\n    mv.visitLdcInsn(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#push(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#newarray()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void newarray() {\r\n    newarray(Constants.TYPE_OBJECT);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#newarray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void newarray(Type type) {\r\n    if (TypeUtils.isPrimitive(type)) {\r\n        mv.visitIntInsn(Constants.NEWARRAY, TypeUtils.NEWARRAY(type));\r\n    } else {\r\n        emit_type(Constants.ANEWARRAY, type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#newarray(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#arraylength()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void arraylength() {\r\n    mv.visitInsn(Constants.ARRAYLENGTH);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#arraylength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#load_this()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void load_this() {\r\n    if (TypeUtils.isStatic(state.access)) {\r\n        throw new IllegalStateException(\"no 'this' pointer within static method\");\r\n    }\r\n    mv.visitVarInsn(Constants.ALOAD, 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#load_this()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#load_args()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Pushes all of the arguments of the current method onto the stack.\r\n */\r\npublic void load_args() {\r\n    load_args(0, state.argumentTypes.length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#load_args()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Pushes the specified argument of the current method onto the stack.\r\n * @param index the zero-based index into the argument list\r\n */\r\npublic void load_arg(int index) {\r\n    load_local(state.argumentTypes[index], state.localOffset + skipArgs(index));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#load_arg(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// zero-based (see load_this)\r\npublic void load_args(int fromArg, int count) {\r\n    int pos = state.localOffset + skipArgs(fromArg);\r\n    for (int i = 0; i < count; i++) {\r\n        Type t = state.argumentTypes[fromArg + i];\r\n        load_local(t, pos);\r\n        pos += t.getSize();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#load_args(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int skipArgs(int numArgs) {\r\n    int amount = 0;\r\n    for (int i = 0; i < numArgs; i++) {\r\n        amount += state.argumentTypes[i].getSize();\r\n    }\r\n    return amount;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#skipArgs(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#load_local(Type,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void load_local(Type t, int pos) {\r\n    // TODO: make t == null ok?\r\n    mv.visitVarInsn(t.getOpcode(Constants.ILOAD), pos);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#load_local(Type,int)",
    "tailType": "method"
  }
]