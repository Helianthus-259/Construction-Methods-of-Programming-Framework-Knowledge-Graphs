[
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigest()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigest()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigestManyBuffers()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid updateMessageDigestManyBuffers() throws Exception {\r\n    StringBuilder builder = new StringBuilder(\"\\\"0\");\r\n    // filling at least one 256 buffer\r\n    for (int i = 0; i < 30; i++) {\r\n        this.os.write(this.helloBytes);\r\n    }\r\n    InputStream inputStream = this.os.getInputStream();\r\n    DigestUtils.appendMd5DigestAsHex(inputStream, builder);\r\n    builder.append('\"');\r\n    String actual = builder.toString();\r\n    assertThat(actual).isEqualTo(\"\\\"06225ca1e4533354c516e74512065331d\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigestManyBuffers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#updateMessageDigestManyBuffers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests#assertByteArrayEqualsString(FastByteArrayOutputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertByteArrayEqualsString(FastByteArrayOutputStream actual) {\r\n    assertThat(actual.toByteArray()).isEqualTo(this.helloBytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayOutputStreamTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayOutputStreamTests#assertByteArrayEqualsString(FastByteArrayOutputStream)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.TypeReference;\n\n/**\n * {@link RuntimeHintsRegistrar} to register hints for {@link org.springframework.core.KotlinDetector}.\n *\n * @author Brian Clozel\n * @since 6.1\n */\nclass KotlinDetectorRuntimeHints implements RuntimeHintsRegistrar {\n\n\t@Override\n\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\thints.reflection().registerType(TypeReference.of(\"kotlin.Metadata\"))\n\t\t\t\t.registerType(TypeReference.of(\"kotlin.reflect.full.KClasses\"));\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\r\n    hints.reflection().registerType(TypeReference.of(\"kotlin.Metadata\")).registerType(TypeReference.of(\"kotlin.reflect.full.KClasses\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.KotlinDetectorRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FileCopyUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link FileCopyUtils}.\n *\n * @author Juergen Hoeller\n * @since 12.03.2005\n */\nclass FileCopyUtilsTests {\n\n\t@Test\n\tvoid copyFromInputStream() throws IOException {\n\t\tbyte[] content = \"content\".getBytes();\n\t\tByteArrayInputStream in = new ByteArrayInputStream(content);\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream(content.length);\n\t\tint count = FileCopyUtils.copy(in, out);\n\t\tassertThat(count).isEqualTo(content.length);\n\t\tassertThat(Arrays.equals(content, out.toByteArray())).isTrue();\n\t}\n\n\t@Test\n\tvoid copyFromByteArray() throws IOException {\n\t\tbyte[] content = \"content\".getBytes();\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream(content.length);\n\t\tFileCopyUtils.copy(content, out);\n\t\tassertThat(Arrays.equals(content, out.toByteArray())).isTrue();\n\t}\n\n\t@Test\n\tvoid copyToByteArray() throws IOException {\n\t\tbyte[] content = \"content\".getBytes();\n\t\tByteArrayInputStream in = new ByteArrayInputStream(content);\n\t\tbyte[] result = FileCopyUtils.copyToByteArray(in);\n\t\tassertThat(Arrays.equals(content, result)).isTrue();\n\t}\n\n\t@Test\n\tvoid copyFromReader() throws IOException {\n\t\tString content = \"content\";\n\t\tStringReader in = new StringReader(content);\n\t\tStringWriter out = new StringWriter();\n\t\tint count = FileCopyUtils.copy(in, out);\n\t\tassertThat(count).isEqualTo(content.length());\n\t\tassertThat(out.toString()).isEqualTo(content);\n\t}\n\n\t@Test\n\tvoid copyFromString() throws IOException {\n\t\tString content = \"content\";\n\t\tStringWriter out = new StringWriter();\n\t\tFileCopyUtils.copy(content, out);\n\t\tassertThat(out.toString()).isEqualTo(content);\n\t}\n\n\t@Test\n\tvoid copyToString() throws IOException {\n\t\tString content = \"content\";\n\t\tStringReader in = new StringReader(content);\n\t\tString result = FileCopyUtils.copyToString(in);\n\t\tassertThat(result).isEqualTo(content);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyFromInputStream() throws IOException {\r\n    byte[] content = \"content\".getBytes();\r\n    ByteArrayInputStream in = new ByteArrayInputStream(content);\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream(content.length);\r\n    int count = FileCopyUtils.copy(in, out);\r\n    assertThat(count).isEqualTo(content.length);\r\n    assertThat(Arrays.equals(content, out.toByteArray())).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyFromInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyFromByteArray() throws IOException {\r\n    byte[] content = \"content\".getBytes();\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream(content.length);\r\n    FileCopyUtils.copy(content, out);\r\n    assertThat(Arrays.equals(content, out.toByteArray())).isTrue();\r\n}",
    "tailType": "method_code"
  }
]