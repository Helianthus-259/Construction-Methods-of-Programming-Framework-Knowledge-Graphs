[
  {
    "head": "org.springframework.asm.RecordComponentWriter#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#computeRecordComponentInfoSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Utility methods\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the size of the record component JVMS structure generated by this\r\n * RecordComponentWriter. Also adds the names of the attributes of this record component in the\r\n * constant pool.\r\n *\r\n * @return the size in bytes of the record_component_info of the Record attribute.\r\n */\r\nint computeRecordComponentInfoSize() {\r\n    // name_index, descriptor_index and attributes_count fields use 6 bytes.\r\n    int size = 6;\r\n    size += Attribute.computeAttributesSize(symbolTable, 0, signatureIndex);\r\n    size += AnnotationWriter.computeAnnotationsSize(lastRuntimeVisibleAnnotation, lastRuntimeInvisibleAnnotation, lastRuntimeVisibleTypeAnnotation, lastRuntimeInvisibleTypeAnnotation);\r\n    if (firstAttribute != null) {\r\n        size += firstAttribute.computeAttributesSize(symbolTable);\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentWriter#computeRecordComponentInfoSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#putRecordComponentInfo(ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the content of the record component generated by this RecordComponentWriter into the given\r\n * ByteVector.\r\n *\r\n * @param output where the record_component_info structure must be put.\r\n */\r\nvoid putRecordComponentInfo(final ByteVector output) {\r\n    output.putShort(nameIndex).putShort(descriptorIndex);\r\n    // Compute and put the attributes_count field.\r\n    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.\r\n    int attributesCount = 0;\r\n    if (signatureIndex != 0) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        ++attributesCount;\r\n    }\r\n    if (firstAttribute != null) {\r\n        attributesCount += firstAttribute.getAttributeCount();\r\n    }\r\n    output.putShort(attributesCount);\r\n    Attribute.putAttributes(symbolTable, 0, signatureIndex, output);\r\n    AnnotationWriter.putAnnotations(symbolTable, lastRuntimeVisibleAnnotation, lastRuntimeInvisibleAnnotation, lastRuntimeVisibleTypeAnnotation, lastRuntimeInvisibleTypeAnnotation, output);\r\n    if (firstAttribute != null) {\r\n        firstAttribute.putAttributes(symbolTable, output);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentWriter#putRecordComponentInfo(ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter#collectAttributePrototypes(Attribute.Set)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Collects the attributes of this record component into the given set of attribute prototypes.\r\n *\r\n * @param attributePrototypes a set of attribute prototypes.\r\n */\r\nfinal void collectAttributePrototypes(final Attribute.Set attributePrototypes) {\r\n    attributePrototypes.addAttributes(firstAttribute);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.RecordComponentWriter#collectAttributePrototypes(Attribute.Set)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.RecordComponentWriter",
    "headType": "class",
    "relation": "extend",
    "tail": "RecordComponentVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.buffer.DataBufferTestUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.DataBufferTestUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io.buffer;\n\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.Assert;\n\n/**\n * Utility class for working with {@link DataBuffer}s in tests.\n *\n * <p>Note that this class is in the {@code test} tree of the project:\n * the methods contained herein are not suitable for production code bases.\n *\n * @author Arjen Poutsma\n */\npublic abstract class DataBufferTestUtils {\n\n\t/**\n\t * Dump all the bytes in the given data buffer, and returns them as a byte array.\n\t * <p>Note that this method reads the entire buffer into the heap,  which might\n\t * consume a lot of memory.\n\t * @param buffer the data buffer to dump the bytes of\n\t * @return the bytes in the given data buffer\n\t */\n\tpublic static byte[] dumpBytes(DataBuffer buffer) {\n\t\tAssert.notNull(buffer, \"'buffer' must not be null\");\n\t\tbyte[] bytes = new byte[buffer.readableByteCount()];\n\t\tbuffer.read(bytes);\n\t\treturn bytes;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.DataBufferTestUtils#dumpBytes(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Dump all the bytes in the given data buffer, and returns them as a byte array.\r\n * <p>Note that this method reads the entire buffer into the heap,  which might\r\n * consume a lot of memory.\r\n * @param buffer the data buffer to dump the bytes of\r\n * @return the bytes in the given data buffer\r\n */\r\npublic static byte[] dumpBytes(DataBuffer buffer) {\r\n    Assert.notNull(buffer, \"'buffer' must not be null\");\r\n    byte[] bytes = new byte[buffer.readableByteCount()];\r\n    buffer.read(bytes);\r\n    return bytes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.DataBufferTestUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.DataBufferTestUtils#dumpBytes(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.asm",
    "tailType": "package"
  },
  {
    "head": "org.springframework.asm",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.asm.SpringAsmInfo",
    "tailType": "class"
  },
  {
    "head": "org.springframework.asm.SpringAsmInfo",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.asm;\n\n/**\n * Utility class exposing constants related to Spring's internal repackaging\n * of the ASM bytecode library: currently based on ASM 9.x plus minor patches.\n *\n * <p>See <a href=\"package-summary.html\">package-level javadocs</a> for more\n * information on {@code org.springframework.asm}.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.2\n */\npublic final class SpringAsmInfo {\n\n\t/**\n\t * The ASM compatibility version for Spring's ASM visitor implementations:\n\t * currently {@link Opcodes#ASM10_EXPERIMENTAL}, as of Spring Framework 5.3.\n\t */\n\tpublic static final int ASM_VERSION = Opcodes.ASM10_EXPERIMENTAL;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.SpringAsmInfo",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.SpringAsmInfo#ASM_VERSION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.SpringAsmInfo#ASM_VERSION",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "tailType": "class"
  }
]