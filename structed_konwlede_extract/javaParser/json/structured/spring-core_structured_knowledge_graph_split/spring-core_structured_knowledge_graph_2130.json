[
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SerializableTypeWrapperTests#typeVariableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests#typeVariableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests#wildcardType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid wildcardType() throws Exception {\r\n    ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"wildcardType\"));\r\n    WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0];\r\n    assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");\r\n    assertSerializable(type);\r\n    assertSerializable(type.getLowerBounds());\r\n    assertSerializable(type.getUpperBounds());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SerializableTypeWrapperTests#wildcardType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests#wildcardType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests#assertSerializable(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertSerializable(Object source) throws Exception {\r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n    ObjectOutputStream oos = new ObjectOutputStream(bos);\r\n    oos.writeObject(source);\r\n    oos.close();\r\n    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\r\n    assertThat(ois.readObject()).isEqualTo(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SerializableTypeWrapperTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SerializableTypeWrapperTests#assertSerializable(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.Fields",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SerializableTypeWrapper}.\n *\n * @author Phillip Webb\n */\nclass SerializableTypeWrapperTests {\n\n\t@Test\n\tvoid forField() throws Exception {\n\t\tType type = SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\n\t\tassertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\n\t\tassertSerializable(type);\n\t}\n\n\t@Test\n\tvoid forMethodParameter() throws Exception {\n\t\tMethod method = Methods.class.getDeclaredMethod(\"method\", Class.class, Object.class);\n\t\tType type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(method, 0));\n\t\tassertThat(type.toString()).isEqualTo(\"java.lang.Class<T>\");\n\t\tassertSerializable(type);\n\t}\n\n\t@Test\n\tvoid forConstructor() throws Exception {\n\t\tConstructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class);\n\t\tType type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forExecutable(constructor, 0));\n\t\tassertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\n\t\tassertSerializable(type);\n\t}\n\n\t@Test\n\tvoid classType() throws Exception {\n\t\tType type = SerializableTypeWrapper.forField(Fields.class.getField(\"classType\"));\n\t\tassertThat(type.toString()).isEqualTo(\"class java.lang.String\");\n\t\tassertSerializable(type);\n\t}\n\n\t@Test\n\tvoid genericArrayType() throws Exception {\n\t\tGenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField(\"genericArrayType\"));\n\t\tassertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>[]\");\n\t\tassertSerializable(type);\n\t\tassertSerializable(type.getGenericComponentType());\n\t}\n\n\t@Test\n\tvoid parameterizedType() throws Exception {\n\t\tParameterizedType type = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"parameterizedType\"));\n\t\tassertThat(type.toString()).isEqualTo(\"java.util.List<java.lang.String>\");\n\t\tassertSerializable(type);\n\t\tassertSerializable(type.getOwnerType());\n\t\tassertSerializable(type.getRawType());\n\t\tassertSerializable(type.getActualTypeArguments());\n\t\tassertSerializable(type.getActualTypeArguments()[0]);\n\t}\n\n\t@Test\n\tvoid typeVariableType() throws Exception {\n\t\tTypeVariable<?> type = (TypeVariable<?>) SerializableTypeWrapper.forField(Fields.class.getField(\"typeVariableType\"));\n\t\tassertThat(type.toString()).isEqualTo(\"T\");\n\t\tassertSerializable(type);\n\t\tassertSerializable(type.getBounds());\n\t}\n\n\t@Test\n\tvoid wildcardType() throws Exception {\n\t\tParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField(\"wildcardType\"));\n\t\tWildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0];\n\t\tassertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");\n\t\tassertSerializable(type);\n\t\tassertSerializable(type.getLowerBounds());\n\t\tassertSerializable(type.getUpperBounds());\n\t}\n\n\n\tprivate void assertSerializable(Object source) throws Exception {\n\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n\t\tObjectOutputStream oos = new ObjectOutputStream(bos);\n\t\toos.writeObject(source);\n\t\toos.close();\n\t\tObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n\t\tassertThat(ois.readObject()).isEqualTo(source);\n\t}\n\n\n\tstatic class Fields<T> {\n\n\t\tpublic String classType;\n\n\t\tpublic List<String>[] genericArrayType;\n\n\t\tpublic List<String> parameterizedType;\n\n\t\tpublic T typeVariableType;\n\n\t\tpublic List<? extends CharSequence> wildcardType;\n\t}\n\n\n\tinterface Methods {\n\n\t\t<T> List<T> method(Class<T> p1, T p2);\n\t}\n\n\n\tstatic class Constructors {\n\n\t\tpublic Constructors(List<String> p) {\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Fields#classType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Fields#classType",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Fields#genericArrayType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Fields#genericArrayType",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Fields#parameterizedType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Fields#parameterizedType",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Fields#typeVariableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Fields#typeVariableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "T",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.Fields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.Fields#wildcardType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.Fields#wildcardType",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<? extends CharSequence>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.Methods",
    "tailType": "class"
  }
]