[
  {
    "head": "org.springframework.core.MyTypeWithMethods#createProxy(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Simulates a factory method that wraps the supplied object in a proxy of the\r\n * same type.\r\n */\r\npublic static <T> T createProxy(T object) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#createProxy(T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#createNamedProxy(String,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Similar to {@link #createProxy(Object)} but adds an additional argument before\r\n * the argument of type {@code T}. Note that they may potentially be of the same\r\n * time when invoked!\r\n */\r\npublic static <T> T createNamedProxy(String name, T object) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#createNamedProxy(String,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#createMock(Class<MOCK>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Simulates factory methods found in libraries such as Mockito and EasyMock.\r\n */\r\npublic static <MOCK> MOCK createMock(Class<MOCK> toMock) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#createMock(Class<MOCK>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#createNamedMock(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Similar to {@link #createMock(Class)} but adds an additional method argument\r\n * before the parameterized argument.\r\n */\r\npublic static <T> T createNamedMock(String name, Class<T> toMock) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#createNamedMock(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#createVMock(V,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Similar to {@link #createNamedMock(String, Class)} but adds an additional\r\n * parameterized type.\r\n */\r\npublic static <V extends Object, T> T createVMock(V name, Class<T> toMock) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#createVMock(V,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#extractValueFrom(MyInterfaceType<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Extract some value of the type supported by the interface (i.e., by a concrete,\r\n * non-generic implementation of the interface).\r\n */\r\npublic static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#extractValueFrom(MyInterfaceType<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#extractMagicValue(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Extract some magic value from the supplied map.\r\n */\r\npublic static <K, V> V extractMagicValue(Map<K, V> map) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#extractMagicValue(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#readIntegerInputMessage(MyInterfaceType<Integer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void readIntegerInputMessage(MyInterfaceType<Integer> message) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#readIntegerInputMessage(MyInterfaceType<Integer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#readIntegerArrayInputMessage(MyInterfaceType<Integer>[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public void readIntegerArrayInputMessage(MyInterfaceType<Integer>[] message) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#readIntegerArrayInputMessage(MyInterfaceType<Integer>[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods#readGenericArrayInputMessage(T[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public void readGenericArrayInputMessage(T[] message) ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MyTypeWithMethods",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MyTypeWithMethods#readGenericArrayInputMessage(T[])",
    "tailType": "method"
  }
]