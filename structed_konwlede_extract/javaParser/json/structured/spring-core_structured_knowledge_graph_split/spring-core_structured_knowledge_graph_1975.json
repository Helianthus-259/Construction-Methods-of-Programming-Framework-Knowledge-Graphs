[
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles_withEmptyProfile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles_withEmptyProfile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles_withNotOperator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid setDefaultProfiles_withNotOperator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> environment.setDefaultProfiles(\"d1\", \"!d2\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles_withNotOperator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setDefaultProfiles_withNotOperator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addActiveProfile() {\r\n    assertThat(environment.getActiveProfiles()).isEmpty();\r\n    environment.setActiveProfiles(\"local\", \"embedded\");\r\n    assertThat(environment.getActiveProfiles()).containsExactly(\"local\", \"embedded\");\r\n    environment.addActiveProfile(\"p1\");\r\n    assertThat(environment.getActiveProfiles()).containsExactly(\"local\", \"embedded\", \"p1\");\r\n    environment.addActiveProfile(\"p2\");\r\n    environment.addActiveProfile(\"p3\");\r\n    assertThat(environment.getActiveProfiles()).containsExactly(\"local\", \"embedded\", \"p1\", \"p2\", \"p3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile_whenActiveProfilesPropertyIsAlreadySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addActiveProfile_whenActiveProfilesPropertyIsAlreadySet() {\r\n    ConfigurableEnvironment env = new StandardEnvironment();\r\n    assertThat(env.getProperty(ACTIVE_PROFILES_PROPERTY_NAME)).isNull();\r\n    env.getPropertySources().addFirst(new MockPropertySource().withProperty(ACTIVE_PROFILES_PROPERTY_NAME, \"p1\"));\r\n    assertThat(env.getProperty(ACTIVE_PROFILES_PROPERTY_NAME)).isEqualTo(\"p1\");\r\n    env.addActiveProfile(\"p2\");\r\n    assertThat(env.getActiveProfiles()).containsExactly(\"p1\", \"p2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile_whenActiveProfilesPropertyIsAlreadySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#addActiveProfile_whenActiveProfilesPropertyIsAlreadySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#reservedDefaultProfile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reservedDefaultProfile() {\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(RESERVED_DEFAULT_PROFILE_NAME);\r\n    try {\r\n        System.setProperty(DEFAULT_PROFILES_PROPERTY_NAME, \"d0\");\r\n        assertThat(environment.getDefaultProfiles()).containsExactly(\"d0\");\r\n        environment.setDefaultProfiles(\"d1\", \"d2\");\r\n        assertThat(environment.getDefaultProfiles()).containsExactly(\"d1\", \"d2\");\r\n    } finally {\r\n        System.clearProperty(DEFAULT_PROFILES_PROPERTY_NAME);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#reservedDefaultProfile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#reservedDefaultProfile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#defaultProfileWithCircularPlaceholder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultProfileWithCircularPlaceholder() {\r\n    try {\r\n        System.setProperty(DEFAULT_PROFILES_PROPERTY_NAME, \"${spring.profiles.default}\");\r\n        assertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(environment::getDefaultProfiles).withMessageContaining(\"Circular placeholder reference 'spring.profiles.default'\");\r\n    } finally {\r\n        System.clearProperty(DEFAULT_PROFILES_PROPERTY_NAME);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#defaultProfileWithCircularPlaceholder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#defaultProfileWithCircularPlaceholder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#getDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDefaultProfiles() {\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(RESERVED_DEFAULT_PROFILE_NAME);\r\n    environment.getPropertySources().addFirst(new MockPropertySource().withProperty(DEFAULT_PROFILES_PROPERTY_NAME, \"pd1\"));\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(\"pd1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#getDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#getDefaultProfiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]