[
  {
    "head": "org.springframework.core.io.FileSystemResource#getURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a URL for the underlying file.\r\n * @see java.io.File#toURI()\r\n * @see java.nio.file.Path#toUri()\r\n */\r\n@Override\r\npublic URL getURL() throws IOException {\r\n    return (this.file != null ? this.file.toURI().toURL() : this.filePath.toUri().toURL());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a URI for the underlying file.\r\n * @see java.io.File#toURI()\r\n * @see java.nio.file.Path#toUri()\r\n */\r\n@Override\r\npublic URI getURI() throws IOException {\r\n    if (this.file != null) {\r\n        return this.file.toURI();\r\n    } else {\r\n        URI uri = this.filePath.toUri();\r\n        // Normalize URI? See https://github.com/spring-projects/spring-framework/issues/29275\r\n        String scheme = uri.getScheme();\r\n        if (ResourceUtils.URL_PROTOCOL_FILE.equals(scheme)) {\r\n            try {\r\n                uri = new URI(scheme, uri.getPath(), null);\r\n            } catch (URISyntaxException ex) {\r\n                throw new IOException(\"Failed to normalize URI: \" + uri, ex);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always indicates a file.\r\n */\r\n@Override\r\npublic boolean isFile() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#isFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#isFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying File reference.\r\n */\r\n@Override\r\npublic File getFile() {\r\n    return (this.file != null ? this.file : this.filePath.toFile());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#getFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#getFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#readableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens a FileChannel for the underlying file.\r\n * @see java.nio.channels.FileChannel\r\n */\r\n@Override\r\npublic ReadableByteChannel readableChannel() throws IOException {\r\n    try {\r\n        return FileChannel.open(this.filePath, StandardOpenOption.READ);\r\n    } catch (NoSuchFileException ex) {\r\n        throw new FileNotFoundException(ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#readableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#readableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#writableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens a FileChannel for the underlying file.\r\n * @see java.nio.channels.FileChannel\r\n */\r\n@Override\r\npublic WritableByteChannel writableChannel() throws IOException {\r\n    return FileChannel.open(this.filePath, StandardOpenOption.WRITE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#writableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#writableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource#contentLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying File/Path length.\r\n */\r\n@Override\r\npublic long contentLength() throws IOException {\r\n    if (this.file != null) {\r\n        long length = this.file.length();\r\n        if (length == 0L && !this.file.exists()) {\r\n            throw new FileNotFoundException(getDescription() + \" cannot be resolved in the file system for checking its content length\");\r\n        }\r\n        return length;\r\n    } else {\r\n        try {\r\n            return Files.size(this.filePath);\r\n        } catch (NoSuchFileException ex) {\r\n            throw new FileNotFoundException(ex.getMessage());\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileSystemResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileSystemResource#contentLength()",
    "tailType": "method"
  }
]