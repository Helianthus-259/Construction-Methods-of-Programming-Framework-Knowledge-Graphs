[
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassWhenHasInterfaceDoesNotIncludeInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid superclassStrategyOnClassHierarchyScansInCorrectOrder() {\r\n    Class<?> source = WithHierarchy.class;\r\n    assertThat(scan(source, SearchStrategy.SUPERCLASS)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\", \"2:TestAnnotation3\", \"2:TestInheritedAnnotation3\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#superclassStrategyOnClassHierarchyScansInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone() {\r\n    Class<?> source = WithNoAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenNotAnnotatedScansNone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnClassScansAnnotations() {\r\n    Class<?> source = WithSingleAnnotation.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations() {\r\n    Class<?> source = WithMultipleAnnotations.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"0:TestAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenMultipleAnnotationsScansAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass() {\r\n    Class<?> source = WithSingleSuperclass.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSuperclassScansSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScannerTests#typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeHierarchyStrategyOnClassWhenHasSingleInterfaceScansInterfaces() {\r\n    Class<?> source = WithSingleInterface.class;\r\n    assertThat(scan(source, SearchStrategy.TYPE_HIERARCHY)).containsExactly(\"0:TestAnnotation1\", \"1:TestAnnotation2\", \"1:TestInheritedAnnotation2\");\r\n}",
    "tailType": "method_code"
  }
]