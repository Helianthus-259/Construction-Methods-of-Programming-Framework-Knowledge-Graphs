[
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#deleteAny(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#quote(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Convenience methods for working with formatted Strings\r\n//---------------------------------------------------------------------\r\n/**\r\n * Quote the given {@code String} with single quotes.\r\n * @param str the input {@code String} (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or {@code null} if the input was {@code null}\r\n */\r\n@Nullable\r\npublic static String quote(@Nullable String str) {\r\n    return (str != null ? \"'\" + str + \"'\" : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#quote(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#quote(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#quoteIfString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Turn the given Object into a {@code String} with single quotes\r\n * if it is a {@code String}; keeping the Object as-is else.\r\n * @param obj the input Object (for example, \"myString\")\r\n * @return the quoted {@code String} (for example, \"'myString'\"),\r\n * or the input object as-is if not a {@code String}\r\n */\r\n@Nullable\r\npublic static Object quoteIfString(@Nullable Object obj) {\r\n    return (obj instanceof String str ? quote(str) : obj);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#quoteIfString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#quoteIfString(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#unqualify(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Unqualify a string qualified by a '.' dot character. For example,\r\n * \"this.name.is.qualified\", returns \"qualified\".\r\n * @param qualifiedName the qualified name\r\n */\r\npublic static String unqualify(String qualifiedName) {\r\n    return unqualify(qualifiedName, DOT_CHAR);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#unqualify(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#unqualify(String,char)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Unqualify a string qualified by a separator character. For example,\r\n * \"this:name:is:qualified\" returns \"qualified\" if using a ':' separator.\r\n * @param qualifiedName the qualified name\r\n * @param separator the separator\r\n */\r\npublic static String unqualify(String qualifiedName, char separator) {\r\n    return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#unqualify(String,char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#capitalize(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Capitalize a {@code String}, changing the first letter to\r\n * upper case as per {@link Character#toUpperCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to capitalize\r\n * @return the capitalized {@code String}\r\n */\r\npublic static String capitalize(String str) {\r\n    return changeFirstCharacterCase(str, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#capitalize(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#uncapitalize(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Uncapitalize a {@code String}, changing the first letter to\r\n * lower case as per {@link Character#toLowerCase(char)}.\r\n * No other letters are changed.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n */\r\npublic static String uncapitalize(String str) {\r\n    return changeFirstCharacterCase(str, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#uncapitalize(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#uncapitalizeAsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Uncapitalize a {@code String} in JavaBeans property format,\r\n * changing the first letter to lower case as per\r\n * {@link Character#toLowerCase(char)}, unless the initial two\r\n * letters are upper case in direct succession.\r\n * @param str the {@code String} to uncapitalize\r\n * @return the uncapitalized {@code String}\r\n * @since 6.0\r\n * @see java.beans.Introspector#decapitalize(String)\r\n */\r\npublic static String uncapitalizeAsProperty(String str) {\r\n    if (!hasLength(str) || (str.length() > 1 && Character.isUpperCase(str.charAt(0)) && Character.isUpperCase(str.charAt(1)))) {\r\n        return str;\r\n    }\r\n    return changeFirstCharacterCase(str, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#uncapitalizeAsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#changeFirstCharacterCase(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String changeFirstCharacterCase(String str, boolean capitalize) {\r\n    if (!hasLength(str)) {\r\n        return str;\r\n    }\r\n    char baseChar = str.charAt(0);\r\n    char updatedChar;\r\n    if (capitalize) {\r\n        updatedChar = Character.toUpperCase(baseChar);\r\n    } else {\r\n        updatedChar = Character.toLowerCase(baseChar);\r\n    }\r\n    if (baseChar == updatedChar) {\r\n        return str;\r\n    }\r\n    char[] chars = str.toCharArray();\r\n    chars[0] = updatedChar;\r\n    return new String(chars);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#changeFirstCharacterCase(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#getFilename(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Extract the filename from the given Java resource path,\r\n * for example, {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}.\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilename(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    return (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);\r\n}",
    "tailType": "method_code"
  }
]