[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedValueComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation() {\r\n    Class<?> element = ComposedImplicitAliasesContextConfigClass.class;\r\n    String name = ImplicitAliasesContextConfig.class.getName();\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, name);\r\n    String[] expected = asArray(\"A.xml\", \"B.xml\");\r\n    assertThat(attributes).as(\"Should find @ImplicitAliasesContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(attributes.getStringArray(\"groovyScripts\")).as(\"groovyScripts\").isEqualTo(expected);\r\n    assertThat(attributes.getStringArray(\"xmlFiles\")).as(\"xmlFiles\").isEqualTo(expected);\r\n    assertThat(attributes.getStringArray(\"locations\")).as(\"locations\").isEqualTo(expected);\r\n    assertThat(attributes.getStringArray(\"value\")).as(\"value\").isEqualTo(expected);\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithAliasedValueComposedAnnotation() {\r\n    assertGetMergedAnnotation(AliasedValueComposedContextConfigClass.class, \"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithAliasedValueComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithAliasedValueComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation() {\r\n    assertGetMergedAnnotation(ImplicitAliasesContextConfigClass1.class, \"foo.xml\");\r\n    assertGetMergedAnnotation(ImplicitAliasesContextConfigClass2.class, \"bar.xml\");\r\n    assertGetMergedAnnotation(ImplicitAliasesContextConfigClass3.class, \"baz.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesForSameAttributeInComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithTransitiveImplicitAliases() {\r\n    assertGetMergedAnnotation(TransitiveImplicitAliasesContextConfigClass.class, \"test.groovy\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor() {\r\n    assertGetMergedAnnotation(SingleLocationTransitiveImplicitAliasesContextConfigClass.class, \"test.groovy\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel() {\r\n    assertGetMergedAnnotation(TransitiveImplicitAliasesWithSkippedLevelContextConfigClass.class, \"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]