[
  {
    "head": "org.springframework.aot.generate.GeneratedClass#methodNameSequenceGenerator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<MethodName, AtomicInteger>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#reserveMethodNames(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Update this instance with a set of reserved method names that should not\r\n * be used for generated methods. Reserved names are often needed when a\r\n * generated class implements a specific interface.\r\n * @param reservedMethodNames the reserved method names\r\n */\r\npublic void reserveMethodNames(String... reservedMethodNames) {\r\n    for (String reservedMethodName : reservedMethodNames) {\r\n        String generatedName = generateSequencedMethodName(MethodName.of(reservedMethodNames));\r\n        Assert.state(generatedName.equals(reservedMethodName), () -> String.format(\"Unable to reserve method name '%s'\", reservedMethodName));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#reserveMethodNames(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#generateSequencedMethodName(MethodName)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String generateSequencedMethodName(MethodName name) {\r\n    int sequence = this.methodNameSequenceGenerator.computeIfAbsent(name, key -> new AtomicInteger()).getAndIncrement();\r\n    return (sequence > 0 ? name.toString() + sequence : name.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#generateSequencedMethodName(MethodName)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getEnclosingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the enclosing {@link GeneratedClass} or {@code null} if this\r\n * instance represents a top-level class.\r\n * @return the enclosing generated class, if any\r\n */\r\n@Nullable\r\npublic GeneratedClass getEnclosingClass() {\r\n    return this.enclosingClass;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#getEnclosingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getEnclosingClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the generated class.\r\n * @return the name of the generated class\r\n */\r\npublic ClassName getName() {\r\n    return this.name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return generated methods for this instance.\r\n * @return the generated methods\r\n */\r\npublic GeneratedMethods getMethods() {\r\n    return this.methods;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#getMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getOrAdd(String,Consumer<TypeSpec.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get or add a nested generated class with the specified name. If this method\r\n * has previously been called with the given {@code name}, the existing class\r\n * will be returned, otherwise a new class will be generated.\r\n * @param name the name of the nested class\r\n * @param type a {@link Consumer} used to build the type\r\n * @return an existing or newly generated class whose enclosing class is this class\r\n */\r\npublic GeneratedClass getOrAdd(String name, Consumer<TypeSpec.Builder> type) {\r\n    ClassName className = this.name.nestedClass(name);\r\n    return this.declaredClasses.computeIfAbsent(className, key -> new GeneratedClass(this, className, type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#getOrAdd(String,Consumer<TypeSpec.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#generateJavaFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "JavaFile generateJavaFile() {\r\n    Assert.state(getEnclosingClass() == null, \"Java file cannot be generated for an inner class\");\r\n    TypeSpec.Builder type = apply();\r\n    return JavaFile.builder(this.name.packageName(), type.build()).build();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#generateJavaFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#apply()",
    "headType": "method",
    "relation": "provide",
    "tail": "private TypeSpec.Builder apply() {\r\n    TypeSpec.Builder type = getBuilder(this.type);\r\n    type.addAnnotation(Generated.class);\r\n    this.methods.doWithMethodSpecs(type::addMethod);\r\n    this.declaredClasses.values().forEach(declaredClass -> type.addType(declaredClass.apply().build()));\r\n    return type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#apply()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass#getBuilder(Consumer<TypeSpec.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private TypeSpec.Builder getBuilder(Consumer<TypeSpec.Builder> type) {\r\n    TypeSpec.Builder builder = TypeSpec.classBuilder(this.name);\r\n    type.accept(builder);\r\n    return builder;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClass#getBuilder(Consumer<TypeSpec.Builder>)",
    "tailType": "method"
  }
]