[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyMultipleNoninheritedComposedAnnotationsOnClass() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(MultipleNoninheritedComposedCachesClass.class, SearchStrategy.INHERITED_ANNOTATIONS);\r\n    assertThat(stream(annotations, \"value\")).containsExactly(\"noninheritedCache1\", \"noninheritedCache2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyMultipleNoninheritedComposedAnnotationsOnSuperclass() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(SubMultipleNoninheritedComposedCachesClass.class, SearchStrategy.INHERITED_ANNOTATIONS);\r\n    assertThat(annotations.stream(Cacheable.class)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleNoninheritedComposedAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyComposedPlusLocalAnnotationsOnClass() {\r\n    assertInheritedStrategyBehavior(ComposedPlusLocalCachesClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyMultipleComposedAnnotationsOnInterface() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(MultipleComposedCachesOnInterfaceClass.class, SearchStrategy.INHERITED_ANNOTATIONS);\r\n    assertThat(annotations.stream(Cacheable.class)).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyMultipleComposedAnnotationsOnMethod() throws Exception {\r\n    assertInheritedStrategyBehavior(getClass().getDeclaredMethod(\"multipleComposedCachesMethod\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyMultipleComposedAnnotationsOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid inheritedStrategyComposedPlusLocalAnnotationsOnMethod() throws Exception {\r\n    assertInheritedStrategyBehavior(getClass().getDeclaredMethod(\"composedPlusLocalCachesMethod\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#inheritedStrategyComposedPlusLocalAnnotationsOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#assertInheritedStrategyBehavior(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertInheritedStrategyBehavior(AnnotatedElement element) {\r\n    MergedAnnotations annotations = MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS);\r\n    assertThat(stream(annotations, \"key\")).containsExactly(\"fooKey\", \"barKey\");\r\n    assertThat(stream(annotations, \"value\")).containsExactly(\"fooCache\", \"barCache\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsComposedOnSingleAnnotatedElementTests#assertInheritedStrategyBehavior(AnnotatedElement)",
    "tailType": "method"
  }
]