[
  {
    "head": "org.springframework.core.io.UrlResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#customizeConnection(URLConnection)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected void customizeConnection(URLConnection con) throws IOException {\r\n    super.customizeConnection(con);\r\n    String userInfo = this.url.getUserInfo();\r\n    if (userInfo != null) {\r\n        String encodedCredentials = Base64.getUrlEncoder().encodeToString(userInfo.getBytes());\r\n        con.setRequestProperty(AUTHORIZATION, \"Basic \" + encodedCredentials);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#customizeConnection(URLConnection)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#customizeConnection(URLConnection)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying URL reference.\r\n */\r\n@Override\r\npublic URL getURL() {\r\n    return this.url;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#getURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getURI()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the underlying URI directly,\r\n * if possible.\r\n */\r\n@Override\r\npublic URI getURI() throws IOException {\r\n    if (this.uri != null) {\r\n        return this.uri;\r\n    } else {\r\n        return super.getURI();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#getURI()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getURI()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#isFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isFile() {\r\n    if (this.uri != null) {\r\n        return super.isFile(this.uri);\r\n    } else {\r\n        return super.isFile();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#isFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#isFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a File reference for the underlying URL/URI,\r\n * provided that it refers to a file in the file system.\r\n * @see org.springframework.util.ResourceUtils#getFile(java.net.URL, String)\r\n */\r\n@Override\r\npublic File getFile() throws IOException {\r\n    if (this.uri != null) {\r\n        return super.getFile(this.uri);\r\n    } else {\r\n        return super.getFile();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#getFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#getFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation creates a {@code UrlResource}, delegating to\r\n * {@link #createRelativeURL(String)} for adapting the relative path.\r\n * @see #createRelativeURL(String)\r\n */\r\n@Override\r\npublic Resource createRelative(String relativePath) throws MalformedURLException {\r\n    return new UrlResource(createRelativeURL(relativePath));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResource#createRelativeURL(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This delegate creates a {@code java.net.URL}, applying the given path\r\n * relative to the path of the underlying URL of this resource descriptor.\r\n * <p>A leading slash will get dropped; a \"#\" symbol will get encoded.\r\n * Note that this method effectively cleans the combined path as of 6.1.\r\n * @since 5.2\r\n * @see #createRelative(String)\r\n * @see ResourceUtils#toRelativeURL(URL, String)\r\n */\r\nprotected URL createRelativeURL(String relativePath) throws MalformedURLException {\r\n    if (relativePath.startsWith(\"/\")) {\r\n        relativePath = relativePath.substring(1);\r\n    }\r\n    return ResourceUtils.toRelativeURL(this.url, relativePath);\r\n}",
    "tailType": "method_code"
  }
]