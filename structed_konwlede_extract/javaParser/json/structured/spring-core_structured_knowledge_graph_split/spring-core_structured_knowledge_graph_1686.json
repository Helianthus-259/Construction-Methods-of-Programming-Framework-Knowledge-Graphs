[
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#indexOfMethodReturnsIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid indexOfMethodReturnsIndex() throws Exception {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(MultipleAttributes.class);\r\n    Method method = MultipleAttributes.class.getDeclaredMethod(\"value\");\r\n    assertThat(methods.indexOf(method)).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#indexOfMethodReturnsIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#indexOfMethodReturnsIndex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#sizeReturnsSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sizeReturnsSize() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(MultipleAttributes.class);\r\n    assertThat(methods.size()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#sizeReturnsSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#sizeReturnsSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassAttributeReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canThrowTypeNotPresentExceptionWhenHasClassAttributeReturnsTrue() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(ClassValue.class);\r\n    assertThat(methods.canThrowTypeNotPresentException(0)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassAttributeReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassAttributeReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassArrayAttributeReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canThrowTypeNotPresentExceptionWhenHasClassArrayAttributeReturnsTrue() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(ClassArrayValue.class);\r\n    assertThat(methods.canThrowTypeNotPresentException(0)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassArrayAttributeReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenHasClassArrayAttributeReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenNotClassOrClassArrayAttributeReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canThrowTypeNotPresentExceptionWhenNotClassOrClassArrayAttributeReturnsFalse() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(ValueOnly.class);\r\n    assertThat(methods.canThrowTypeNotPresentException(0)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenNotClassOrClassArrayAttributeReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#canThrowTypeNotPresentExceptionWhenNotClassOrClassArrayAttributeReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasDefaultValueMethodReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasDefaultValueMethodWhenHasDefaultValueMethodReturnsTrue() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(DefaultValueAttribute.class);\r\n    assertThat(methods.hasDefaultValueMethod()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasDefaultValueMethodReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasDefaultValueMethodReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasNoDefaultValueMethodsReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasDefaultValueMethodWhenHasNoDefaultValueMethodsReturnsFalse() {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(MultipleAttributes.class);\r\n    assertThat(methods.hasDefaultValueMethod()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AttributeMethodsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AttributeMethodsTests#hasDefaultValueMethodWhenHasNoDefaultValueMethodsReturnsFalse()",
    "tailType": "method"
  }
]