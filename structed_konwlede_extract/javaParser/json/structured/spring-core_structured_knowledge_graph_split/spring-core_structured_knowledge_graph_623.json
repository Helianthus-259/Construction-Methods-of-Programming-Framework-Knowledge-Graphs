[
  {
    "head": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isInterface(int access) {\r\n    return (Constants.ACC_INTERFACE & access) != 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isInterface(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isPrivate(int access) {\r\n    return (Constants.ACC_PRIVATE & access) != 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isPrivate(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isSynthetic(int access) {\r\n    return (Constants.ACC_SYNTHETIC & access) != 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isSynthetic(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#isBridge(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static boolean isBridge(int access) {\r\n    return (Constants.ACC_BRIDGE & access) != 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#isBridge(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "// getPackage returns null on JDK 1.2\r\npublic static String getPackageName(Type type) {\r\n    return getPackageName(getClassName(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getPackageName(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getPackageName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String getPackageName(String className) {\r\n    int idx = className.lastIndexOf('.');\r\n    return (idx < 0) ? \"\" : className.substring(0, idx);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getPackageName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#upperFirst(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String upperFirst(String s) {\r\n    if (s == null || s.isEmpty()) {\r\n        return s;\r\n    }\r\n    return Character.toUpperCase(s.charAt(0)) + s.substring(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#upperFirst(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#getClassName(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String getClassName(Type type) {\r\n    if (isPrimitive(type)) {\r\n        return (String) rtransforms.get(type.getDescriptor());\r\n    } else if (isArray(type)) {\r\n        return getClassName(getComponentType(type)) + \"[]\";\r\n    } else {\r\n        return type.getClassName();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#getClassName(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] add(Type[] types, Type extra) {\r\n    if (types == null) {\r\n        return new Type[] { extra };\r\n    } else {\r\n        List list = Arrays.asList(types);\r\n        if (list.contains(extra)) {\r\n            return types;\r\n        }\r\n        Type[] copy = new Type[types.length + 1];\r\n        System.arraycopy(types, 0, copy, 0, types.length);\r\n        copy[types.length] = extra;\r\n        return copy;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#add(Type[],Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils#add(Type[],Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] add(Type[] t1, Type[] t2) {\r\n    // TODO: set semantics?\r\n    Type[] all = new Type[t1.length + t2.length];\r\n    System.arraycopy(t1, 0, all, 0, t1.length);\r\n    System.arraycopy(t2, 0, all, t1.length, t2.length);\r\n    return all;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.TypeUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.TypeUtils#add(Type[],Type[])",
    "tailType": "method"
  }
]