[
  {
    "head": "org.springframework.core.io.UrlResourceTests#unusualRelativeResourcesAreEqual()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#missingRemoteResourceDoesNotExist()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid missingRemoteResourceDoesNotExist() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/missing\");\r\n    assertThat(resource.exists()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#missingRemoteResourceDoesNotExist()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#missingRemoteResourceDoesNotExist()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#remoteResourceExists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid remoteResourceExists() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isEqualTo(6);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#remoteResourceExists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#remoteResourceExists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#remoteResourceExistsFallback()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid remoteResourceExistsFallback() throws Exception {\r\n    String baseUrl = startServer(false);\r\n    UrlResource resource = new UrlResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    assertThat(resource.isReadable()).isTrue();\r\n    assertThat(resource.contentLength()).isEqualTo(6);\r\n    assertThat(resource.lastModified()).isGreaterThan(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#remoteResourceExistsFallback()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#remoteResourceExistsFallback()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canCustomizeHttpUrlConnectionForExists() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExistsFallback()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canCustomizeHttpUrlConnectionForExistsFallback() throws Exception {\r\n    String baseUrl = startServer(false);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.exists()).isTrue();\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"HEAD\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExistsFallback()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForExistsFallback()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForRead()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canCustomizeHttpUrlConnectionForRead() throws Exception {\r\n    String baseUrl = startServer(true);\r\n    CustomResource resource = new CustomResource(baseUrl + \"/resource\");\r\n    assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n    RecordedRequest request = this.server.takeRequest();\r\n    assertThat(request.getMethod()).isEqualTo(\"GET\");\r\n    assertThat(request.getHeader(\"Framework-Name\")).isEqualTo(\"Spring\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForRead()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#canCustomizeHttpUrlConnectionForRead()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#useUserInfoToSetBasicAuth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid useUserInfoToSetBasicAuth() throws Exception {\r\n    startServer(true);\r\n    UrlResource resource = new UrlResource(\"http://alice:secret@localhost:\" + this.server.getPort() + \"/resource\");\r\n    assertThat(resource.getInputStream()).hasContent(\"Spring\");\r\n    RecordedRequest request = this.server.takeRequest();\r\n    String authorization = request.getHeader(\"Authorization\");\r\n    assertThat(authorization).isNotNull().startsWith(\"Basic \");\r\n    assertThat(new String(Base64.getDecoder().decode(authorization.substring(6)), StandardCharsets.ISO_8859_1)).isEqualTo(\"alice:secret\");\r\n}",
    "tailType": "method_code"
  }
]