[
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getReadableByteChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForDir()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getReadableByteChannelForDir() throws IOException {\r\n    PathResource resource = new PathResource(TEST_DIR);\r\n    try {\r\n        resource.readableChannel();\r\n    } catch (AccessDeniedException ex) {\r\n        // on Windows\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForDir()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForDir()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForNonExistingFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getReadableByteChannelForNonExistingFile() {\r\n    PathResource resource = new PathResource(NON_EXISTING_FILE);\r\n    assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(resource::readableChannel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForNonExistingFile()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getReadableByteChannelForNonExistingFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getWritableChannel(Path)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWritableChannel(@TempDir Path temporaryFolder) throws IOException {\r\n    Path testPath = temporaryFolder.resolve(\"test\");\r\n    Files.createFile(testPath);\r\n    PathResource resource = new PathResource(testPath);\r\n    ByteBuffer buffer = ByteBuffer.wrap(\"test\".getBytes(StandardCharsets.UTF_8));\r\n    try (WritableByteChannel channel = resource.writableChannel()) {\r\n        channel.write(buffer);\r\n    }\r\n    assertThat(resource.contentLength()).isEqualTo(4L);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.PathResourceTests#getWritableChannel(Path)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.PathResourceTests#getWritableChannel(Path)",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ResourceEditorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.beans.PropertyEditor;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link ResourceEditor}.\n *\n * @author Rick Evans\n * @author Arjen Poutsma\n * @author Dave Syer\n */\nclass ResourceEditorTests {\n\n\t@Test\n\tvoid sunnyDay() {\n\t\tPropertyEditor editor = new ResourceEditor();\n\t\teditor.setAsText(\"classpath:org/springframework/core/io/ResourceEditorTests.class\");\n\t\tResource resource = (Resource) editor.getValue();\n\t\tassertThat(resource).isNotNull();\n\t\tassertThat(resource.exists()).isTrue();\n\t}\n\n\t@Test\n\tvoid ctorWithNullCtorArgs() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew ResourceEditor(null, null));\n\t}\n\n\t@Test\n\tvoid setAndGetAsTextWithNull() {\n\t\tPropertyEditor editor = new ResourceEditor();\n\t\teditor.setAsText(null);\n\t\tassertThat(editor.getAsText()).isEmpty();\n\t}\n\n\t@Test\n\tvoid setAndGetAsTextWithWhitespaceResource() {\n\t\tPropertyEditor editor = new ResourceEditor();\n\t\teditor.setAsText(\"  \");\n\t\tassertThat(editor.getAsText()).isEmpty();\n\t}\n\n\t@Test\n\tvoid systemPropertyReplacement() {\n\t\tPropertyEditor editor = new ResourceEditor();\n\t\tSystem.setProperty(\"test.prop\", \"foo\");\n\t\ttry {\n\t\t\teditor.setAsText(\"${test.prop}\");\n\t\t\tResource resolved = (Resource) editor.getValue();\n\t\t\tassertThat(resolved.getFilename()).isEqualTo(\"foo\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid systemPropertyReplacementWithUnresolvablePlaceholder() {\n\t\tPropertyEditor editor = new ResourceEditor();\n\t\tSystem.setProperty(\"test.prop\", \"foo\");\n\t\ttry {\n\t\t\teditor.setAsText(\"${test.prop}-${bar}\");\n\t\t\tResource resolved = (Resource) editor.getValue();\n\t\t\tassertThat(resolved.getFilename()).isEqualTo(\"foo-${bar}\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid strictSystemPropertyReplacementWithUnresolvablePlaceholder() {\n\t\tPropertyEditor editor = new ResourceEditor(new DefaultResourceLoader(), new StandardEnvironment(), false);\n\t\tSystem.setProperty(\"test.prop\", \"foo\");\n\t\ttry {\n\t\t\tassertThatExceptionOfType(PlaceholderResolutionException.class).isThrownBy(() -> {\n\t\t\t\t\teditor.setAsText(\"${test.prop}-${bar}\");\n\t\t\t\t\teditor.getValue();\n\t\t\t});\n\t\t}\n\t\tfinally {\n\t\t\tSystem.clearProperty(\"test.prop\");\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests#sunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sunnyDay() {\r\n    PropertyEditor editor = new ResourceEditor();\r\n    editor.setAsText(\"classpath:org/springframework/core/io/ResourceEditorTests.class\");\r\n    Resource resource = (Resource) editor.getValue();\r\n    assertThat(resource).isNotNull();\r\n    assertThat(resource.exists()).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceEditorTests#sunnyDay()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests#sunnyDay()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests#ctorWithNullCtorArgs()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ctorWithNullCtorArgs() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ResourceEditor(null, null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ResourceEditorTests#ctorWithNullCtorArgs()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ResourceEditorTests#ctorWithNullCtorArgs()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]