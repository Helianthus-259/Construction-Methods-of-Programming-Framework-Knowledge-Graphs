[
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#invoke(Object,Method,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#invoke(Object,Method,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationEquals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * See {@link Annotation#equals(Object)} for a definition of the required algorithm.\r\n * @param other the other object to compare against\r\n */\r\nprivate boolean annotationEquals(Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (!this.type.isInstance(other)) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < this.attributes.size(); i++) {\r\n        Method attribute = this.attributes.get(i);\r\n        Object thisValue = getAttributeValue(attribute);\r\n        Object otherValue = AnnotationUtils.invokeAnnotationMethod(attribute, other);\r\n        if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationEquals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationHashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * See {@link Annotation#hashCode()} for a definition of the required algorithm.\r\n */\r\nprivate int annotationHashCode() {\r\n    Integer hashCode = this.hashCode;\r\n    if (hashCode == null) {\r\n        hashCode = computeHashCode();\r\n        this.hashCode = hashCode;\r\n    }\r\n    return hashCode;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationHashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#computeHashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Integer computeHashCode() {\r\n    int hashCode = 0;\r\n    for (int i = 0; i < this.attributes.size(); i++) {\r\n        Method attribute = this.attributes.get(i);\r\n        Object value = getAttributeValue(attribute);\r\n        hashCode += (127 * attribute.getName().hashCode()) ^ ObjectUtils.nullSafeHashCode(value);\r\n    }\r\n    return hashCode;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#computeHashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "private String annotationToString() {\r\n    String string = this.string;\r\n    if (string == null) {\r\n        StringBuilder builder = new StringBuilder(\"@\").append(getName(this.type)).append('(');\r\n        for (int i = 0; i < this.attributes.size(); i++) {\r\n            Method attribute = this.attributes.get(i);\r\n            if (i > 0) {\r\n                builder.append(\", \");\r\n            }\r\n            builder.append(attribute.getName());\r\n            builder.append('=');\r\n            builder.append(toString(getAttributeValue(attribute)));\r\n        }\r\n        builder.append(')');\r\n        string = builder.toString();\r\n        this.string = string;\r\n    }\r\n    return string;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#annotationToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#toString(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This method currently does not address the following issues which we may\r\n * choose to address at a later point in time.\r\n *\r\n * <ul>\r\n * <li>non-ASCII, non-visible, and non-printable characters within a character\r\n * or String literal are not escaped.</li>\r\n * <li>formatting for float and double values does not take into account whether\r\n * a value is not a number (NaN) or infinite.</li>\r\n * </ul>\r\n * @param value the attribute value to format\r\n * @return the formatted string representation\r\n */\r\nprivate String toString(Object value) {\r\n    if (value instanceof String str) {\r\n        return '\"' + str + '\"';\r\n    }\r\n    if (value instanceof Character) {\r\n        return '\\'' + value.toString() + '\\'';\r\n    }\r\n    if (value instanceof Byte) {\r\n        return String.format(\"(byte) 0x%02X\", value);\r\n    }\r\n    if (value instanceof Long longValue) {\r\n        return Long.toString(longValue) + 'L';\r\n    }\r\n    if (value instanceof Float floatValue) {\r\n        return Float.toString(floatValue) + 'f';\r\n    }\r\n    if (value instanceof Double doubleValue) {\r\n        return Double.toString(doubleValue) + 'd';\r\n    }\r\n    if (value instanceof Enum<?> e) {\r\n        return e.name();\r\n    }\r\n    if (value instanceof Class<?> clazz) {\r\n        return getName(clazz) + \".class\";\r\n    }\r\n    if (value.getClass().isArray()) {\r\n        StringBuilder builder = new StringBuilder(\"{\");\r\n        for (int i = 0; i < Array.getLength(value); i++) {\r\n            if (i > 0) {\r\n                builder.append(\", \");\r\n            }\r\n            builder.append(toString(Array.get(value, i)));\r\n        }\r\n        builder.append('}');\r\n        return builder.toString();\r\n    }\r\n    return String.valueOf(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#toString(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#getAttributeValue(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object getAttributeValue(Method method) {\r\n    Object value = this.valueCache.computeIfAbsent(method.getName(), attributeName -> {\r\n        Class<?> type = ClassUtils.resolvePrimitiveIfNecessary(method.getReturnType());\r\n        return this.annotation.getValue(attributeName, type).orElseThrow(() -> new NoSuchElementException(\"No value found for attribute named '\" + attributeName + \"' in merged annotation \" + getName(this.annotation.getType())));\r\n    });\r\n    // Clone non-empty arrays so that users cannot alter the contents of values in our cache.\r\n    if (value.getClass().isArray() && Array.getLength(value) > 0) {\r\n        value = cloneArray(value);\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#getAttributeValue(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#cloneArray(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Clone the provided array, ensuring that the original component type is retained.\r\n * @param array the array to clone\r\n */\r\nprivate Object cloneArray(Object array) {\r\n    if (array instanceof boolean[] booleans) {\r\n        return booleans.clone();\r\n    }\r\n    if (array instanceof byte[] bytes) {\r\n        return bytes.clone();\r\n    }\r\n    if (array instanceof char[] chars) {\r\n        return chars.clone();\r\n    }\r\n    if (array instanceof double[] doubles) {\r\n        return doubles.clone();\r\n    }\r\n    if (array instanceof float[] floats) {\r\n        return floats.clone();\r\n    }\r\n    if (array instanceof int[] ints) {\r\n        return ints.clone();\r\n    }\r\n    if (array instanceof long[] longs) {\r\n        return longs.clone();\r\n    }\r\n    if (array instanceof short[] shorts) {\r\n        return shorts.clone();\r\n    }\r\n    // else\r\n    return ((Object[]) array).clone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#cloneArray(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#createProxy(MergedAnnotation<A>,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nstatic <A extends Annotation> A createProxy(MergedAnnotation<A> annotation, Class<A> type) {\r\n    ClassLoader classLoader = type.getClassLoader();\r\n    Class<?>[] interfaces = new Class<?>[] { type };\r\n    InvocationHandler handler = new SynthesizedMergedAnnotationInvocationHandler<>(annotation, type);\r\n    return (A) Proxy.newProxyInstance(classLoader, interfaces, handler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#createProxy(MergedAnnotation<A>,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#createProxy(MergedAnnotation<A>,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.SynthesizedMergedAnnotationInvocationHandler#getName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String getName(Class<?> clazz) {\r\n    String canonicalName = clazz.getCanonicalName();\r\n    return (canonicalName != null ? canonicalName : clazz.getName());\r\n}",
    "tailType": "method_code"
  }
]