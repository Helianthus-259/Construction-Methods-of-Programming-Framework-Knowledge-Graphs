[
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.LocalResourceCache#setCacheLimit(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache#getCacheLimit()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int getCacheLimit() {\r\n    return this.cacheLimit;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.LocalResourceCache#getCacheLimit()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache#removeEldestEntry(Map.Entry<Resource,MetadataReader>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean removeEldestEntry(Map.Entry<Resource, MetadataReader> eldest) {\r\n    return size() > this.cacheLimit;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.LocalResourceCache#removeEldestEntry(Map.Entry<Resource,MetadataReader>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache#removeEldestEntry(Map.Entry<Resource,MetadataReader>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.LocalResourceCache",
    "headType": "class",
    "relation": "extend",
    "tail": "LinkedHashMap",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.ClassFormatException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassFormatException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassFormatException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.io.IOException;\n\nimport org.springframework.core.io.Resource;\n\n/**\n * Exception that indicates an incompatible class format encountered\n * in a class file during metadata reading.\n *\n * @author Juergen Hoeller\n * @since 6.1.2\n * @see MetadataReaderFactory#getMetadataReader(Resource)\n * @see ClassFormatError\n */\n@SuppressWarnings(\"serial\")\npublic class ClassFormatException extends IOException {\n\n\t/**\n\t * Construct a new {@code ClassFormatException} with the\n\t * supplied message.\n\t * @param message the detail message\n\t */\n\tpublic ClassFormatException(String message) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t * Construct a new {@code ClassFormatException} with the\n\t * supplied message and cause.\n\t * @param message the detail message\n\t * @param cause the root cause\n\t */\n\tpublic ClassFormatException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.ClassFormatException",
    "headType": "class",
    "relation": "extend",
    "tail": "IOException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type.classreading",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type.classreading",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type.classreading;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.SpringAsmInfo;\nimport org.springframework.asm.Type;\nimport org.springframework.core.annotation.AnnotationFilter;\nimport org.springframework.core.annotation.MergedAnnotation;\nimport org.springframework.util.ClassUtils;\n\n/**\n * {@link AnnotationVisitor} that can be used to construct a\n * {@link MergedAnnotation}.\n *\n * @author Phillip Webb\n * @since 5.2\n * @param <A> the annotation type\n */\nclass MergedAnnotationReadingVisitor<A extends Annotation> extends AnnotationVisitor {\n\n\tprivate final @Nullable ClassLoader classLoader;\n\n\tprivate final @Nullable Object source;\n\n\tprivate final Class<A> annotationType;\n\n\tprivate final Consumer<MergedAnnotation<A>> consumer;\n\n\tprivate final Map<String, Object> attributes = new LinkedHashMap<>(4);\n\n\n\tpublic MergedAnnotationReadingVisitor(@Nullable ClassLoader classLoader, @Nullable Object source,\n\t\t\tClass<A> annotationType, Consumer<MergedAnnotation<A>> consumer) {\n\n\t\tsuper(SpringAsmInfo.ASM_VERSION);\n\t\tthis.classLoader = classLoader;\n\t\tthis.source = source;\n\t\tthis.annotationType = annotationType;\n\t\tthis.consumer = consumer;\n\t}\n\n\n\t@Override\n\tpublic void visit(String name, Object value) {\n\t\tif (value instanceof Type type) {\n\t\t\tvalue = type.getClassName();\n\t\t}\n\t\tthis.attributes.put(name, value);\n\t}\n\n\t@Override\n\tpublic void visitEnum(String name, String descriptor, String value) {\n\t\tvisitEnum(descriptor, value, enumValue -> this.attributes.put(name, enumValue));\n\t}\n\n\t@Override\n\tpublic @Nullable AnnotationVisitor visitAnnotation(String name, String descriptor) {\n\t\treturn visitAnnotation(descriptor, annotation -> this.attributes.put(name, annotation));\n\t}\n\n\t@Override\n\tpublic AnnotationVisitor visitArray(String name) {\n\t\treturn new ArrayVisitor(value -> this.attributes.put(name, value));\n\t}\n\n\t@Override\n\tpublic void visitEnd() {\n\t\tMap<String, Object> compactedAttributes =\n\t\t\t\t(this.attributes.isEmpty() ? Collections.emptyMap() : this.attributes);\n\t\tMergedAnnotation<A> annotation = MergedAnnotation.of(\n\t\t\t\tthis.classLoader, this.source, this.annotationType, compactedAttributes);\n\t\tthis.consumer.accept(annotation);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <E extends Enum<E>> void visitEnum(String descriptor, String value, Consumer<E> consumer) {\n\t\tString className = Type.getType(descriptor).getClassName();\n\t\tClass<E> type = (Class<E>) ClassUtils.resolveClassName(className, this.classLoader);\n\t\tconsumer.accept(Enum.valueOf(type, value));\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate <T extends Annotation> @Nullable AnnotationVisitor visitAnnotation(\n\t\t\tString descriptor, Consumer<MergedAnnotation<T>> consumer) {\n\n\t\tString className = Type.getType(descriptor).getClassName();\n\t\tif (AnnotationFilter.PLAIN.matches(className)) {\n\t\t\treturn null;\n\t\t}\n\t\tClass<T> type = (Class<T>) ClassUtils.resolveClassName(className, this.classLoader);\n\t\treturn new MergedAnnotationReadingVisitor<>(this.classLoader, this.source, type, consumer);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tstatic <A extends Annotation> @Nullable AnnotationVisitor get(@Nullable ClassLoader classLoader,\n\t\t\t@Nullable Object source, String descriptor, boolean visible,\n\t\t\tConsumer<MergedAnnotation<A>> consumer) {\n\n\t\tif (!visible) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString typeName = Type.getType(descriptor).getClassName();\n\t\tif (AnnotationFilter.PLAIN.matches(typeName)) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tClass<A> annotationType = (Class<A>) ClassUtils.forName(typeName, classLoader);\n\t\t\treturn new MergedAnnotationReadingVisitor<>(classLoader, source, annotationType, consumer);\n\t\t}\n\t\tcatch (ClassNotFoundException | LinkageError ex) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link AnnotationVisitor} to deal with array attributes.\n\t */\n\tprivate class ArrayVisitor extends AnnotationVisitor {\n\n\t\tprivate final List<Object> elements = new ArrayList<>();\n\n\t\tprivate final Consumer<Object[]> consumer;\n\n\t\tArrayVisitor(Consumer<Object[]> consumer) {\n\t\t\tsuper(SpringAsmInfo.ASM_VERSION);\n\t\t\tthis.consumer = consumer;\n\t\t}\n\n\t\t@Override\n\t\tpublic void visit(String name, Object value) {\n\t\t\tif (value instanceof Type type) {\n\t\t\t\tvalue = type.getClassName();\n\t\t\t}\n\t\t\tthis.elements.add(value);\n\t\t}\n\n\t\t@Override\n\t\tpublic void visitEnum(String name, String descriptor, String value) {\n\t\t\tMergedAnnotationReadingVisitor.this.visitEnum(descriptor, value, this.elements::add);\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable AnnotationVisitor visitAnnotation(String name, String descriptor) {\n\t\t\treturn MergedAnnotationReadingVisitor.this.visitAnnotation(descriptor, this.elements::add);\n\t\t}\n\n\t\t@Override\n\t\tpublic void visitEnd() {\n\t\t\tClass<?> componentType = getComponentType();\n\t\t\tObject[] array = (Object[]) Array.newInstance(componentType, this.elements.size());\n\t\t\tthis.consumer.accept(this.elements.toArray(array));\n\t\t}\n\n\t\tprivate Class<?> getComponentType() {\n\t\t\tif (this.elements.isEmpty()) {\n\t\t\t\treturn Object.class;\n\t\t\t}\n\t\t\tObject firstElement = this.elements.get(0);\n\t\t\tif (firstElement instanceof Enum<?> enumeration) {\n\t\t\t\treturn enumeration.getDeclaringClass();\n\t\t\t}\n\t\t\treturn firstElement.getClass();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#classLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#source",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#source",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.classreading.MergedAnnotationReadingVisitor#annotationType",
    "tailType": "field"
  }
]