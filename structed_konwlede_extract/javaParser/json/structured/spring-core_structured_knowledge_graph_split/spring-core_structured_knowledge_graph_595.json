[
  {
    "head": "org.springframework.cglib.core.EmitUtils#GET_DECLARED_METHOD",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.EmitUtils#DEFAULT_DELIMITERS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#DEFAULT_DELIMITERS",
    "headType": "field",
    "relation": "haveType",
    "tail": "ArrayDelimiters",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void factory_method(ClassEmitter ce, Signature sig) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, sig, null);\r\n    e.new_instance_this();\r\n    e.dup();\r\n    e.load_args();\r\n    e.invoke_constructor_this(TypeUtils.parseConstructor(sig.getArgumentTypes()));\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#factory_method(ClassEmitter,Signature)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void null_constructor(ClassEmitter ce) {\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, CSTRUCT_NULL, null);\r\n    e.load_this();\r\n    e.super_invoke_constructor();\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#null_constructor(ClassEmitter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Process an array on the stack. Assumes the top item on the stack\r\n * is an array of the specified type. For each element in the array,\r\n * puts the element on the stack and triggers the callback.\r\n * @param type the type of the array (type.isArray() must be true)\r\n * @param callback the callback triggered for each element\r\n */\r\npublic static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) {\r\n    Type componentType = TypeUtils.getComponentType(type);\r\n    Local array = e.make_local();\r\n    Local loopvar = e.make_local(Type.INT_TYPE);\r\n    Label loopbody = e.make_label();\r\n    Label checkloop = e.make_label();\r\n    e.store_local(array);\r\n    e.push(0);\r\n    e.store_local(loopvar);\r\n    e.goTo(checkloop);\r\n    e.mark(loopbody);\r\n    e.load_local(array);\r\n    e.load_local(loopvar);\r\n    e.array_load(componentType);\r\n    callback.processElement(componentType);\r\n    e.iinc(loopvar, 1);\r\n    e.mark(checkloop);\r\n    e.load_local(loopvar);\r\n    e.load_local(array);\r\n    e.arraylength();\r\n    e.if_icmp(CodeEmitter.LT, loopbody);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#process_array(CodeEmitter,Type,ProcessArrayCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Process two arrays on the stack in parallel. Assumes the top two items on the stack\r\n * are arrays of the specified class. The arrays must be the same length. For each pair\r\n * of elements in the arrays, puts the pair on the stack and triggers the callback.\r\n * @param type the type of the arrays (type.isArray() must be true)\r\n * @param callback the callback triggered for each pair of elements\r\n */\r\npublic static void process_arrays(CodeEmitter e, Type type, ProcessArrayCallback callback) {\r\n    Type componentType = TypeUtils.getComponentType(type);\r\n    Local array1 = e.make_local();\r\n    Local array2 = e.make_local();\r\n    Local loopvar = e.make_local(Type.INT_TYPE);\r\n    Label loopbody = e.make_label();\r\n    Label checkloop = e.make_label();\r\n    e.store_local(array1);\r\n    e.store_local(array2);\r\n    e.push(0);\r\n    e.store_local(loopvar);\r\n    e.goTo(checkloop);\r\n    e.mark(loopbody);\r\n    e.load_local(array1);\r\n    e.load_local(loopvar);\r\n    e.array_load(componentType);\r\n    e.load_local(array2);\r\n    e.load_local(loopvar);\r\n    e.array_load(componentType);\r\n    callback.processElement(componentType);\r\n    e.iinc(loopvar, 1);\r\n    e.mark(checkloop);\r\n    e.load_local(loopvar);\r\n    e.load_local(array1);\r\n    e.arraylength();\r\n    e.if_icmp(CodeEmitter.LT, loopbody);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#process_arrays(CodeEmitter,Type,ProcessArrayCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void string_switch(CodeEmitter e, String[] strings, int switchStyle, ObjectSwitchCallback callback) {\r\n    try {\r\n        switch(switchStyle) {\r\n            case Constants.SWITCH_STYLE_TRIE:\r\n                string_switch_trie(e, strings, callback);\r\n                break;\r\n            case Constants.SWITCH_STYLE_HASH:\r\n                string_switch_hash(e, strings, callback, false);\r\n                break;\r\n            case Constants.SWITCH_STYLE_HASHONLY:\r\n                string_switch_hash(e, strings, callback, true);\r\n                break;\r\n            default:\r\n                throw new IllegalArgumentException(\"unknown switch style \" + switchStyle);\r\n        }\r\n    } catch (RuntimeException | Error ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throw new CodeGenerationException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#string_switch(CodeEmitter,String[],int,ObjectSwitchCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void string_switch_trie(final CodeEmitter e, String[] strings, final ObjectSwitchCallback callback) throws Exception {\r\n    final Label def = e.make_label();\r\n    final Label end = e.make_label();\r\n    final Map buckets = CollectionUtils.bucket(Arrays.asList(strings), value -> ((String) value).length());\r\n    e.dup();\r\n    e.invoke_virtual(Constants.TYPE_STRING, STRING_LENGTH);\r\n    e.process_switch(getSwitchKeys(buckets), new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label ignore_end) throws Exception {\r\n            List bucket = (List) buckets.get(key);\r\n            stringSwitchHelper(e, bucket, callback, def, end, 0);\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.goTo(def);\r\n        }\r\n    });\r\n    e.mark(def);\r\n    e.pop();\r\n    callback.processDefault();\r\n    e.mark(end);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#string_switch_trie(CodeEmitter,String[],ObjectSwitchCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#stringSwitchHelper(CodeEmitter,List,ObjectSwitchCallback,Label,Label,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void stringSwitchHelper(final CodeEmitter e, List strings, final ObjectSwitchCallback callback, final Label def, final Label end, final int index) throws Exception {\r\n    final int len = ((String) strings.get(0)).length();\r\n    final Map buckets = CollectionUtils.bucket(strings, value -> ((String) value).charAt(index));\r\n    e.dup();\r\n    e.push(index);\r\n    e.invoke_virtual(Constants.TYPE_STRING, STRING_CHAR_AT);\r\n    e.process_switch(getSwitchKeys(buckets), new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label ignore_end) throws Exception {\r\n            List bucket = (List) buckets.get(key);\r\n            if (index + 1 == len) {\r\n                e.pop();\r\n                callback.processCase(bucket.get(0), end);\r\n            } else {\r\n                stringSwitchHelper(e, bucket, callback, def, end, index + 1);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.goTo(def);\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#stringSwitchHelper(CodeEmitter,List,ObjectSwitchCallback,Label,Label,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#getSwitchKeys(Map)",
    "headType": "method",
    "relation": "provide",
    "tail": "static int[] getSwitchKeys(Map buckets) {\r\n    int[] keys = new int[buckets.size()];\r\n    int index = 0;\r\n    for (Iterator it = buckets.keySet().iterator(); it.hasNext(); ) {\r\n        keys[index++] = ((Integer) it.next());\r\n    }\r\n    Arrays.sort(keys);\r\n    return keys;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.EmitUtils#getSwitchKeys(Map)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.EmitUtils#string_switch_hash(CodeEmitter,String[],ObjectSwitchCallback,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void string_switch_hash(final CodeEmitter e, final String[] strings, final ObjectSwitchCallback callback, final boolean skipEquals) throws Exception {\r\n    final Map buckets = CollectionUtils.bucket(Arrays.asList(strings), value -> value.hashCode());\r\n    final Label def = e.make_label();\r\n    final Label end = e.make_label();\r\n    e.dup();\r\n    e.invoke_virtual(Constants.TYPE_OBJECT, HASH_CODE);\r\n    e.process_switch(getSwitchKeys(buckets), new ProcessSwitchCallback() {\r\n\r\n        @Override\r\n        public void processCase(int key, Label ignore_end) throws Exception {\r\n            List bucket = (List) buckets.get(key);\r\n            Label next = null;\r\n            if (skipEquals && bucket.size() == 1) {\r\n                if (skipEquals) {\r\n                    e.pop();\r\n                }\r\n                callback.processCase(bucket.get(0), end);\r\n            } else {\r\n                for (Iterator it = bucket.iterator(); it.hasNext(); ) {\r\n                    String string = (String) it.next();\r\n                    if (next != null) {\r\n                        e.mark(next);\r\n                    }\r\n                    if (it.hasNext()) {\r\n                        e.dup();\r\n                    }\r\n                    e.push(string);\r\n                    e.invoke_virtual(Constants.TYPE_OBJECT, EQUALS);\r\n                    if (it.hasNext()) {\r\n                        e.if_jump(CodeEmitter.EQ, next = e.make_label());\r\n                        e.pop();\r\n                    } else {\r\n                        e.if_jump(CodeEmitter.EQ, def);\r\n                    }\r\n                    callback.processCase(string, end);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void processDefault() {\r\n            e.pop();\r\n        }\r\n    });\r\n    e.mark(def);\r\n    callback.processDefault();\r\n    e.mark(end);\r\n}",
    "tailType": "method_code"
  }
]