[
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#noDepthBeforeTarget()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#noDepthBeforeHighestDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid noDepthBeforeHighestDepth() {\r\n    Class<? extends Throwable> foundClass = findClosestMatch(NoDepthException.class, HighestDepthException.class);\r\n    assertThat(foundClass).isEqualTo(HighestDepthException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparatorTests#noDepthBeforeHighestDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#noDepthBeforeHighestDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeNoDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid highestDepthBeforeNoDepth() {\r\n    Class<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, NoDepthException.class);\r\n    assertThat(foundClass).isEqualTo(HighestDepthException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeNoDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeNoDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeLowestDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid highestDepthBeforeLowestDepth() {\r\n    Class<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, LowestDepthException.class);\r\n    assertThat(foundClass).isEqualTo(LowestDepthException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeLowestDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#highestDepthBeforeLowestDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#lowestDepthBeforeHighestDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid lowestDepthBeforeHighestDepth() {\r\n    Class<? extends Throwable> foundClass = findClosestMatch(LowestDepthException.class, HighestDepthException.class);\r\n    assertThat(foundClass).isEqualTo(LowestDepthException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparatorTests#lowestDepthBeforeHighestDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#lowestDepthBeforeHighestDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests#findClosestMatch(Class<? extends Throwable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<? extends Throwable> findClosestMatch(Class<? extends Throwable>... classes) {\r\n    return ExceptionDepthComparator.findClosestMatch(Arrays.asList(classes), new TargetException());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparatorTests#findClosestMatch(Class<? extends Throwable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.HighestDepthException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.HighestDepthException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.HighestDepthException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n * @author Chris Shepperd\n */\n@SuppressWarnings(\"unchecked\")\nclass ExceptionDepthComparatorTests {\n\n\t@Test\n\tvoid targetBeforeSameDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(TargetException.class, SameDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(TargetException.class);\n\t}\n\n\t@Test\n\tvoid sameDepthBeforeTarget() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(SameDepthException.class, TargetException.class);\n\t\tassertThat(foundClass).isEqualTo(TargetException.class);\n\t}\n\n\t@Test\n\tvoid lowestDepthBeforeTarget() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(LowestDepthException.class, TargetException.class);\n\t\tassertThat(foundClass).isEqualTo(TargetException.class);\n\t}\n\n\t@Test\n\tvoid targetBeforeLowestDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(TargetException.class, LowestDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(TargetException.class);\n\t}\n\n\t@Test\n\tvoid noDepthBeforeTarget() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(NoDepthException.class, TargetException.class);\n\t\tassertThat(foundClass).isEqualTo(TargetException.class);\n\t}\n\n\t@Test\n\tvoid noDepthBeforeHighestDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(NoDepthException.class, HighestDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(HighestDepthException.class);\n\t}\n\n\t@Test\n\tvoid highestDepthBeforeNoDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, NoDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(HighestDepthException.class);\n\t}\n\n\t@Test\n\tvoid highestDepthBeforeLowestDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(HighestDepthException.class, LowestDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(LowestDepthException.class);\n\t}\n\n\t@Test\n\tvoid lowestDepthBeforeHighestDepth() {\n\t\tClass<? extends Throwable> foundClass = findClosestMatch(LowestDepthException.class, HighestDepthException.class);\n\t\tassertThat(foundClass).isEqualTo(LowestDepthException.class);\n\t}\n\n\tprivate Class<? extends Throwable> findClosestMatch(\n\t\t\tClass<? extends Throwable>... classes) {\n\t\treturn ExceptionDepthComparator.findClosestMatch(Arrays.asList(classes), new TargetException());\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tpublic class HighestDepthException extends Throwable {\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tpublic class LowestDepthException extends HighestDepthException {\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tpublic class TargetException extends LowestDepthException {\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tpublic class SameDepthException extends LowestDepthException {\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tpublic class NoDepthException extends TargetException {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.HighestDepthException",
    "headType": "class",
    "relation": "extend",
    "tail": "Throwable",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.LowestDepthException",
    "tailType": "class"
  }
]