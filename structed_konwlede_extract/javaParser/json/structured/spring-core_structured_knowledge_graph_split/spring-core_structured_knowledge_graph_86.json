[
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference#isPrimitive()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReference",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractTypeReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport example.type.AspectJTypeFilterTestsTypes;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.type.classreading.MetadataReader;\nimport org.springframework.core.type.classreading.MetadataReaderFactory;\nimport org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\nimport org.springframework.core.type.filter.AspectJTypeFilter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Ramnivas Laddad\n * @author Sam Brannen\n * @see AspectJTypeFilterTestsTypes\n */\nclass AspectJTypeFilterTests {\n\n\t@Test\n\tvoid namePatternMatches() throws Exception {\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeClass\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"*\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"*..SomeClass\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"example..SomeClass\");\n\t}\n\n\t@Test\n\tvoid namePatternNoMatches() throws Exception {\n\t\tassertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeClassX\");\n\t}\n\n\t@Test\n\tvoid subclassPatternMatches() throws Exception {\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeClass+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\",\n\t\t\t\t\"*+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\",\n\t\t\t\t\"java.lang.Object+\");\n\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeInterface+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\",\n\t\t\t\t\"*+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\",\n\t\t\t\t\"java.lang.Object+\");\n\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeInterface+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeClass+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"*+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"java.lang.Object+\");\n\t}\n\n\t@Test\n\tvoid subclassPatternNoMatches() throws Exception {\n\t\tassertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\",\n\t\t\t\t\"java.lang.String+\");\n\t}\n\n\t@Test\n\tvoid annotationPatternMatches() throws Exception {\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@org.springframework.core.testfixture.stereotype.Component *..*\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@* *..*\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@*..* *..*\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@*..*Component *..*\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@org.springframework.core.testfixture.stereotype.Component *..*Component\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@org.springframework.core.testfixture.stereotype.Component *\");\n\t}\n\n\t@Test\n\tvoid annotationPatternNoMatches() throws Exception {\n\t\tassertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\",\n\t\t\t\t\"@org.springframework.stereotype.Repository *..*\");\n\t}\n\n\t@Test\n\tvoid compositionPatternMatches() throws Exception {\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"!*..SomeOtherClass\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeInterface+ \" +\n\t\t\t\t\t\t\"&& example.type.AspectJTypeFilterTestsTypes.SomeClass+ \" +\n\t\t\t\t\t\t\"&& example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\n\t\tassertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\",\n\t\t\t\t\"example.type.AspectJTypeFilterTestsTypes.SomeInterface+ \" +\n\t\t\t\t\t\t\"|| example.type.AspectJTypeFilterTestsTypes.SomeClass+ \" +\n\t\t\t\t\t\t\"|| example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\n\t}\n\n\t@Test\n\tvoid compositionPatternNoMatches() throws Exception {\n\t\tassertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\",\n\t\t\t\t\"*..Bogus && example.type.AspectJTypeFilterTestsTypes.SomeClass\");\n\t}\n\n\tprivate void assertMatch(String type, String typePattern) throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type);\n\n\t\tAspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader());\n\t\tassertThat(filter.match(metadataReader, metadataReaderFactory)).isTrue();\n\t\tClassloadingAssertions.assertClassNotLoaded(type);\n\t}\n\n\tprivate void assertNoMatch(String type, String typePattern) throws Exception {\n\t\tMetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n\t\tMetadataReader metadataReader = metadataReaderFactory.getMetadataReader(type);\n\n\t\tAspectJTypeFilter filter = new AspectJTypeFilter(typePattern, getClass().getClassLoader());\n\t\tassertThat(filter.match(metadataReader, metadataReaderFactory)).isFalse();\n\t\tClassloadingAssertions.assertClassNotLoaded(type);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#namePatternMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid namePatternMatches() throws Exception {\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"example.type.AspectJTypeFilterTestsTypes.SomeClass\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"*\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"*..SomeClass\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"example..SomeClass\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#namePatternMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#namePatternMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#namePatternNoMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid namePatternNoMatches() throws Exception {\r\n    assertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClass\", \"example.type.AspectJTypeFilterTestsTypes.SomeClassX\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#namePatternNoMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#namePatternNoMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid subclassPatternMatches() throws Exception {\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\", \"example.type.AspectJTypeFilterTestsTypes.SomeClass+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\", \"*+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\", \"java.lang.Object+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeInterface+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\", \"*+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassImplementingSomeInterface\", \"java.lang.Object+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeInterface+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeClassExtendingSomeClass+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"example.type.AspectJTypeFilterTestsTypes.SomeClass+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"*+\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClassExtendingSomeClassAndImplementingSomeInterface\", \"java.lang.Object+\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternNoMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid subclassPatternNoMatches() throws Exception {\r\n    assertNoMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassExtendingSomeClass\", \"java.lang.String+\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternNoMatches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#subclassPatternNoMatches()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GenerationContext",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.AspectJTypeFilterTests#annotationPatternMatches()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid annotationPatternMatches() throws Exception {\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@org.springframework.core.testfixture.stereotype.Component *..*\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@* *..*\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@*..* *..*\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@*..*Component *..*\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@org.springframework.core.testfixture.stereotype.Component *..*Component\");\r\n    assertMatch(\"example.type.AspectJTypeFilterTestsTypes$SomeClassAnnotatedWithComponent\", \"@org.springframework.core.testfixture.stereotype.Component *\");\r\n}",
    "tailType": "method_code"
  }
]