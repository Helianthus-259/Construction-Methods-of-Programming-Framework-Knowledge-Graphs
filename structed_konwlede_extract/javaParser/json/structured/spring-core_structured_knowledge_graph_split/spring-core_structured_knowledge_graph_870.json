[
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    Collection<?> sourceCollection = (Collection<?>) source;\r\n    // Shortcut if possible...\r\n    boolean copyRequired = !targetType.getType().isInstance(source);\r\n    if (!copyRequired && sourceCollection.isEmpty()) {\r\n        return source;\r\n    }\r\n    TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();\r\n    if (elementDesc == null && !copyRequired) {\r\n        return source;\r\n    }\r\n    // At this point, we need a collection copy in any case, even if just for finding out about element copies...\r\n    Collection<Object> target = CollectionFactory.createCollection(targetType.getType(), (elementDesc != null ? elementDesc.getType() : null), sourceCollection.size());\r\n    if (elementDesc == null) {\r\n        target.addAll(sourceCollection);\r\n    } else {\r\n        for (Object sourceElement : sourceCollection) {\r\n            Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), elementDesc);\r\n            target.add(targetElement);\r\n            if (sourceElement != targetElement) {\r\n                copyRequired = true;\r\n            }\r\n        }\r\n    }\r\n    return (copyRequired ? target : source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToCollectionConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\n\n/**\n * Converts a Collection to an Object by returning the first collection element after converting it to the desired targetType.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class CollectionToObjectConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\tpublic CollectionToObjectConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Collection.class, Object.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, this.conversionService);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (sourceType.isAssignableTo(targetType)) {\n\t\t\treturn source;\n\t\t}\n\t\tCollection<?> sourceCollection = (Collection<?>) source;\n\t\tif (sourceCollection.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tObject firstElement = sourceCollection.iterator().next();\n\t\treturn this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CollectionToObjectConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Collection.class, Object.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToObjectConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToObjectConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    if (sourceType.isAssignableTo(targetType)) {\r\n        return source;\r\n    }\r\n    Collection<?> sourceCollection = (Collection<?>) source;\r\n    if (sourceCollection.isEmpty()) {\r\n        return null;\r\n    }\r\n    Object firstElement = sourceCollection.iterator().next();\r\n    return this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToObjectConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  }
]