[
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingStandardAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-31074\r\n@Test\r\nvoid multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingSimpleAnnotationMetadata() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(MultipleComposedRepeatableAnnotationsClass.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    assertRepeatableAnnotationsSortedByReversedMetaDistance(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingSimpleAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsSortedByReversedMetaDistanceUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-31041\r\n@Test\r\nvoid multipleRepeatableAnnotationsInContainersUsingStandardAnnotationMetadata() {\r\n    AnnotationMetadata metadata = AnnotationMetadata.introspect(MultipleRepeatableAnnotationsInContainersClass.class);\r\n    assertRepeatableAnnotations(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingStandardAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingStandardAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-31041\r\n@Test\r\nvoid multipleRepeatableAnnotationsInContainersUsingSimpleAnnotationMetadata() throws Exception {\r\n    MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\r\n    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(MultipleRepeatableAnnotationsInContainersClass.class.getName());\r\n    AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\r\n    assertRepeatableAnnotations(metadata);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingSimpleAnnotationMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingSimpleAnnotationMetadata()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsUsingAnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tests {@code AnnotatedElementUtils#getMergedRepeatableAnnotations()} variants to ensure that\r\n * {@link AnnotationMetadata#getMergedRepeatableAnnotationAttributes(Class, Class, boolean)}\r\n * behaves the same.\r\n */\r\n// gh-31041\r\n@Test\r\nvoid multipleComposedRepeatableAnnotationsUsingAnnotatedElementUtils() {\r\n    Class<?> element = MultipleComposedRepeatableAnnotationsClass.class;\r\n    Set<TestComponentScan> annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(element, TestComponentScan.class);\r\n    assertRepeatableAnnotations(annotations);\r\n    annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(element, TestComponentScan.class, TestComponentScans.class);\r\n    assertRepeatableAnnotations(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsUsingAnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleComposedRepeatableAnnotationsUsingAnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingAnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tests {@code AnnotatedElementUtils#getMergedRepeatableAnnotations()} variants to ensure that\r\n * {@link AnnotationMetadata#getMergedRepeatableAnnotationAttributes(Class, Class, boolean)}\r\n * behaves the same.\r\n */\r\n// gh-31041\r\n@Test\r\nvoid multipleRepeatableAnnotationsInContainersUsingAnnotatedElementUtils() {\r\n    Class<?> element = MultipleRepeatableAnnotationsInContainersClass.class;\r\n    Set<TestComponentScan> annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(element, TestComponentScan.class);\r\n    assertRepeatableAnnotations(annotations);\r\n    annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(element, TestComponentScan.class, TestComponentScans.class);\r\n    assertRepeatableAnnotations(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingAnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#multipleRepeatableAnnotationsInContainersUsingAnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotations(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertRepeatableAnnotations(AnnotationMetadata metadata) {\r\n    Set<AnnotationAttributes> attributesSet = metadata.getMergedRepeatableAnnotationAttributes(TestComponentScan.class, TestComponentScans.class, true);\r\n    assertThat(attributesSet.stream().map(attributes -> attributes.getStringArray(\"value\")).flatMap(Arrays::stream)).containsExactly(\"A\", \"B\", \"C\", \"D\");\r\n    assertThat(attributesSet.stream().map(attributes -> attributes.getStringArray(\"basePackages\")).flatMap(Arrays::stream)).containsExactly(\"A\", \"B\", \"C\", \"D\");\r\n    assertThat(attributesSet.stream().map(attributes -> attributes.getStringArray(\"basePackageClasses\")).flatMap(Arrays::stream)).containsExactly(\"java.lang.String\", \"java.lang.Integer\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotations(AnnotationMetadata)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.AnnotationMetadataTests#assertRepeatableAnnotationsSortedByReversedMetaDistance(AnnotationMetadata)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void assertRepeatableAnnotationsSortedByReversedMetaDistance(AnnotationMetadata metadata) {\r\n    // Note: although the real @ComponentScan annotation is not looked up using\r\n    // \"sortByReversedMetaDistance\" semantics, we can still use @TestComponentScan\r\n    // to verify the expected behavior.\r\n    Set<AnnotationAttributes> attributesSet = metadata.getMergedRepeatableAnnotationAttributes(TestComponentScan.class, TestComponentScans.class, false, true);\r\n    assertThat(attributesSet.stream().map(attributes -> attributes.getStringArray(\"value\")).flatMap(Arrays::stream)).containsExactly(\"C\", \"D\", \"A\", \"B\");\r\n    assertThat(attributesSet.stream().map(attributes -> attributes.getStringArray(\"basePackages\")).flatMap(Arrays::stream)).containsExactly(\"C\", \"D\", \"A\", \"B\");\r\n}",
    "tailType": "method_code"
  }
]