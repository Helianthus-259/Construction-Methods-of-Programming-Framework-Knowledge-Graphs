[
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithNullInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndNullMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, (String) null)).withMessageContaining(\"Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndNullMessage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message\")).withMessageContaining(\"Custom message: java.lang.Long\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message:\")).withMessageContaining(\"Custom message: Object of class [java.lang.Long] must be an instance of class java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSeparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSpace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithTypeMismatchAndCustomMessageWithSpace() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, 42L, \"Custom message for \")).withMessageContaining(\"Custom message for java.lang.Long\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSpace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithTypeMismatchAndCustomMessageWithSpace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithMessageSupplier() {\r\n    Assert.isInstanceOf(String.class, \"foo\", () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullTypeAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithNullTypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(null, \"foo\", () -> \"enigma\")).withMessageContaining(\"Type to check against must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithNullTypeAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullTypeAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]