[
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {\r\n    this.eventWriter.add(this.eventFactory.createAttribute(new QName(namespaceURI, localName), value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeAttribute(String prefix, String namespaceURI, String localName, String value) throws XMLStreamException {\r\n    this.eventWriter.add(this.eventFactory.createAttribute(prefix, namespaceURI, localName, value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeAttribute(String,String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeNamespace(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeNamespace(String prefix, String namespaceURI) throws XMLStreamException {\r\n    doWriteNamespace(this.eventFactory.createNamespace(prefix, namespaceURI));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeNamespace(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeNamespace(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeDefaultNamespace(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {\r\n    doWriteNamespace(this.eventFactory.createNamespace(namespaceURI));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeDefaultNamespace(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeDefaultNamespace(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#doWriteNamespace(Namespace)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"rawtypes\")\r\nprivate void doWriteNamespace(Namespace namespace) throws XMLStreamException {\r\n    int last = this.endElements.size() - 1;\r\n    EndElement oldEndElement = this.endElements.get(last);\r\n    Iterator oldNamespaces = oldEndElement.getNamespaces();\r\n    List<Namespace> newNamespaces = new ArrayList<>();\r\n    while (oldNamespaces.hasNext()) {\r\n        Namespace oldNamespace = (Namespace) oldNamespaces.next();\r\n        newNamespaces.add(oldNamespace);\r\n    }\r\n    newNamespaces.add(namespace);\r\n    EndElement newEndElement = this.eventFactory.createEndElement(oldEndElement.getName(), newNamespaces.iterator());\r\n    this.eventWriter.add(namespace);\r\n    this.endElements.set(last, newEndElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#doWriteNamespace(Namespace)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#doWriteNamespace(Namespace)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeCharacters(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeCharacters(String text) throws XMLStreamException {\r\n    closeEmptyElementIfNecessary();\r\n    this.eventWriter.add(this.eventFactory.createCharacters(text));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeCharacters(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeCharacters(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#writeCharacters(char[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void writeCharacters(char[] text, int start, int len) throws XMLStreamException {\r\n    closeEmptyElementIfNecessary();\r\n    this.eventWriter.add(this.eventFactory.createCharacters(new String(text, start, len)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#writeCharacters(char[],int,int)",
    "tailType": "method"
  }
]