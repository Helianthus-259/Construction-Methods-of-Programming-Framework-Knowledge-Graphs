[
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withMissingOption()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withMissingOption()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDottedOptionName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDottedOptionName() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"spring.profiles.active\").withRequiredArg();\r\n    OptionSet options = parser.parse(\"--spring.profiles.active=p1\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"spring.profiles.active\")).isEqualTo(\"p1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDottedOptionName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDottedOptionName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.acceptsAll(Arrays.asList(\"o1\", \"option1\")).withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"--o2\");\r\n    EnumerablePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isNull();\r\n    assertThat(ps.getPropertyNames()).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withDefaultNonOptionArgsNameAndNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    assertThat(ps.getProperty(\"nonOptionArgs\")).isEqualTo(\"noa1,noa2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withDefaultNonOptionArgsNameAndNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withCustomNonOptionArgsNameAndNoNonOptionArgsPresent() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg();\r\n    parser.accepts(\"o2\");\r\n    OptionSet optionSet = parser.parse(\"--o1=v1\", \"noa1\", \"--o2\", \"noa2\");\r\n    CommandLinePropertySource<?> ps = new JOptCommandLinePropertySource(optionSet);\r\n    ps.setNonOptionArgsPropertyName(\"NOA\");\r\n    assertThat(ps.containsProperty(\"nonOptionArgs\")).isFalse();\r\n    assertThat(ps.containsProperty(\"NOA\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o1\")).isTrue();\r\n    assertThat(ps.containsProperty(\"o2\")).isTrue();\r\n    String nonOptionArgs = ps.getProperty(\"NOA\");\r\n    assertThat(nonOptionArgs).isEqualTo(\"noa1,noa2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withCustomNonOptionArgsNameAndNoNonOptionArgsPresent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_ofTypeEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withRequiredArg_ofTypeEnum() {\r\n    OptionParser parser = new OptionParser();\r\n    parser.accepts(\"o1\").withRequiredArg().ofType(OptionEnum.class);\r\n    OptionSet options = parser.parse(\"--o1=VAL_1\");\r\n    PropertySource<?> ps = new JOptCommandLinePropertySource(options);\r\n    assertThat(ps.getProperty(\"o1\")).isEqualTo(\"VAL_1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_ofTypeEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySourceTests#withRequiredArg_ofTypeEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.MutablePropertySourcesTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.MutablePropertySourcesTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.Iterator;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.testfixture.env.MockPropertySource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * @author Chris Beams\n * @author Juergen Hoeller\n */\nclass MutablePropertySourcesTests {\n\n\t@Test\n\tvoid test() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addLast(new MockPropertySource(\"b\").withProperty(\"p1\", \"bValue\"));\n\t\tsources.addLast(new MockPropertySource(\"d\").withProperty(\"p1\", \"dValue\"));\n\t\tsources.addLast(new MockPropertySource(\"f\").withProperty(\"p1\", \"fValue\"));\n\n\t\tassertThat(sources).hasSize(3);\n\t\tassertThat(sources.contains(\"a\")).isFalse();\n\t\tassertThat(sources.contains(\"b\")).isTrue();\n\t\tassertThat(sources.contains(\"c\")).isFalse();\n\t\tassertThat(sources.contains(\"d\")).isTrue();\n\t\tassertThat(sources.contains(\"e\")).isFalse();\n\t\tassertThat(sources.contains(\"f\")).isTrue();\n\t\tassertThat(sources.contains(\"g\")).isFalse();\n\n\t\tassertThat(sources.get(\"b\")).isNotNull();\n\t\tassertThat(sources.get(\"b\").getProperty(\"p1\")).isEqualTo(\"bValue\");\n\t\tassertThat(sources.get(\"d\")).isNotNull();\n\t\tassertThat(sources.get(\"d\").getProperty(\"p1\")).isEqualTo(\"dValue\");\n\n\t\tsources.addBefore(\"b\", new MockPropertySource(\"a\"));\n\t\tsources.addAfter(\"b\", new MockPropertySource(\"c\"));\n\n\t\tassertThat(sources).hasSize(5);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\n\n\t\tsources.addBefore(\"f\", new MockPropertySource(\"e\"));\n\t\tsources.addAfter(\"f\", new MockPropertySource(\"g\"));\n\n\t\tassertThat(sources).hasSize(7);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\n\n\t\tsources.addLast(new MockPropertySource(\"a\"));\n\t\tassertThat(sources).hasSize(7);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(2);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(3);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(4);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(5);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(6);\n\n\t\tsources.addFirst(new MockPropertySource(\"a\"));\n\t\tassertThat(sources).hasSize(7);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"d\"))).isEqualTo(3);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"e\"))).isEqualTo(4);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"f\"))).isEqualTo(5);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"g\"))).isEqualTo(6);\n\n\t\tassertThat(PropertySource.named(\"a\")).isEqualTo(sources.remove(\"a\"));\n\t\tassertThat(sources).hasSize(6);\n\t\tassertThat(sources.contains(\"a\")).isFalse();\n\n\t\tassertThat(sources.remove(\"a\")).isNull();\n\t\tassertThat(sources).hasSize(6);\n\n\t\tString bogusPS = \"bogus\";\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> sources.addAfter(bogusPS, new MockPropertySource(\"h\")))\n\t\t\t.withMessageContaining(\"does not exist\");\n\n\t\tsources.addFirst(new MockPropertySource(\"a\"));\n\t\tassertThat(sources).hasSize(7);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\n\n\t\tsources.replace(\"a\", new MockPropertySource(\"a-replaced\"));\n\t\tassertThat(sources).hasSize(7);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"a-replaced\"))).isEqualTo(0);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"b\"))).isEqualTo(1);\n\t\tassertThat(sources.precedenceOf(PropertySource.named(\"c\"))).isEqualTo(2);\n\n\t\tsources.replace(\"a-replaced\", new MockPropertySource(\"a\"));\n\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> sources.replace(bogusPS, new MockPropertySource(\"bogus-replaced\")))\n\t\t\t.withMessageContaining(\"does not exist\");\n\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> sources.addBefore(\"b\", new MockPropertySource(\"b\")))\n\t\t\t.withMessageContaining(\"cannot be added relative to itself\");\n\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> sources.addAfter(\"b\", new MockPropertySource(\"b\")))\n\t\t\t.withMessageContaining(\"cannot be added relative to itself\");\n\t}\n\n\t@Test\n\tvoid getNonExistentPropertySourceReturnsNull() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tassertThat(sources.get(\"bogus\")).isNull();\n\t}\n\n\t@Test\n\tvoid iteratorContainsPropertySource() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addLast(new MockPropertySource(\"test\"));\n\n\t\tIterator<PropertySource<?>> it = sources.iterator();\n\t\tassertThat(it.hasNext()).isTrue();\n\t\tassertThat(it.next().getName()).isEqualTo(\"test\");\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(it::remove);\n\t\tassertThat(it.hasNext()).isFalse();\n\t}\n\n\t@Test\n\tvoid iteratorIsEmptyForEmptySources() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tIterator<PropertySource<?>> it = sources.iterator();\n\t\tassertThat(it.hasNext()).isFalse();\n\t}\n\n\t@Test\n\tvoid streamContainsPropertySource() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tsources.addLast(new MockPropertySource(\"test\"));\n\n\t\tassertThat(sources.stream()).isNotNull();\n\t\tassertThat(sources.stream().count()).isEqualTo(1L);\n\t\tassertThat(sources.stream().anyMatch(source -> \"test\".equals(source.getName()))).isTrue();\n\t\tassertThat(sources.stream().anyMatch(source -> \"bogus\".equals(source.getName()))).isFalse();\n\t}\n\n\t@Test\n\tvoid streamIsEmptyForEmptySources() {\n\t\tMutablePropertySources sources = new MutablePropertySources();\n\t\tassertThat(sources.stream()).isNotNull();\n\t\tassertThat(sources.stream().count()).isEqualTo(0L);\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]