[
  {
    "head": "org.springframework.cglib.core.ReflectUtils#THROWABLE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Throwable",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#PROTECTION_DOMAIN",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#PROTECTION_DOMAIN",
    "headType": "field",
    "relation": "haveType",
    "tail": "ProtectionDomain",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#OBJECT_METHODS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#OBJECT_METHODS",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#generatedClassHandler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#generatedClassHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "BiConsumer<String, byte[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#loadedClassHandler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#loadedClassHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ReflectUtils#CGLIB_PACKAGES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#CGLIB_PACKAGES",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getProtectionDomain(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static ProtectionDomain getProtectionDomain(final Class source) {\r\n    if (source == null) {\r\n        return null;\r\n    }\r\n    return source.getProtectionDomain();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getProtectionDomain(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getExceptionTypes(Member)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Type[] getExceptionTypes(Member member) {\r\n    if (member instanceof Method method) {\r\n        return TypeUtils.getTypes(method.getExceptionTypes());\r\n    } else if (member instanceof Constructor<?> constructor) {\r\n        return TypeUtils.getTypes(constructor.getExceptionTypes());\r\n    } else {\r\n        throw new IllegalArgumentException(\"Cannot get exception types of a field\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getExceptionTypes(Member)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getSignature(Member)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Signature getSignature(Member member) {\r\n    if (member instanceof Method method) {\r\n        return new Signature(member.getName(), Type.getMethodDescriptor(method));\r\n    } else if (member instanceof Constructor<?> constructor) {\r\n        Type[] types = TypeUtils.getTypes(constructor.getParameterTypes());\r\n        return new Signature(Constants.CONSTRUCTOR_NAME, Type.getMethodDescriptor(Type.VOID_TYPE, types));\r\n    } else {\r\n        throw new IllegalArgumentException(\"Cannot get signature of a field\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getSignature(Member)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Constructor findConstructor(String desc) {\r\n    return findConstructor(desc, defaultLoader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findConstructor(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findConstructor(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Constructor findConstructor(String desc, ClassLoader loader) {\r\n    try {\r\n        int lparen = desc.indexOf('(');\r\n        String className = desc.substring(0, lparen).trim();\r\n        return getClass(className, loader).getConstructor(parseTypes(desc, loader));\r\n    } catch (ClassNotFoundException | NoSuchMethodException ex) {\r\n        throw new CodeGenerationException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]