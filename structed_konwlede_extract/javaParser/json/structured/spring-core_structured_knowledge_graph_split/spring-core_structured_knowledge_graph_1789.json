[
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link PackagesAnnotationFilter}.\n *\n * @author Phillip Webb\n */\nclass PackagesAnnotationFilterTests {\n\n\t@Test\n\tvoid createWhenPackagesIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew PackagesAnnotationFilter((String[]) null))\n\t\t\t.withMessage(\"Packages array must not be null\");\n\t}\n\n\t@Test\n\tvoid createWhenPackagesContainsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew PackagesAnnotationFilter((String) null))\n\t\t\t.withMessage(\"Packages array must not have empty elements\");\n\t}\n\n\t@Test\n\tvoid createWhenPackagesContainsEmptyTextThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tnew PackagesAnnotationFilter(\"\"))\n\t\t\t.withMessage(\"Packages array must not have empty elements\");\n\t}\n\n\t@Test\n\tvoid matchesWhenInPackageReturnsTrue() {\n\t\tPackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\n\t\tassertThat(filter.matches(\"com.example.Component\")).isTrue();\n\t}\n\n\t@Test\n\tvoid matchesWhenNotInPackageReturnsFalse() {\n\t\tPackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\n\t\tassertThat(filter.matches(\"org.springframework.stereotype.Component\")).isFalse();\n\t}\n\n\t@Test\n\tvoid matchesWhenInSimilarPackageReturnsFalse() {\n\t\tPackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\n\t\tassertThat(filter.matches(\"com.examples.Component\")).isFalse();\n\t}\n\n\t@Test\n\tvoid equalsAndHashCode() {\n\t\tPackagesAnnotationFilter filter1 = new PackagesAnnotationFilter(\"com.example\",\n\t\t\t\t\"org.springframework\");\n\t\tPackagesAnnotationFilter filter2 = new PackagesAnnotationFilter(\n\t\t\t\t\"org.springframework\", \"com.example\");\n\t\tPackagesAnnotationFilter filter3 = new PackagesAnnotationFilter(\"com.examples\");\n\t\tassertThat(filter1.hashCode()).isEqualTo(filter2.hashCode());\n\t\tassertThat(filter1).isEqualTo(filter1).isEqualTo(filter2).isNotEqualTo(filter3);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenPackagesIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PackagesAnnotationFilter((String[]) null)).withMessage(\"Packages array must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenPackagesContainsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PackagesAnnotationFilter((String) null)).withMessage(\"Packages array must not have empty elements\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsEmptyTextThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenPackagesContainsEmptyTextThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new PackagesAnnotationFilter(\"\")).withMessage(\"Packages array must not have empty elements\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsEmptyTextThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#createWhenPackagesContainsEmptyTextThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInPackageReturnsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesWhenInPackageReturnsTrue() {\r\n    PackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\r\n    assertThat(filter.matches(\"com.example.Component\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInPackageReturnsTrue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInPackageReturnsTrue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenNotInPackageReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesWhenNotInPackageReturnsFalse() {\r\n    PackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\r\n    assertThat(filter.matches(\"org.springframework.stereotype.Component\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenNotInPackageReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenNotInPackageReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInSimilarPackageReturnsFalse()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchesWhenInSimilarPackageReturnsFalse() {\r\n    PackagesAnnotationFilter filter = new PackagesAnnotationFilter(\"com.example\");\r\n    assertThat(filter.matches(\"com.examples.Component\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInSimilarPackageReturnsFalse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.PackagesAnnotationFilterTests#matchesWhenInSimilarPackageReturnsFalse()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]