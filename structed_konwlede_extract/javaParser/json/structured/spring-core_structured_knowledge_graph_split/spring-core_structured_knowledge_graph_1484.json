[
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenPackagePrivateGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenPackagePrivateGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenRecursiveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forResolvableTypeWhenRecursiveType() {\r\n    ResolvableType resolvableType = ResolvableType.forClassWithGenerics(SelfReference.class, SelfReference.class);\r\n    AccessControl accessControl = AccessControl.forResolvableType(resolvableType);\r\n    assertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenRecursiveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#forResolvableTypeWhenRecursiveType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#method(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Method method(Class<?> type, String name, Class<?>... parameterTypes) {\r\n    Method method = ReflectionUtils.findMethod(type, name, parameterTypes);\r\n    assertThat(method).isNotNull();\r\n    return method;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#method(Class<?>,String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests#field(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Field field(Class<?> type, String name) {\r\n    Field field = ReflectionUtils.findField(type, name);\r\n    assertThat(field).isNotNull();\r\n    return field;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.AccessControlTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.AccessControlTests#field(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.SelfReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.SelfReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.AccessControl.Visibility;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.testfixture.aot.generator.visibility.ProtectedGenericParameter;\nimport org.springframework.core.testfixture.aot.generator.visibility.ProtectedParameter;\nimport org.springframework.core.testfixture.aot.generator.visibility.PublicFactoryBean;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link AccessControl}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass AccessControlTests {\n\n\t@Test\n\tvoid isAccessibleWhenPublicVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPublicVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PUBLIC);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenProtectedVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PROTECTED);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenProtectedVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PROTECTED);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPackagePrivateVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PACKAGE_PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isTrue();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPackagePrivateVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PACKAGE_PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPrivateVisibilityInSamePackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(PublicClass.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid isAccessibleWhenPrivateVisibilityInDifferentPackage() {\n\t\tAccessControl accessControl = new AccessControl(PublicClass.class, Visibility.PRIVATE);\n\t\tassertThat(accessControl.isAccessibleFrom(ClassName.get(String.class))).isFalse();\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicConstructor() throws NoSuchMethodException {\n\t\tMember member = PublicClass.class.getConstructor();\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PUBLIC);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateConstructor() {\n\t\tMember member = ProtectedAccessor.class.getDeclaredConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateClassWithPublicConstructor() {\n\t\tMember member = PackagePrivateClass.class.getDeclaredConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPackagePrivateClassWithPublicMethod() {\n\t\tMember member = method(PackagePrivateClass.class, \"stringBean\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateConstructorParameter() {\n\t\tMember member = ProtectedParameter.class.getConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateGenericOnConstructorParameter() {\n\t\tMember member = ProtectedGenericParameter.class.getConstructors()[0];\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethod() {\n\t\tMember member = method(PublicClass.class, \"getProtectedMethod\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethodReturnType() {\n\t\tMember member = method(ProtectedAccessor.class, \"methodWithProtectedReturnType\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateMethodParameter() {\n\t\tMember member = method(ProtectedAccessor.class, \"methodWithProtectedParameter\",\n\t\t\t\tPackagePrivateClass.class);\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateField() {\n\t\tField member = field(PublicClass.class, \"protectedField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPublicFieldAndPackagePrivateFieldType() {\n\t\tMember member = field(PublicClass.class, \"protectedClassField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPrivateField() {\n\t\tMember member = field(PublicClass.class, \"privateField\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPublicMethodAndPackagePrivateGenericOnReturnType() {\n\t\tMember member = method(PublicFactoryBean.class, \"protectedTypeFactoryBean\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forMemberWhenPublicClassWithPackagePrivateArrayComponent() {\n\t\tMember member = field(PublicClass.class, \"packagePrivateClasses\");\n\t\tAccessControl accessControl = AccessControl.forMember(member);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forResolvableTypeWhenPackagePrivateGeneric() {\n\t\tResolvableType resolvableType = PublicFactoryBean\n\t\t\t\t.resolveToProtectedGenericParameter();\n\t\tAccessControl accessControl = AccessControl.forResolvableType(resolvableType);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\t@Test\n\tvoid forResolvableTypeWhenRecursiveType() {\n\t\tResolvableType resolvableType = ResolvableType\n\t\t\t\t.forClassWithGenerics(SelfReference.class, SelfReference.class);\n\t\tAccessControl accessControl = AccessControl.forResolvableType(resolvableType);\n\t\tassertThat(accessControl.getVisibility()).isEqualTo(Visibility.PACKAGE_PRIVATE);\n\t}\n\n\n\tprivate static Method method(Class<?> type, String name, Class<?>... parameterTypes) {\n\t\tMethod method = ReflectionUtils.findMethod(type, name, parameterTypes);\n\t\tassertThat(method).isNotNull();\n\t\treturn method;\n\t}\n\n\tprivate static Field field(Class<?> type, String name) {\n\t\tField field = ReflectionUtils.findField(type, name);\n\t\tassertThat(field).isNotNull();\n\t\treturn field;\n\t}\n\n\tstatic class SelfReference<T extends SelfReference<T>> {\n\n\t\t@SuppressWarnings({ \"unchecked\", \"unused\" })\n\t\tT getThis() {\n\t\t\treturn (T) this;\n\t\t}\n\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.SelfReference#getThis()",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings({ \"unchecked\", \"unused\" })\r\nT getThis() {\r\n    return (T) this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.SelfReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.SelfReference#getThis()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.SelfReference#getThis()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.InputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.javapoet.ClassName;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link ClassNameGenerator}.\n *\n * @author Phillip Webb\n */\nclass ClassNameGeneratorTests {\n\n\tprivate static final ClassName TEST_TARGET = ClassName.get(\"com.example\", \"Test\");\n\n\tprivate final ClassNameGenerator generator = new ClassNameGenerator(TEST_TARGET);\n\n\t@Test\n\tvoid generateClassNameWhenTargetClassIsNullUsesMainTarget() {\n\t\tClassName generated = this.generator.generateClassName(\"test\", null);\n\t\tassertThat(generated).hasToString(\"com.example.Test__Test\");\n\t}\n\n\t@Test\n\tvoid generateClassNameUseFeatureNamePrefix() {\n\t\tClassName generated = new ClassNameGenerator(TEST_TARGET, \"One\")\n\t\t\t\t.generateClassName(\"test\", ClassName.get(InputStream.class));\n\t\tassertThat(generated).hasToString(\"java.io.InputStream__OneTest\");\n\t}\n\n\t@Test\n\tvoid generateClassNameWithNoTextFeatureNamePrefix() {\n\t\tClassName generated = new ClassNameGenerator(TEST_TARGET, \"  \")\n\t\t\t\t.generateClassName(\"test\", ClassName.get(InputStream.class));\n\t\tassertThat(generated).hasToString(\"java.io.InputStream__Test\");\n\t}\n\n\t@Test\n\tvoid generatedClassNameWhenFeatureIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generator.generateClassName(\"\", ClassName.get(InputStream.class)))\n\t\t\t\t.withMessage(\"'featureName' must not be empty\");\n\t}\n\n\t@Test\n\tvoid generatedClassNameWhenFeatureIsNotAllLettersThrowsException() {\n\t\tassertThat(this.generator.generateClassName(\"name!\", ClassName.get(InputStream.class)))\n\t\t\t\t.hasToString(\"java.io.InputStream__Name\");\n\t\tassertThat(this.generator.generateClassName(\"1NameHere\", ClassName.get(InputStream.class)))\n\t\t\t\t.hasToString(\"java.io.InputStream__NameHere\");\n\t\tassertThat(this.generator.generateClassName(\"Y0pe\", ClassName.get(InputStream.class)))\n\t\t\t\t.hasToString(\"java.io.InputStream__YPe\");\n\t}\n\n\t@Test\n\tvoid generateClassNameWithClassWhenLowercaseFeatureNameGeneratesName() {\n\t\tClassName generated = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\n\t\tassertThat(generated).hasToString(\"java.io.InputStream__Bytes\");\n\t}\n\n\t@Test\n\tvoid generateClassNameWithClassWhenInnerClassGeneratesName() {\n\t\tClassName innerBean = ClassName.get(\"com.example\", \"Test\", \"InnerBean\");\n\t\tClassName generated = this.generator.generateClassName(\"EventListener\", innerBean);\n\t\tassertThat(generated)\n\t\t\t\t.hasToString(\"com.example.Test_InnerBean__EventListener\");\n\t}\n\n\t@Test\n\tvoid generateClassWithClassWhenMultipleCallsGeneratesSequencedName() {\n\t\tClassName generated1 = this.generator.generateClassName(\"bytes\",ClassName.get(InputStream.class));\n\t\tClassName generated2 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\n\t\tClassName generated3 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\n\t\tassertThat(generated1).hasToString(\"java.io.InputStream__Bytes\");\n\t\tassertThat(generated2).hasToString(\"java.io.InputStream__Bytes1\");\n\t\tassertThat(generated3).hasToString(\"java.io.InputStream__Bytes2\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#TEST_TARGET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#TEST_TARGET",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generator",
    "tailType": "field"
  }
]