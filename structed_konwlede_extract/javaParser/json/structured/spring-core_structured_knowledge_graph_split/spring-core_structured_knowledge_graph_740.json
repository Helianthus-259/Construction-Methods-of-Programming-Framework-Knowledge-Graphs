[
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the annotated method.\r\n */\r\npublic final Method getMethod() {\r\n    return this.method;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getBridgedMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If the annotated method is a bridge method, this method returns the bridged\r\n * (user-defined) method. Otherwise, it returns the same method as {@link #getMethod()}.\r\n */\r\nprotected final Method getBridgedMethod() {\r\n    return this.bridgedMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getBridgedMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getContainingClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Expose the containing class for method parameters.\r\n * @see MethodParameter#getContainingClass()\r\n */\r\nprotected Class<?> getContainingClass() {\r\n    return this.method.getDeclaringClass();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getContainingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getMethodParameters()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the method parameters for this {@code AnnotatedMethod}.\r\n */\r\npublic final MethodParameter[] getMethodParameters() {\r\n    return this.parameters;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getMethodParameters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#initMethodParameters()",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodParameter[] initMethodParameters() {\r\n    int count = this.bridgedMethod.getParameterCount();\r\n    MethodParameter[] result = new MethodParameter[count];\r\n    for (int i = 0; i < count; i++) {\r\n        result[i] = new AnnotatedMethodParameter(i);\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#initMethodParameters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getReturnType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link MethodParameter} for the declared return type.\r\n */\r\npublic MethodParameter getReturnType() {\r\n    return new AnnotatedMethodParameter(-1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getReturnType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getReturnValueType(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link MethodParameter} for the actual return value type.\r\n */\r\npublic MethodParameter getReturnValueType(@Nullable Object returnValue) {\r\n    return new ReturnValueMethodParameter(returnValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getReturnValueType(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#isVoid()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if the method's return type is void, {@code false} otherwise.\r\n */\r\npublic boolean isVoid() {\r\n    return (getReturnType().getParameterType() == void.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#isVoid()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a single annotation on the underlying method, traversing its super methods\r\n * if no annotation can be found on the given method itself.\r\n * <p>Supports <em>merged</em> composed annotations with attribute overrides.\r\n * @param annotationType the annotation type to look for\r\n * @return the annotation, or {@code null} if none found\r\n * @see AnnotatedElementUtils#findMergedAnnotation\r\n */\r\n@Nullable\r\npublic <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {\r\n    return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedMethod#getMethodAnnotation(Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#getMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedMethod#hasMethodAnnotation(Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine if an annotation of the given type is <em>present</em> or\r\n * <em>meta-present</em> on the method.\r\n * @param annotationType the annotation type to look for\r\n * @see AnnotatedElementUtils#hasAnnotation\r\n */\r\npublic <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {\r\n    return AnnotatedElementUtils.hasAnnotation(this.method, annotationType);\r\n}",
    "tailType": "method_code"
  }
]