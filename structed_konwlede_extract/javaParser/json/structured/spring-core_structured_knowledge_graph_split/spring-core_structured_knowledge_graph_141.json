[
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessage() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message\")).withMessageContaining(\"Custom message: class java.lang.Integer\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSeparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessageWithSeparator() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message:\")).withMessageContaining(\"Custom message: class java.lang.Integer is not assignable to class java.lang.String\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSeparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSeparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSpace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndCustomMessageWithSpace() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, \"Custom message for \")).withMessageContaining(\"Custom message for class java.lang.Integer\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSpace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndCustomMessageWithSpace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithMessageSupplier() {\r\n    Assert.isAssignable(Number.class, Integer.class, () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSupertypeAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithNullSupertypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(null, Integer.class, () -> \"enigma\")).withMessageContaining(\"Supertype to check against must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithNullSupertypeAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSupertypeAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSubtypeAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithNullSubtypeAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(Integer.class, null, () -> \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithNullSubtypeAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithNullSubtypeAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, (Supplier<String>) null)).withMessageContaining(\"class java.lang.Integer is not assignable to class java.lang.String\");\r\n}",
    "tailType": "method_code"
  }
]