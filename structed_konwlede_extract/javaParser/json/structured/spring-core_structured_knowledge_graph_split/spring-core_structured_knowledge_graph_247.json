[
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#resourceLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#resourceLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#loadClass(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\r\n    synchronized (getClassLoadingLock(name)) {\r\n        Class<?> loaded = findLoadedClass(name);\r\n        if (loaded != null) {\r\n            return loaded;\r\n        }\r\n        try {\r\n            return super.loadClass(name, true);\r\n        } catch (ClassNotFoundException ex) {\r\n            return loadClassFromResource(name);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#loadClass(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#loadClass(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#loadClassFromResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<?> loadClassFromResource(String name) throws ClassNotFoundException, ClassFormatError {\r\n    String resourceName = name.replace('.', '/') + \".class\";\r\n    InputStream inputStream = this.resourceLoader.getResourceAsStream(resourceName);\r\n    if (inputStream == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        inputStream.transferTo(outputStream);\r\n        byte[] bytes = outputStream.toByteArray();\r\n        return defineClass(name, bytes, 0, bytes.length);\r\n    } catch (IOException ex) {\r\n        throw new ClassNotFoundException(\"Cannot load resource for class [\" + name + \"]\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#loadClassFromResource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#findResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected URL findResource(String name) {\r\n    return this.resourceLoader.getResource(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#findResource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader#findResource(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.feature.ThrowawayClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.LinkedMultiValueMapTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n */\nclass LinkedMultiValueMapTests {\n\n\tprivate final LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n\n\n\t@Test\n\tvoid add() {\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.add(\"key\", \"value2\");\n\t\tassertThat(map).hasSize(1);\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\");\n\t}\n\n\t@Test\n\tvoid addIfAbsentWhenAbsent() {\n\t\tmap.addIfAbsent(\"key\", \"value1\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\");\n\t}\n\n\t@Test\n\tvoid addIfAbsentWhenPresent() {\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.addIfAbsent(\"key\", \"value2\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\");\n\t}\n\n\t@Test\n\tvoid set() {\n\t\tmap.set(\"key\", \"value1\");\n\t\tmap.set(\"key\", \"value2\");\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value2\");\n\t}\n\n\t@Test\n\tvoid addAll() {\n\t\tmap.add(\"key\", \"value1\");\n\t\tmap.addAll(\"key\", Arrays.asList(\"value2\", \"value3\"));\n\t\tassertThat(map).hasSize(1);\n\t\tassertThat(map.get(\"key\")).containsExactly(\"value1\",\"value2\",\"value3\");\n\t}\n\n\t@Test\n\tvoid addAllWithEmptyList() {\n\t\tmap.addAll(\"key\", Collections.emptyList());\n\t\tassertThat(map).hasSize(1);\n\t\tassertThat(map.get(\"key\")).isEmpty();\n\t\tassertThat(map.getFirst(\"key\")).isNull();\n\t}\n\n\t@Test\n\tvoid getFirst() {\n\t\tList<String> values = new ArrayList<>(2);\n\t\tvalues.add(\"value1\");\n\t\tvalues.add(\"value2\");\n\t\tmap.put(\"key\", values);\n\t\tassertThat(map.getFirst(\"key\")).isEqualTo(\"value1\");\n\t\tassertThat(map.getFirst(\"other\")).isNull();\n\t}\n\n\t@Test\n\tvoid getFirstWithEmptyList() {\n\t\tmap.put(\"key\", Collections.emptyList());\n\t\tassertThat(map.getFirst(\"key\")).isNull();\n\t\tassertThat(map.getFirst(\"other\")).isNull();\n\t}\n\n\t@Test\n\tvoid toSingleValueMap() {\n\t\tList<String> values = new ArrayList<>(2);\n\t\tvalues.add(\"value1\");\n\t\tvalues.add(\"value2\");\n\t\tmap.put(\"key\", values);\n\t\tMap<String, String> singleValueMap = map.toSingleValueMap();\n\t\tassertThat(singleValueMap).hasSize(1);\n\t\tassertThat(singleValueMap.get(\"key\")).isEqualTo(\"value1\");\n\t}\n\n\t@Test\n\tvoid toSingleValueMapWithEmptyList() {\n\t\tmap.put(\"key\", Collections.emptyList());\n\t\tMap<String, String> singleValueMap = map.toSingleValueMap();\n\t\tassertThat(singleValueMap).isEmpty();\n\t\tassertThat(singleValueMap.get(\"key\")).isNull();\n\t}\n\n\t@Test\n\tvoid equals() {\n\t\tmap.set(\"key1\", \"value1\");\n\t\tassertThat(map).isEqualTo(map);\n\t\tMultiValueMap<String, String> o1 = new LinkedMultiValueMap<>();\n\t\to1.set(\"key1\", \"value1\");\n\t\tassertThat(o1).isEqualTo(map);\n\t\tassertThat(map).isEqualTo(o1);\n\t\tMap<String, List<String>> o2 = new HashMap<>();\n\t\to2.put(\"key1\", Collections.singletonList(\"value1\"));\n\t\tassertThat(o2).isEqualTo(map);\n\t\tassertThat(map).isEqualTo(o2);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.LinkedMultiValueMapTests#map",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#map",
    "headType": "field",
    "relation": "haveType",
    "tail": "LinkedMultiValueMap<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#add()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid add() {\r\n    map.add(\"key\", \"value1\");\r\n    map.add(\"key\", \"value2\");\r\n    assertThat(map).hasSize(1);\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\", \"value2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedMultiValueMapTests#add()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#add()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedMultiValueMapTests#addIfAbsentWhenAbsent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addIfAbsentWhenAbsent() {\r\n    map.addIfAbsent(\"key\", \"value1\");\r\n    assertThat(map.get(\"key\")).containsExactly(\"value1\");\r\n}",
    "tailType": "method_code"
  }
]