[
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenPathIsOutsideOfRootThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addFileWhenPathIsOutsideOfRootThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    assertPathMustBeRelative(generatedFiles, \"/test\");\r\n    assertPathMustBeRelative(generatedFiles, \"../test\");\r\n    assertPathMustBeRelative(generatedFiles, \"test/../../test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenPathIsOutsideOfRootThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenPathIsOutsideOfRootThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenFileAlreadyAddedThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addFileWhenFileAlreadyAddedThrowsException() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\")).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenFileAlreadyAddedThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#addFileWhenFileAlreadyAddedThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsProvidesFileHandler()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsProvidesFileHandler() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/test\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        assertThat(handler.exists()).isTrue();\r\n        assertThat(handler.getContent()).isNotNull();\r\n        assertThat(handler.getContent().getInputStream()).hasContent(\"test\");\r\n    });\r\n    assertThat(this.root.resolve(\"resources/META-INF/test\")).content().isEqualTo(\"test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsProvidesFileHandler()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsProvidesFileHandler()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsFailsToCreate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsFailsToCreate() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    ThrowingConsumer<FileHandler> consumer = handler -> handler.create(new ByteArrayResource(\"should fail\".getBytes(StandardCharsets.UTF_8)));\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", consumer)).withMessageContainingAll(\"META-INF\", \"mydir\", \"already exists\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsFailsToCreate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsFailsToCreate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsCanOverrideContent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsCanOverrideContent() {\r\n    FileSystemGeneratedFiles generatedFiles = new FileSystemGeneratedFiles(this.root);\r\n    generatedFiles.addResourceFile(\"META-INF/mydir\", \"test\");\r\n    generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/mydir\", handler -> handler.override(new ByteArrayResource(\"overridden\".getBytes(StandardCharsets.UTF_8))));\r\n    assertThat(this.root.resolve(\"resources/META-INF/mydir\")).content().isEqualTo(\"overridden\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsCanOverrideContent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#handleFileWhenFileExistsCanOverrideContent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#assertPathMustBeRelative(FileSystemGeneratedFiles,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertPathMustBeRelative(FileSystemGeneratedFiles generatedFiles, String path) {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> generatedFiles.addResourceFile(path, \"test\")).withMessage(\"'path' must be relative\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.FileSystemGeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.FileSystemGeneratedFilesTests#assertPathMustBeRelative(FileSystemGeneratedFiles,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.GeneratedClassesTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassesTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.GeneratedFiles.Kind;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\n\n/**\n * Tests for {@link GeneratedClasses}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass GeneratedClassesTests {\n\n\tprivate static final Consumer<TypeSpec.Builder> emptyTypeCustomizer = type -> {};\n\n\tprivate final GeneratedClasses generatedClasses = new GeneratedClasses(\n\t\t\tnew ClassNameGenerator(ClassName.get(\"com.example\", \"Test\")));\n\n\t@Test\n\tvoid createWhenClassNameGeneratorIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> new GeneratedClasses(null))\n\t\t\t\t.withMessage(\"'classNameGenerator' must not be null\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWhenFeatureNameIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses.addForFeatureComponent(\"\",\n\t\t\t\t\t\tTestComponent.class, emptyTypeCustomizer))\n\t\t\t\t.withMessage(\"'featureName' must not be empty\");\n\t}\n\n\t@Test\n\tvoid addForFeatureWhenFeatureNameIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses.addForFeature(\"\", emptyTypeCustomizer))\n\t\t\t\t.withMessage(\"'featureName' must not be empty\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWhenTypeSpecCustomizerIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedClasses\n\t\t\t\t\t\t.addForFeatureComponent(\"test\", TestComponent.class, null))\n\t\t\t\t.withMessage(\"'type' must not be null\");\n\t}\n\n\t@Test\n\tvoid addForFeatureUsesDefaultTarget() {\n\t\tGeneratedClass generatedClass = this.generatedClasses.addForFeature(\"Test\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass.getName()).hasToString(\"com.example.Test__Test\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentUsesTarget() {\n\t\tGeneratedClass generatedClass = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"Test\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass.getName().toString()).endsWith(\"TestComponent__Test\");\n\t}\n\n\t@Test\n\tvoid addForFeatureComponentWithSameNameReturnsDifferentInstances() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotSameAs(generatedClass2);\n\t\tassertThat(generatedClass1.getName().simpleName()).endsWith(\"__One\");\n\t\tassertThat(generatedClass2.getName().simpleName()).endsWith(\"__One1\");\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenNewReturnsGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"two\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\n\t\tassertThat(generatedClass2).isNotNull();\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureWhenNewReturnsGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"two\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isNotEqualTo(generatedClass2);\n\t\tassertThat(generatedClass2).isNotNull();\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenRepeatReturnsSameGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = this.generatedClasses\n\t\t\t\t.getOrAddForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isSameAs(generatedClass2)\n\t\t\t\t.isSameAs(generatedClass3);\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureWhenRepeatReturnsSameGeneratedClass() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = this.generatedClasses\n\t\t\t\t.getOrAddForFeature(\"one\", emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isNotNull().isSameAs(generatedClass2)\n\t\t\t\t.isSameAs(generatedClass3);\n\t}\n\n\t@Test\n\tvoid getOrAddForFeatureComponentWhenHasFeatureNamePrefix() {\n\t\tGeneratedClasses prefixed = this.generatedClasses.withFeatureNamePrefix(\"prefix\");\n\t\tGeneratedClass generatedClass1 = this.generatedClasses.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass3 = prefixed.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass4 = prefixed.getOrAddForFeatureComponent(\n\t\t\t\t\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1).isSameAs(generatedClass2).isNotSameAs(generatedClass3);\n\t\tassertThat(generatedClass3).isSameAs(generatedClass4);\n\t}\n\n\t@Test\n\tvoid writeToInvokeTypeSpecCustomizer() {\n\t\tConsumer<TypeSpec.Builder> typeSpecCustomizer = mock();\n\t\tthis.generatedClasses.addForFeatureComponent(\"one\", TestComponent.class, typeSpecCustomizer);\n\t\tverifyNoInteractions(typeSpecCustomizer);\n\t\tInMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n\t\tthis.generatedClasses.writeTo(generatedFiles);\n\t\tverify(typeSpecCustomizer).accept(any());\n\t\tassertThat(generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(1);\n\t}\n\n\t@Test\n\tvoid withNameUpdatesNamingConventions() {\n\t\tGeneratedClass generatedClass1 = this.generatedClasses\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tGeneratedClass generatedClass2 = this.generatedClasses.withFeatureNamePrefix(\"Another\")\n\t\t\t\t.addForFeatureComponent(\"one\", TestComponent.class, emptyTypeCustomizer);\n\t\tassertThat(generatedClass1.getName().toString()).endsWith(\"TestComponent__One\");\n\t\tassertThat(generatedClass2.getName().toString()).endsWith(\"TestComponent__AnotherOne\");\n\t}\n\n\n\tprivate static class TestComponent {\n\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]