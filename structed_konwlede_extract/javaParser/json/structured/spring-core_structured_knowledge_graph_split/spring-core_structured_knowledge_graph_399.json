[
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "provide",
    "tail": "// ASM: a very small and fast Java bytecode manipulation framework\n// Copyright (c) 2000-2011 INRIA, France Telecom\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// 1. Redistributions of source code must retain the above copyright\n//    notice, this list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n// 3. Neither the name of the copyright holders nor the names of its\n//    contributors may be used to endorse or promote products derived from\n//    this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n// THE POSSIBILITY OF SUCH DAMAGE.\npackage org.springframework.asm;\n\n/**\n * An edge in the control flow graph of a method. Each node of this graph is a basic block,\n * represented with the Label corresponding to its first instruction. Each edge goes from one node\n * to another, i.e. from one basic block to another (called the predecessor and successor blocks,\n * respectively). An edge corresponds either to a jump or ret instruction or to an exception\n * handler.\n *\n * @see Label\n * @author Eric Bruneton\n */\nfinal class Edge {\n\n  /**\n   * A control flow graph edge corresponding to a jump or ret instruction. Only used with {@link\n   * ClassWriter#COMPUTE_FRAMES}.\n   */\n  static final int JUMP = 0;\n\n  /**\n   * A control flow graph edge corresponding to an exception handler. Only used with {@link\n   * ClassWriter#COMPUTE_MAXS}.\n   */\n  static final int EXCEPTION = 0x7FFFFFFF;\n\n  /**\n   * Information about this control flow graph edge.\n   *\n   * <ul>\n   *   <li>If {@link ClassWriter#COMPUTE_MAXS} is used, this field contains either a stack size\n   *       delta (for an edge corresponding to a jump instruction), or the value EXCEPTION (for an\n   *       edge corresponding to an exception handler). The stack size delta is the stack size just\n   *       after the jump instruction, minus the stack size at the beginning of the predecessor\n   *       basic block, i.e. the one containing the jump instruction.\n   *   <li>If {@link ClassWriter#COMPUTE_FRAMES} is used, this field contains either the value JUMP\n   *       (for an edge corresponding to a jump instruction), or the index, in the {@link\n   *       ClassWriter} type table, of the exception type that is handled (for an edge corresponding\n   *       to an exception handler).\n   * </ul>\n   */\n  final int info;\n\n  /** The successor block of this control flow graph edge. */\n  final Label successor;\n\n  /**\n   * The next edge in the list of outgoing edges of a basic block. See {@link Label#outgoingEdges}.\n   */\n  Edge nextEdge;\n\n  /**\n   * Constructs a new Edge.\n   *\n   * @param info see {@link #info}.\n   * @param successor see {@link #successor}.\n   * @param nextEdge see {@link #nextEdge}.\n   */\n  Edge(final int info, final Label successor, final Edge nextEdge) {\n    this.info = info;\n    this.successor = successor;\n    this.nextEdge = nextEdge;\n  }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Edge#JUMP",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Edge#JUMP",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Edge#EXCEPTION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Edge#EXCEPTION",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Edge#info",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Edge#info",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Edge#successor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Edge#successor",
    "headType": "field",
    "relation": "haveType",
    "tail": "Label",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.Edge",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.Edge#nextEdge",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.Edge#nextEdge",
    "headType": "field",
    "relation": "haveType",
    "tail": "Edge",
    "tailType": "type"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.DomUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.List;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link DomUtils}.\n *\n * @author Stephane Nicoll\n * @author Kunal Jani\n */\nclass DomUtilsTests {\n\n\tprivate static final Element SCHOOL_ELEMENT = getDocumentElement(\"\"\"\n\t\t\t<?xml version=\"1.0\"?>\n\t\t\t<school>TestSchool\n\t\t\t\t<class teacher=\"Happy Teacher\">Test Teacher One</class>\n\t\t\t\t<class teacher=\"Sad Teacher\">Test Teacher Two</class>\n\t\t\t\t<principal>Test Principal</principal>\n\t\t\t\t<guard>Fox Test</guard>\n\t\t\t</school>\"\"\");\n\n\n\t@Test\n\tvoid getChildElementsByTagNameWithSeveralMatchingTags() {\n\t\tList<Element> childElements = DomUtils.getChildElementsByTagName(SCHOOL_ELEMENT, \"class\", \"principal\");\n\t\tassertThat(childElements).map(Element::getNodeName).containsExactly(\"class\", \"class\", \"principal\");\n\t}\n\n\t@Test\n\tvoid getChildElementsByTagNameWhenTagDoesNotExist() {\n\t\tassertThat(DomUtils.getChildElementsByTagName(SCHOOL_ELEMENT, \"teacher\")).isEmpty();\n\t}\n\n\t@Test\n\tvoid getChildElementByTagNameWithMatchingTag() {\n\t\tElement principalElement = DomUtils.getChildElementByTagName(SCHOOL_ELEMENT, \"principal\");\n\t\tassertThat(principalElement).isNotNull();\n\t\tassertThat(principalElement.getTextContent()).isEqualTo(\"Test Principal\");\n\t}\n\n\t@Test\n\tvoid getChildElementByTagNameWithNonMatchingTag() {\n\t\tassertThat(DomUtils.getChildElementByTagName(SCHOOL_ELEMENT, \"teacher\")).isNull();\n\t}\n\n\t@Test\n\tvoid getChildElementValueByTagName() {\n\t\tassertThat(DomUtils.getChildElementValueByTagName(SCHOOL_ELEMENT, \"guard\")).isEqualTo(\"Fox Test\");\n\t}\n\n\t@Test\n\tvoid getChildElementValueByTagNameWithNonMatchingTag() {\n\t\tassertThat(DomUtils.getChildElementValueByTagName(SCHOOL_ELEMENT, \"math tutor\")).isNull();\n\t}\n\n\t@Test\n\tvoid getChildElements() {\n\t\tList<Element> childElements = DomUtils.getChildElements(SCHOOL_ELEMENT);\n\t\tassertThat(childElements).map(Element::getNodeName).containsExactly(\"class\", \"class\", \"principal\", \"guard\");\n\t}\n\n\t@Test\n\tvoid getTextValueWithCharacterDataNode() {\n\t\tassertThat(DomUtils.getTextValue(SCHOOL_ELEMENT)).isEqualToIgnoringWhitespace(\"TestSchool\");\n\t}\n\n\t@Test\n\tvoid getTextValueWithCommentInXml() {\n\t\tElement elementWithComment = getDocumentElement(\"\"\"\n\t\t\t\t<?xml version=\"1.0\"?>\n\t\t\t\t<state>\n\t\t\t\t\t<!-- This is a comment -->\n\t\t\t\t\t<person>Alice</person>\n\t\t\t\t</state>\"\"\");\n\t\tassertThat(DomUtils.getTextValue(elementWithComment)).isBlank();\n\t}\n\n\t@Test\n\tvoid getTextValueWithEntityReference() {\n\t\tElement elementWithEntityReference = getDocumentElement(\"\"\"\n\t\t\t\t<?xml version=\"1.0\"?>\n\t\t\t\t<state>\n\t\t\t\t\t&amp;\n\t\t\t\t\t<person>Alice</person>\n\t\t\t\t</state>\"\"\");\n\t\tassertThat(DomUtils.getTextValue(elementWithEntityReference)).contains(\"&\");\n\t}\n\n\t@Test\n\tvoid getTextValueWithEmptyElement() {\n\t\tElement emptyElement = getDocumentElement(\"\"\"\n\t\t\t\t<?xml version=\"1.0\"?>\n\t\t\t\t<person></person>\"\"\");\n\t\tassertThat(DomUtils.getTextValue(emptyElement)).isBlank();\n\t}\n\n\t@Test\n\tvoid nodeNameEqualsWhenTrue() {\n\t\tassertThat(DomUtils.nodeNameEquals(SCHOOL_ELEMENT, \"school\")).isTrue();\n\t}\n\n\t@Test\n\tvoid nodeNameEqualsWhenFalse() {\n\t\tassertThat(DomUtils.nodeNameEquals(SCHOOL_ELEMENT, \"college\")).isFalse();\n\t}\n\n\n\tprivate static Element getDocumentElement(String xmlContent) {\n\t\ttry {\n\t\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t\t\tDocument document = documentBuilder.parse(new ByteArrayInputStream(xmlContent.getBytes()));\n\t\t\treturn document.getDocumentElement();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to parse xml content:%n%s\".formatted(xmlContent), ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.DomUtilsTests#SCHOOL_ELEMENT",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#SCHOOL_ELEMENT",
    "headType": "field",
    "relation": "haveType",
    "tail": "Element",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWithSeveralMatchingTags()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementsByTagNameWithSeveralMatchingTags() {\r\n    List<Element> childElements = DomUtils.getChildElementsByTagName(SCHOOL_ELEMENT, \"class\", \"principal\");\r\n    assertThat(childElements).map(Element::getNodeName).containsExactly(\"class\", \"class\", \"principal\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWithSeveralMatchingTags()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWithSeveralMatchingTags()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.DomUtilsTests#getChildElementsByTagNameWhenTagDoesNotExist()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getChildElementsByTagNameWhenTagDoesNotExist() {\r\n    assertThat(DomUtils.getChildElementsByTagName(SCHOOL_ELEMENT, \"teacher\")).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]