[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer allocateBuffer(int initialCapacity) {\r\n    ByteBuffer byteBuffer = (this.preferDirect ? ByteBuffer.allocateDirect(initialCapacity) : ByteBuffer.allocate(initialCapacity));\r\n    return DefaultDataBuffer.fromEmptyByteBuffer(this, byteBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#allocateBuffer(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer wrap(ByteBuffer byteBuffer) {\r\n    return DefaultDataBuffer.fromFilledByteBuffer(this, byteBuffer.slice());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer wrap(byte[] bytes) {\r\n    return DefaultDataBuffer.fromFilledByteBuffer(this, ByteBuffer.wrap(bytes));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#wrap(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * {@inheritDoc}\r\n * <p>This implementation creates a single {@link DefaultDataBuffer}\r\n * to contain the data in {@code dataBuffers}.\r\n */\r\n@Override\r\npublic DefaultDataBuffer join(List<? extends DataBuffer> dataBuffers) {\r\n    Assert.notEmpty(dataBuffers, \"DataBuffer List must not be empty\");\r\n    int capacity = dataBuffers.stream().mapToInt(DataBuffer::readableByteCount).sum();\r\n    DefaultDataBuffer result = allocateBuffer(capacity);\r\n    dataBuffers.forEach(result::write);\r\n    dataBuffers.forEach(DataBufferUtils::release);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#join(List<? extends DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#join(List<? extends DataBuffer>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDirect() {\r\n    return this.preferDirect;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#isDirect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#isDirect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"DefaultDataBufferFactory (preferDirect=\" + this.preferDirect + \")\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBufferFactory#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBufferFactory#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]