[
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ParsedProfiles#wrap(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.PropertiesPropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.PropertiesPropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * {@link PropertySource} implementation that extracts properties from a\n * {@link java.util.Properties} object.\n *\n * <p>Note that because a {@code Properties} object is technically an\n * {@code <Object, Object>} {@link java.util.Hashtable Hashtable}, one may contain\n * non-{@code String} keys or values. This implementation, however is restricted to\n * accessing only {@code String}-based keys and values, in the same fashion as\n * {@link Properties#getProperty} and {@link Properties#setProperty}.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n */\npublic class PropertiesPropertySource extends MapPropertySource {\n\n\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tpublic PropertiesPropertySource(String name, Properties source) {\n\t\tsuper(name, (Map) source);\n\t}\n\n\tprotected PropertiesPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\tsynchronized (this.source) {\n\t\t\treturn ((Map<?, ?>) this.source).keySet().stream().filter(k -> k instanceof String).toArray(String[]::new);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.PropertiesPropertySource#getPropertyNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String[] getPropertyNames() {\r\n    synchronized (this.source) {\r\n        return ((Map<?, ?>) this.source).keySet().stream().filter(k -> k instanceof String).toArray(String[]::new);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertiesPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertiesPropertySource#getPropertyNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertiesPropertySource#getPropertyNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertiesPropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "MapPropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.PropertyResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Interface for resolving properties against any underlying source.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @since 3.1\n * @see Environment\n * @see PropertySourcesPropertyResolver\n */\npublic interface PropertyResolver {\n\n\t/**\n\t * Return whether the given property key is available for resolution,\n\t * i.e. if the value for the given key is not {@code null}.\n\t */\n\tboolean containsProperty(String key);\n\n\t/**\n\t * Return the property value associated with the given key,\n\t * or {@code null} if the key cannot be resolved.\n\t * @param key the property name to resolve\n\t * @see #getProperty(String, String)\n\t * @see #getProperty(String, Class)\n\t * @see #getRequiredProperty(String)\n\t */\n\t@Nullable String getProperty(String key);\n\n\t/**\n\t * Return the property value associated with the given key, or\n\t * {@code defaultValue} if the key cannot be resolved.\n\t * @param key the property name to resolve\n\t * @param defaultValue the default value to return if no value is found\n\t * @see #getRequiredProperty(String)\n\t * @see #getProperty(String, Class)\n\t */\n\tString getProperty(String key, String defaultValue);\n\n\t/**\n\t * Return the property value associated with the given key,\n\t * or {@code null} if the key cannot be resolved.\n\t * @param key the property name to resolve\n\t * @param targetType the expected type of the property value\n\t * @see #getRequiredProperty(String, Class)\n\t */\n\t<T> @Nullable T getProperty(String key, Class<T> targetType);\n\n\t/**\n\t * Return the property value associated with the given key,\n\t * or {@code defaultValue} if the key cannot be resolved.\n\t * @param key the property name to resolve\n\t * @param targetType the expected type of the property value\n\t * @param defaultValue the default value to return if no value is found\n\t * @see #getRequiredProperty(String, Class)\n\t */\n\t<T> T getProperty(String key, Class<T> targetType, T defaultValue);\n\n\t/**\n\t * Return the property value associated with the given key (never {@code null}).\n\t * @throws IllegalStateException if the key cannot be resolved\n\t * @see #getRequiredProperty(String, Class)\n\t */\n\tString getRequiredProperty(String key) throws IllegalStateException;\n\n\t/**\n\t * Return the property value associated with the given key, converted to the given\n\t * targetType (never {@code null}).\n\t * @throws IllegalStateException if the given key cannot be resolved\n\t */\n\t<T> T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;\n\n\t/**\n\t * Resolve ${...} placeholders in the given text, replacing them with corresponding\n\t * property values as resolved by {@link #getProperty}. Unresolvable placeholders with\n\t * no default value are ignored and passed through unchanged.\n\t * @param text the String to resolve\n\t * @return the resolved String (never {@code null})\n\t * @throws IllegalArgumentException if given text is {@code null}\n\t * @see #resolveRequiredPlaceholders\n\t */\n\tString resolvePlaceholders(String text);\n\n\t/**\n\t * Resolve ${...} placeholders in the given text, replacing them with corresponding\n\t * property values as resolved by {@link #getProperty}. Unresolvable placeholders with\n\t * no default value will cause an IllegalArgumentException to be thrown.\n\t * @return the resolved String (never {@code null})\n\t * @throws IllegalArgumentException if given text is {@code null}\n\t * or if any placeholders are unresolvable\n\t */\n\tString resolveRequiredPlaceholders(String text) throws IllegalArgumentException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the given property key is available for resolution,\r\n * i.e. if the value for the given key is not {@code null}.\r\n */\r\nboolean containsProperty(String key);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertyResolver#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property value associated with the given key,\r\n * or {@code null} if the key cannot be resolved.\r\n * @param key the property name to resolve\r\n * @see #getProperty(String, String)\r\n * @see #getProperty(String, Class)\r\n * @see #getRequiredProperty(String)\r\n */\r\n@Nullable\r\nString getProperty(String key);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertyResolver#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver#getProperty(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property value associated with the given key, or\r\n * {@code defaultValue} if the key cannot be resolved.\r\n * @param key the property name to resolve\r\n * @param defaultValue the default value to return if no value is found\r\n * @see #getRequiredProperty(String)\r\n * @see #getProperty(String, Class)\r\n */\r\nString getProperty(String key, String defaultValue);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertyResolver#getProperty(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver#getProperty(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property value associated with the given key,\r\n * or {@code null} if the key cannot be resolved.\r\n * @param key the property name to resolve\r\n * @param targetType the expected type of the property value\r\n * @see #getRequiredProperty(String, Class)\r\n */\r\n@Nullable\r\n<T> T getProperty(String key, Class<T> targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertyResolver#getProperty(String,Class<T>)",
    "tailType": "method"
  }
]