[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateWithInitialCapacityAndLoadFactor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateWithInitialCapacityAndLoadFactor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateWithInitialCapacityAndConcurrentLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCreateWithInitialCapacityAndConcurrentLevel() {\r\n    ConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(16, 2);\r\n    assertThat(map.getSegmentsSize()).isEqualTo(2);\r\n    assertThat(map.getSegment(0).getSize()).isEqualTo(8);\r\n    assertThat(map.getLoadFactor()).isEqualTo(0.75f);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateWithInitialCapacityAndConcurrentLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateWithInitialCapacityAndConcurrentLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateFullyCustom()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldCreateFullyCustom() {\r\n    ConcurrentReferenceHashMap<Integer, String> map = new ConcurrentReferenceHashMap<>(5, 0.5f, 3);\r\n    // concurrencyLevel of 3 ends up as 4 (nearest power of 2)\r\n    assertThat(map.getSegmentsSize()).isEqualTo(4);\r\n    // initialCapacity is 5/4 (rounded up, to nearest power of 2)\r\n    assertThat(map.getSegment(0).getSize()).isEqualTo(2);\r\n    assertThat(map.getLoadFactor()).isEqualTo(0.5f);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateFullyCustom()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldCreateFullyCustom()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedNonNegativeInitialCapacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldNeedNonNegativeInitialCapacity() {\r\n    assertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 1));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(-1, 1)).withMessageContaining(\"Initial capacity must not be negative\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedNonNegativeInitialCapacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedNonNegativeInitialCapacity()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveLoadFactor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldNeedPositiveLoadFactor() {\r\n    assertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 0.1f, 1));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(0, 0.0f, 1)).withMessageContaining(\"Load factor must be positive\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveLoadFactor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveLoadFactor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveConcurrencyLevel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldNeedPositiveConcurrencyLevel() {\r\n    assertThatNoException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(1, 1));\r\n    assertThatIllegalArgumentException().isThrownBy(() -> new ConcurrentReferenceHashMap<Integer, String>(1, 0)).withMessageContaining(\"Concurrency level must be positive\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveConcurrencyLevel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldNeedPositiveConcurrencyLevel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAndGet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldPutAndGet() {\r\n    // NOTE we are using mock references so we don't need to worry about GC\r\n    assertThat(this.map).isEmpty();\r\n    this.map.put(123, \"123\");\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n    assertThat(this.map).hasSize(1);\r\n    this.map.put(123, \"123b\");\r\n    assertThat(this.map).hasSize(1);\r\n    this.map.put(123, null);\r\n    assertThat(this.map).hasSize(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAndGet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldPutAndGet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]