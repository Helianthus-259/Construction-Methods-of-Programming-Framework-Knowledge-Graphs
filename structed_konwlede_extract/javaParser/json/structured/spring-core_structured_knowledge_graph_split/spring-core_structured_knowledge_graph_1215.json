[
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#getAnnotatedMethods(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<MethodMetadata> getAnnotatedMethods(String annotationName) {\r\n    Set<MethodMetadata> result = new LinkedHashSet<>(4);\r\n    if (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {\r\n        ReflectionUtils.doWithLocalMethods(getIntrospectedClass(), method -> {\r\n            if (isAnnotatedMethod(method, annotationName)) {\r\n                result.add(new StandardMethodMetadata(method, this.nestedAnnotationsAsMap));\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#getAnnotatedMethods(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#getAnnotatedMethods(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#getDeclaredMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<MethodMetadata> getDeclaredMethods() {\r\n    Set<MethodMetadata> result = new LinkedHashSet<>(16);\r\n    ReflectionUtils.doWithLocalMethods(getIntrospectedClass(), method -> result.add(new StandardMethodMetadata(method, this.nestedAnnotationsAsMap)));\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#getDeclaredMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#getDeclaredMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#isAnnotatedMethod(Method,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isAnnotatedMethod(Method method, String annotationName) {\r\n    return !method.isBridge() && method.getAnnotations().length > 0 && AnnotatedElementUtils.isAnnotated(method, annotationName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#isAnnotatedMethod(Method,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata#from(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "static AnnotationMetadata from(Class<?> introspectedClass) {\r\n    return new StandardAnnotationMetadata(introspectedClass, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardAnnotationMetadata#from(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardAnnotationMetadata",
    "headType": "class",
    "relation": "extend",
    "tail": "StandardClassMetadata",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.StandardClassMetadata",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\nimport java.lang.reflect.Modifier;\nimport java.util.LinkedHashSet;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link ClassMetadata} implementation that uses standard reflection\n * to introspect a given {@code Class}.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 2.5\n */\npublic class StandardClassMetadata implements ClassMetadata {\n\n\tprivate final Class<?> introspectedClass;\n\n\n\t/**\n\t * Create a new StandardClassMetadata wrapper for the given Class.\n\t * @param introspectedClass the Class to introspect\n\t * @deprecated since 5.2 in favor of {@link StandardAnnotationMetadata}\n\t */\n\t@Deprecated\n\tpublic StandardClassMetadata(Class<?> introspectedClass) {\n\t\tAssert.notNull(introspectedClass, \"Class must not be null\");\n\t\tthis.introspectedClass = introspectedClass;\n\t}\n\n\t/**\n\t * Return the underlying Class.\n\t */\n\tpublic final Class<?> getIntrospectedClass() {\n\t\treturn this.introspectedClass;\n\t}\n\n\n\t@Override\n\tpublic String getClassName() {\n\t\treturn this.introspectedClass.getName();\n\t}\n\n\t@Override\n\tpublic boolean isInterface() {\n\t\treturn this.introspectedClass.isInterface();\n\t}\n\n\t@Override\n\tpublic boolean isAnnotation() {\n\t\treturn this.introspectedClass.isAnnotation();\n\t}\n\n\t@Override\n\tpublic boolean isAbstract() {\n\t\treturn Modifier.isAbstract(this.introspectedClass.getModifiers());\n\t}\n\n\t@Override\n\tpublic boolean isFinal() {\n\t\treturn Modifier.isFinal(this.introspectedClass.getModifiers());\n\t}\n\n\t@Override\n\tpublic boolean isIndependent() {\n\t\treturn (!hasEnclosingClass() ||\n\t\t\t\t(this.introspectedClass.getDeclaringClass() != null &&\n\t\t\t\t\t\tModifier.isStatic(this.introspectedClass.getModifiers())));\n\t}\n\n\t@Override\n\tpublic @Nullable String getEnclosingClassName() {\n\t\tClass<?> enclosingClass = this.introspectedClass.getEnclosingClass();\n\t\treturn (enclosingClass != null ? enclosingClass.getName() : null);\n\t}\n\n\t@Override\n\tpublic @Nullable String getSuperClassName() {\n\t\tClass<?> superClass = this.introspectedClass.getSuperclass();\n\t\treturn (superClass != null ? superClass.getName() : null);\n\t}\n\n\t@Override\n\tpublic String[] getInterfaceNames() {\n\t\tClass<?>[] ifcs = this.introspectedClass.getInterfaces();\n\t\tString[] ifcNames = new String[ifcs.length];\n\t\tfor (int i = 0; i < ifcs.length; i++) {\n\t\t\tifcNames[i] = ifcs[i].getName();\n\t\t}\n\t\treturn ifcNames;\n\t}\n\n\t@Override\n\tpublic String[] getMemberClassNames() {\n\t\tLinkedHashSet<String> memberClassNames = new LinkedHashSet<>(4);\n\t\tfor (Class<?> nestedClass : this.introspectedClass.getDeclaredClasses()) {\n\t\t\tmemberClassNames.add(nestedClass.getName());\n\t\t}\n\t\treturn StringUtils.toStringArray(memberClassNames);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof StandardClassMetadata that &&\n\t\t\t\tgetIntrospectedClass().equals(that.getIntrospectedClass())));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getIntrospectedClass().hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getClassName();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.type.StandardClassMetadata#introspectedClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata#introspectedClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata#getIntrospectedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying Class.\r\n */\r\npublic final Class<?> getIntrospectedClass() {\r\n    return this.introspectedClass;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardClassMetadata#getIntrospectedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata#getClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getClassName() {\r\n    return this.introspectedClass.getName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardClassMetadata",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardClassMetadata#getClassName()",
    "tailType": "method"
  }
]