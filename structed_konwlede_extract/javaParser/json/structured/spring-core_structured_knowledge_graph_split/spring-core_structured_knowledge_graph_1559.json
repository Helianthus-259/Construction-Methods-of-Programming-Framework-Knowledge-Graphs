[
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#runtimeHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#runtimeHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldMatchRegisteredClass() {\r\n    runtimeHints.serialization().registerType(String.class);\r\n    assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldMatchRegisteredTypeReference() {\r\n    runtimeHints.serialization().registerType(TypeReference.of(String.class));\r\n    assertThat(serialization.onType(String.class).test(runtimeHints)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldMatchRegisteredTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldNotMatchUnregisteredType() {\r\n    runtimeHints.serialization().registerType(Integer.class);\r\n    assertThat(serialization.onType(Long.class).test(runtimeHints)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.SerializationHintsPredicatesTests#shouldNotMatchUnregisteredType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ProxyHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Arrays;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link ProxyHints}.\n *\n * @author Stephane Nicoll\n * @author Sam Brannen\n */\nclass ProxyHintsTests {\n\n\tprivate final ProxyHints proxyHints = new ProxyHints();\n\n\n\t@Test\n\tvoid registerJdkProxyWithSealedInterface() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(SealedInterface.class))\n\t\t\t\t.withMessageContaining(SealedInterface.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConcreteClass() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.proxyHints.registerJdkProxy(String.class))\n\t\t\t\t.withMessageContaining(String.class.getName());\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithInterface() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithTypeReferences() {\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class), TypeReference.of(\"com.example.Advised\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement()\n\t\t\t\t.satisfies(proxiedInterfaces(Function.class.getName(), \"com.example.Advised\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyWithConsumer() {\n\t\tthis.proxyHints.registerJdkProxy(springProxy(\"com.example.Test\"));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(\n\t\t\t\t\"com.example.Test\",\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\t@Test\n\tvoid registerJdkProxyTwiceExposesOneHint() {\n\t\tthis.proxyHints.registerJdkProxy(Function.class);\n\t\tthis.proxyHints.registerJdkProxy(TypeReference.of(Function.class.getName()));\n\t\tassertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\n\t}\n\n\n\tprivate static Consumer<JdkProxyHint.Builder> springProxy(String proxiedInterface) {\n\t\treturn builder -> builder.proxiedInterfaces(toTypeReferences(\n\t\t\t\tproxiedInterface,\n\t\t\t\t\"org.springframework.aop.SpringProxy\",\n\t\t\t\t\"org.springframework.aop.framework.Advised\",\n\t\t\t\t\"org.springframework.core.DecoratingProxy\"));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(String... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactly(toTypeReferences(proxiedInterfaces));\n\t}\n\n\tprivate static Consumer<JdkProxyHint> proxiedInterfaces(Class<?>... proxiedInterfaces) {\n\t\treturn jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces())\n\t\t\t\t.containsExactlyElementsOf(TypeReference.listOf(proxiedInterfaces));\n\t}\n\n\tprivate static TypeReference[] toTypeReferences(String... proxiedInterfaces) {\n\t\treturn Arrays.stream(proxiedInterfaces).map(TypeReference::of).toArray(TypeReference[]::new);\n\t}\n\n\n\tsealed interface SealedInterface {\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tstatic final class SealedClass implements SealedInterface {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#proxyHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#proxyHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "ProxyHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyWithSealedInterface() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.proxyHints.registerJdkProxy(SealedInterface.class)).withMessageContaining(SealedInterface.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithSealedInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyWithConcreteClass() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.proxyHints.registerJdkProxy(String.class)).withMessageContaining(String.class.getName());\r\n}",
    "tailType": "method_code"
  }
]