[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeAliasesThatOverrideArraysWithSingleElements()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithImplicitAttributeAliases() {\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"value\");\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"location1\");\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"location2\");\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"location3\");\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"xmlFile\");\r\n    assertAnnotationSynthesisFromMapWithImplicitAliases(\"groovyScript\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithImplicitAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertAnnotationSynthesisFromMapWithImplicitAliases(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertAnnotationSynthesisFromMapWithImplicitAliases(String attributeNameAndValue) {\r\n    Map<String, Object> map = Collections.singletonMap(attributeNameAndValue, attributeNameAndValue);\r\n    ImplicitAliasesContextConfig config = synthesizeAnnotation(map, ImplicitAliasesContextConfig.class, null);\r\n    assertThat(config).isNotNull();\r\n    assertThat(config.value()).as(\"value: \").isEqualTo(attributeNameAndValue);\r\n    assertThat(config.location1()).as(\"location1: \").isEqualTo(attributeNameAndValue);\r\n    assertThat(config.location2()).as(\"location2: \").isEqualTo(attributeNameAndValue);\r\n    assertThat(config.location3()).as(\"location3: \").isEqualTo(attributeNameAndValue);\r\n    assertThat(config.xmlFile()).as(\"xmlFile: \").isEqualTo(attributeNameAndValue);\r\n    assertThat(config.groovyScript()).as(\"groovyScript: \").isEqualTo(attributeNameAndValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#assertAnnotationSynthesisFromMapWithImplicitAliases(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithMissingAttributeValue() {\r\n    assertMissingTextAttribute(Collections.emptyMap());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithMissingAttributeValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNullAttributeValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithNullAttributeValue() {\r\n    Map<String, Object> map = Collections.singletonMap(\"text\", null);\r\n    assertThat(map.containsKey(\"text\")).isTrue();\r\n    assertMissingTextAttribute(map);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNullAttributeValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithNullAttributeValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertMissingTextAttribute(Map<String, Object> attributes) {\r\n    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> synthesizeAnnotation(attributes, AnnotationWithoutDefaults.class, null).text()).withMessageContaining(\"No value found for attribute named 'text' in merged annotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#assertMissingTextAttribute(Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeOfIncorrectType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromMapWithAttributeOfIncorrectType() {\r\n    Map<String, Object> map = Collections.singletonMap(VALUE, 42L);\r\n    assertThatIllegalStateException().isThrownBy(() -> synthesizeAnnotation(map, Component.class, null).value()).withMessageContaining(\"Attribute 'value' in annotation org.springframework.core.testfixture.stereotype.Component \" + \"should be compatible with java.lang.String but a java.lang.Long value was returned\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeOfIncorrectType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromMapWithAttributeOfIncorrectType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases() {\r\n    // 1) Get an annotation\r\n    Component component = WebController.class.getAnnotation(Component.class);\r\n    assertThat(component).isNotNull();\r\n    // 2) Convert the annotation into AnnotationAttributes\r\n    AnnotationAttributes attributes = getAnnotationAttributes(WebController.class, component);\r\n    assertThat(attributes).isNotNull();\r\n    // 3) Synthesize the AnnotationAttributes back into an annotation\r\n    Component synthesizedComponent = synthesizeAnnotation(attributes, Component.class, WebController.class);\r\n    assertThat(synthesizedComponent).isNotNull();\r\n    // 4) Verify that the original and synthesized annotations are equivalent\r\n    assertThat(synthesizedComponent).isNotSameAs(component);\r\n    assertThat(synthesizedComponent).isEqualTo(component);\r\n    assertThat(component.value()).as(\"value from component: \").isEqualTo(\"webController\");\r\n    assertThat(synthesizedComponent.value()).as(\"value from synthesized component: \").isEqualTo(\"webController\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases()",
    "tailType": "method"
  }
]