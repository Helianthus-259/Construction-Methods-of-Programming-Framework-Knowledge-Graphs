[
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#getFilename(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#getFilename(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#getFilenameExtension(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Extract the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"txt\".\r\n * @param path the file path (may be {@code null})\r\n * @return the extracted filename extension, or {@code null} if none\r\n */\r\n@Nullable\r\npublic static String getFilenameExtension(@Nullable String path) {\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return null;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return null;\r\n    }\r\n    return path.substring(extIndex + 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#getFilenameExtension(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#getFilenameExtension(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#stripFilenameExtension(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Strip the filename extension from the given Java resource path,\r\n * for example, \"mypath/myfile.txt\" &rarr; \"mypath/myfile\".\r\n * @param path the file path\r\n * @return the path with stripped filename extension\r\n */\r\npublic static String stripFilenameExtension(String path) {\r\n    int extIndex = path.lastIndexOf(DOT_CHAR);\r\n    if (extIndex == -1) {\r\n        return path;\r\n    }\r\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (folderIndex > extIndex) {\r\n        return path;\r\n    }\r\n    return path.substring(0, extIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#stripFilenameExtension(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#applyRelativePath(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Apply the given relative path to the given Java resource path,\r\n * assuming standard Java folder separation (i.e. \"/\" separators).\r\n * @param path the path to start from (usually a full file path)\r\n * @param relativePath the relative path to apply\r\n * (relative to the full file path above)\r\n * @return the full file path that results from applying the relative path\r\n */\r\npublic static String applyRelativePath(String path, String relativePath) {\r\n    int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR_CHAR);\r\n    if (separatorIndex != -1) {\r\n        String newPath = path.substring(0, separatorIndex);\r\n        if (!relativePath.startsWith(FOLDER_SEPARATOR)) {\r\n            newPath += FOLDER_SEPARATOR_CHAR;\r\n        }\r\n        return newPath + relativePath;\r\n    } else {\r\n        return relativePath;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#applyRelativePath(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#cleanPath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Normalize the path by suppressing sequences like \"path/..\" and\r\n * inner simple dots.\r\n * <p>The result is convenient for path comparison. For other uses,\r\n * notice that Windows separators (\"\\\" and \"\\\\\") are replaced by simple slashes.\r\n * <p><strong>NOTE</strong> that {@code cleanPath} should not be depended\r\n * upon in a security context. Other mechanisms should be used to prevent\r\n * path-traversal issues.\r\n * @param path the original path\r\n * @return the normalized path\r\n */\r\npublic static String cleanPath(String path) {\r\n    if (!hasLength(path)) {\r\n        return path;\r\n    }\r\n    String normalizedPath;\r\n    // Optimize when there is no backslash\r\n    if (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {\r\n        normalizedPath = replace(path, DOUBLE_BACKSLASHES, FOLDER_SEPARATOR);\r\n        normalizedPath = replace(normalizedPath, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);\r\n    } else {\r\n        normalizedPath = path;\r\n    }\r\n    String pathToUse = normalizedPath;\r\n    // Shortcut if there is no work to do\r\n    if (pathToUse.indexOf(DOT_CHAR) == -1) {\r\n        return pathToUse;\r\n    }\r\n    // Strip prefix from path to analyze, to not treat it as part of the\r\n    // first path element. This is necessary to correctly parse paths like\r\n    // \"file:core/../core/io/Resource.class\", where the \"..\" should just\r\n    // strip the first \"core\" directory while keeping the \"file:\" prefix.\r\n    int prefixIndex = pathToUse.indexOf(':');\r\n    String prefix = \"\";\r\n    if (prefixIndex != -1) {\r\n        prefix = pathToUse.substring(0, prefixIndex + 1);\r\n        if (prefix.contains(FOLDER_SEPARATOR)) {\r\n            prefix = \"\";\r\n        } else {\r\n            pathToUse = pathToUse.substring(prefixIndex + 1);\r\n        }\r\n    }\r\n    if (pathToUse.startsWith(FOLDER_SEPARATOR)) {\r\n        prefix = prefix + FOLDER_SEPARATOR;\r\n        pathToUse = pathToUse.substring(1);\r\n    }\r\n    String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);\r\n    // we never require more elements than pathArray and in the common case the same number\r\n    Deque<String> pathElements = new ArrayDeque<>(pathArray.length);\r\n    int tops = 0;\r\n    for (int i = pathArray.length - 1; i >= 0; i--) {\r\n        String element = pathArray[i];\r\n        if (CURRENT_PATH.equals(element)) {\r\n            // Points to current directory - drop it.\r\n        } else if (TOP_PATH.equals(element)) {\r\n            // Registering top path found.\r\n            tops++;\r\n        } else {\r\n            if (tops > 0) {\r\n                // Merging path element with element corresponding to top path.\r\n                tops--;\r\n            } else {\r\n                // Normal path element found.\r\n                pathElements.addFirst(element);\r\n            }\r\n        }\r\n    }\r\n    // All path elements stayed the same - shortcut\r\n    if (pathArray.length == pathElements.size()) {\r\n        return normalizedPath;\r\n    }\r\n    // Remaining top paths need to be retained.\r\n    for (int i = 0; i < tops; i++) {\r\n        pathElements.addFirst(TOP_PATH);\r\n    }\r\n    // If nothing else left, at least explicitly point to current path.\r\n    if (pathElements.size() == 1 && pathElements.getLast().isEmpty() && !prefix.endsWith(FOLDER_SEPARATOR)) {\r\n        pathElements.addFirst(CURRENT_PATH);\r\n    }\r\n    final String joined = collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);\r\n    // avoid string concatenation with empty prefix\r\n    return prefix.isEmpty() ? joined : prefix + joined;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#cleanPath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#pathEquals(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Compare two paths after normalization of them.\r\n * @param path1 first path for comparison\r\n * @param path2 second path for comparison\r\n * @return whether the two paths are equivalent after normalization\r\n */\r\npublic static boolean pathEquals(String path1, String path2) {\r\n    return cleanPath(path1).equals(cleanPath(path2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#pathEquals(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#uriDecode(String,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decode the given encoded URI component value. Based on the following rules:\r\n * <ul>\r\n * <li>Alphanumeric characters {@code \"a\"} through {@code \"z\"}, {@code \"A\"} through {@code \"Z\"},\r\n * and {@code \"0\"} through {@code \"9\"} stay the same.</li>\r\n * <li>Special characters {@code \"-\"}, {@code \"_\"}, {@code \".\"}, and {@code \"*\"} stay the same.</li>\r\n * <li>A sequence \"{@code %<i>xy</i>}\" is interpreted as a hexadecimal representation of the character.</li>\r\n * <li>For all other characters (including those already decoded), the output is undefined.</li>\r\n * </ul>\r\n * @param source the encoded String\r\n * @param charset the character set\r\n * @return the decoded value\r\n * @throws IllegalArgumentException when the given source contains invalid encoded sequences\r\n * @since 5.0\r\n * @see java.net.URLDecoder#decode(String, String)\r\n */\r\npublic static String uriDecode(String source, Charset charset) {\r\n    int length = source.length();\r\n    if (length == 0) {\r\n        return source;\r\n    }\r\n    Assert.notNull(charset, \"Charset must not be null\");\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream(length);\r\n    boolean changed = false;\r\n    for (int i = 0; i < length; i++) {\r\n        int ch = source.charAt(i);\r\n        if (ch == '%') {\r\n            if (i + 2 < length) {\r\n                char hex1 = source.charAt(i + 1);\r\n                char hex2 = source.charAt(i + 2);\r\n                int u = Character.digit(hex1, 16);\r\n                int l = Character.digit(hex2, 16);\r\n                if (u == -1 || l == -1) {\r\n                    throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n                }\r\n                baos.write((char) ((u << 4) + l));\r\n                i += 2;\r\n                changed = true;\r\n            } else {\r\n                throw new IllegalArgumentException(\"Invalid encoded sequence \\\"\" + source.substring(i) + \"\\\"\");\r\n            }\r\n        } else {\r\n            baos.write(ch);\r\n        }\r\n    }\r\n    return (changed ? StreamUtils.copyToString(baos, charset) : source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#uriDecode(String,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#parseLocale(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given {@code String} value into a {@link Locale}, accepting\r\n * the {@link Locale#toString} format as well as BCP 47 language tags as\r\n * specified by {@link Locale#forLanguageTag}.\r\n * @param localeValue the locale value: following either {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores), or BCP 47 (for example, \"en-UK\")\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n * @since 5.0.4\r\n * @see #parseLocaleString\r\n * @see Locale#forLanguageTag\r\n */\r\n@Nullable\r\npublic static Locale parseLocale(String localeValue) {\r\n    if (!localeValue.contains(\"_\") && !localeValue.contains(\" \")) {\r\n        validateLocalePart(localeValue);\r\n        Locale resolved = Locale.forLanguageTag(localeValue);\r\n        if (!resolved.getLanguage().isEmpty()) {\r\n            return resolved;\r\n        }\r\n    }\r\n    return parseLocaleString(localeValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#parseLocale(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtils#parseLocale(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtils#parseLocaleString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given {@code String} representation into a {@link Locale}.\r\n * <p>For many parsing scenarios, this is an inverse operation of\r\n * {@link Locale#toString Locale's toString}, in a lenient sense.\r\n * This method does not aim for strict {@code Locale} design compliance;\r\n * it is rather specifically tailored for typical Spring parsing needs.\r\n * <p><b>Note: This delegate does not accept the BCP 47 language tag format.\r\n * Please use {@link #parseLocale} for lenient parsing of both formats.</b>\r\n * @param localeString the locale {@code String}: following {@code Locale's}\r\n * {@code toString()} format (\"en\", \"en_UK\", etc.), also accepting spaces as\r\n * separators (as an alternative to underscores)\r\n * @return a corresponding {@code Locale} instance, or {@code null} if none\r\n * @throws IllegalArgumentException in case of an invalid locale specification\r\n */\r\n// for Locale constructors on JDK 19\r\n@SuppressWarnings(\"deprecation\")\r\n@Nullable\r\npublic static Locale parseLocaleString(String localeString) {\r\n    if (localeString.isEmpty()) {\r\n        return null;\r\n    }\r\n    String delimiter = \"_\";\r\n    if (!localeString.contains(\"_\") && localeString.contains(\" \")) {\r\n        delimiter = \" \";\r\n    }\r\n    String[] tokens = localeString.split(delimiter, -1);\r\n    if (tokens.length == 1) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        return new Locale(language);\r\n    } else if (tokens.length == 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        return new Locale(language, country);\r\n    } else if (tokens.length > 2) {\r\n        String language = tokens[0];\r\n        validateLocalePart(language);\r\n        String country = tokens[1];\r\n        validateLocalePart(country);\r\n        String variant = Arrays.stream(tokens).skip(2).collect(Collectors.joining(delimiter));\r\n        return new Locale(language, country, variant);\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid locale format: '\" + localeString + \"'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtils#parseLocaleString(String)",
    "tailType": "method"
  }
]