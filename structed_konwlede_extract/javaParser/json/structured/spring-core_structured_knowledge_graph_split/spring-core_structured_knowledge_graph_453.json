[
  {
    "head": "org.springframework.asm.MethodWriter#visitSwitchInsn(Label,Label[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void visitSwitchInsn(final Label dflt, final Label[] labels) {\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES) {\r\n            currentBasicBlock.frame.execute(Opcodes.LOOKUPSWITCH, 0, null, null);\r\n            // Add all the labels as successors of the current basic block.\r\n            addSuccessorToCurrentBasicBlock(Edge.JUMP, dflt);\r\n            dflt.getCanonicalInstance().flags |= Label.FLAG_JUMP_TARGET;\r\n            for (Label label : labels) {\r\n                addSuccessorToCurrentBasicBlock(Edge.JUMP, label);\r\n                label.getCanonicalInstance().flags |= Label.FLAG_JUMP_TARGET;\r\n            }\r\n        } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) {\r\n            // No need to update maxRelativeStackSize (the stack size delta is always negative).\r\n            --relativeStackSize;\r\n            // Add all the labels as successors of the current basic block.\r\n            addSuccessorToCurrentBasicBlock(relativeStackSize, dflt);\r\n            for (Label label : labels) {\r\n                addSuccessorToCurrentBasicBlock(relativeStackSize, label);\r\n            }\r\n        }\r\n        // End the current basic block.\r\n        endCurrentBasicBlockWithNoSuccessor();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitSwitchInsn(Label,Label[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitMultiANewArrayInsn(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    Symbol descSymbol = symbolTable.addConstantClass(descriptor);\r\n    code.put12(Opcodes.MULTIANEWARRAY, descSymbol.index).putByte(numDimensions);\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(Opcodes.MULTIANEWARRAY, numDimensions, descSymbol, symbolTable);\r\n        } else {\r\n            // No need to update maxRelativeStackSize (the stack size delta is always negative).\r\n            relativeStackSize += 1 - numDimensions;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitMultiANewArrayInsn(String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitMultiANewArrayInsn(String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitInsnAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitInsnAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastCodeRuntimeVisibleTypeAnnotation = AnnotationWriter.create(symbolTable, (typeRef & 0xFF0000FF) | (lastBytecodeOffset << 8), typePath, descriptor, lastCodeRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastCodeRuntimeInvisibleTypeAnnotation = AnnotationWriter.create(symbolTable, (typeRef & 0xFF0000FF) | (lastBytecodeOffset << 8), typePath, descriptor, lastCodeRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitInsnAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitInsnAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTryCatchBlock(Label,Label,Label,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) {\r\n    Handler newHandler = new Handler(start, end, handler, type != null ? symbolTable.addConstantClass(type).index : 0, type);\r\n    if (firstHandler == null) {\r\n        firstHandler = newHandler;\r\n    } else {\r\n        lastHandler.nextHandler = newHandler;\r\n    }\r\n    lastHandler = newHandler;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitTryCatchBlock(Label,Label,Label,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTryCatchBlock(Label,Label,Label,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTryCatchAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastCodeRuntimeVisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastCodeRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastCodeRuntimeInvisibleTypeAnnotation = AnnotationWriter.create(symbolTable, typeRef, typePath, descriptor, lastCodeRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitLocalVariable(String,String,String,Label,Label,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitLocalVariable(final String name, final String descriptor, final String signature, final Label start, final Label end, final int index) {\r\n    if (signature != null) {\r\n        if (localVariableTypeTable == null) {\r\n            localVariableTypeTable = new ByteVector();\r\n        }\r\n        ++localVariableTypeTableLength;\r\n        localVariableTypeTable.putShort(start.bytecodeOffset).putShort(end.bytecodeOffset - start.bytecodeOffset).putShort(symbolTable.addConstantUtf8(name)).putShort(symbolTable.addConstantUtf8(signature)).putShort(index);\r\n    }\r\n    if (localVariableTable == null) {\r\n        localVariableTable = new ByteVector();\r\n    }\r\n    ++localVariableTableLength;\r\n    localVariableTable.putShort(start.bytecodeOffset).putShort(end.bytecodeOffset - start.bytecodeOffset).putShort(symbolTable.addConstantUtf8(name)).putShort(symbolTable.addConstantUtf8(descriptor)).putShort(index);\r\n    if (compute != COMPUTE_NOTHING) {\r\n        char firstDescChar = descriptor.charAt(0);\r\n        int currentMaxLocals = index + (firstDescChar == 'J' || firstDescChar == 'D' ? 2 : 1);\r\n        if (currentMaxLocals > maxLocals) {\r\n            maxLocals = currentMaxLocals;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitLocalVariable(String,String,String,Label,Label,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitLocalVariable(String,String,String,Label,Label,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitLocalVariableAnnotation(final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) {\r\n    // Create a ByteVector to hold a 'type_annotation' JVMS structure.\r\n    // See https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20.\r\n    ByteVector typeAnnotation = new ByteVector();\r\n    // Write target_type, target_info, and target_path.\r\n    typeAnnotation.putByte(typeRef >>> 24).putShort(start.length);\r\n    for (int i = 0; i < start.length; ++i) {\r\n        typeAnnotation.putShort(start[i].bytecodeOffset).putShort(end[i].bytecodeOffset - start[i].bytecodeOffset).putShort(index[i]);\r\n    }\r\n    TypePath.put(typePath, typeAnnotation);\r\n    // Write type_index and reserve space for num_element_value_pairs.\r\n    typeAnnotation.putShort(symbolTable.addConstantUtf8(descriptor)).putShort(0);\r\n    if (visible) {\r\n        return lastCodeRuntimeVisibleTypeAnnotation = new AnnotationWriter(symbolTable, /* useNamedValues= */\r\n        true, typeAnnotation, lastCodeRuntimeVisibleTypeAnnotation);\r\n    } else {\r\n        return lastCodeRuntimeInvisibleTypeAnnotation = new AnnotationWriter(symbolTable, /* useNamedValues= */\r\n        true, typeAnnotation, lastCodeRuntimeInvisibleTypeAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]