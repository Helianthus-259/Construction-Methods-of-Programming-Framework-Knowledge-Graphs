[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferIndexLength(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toByteBufferIndexLength(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    @SuppressWarnings(\"deprecation\")\r\n    ByteBuffer result = buffer.toByteBuffer(1, 2);\r\n    assertThat(result.capacity()).isEqualTo(2);\r\n    assertThat(result.remaining()).isEqualTo(2);\r\n    byte[] resultBytes = new byte[2];\r\n    result.get(resultBytes);\r\n    assertThat(resultBytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferIndexLength(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferIndexLength(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferDestination(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid toByteBufferDestination(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(4);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    ByteBuffer byteBuffer = createByteBuffer(2);\r\n    buffer.toByteBuffer(1, byteBuffer, 0, 2);\r\n    assertThat(byteBuffer.capacity()).isEqualTo(2);\r\n    assertThat(byteBuffer.remaining()).isEqualTo(2);\r\n    byte[] resultBytes = new byte[2];\r\n    byteBuffer.get(resultBytes);\r\n    assertThat(resultBytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> buffer.toByteBuffer(0, byteBuffer, 0, 3));\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferDestination(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#toByteBufferDestination(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffers(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readableByteBuffers(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(3);\r\n    dataBuffer.write(\"abc\".getBytes(StandardCharsets.UTF_8));\r\n    dataBuffer.readPosition(1);\r\n    dataBuffer.writePosition(2);\r\n    byte[] result = new byte[1];\r\n    try (var iterator = dataBuffer.readableByteBuffers()) {\r\n        assertThat(iterator).hasNext();\r\n        int i = 0;\r\n        while (iterator.hasNext()) {\r\n            ByteBuffer byteBuffer = iterator.next();\r\n            assertThat(byteBuffer.position()).isEqualTo(0);\r\n            assertThat(byteBuffer.limit()).isEqualTo(1);\r\n            assertThat(byteBuffer.capacity()).isEqualTo(1);\r\n            assertThat(byteBuffer.remaining()).isEqualTo(1);\r\n            byteBuffer.get(result, i, 1);\r\n            assertThat(iterator).isExhausted();\r\n        }\r\n    }\r\n    assertThat(result).containsExactly('b');\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffers(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffers(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffersJoined(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid readableByteBuffersJoined(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer dataBuffer = this.bufferFactory.join(Arrays.asList(stringBuffer(\"a\"), stringBuffer(\"b\"), stringBuffer(\"c\")));\r\n    byte[] result = new byte[3];\r\n    try (var iterator = dataBuffer.readableByteBuffers()) {\r\n        assertThat(iterator).hasNext();\r\n        int i = 0;\r\n        while (iterator.hasNext()) {\r\n            ByteBuffer byteBuffer = iterator.next();\r\n            int len = byteBuffer.remaining();\r\n            byteBuffer.get(result, i, len);\r\n            i += len;\r\n            assertThatException().isThrownBy(() -> byteBuffer.put((byte) 'd'));\r\n        }\r\n    }\r\n    assertThat(result).containsExactly('a', 'b', 'c');\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffersJoined(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#readableByteBuffersJoined(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writableByteBuffers(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writableByteBuffers(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(3);\r\n    dataBuffer.write(\"ab\".getBytes(StandardCharsets.UTF_8));\r\n    dataBuffer.readPosition(1);\r\n    try (DataBuffer.ByteBufferIterator iterator = dataBuffer.writableByteBuffers()) {\r\n        assertThat(iterator).hasNext();\r\n        ByteBuffer byteBuffer = iterator.next();\r\n        assertThat(byteBuffer.position()).isEqualTo(0);\r\n        assertThat(byteBuffer.limit()).isEqualTo(1);\r\n        assertThat(byteBuffer.capacity()).isEqualTo(1);\r\n        assertThat(byteBuffer.remaining()).isEqualTo(1);\r\n        byteBuffer.put((byte) 'c');\r\n        dataBuffer.writePosition(3);\r\n        assertThat(iterator).isExhausted();\r\n    }\r\n    byte[] result = new byte[2];\r\n    dataBuffer.read(result);\r\n    assertThat(result).containsExactly('b', 'c');\r\n    release(dataBuffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writableByteBuffers(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writableByteBuffers(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#indexOf(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid indexOf(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    int result = buffer.indexOf(b -> b == 'c', 0);\r\n    assertThat(result).isEqualTo(2);\r\n    result = buffer.indexOf(b -> b == 'c', Integer.MIN_VALUE);\r\n    assertThat(result).isEqualTo(2);\r\n    result = buffer.indexOf(b -> b == 'c', Integer.MAX_VALUE);\r\n    assertThat(result).isEqualTo(-1);\r\n    result = buffer.indexOf(b -> b == 'z', 0);\r\n    assertThat(result).isEqualTo(-1);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#indexOf(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#indexOf(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#lastIndexOf(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid lastIndexOf(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(3);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    int result = buffer.lastIndexOf(b -> b == 'b', 2);\r\n    assertThat(result).isEqualTo(1);\r\n    result = buffer.lastIndexOf(b -> b == 'c', 2);\r\n    assertThat(result).isEqualTo(2);\r\n    result = buffer.lastIndexOf(b -> b == 'b', Integer.MAX_VALUE);\r\n    assertThat(result).isEqualTo(1);\r\n    result = buffer.lastIndexOf(b -> b == 'c', Integer.MAX_VALUE);\r\n    assertThat(result).isEqualTo(2);\r\n    result = buffer.lastIndexOf(b -> b == 'b', Integer.MIN_VALUE);\r\n    assertThat(result).isEqualTo(-1);\r\n    result = buffer.lastIndexOf(b -> b == 'c', Integer.MIN_VALUE);\r\n    assertThat(result).isEqualTo(-1);\r\n    result = buffer.lastIndexOf(b -> b == 'z', 0);\r\n    assertThat(result).isEqualTo(-1);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  }
]