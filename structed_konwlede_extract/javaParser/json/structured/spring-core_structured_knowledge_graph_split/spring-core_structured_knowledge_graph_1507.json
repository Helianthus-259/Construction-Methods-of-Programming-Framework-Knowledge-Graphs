[
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#hasSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"reflectionTargetNames\")\r\nvoid hasSuitableReflectionTargetName(TypeReference typeReference, String binaryName) {\r\n    assertThat(typeReference.getName()).isEqualTo(binaryName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#hasSuitableReflectionTargetName(TypeReference,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#hasSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#hasSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#reflectionTargetNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> reflectionTargetNames() {\r\n    return Stream.of(Arguments.of(GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\")), \"com.example.Test\"), Arguments.of(GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\", \"Inner\")), \"com.example.Test$Inner\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#reflectionTargetNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithClassName() {\r\n    GeneratedTypeReference typeReference = GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\"));\r\n    assertThat(typeReference.getPackageName()).isEqualTo(\"com.example\");\r\n    assertThat(typeReference.getSimpleName()).isEqualTo(\"Test\");\r\n    assertThat(typeReference.getCanonicalName()).isEqualTo(\"com.example.Test\");\r\n    assertThat(typeReference.getEnclosingType()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassNameAndParent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithClassNameAndParent() {\r\n    GeneratedTypeReference typeReference = GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\").nestedClass(\"Nested\"));\r\n    assertThat(typeReference.getPackageName()).isEqualTo(\"com.example\");\r\n    assertThat(typeReference.getSimpleName()).isEqualTo(\"Nested\");\r\n    assertThat(typeReference.getCanonicalName()).isEqualTo(\"com.example.Test.Nested\");\r\n    assertThat(typeReference.getEnclosingType()).satisfies(parentTypeReference -> {\r\n        assertThat(parentTypeReference.getPackageName()).isEqualTo(\"com.example\");\r\n        assertThat(parentTypeReference.getSimpleName()).isEqualTo(\"Test\");\r\n        assertThat(parentTypeReference.getCanonicalName()).isEqualTo(\"com.example.Test\");\r\n        assertThat(parentTypeReference.getEnclosingType()).isNull();\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassNameAndParent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#createWithClassNameAndParent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfCglibProxy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nameOfCglibProxy() {\r\n    TypeReference reference = GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test$$SpringCGLIB$$0\"));\r\n    assertThat(reference.getSimpleName()).isEqualTo(\"Test$$SpringCGLIB$$0\");\r\n    assertThat(reference.getEnclosingType()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfCglibProxy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfCglibProxy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfNestedCglibProxy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nameOfNestedCglibProxy() {\r\n    TypeReference reference = GeneratedTypeReference.of(ClassName.get(\"com.example\", \"Test\").nestedClass(\"Another$$SpringCGLIB$$0\"));\r\n    assertThat(reference.getSimpleName()).isEqualTo(\"Another$$SpringCGLIB$$0\");\r\n    assertThat(reference.getEnclosingType()).isNotNull();\r\n    assertThat(reference.getEnclosingType().getSimpleName()).isEqualTo(\"Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfNestedCglibProxy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#nameOfNestedCglibProxy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests#equalsWithIdenticalCanonicalNameIsTrue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid equalsWithIdenticalCanonicalNameIsTrue() {\r\n    assertThat(GeneratedTypeReference.of(ClassName.get(\"java.lang\", \"String\"))).isEqualTo(TypeReference.of(String.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedTypeReferenceTests#equalsWithIdenticalCanonicalNameIsTrue()",
    "tailType": "method"
  }
]