[
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#doMatch(String,String,boolean,Map<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#isPotentialMatch(String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isPotentialMatch(String path, String[] pattDirs) {\r\n    if (!this.trimTokens) {\r\n        int pos = 0;\r\n        for (String pattDir : pattDirs) {\r\n            int skipped = skipSeparator(path, pos, this.pathSeparator);\r\n            pos += skipped;\r\n            skipped = skipSegment(path, pos, pattDir);\r\n            if (skipped < pattDir.length()) {\r\n                return (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));\r\n            }\r\n            pos += skipped;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#isPotentialMatch(String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#skipSegment(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int skipSegment(String path, int pos, String prefix) {\r\n    int skipped = 0;\r\n    for (int i = 0; i < prefix.length(); i++) {\r\n        char c = prefix.charAt(i);\r\n        if (isWildcardChar(c)) {\r\n            return skipped;\r\n        }\r\n        int currPos = pos + skipped;\r\n        if (currPos >= path.length()) {\r\n            return 0;\r\n        }\r\n        if (c == path.charAt(currPos)) {\r\n            skipped++;\r\n        }\r\n    }\r\n    return skipped;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#skipSegment(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#skipSeparator(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int skipSeparator(String path, int pos, String separator) {\r\n    int skipped = 0;\r\n    while (path.startsWith(separator, pos + skipped)) {\r\n        skipped += separator.length();\r\n    }\r\n    return skipped;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#skipSeparator(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#isWildcardChar(char)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isWildcardChar(char c) {\r\n    for (char candidate : WILDCARD_CHARS) {\r\n        if (c == candidate) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#isWildcardChar(char)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#tokenizePattern(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tokenize the given path pattern into parts, based on this matcher's settings.\r\n * <p>Performs caching based on {@link #setCachePatterns}, delegating to\r\n * {@link #tokenizePath(String)} for the actual tokenization algorithm.\r\n * @param pattern the pattern to tokenize\r\n * @return the tokenized pattern parts\r\n */\r\nprotected String[] tokenizePattern(String pattern) {\r\n    String[] tokenized = null;\r\n    Boolean cachePatterns = this.cachePatterns;\r\n    if (cachePatterns == null || cachePatterns) {\r\n        tokenized = this.tokenizedPatternCache.get(pattern);\r\n    }\r\n    if (tokenized == null) {\r\n        tokenized = tokenizePath(pattern);\r\n        if (cachePatterns == null && this.tokenizedPatternCache.size() >= CACHE_TURNOFF_THRESHOLD) {\r\n            // Try to adapt to the runtime situation that we're encountering:\r\n            // There are obviously too many different patterns coming in here...\r\n            // So let's turn off the cache since the patterns are unlikely to be reoccurring.\r\n            deactivatePatternCache();\r\n            return tokenized;\r\n        }\r\n        if (cachePatterns == null || cachePatterns) {\r\n            this.tokenizedPatternCache.put(pattern, tokenized);\r\n        }\r\n    }\r\n    return tokenized;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#tokenizePattern(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#tokenizePath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Tokenize the given path into parts, based on this matcher's settings.\r\n * @param path the path to tokenize\r\n * @return the tokenized path parts\r\n */\r\nprotected String[] tokenizePath(String path) {\r\n    return StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#tokenizePath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#matchStrings(String,String,Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Test whether a string matches against a pattern.\r\n * @param pattern the pattern to match against (never {@code null})\r\n * @param str the String which must be matched against the pattern (never {@code null})\r\n * @return {@code true} if the string matches against the pattern, or {@code false} otherwise\r\n */\r\nprivate boolean matchStrings(String pattern, String str, @Nullable Map<String, String> uriTemplateVariables) {\r\n    return getStringMatcher(pattern).matchStrings(str, uriTemplateVariables);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#matchStrings(String,String,Map<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#getStringMatcher(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build or retrieve an {@link AntPathStringMatcher} for the given pattern.\r\n * <p>The default implementation checks this AntPathMatcher's internal cache\r\n * (see {@link #setCachePatterns}), creating a new AntPathStringMatcher instance\r\n * if no cached copy is found.\r\n * <p>When encountering too many patterns to cache at runtime (the threshold is 65536),\r\n * it turns the default cache off, assuming that arbitrary permutations of patterns\r\n * are coming in, with little chance for encountering a recurring pattern.\r\n * <p>This method may be overridden to implement a custom cache strategy.\r\n * @param pattern the pattern to match against (never {@code null})\r\n * @return a corresponding AntPathStringMatcher (never {@code null})\r\n * @see #setCachePatterns\r\n */\r\nprotected AntPathStringMatcher getStringMatcher(String pattern) {\r\n    AntPathStringMatcher matcher = null;\r\n    Boolean cachePatterns = this.cachePatterns;\r\n    if (cachePatterns == null || cachePatterns) {\r\n        matcher = this.stringMatcherCache.get(pattern);\r\n    }\r\n    if (matcher == null) {\r\n        matcher = new AntPathStringMatcher(pattern, this.pathSeparator, this.caseSensitive);\r\n        if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {\r\n            // Try to adapt to the runtime situation that we're encountering:\r\n            // There are obviously too many different patterns coming in here...\r\n            // So let's turn off the cache since the patterns are unlikely to be reoccurring.\r\n            deactivatePatternCache();\r\n            return matcher;\r\n        }\r\n        if (cachePatterns == null || cachePatterns) {\r\n            this.stringMatcherCache.put(pattern, matcher);\r\n        }\r\n    }\r\n    return matcher;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#getStringMatcher(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#extractPathWithinPattern(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Given a pattern and a full path, determine the pattern-mapped part. <p>For example: <ul>\r\n * <li>'{@code /docs/cvs/commit.html}' and '{@code /docs/cvs/commit.html} &rarr; ''</li>\r\n * <li>'{@code /docs/*}' and '{@code /docs/cvs/commit} &rarr; '{@code cvs/commit}'</li>\r\n * <li>'{@code /docs/cvs/*.html}' and '{@code /docs/cvs/commit.html} &rarr; '{@code commit.html}'</li>\r\n * <li>'{@code /docs/**}' and '{@code /docs/cvs/commit} &rarr; '{@code cvs/commit}'</li>\r\n * <li>'{@code /docs/**\\/*.html}' and '{@code /docs/cvs/commit.html} &rarr; '{@code cvs/commit.html}'</li>\r\n * <li>'{@code /*.html}' and '{@code /docs/cvs/commit.html} &rarr; '{@code docs/cvs/commit.html}'</li>\r\n * <li>'{@code *.html}' and '{@code /docs/cvs/commit.html} &rarr; '{@code /docs/cvs/commit.html}'</li>\r\n * <li>'{@code *}' and '{@code /docs/cvs/commit.html} &rarr; '{@code /docs/cvs/commit.html}'</li> </ul>\r\n * <p>Assumes that {@link #match} returns {@code true} for '{@code pattern}' and '{@code path}', but\r\n * does <strong>not</strong> enforce this.\r\n */\r\n@Override\r\npublic String extractPathWithinPattern(String pattern, String path) {\r\n    String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);\r\n    String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);\r\n    StringBuilder builder = new StringBuilder();\r\n    boolean pathStarted = false;\r\n    for (int segment = 0; segment < patternParts.length; segment++) {\r\n        String patternPart = patternParts[segment];\r\n        if (patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) {\r\n            for (; segment < pathParts.length; segment++) {\r\n                if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) {\r\n                    builder.append(this.pathSeparator);\r\n                }\r\n                builder.append(pathParts[segment]);\r\n                pathStarted = true;\r\n            }\r\n        }\r\n    }\r\n    return builder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcher#extractPathWithinPattern(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcher#extractPathWithinPattern(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]