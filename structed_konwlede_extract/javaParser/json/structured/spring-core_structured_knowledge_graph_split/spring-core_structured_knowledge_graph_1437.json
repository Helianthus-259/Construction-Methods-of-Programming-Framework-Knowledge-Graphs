[
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLReader#getFeature(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#getFeature(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#setFeature(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation throws a {@code SAXNotRecognizedException} exception\r\n * for any feature outside the \"http://xml.org/sax/features/\" namespace\r\n * and accepts a {@code false} value for any feature within.\r\n */\r\n@Override\r\npublic void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {\r\n    if (name.startsWith(\"http://xml.org/sax/features/\")) {\r\n        if (value) {\r\n            throw new SAXNotSupportedException(name);\r\n        }\r\n    } else {\r\n        throw new SAXNotRecognizedException(name);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLReader#setFeature(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#setFeature(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Throws a {@code SAXNotRecognizedException} exception when the given property does not signify a lexical\r\n * handler. The property name for a lexical handler is {@code http://xml.org/sax/properties/lexical-handler}.\r\n */\r\n@Override\r\n@Nullable\r\npublic Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\r\n    if (\"http://xml.org/sax/properties/lexical-handler\".equals(name)) {\r\n        return this.lexicalHandler;\r\n    } else {\r\n        throw new SAXNotRecognizedException(name);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLReader#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#setProperty(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Throws a {@code SAXNotRecognizedException} exception when the given property does not signify a lexical\r\n * handler. The property name for a lexical handler is {@code http://xml.org/sax/properties/lexical-handler}.\r\n */\r\n@Override\r\npublic void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException {\r\n    if (\"http://xml.org/sax/properties/lexical-handler\".equals(name)) {\r\n        this.lexicalHandler = (LexicalHandler) value;\r\n    } else {\r\n        throw new SAXNotRecognizedException(name);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLReader#setProperty(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLReader#setProperty(String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLStreamConstants;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamReader;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Abstract base class for {@code XMLStreamReader}s.\n *\n * @author Arjen Poutsma\n * @since 3.0\n */\nabstract class AbstractXMLStreamReader implements XMLStreamReader {\n\n\t@Override\n\tpublic String getElementText() throws XMLStreamException {\n\t\tif (getEventType() != XMLStreamConstants.START_ELEMENT) {\n\t\t\tthrow new XMLStreamException(\"Parser must be on START_ELEMENT to read next text\", getLocation());\n\t\t}\n\t\tint eventType = next();\n\t\tStringBuilder builder = new StringBuilder();\n\t\twhile (eventType != XMLStreamConstants.END_ELEMENT) {\n\t\t\tif (eventType == XMLStreamConstants.CHARACTERS || eventType == XMLStreamConstants.CDATA ||\n\t\t\t\t\teventType == XMLStreamConstants.SPACE || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\n\t\t\t\tbuilder.append(getText());\n\t\t\t}\n\t\t\telse if (eventType == XMLStreamConstants.PROCESSING_INSTRUCTION ||\n\t\t\t\t\teventType == XMLStreamConstants.COMMENT) {\n\t\t\t\t// skipping\n\t\t\t}\n\t\t\telse if (eventType == XMLStreamConstants.END_DOCUMENT) {\n\t\t\t\tthrow new XMLStreamException(\"Unexpected end of document when reading element text content\",\n\t\t\t\t\t\tgetLocation());\n\t\t\t}\n\t\t\telse if (eventType == XMLStreamConstants.START_ELEMENT) {\n\t\t\t\tthrow new XMLStreamException(\"Element text content may not contain START_ELEMENT\", getLocation());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new XMLStreamException(\"Unexpected event type \" + eventType, getLocation());\n\t\t\t}\n\t\t\teventType = next();\n\t\t}\n\t\treturn builder.toString();\n\t}\n\n\t@Override\n\tpublic String getAttributeLocalName(int index) {\n\t\treturn getAttributeName(index).getLocalPart();\n\t}\n\n\t@Override\n\tpublic String getAttributeNamespace(int index) {\n\t\treturn getAttributeName(index).getNamespaceURI();\n\t}\n\n\t@Override\n\tpublic String getAttributePrefix(int index) {\n\t\treturn getAttributeName(index).getPrefix();\n\t}\n\n\t@Override\n\tpublic String getNamespaceURI() {\n\t\tint eventType = getEventType();\n\t\tif (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT) {\n\t\t\treturn getName().getNamespaceURI();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\"Parser must be on START_ELEMENT or END_ELEMENT state\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getNamespaceURI(String prefix) {\n\t\treturn getNamespaceContext().getNamespaceURI(prefix);\n\t}\n\n\t@Override\n\tpublic boolean hasText() {\n\t\tint eventType = getEventType();\n\t\treturn (eventType == XMLStreamConstants.SPACE || eventType == XMLStreamConstants.CHARACTERS ||\n\t\t\t\teventType == XMLStreamConstants.COMMENT || eventType == XMLStreamConstants.CDATA ||\n\t\t\t\teventType == XMLStreamConstants.ENTITY_REFERENCE);\n\t}\n\n\t@Override\n\tpublic String getPrefix() {\n\t\tint eventType = getEventType();\n\t\tif (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT) {\n\t\t\treturn getName().getPrefix();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\"Parser must be on START_ELEMENT or END_ELEMENT state\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean hasName() {\n\t\tint eventType = getEventType();\n\t\treturn (eventType == XMLStreamConstants.START_ELEMENT || eventType == XMLStreamConstants.END_ELEMENT);\n\t}\n\n\t@Override\n\tpublic boolean isWhiteSpace() {\n\t\treturn getEventType() == XMLStreamConstants.SPACE;\n\t}\n\n\t@Override\n\tpublic boolean isStartElement() {\n\t\treturn getEventType() == XMLStreamConstants.START_ELEMENT;\n\t}\n\n\t@Override\n\tpublic boolean isEndElement() {\n\t\treturn getEventType() == XMLStreamConstants.END_ELEMENT;\n\t}\n\n\t@Override\n\tpublic boolean isCharacters() {\n\t\treturn getEventType() == XMLStreamConstants.CHARACTERS;\n\t}\n\n\t@Override\n\tpublic int nextTag() throws XMLStreamException {\n\t\tint eventType = next();\n\t\twhile (eventType == XMLStreamConstants.CHARACTERS && isWhiteSpace() ||\n\t\t\t\teventType == XMLStreamConstants.CDATA && isWhiteSpace() || eventType == XMLStreamConstants.SPACE ||\n\t\t\t\teventType == XMLStreamConstants.PROCESSING_INSTRUCTION || eventType == XMLStreamConstants.COMMENT) {\n\t\t\teventType = next();\n\t\t}\n\t\tif (eventType != XMLStreamConstants.START_ELEMENT && eventType != XMLStreamConstants.END_ELEMENT) {\n\t\t\tthrow new XMLStreamException(\"expected start or end tag\", getLocation());\n\t\t}\n\t\treturn eventType;\n\t}\n\n\t@Override\n\tpublic void require(int expectedType, String namespaceURI, String localName) throws XMLStreamException {\n\t\tint eventType = getEventType();\n\t\tif (eventType != expectedType) {\n\t\t\tthrow new XMLStreamException(\"Expected [\" + expectedType + \"] but read [\" + eventType + \"]\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic @Nullable String getAttributeValue(@Nullable String namespaceURI, String localName) {\n\t\tfor (int i = 0; i < getAttributeCount(); i++) {\n\t\t\tQName name = getAttributeName(i);\n\t\t\tif (name.getLocalPart().equals(localName) &&\n\t\t\t\t\t(namespaceURI == null || name.getNamespaceURI().equals(namespaceURI))) {\n\t\t\t\treturn getAttributeValue(i);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn getEventType() != END_DOCUMENT;\n\t}\n\n\t@Override\n\tpublic String getLocalName() {\n\t\treturn getName().getLocalPart();\n\t}\n\n\t@Override\n\tpublic char[] getTextCharacters() {\n\t\treturn getText().toCharArray();\n\t}\n\n\t@Override\n\tpublic int getTextCharacters(int sourceStart, char[] target, int targetStart, int length) {\n\t\tchar[] source = getTextCharacters();\n\t\tlength = Math.min(length, source.length);\n\t\tSystem.arraycopy(source, sourceStart, target, targetStart, length);\n\t\treturn length;\n\t}\n\n\t@Override\n\tpublic int getTextLength() {\n\t\treturn getText().length();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getElementText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getElementText() throws XMLStreamException {\r\n    if (getEventType() != XMLStreamConstants.START_ELEMENT) {\r\n        throw new XMLStreamException(\"Parser must be on START_ELEMENT to read next text\", getLocation());\r\n    }\r\n    int eventType = next();\r\n    StringBuilder builder = new StringBuilder();\r\n    while (eventType != XMLStreamConstants.END_ELEMENT) {\r\n        if (eventType == XMLStreamConstants.CHARACTERS || eventType == XMLStreamConstants.CDATA || eventType == XMLStreamConstants.SPACE || eventType == XMLStreamConstants.ENTITY_REFERENCE) {\r\n            builder.append(getText());\r\n        } else if (eventType == XMLStreamConstants.PROCESSING_INSTRUCTION || eventType == XMLStreamConstants.COMMENT) {\r\n            // skipping\r\n        } else if (eventType == XMLStreamConstants.END_DOCUMENT) {\r\n            throw new XMLStreamException(\"Unexpected end of document when reading element text content\", getLocation());\r\n        } else if (eventType == XMLStreamConstants.START_ELEMENT) {\r\n            throw new XMLStreamException(\"Element text content may not contain START_ELEMENT\", getLocation());\r\n        } else {\r\n            throw new XMLStreamException(\"Unexpected event type \" + eventType, getLocation());\r\n        }\r\n        eventType = next();\r\n    }\r\n    return builder.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getElementText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getElementText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeLocalName(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getAttributeLocalName(int index) {\r\n    return getAttributeName(index).getLocalPart();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#getAttributeLocalName(int)",
    "tailType": "method"
  }
]