[
  {
    "head": "org.springframework.core.io.ClassPathResource#getURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a URL for the underlying class path resource,\r\n * if available.\r\n * @see ClassLoader#getResource(String)\r\n * @see Class#getResource(String)\r\n */\r\n@Override\r\npublic URL getURL() throws IOException {\r\n    URL url = resolveURL();\r\n    if (url == null) {\r\n        throw new FileNotFoundException(getDescription() + \" cannot be resolved to URL because it does not exist\");\r\n    }\r\n    return url;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation creates a {@code ClassPathResource}, applying the given\r\n * path relative to the path used to create this descriptor.\r\n * @see StringUtils#applyRelativePath(String, String)\r\n */\r\n@Override\r\npublic Resource createRelative(String relativePath) {\r\n    String pathToUse = StringUtils.applyRelativePath(this.path, relativePath);\r\n    return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) : new ClassPathResource(pathToUse, this.classLoader));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getFilename()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the name of the file that this class path\r\n * resource refers to.\r\n * @see StringUtils#getFilename(String)\r\n */\r\n@Override\r\n@Nullable\r\npublic String getFilename() {\r\n    return StringUtils.getFilename(this.absolutePath);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getFilename()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getFilename()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getDescription()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a description that includes the absolute\r\n * class path location.\r\n */\r\n@Override\r\npublic String getDescription() {\r\n    return \"class path resource [\" + this.absolutePath + \"]\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getDescription()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getDescription()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation compares the underlying class path locations and\r\n * associated class loaders.\r\n * @see #getPath()\r\n * @see #getClassLoader()\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof ClassPathResource that && this.absolutePath.equals(that.absolutePath) && ObjectUtils.nullSafeEquals(getClassLoader(), that.getClassLoader())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the hash code of the underlying class path location.\r\n * @see #getPath()\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return this.absolutePath.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractFileResolvingResource",
    "tailType": "class"
  }
]