[
  {
    "head": "org.springframework.core.codec.StringDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#decodeInternal(DataBuffer,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected String decodeInternal(DataBuffer dataBuffer, Charset charset) {\r\n    return dataBuffer.toString(charset);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#decodeInternal(DataBuffer,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#decodeInternal(DataBuffer,Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#textPlainOnly()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code StringDecoder} for {@code \"text/plain\"}.\r\n */\r\npublic static StringDecoder textPlainOnly() {\r\n    return textPlainOnly(DEFAULT_DELIMITERS, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#textPlainOnly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#textPlainOnly(List<String>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code StringDecoder} for {@code \"text/plain\"}.\r\n * @param delimiters delimiter strings to use to split the input stream\r\n * @param stripDelimiter whether to remove delimiters from the resulting\r\n * input strings\r\n */\r\npublic static StringDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter) {\r\n    return new StringDecoder(delimiters, stripDelimiter, new MimeType(\"text\", \"plain\", DEFAULT_CHARSET));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#textPlainOnly(List<String>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#allMimeTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code StringDecoder} that supports all MIME types.\r\n */\r\npublic static StringDecoder allMimeTypes() {\r\n    return allMimeTypes(DEFAULT_DELIMITERS, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#allMimeTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder#allMimeTypes(List<String>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@code StringDecoder} that supports all MIME types.\r\n * @param delimiters delimiter strings to use to split the input stream\r\n * @param stripDelimiter whether to remove delimiters from the resulting\r\n * input strings\r\n */\r\npublic static StringDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter) {\r\n    return new StringDecoder(delimiters, stripDelimiter, new MimeType(\"text\", \"plain\", DEFAULT_CHARSET), MimeTypeUtils.ALL);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoder#allMimeTypes(List<String>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractCharSequenceDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.CollectionFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.EnumMap;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NavigableMap;\nimport java.util.NavigableSet;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Factory for collections that is aware of common Java and Spring collection types.\n *\n * <p>Mainly for internal use within the framework.\n *\n * @author Juergen Hoeller\n * @author Arjen Poutsma\n * @author Oliver Gierke\n * @author Sam Brannen\n * @since 1.1.1\n */\npublic final class CollectionFactory {\n\n\tprivate static final Set<Class<?>> approximableCollectionTypes = Set.of(\n\t\t\t// Standard collection interfaces\n\t\t\tCollection.class,\n\t\t\tList.class,\n\t\t\tSet.class,\n\t\t\tSortedSet.class,\n\t\t\tNavigableSet.class,\n\t\t\t// Common concrete collection classes\n\t\t\tArrayList.class,\n\t\t\tLinkedList.class,\n\t\t\tHashSet.class,\n\t\t\tLinkedHashSet.class,\n\t\t\tTreeSet.class,\n\t\t\tEnumSet.class);\n\n\tprivate static final Set<Class<?>> approximableMapTypes = Set.of(\n\t\t\t// Standard map interfaces\n\t\t\tMap.class,\n\t\t\tMultiValueMap.class,\n\t\t\tSortedMap.class,\n\t\t\tNavigableMap.class,\n\t\t\t// Common concrete map classes\n\t\t\tHashMap.class,\n\t\t\tLinkedHashMap.class,\n\t\t\tLinkedMultiValueMap.class,\n\t\t\tTreeMap.class,\n\t\t\tEnumMap.class);\n\n\n\tprivate CollectionFactory() {\n\t}\n\n\n\t/**\n\t * Determine whether the given collection type is an <em>approximable</em> type,\n\t * i.e. a type that {@link #createApproximateCollection} can approximate.\n\t * @param collectionType the collection type to check\n\t * @return {@code true} if the type is <em>approximable</em>\n\t */\n\tpublic static boolean isApproximableCollectionType(@Nullable Class<?> collectionType) {\n\t\treturn (collectionType != null && (approximableCollectionTypes.contains(collectionType) ||\n\t\t\t\tcollectionType.getName().equals(\"java.util.SequencedSet\") ||\n\t\t\t\tcollectionType.getName().equals(\"java.util.SequencedCollection\")));\n\t}\n\n\t/**\n\t * Create the most approximate collection for the given collection.\n\t * <p><strong>Warning</strong>: Since the parameterized type {@code E} is\n\t * not bound to the type of elements contained in the supplied\n\t * {@code collection}, type safety cannot be guaranteed if the supplied\n\t * {@code collection} is an {@link EnumSet}. In such scenarios, the caller\n\t * is responsible for ensuring that the element type for the supplied\n\t * {@code collection} is an enum type matching type {@code E}. As an\n\t * alternative, the caller may wish to treat the return value as a raw\n\t * collection or collection of {@link Object}.\n\t * @param collection the original collection object, potentially {@code null}\n\t * @param capacity the initial capacity\n\t * @return a new, empty collection instance\n\t * @see #isApproximableCollectionType\n\t * @see java.util.LinkedList\n\t * @see java.util.ArrayList\n\t * @see java.util.EnumSet\n\t * @see java.util.TreeSet\n\t * @see java.util.LinkedHashSet\n\t */\n\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tpublic static <E> Collection<E> createApproximateCollection(@Nullable Object collection, int capacity) {\n\t\tif (collection instanceof EnumSet enumSet) {\n\t\t\tCollection<E> copy = EnumSet.copyOf(enumSet);\n\t\t\tcopy.clear();\n\t\t\treturn copy;\n\t\t}\n\t\telse if (collection instanceof SortedSet sortedSet) {\n\t\t\treturn new TreeSet<>(sortedSet.comparator());\n\t\t}\n\t\telse if (collection instanceof LinkedList) {\n\t\t\treturn new LinkedList<>();\n\t\t}\n\t\telse if (collection instanceof List) {\n\t\t\treturn new ArrayList<>(capacity);\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedHashSet<>(capacity);\n\t\t}\n\t}\n\n\t/**\n\t * Create the most appropriate collection for the given collection type.\n\t * <p>Delegates to {@link #createCollection(Class, Class, int)} with a\n\t * {@code null} element type.\n\t * @param collectionType the desired type of the target collection (never {@code null})\n\t * @param capacity the initial capacity\n\t * @return a new collection instance\n\t * @throws IllegalArgumentException if the supplied {@code collectionType}\n\t * is {@code null} or of type {@link EnumSet}\n\t */\n\tpublic static <E> Collection<E> createCollection(Class<?> collectionType, int capacity) {\n\t\treturn createCollection(collectionType, null, capacity);\n\t}\n\n\t/**\n\t * Create the most appropriate collection for the given collection type.\n\t * <p><strong>Warning</strong>: Since the parameterized type {@code E} is\n\t * not bound to the supplied {@code elementType}, type safety cannot be\n\t * guaranteed if the desired {@code collectionType} is {@link EnumSet}.\n\t * In such scenarios, the caller is responsible for ensuring that the\n\t * supplied {@code elementType} is an enum type matching type {@code E}.\n\t * As an alternative, the caller may wish to treat the return value as a\n\t * raw collection or collection of {@link Object}.\n\t * @param collectionType the desired type of the target collection (never {@code null})\n\t * @param elementType the collection's element type, or {@code null} if unknown\n\t * (note: only relevant for {@link EnumSet} creation)\n\t * @param capacity the initial capacity\n\t * @return a new collection instance\n\t * @throws IllegalArgumentException if the supplied {@code collectionType} is\n\t * {@code null}; or if the desired {@code collectionType} is {@link EnumSet} and\n\t * the supplied {@code elementType} is not a subtype of {@link Enum}\n\t * @since 4.1.3\n\t * @see java.util.LinkedHashSet\n\t * @see java.util.ArrayList\n\t * @see java.util.TreeSet\n\t * @see java.util.EnumSet\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <E> Collection<E> createCollection(Class<?> collectionType, @Nullable Class<?> elementType, int capacity) {\n\t\tAssert.notNull(collectionType, \"Collection type must not be null\");\n\t\tif (LinkedHashSet.class == collectionType ||\n\t\t\t\tSet.class == collectionType || Collection.class == collectionType ||\n\t\t\t\tcollectionType.getName().equals(\"java.util.SequencedSet\") ||\n\t\t\t\tcollectionType.getName().equals(\"java.util.SequencedCollection\")) {\n\t\t\treturn new LinkedHashSet<>(capacity);\n\t\t}\n\t\telse if (ArrayList.class == collectionType || List.class == collectionType) {\n\t\t\treturn new ArrayList<>(capacity);\n\t\t}\n\t\telse if (LinkedList.class == collectionType) {\n\t\t\treturn new LinkedList<>();\n\t\t}\n\t\telse if (TreeSet.class == collectionType || NavigableSet.class == collectionType ||\n\t\t\t\tSortedSet.class == collectionType) {\n\t\t\treturn new TreeSet<>();\n\t\t}\n\t\telse if (EnumSet.class.isAssignableFrom(collectionType)) {\n\t\t\tAssert.notNull(elementType, \"Cannot create EnumSet for unknown element type\");\n\t\t\treturn EnumSet.noneOf(asEnumType(elementType));\n\t\t}\n\t\telse if (HashSet.class == collectionType) {\n\t\t\treturn new HashSet<>(capacity);\n\t\t}\n\t\telse {\n\t\t\tif (collectionType.isInterface() || !Collection.class.isAssignableFrom(collectionType)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported Collection type: \" + collectionType.getName());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn (Collection<E>) ReflectionUtils.accessibleConstructor(collectionType).newInstance();\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Could not instantiate Collection type: \" + collectionType.getName(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Determine whether the given map type is an <em>approximable</em> type,\n\t * i.e. a type that {@link #createApproximateMap} can approximate.\n\t * @param mapType the map type to check\n\t * @return {@code true} if the type is <em>approximable</em>\n\t */\n\tpublic static boolean isApproximableMapType(@Nullable Class<?> mapType) {\n\t\treturn (mapType != null && (approximableMapTypes.contains(mapType) ||\n\t\t\t\tmapType.getName().equals(\"java.util.SequencedMap\")));\n\t}\n\n\t/**\n\t * Create the most approximate map for the given map.\n\t * <p><strong>Warning</strong>: Since the parameterized type {@code K} is\n\t * not bound to the type of keys contained in the supplied {@code map},\n\t * type safety cannot be guaranteed if the supplied {@code map} is an\n\t * {@link EnumMap}. In such scenarios, the caller is responsible for\n\t * ensuring that the key type in the supplied {@code map} is an enum type\n\t * matching type {@code K}. As an alternative, the caller may wish to\n\t * treat the return value as a raw map or map keyed by {@link Object}.\n\t * @param map the original map object, potentially {@code null}\n\t * @param capacity the initial capacity\n\t * @return a new, empty map instance\n\t * @see #isApproximableMapType\n\t * @see java.util.EnumMap\n\t * @see java.util.TreeMap\n\t * @see java.util.LinkedHashMap\n\t */\n\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tpublic static <K, V> Map<K, V> createApproximateMap(@Nullable Object map, int capacity) {\n\t\tif (map instanceof EnumMap enumMap) {\n\t\t\tEnumMap copy = new EnumMap(enumMap);\n\t\t\tcopy.clear();\n\t\t\treturn copy;\n\t\t}\n\t\telse if (map instanceof SortedMap sortedMap) {\n\t\t\treturn new TreeMap<>(sortedMap.comparator());\n\t\t}\n\t\telse if (map instanceof MultiValueMap) {\n\t\t\treturn new LinkedMultiValueMap(capacity);\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedHashMap<>(capacity);\n\t\t}\n\t}\n\n\t/**\n\t * Create the most appropriate map for the given map type.\n\t * <p>Delegates to {@link #createMap(Class, Class, int)} with a\n\t * {@code null} key type.\n\t * @param mapType the desired type of the target map\n\t * @param capacity the initial capacity\n\t * @return a new map instance\n\t * @throws IllegalArgumentException if the supplied {@code mapType} is\n\t * {@code null} or of type {@link EnumMap}\n\t */\n\tpublic static <K, V> Map<K, V> createMap(Class<?> mapType, int capacity) {\n\t\treturn createMap(mapType, null, capacity);\n\t}\n\n\t/**\n\t * Create the most appropriate map for the given map type.\n\t * <p><strong>Warning</strong>: Since the parameterized type {@code K}\n\t * is not bound to the supplied {@code keyType}, type safety cannot be\n\t * guaranteed if the desired {@code mapType} is {@link EnumMap}. In such\n\t * scenarios, the caller is responsible for ensuring that the {@code keyType}\n\t * is an enum type matching type {@code K}. As an alternative, the caller\n\t * may wish to treat the return value as a raw map or map keyed by\n\t * {@link Object}. Similarly, type safety cannot be enforced if the\n\t * desired {@code mapType} is {@link MultiValueMap}.\n\t * @param mapType the desired type of the target map (never {@code null})\n\t * @param keyType the map's key type, or {@code null} if unknown\n\t * (note: only relevant for {@link EnumMap} creation)\n\t * @param capacity the initial capacity\n\t * @return a new map instance\n\t * @throws IllegalArgumentException if the supplied {@code mapType} is\n\t * {@code null}; or if the desired {@code mapType} is {@link EnumMap} and\n\t * the supplied {@code keyType} is not a subtype of {@link Enum}\n\t * @since 4.1.3\n\t * @see java.util.LinkedHashMap\n\t * @see java.util.TreeMap\n\t * @see org.springframework.util.LinkedMultiValueMap\n\t * @see java.util.EnumMap\n\t */\n\t@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n\tpublic static <K, V> Map<K, V> createMap(Class<?> mapType, @Nullable Class<?> keyType, int capacity) {\n\t\tAssert.notNull(mapType, \"Map type must not be null\");\n\t\tif (LinkedHashMap.class == mapType || Map.class == mapType ||\n\t\t\t\tmapType.getName().equals(\"java.util.SequencedMap\")) {\n\t\t\treturn new LinkedHashMap<>(capacity);\n\t\t}\n\t\telse if (LinkedMultiValueMap.class == mapType || MultiValueMap.class == mapType) {\n\t\t\treturn new LinkedMultiValueMap();\n\t\t}\n\t\telse if (TreeMap.class == mapType || SortedMap.class == mapType || NavigableMap.class == mapType) {\n\t\t\treturn new TreeMap<>();\n\t\t}\n\t\telse if (EnumMap.class == mapType) {\n\t\t\tAssert.notNull(keyType, \"Cannot create EnumMap for unknown key type\");\n\t\t\treturn new EnumMap(asEnumType(keyType));\n\t\t}\n\t\telse if (HashMap.class == mapType) {\n\t\t\treturn new HashMap<>(capacity);\n\t\t}\n\t\telse {\n\t\t\tif (mapType.isInterface() || !Map.class.isAssignableFrom(mapType)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported Map type: \" + mapType.getName());\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn (Map<K, V>) ReflectionUtils.accessibleConstructor(mapType).newInstance();\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalArgumentException(\"Could not instantiate Map type: \" + mapType.getName(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create a variant of {@link java.util.Properties} that automatically adapts\n\t * non-String values to String representations in {@link Properties#getProperty}.\n\t * <p>In addition, the returned {@code Properties} instance sorts properties\n\t * alphanumerically based on their keys.\n\t * @return a new {@code Properties} instance\n\t * @since 4.3.4\n\t * @see #createSortedProperties(boolean)\n\t * @see #createSortedProperties(Properties, boolean)\n\t */\n\t@SuppressWarnings(\"serial\")\n\tpublic static Properties createStringAdaptingProperties() {\n\t\treturn new SortedProperties(false) {\n\t\t\t@Override\n\t\t\tpublic @Nullable String getProperty(String key) {\n\t\t\t\tObject value = get(key);\n\t\t\t\treturn (value != null ? value.toString() : null);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create a variant of {@link java.util.Properties} that sorts properties\n\t * alphanumerically based on their keys.\n\t * <p>This can be useful when storing the {@link Properties} instance in a\n\t * properties file, since it allows such files to be generated in a repeatable\n\t * manner with consistent ordering of properties. Comments in generated\n\t * properties files can also be optionally omitted.\n\t * @param omitComments {@code true} if comments should be omitted when\n\t * storing properties in a file\n\t * @return a new {@code Properties} instance\n\t * @since 5.2\n\t * @see #createStringAdaptingProperties()\n\t * @see #createSortedProperties(Properties, boolean)\n\t */\n\tpublic static Properties createSortedProperties(boolean omitComments) {\n\t\treturn new SortedProperties(omitComments);\n\t}\n\n\t/**\n\t * Create a variant of {@link java.util.Properties} that sorts properties\n\t * alphanumerically based on their keys.\n\t * <p>This can be useful when storing the {@code Properties} instance in a\n\t * properties file, since it allows such files to be generated in a repeatable\n\t * manner with consistent ordering of properties. Comments in generated\n\t * properties files can also be optionally omitted.\n\t * <p>The returned {@code Properties} instance will be populated with\n\t * properties from the supplied {@code properties} object, but default\n\t * properties from the supplied {@code properties} object will not be copied.\n\t * @param properties the {@code Properties} object from which to copy the\n\t * initial properties\n\t * @param omitComments {@code true} if comments should be omitted when\n\t * storing properties in a file\n\t * @return a new {@code Properties} instance\n\t * @since 5.2\n\t * @see #createStringAdaptingProperties()\n\t * @see #createSortedProperties(boolean)\n\t */\n\tpublic static Properties createSortedProperties(Properties properties, boolean omitComments) {\n\t\treturn new SortedProperties(properties, omitComments);\n\t}\n\n\t/**\n\t * Cast the given type to a subtype of {@link Enum}.\n\t * @param enumType the enum type, never {@code null}\n\t * @return the given type as subtype of {@link Enum}\n\t * @throws IllegalArgumentException if the given type is not a subtype of {@link Enum}\n\t */\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate static Class<? extends Enum> asEnumType(Class<?> enumType) {\n\t\tAssert.notNull(enumType, \"Enum type must not be null\");\n\t\tif (!Enum.class.isAssignableFrom(enumType)) {\n\t\t\tthrow new IllegalArgumentException(\"Supplied type is not an enum: \" + enumType.getName());\n\t\t}\n\t\treturn enumType.asSubclass(Enum.class);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.CollectionFactory#approximableCollectionTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.CollectionFactory#approximableCollectionTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Class<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.CollectionFactory#approximableMapTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.CollectionFactory#approximableMapTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Class<?>>",
    "tailType": "type"
  }
]