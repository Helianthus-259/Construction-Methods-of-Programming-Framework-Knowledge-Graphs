[
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#addProtocolResolver(ProtocolResolver)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the given resolver with this resource loader, allowing for\r\n * additional protocols to be handled.\r\n * <p>Any such resolver will be invoked ahead of this loader's standard\r\n * resolution rules. It may therefore also override any default rules.\r\n * @since 4.3\r\n * @see #getProtocolResolvers()\r\n */\r\npublic void addProtocolResolver(ProtocolResolver resolver) {\r\n    Assert.notNull(resolver, \"ProtocolResolver must not be null\");\r\n    this.protocolResolvers.add(resolver);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#addProtocolResolver(ProtocolResolver)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getProtocolResolvers()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the collection of currently registered protocol resolvers,\r\n * allowing for introspection as well as modification.\r\n * @since 4.3\r\n * @see #addProtocolResolver(ProtocolResolver)\r\n */\r\npublic Collection<ProtocolResolver> getProtocolResolvers() {\r\n    return this.protocolResolvers;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#getProtocolResolvers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getResourceCache(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain a cache for the given value type, keyed by {@link Resource}.\r\n * @param valueType the value type, for example, an ASM {@code MetadataReader}\r\n * @return the cache {@link Map}, shared at the {@code ResourceLoader} level\r\n * @since 5.0\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic <T> Map<Resource, T> getResourceCache(Class<T> valueType) {\r\n    return (Map<Resource, T>) this.resourceCaches.computeIfAbsent(valueType, key -> new ConcurrentHashMap<>());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#getResourceCache(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getResourceCache(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#clearResourceCaches()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Clear all resource caches in this resource loader.\r\n * @since 5.0\r\n * @see #getResourceCache\r\n */\r\npublic void clearResourceCaches() {\r\n    this.resourceCaches.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#clearResourceCaches()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource getResource(String location) {\r\n    Assert.notNull(location, \"Location must not be null\");\r\n    for (ProtocolResolver protocolResolver : getProtocolResolvers()) {\r\n        Resource resource = protocolResolver.resolve(location, this);\r\n        if (resource != null) {\r\n            return resource;\r\n        }\r\n    }\r\n    if (location.startsWith(\"/\")) {\r\n        return getResourceByPath(location);\r\n    } else if (location.startsWith(CLASSPATH_URL_PREFIX)) {\r\n        return new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());\r\n    } else {\r\n        try {\r\n            // Try to parse the location as a URL...\r\n            URL url = ResourceUtils.toURL(location);\r\n            return (ResourceUtils.isFileURL(url) ? new FileUrlResource(url) : new UrlResource(url));\r\n        } catch (MalformedURLException ex) {\r\n            // No URL -> resolve as resource path.\r\n            return getResourceByPath(location);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#getResource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getResource(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader#getResourceByPath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a Resource handle for the resource at the given path.\r\n * <p>The default implementation supports class path locations. This should\r\n * be appropriate for standalone implementations but can be overridden,\r\n * for example, for implementations targeted at a Servlet container.\r\n * @param path the path to the resource\r\n * @return the corresponding Resource handle\r\n * @see ClassPathResource\r\n * @see org.springframework.context.support.FileSystemXmlApplicationContext#getResourceByPath\r\n * @see org.springframework.web.context.support.XmlWebApplicationContext#getResourceByPath\r\n */\r\nprotected Resource getResourceByPath(String path) {\r\n    return new ClassPathContextResource(path, getClassLoader());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.DefaultResourceLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.DefaultResourceLoader#getResourceByPath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.ClassPathContextResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ResourceUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * Default implementation of the {@link ResourceLoader} interface.\n *\n * <p>Used by {@link ResourceEditor}, and serves as base class for\n * {@link org.springframework.context.support.AbstractApplicationContext}.\n * Can also be used standalone.\n *\n * <p>Will return a {@link UrlResource} if the location value is a URL,\n * and a {@link ClassPathResource} if it is a non-URL path or a\n * \"classpath:\" pseudo-URL.\n *\n * @author Juergen Hoeller\n * @since 10.03.2004\n * @see FileSystemResourceLoader\n * @see org.springframework.context.support.ClassPathXmlApplicationContext\n */\npublic class DefaultResourceLoader implements ResourceLoader {\n\n\tprivate @Nullable ClassLoader classLoader;\n\n\tprivate final Set<ProtocolResolver> protocolResolvers = new LinkedHashSet<>(4);\n\n\tprivate final Map<Class<?>, Map<Resource, ?>> resourceCaches = new ConcurrentHashMap<>(4);\n\n\n\t/**\n\t * Create a new DefaultResourceLoader.\n\t * <p>ClassLoader access will happen using the thread context class loader\n\t * at the time of actual resource access (since 5.3). For more control, pass\n\t * a specific ClassLoader to {@link #DefaultResourceLoader(ClassLoader)}.\n\t * @see java.lang.Thread#getContextClassLoader()\n\t */\n\tpublic DefaultResourceLoader() {\n\t}\n\n\t/**\n\t * Create a new DefaultResourceLoader.\n\t * @param classLoader the ClassLoader to load class path resources with, or {@code null}\n\t * for using the thread context class loader at the time of actual resource access\n\t */\n\tpublic DefaultResourceLoader(@Nullable ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\n\t/**\n\t * Specify the ClassLoader to load class path resources with, or {@code null}\n\t * for using the thread context class loader at the time of actual resource access.\n\t * <p>The default is that ClassLoader access will happen using the thread context\n\t * class loader at the time of actual resource access (since 5.3).\n\t */\n\tpublic void setClassLoader(@Nullable ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\t/**\n\t * Return the ClassLoader to load class path resources with.\n\t * <p>Will get passed to ClassPathResource's constructor for all\n\t * ClassPathResource objects created by this resource loader.\n\t * @see ClassPathResource\n\t */\n\t@Override\n\tpublic @Nullable ClassLoader getClassLoader() {\n\t\treturn (this.classLoader != null ? this.classLoader : ClassUtils.getDefaultClassLoader());\n\t}\n\n\t/**\n\t * Register the given resolver with this resource loader, allowing for\n\t * additional protocols to be handled.\n\t * <p>Any such resolver will be invoked ahead of this loader's standard\n\t * resolution rules. It may therefore also override any default rules.\n\t * @since 4.3\n\t * @see #getProtocolResolvers()\n\t */\n\tpublic void addProtocolResolver(ProtocolResolver resolver) {\n\t\tAssert.notNull(resolver, \"ProtocolResolver must not be null\");\n\t\tthis.protocolResolvers.add(resolver);\n\t}\n\n\t/**\n\t * Return the collection of currently registered protocol resolvers,\n\t * allowing for introspection as well as modification.\n\t * @since 4.3\n\t * @see #addProtocolResolver(ProtocolResolver)\n\t */\n\tpublic Collection<ProtocolResolver> getProtocolResolvers() {\n\t\treturn this.protocolResolvers;\n\t}\n\n\t/**\n\t * Obtain a cache for the given value type, keyed by {@link Resource}.\n\t * @param valueType the value type, for example, an ASM {@code MetadataReader}\n\t * @return the cache {@link Map}, shared at the {@code ResourceLoader} level\n\t * @since 5.0\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> Map<Resource, T> getResourceCache(Class<T> valueType) {\n\t\treturn (Map<Resource, T>) this.resourceCaches.computeIfAbsent(valueType, key -> new ConcurrentHashMap<>());\n\t}\n\n\t/**\n\t * Clear all resource caches in this resource loader.\n\t * @since 5.0\n\t * @see #getResourceCache\n\t */\n\tpublic void clearResourceCaches() {\n\t\tthis.resourceCaches.clear();\n\t}\n\n\n\t@Override\n\tpublic Resource getResource(String location) {\n\t\tAssert.notNull(location, \"Location must not be null\");\n\n\t\tfor (ProtocolResolver protocolResolver : getProtocolResolvers()) {\n\t\t\tResource resource = protocolResolver.resolve(location, this);\n\t\t\tif (resource != null) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\tif (location.startsWith(\"/\")) {\n\t\t\treturn getResourceByPath(location);\n\t\t}\n\t\telse if (location.startsWith(CLASSPATH_URL_PREFIX)) {\n\t\t\treturn new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\t// Try to parse the location as a URL...\n\t\t\t\tURL url = ResourceUtils.toURL(location);\n\t\t\t\treturn (ResourceUtils.isFileURL(url) ? new FileUrlResource(url) : new UrlResource(url));\n\t\t\t}\n\t\t\tcatch (MalformedURLException ex) {\n\t\t\t\t// No URL -> resolve as resource path.\n\t\t\t\treturn getResourceByPath(location);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return a Resource handle for the resource at the given path.\n\t * <p>The default implementation supports class path locations. This should\n\t * be appropriate for standalone implementations but can be overridden,\n\t * for example, for implementations targeted at a Servlet container.\n\t * @param path the path to the resource\n\t * @return the corresponding Resource handle\n\t * @see ClassPathResource\n\t * @see org.springframework.context.support.FileSystemXmlApplicationContext#getResourceByPath\n\t * @see org.springframework.web.context.support.XmlWebApplicationContext#getResourceByPath\n\t */\n\tprotected Resource getResourceByPath(String path) {\n\t\treturn new ClassPathContextResource(path, getClassLoader());\n\t}\n\n\n\t/**\n\t * ClassPathResource that explicitly expresses a context-relative path\n\t * through implementing the ContextResource interface.\n\t */\n\tprotected static class ClassPathContextResource extends ClassPathResource implements ContextResource {\n\n\t\tpublic ClassPathContextResource(String path, @Nullable ClassLoader classLoader) {\n\t\t\tsuper(path, classLoader);\n\t\t}\n\n\t\t@Override\n\t\tpublic String getPathWithinContext() {\n\t\t\treturn getPath();\n\t\t}\n\n\t\t@Override\n\t\tpublic Resource createRelative(String relativePath) {\n\t\t\tString pathToUse = StringUtils.applyRelativePath(getPath(), relativePath);\n\t\t\treturn new ClassPathContextResource(pathToUse, getClassLoader());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPathWithinContext() {\r\n    return getPath();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathContextResource#getPathWithinContext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathContextResource#getPathWithinContext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]