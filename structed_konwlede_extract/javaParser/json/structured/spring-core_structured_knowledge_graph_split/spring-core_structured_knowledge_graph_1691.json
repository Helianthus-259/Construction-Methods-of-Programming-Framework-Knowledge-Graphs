[
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findNoninheritedComposedRepeatableAnnotationsOnClass() {\r\n    Class<?> element = NoninheritedRepeatableClass.class;\r\n    Set<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\r\n    assertNoninheritedRepeatableAnnotations(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\r\n    Class<?> element = SubNoninheritedRepeatableClass.class;\r\n    Set<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\r\n    assertNoninheritedRepeatableAnnotations(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findNoninheritedComposedRepeatableAnnotationsOnSuperclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findComposedContainerForRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findComposedContainerForRepeatableAnnotationsOnClass() {\r\n    assertFindRepeatableAnnotations(ComposedContainerClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findComposedContainerForRepeatableAnnotationsOnClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#findComposedContainerForRepeatableAnnotationsOnClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectNonRepeatableAnnotation(ThrowingCallable)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void expectNonRepeatableAnnotation(ThrowingCallable throwingCallable) {\r\n    assertThatIllegalArgumentException().isThrownBy(throwingCallable).withMessageStartingWith(\"Annotation type must be a repeatable annotation\").withMessageContaining(\"failed to resolve container type for\").withMessageContaining(NonRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectNonRepeatableAnnotation(ThrowingCallable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerMissingValueAttribute(ThrowingCallable)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void expectContainerMissingValueAttribute(ThrowingCallable throwingCallable) {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable).withMessageStartingWith(\"Invalid declaration of container type\").withMessageContaining(ContainerMissingValueAttribute.class.getName()).withMessageContaining(\"for repeatable annotation\").withMessageContaining(InvalidRepeatable.class.getName()).withCauseExactlyInstanceOf(NoSuchMethodException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerMissingValueAttribute(ThrowingCallable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerWithNonArrayValueAttribute(ThrowingCallable)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void expectContainerWithNonArrayValueAttribute(ThrowingCallable throwingCallable) {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable).withMessageStartingWith(\"Container type\").withMessageContaining(ContainerWithNonArrayValueAttribute.class.getName()).withMessageContaining(\"must declare a 'value' attribute for an array of type\").withMessageContaining(InvalidRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerWithNonArrayValueAttribute(ThrowingCallable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable throwingCallable) {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable).withMessageStartingWith(\"Container type\").withMessageContaining(ContainerWithArrayValueAttributeButWrongComponentType.class.getName()).withMessageContaining(\"must declare a 'value' attribute for an array of type\").withMessageContaining(InvalidRepeatable.class.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#assertGetRepeatableAnnotations(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertGetRepeatableAnnotations(AnnotatedElement element) {\r\n    assertThat(element).isNotNull();\r\n    Set<PeteRepeat> peteRepeats = getMergedRepeatableAnnotations(element, PeteRepeat.class);\r\n    assertThat(peteRepeats).isNotNull();\r\n    assertThat(peteRepeats).hasSize(3);\r\n    Iterator<PeteRepeat> iterator = peteRepeats.iterator();\r\n    assertThat(iterator.next().value()).isEqualTo(\"A\");\r\n    assertThat(iterator.next().value()).isEqualTo(\"B\");\r\n    assertThat(iterator.next().value()).isEqualTo(\"C\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#assertGetRepeatableAnnotations(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.ComposedRepeatableAnnotationsTests#assertFindRepeatableAnnotations(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertFindRepeatableAnnotations(AnnotatedElement element) {\r\n    assertThat(element).isNotNull();\r\n    Set<PeteRepeat> peteRepeats = findMergedRepeatableAnnotations(element, PeteRepeat.class);\r\n    assertThat(peteRepeats).isNotNull();\r\n    assertThat(peteRepeats).hasSize(3);\r\n    Iterator<PeteRepeat> iterator = peteRepeats.iterator();\r\n    assertThat(iterator.next().value()).isEqualTo(\"A\");\r\n    assertThat(iterator.next().value()).isEqualTo(\"B\");\r\n    assertThat(iterator.next().value()).isEqualTo(\"C\");\r\n}",
    "tailType": "method_code"
  }
]