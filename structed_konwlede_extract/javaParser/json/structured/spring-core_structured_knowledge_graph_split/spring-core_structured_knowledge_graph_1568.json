[
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatchesInRootDirectory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerExactMatchesInRootDirectory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerRootDirectory() {\r\n    this.resourceHints.registerPattern(\"/\");\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootDirectory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerRootPattern() {\r\n    this.resourceHints.registerPattern(\"*.properties\");\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\", \"*.properties\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerRootPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerPattern() {\r\n    this.resourceHints.registerPattern(\"com/example/*.properties\");\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\", \"com\", \"com/example\", \"com/example/*.properties\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerPatternWithIncludesAndExcludes() {\r\n    this.resourceHints.registerPattern(resourceHint -> resourceHint.includes(\"com/example/*.properties\"));\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(List.of(\"/\", \"com\", \"com/example\", \"com/example/*.properties\"), List.of(\"com/example/to-ignore.properties\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerPatternWithIncludesAndExcludes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerIfPresentRegisterExistingLocation() {\r\n    this.resourceHints.registerPatternIfPresent(null, \"META-INF/\", resourceHint -> resourceHint.includes(\"com/example/*.properties\"));\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\", \"com\", \"com/example\", \"com/example/*.properties\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentRegisterExistingLocation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerIfPresentIgnoreMissingLocation() {\r\n    Consumer<ResourcePatternHints.Builder> hintBuilder = mock();\r\n    this.resourceHints.registerPatternIfPresent(null, \"location/does-not-exist/\", hintBuilder);\r\n    assertThat(this.resourceHints.resourcePatternHints()).isEmpty();\r\n    verifyNoInteractions(hintBuilder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerIfPresentIgnoreMissingLocation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]