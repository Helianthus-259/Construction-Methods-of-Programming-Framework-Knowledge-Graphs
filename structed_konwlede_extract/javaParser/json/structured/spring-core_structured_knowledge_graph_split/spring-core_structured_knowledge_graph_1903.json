[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringCollection",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringCollection",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#integerCollection",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#integerCollection",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<Integer>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvert()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvert() {\r\n    assertThat(conversionService.canConvert(String.class, Integer.class)).isFalse();\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.canConvert(String.class, Integer.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvert()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvert()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertAssignable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertAssignable() {\r\n    assertThat(conversionService.canConvert(String.class, String.class)).isTrue();\r\n    assertThat(conversionService.canConvert(Integer.class, Number.class)).isTrue();\r\n    assertThat(conversionService.canConvert(boolean.class, boolean.class)).isTrue();\r\n    assertThat(conversionService.canConvert(boolean.class, Boolean.class)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertAssignable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertAssignable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromClassSourceTypeToNullTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertFromClassSourceTypeToNullTargetType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.canConvert(String.class, null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromClassSourceTypeToNullTargetType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromClassSourceTypeToNullTargetType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromTypeDescriptorSourceTypeToNullTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertFromTypeDescriptorSourceTypeToNullTargetType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> conversionService.canConvert(TypeDescriptor.valueOf(String.class), null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromTypeDescriptorSourceTypeToNullTargetType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertFromTypeDescriptorSourceTypeToNullTargetType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertNullSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid canConvertNullSourceType() {\r\n    assertThat(conversionService.canConvert(null, Integer.class)).isTrue();\r\n    assertThat(conversionService.canConvert(null, TypeDescriptor.valueOf(Integer.class))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertNullSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#canConvertNullSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convert()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid convert() {\r\n    conversionService.addConverterFactory(new StringToNumberConverterFactory());\r\n    assertThat(conversionService.convert(\"3\", Integer.class)).isEqualTo(3);\r\n}",
    "tailType": "method_code"
  }
]