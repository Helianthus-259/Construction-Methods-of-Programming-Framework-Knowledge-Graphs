[
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayInputStream#buffersIterator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#buffersIterator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Iterator<byte[]>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayInputStream#currentBuffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#currentBuffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayInputStream#currentBufferLength",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#currentBufferLength",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayInputStream#nextIndexInCurrentBuffer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#nextIndexInCurrentBuffer",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.FastByteArrayInputStream#totalBytesRead",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#totalBytesRead",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read() {\r\n    if (this.currentBuffer == null) {\r\n        // This stream doesn't have any data in it...\r\n        return -1;\r\n    }\r\n    if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\r\n        this.totalBytesRead++;\r\n        return this.currentBuffer[this.nextIndexInCurrentBuffer++] & 0xFF;\r\n    } else {\r\n        if (this.buffersIterator.hasNext()) {\r\n            this.currentBuffer = this.buffersIterator.next();\r\n            updateCurrentBufferLength();\r\n            this.nextIndexInCurrentBuffer = 0;\r\n        } else {\r\n            this.currentBuffer = null;\r\n        }\r\n        return read();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#read()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read(byte[] b) {\r\n    return read(b, 0, b.length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#read(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int read(byte[] b, int off, int len) {\r\n    if (off < 0 || len < 0 || len > b.length - off) {\r\n        throw new IndexOutOfBoundsException();\r\n    } else if (len == 0) {\r\n        return 0;\r\n    } else {\r\n        if (this.currentBuffer == null) {\r\n            // This stream doesn't have any data in it...\r\n            return -1;\r\n        } else {\r\n            if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\r\n                int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\r\n                System.arraycopy(this.currentBuffer, this.nextIndexInCurrentBuffer, b, off, bytesToCopy);\r\n                this.totalBytesRead += bytesToCopy;\r\n                this.nextIndexInCurrentBuffer += bytesToCopy;\r\n                int remaining = read(b, off + bytesToCopy, len - bytesToCopy);\r\n                return bytesToCopy + Math.max(remaining, 0);\r\n            } else {\r\n                if (this.buffersIterator.hasNext()) {\r\n                    this.currentBuffer = this.buffersIterator.next();\r\n                    updateCurrentBufferLength();\r\n                    this.nextIndexInCurrentBuffer = 0;\r\n                } else {\r\n                    this.currentBuffer = null;\r\n                }\r\n                return read(b, off, len);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FastByteArrayInputStream#read(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#read(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FastByteArrayInputStream#skip(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic long skip(long n) throws IOException {\r\n    if (n > Integer.MAX_VALUE) {\r\n        throw new IllegalArgumentException(\"n exceeds maximum (\" + Integer.MAX_VALUE + \"): \" + n);\r\n    } else if (n == 0) {\r\n        return 0;\r\n    } else if (n < 0) {\r\n        throw new IllegalArgumentException(\"n must be 0 or greater: \" + n);\r\n    }\r\n    int len = (int) n;\r\n    if (this.currentBuffer == null) {\r\n        // This stream doesn't have any data in it...\r\n        return 0;\r\n    } else {\r\n        if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {\r\n            int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);\r\n            this.totalBytesRead += bytesToSkip;\r\n            this.nextIndexInCurrentBuffer += bytesToSkip;\r\n            return (bytesToSkip + skip(len - bytesToSkip));\r\n        } else {\r\n            if (this.buffersIterator.hasNext()) {\r\n                this.currentBuffer = this.buffersIterator.next();\r\n                updateCurrentBufferLength();\r\n                this.nextIndexInCurrentBuffer = 0;\r\n            } else {\r\n                this.currentBuffer = null;\r\n            }\r\n            return skip(len);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  }
]