[
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#asByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a {@link ByteBuffer} representation of this data buffer. Data\r\n * between this {@code DataBuffer} and the returned {@code ByteBuffer} is\r\n * <strong>not</strong> shared.\r\n * @return this data buffer as a byte buffer\r\n * @since 6.0\r\n * @see #readableByteBuffers()\r\n * @see #writableByteBuffers()\r\n * @deprecated as of 6.0.5, in favor of {@link #toByteBuffer(ByteBuffer)}\r\n */\r\n@Deprecated(since = \"6.0.5\")\r\ndefault ByteBuffer toByteBuffer() {\r\n    return toByteBuffer(readPosition(), readableByteCount());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a {@link ByteBuffer} representation of a subsequence of this\r\n * buffer's bytes. Data between this {@code DataBuffer} and the returned\r\n * {@code ByteBuffer} is <strong>not</strong> shared.\r\n * @return this data buffer as a byte buffer\r\n * @since 6.0\r\n * @see #readableByteBuffers()\r\n * @see #writableByteBuffers()\r\n * @deprecated as of 6.0.5, in favor of\r\n * {@link #toByteBuffer(int, ByteBuffer, int, int)}\r\n */\r\n@Deprecated(since = \"6.0.5\")\r\nByteBuffer toByteBuffer(int index, int length);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copies this entire data buffer into the given destination\r\n * {@code ByteBuffer}, beginning at the current\r\n * {@linkplain #readPosition() reading position}, and the current\r\n * {@linkplain ByteBuffer#position() position} of destination byte buffer.\r\n * @param dest the destination byte buffer\r\n * @since 6.0.5\r\n */\r\ndefault void toByteBuffer(ByteBuffer dest) {\r\n    toByteBuffer(readPosition(), dest, dest.position(), readableByteCount());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(int,ByteBuffer,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copies the given length from this data buffer into the given destination\r\n * {@code ByteBuffer}, beginning at the given source position, and the\r\n * given destination position in the destination byte buffer.\r\n * @param srcPos the position of this data buffer from where copying should start\r\n * @param dest the destination byte buffer\r\n * @param destPos the position in {@code dest} to where copying should start\r\n * @param length the amount of data to copy\r\n * @since 6.0.5\r\n */\r\nvoid toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#toByteBuffer(int,ByteBuffer,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#readableByteBuffers()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a closeable iterator over each {@link ByteBuffer} in this data\r\n * buffer that can be read. Calling this method is more efficient than\r\n * {@link #toByteBuffer()}, as no data is copied. However, the byte buffers\r\n * provided can only be used during the iteration.\r\n * <p><b>Note</b> that the returned iterator must be used in a\r\n * try-with-resources clause or explicitly\r\n * {@linkplain ByteBufferIterator#close() closed}.\r\n * @return a closeable iterator over the readable byte buffers contained in this data buffer\r\n * @since 6.0.5\r\n */\r\nByteBufferIterator readableByteBuffers();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#readableByteBuffers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#writableByteBuffers()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a closeable iterator over each {@link ByteBuffer} in this data\r\n * buffer that can be written to. The byte buffers provided can only be used\r\n * during the iteration.\r\n * <p><b>Note</b> that the returned iterator must be used in a\r\n * try-with-resources clause or explicitly\r\n * {@linkplain ByteBufferIterator#close() closed}.\r\n * @return a closeable iterator over the writable byte buffers contained in this data buffer\r\n * @since 6.0.5\r\n */\r\nByteBufferIterator writableByteBuffers();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#writableByteBuffers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#asInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Expose this buffer's data as an {@link InputStream}. Both data and read position are\r\n * shared between the returned stream and this data buffer. The underlying buffer will\r\n * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released}\r\n * when the input stream is {@linkplain InputStream#close() closed}.\r\n * @return this data buffer as an input stream\r\n * @see #asInputStream(boolean)\r\n */\r\ndefault InputStream asInputStream() {\r\n    return new DataBufferInputStream(this, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#asInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#asInputStream(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Expose this buffer's data as an {@link InputStream}. Both data and read position are\r\n * shared between the returned stream and this data buffer.\r\n * @param releaseOnClose whether the underlying buffer will be\r\n * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is\r\n * {@linkplain InputStream#close() closed}.\r\n * @return this data buffer as an input stream\r\n * @since 5.0.4\r\n */\r\ndefault InputStream asInputStream(boolean releaseOnClose) {\r\n    return new DataBufferInputStream(this, releaseOnClose);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBuffer#asInputStream(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBuffer#asOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Expose this buffer's data as an {@link OutputStream}. Both data and write position are\r\n * shared between the returned stream and this data buffer.\r\n * @return this data buffer as an output stream\r\n */\r\ndefault OutputStream asOutputStream() {\r\n    return new DataBufferOutputStream(this);\r\n}",
    "tailType": "method_code"
  }
]