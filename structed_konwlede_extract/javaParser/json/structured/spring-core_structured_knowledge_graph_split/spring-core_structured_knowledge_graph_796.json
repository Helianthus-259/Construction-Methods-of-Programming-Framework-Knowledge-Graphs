[
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#getAttributeValue(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected <T> T getAttributeValue(String attributeName, Class<T> type) {\r\n    throw new NoSuchElementException(\"Unable to get attribute value for missing annotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation#getAttributeValue(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#getAttributeValue(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#createSynthesizedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected A createSynthesizedAnnotation() {\r\n    throw new NoSuchElementException(\"Unable to synthesize missing annotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation#createSynthesizedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#createSynthesizedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#getInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\nstatic <A extends Annotation> MergedAnnotation<A> getInstance() {\r\n    return (MergedAnnotation<A>) INSTANCE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation#getInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#getInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractMergedAnnotation",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.OrderUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.annotation.MergedAnnotations.SearchStrategy;\nimport org.springframework.util.ConcurrentReferenceHashMap;\n\n/**\n * General utility for determining the order of an object based on its type declaration.\n * Handles Spring's {@link Order} annotation as well as {@link jakarta.annotation.Priority}.\n *\n * @author Stephane Nicoll\n * @author Juergen Hoeller\n * @since 4.1\n * @see Order\n * @see jakarta.annotation.Priority\n */\npublic abstract class OrderUtils {\n\n\t/** Cache marker for a non-annotated Class. */\n\tprivate static final Object NOT_ANNOTATED = new Object();\n\n\tprivate static final String JAKARTA_PRIORITY_ANNOTATION = \"jakarta.annotation.Priority\";\n\n\t/** Cache for @Order value (or NOT_ANNOTATED marker) per Class. */\n\tstatic final Map<AnnotatedElement, Object> orderCache = new ConcurrentReferenceHashMap<>(64);\n\n\n\t/**\n\t * Return the order on the specified {@code type}, or the specified\n\t * default value if none can be found.\n\t * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\n\t * @param type the type to handle\n\t * @return the priority value, or the specified default order if none can be found\n\t * @since 5.0\n\t * @see #getPriority(Class)\n\t */\n\tpublic static int getOrder(Class<?> type, int defaultOrder) {\n\t\tInteger order = getOrder(type);\n\t\treturn (order != null ? order : defaultOrder);\n\t}\n\n\t/**\n\t * Return the order on the specified {@code type}, or the specified\n\t * default value if none can be found.\n\t * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\n\t * @param type the type to handle\n\t * @return the priority value, or the specified default order if none can be found\n\t * @see #getPriority(Class)\n\t */\n\tpublic static @Nullable Integer getOrder(Class<?> type, @Nullable Integer defaultOrder) {\n\t\tInteger order = getOrder(type);\n\t\treturn (order != null ? order : defaultOrder);\n\t}\n\n\t/**\n\t * Return the order on the specified {@code type}.\n\t * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\n\t * @param type the type to handle\n\t * @return the order value, or {@code null} if none can be found\n\t * @see #getPriority(Class)\n\t */\n\tpublic static @Nullable Integer getOrder(Class<?> type) {\n\t\treturn getOrder((AnnotatedElement) type);\n\t}\n\n\t/**\n\t * Return the order declared on the specified {@code element}.\n\t * <p>Takes care of {@link Order @Order} and {@code @jakarta.annotation.Priority}.\n\t * @param element the annotated element (for example, type or method)\n\t * @return the order value, or {@code null} if none can be found\n\t * @since 5.3\n\t */\n\tpublic static @Nullable Integer getOrder(AnnotatedElement element) {\n\t\treturn getOrderFromAnnotations(element, MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY));\n\t}\n\n\t/**\n\t * Return the order from the specified annotations collection.\n\t * <p>Takes care of {@link Order @Order} and\n\t * {@code @jakarta.annotation.Priority}.\n\t * @param element the source element\n\t * @param annotations the annotation to consider\n\t * @return the order value, or {@code null} if none can be found\n\t */\n\tstatic @Nullable Integer getOrderFromAnnotations(AnnotatedElement element, MergedAnnotations annotations) {\n\t\tif (!(element instanceof Class)) {\n\t\t\treturn findOrder(annotations);\n\t\t}\n\t\tObject cached = orderCache.get(element);\n\t\tif (cached != null) {\n\t\t\treturn (cached instanceof Integer integer ? integer : null);\n\t\t}\n\t\tInteger result = findOrder(annotations);\n\t\torderCache.put(element, result != null ? result : NOT_ANNOTATED);\n\t\treturn result;\n\t}\n\n\tprivate static @Nullable Integer findOrder(MergedAnnotations annotations) {\n\t\tMergedAnnotation<Order> orderAnnotation = annotations.get(Order.class);\n\t\tif (orderAnnotation.isPresent()) {\n\t\t\treturn orderAnnotation.getInt(MergedAnnotation.VALUE);\n\t\t}\n\t\tMergedAnnotation<?> priorityAnnotation = annotations.get(JAKARTA_PRIORITY_ANNOTATION);\n\t\tif (priorityAnnotation.isPresent()) {\n\t\t\treturn priorityAnnotation.getInt(MergedAnnotation.VALUE);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return the value of the {@code jakarta.annotation.Priority} annotation\n\t * declared on the specified type, or {@code null} if none.\n\t * @param type the type to handle\n\t * @return the priority value if the annotation is declared, or {@code null} if none\n\t */\n\tpublic static @Nullable Integer getPriority(Class<?> type) {\n\t\treturn MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).get(JAKARTA_PRIORITY_ANNOTATION)\n\t\t\t\t.getValue(MergedAnnotation.VALUE, Integer.class).orElse(null);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.OrderUtils#NOT_ANNOTATED",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#NOT_ANNOTATED",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.OrderUtils#JAKARTA_PRIORITY_ANNOTATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#JAKARTA_PRIORITY_ANNOTATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.OrderUtils#orderCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.OrderUtils#orderCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<AnnotatedElement, Object>",
    "tailType": "type"
  }
]