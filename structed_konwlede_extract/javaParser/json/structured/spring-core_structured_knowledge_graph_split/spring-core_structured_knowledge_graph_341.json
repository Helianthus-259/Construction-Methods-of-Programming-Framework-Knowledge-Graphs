[
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeBeyondBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyRangeBeyondBuffer() throws Exception {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    ByteArrayInputStream in = new ByteArrayInputStream(bytes);\r\n    StreamUtils.copyRange(in, out, 0, 8200);\r\n    assertThat(in.available()).isEqualTo(1);\r\n    assertThat(out.toByteArray()).isEqualTo(Arrays.copyOfRange(bytes, 0, 8201));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyRangeBeyondBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeBeyondBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeBeyondAvailable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyRangeBeyondAvailable() throws Exception {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    ByteArrayInputStream in = new ByteArrayInputStream(bytes);\r\n    StreamUtils.copyRange(in, out, 0, 8300);\r\n    assertThat(in.available()).isEqualTo(0);\r\n    assertThat(out.toByteArray()).isEqualTo(Arrays.copyOfRange(bytes, 0, 8202));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyRangeBeyondAvailable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeBeyondAvailable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#nonClosingInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nonClosingInputStream() throws Exception {\r\n    InputStream source = mock();\r\n    InputStream nonClosing = StreamUtils.nonClosing(source);\r\n    nonClosing.read();\r\n    nonClosing.read(bytes);\r\n    nonClosing.read(bytes, 1, 2);\r\n    nonClosing.close();\r\n    InOrder ordered = inOrder(source);\r\n    ordered.verify(source).read();\r\n    ordered.verify(source).read(bytes, 0, bytes.length);\r\n    ordered.verify(source).read(bytes, 1, 2);\r\n    ordered.verify(source, never()).close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#nonClosingInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#nonClosingInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#nonClosingOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nonClosingOutputStream() throws Exception {\r\n    OutputStream source = mock();\r\n    OutputStream nonClosing = StreamUtils.nonClosing(source);\r\n    nonClosing.write(1);\r\n    nonClosing.write(bytes);\r\n    nonClosing.write(bytes, 1, 2);\r\n    nonClosing.close();\r\n    InOrder ordered = inOrder(source);\r\n    ordered.verify(source).write(1);\r\n    ordered.verify(source).write(bytes, 0, bytes.length);\r\n    ordered.verify(source).write(bytes, 1, 2);\r\n    ordered.verify(source, never()).close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#nonClosingOutputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#nonClosingOutputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassReader#accept(ClassVisitor,Attribute[],int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this\r\n * {@link ClassReader}.\r\n *\r\n * @param classVisitor the visitor that must visit this class.\r\n * @param attributePrototypes prototypes of the attributes that must be parsed during the visit of\r\n *     the class. Any attribute whose type is not equal to the type of one the prototypes will not\r\n *     be parsed: its byte array value will be passed unchanged to the ClassWriter. <i>This may\r\n *     corrupt it if this value contains references to the constant pool, or has syntactic or\r\n *     semantic links with a class element that has been transformed by a class adapter between\r\n *     the reader and the writer</i>.\r\n * @param parsingOptions the options to use to parse this class. One or more of {@link\r\n *     #SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.\r\n */\r\npublic void accept(final ClassVisitor classVisitor, final Attribute[] attributePrototypes, final int parsingOptions) {\r\n    Context context = new Context();\r\n    context.attributePrototypes = attributePrototypes;\r\n    context.parsingOptions = parsingOptions;\r\n    context.charBuffer = new char[maxStringLength];\r\n    // Read the access_flags, this_class, super_class, interface_count and interfaces fields.\r\n    char[] charBuffer = context.charBuffer;\r\n    int currentOffset = header;\r\n    int accessFlags = readUnsignedShort(currentOffset);\r\n    String thisClass = readClass(currentOffset + 2, charBuffer);\r\n    String superClass = readClass(currentOffset + 4, charBuffer);\r\n    String[] interfaces = new String[readUnsignedShort(currentOffset + 6)];\r\n    currentOffset += 8;\r\n    for (int i = 0; i < interfaces.length; ++i) {\r\n        interfaces[i] = readClass(currentOffset, charBuffer);\r\n        currentOffset += 2;\r\n    }\r\n    // Read the class attributes (the variables are ordered as in Section 4.7 of the JVMS).\r\n    // Attribute offsets exclude the attribute_name_index and attribute_length fields.\r\n    // - The offset of the InnerClasses attribute, or 0.\r\n    int innerClassesOffset = 0;\r\n    // - The offset of the EnclosingMethod attribute, or 0.\r\n    int enclosingMethodOffset = 0;\r\n    // - The string corresponding to the Signature attribute, or null.\r\n    String signature = null;\r\n    // - The string corresponding to the SourceFile attribute, or null.\r\n    String sourceFile = null;\r\n    // - The string corresponding to the SourceDebugExtension attribute, or null.\r\n    String sourceDebugExtension = null;\r\n    // - The offset of the RuntimeVisibleAnnotations attribute, or 0.\r\n    int runtimeVisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.\r\n    int runtimeInvisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.\r\n    int runtimeVisibleTypeAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.\r\n    int runtimeInvisibleTypeAnnotationsOffset = 0;\r\n    // - The offset of the Module attribute, or 0.\r\n    int moduleOffset = 0;\r\n    // - The offset of the ModulePackages attribute, or 0.\r\n    int modulePackagesOffset = 0;\r\n    // - The string corresponding to the ModuleMainClass attribute, or null.\r\n    String moduleMainClass = null;\r\n    // - The string corresponding to the NestHost attribute, or null.\r\n    String nestHostClass = null;\r\n    // - The offset of the NestMembers attribute, or 0.\r\n    int nestMembersOffset = 0;\r\n    // - The offset of the PermittedSubclasses attribute, or 0\r\n    int permittedSubclassesOffset = 0;\r\n    // - The offset of the Record attribute, or 0.\r\n    int recordOffset = 0;\r\n    // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).\r\n    //   This list in the <i>reverse order</i> or their order in the ClassFile structure.\r\n    Attribute attributes = null;\r\n    int currentAttributeOffset = getFirstAttributeOffset();\r\n    for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) {\r\n        // Read the attribute_info's attribute_name and attribute_length fields.\r\n        String attributeName = readUTF8(currentAttributeOffset, charBuffer);\r\n        int attributeLength = readInt(currentAttributeOffset + 2);\r\n        currentAttributeOffset += 6;\r\n        // The tests are sorted in decreasing frequency order (based on frequencies observed on\r\n        // typical classes).\r\n        if (Constants.SOURCE_FILE.equals(attributeName)) {\r\n            sourceFile = readUTF8(currentAttributeOffset, charBuffer);\r\n        } else if (Constants.INNER_CLASSES.equals(attributeName)) {\r\n            innerClassesOffset = currentAttributeOffset;\r\n        } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {\r\n            enclosingMethodOffset = currentAttributeOffset;\r\n        } else if (Constants.NEST_HOST.equals(attributeName)) {\r\n            nestHostClass = readClass(currentAttributeOffset, charBuffer);\r\n        } else if (Constants.NEST_MEMBERS.equals(attributeName)) {\r\n            nestMembersOffset = currentAttributeOffset;\r\n        } else if (Constants.PERMITTED_SUBCLASSES.equals(attributeName)) {\r\n            permittedSubclassesOffset = currentAttributeOffset;\r\n        } else if (Constants.SIGNATURE.equals(attributeName)) {\r\n            signature = readUTF8(currentAttributeOffset, charBuffer);\r\n        } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleAnnotationsOffset = currentAttributeOffset;\r\n        } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset;\r\n        } else if (Constants.DEPRECATED.equals(attributeName)) {\r\n            accessFlags |= Opcodes.ACC_DEPRECATED;\r\n        } else if (Constants.SYNTHETIC.equals(attributeName)) {\r\n            accessFlags |= Opcodes.ACC_SYNTHETIC;\r\n        } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {\r\n            if (attributeLength > classFileBuffer.length - currentAttributeOffset) {\r\n                throw new IllegalArgumentException();\r\n            }\r\n            sourceDebugExtension = readUtf(currentAttributeOffset, attributeLength, new char[attributeLength]);\r\n        } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleAnnotationsOffset = currentAttributeOffset;\r\n        } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset;\r\n        } else if (Constants.RECORD.equals(attributeName)) {\r\n            recordOffset = currentAttributeOffset;\r\n            accessFlags |= Opcodes.ACC_RECORD;\r\n        } else if (Constants.MODULE.equals(attributeName)) {\r\n            moduleOffset = currentAttributeOffset;\r\n        } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {\r\n            moduleMainClass = readClass(currentAttributeOffset, charBuffer);\r\n        } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {\r\n            modulePackagesOffset = currentAttributeOffset;\r\n        } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {\r\n            // The BootstrapMethods attribute is read in the constructor.\r\n            Attribute attribute = readAttribute(attributePrototypes, attributeName, currentAttributeOffset, attributeLength, charBuffer, -1, null);\r\n            attribute.nextAttribute = attributes;\r\n            attributes = attribute;\r\n        }\r\n        currentAttributeOffset += attributeLength;\r\n    }\r\n    // Visit the class declaration. The minor_version and major_version fields start 6 bytes before\r\n    // the first constant pool entry, which itself starts at cpInfoOffsets[1] - 1 (by definition).\r\n    classVisitor.visit(readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces);\r\n    // Visit the SourceFile and SourceDebugExtenstion attributes.\r\n    if ((parsingOptions & SKIP_DEBUG) == 0 && (sourceFile != null || sourceDebugExtension != null)) {\r\n        classVisitor.visitSource(sourceFile, sourceDebugExtension);\r\n    }\r\n    // Visit the Module, ModulePackages and ModuleMainClass attributes.\r\n    if (moduleOffset != 0) {\r\n        readModuleAttributes(classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass);\r\n    }\r\n    // Visit the NestHost attribute.\r\n    if (nestHostClass != null) {\r\n        classVisitor.visitNestHost(nestHostClass);\r\n    }\r\n    // Visit the EnclosingMethod attribute.\r\n    if (enclosingMethodOffset != 0) {\r\n        String className = readClass(enclosingMethodOffset, charBuffer);\r\n        int methodIndex = readUnsignedShort(enclosingMethodOffset + 2);\r\n        String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer);\r\n        String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer);\r\n        classVisitor.visitOuterClass(className, name, type);\r\n    }\r\n    // Visit the RuntimeVisibleAnnotations attribute.\r\n    if (runtimeVisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(classVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleAnnotations attribute.\r\n    if (runtimeInvisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(classVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeVisibleTypeAnnotations attribute.\r\n    if (runtimeVisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(classVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleTypeAnnotations attribute.\r\n    if (runtimeInvisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(classVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the non standard attributes.\r\n    while (attributes != null) {\r\n        // Copy and reset the nextAttribute field so that it can also be used in ClassWriter.\r\n        Attribute nextAttribute = attributes.nextAttribute;\r\n        attributes.nextAttribute = null;\r\n        classVisitor.visitAttribute(attributes);\r\n        attributes = nextAttribute;\r\n    }\r\n    // Visit the NestedMembers attribute.\r\n    if (nestMembersOffset != 0) {\r\n        int numberOfNestMembers = readUnsignedShort(nestMembersOffset);\r\n        int currentNestMemberOffset = nestMembersOffset + 2;\r\n        while (numberOfNestMembers-- > 0) {\r\n            classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer));\r\n            currentNestMemberOffset += 2;\r\n        }\r\n    }\r\n    // Visit the PermittedSubclasses attribute.\r\n    if (permittedSubclassesOffset != 0) {\r\n        int numberOfPermittedSubclasses = readUnsignedShort(permittedSubclassesOffset);\r\n        int currentPermittedSubclassesOffset = permittedSubclassesOffset + 2;\r\n        while (numberOfPermittedSubclasses-- > 0) {\r\n            classVisitor.visitPermittedSubclass(readClass(currentPermittedSubclassesOffset, charBuffer));\r\n            currentPermittedSubclassesOffset += 2;\r\n        }\r\n    }\r\n    // Visit the InnerClasses attribute.\r\n    if (innerClassesOffset != 0) {\r\n        int numberOfClasses = readUnsignedShort(innerClassesOffset);\r\n        int currentClassesOffset = innerClassesOffset + 2;\r\n        while (numberOfClasses-- > 0) {\r\n            classVisitor.visitInnerClass(readClass(currentClassesOffset, charBuffer), readClass(currentClassesOffset + 2, charBuffer), readUTF8(currentClassesOffset + 4, charBuffer), readUnsignedShort(currentClassesOffset + 6));\r\n            currentClassesOffset += 8;\r\n        }\r\n    }\r\n    // Visit Record components.\r\n    if (recordOffset != 0) {\r\n        int recordComponentsCount = readUnsignedShort(recordOffset);\r\n        recordOffset += 2;\r\n        while (recordComponentsCount-- > 0) {\r\n            recordOffset = readRecordComponent(classVisitor, context, recordOffset);\r\n        }\r\n    }\r\n    // Visit the fields and methods.\r\n    int fieldsCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (fieldsCount-- > 0) {\r\n        currentOffset = readField(classVisitor, context, currentOffset);\r\n    }\r\n    int methodsCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (methodsCount-- > 0) {\r\n        currentOffset = readMethod(classVisitor, context, currentOffset);\r\n    }\r\n    // Visit the end of the class.\r\n    classVisitor.visitEnd();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#accept(ClassVisitor,Attribute[],int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readModuleAttributes(ClassVisitor,Context,int,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// ----------------------------------------------------------------------------------------------\r\n// Methods to parse modules, fields and methods\r\n// ----------------------------------------------------------------------------------------------\r\n/**\r\n * Reads the Module, ModulePackages and ModuleMainClass attributes and visit them.\r\n *\r\n * @param classVisitor the current class visitor\r\n * @param context information about the class being parsed.\r\n * @param moduleOffset the offset of the Module attribute (excluding the attribute_info's\r\n *     attribute_name_index and attribute_length fields).\r\n * @param modulePackagesOffset the offset of the ModulePackages attribute (excluding the\r\n *     attribute_info's attribute_name_index and attribute_length fields), or 0.\r\n * @param moduleMainClass the string corresponding to the ModuleMainClass attribute, or {@literal\r\n *     null}.\r\n */\r\nprivate void readModuleAttributes(final ClassVisitor classVisitor, final Context context, final int moduleOffset, final int modulePackagesOffset, final String moduleMainClass) {\r\n    char[] buffer = context.charBuffer;\r\n    // Read the module_name_index, module_flags and module_version_index fields and visit them.\r\n    int currentOffset = moduleOffset;\r\n    String moduleName = readModule(currentOffset, buffer);\r\n    int moduleFlags = readUnsignedShort(currentOffset + 2);\r\n    String moduleVersion = readUTF8(currentOffset + 4, buffer);\r\n    currentOffset += 6;\r\n    ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion);\r\n    if (moduleVisitor == null) {\r\n        return;\r\n    }\r\n    // Visit the ModuleMainClass attribute.\r\n    if (moduleMainClass != null) {\r\n        moduleVisitor.visitMainClass(moduleMainClass);\r\n    }\r\n    // Visit the ModulePackages attribute.\r\n    if (modulePackagesOffset != 0) {\r\n        int packageCount = readUnsignedShort(modulePackagesOffset);\r\n        int currentPackageOffset = modulePackagesOffset + 2;\r\n        while (packageCount-- > 0) {\r\n            moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer));\r\n            currentPackageOffset += 2;\r\n        }\r\n    }\r\n    // Read the 'requires_count' and 'requires' fields.\r\n    int requiresCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (requiresCount-- > 0) {\r\n        // Read the requires_index, requires_flags and requires_version fields and visit them.\r\n        String requires = readModule(currentOffset, buffer);\r\n        int requiresFlags = readUnsignedShort(currentOffset + 2);\r\n        String requiresVersion = readUTF8(currentOffset + 4, buffer);\r\n        currentOffset += 6;\r\n        moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion);\r\n    }\r\n    // Read the 'exports_count' and 'exports' fields.\r\n    int exportsCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (exportsCount-- > 0) {\r\n        // Read the exports_index, exports_flags, exports_to_count and exports_to_index fields\r\n        // and visit them.\r\n        String exports = readPackage(currentOffset, buffer);\r\n        int exportsFlags = readUnsignedShort(currentOffset + 2);\r\n        int exportsToCount = readUnsignedShort(currentOffset + 4);\r\n        currentOffset += 6;\r\n        String[] exportsTo = null;\r\n        if (exportsToCount != 0) {\r\n            exportsTo = new String[exportsToCount];\r\n            for (int i = 0; i < exportsToCount; ++i) {\r\n                exportsTo[i] = readModule(currentOffset, buffer);\r\n                currentOffset += 2;\r\n            }\r\n        }\r\n        moduleVisitor.visitExport(exports, exportsFlags, exportsTo);\r\n    }\r\n    // Reads the 'opens_count' and 'opens' fields.\r\n    int opensCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (opensCount-- > 0) {\r\n        // Read the opens_index, opens_flags, opens_to_count and opens_to_index fields and visit them.\r\n        String opens = readPackage(currentOffset, buffer);\r\n        int opensFlags = readUnsignedShort(currentOffset + 2);\r\n        int opensToCount = readUnsignedShort(currentOffset + 4);\r\n        currentOffset += 6;\r\n        String[] opensTo = null;\r\n        if (opensToCount != 0) {\r\n            opensTo = new String[opensToCount];\r\n            for (int i = 0; i < opensToCount; ++i) {\r\n                opensTo[i] = readModule(currentOffset, buffer);\r\n                currentOffset += 2;\r\n            }\r\n        }\r\n        moduleVisitor.visitOpen(opens, opensFlags, opensTo);\r\n    }\r\n    // Read the 'uses_count' and 'uses' fields.\r\n    int usesCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (usesCount-- > 0) {\r\n        moduleVisitor.visitUse(readClass(currentOffset, buffer));\r\n        currentOffset += 2;\r\n    }\r\n    // Read the 'provides_count' and 'provides' fields.\r\n    int providesCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (providesCount-- > 0) {\r\n        // Read the provides_index, provides_with_count and provides_with_index fields and visit them.\r\n        String provides = readClass(currentOffset, buffer);\r\n        int providesWithCount = readUnsignedShort(currentOffset + 2);\r\n        currentOffset += 4;\r\n        String[] providesWith = new String[providesWithCount];\r\n        for (int i = 0; i < providesWithCount; ++i) {\r\n            providesWith[i] = readClass(currentOffset, buffer);\r\n            currentOffset += 2;\r\n        }\r\n        moduleVisitor.visitProvide(provides, providesWith);\r\n    }\r\n    // Visit the end of the module attributes.\r\n    moduleVisitor.visitEnd();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readModuleAttributes(ClassVisitor,Context,int,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readRecordComponent(ClassVisitor,Context,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a record component and visit it.\r\n *\r\n * @param classVisitor the current class visitor\r\n * @param context information about the class being parsed.\r\n * @param recordComponentOffset the offset of the current record component.\r\n * @return the offset of the first byte following the record component.\r\n */\r\nprivate int readRecordComponent(final ClassVisitor classVisitor, final Context context, final int recordComponentOffset) {\r\n    char[] charBuffer = context.charBuffer;\r\n    int currentOffset = recordComponentOffset;\r\n    String name = readUTF8(currentOffset, charBuffer);\r\n    String descriptor = readUTF8(currentOffset + 2, charBuffer);\r\n    currentOffset += 4;\r\n    // Read the record component attributes (the variables are ordered as in Section 4.7 of the\r\n    // JVMS).\r\n    // Attribute offsets exclude the attribute_name_index and attribute_length fields.\r\n    // - The string corresponding to the Signature attribute, or null.\r\n    String signature = null;\r\n    // - The offset of the RuntimeVisibleAnnotations attribute, or 0.\r\n    int runtimeVisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.\r\n    int runtimeInvisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.\r\n    int runtimeVisibleTypeAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.\r\n    int runtimeInvisibleTypeAnnotationsOffset = 0;\r\n    // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).\r\n    //   This list in the <i>reverse order</i> or their order in the ClassFile structure.\r\n    Attribute attributes = null;\r\n    int attributesCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (attributesCount-- > 0) {\r\n        // Read the attribute_info's attribute_name and attribute_length fields.\r\n        String attributeName = readUTF8(currentOffset, charBuffer);\r\n        int attributeLength = readInt(currentOffset + 2);\r\n        currentOffset += 6;\r\n        // The tests are sorted in decreasing frequency order (based on frequencies observed on\r\n        // typical classes).\r\n        if (Constants.SIGNATURE.equals(attributeName)) {\r\n            signature = readUTF8(currentOffset, charBuffer);\r\n        } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleTypeAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleTypeAnnotationsOffset = currentOffset;\r\n        } else {\r\n            Attribute attribute = readAttribute(context.attributePrototypes, attributeName, currentOffset, attributeLength, charBuffer, -1, null);\r\n            attribute.nextAttribute = attributes;\r\n            attributes = attribute;\r\n        }\r\n        currentOffset += attributeLength;\r\n    }\r\n    RecordComponentVisitor recordComponentVisitor = classVisitor.visitRecordComponent(name, descriptor, signature);\r\n    if (recordComponentVisitor == null) {\r\n        return currentOffset;\r\n    }\r\n    // Visit the RuntimeVisibleAnnotations attribute.\r\n    if (runtimeVisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(recordComponentVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleAnnotations attribute.\r\n    if (runtimeInvisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(recordComponentVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeVisibleTypeAnnotations attribute.\r\n    if (runtimeVisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(recordComponentVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleTypeAnnotations attribute.\r\n    if (runtimeInvisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(recordComponentVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the non standard attributes.\r\n    while (attributes != null) {\r\n        // Copy and reset the nextAttribute field so that it can also be used in FieldWriter.\r\n        Attribute nextAttribute = attributes.nextAttribute;\r\n        attributes.nextAttribute = null;\r\n        recordComponentVisitor.visitAttribute(attributes);\r\n        attributes = nextAttribute;\r\n    }\r\n    // Visit the end of the field.\r\n    recordComponentVisitor.visitEnd();\r\n    return currentOffset;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readRecordComponent(ClassVisitor,Context,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassReader#readField(ClassVisitor,Context,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Reads a JVMS field_info structure and makes the given visitor visit it.\r\n *\r\n * @param classVisitor the visitor that must visit the field.\r\n * @param context information about the class being parsed.\r\n * @param fieldInfoOffset the start offset of the field_info structure.\r\n * @return the offset of the first byte following the field_info structure.\r\n */\r\nprivate int readField(final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {\r\n    char[] charBuffer = context.charBuffer;\r\n    // Read the access_flags, name_index and descriptor_index fields.\r\n    int currentOffset = fieldInfoOffset;\r\n    int accessFlags = readUnsignedShort(currentOffset);\r\n    String name = readUTF8(currentOffset + 2, charBuffer);\r\n    String descriptor = readUTF8(currentOffset + 4, charBuffer);\r\n    currentOffset += 6;\r\n    // Read the field attributes (the variables are ordered as in Section 4.7 of the JVMS).\r\n    // Attribute offsets exclude the attribute_name_index and attribute_length fields.\r\n    // - The value corresponding to the ConstantValue attribute, or null.\r\n    Object constantValue = null;\r\n    // - The string corresponding to the Signature attribute, or null.\r\n    String signature = null;\r\n    // - The offset of the RuntimeVisibleAnnotations attribute, or 0.\r\n    int runtimeVisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.\r\n    int runtimeInvisibleAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.\r\n    int runtimeVisibleTypeAnnotationsOffset = 0;\r\n    // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.\r\n    int runtimeInvisibleTypeAnnotationsOffset = 0;\r\n    // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).\r\n    //   This list in the <i>reverse order</i> or their order in the ClassFile structure.\r\n    Attribute attributes = null;\r\n    int attributesCount = readUnsignedShort(currentOffset);\r\n    currentOffset += 2;\r\n    while (attributesCount-- > 0) {\r\n        // Read the attribute_info's attribute_name and attribute_length fields.\r\n        String attributeName = readUTF8(currentOffset, charBuffer);\r\n        int attributeLength = readInt(currentOffset + 2);\r\n        currentOffset += 6;\r\n        // The tests are sorted in decreasing frequency order (based on frequencies observed on\r\n        // typical classes).\r\n        if (Constants.CONSTANT_VALUE.equals(attributeName)) {\r\n            int constantvalueIndex = readUnsignedShort(currentOffset);\r\n            constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer);\r\n        } else if (Constants.SIGNATURE.equals(attributeName)) {\r\n            signature = readUTF8(currentOffset, charBuffer);\r\n        } else if (Constants.DEPRECATED.equals(attributeName)) {\r\n            accessFlags |= Opcodes.ACC_DEPRECATED;\r\n        } else if (Constants.SYNTHETIC.equals(attributeName)) {\r\n            accessFlags |= Opcodes.ACC_SYNTHETIC;\r\n        } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeVisibleTypeAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleAnnotationsOffset = currentOffset;\r\n        } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {\r\n            runtimeInvisibleTypeAnnotationsOffset = currentOffset;\r\n        } else {\r\n            Attribute attribute = readAttribute(context.attributePrototypes, attributeName, currentOffset, attributeLength, charBuffer, -1, null);\r\n            attribute.nextAttribute = attributes;\r\n            attributes = attribute;\r\n        }\r\n        currentOffset += attributeLength;\r\n    }\r\n    // Visit the field declaration.\r\n    FieldVisitor fieldVisitor = classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue);\r\n    if (fieldVisitor == null) {\r\n        return currentOffset;\r\n    }\r\n    // Visit the RuntimeVisibleAnnotations attribute.\r\n    if (runtimeVisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(fieldVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleAnnotations attribute.\r\n    if (runtimeInvisibleAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(fieldVisitor.visitAnnotation(annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeVisibleTypeAnnotations attribute.\r\n    if (runtimeVisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(fieldVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            true), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the RuntimeInvisibleTypeAnnotations attribute.\r\n    if (runtimeInvisibleTypeAnnotationsOffset != 0) {\r\n        int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);\r\n        int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;\r\n        while (numAnnotations-- > 0) {\r\n            // Parse the target_type, target_info and target_path fields.\r\n            currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);\r\n            // Parse the type_index field.\r\n            String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);\r\n            currentAnnotationOffset += 2;\r\n            // Parse num_element_value_pairs and element_value_pairs and visit these values.\r\n            currentAnnotationOffset = readElementValues(fieldVisitor.visitTypeAnnotation(context.currentTypeAnnotationTarget, context.currentTypeAnnotationTargetPath, annotationDescriptor, /* visible= */\r\n            false), currentAnnotationOffset, /* named= */\r\n            true, charBuffer);\r\n        }\r\n    }\r\n    // Visit the non standard attributes.\r\n    while (attributes != null) {\r\n        // Copy and reset the nextAttribute field so that it can also be used in FieldWriter.\r\n        Attribute nextAttribute = attributes.nextAttribute;\r\n        attributes.nextAttribute = null;\r\n        fieldVisitor.visitAttribute(attributes);\r\n        attributes = nextAttribute;\r\n    }\r\n    // Visit the end of the field.\r\n    fieldVisitor.visitEnd();\r\n    return currentOffset;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#readField(ClassVisitor,Context,int)",
    "tailType": "method"
  }
]