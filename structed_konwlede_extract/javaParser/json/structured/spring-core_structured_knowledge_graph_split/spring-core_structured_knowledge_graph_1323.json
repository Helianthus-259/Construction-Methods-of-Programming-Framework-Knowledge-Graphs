[
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#containsValue(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#containsValue(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#get(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V get(Object key) {\r\n    if (key instanceof String string) {\r\n        String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey(string));\r\n        if (caseInsensitiveKey != null) {\r\n            return this.targetMap.get(caseInsensitiveKey);\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#get(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#get(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#get(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V getOrDefault(Object key, V defaultValue) {\r\n    if (key instanceof String string) {\r\n        String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey(string));\r\n        if (caseInsensitiveKey != null) {\r\n            return this.targetMap.get(caseInsensitiveKey);\r\n        }\r\n    }\r\n    return defaultValue;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#getOrDefault(Object,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#put(String,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V put(String key, @Nullable V value) {\r\n    String oldKey = this.caseInsensitiveKeys.put(convertKey(key), key);\r\n    V oldKeyValue = null;\r\n    if (oldKey != null && !oldKey.equals(key)) {\r\n        oldKeyValue = this.targetMap.remove(oldKey);\r\n    }\r\n    V oldValue = this.targetMap.put(key, value);\r\n    return (oldKeyValue != null ? oldKeyValue : oldValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#put(String,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#put(String,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#put(String,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#putAll(Map<? extends String,? extends V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void putAll(Map<? extends String, ? extends V> map) {\r\n    if (map.isEmpty()) {\r\n        return;\r\n    }\r\n    map.forEach(this::put);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#putAll(Map<? extends String,? extends V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#putAll(Map<? extends String,? extends V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#putIfAbsent(String,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V putIfAbsent(String key, @Nullable V value) {\r\n    String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key);\r\n    if (oldKey != null) {\r\n        V oldKeyValue = this.targetMap.get(oldKey);\r\n        if (oldKeyValue != null) {\r\n            return oldKeyValue;\r\n        } else {\r\n            key = oldKey;\r\n        }\r\n    }\r\n    return this.targetMap.putIfAbsent(key, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.LinkedCaseInsensitiveMap#putIfAbsent(String,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.LinkedCaseInsensitiveMap#putIfAbsent(String,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]