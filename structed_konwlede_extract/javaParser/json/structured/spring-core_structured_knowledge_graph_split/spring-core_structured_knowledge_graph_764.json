[
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#JAVA_LANG_ANNOTATION_FILTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationUtils#defaultValuesCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#defaultValuesCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Class<? extends Annotation>, Map<String, DefaultValueHolder>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,Collection<Class<? extends Annotation>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class is a candidate for carrying one of the specified\r\n * annotations (at type, method or field level).\r\n * @param clazz the class to introspect\r\n * @param annotationTypes the searchable annotation types\r\n * @return {@code false} if the class is known to have no such annotations at any level;\r\n * {@code true} otherwise. Callers will usually perform full method/field introspection\r\n * if {@code true} is being returned here.\r\n * @since 5.2\r\n * @see #isCandidateClass(Class, Class)\r\n * @see #isCandidateClass(Class, String)\r\n */\r\npublic static boolean isCandidateClass(Class<?> clazz, Collection<Class<? extends Annotation>> annotationTypes) {\r\n    for (Class<? extends Annotation> annotationType : annotationTypes) {\r\n        if (isCandidateClass(clazz, annotationType)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,Collection<Class<? extends Annotation>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class is a candidate for carrying the specified annotation\r\n * (at type, method or field level).\r\n * @param clazz the class to introspect\r\n * @param annotationType the searchable annotation type\r\n * @return {@code false} if the class is known to have no such annotations at any level;\r\n * {@code true} otherwise. Callers will usually perform full method/field introspection\r\n * if {@code true} is being returned here.\r\n * @since 5.2\r\n * @see #isCandidateClass(Class, String)\r\n */\r\npublic static boolean isCandidateClass(Class<?> clazz, @Nullable Class<? extends Annotation> annotationType) {\r\n    return (annotationType != null && isCandidateClass(clazz, annotationType.getName()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class is a candidate for carrying the specified annotation\r\n * (at type, method or field level).\r\n * @param clazz the class to introspect\r\n * @param annotationName the fully-qualified name of the searchable annotation type\r\n * @return {@code false} if the class is known to have no such annotations at any level;\r\n * {@code true} otherwise. Callers will usually perform full method/field introspection\r\n * if {@code true} is being returned here.\r\n * @since 5.2\r\n * @see #isCandidateClass(Class, Class)\r\n */\r\npublic static boolean isCandidateClass(Class<?> clazz, String annotationName) {\r\n    if (annotationName.startsWith(\"java.\")) {\r\n        return true;\r\n    }\r\n    if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isCandidateClass(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Annotation,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a single {@link Annotation} of {@code annotationType} from the supplied\r\n * annotation: either the given annotation itself or a direct meta-annotation\r\n * thereof.\r\n * <p>Note that this method supports only a single level of meta-annotations.\r\n * For support for arbitrary levels of meta-annotations, use one of the\r\n * {@code find*()} methods instead.\r\n * @param annotation the Annotation to check\r\n * @param annotationType the annotation type to look for, both locally and as a meta-annotation\r\n * @return the first matching annotation, or {@code null} if not found\r\n * @since 4.0\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\npublic static <A extends Annotation> A getAnnotation(Annotation annotation, Class<A> annotationType) {\r\n    // Shortcut: directly present on the element, with no merging needed?\r\n    if (annotationType.isInstance(annotation)) {\r\n        return synthesizeAnnotation((A) annotation, annotationType);\r\n    }\r\n    // Shortcut: no searchable annotations to be found on plain Java classes and core Spring types...\r\n    if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotation)) {\r\n        return null;\r\n    }\r\n    // Exhaustive retrieval of merged annotations...\r\n    return MergedAnnotations.from(annotation, new Annotation[] { annotation }, RepeatableContainers.none()).get(annotationType).withNonMergedAttributes().synthesize(AnnotationUtils::isSingleLevelPresent).orElse(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Annotation,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Annotation,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Annotation,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a single {@link Annotation} of {@code annotationType} from the supplied\r\n * {@link AnnotatedElement}, where the annotation is either <em>present</em> or\r\n * <em>meta-present</em> on the {@code AnnotatedElement}.\r\n * <p>Note that this method supports only a single level of meta-annotations.\r\n * For support for arbitrary levels of meta-annotations, use\r\n * {@link #findAnnotation(AnnotatedElement, Class)} instead.\r\n * @param annotatedElement the {@code AnnotatedElement} from which to get the annotation\r\n * @param annotationType the annotation type to look for, both locally and as a meta-annotation\r\n * @return the first matching annotation, or {@code null} if not found\r\n * @since 3.1\r\n */\r\n@Nullable\r\npublic static <A extends Annotation> A getAnnotation(AnnotatedElement annotatedElement, Class<A> annotationType) {\r\n    // Shortcut: directly present on the element, with no merging needed?\r\n    if (AnnotationFilter.PLAIN.matches(annotationType) || AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {\r\n        return annotatedElement.getAnnotation(annotationType);\r\n    }\r\n    // Exhaustive retrieval of merged annotations...\r\n    return MergedAnnotations.from(annotatedElement, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none()).get(annotationType).withNonMergedAttributes().synthesize(AnnotationUtils::isSingleLevelPresent).orElse(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(AnnotatedElement,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(AnnotatedElement,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#isSingleLevelPresent(MergedAnnotation<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static <A extends Annotation> boolean isSingleLevelPresent(MergedAnnotation<A> mergedAnnotation) {\r\n    int distance = mergedAnnotation.getDistance();\r\n    return (distance == 0 || distance == 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#isSingleLevelPresent(MergedAnnotation<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Method,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a single {@link Annotation} of {@code annotationType} from the\r\n * supplied {@link Method}, where the annotation is either <em>present</em>\r\n * or <em>meta-present</em> on the method.\r\n * <p>Correctly handles bridge {@link Method Methods} generated by the compiler.\r\n * <p>Note that this method supports only a single level of meta-annotations.\r\n * For support for arbitrary levels of meta-annotations, use\r\n * {@link #findAnnotation(Method, Class)} instead.\r\n * @param method the method to look for annotations on\r\n * @param annotationType the annotation type to look for\r\n * @return the first matching annotation, or {@code null} if not found\r\n * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)\r\n * @see #getAnnotation(AnnotatedElement, Class)\r\n */\r\n@Nullable\r\npublic static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {\r\n    Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);\r\n    return getAnnotation((AnnotatedElement) resolvedMethod, annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAnnotation(Method,Class<A>)",
    "tailType": "method"
  }
]