[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases() {\r\n    assertMixedImplicitAndExplicitAliases(AliasForWithMixedImplicitAndExplicitAliasesV1.class, \"b\");\r\n    assertMixedImplicitAndExplicitAliases(AliasForWithMixedImplicitAndExplicitAliasesV2.class, \"a\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForHasMixedImplicitAndExplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertMixedImplicitAndExplicitAliases(Class<? extends Annotation> annotationType, String overriddenAttribute) {\r\n    String annotationName = annotationType.getName();\r\n    String metaAnnotationName = AliasPair.class.getName();\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(annotationType)).withMessage(\"Attribute 'b' in annotation [\" + annotationName + \"] must be declared as an @AliasFor attribute 'a' in annotation [\" + annotationName + \"], not attribute '\" + overriddenAttribute + \"' in annotation [\" + metaAnnotationName + \"].\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#assertMixedImplicitAndExplicitAliases(Class<? extends Annotation>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForNonMetaAnnotated() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForNonMetaAnnotated.class)).withMessage(\"@AliasFor declaration on attribute 'test' in annotation [\" + AliasForNonMetaAnnotated.class.getName() + \"] declares an alias for attribute 'test' in annotation [\" + AliasForNonMetaAnnotatedTarget.class.getName() + \"] which is not meta-present.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForNonMetaAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForSelfWithDifferentDefaults() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForSelfWithDifferentDefaults.class)).withMessage(\"Misconfigured aliases: attribute 'a' in annotation [\" + AliasForSelfWithDifferentDefaults.class.getName() + \"] and attribute 'b' in annotation [\" + AliasForSelfWithDifferentDefaults.class.getName() + \"] must declare the same default value.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithDifferentDefaults()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasForSelfWithMissingDefault() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasForSelfWithMissingDefault.class)).withMessage(\"Misconfigured aliases: attribute 'a' in annotation [\" + AliasForSelfWithMissingDefault.class.getName() + \"] and attribute 'b' in annotation [\" + AliasForSelfWithMissingDefault.class.getName() + \"] must declare default values.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasForSelfWithMissingDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults() {\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> AnnotationTypeMappings.forAnnotationType(AliasWithExplicitMirrorAndDifferentDefaults.class)).withMessage(\"Misconfigured aliases: attribute 'a' in annotation [\" + AliasWithExplicitMirrorAndDifferentDefaults.class.getName() + \"] and attribute 'c' in annotation [\" + AliasWithExplicitMirrorAndDifferentDefaults.class.getName() + \"] must declare the same default value.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#forAnnotationTypeWhenAliasWithExplicitMirrorAndDifferentDefaults()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getDistanceReturnsDistance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDistanceReturnsDistance() {\r\n    AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(Mapped.class);\r\n    assertThat(mappings.get(0).getDistance()).isEqualTo(0);\r\n    assertThat(mappings.get(1).getDistance()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getDistanceReturnsDistance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMappingsTests#getDistanceReturnsDistance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]