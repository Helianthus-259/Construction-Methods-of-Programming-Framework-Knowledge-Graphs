[
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeThrowsTypeNotPresentException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeThrowsTypeNotPresentException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, annotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, metaAnnotationClass)).isNull();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, annotationClass)).isFalse();\r\n    assertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, metaAnnotationClass)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException() throws Exception {\r\n    FilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\r\n    Class<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> annotationClass = (Class<Annotation>) ClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\r\n    Class<Annotation> metaAnnotationClass = (Class<Annotation>) ClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\r\n    MergedAnnotations annotations = MergedAnnotations.from(withAnnotation);\r\n    assertThat(annotations.get(annotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.get(metaAnnotationClass).isPresent()).isFalse();\r\n    assertThat(annotations.isPresent(metaAnnotationClass)).isFalse();\r\n    assertThat(annotations.isPresent(annotationClass)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationIntrospectionFailureTests#filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.FilteringClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.OverridingClassLoader;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ReflectionUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * Tests that trigger annotation introspection failures and ensure that they are\n * dealt with correctly.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see AnnotationUtils\n * @see AnnotatedElementUtils\n */\nclass AnnotationIntrospectionFailureTests {\n\n\t@Test\n\tvoid filteredTypeThrowsTypeNotPresentException() throws Exception {\n\t\tFilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\n\t\tClass<?> withAnnotation = ClassUtils.forName(WithExampleAnnotation.class.getName(), classLoader);\n\t\tAnnotation annotation = withAnnotation.getAnnotations()[0];\n\t\tMethod method = annotation.annotationType().getMethod(\"value\");\n\t\tmethod.setAccessible(true);\n\t\tassertThatExceptionOfType(TypeNotPresentException.class)\n\t\t\t\t.isThrownBy(() -> ReflectionUtils.invokeMethod(method, annotation))\n\t\t\t\t.withCauseInstanceOf(ClassNotFoundException.class);\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid filteredTypeInMetaAnnotationWhenUsingAnnotatedElementUtilsHandlesException() throws Exception {\n\t\tFilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\n\t\tClass<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\n\t\tClass<Annotation> annotationClass = (Class<Annotation>)\n\t\t\t\tClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\n\t\tClass<Annotation> metaAnnotationClass = (Class<Annotation>)\n\t\t\t\tClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\n\t\tassertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, annotationClass)).isNull();\n\t\tassertThat(AnnotatedElementUtils.getMergedAnnotationAttributes(withAnnotation, metaAnnotationClass)).isNull();\n\t\tassertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, annotationClass)).isFalse();\n\t\tassertThat(AnnotatedElementUtils.hasAnnotation(withAnnotation, metaAnnotationClass)).isFalse();\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tvoid filteredTypeInMetaAnnotationWhenUsingMergedAnnotationsHandlesException() throws Exception {\n\t\tFilteringClassLoader classLoader = new FilteringClassLoader(getClass().getClassLoader());\n\t\tClass<?> withAnnotation = ClassUtils.forName(WithExampleMetaAnnotation.class.getName(), classLoader);\n\t\tClass<Annotation> annotationClass = (Class<Annotation>)\n\t\t\t\tClassUtils.forName(ExampleAnnotation.class.getName(), classLoader);\n\t\tClass<Annotation> metaAnnotationClass = (Class<Annotation>)\n\t\t\t\tClassUtils.forName(ExampleMetaAnnotation.class.getName(), classLoader);\n\t\tMergedAnnotations annotations = MergedAnnotations.from(withAnnotation);\n\t\tassertThat(annotations.get(annotationClass).isPresent()).isFalse();\n\t\tassertThat(annotations.get(metaAnnotationClass).isPresent()).isFalse();\n\t\tassertThat(annotations.isPresent(metaAnnotationClass)).isFalse();\n\t\tassertThat(annotations.isPresent(annotationClass)).isFalse();\n\t}\n\n\n\tstatic class FilteringClassLoader extends OverridingClassLoader {\n\n\t\tFilteringClassLoader(ClassLoader parent) {\n\t\t\tsuper(parent);\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\treturn className.startsWith(AnnotationIntrospectionFailureTests.class.getName()) ||\n\t\t\t\t\tclassName.startsWith(\"jdk.internal\");\n\t\t}\n\n\t\t@Override\n\t\tprotected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\n\t\t\tif (name.contains(\"Filtered\") || name.startsWith(\"jdk.internal\")) {\n\t\t\t\tthrow new ClassNotFoundException(name);\n\t\t\t}\n\t\t\treturn super.loadClassForOverriding(name);\n\t\t}\n\t}\n\n\tstatic class FilteredType {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ExampleAnnotation {\n\n\t\tClass<?> value() default Void.class;\n\t}\n\n\t@ExampleAnnotation(FilteredType.class)\n\tstatic class WithExampleAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@ExampleAnnotation\n\t@interface ExampleMetaAnnotation {\n\n\t\t@AliasFor(annotation = ExampleAnnotation.class, attribute = \"value\")\n\t\tClass<?> example1() default Void.class;\n\n\t\t@AliasFor(annotation = ExampleAnnotation.class, attribute = \"value\")\n\t\tClass<?> example2() default Void.class;\n\n\t}\n\n\t@ExampleMetaAnnotation(example1 = FilteredType.class)\n\tstatic class WithExampleMetaAnnotation {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean isEligibleForOverriding(String className) {\r\n    return className.startsWith(AnnotationIntrospectionFailureTests.class.getName()) || className.startsWith(\"jdk.internal\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader#isEligibleForOverriding(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\r\n    if (name.contains(\"Filtered\") || name.startsWith(\"jdk.internal\")) {\r\n        throw new ClassNotFoundException(name);\r\n    }\r\n    return super.loadClassForOverriding(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader#loadClassForOverriding(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.FilteringClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "OverridingClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.FilteredType",
    "tailType": "class"
  }
]