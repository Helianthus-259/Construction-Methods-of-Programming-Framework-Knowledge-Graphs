[
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processClassHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,boolean,Predicate<Class<?>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethod(C,Method,SearchStrategy,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processMethod(C context, Method source, SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor) {\r\n    return switch(searchStrategy) {\r\n        case DIRECT, INHERITED_ANNOTATIONS ->\r\n            processMethodInheritedAnnotations(context, source, processor);\r\n        case SUPERCLASS ->\r\n            processMethodHierarchy(context, new int[] { 0 }, source.getDeclaringClass(), processor, source, false);\r\n        case TYPE_HIERARCHY ->\r\n            processMethodHierarchy(context, new int[] { 0 }, source.getDeclaringClass(), processor, source, true);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processMethod(C,Method,SearchStrategy,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethod(C,Method,SearchStrategy,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodInheritedAnnotations(C,Method,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processMethodInheritedAnnotations(C context, Method source, AnnotationsProcessor<C, R> processor) {\r\n    try {\r\n        R result = processor.doWithAggregate(context, 0);\r\n        return (result != null ? result : processMethodAnnotations(context, 0, source, processor));\r\n    } catch (Throwable ex) {\r\n        AnnotationUtils.handleIntrospectionFailure(source, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processMethodInheritedAnnotations(C,Method,AnnotationsProcessor<C,R>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodInheritedAnnotations(C,Method,AnnotationsProcessor<C,R>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,Method,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static <C, R> R processMethodHierarchy(C context, int[] aggregateIndex, Class<?> sourceClass, AnnotationsProcessor<C, R> processor, Method rootMethod, boolean includeInterfaces) {\r\n    try {\r\n        R result = processor.doWithAggregate(context, aggregateIndex[0]);\r\n        if (result != null) {\r\n            return result;\r\n        }\r\n        if (hasPlainJavaAnnotationsOnly(sourceClass)) {\r\n            return null;\r\n        }\r\n        boolean calledProcessor = false;\r\n        if (sourceClass == rootMethod.getDeclaringClass()) {\r\n            result = processMethodAnnotations(context, aggregateIndex[0], rootMethod, processor);\r\n            calledProcessor = true;\r\n            if (result != null) {\r\n                return result;\r\n            }\r\n        } else {\r\n            for (Method candidateMethod : getBaseTypeMethods(context, sourceClass)) {\r\n                if (candidateMethod != null && isOverride(rootMethod, candidateMethod)) {\r\n                    result = processMethodAnnotations(context, aggregateIndex[0], candidateMethod, processor);\r\n                    calledProcessor = true;\r\n                    if (result != null) {\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (Modifier.isPrivate(rootMethod.getModifiers())) {\r\n            return null;\r\n        }\r\n        if (calledProcessor) {\r\n            aggregateIndex[0]++;\r\n        }\r\n        if (includeInterfaces) {\r\n            for (Class<?> interfaceType : sourceClass.getInterfaces()) {\r\n                R interfacesResult = processMethodHierarchy(context, aggregateIndex, interfaceType, processor, rootMethod, true);\r\n                if (interfacesResult != null) {\r\n                    return interfacesResult;\r\n                }\r\n            }\r\n        }\r\n        Class<?> superclass = sourceClass.getSuperclass();\r\n        if (superclass != Object.class && superclass != null) {\r\n            R superclassResult = processMethodHierarchy(context, aggregateIndex, superclass, processor, rootMethod, includeInterfaces);\r\n            if (superclassResult != null) {\r\n                return superclassResult;\r\n            }\r\n        }\r\n    } catch (Throwable ex) {\r\n        AnnotationUtils.handleIntrospectionFailure(rootMethod, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#processMethodHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,Method,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#processMethodHierarchy(C,int[],Class<?>,AnnotationsProcessor<C,R>,Method,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getBaseTypeMethods(C,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Dataflow analysis limitation\r\n@SuppressWarnings(\"NullAway\")\r\n@Nullable\r\nprivate static <C> Method[] getBaseTypeMethods(C context, Class<?> baseType) {\r\n    if (baseType == Object.class || hasPlainJavaAnnotationsOnly(baseType)) {\r\n        return NO_METHODS;\r\n    }\r\n    @Nullable\r\n    Method[] methods = baseTypeMethodsCache.get(baseType);\r\n    if (methods == null) {\r\n        methods = ReflectionUtils.getDeclaredMethods(baseType);\r\n        int cleared = 0;\r\n        for (int i = 0; i < methods.length; i++) {\r\n            //noinspection DataFlowIssue\r\n            if (Modifier.isPrivate(methods[i].getModifiers()) || hasPlainJavaAnnotationsOnly(methods[i]) || getDeclaredAnnotations(methods[i], false).length == 0) {\r\n                methods[i] = null;\r\n                cleared++;\r\n            }\r\n        }\r\n        if (cleared == methods.length) {\r\n            methods = NO_METHODS;\r\n        }\r\n        baseTypeMethodsCache.put(baseType, methods);\r\n    }\r\n    return methods;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#getBaseTypeMethods(C,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getBaseTypeMethods(C,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#getBaseTypeMethods(C,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#isOverride(Method,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isOverride(Method rootMethod, Method candidateMethod) {\r\n    return (!Modifier.isPrivate(candidateMethod.getModifiers()) && candidateMethod.getName().equals(rootMethod.getName()) && hasSameParameterTypes(rootMethod, candidateMethod));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#isOverride(Method,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#hasSameParameterTypes(Method,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean hasSameParameterTypes(Method rootMethod, Method candidateMethod) {\r\n    if (candidateMethod.getParameterCount() != rootMethod.getParameterCount()) {\r\n        return false;\r\n    }\r\n    Class<?>[] rootParameterTypes = rootMethod.getParameterTypes();\r\n    Class<?>[] candidateParameterTypes = candidateMethod.getParameterTypes();\r\n    if (Arrays.equals(candidateParameterTypes, rootParameterTypes)) {\r\n        return true;\r\n    }\r\n    return hasSameGenericTypeParameters(rootMethod, candidateMethod, rootParameterTypes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#hasSameParameterTypes(Method,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner#hasSameGenericTypeParameters(Method,Method,Class<?>[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean hasSameGenericTypeParameters(Method rootMethod, Method candidateMethod, Class<?>[] rootParameterTypes) {\r\n    Class<?> sourceDeclaringClass = rootMethod.getDeclaringClass();\r\n    Class<?> candidateDeclaringClass = candidateMethod.getDeclaringClass();\r\n    if (!candidateDeclaringClass.isAssignableFrom(sourceDeclaringClass)) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < rootParameterTypes.length; i++) {\r\n        Class<?> resolvedParameterType = ResolvableType.forMethodParameter(candidateMethod, i, sourceDeclaringClass).resolve();\r\n        if (rootParameterTypes[i] != resolvedParameterType) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationsScanner",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationsScanner#hasSameGenericTypeParameters(Method,Method,Class<?>[])",
    "tailType": "method"
  }
]