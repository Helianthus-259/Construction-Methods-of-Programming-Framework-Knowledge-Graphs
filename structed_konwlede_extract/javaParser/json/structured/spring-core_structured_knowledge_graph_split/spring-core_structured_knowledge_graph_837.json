[
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#encode(Publisher<? extends DataBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> encode(Publisher<? extends DataBuffer> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    Flux<DataBuffer> flux = Flux.from(inputStream);\r\n    if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\r\n        flux = flux.doOnNext(buffer -> logValue(buffer, hints));\r\n    }\r\n    return flux;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferEncoder#encode(Publisher<? extends DataBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#encode(Publisher<? extends DataBuffer>,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#encodeValue(DataBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer encodeValue(DataBuffer buffer, DataBufferFactory bufferFactory, ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\r\n        logValue(buffer, hints);\r\n    }\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferEncoder#encodeValue(DataBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#encodeValue(DataBuffer,DataBufferFactory,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#logValue(DataBuffer,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void logValue(DataBuffer buffer, @Nullable Map<String, Object> hints) {\r\n    String logPrefix = Hints.getLogPrefix(hints);\r\n    logger.debug(logPrefix + \"Writing \" + buffer.readableByteCount() + \" bytes\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferEncoder#logValue(DataBuffer,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.Decoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.Assert;\nimport org.springframework.util.MimeType;\n\n/**\n * Strategy for decoding a {@link DataBuffer} input stream into an output stream\n * of elements of type {@code <T>}.\n *\n * @author Sebastien Deleuze\n * @author Rossen Stoyanchev\n * @since 5.0\n * @param <T> the type of elements in the output stream\n */\npublic interface Decoder<T> {\n\n\t/**\n\t * Whether the decoder supports the given target element type and the MIME\n\t * type of the source stream.\n\t * @param elementType the target element type for the output stream\n\t * @param mimeType the mime type associated with the stream to decode\n\t * (can be {@code null} if not specified)\n\t * @return {@code true} if supported, {@code false} otherwise\n\t */\n\tboolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType);\n\n\t/**\n\t * Decode a {@link DataBuffer} input stream into a Flux of {@code T}.\n\t * @param inputStream the {@code DataBuffer} input stream to decode\n\t * @param elementType the expected type of elements in the output stream;\n\t * this type must have been previously passed to the {@link #canDecode}\n\t * method and it must have returned {@code true}.\n\t * @param mimeType the MIME type associated with the input stream (optional)\n\t * @param hints additional information about how to do decode\n\t * @return the output stream with decoded elements\n\t */\n\tFlux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints);\n\n\t/**\n\t * Decode a {@link DataBuffer} input stream into a Mono of {@code T}.\n\t * @param inputStream the {@code DataBuffer} input stream to decode\n\t * @param elementType the expected type of elements in the output stream;\n\t * this type must have been previously passed to the {@link #canDecode}\n\t * method and it must have returned {@code true}.\n\t * @param mimeType the MIME type associated with the input stream (optional)\n\t * @param hints additional information about how to do decode\n\t * @return the output stream with the decoded element\n\t */\n\tMono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints);\n\n\t/**\n\t * Decode a data buffer to an Object of type T. This is useful for scenarios,\n\t * that distinct messages (or events) are decoded and handled individually,\n\t * in fully aggregated form.\n\t * @param buffer the {@code DataBuffer} to decode\n\t * @param targetType the expected output type\n\t * @param mimeType the MIME type associated with the data\n\t * @param hints additional information about how to do decode\n\t * @return the decoded value, possibly {@code null}\n\t * @since 5.2\n\t */\n\tdefault @Nullable T decode(DataBuffer buffer, ResolvableType targetType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) throws DecodingException {\n\n\t\tCompletableFuture<T> future = decodeToMono(Mono.just(buffer), targetType, mimeType, hints).toFuture();\n\t\tAssert.state(future.isDone(), \"DataBuffer decoding should have completed\");\n\n\t\ttry {\n\t\t\treturn future.get();\n\t\t}\n\t\tcatch (ExecutionException ex) {\n\t\t\tThrowable cause = ex.getCause();\n\t\t\tthrow (cause instanceof CodecException codecException ? codecException :\n\t\t\t\t\tnew DecodingException(\"Failed to decode: \" + (cause != null ? cause.getMessage() : ex), cause));\n\t\t}\n\t\tcatch (InterruptedException ex) {\n\t\t\tthrow new DecodingException(\"Interrupted during decode\", ex);\n\t\t}\n\t}\n\n\t/**\n\t * Return the list of MIME types supported by this Decoder. The list may not\n\t * apply to every possible target element type and calls to this method\n\t * should typically be guarded via {@link #canDecode(ResolvableType, MimeType)\n\t * canDecode(elementType, null)}. The list may also exclude MIME types\n\t * supported only for a specific element type. Alternatively, use\n\t * {@link #getDecodableMimeTypes(ResolvableType)} for a more precise list.\n\t * @return the list of supported MIME types\n\t */\n\tList<MimeType> getDecodableMimeTypes();\n\n\t/**\n\t * Return the list of MIME types supported by this Decoder for the given type\n\t * of element. This list may differ from {@link #getDecodableMimeTypes()}\n\t * if the Decoder doesn't support the given element type or if it supports\n\t * it only for a subset of MIME types.\n\t * @param targetType the type of element to check for decoding\n\t * @return the list of MIME types supported for the given target type\n\t * @since 5.3.4\n\t */\n\tdefault List<MimeType> getDecodableMimeTypes(ResolvableType targetType) {\n\t\treturn (canDecode(targetType, null) ? getDecodableMimeTypes() : Collections.emptyList());\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether the decoder supports the given target element type and the MIME\r\n * type of the source stream.\r\n * @param elementType the target element type for the output stream\r\n * @param mimeType the mime type associated with the stream to decode\r\n * (can be {@code null} if not specified)\r\n * @return {@code true} if supported, {@code false} otherwise\r\n */\r\nboolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Decoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decode a {@link DataBuffer} input stream into a Flux of {@code T}.\r\n * @param inputStream the {@code DataBuffer} input stream to decode\r\n * @param elementType the expected type of elements in the output stream;\r\n * this type must have been previously passed to the {@link #canDecode}\r\n * method and it must have returned {@code true}.\r\n * @param mimeType the MIME type associated with the input stream (optional)\r\n * @param hints additional information about how to do decode\r\n * @return the output stream with decoded elements\r\n */\r\nFlux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Decoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decode a {@link DataBuffer} input stream into a Mono of {@code T}.\r\n * @param inputStream the {@code DataBuffer} input stream to decode\r\n * @param elementType the expected type of elements in the output stream;\r\n * this type must have been previously passed to the {@link #canDecode}\r\n * method and it must have returned {@code true}.\r\n * @param mimeType the MIME type associated with the input stream (optional)\r\n * @param hints additional information about how to do decode\r\n * @return the output stream with the decoded element\r\n */\r\nMono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.Decoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.Decoder#decodeToMono(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.Decoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Decode a data buffer to an Object of type T. This is useful for scenarios,\r\n * that distinct messages (or events) are decoded and handled individually,\r\n * in fully aggregated form.\r\n * @param buffer the {@code DataBuffer} to decode\r\n * @param targetType the expected output type\r\n * @param mimeType the MIME type associated with the data\r\n * @param hints additional information about how to do decode\r\n * @return the decoded value, possibly {@code null}\r\n * @since 5.2\r\n */\r\n@Nullable\r\ndefault T decode(DataBuffer buffer, ResolvableType targetType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) throws DecodingException {\r\n    CompletableFuture<T> future = decodeToMono(Mono.just(buffer), targetType, mimeType, hints).toFuture();\r\n    Assert.state(future.isDone(), \"DataBuffer decoding should have completed\");\r\n    try {\r\n        return future.get();\r\n    } catch (ExecutionException ex) {\r\n        Throwable cause = ex.getCause();\r\n        throw (cause instanceof CodecException codecException ? codecException : new DecodingException(\"Failed to decode: \" + (cause != null ? cause.getMessage() : ex), cause));\r\n    } catch (InterruptedException ex) {\r\n        throw new DecodingException(\"Interrupted during decode\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]