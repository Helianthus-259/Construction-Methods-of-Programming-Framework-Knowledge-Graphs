[
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariables()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extractUriTemplateVariables() {\r\n    Map<String, String> result = pathMatcher.extractUriTemplateVariables(\"/hotels/{hotel}\", \"/hotels/1\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"hotel\", \"1\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/h?tels/{hotel}\", \"/hotels/1\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"hotel\", \"1\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/hotels/{hotel}/bookings/{booking}\", \"/hotels/1/bookings/2\");\r\n    Map<String, String> expected = new LinkedHashMap<>();\r\n    expected.put(\"hotel\", \"1\");\r\n    expected.put(\"booking\", \"2\");\r\n    assertThat(result).isEqualTo(expected);\r\n    result = pathMatcher.extractUriTemplateVariables(\"/**/hotels/**/{hotel}\", \"/foo/hotels/bar/1\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"hotel\", \"1\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/{page}.html\", \"/42.html\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"page\", \"42\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/{page}.*\", \"/42.html\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"page\", \"42\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/A-{B}-C\", \"/A-b-C\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"B\", \"b\"));\r\n    result = pathMatcher.extractUriTemplateVariables(\"/{name}.{extension}\", \"/test.html\");\r\n    expected = new LinkedHashMap<>();\r\n    expected.put(\"name\", \"test\");\r\n    expected.put(\"extension\", \"html\");\r\n    assertThat(result).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariables()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariables()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesFromDotSeparatedPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-26264\r\n@Test\r\nvoid extractUriTemplateVariablesFromDotSeparatedPath() {\r\n    Map<String, String> result = dotSeparatedPathMatcher.extractUriTemplateVariables(\"price.stock.{tickerSymbol}\", \"price.stock.aaa\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"tickerSymbol\", \"aaa\"));\r\n    result = dotSeparatedPathMatcher.extractUriTemplateVariables(\"price.stock.{ticker/symbol}\", \"price.stock.aaa\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"ticker/symbol\", \"aaa\"));\r\n    result = dotSeparatedPathMatcher.extractUriTemplateVariables(\"notification.**.{operation}\", \"notification.foo.update\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"operation\", \"update\"));\r\n    result = dotSeparatedPathMatcher.extractUriTemplateVariables(\"news.sports.feed/{type}\", \"news.sports.feed/xml\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"type\", \"xml\"));\r\n    result = dotSeparatedPathMatcher.extractUriTemplateVariables(\"news.sports.{operation}/*\", \"news.sports.feed/xml\");\r\n    assertThat(result).isEqualTo(Collections.singletonMap(\"operation\", \"feed\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesFromDotSeparatedPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesFromDotSeparatedPath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesRegex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extractUriTemplateVariablesRegex() {\r\n    Map<String, String> result = pathMatcher.extractUriTemplateVariables(\"{symbolicName:[\\\\w\\\\.]+}-{version:[\\\\w\\\\.]+}.jar\", \"com.example-1.0.0.jar\");\r\n    assertThat(result.get(\"symbolicName\")).isEqualTo(\"com.example\");\r\n    assertThat(result.get(\"version\")).isEqualTo(\"1.0.0\");\r\n    result = pathMatcher.extractUriTemplateVariables(\"{symbolicName:[\\\\w\\\\.]+}-sources-{version:[\\\\w\\\\.]+}.jar\", \"com.example-sources-1.0.0.jar\");\r\n    assertThat(result.get(\"symbolicName\")).isEqualTo(\"com.example\");\r\n    assertThat(result.get(\"version\")).isEqualTo(\"1.0.0\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesRegex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVariablesRegex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexQualifiers()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * SPR-7787\r\n */\r\n@Test\r\nvoid extractUriTemplateVarsRegexQualifiers() {\r\n    Map<String, String> result = pathMatcher.extractUriTemplateVariables(\"{symbolicName:[\\\\p{L}\\\\.]+}-sources-{version:[\\\\p{N}\\\\.]+}.jar\", \"com.example-sources-1.0.0.jar\");\r\n    assertThat(result.get(\"symbolicName\")).isEqualTo(\"com.example\");\r\n    assertThat(result.get(\"version\")).isEqualTo(\"1.0.0\");\r\n    result = pathMatcher.extractUriTemplateVariables(\"{symbolicName:[\\\\w\\\\.]+}-sources-{version:[\\\\d\\\\.]+}-{year:\\\\d{4}}{month:\\\\d{2}}{day:\\\\d{2}}.jar\", \"com.example-sources-1.0.0-20100220.jar\");\r\n    assertThat(result.get(\"symbolicName\")).isEqualTo(\"com.example\");\r\n    assertThat(result.get(\"version\")).isEqualTo(\"1.0.0\");\r\n    assertThat(result.get(\"year\")).isEqualTo(\"2010\");\r\n    assertThat(result.get(\"month\")).isEqualTo(\"02\");\r\n    assertThat(result.get(\"day\")).isEqualTo(\"20\");\r\n    result = pathMatcher.extractUriTemplateVariables(\"{symbolicName:[\\\\p{L}\\\\.]+}-sources-{version:[\\\\p{N}\\\\.\\\\{\\\\}]+}.jar\", \"com.example-sources-1.0.0.{12}.jar\");\r\n    assertThat(result.get(\"symbolicName\")).isEqualTo(\"com.example\");\r\n    assertThat(result.get(\"version\")).isEqualTo(\"1.0.0.{12}\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexQualifiers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexQualifiers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexCapturingGroups()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * SPR-8455\r\n */\r\n@Test\r\nvoid extractUriTemplateVarsRegexCapturingGroups() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> pathMatcher.extractUriTemplateVariables(\"/web/{id:foo(bar)?}\", \"/web/foobar\")).withMessageContaining(\"The number of capturing groups in the pattern\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexCapturingGroups()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractUriTemplateVarsRegexCapturingGroups()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#combine()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid combine() {\r\n    assertThat(pathMatcher.combine(null, null)).isEmpty();\r\n    assertThat(pathMatcher.combine(\"/hotels\", null)).isEqualTo(\"/hotels\");\r\n    assertThat(pathMatcher.combine(null, \"/hotels\")).isEqualTo(\"/hotels\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"/booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"booking\")).isEqualTo(\"/hotels/**/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"/booking\")).isEqualTo(\"/hotels/**/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"/booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/\", \"booking\")).isEqualTo(\"/hotels/booking\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*\", \"{hotel}\")).isEqualTo(\"/hotels/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels/**\", \"{hotel}\")).isEqualTo(\"/hotels/**/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"{hotel}\")).isEqualTo(\"/hotels/{hotel}\");\r\n    assertThat(pathMatcher.combine(\"/hotels\", \"{hotel}.*\")).isEqualTo(\"/hotels/{hotel}.*\");\r\n    assertThat(pathMatcher.combine(\"/hotels/*/booking\", \"{booking}\")).isEqualTo(\"/hotels/*/booking/{booking}\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel.html\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/*.html\", \"/hotel.*\")).isEqualTo(\"/hotel.html\");\r\n    assertThat(pathMatcher.combine(\"/**\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    assertThat(pathMatcher.combine(\"/*\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    assertThat(pathMatcher.combine(\"/*.*\", \"/*.html\")).isEqualTo(\"/*.html\");\r\n    // SPR-8858\r\n    assertThat(pathMatcher.combine(\"/{foo}\", \"/bar\")).isEqualTo(\"/{foo}/bar\");\r\n    // SPR-7970\r\n    assertThat(pathMatcher.combine(\"/user\", \"/user\")).isEqualTo(\"/user/user\");\r\n    // SPR-10062\r\n    assertThat(pathMatcher.combine(\"/{foo:.*[^0-9].*}\", \"/edit/\")).isEqualTo(\"/{foo:.*[^0-9].*}/edit/\");\r\n    // SPR-10554\r\n    assertThat(pathMatcher.combine(\"/1.0\", \"/foo/test\")).isEqualTo(\"/1.0/foo/test\");\r\n    // SPR-12975\r\n    assertThat(pathMatcher.combine(\"/\", \"/hotel\")).isEqualTo(\"/hotel\");\r\n    // SPR-12975\r\n    assertThat(pathMatcher.combine(\"/hotel/\", \"/booking\")).isEqualTo(\"/hotel/booking\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#combine()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#combine()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#combineWithTwoFileExtensionPatterns()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid combineWithTwoFileExtensionPatterns() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> pathMatcher.combine(\"/*.html\", \"/*.txt\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#combineWithTwoFileExtensionPatterns()",
    "tailType": "method"
  }
]