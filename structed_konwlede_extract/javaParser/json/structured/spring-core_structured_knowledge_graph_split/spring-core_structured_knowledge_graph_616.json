[
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getNames(Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static String[] getNames(Class[] classes) {\r\n    if (classes == null) {\r\n        return null;\r\n    }\r\n    String[] names = new String[classes.length];\r\n    for (int i = 0; i < names.length; i++) {\r\n        names[i] = classes[i].getName();\r\n    }\r\n    return names;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getNames(Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getClasses(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Class[] getClasses(Object[] objects) {\r\n    Class[] classes = new Class[objects.length];\r\n    for (int i = 0; i < objects.length; i++) {\r\n        classes[i] = objects[i].getClass();\r\n    }\r\n    return classes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getClasses(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findNewInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Method findNewInstance(Class iface) {\r\n    Method m = findInterfaceMethod(iface);\r\n    if (!m.getName().equals(\"newInstance\")) {\r\n        throw new IllegalArgumentException(iface + \" missing newInstance method\");\r\n    }\r\n    return m;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findNewInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Method[] getPropertyMethods(PropertyDescriptor[] properties, boolean read, boolean write) {\r\n    Set methods = new HashSet();\r\n    for (PropertyDescriptor pd : properties) {\r\n        if (read) {\r\n            methods.add(pd.getReadMethod());\r\n        }\r\n        if (write) {\r\n            methods.add(pd.getWriteMethod());\r\n        }\r\n    }\r\n    methods.remove(null);\r\n    return (Method[]) methods.toArray(new Method[methods.size()]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getPropertyMethods(PropertyDescriptor[],boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getBeanProperties(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static PropertyDescriptor[] getBeanProperties(Class type) {\r\n    return getPropertiesHelper(type, true, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getBeanProperties(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getBeanGetters(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static PropertyDescriptor[] getBeanGetters(Class type) {\r\n    return getPropertiesHelper(type, true, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getBeanGetters(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getBeanSetters(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static PropertyDescriptor[] getBeanSetters(Class type) {\r\n    return getPropertiesHelper(type, false, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getBeanSetters(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#getPropertiesHelper(Class,boolean,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static PropertyDescriptor[] getPropertiesHelper(Class type, boolean read, boolean write) {\r\n    try {\r\n        BeanInfo info = Introspector.getBeanInfo(type, Object.class);\r\n        PropertyDescriptor[] all = info.getPropertyDescriptors();\r\n        if (read && write) {\r\n            return all;\r\n        }\r\n        List properties = new ArrayList(all.length);\r\n        for (PropertyDescriptor pd : all) {\r\n            if ((read && pd.getReadMethod() != null) || (write && pd.getWriteMethod() != null)) {\r\n                properties.add(pd);\r\n            }\r\n        }\r\n        return (PropertyDescriptor[]) properties.toArray(new PropertyDescriptor[properties.size()]);\r\n    } catch (IntrospectionException e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#getPropertiesHelper(Class,boolean,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Method findDeclaredMethod(final Class type, final String methodName, final Class[] parameterTypes) throws NoSuchMethodException {\r\n    Class cl = type;\r\n    while (cl != null) {\r\n        try {\r\n            return cl.getDeclaredMethod(methodName, parameterTypes);\r\n        } catch (NoSuchMethodException e) {\r\n            cl = cl.getSuperclass();\r\n        }\r\n    }\r\n    throw new NoSuchMethodException(methodName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#findDeclaredMethod(Class,String,Class[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static List addAllMethods(final Class type, final List list) {\r\n    if (type == Object.class) {\r\n        list.addAll(OBJECT_METHODS);\r\n    } else {\r\n        list.addAll(java.util.Arrays.asList(type.getDeclaredMethods()));\r\n    }\r\n    Class superclass = type.getSuperclass();\r\n    if (superclass != null) {\r\n        addAllMethods(superclass, list);\r\n    }\r\n    Class[] interfaces = type.getInterfaces();\r\n    for (Class element : interfaces) {\r\n        addAllMethods(element, list);\r\n    }\r\n    return list;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ReflectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ReflectUtils#addAllMethods(Class,List)",
    "tailType": "method"
  }
]