[
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#unboundPrefix",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#unboundPrefix",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#prefix",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#prefix",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#namespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#namespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#additionalNamespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#additionalNamespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#unboundNamespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#unboundNamespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#defaultNamespaceUri",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#defaultNamespaceUri",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#context",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#context",
    "headType": "field",
    "relation": "haveType",
    "tail": "SimpleNamespaceContext",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Implementation of the FieldVisitor abstract class\r\n// -----------------------------------------------------------------------------------------------\r\n@Override\r\npublic AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (visible) {\r\n        return lastRuntimeVisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);\r\n    } else {\r\n        return lastRuntimeInvisibleAnnotation = AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.FieldWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.FieldWriter#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNamespaceURI_withNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> context.getNamespaceURI(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContextTests#getNamespaceURI_withNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]