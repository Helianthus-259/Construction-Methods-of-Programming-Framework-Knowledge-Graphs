[
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    if (classOnly) {\r\n        return type;\r\n    } else {\r\n        return ReflectUtils.newInstance(type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    Class protoclass = (instance instanceof Class<?> clazz) ? clazz : instance.getClass();\r\n    if (classOnly) {\r\n        return protoclass;\r\n    } else {\r\n        return ReflectUtils.newInstance(protoclass);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Map)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void addProperties(BeanGenerator gen, Map props) {\r\n    for (Iterator it = props.keySet().iterator(); it.hasNext(); ) {\r\n        String name = (String) it.next();\r\n        gen.addProperty(name, (Class) props.get(name));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Map)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void addProperties(BeanGenerator gen, Class type) {\r\n    addProperties(gen, ReflectUtils.getBeanProperties(type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,PropertyDescriptor[])",
    "headType": "method",
    "relation": "provide",
    "tail": "public static void addProperties(BeanGenerator gen, PropertyDescriptor[] descriptors) {\r\n    for (PropertyDescriptor descriptor : descriptors) {\r\n        gen.addProperty(descriptor.getName(), descriptor.getPropertyType());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGenerator#addProperties(BeanGenerator,PropertyDescriptor[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGenerator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.beans.BeanGeneratorKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGeneratorKey",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.beans;\n\nimport java.beans.PropertyDescriptor;\nimport java.security.ProtectionDomain;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.AbstractClassGenerator;\nimport org.springframework.cglib.core.ClassEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.EmitUtils;\nimport org.springframework.cglib.core.KeyFactory;\nimport org.springframework.cglib.core.ReflectUtils;\n\n/**\n * @author Juozas Baliuka, Chris Nokleberg\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\npublic class BeanGenerator extends AbstractClassGenerator\n{\n\tprivate static final Source SOURCE = new Source(BeanGenerator.class.getName());\n\tprivate static final BeanGeneratorKey KEY_FACTORY =\n\t  (BeanGeneratorKey)KeyFactory.create(BeanGeneratorKey.class);\n\n\tinterface BeanGeneratorKey {\n\t\tpublic Object newInstance(String superclass, Map props);\n\t}\n\n\tprivate Class superclass;\n\tprivate Map props = new HashMap();\n\tprivate boolean classOnly;\n\n\tpublic BeanGenerator() {\n\t\tsuper(SOURCE);\n\t}\n\n\t/**\n\t * Set the class which the generated class will extend. The class\n\t * must not be declared as final, and must have a non-private\n\t * no-argument constructor.\n\t * @param superclass class to extend, or null to extend Object\n\t */\n\tpublic void setSuperclass(Class superclass) {\n\t\tif (superclass != null && superclass.equals(Object.class)) {\n\t\t\tsuperclass = null;\n\t\t}\n\t\tthis.superclass = superclass;\n\t\t// SPRING PATCH BEGIN\n\t\tsetContextClass(superclass);\n\t\t// SPRING PATCH END\n\t}\n\n\tpublic void addProperty(String name, Class type) {\n\t\tif (props.containsKey(name)) {\n\t\t\tthrow new IllegalArgumentException(\"Duplicate property name \\\"\" + name + \"\\\"\");\n\t\t}\n\t\tprops.put(name, Type.getType(type));\n\t}\n\n\t@Override\n\tprotected ClassLoader getDefaultClassLoader() {\n\t\tif (superclass != null) {\n\t\t\treturn superclass.getClassLoader();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\tprotected ProtectionDomain getProtectionDomain() {\n\t\treturn ReflectUtils.getProtectionDomain(superclass);\n\t}\n\n\tpublic Object create() {\n\t\tclassOnly = false;\n\t\treturn createHelper();\n\t}\n\n\tpublic Object createClass() {\n\t\tclassOnly = true;\n\t\treturn createHelper();\n\t}\n\n\tprivate Object createHelper() {\n\t\tif (superclass != null) {\n\t\t\tsetNamePrefix(superclass.getName());\n\t\t}\n\t\tString superName = (superclass != null) ? superclass.getName() : \"java.lang.Object\";\n\t\tObject key = KEY_FACTORY.newInstance(superName, props);\n\t\treturn super.create(key);\n\t}\n\n\t@Override\n\tpublic void generateClass(ClassVisitor v) throws Exception {\n\t\tint size = props.size();\n\t\tString[] names = (String[])props.keySet().toArray(new String[size]);\n\t\tType[] types = new Type[size];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\ttypes[i] = (Type)props.get(names[i]);\n\t\t}\n\t\tClassEmitter ce = new ClassEmitter(v);\n\t\tce.begin_class(Constants.V1_8,\n\t\t\t\t\t   Constants.ACC_PUBLIC,\n\t\t\t\t\t   getClassName(),\n\t\t\t\t\t   superclass != null ? Type.getType(superclass) : Constants.TYPE_OBJECT,\n\t\t\t\t\t   null,\n\t\t\t\t\t   null);\n\t\tEmitUtils.null_constructor(ce);\n\t\tEmitUtils.add_properties(ce, names, types);\n\t\tce.end_class();\n\t}\n\n\t@Override\n\tprotected Object firstInstance(Class type) {\n\t\tif (classOnly) {\n\t\t\treturn type;\n\t\t} else {\n\t\t\treturn ReflectUtils.newInstance(type);\n\t\t}\n\t}\n\n\t@Override\n\tprotected Object nextInstance(Object instance) {\n\t\tClass protoclass = (instance instanceof Class<?> clazz) ? clazz : instance.getClass();\n\t\tif (classOnly) {\n\t\t\treturn protoclass;\n\t\t} else {\n\t\t\treturn ReflectUtils.newInstance(protoclass);\n\t\t}\n\t}\n\n\tpublic static void addProperties(BeanGenerator gen, Map props) {\n\t\tfor (Iterator it = props.keySet().iterator(); it.hasNext();) {\n\t\t\tString name = (String)it.next();\n\t\t\tgen.addProperty(name, (Class)props.get(name));\n\t\t}\n\t}\n\n\tpublic static void addProperties(BeanGenerator gen, Class type) {\n\t\taddProperties(gen, ReflectUtils.getBeanProperties(type));\n\t}\n\n\tpublic static void addProperties(BeanGenerator gen, PropertyDescriptor[] descriptors) {\n\t\tfor (PropertyDescriptor descriptor : descriptors) {\n\t\t\tgen.addProperty(descriptor.getName(), descriptor.getPropertyType());\n\t\t}\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGeneratorKey#newInstance(String,Map)",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object newInstance(String superclass, Map props);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanGeneratorKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanGeneratorKey#newInstance(String,Map)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.security",
    "tailType": "package"
  }
]