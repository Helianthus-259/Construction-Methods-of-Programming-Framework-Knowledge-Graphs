[
  {
    "head": "org.springframework.tests.sample.objects.ITestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.ITestObject#getAge()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject#setAge(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "void setAge(int age);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.ITestObject#setAge(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject#getSpouse()",
    "headType": "method",
    "relation": "provide",
    "tail": "TestObject getSpouse();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.ITestObject#getSpouse()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject#setSpouse(TestObject)",
    "headType": "method",
    "relation": "provide",
    "tail": "void setSpouse(TestObject spouse);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.ITestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.ITestObject#setSpouse(TestObject)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.tests.sample.objects",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ClassUtils;\n\n/**\n * A {@link ReflectiveProcessor} implementation that pairs with\n * {@link RegisterReflection @RegisterReflection}. Can be used as a base\n * implementation for composed annotations that are meta-annotated with\n * {@link RegisterReflection}.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\npublic class RegisterReflectionReflectiveProcessor implements ReflectiveProcessor {\n\n\tprivate static final Log logger = LogFactory.getLog(RegisterReflectionReflectiveProcessor.class);\n\n\n\t@Override\n\tpublic final void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\n\t\tRegisterReflection annotation = AnnotatedElementUtils.getMergedAnnotation(element, RegisterReflection.class);\n\t\tAssert.notNull(annotation, () -> \"Element must be annotated with @RegisterReflection: \" + element);\n\t\tReflectionRegistration registration = parse(element, annotation);\n\t\tregisterReflectionHints(hints, registration);\n\t}\n\n\tprotected ReflectionRegistration parse(AnnotatedElement element, RegisterReflection annotation) {\n\t\tList<Class<?>> allClassNames = new ArrayList<>();\n\t\tallClassNames.addAll(Arrays.asList(annotation.classes()));\n\t\tallClassNames.addAll(Arrays.stream(annotation.classNames())\n\t\t\t\t.map(this::loadClass).filter(Objects::nonNull).toList());\n\t\tif (allClassNames.isEmpty()) {\n\t\t\tif (element instanceof Class<?> clazz) {\n\t\t\t\tallClassNames.add(clazz);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalStateException(\"At least one class must be specified: \" + element);\n\t\t\t}\n\t\t}\n\t\treturn new ReflectionRegistration(allClassNames.toArray(new Class<?>[0]), annotation.memberCategories());\n\t}\n\n\tprotected void registerReflectionHints(ReflectionHints hints, ReflectionRegistration registration) {\n\t\tfor (Class<?> target : registration.classes) {\n\t\t\tregisterReflectionHints(hints, target, registration.memberCategories);\n\t\t}\n\t}\n\n\tprotected void registerReflectionHints(ReflectionHints hints, Class<?> target, MemberCategory[] memberCategories) {\n\t\thints.registerType(target, type -> type.withMembers(memberCategories));\n\t}\n\n\tprivate @Nullable Class<?> loadClass(String className) {\n\t\ttry {\n\t\t\treturn ClassUtils.forName(className, getClass().getClassLoader());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isWarnEnabled()) {\n\t\t\t\tlogger.warn(\"Ignoring '\" + className + \"': \" + ex);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\tprotected record ReflectionRegistration(Class<?>[] classes, MemberCategory[] memberCategories) {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic final void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\r\n    RegisterReflection annotation = AnnotatedElementUtils.getMergedAnnotation(element, RegisterReflection.class);\r\n    Assert.notNull(annotation, () -> \"Element must be annotated with @RegisterReflection: \" + element);\r\n    ReflectionRegistration registration = parse(element, annotation);\r\n    registerReflectionHints(hints, registration);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,AnnotatedElement)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#parse(AnnotatedElement,RegisterReflection)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected ReflectionRegistration parse(AnnotatedElement element, RegisterReflection annotation) {\r\n    List<Class<?>> allClassNames = new ArrayList<>();\r\n    allClassNames.addAll(Arrays.asList(annotation.classes()));\r\n    allClassNames.addAll(Arrays.stream(annotation.classNames()).map(this::loadClass).filter(Objects::nonNull).toList());\r\n    if (allClassNames.isEmpty()) {\r\n        if (element instanceof Class<?> clazz) {\r\n            allClassNames.add(clazz);\r\n        } else {\r\n            throw new IllegalStateException(\"At least one class must be specified: \" + element);\r\n        }\r\n    }\r\n    return new ReflectionRegistration(allClassNames.toArray(new Class<?>[0]), annotation.memberCategories());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#parse(AnnotatedElement,RegisterReflection)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,ReflectionRegistration)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void registerReflectionHints(ReflectionHints hints, ReflectionRegistration registration) {\r\n    for (Class<?> target : registration.classes) {\r\n        registerReflectionHints(hints, target, registration.memberCategories);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,ReflectionRegistration)",
    "tailType": "method"
  }
]