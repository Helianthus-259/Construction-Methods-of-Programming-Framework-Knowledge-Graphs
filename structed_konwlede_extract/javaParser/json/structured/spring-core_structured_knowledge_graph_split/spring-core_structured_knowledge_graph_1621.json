[
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithUnknownAttributeName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithUnknownAttributeName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithTypeMismatch()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnumWithTypeMismatch() {\r\n    attributes.put(\"color\", \"RED\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> attributes.getEnum(\"color\")).withMessageContaining(\"Attribute 'color' is of type String, but Enum was expected\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithTypeMismatch()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getEnumWithTypeMismatch()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringWithImplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasedStringWithImplicitAliases() {\r\n    String value = \"metaverse\";\r\n    List<String> aliases = Arrays.asList(\"value\", \"location1\", \"location2\", \"location3\", \"xmlFile\", \"groovyScript\");\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"value\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"location1\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"value\", value);\r\n    attributes.put(\"location1\", value);\r\n    attributes.put(\"xmlFile\", value);\r\n    attributes.put(\"groovyScript\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringWithImplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringWithImplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringArrayWithImplicitAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAliasedStringArrayWithImplicitAliases() {\r\n    String[] value = new String[] { \"test.xml\" };\r\n    List<String> aliases = Arrays.asList(\"value\", \"location1\", \"location2\", \"location3\", \"xmlFile\", \"groovyScript\");\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"location1\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"value\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"location1\", value);\r\n    attributes.put(\"value\", value);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"location1\", value);\r\n    AnnotationUtils.registerDefaultValues(attributes);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    attributes.put(\"value\", value);\r\n    AnnotationUtils.registerDefaultValues(attributes);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\r\n    attributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\r\n    AnnotationUtils.registerDefaultValues(attributes);\r\n    AnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\r\n    aliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(new String[] { \"\" }));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringArrayWithImplicitAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributesTests#getAliasedStringArrayWithImplicitAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.FilteredClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.FilteredClass",
    "headType": "class",
    "relation": "use",
    "tail": "@Filter",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.FilteredClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.annotation.AnnotationUtilsTests.ImplicitAliasesContextConfig;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link AnnotationAttributes}.\n *\n * @author Chris Beams\n * @author Sam Brannen\n * @author Juergen Hoeller\n * @since 3.1.1\n */\nclass AnnotationAttributesTests {\n\n\tprivate AnnotationAttributes attributes = new AnnotationAttributes();\n\n\n\t@Test\n\tvoid typeSafeAttributeAccess() {\n\t\tAnnotationAttributes nestedAttributes = new AnnotationAttributes();\n\t\tnestedAttributes.put(\"value\", 10);\n\t\tnestedAttributes.put(\"name\", \"algernon\");\n\n\t\tattributes.put(\"name\", \"dave\");\n\t\tattributes.put(\"names\", new String[] {\"dave\", \"frank\", \"hal\"});\n\t\tattributes.put(\"bool1\", true);\n\t\tattributes.put(\"bool2\", false);\n\t\tattributes.put(\"color\", Color.RED);\n\t\tattributes.put(\"class\", Integer.class);\n\t\tattributes.put(\"classes\", new Class<?>[] {Number.class, Short.class, Integer.class});\n\t\tattributes.put(\"number\", 42);\n\t\tattributes.put(\"anno\", nestedAttributes);\n\t\tattributes.put(\"annoArray\", new AnnotationAttributes[] {nestedAttributes});\n\n\t\tassertThat(attributes.getString(\"name\")).isEqualTo(\"dave\");\n\t\tassertThat(attributes.getStringArray(\"names\")).isEqualTo(new String[] {\"dave\", \"frank\", \"hal\"});\n\t\tassertThat(attributes.getBoolean(\"bool1\")).isTrue();\n\t\tassertThat(attributes.getBoolean(\"bool2\")).isFalse();\n\t\tassertThat(attributes.<Color>getEnum(\"color\")).isEqualTo(Color.RED);\n\t\tassertThat(attributes.getClass(\"class\").equals(Integer.class)).isTrue();\n\t\tassertThat(attributes.getClassArray(\"classes\")).isEqualTo(new Class<?>[] {Number.class, Short.class, Integer.class});\n\t\tassertThat(attributes.<Integer>getNumber(\"number\")).isEqualTo(42);\n\t\tassertThat(attributes.getAnnotation(\"anno\").<Integer>getNumber(\"value\")).isEqualTo(10);\n\t\tassertThat(attributes.getAnnotationArray(\"annoArray\")[0].getString(\"name\")).isEqualTo(\"algernon\");\n\n\t}\n\n\t@Test\n\tvoid unresolvableClassWithClassNotFoundException() {\n\t\tattributes.put(\"unresolvableClass\", new ClassNotFoundException(\"myclass\"));\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getClass(\"unresolvableClass\"))\n\t\t\t.withMessageContaining(\"myclass\")\n\t\t\t.withCauseInstanceOf(ClassNotFoundException.class);\n\t}\n\n\t@Test\n\tvoid unresolvableClassWithLinkageError() {\n\t\tattributes.put(\"unresolvableClass\", new LinkageError(\"myclass\"));\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getClass(\"unresolvableClass\"))\n\t\t\t.withMessageContaining(\"myclass\")\n\t\t\t.withCauseInstanceOf(LinkageError.class);\n\t}\n\n\t@Test\n\tvoid singleElementToSingleElementArrayConversionSupport() {\n\t\tFilter filter = FilteredClass.class.getAnnotation(Filter.class);\n\n\t\tAnnotationAttributes nestedAttributes = new AnnotationAttributes();\n\t\tnestedAttributes.put(\"name\", \"Dilbert\");\n\n\t\t// Store single elements\n\t\tattributes.put(\"names\", \"Dogbert\");\n\t\tattributes.put(\"classes\", Number.class);\n\t\tattributes.put(\"nestedAttributes\", nestedAttributes);\n\t\tattributes.put(\"filters\", filter);\n\n\t\t// Get back arrays of single elements\n\t\tassertThat(attributes.getStringArray(\"names\")).isEqualTo(new String[] {\"Dogbert\"});\n\t\tassertThat(attributes.getClassArray(\"classes\")).isEqualTo(new Class<?>[] {Number.class});\n\n\t\tAnnotationAttributes[] array = attributes.getAnnotationArray(\"nestedAttributes\");\n\t\tassertThat(array).isNotNull();\n\t\tassertThat(array).hasSize(1);\n\t\tassertThat(array[0].getString(\"name\")).isEqualTo(\"Dilbert\");\n\n\t\tFilter[] filters = attributes.getAnnotationArray(\"filters\", Filter.class);\n\t\tassertThat(filters).isNotNull();\n\t\tassertThat(filters).hasSize(1);\n\t\tassertThat(filters[0].pattern()).isEqualTo(\"foo\");\n\t}\n\n\t@Test\n\tvoid nestedAnnotations() {\n\t\tFilter filter = FilteredClass.class.getAnnotation(Filter.class);\n\n\t\tattributes.put(\"filter\", filter);\n\t\tattributes.put(\"filters\", new Filter[] {filter, filter});\n\n\t\tFilter retrievedFilter = attributes.getAnnotation(\"filter\", Filter.class);\n\t\tassertThat(retrievedFilter).isEqualTo(filter);\n\t\tassertThat(retrievedFilter.pattern()).isEqualTo(\"foo\");\n\n\t\tFilter[] retrievedFilters = attributes.getAnnotationArray(\"filters\", Filter.class);\n\t\tassertThat(retrievedFilters).isNotNull();\n\t\tassertThat(retrievedFilters).hasSize(2);\n\t\tassertThat(retrievedFilters[1].pattern()).isEqualTo(\"foo\");\n\t}\n\n\t@Test\n\tvoid getEnumWithNullAttributeName() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getEnum(null))\n\t\t\t.withMessageContaining(\"must not be null or empty\");\n\t}\n\n\t@Test\n\tvoid getEnumWithEmptyAttributeName() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getEnum(\"\"))\n\t\t\t.withMessageContaining(\"must not be null or empty\");\n\t}\n\n\t@Test\n\tvoid getEnumWithUnknownAttributeName() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getEnum(\"bogus\"))\n\t\t\t.withMessageContaining(\"Attribute 'bogus' not found\");\n\t}\n\n\t@Test\n\tvoid getEnumWithTypeMismatch() {\n\t\tattributes.put(\"color\", \"RED\");\n\t\tassertThatIllegalArgumentException()\n\t\t\t.isThrownBy(() -> attributes.getEnum(\"color\"))\n\t\t\t.withMessageContaining(\"Attribute 'color' is of type String, but Enum was expected\");\n\t}\n\n\t@Test\n\tvoid getAliasedStringWithImplicitAliases() {\n\t\tString value = \"metaverse\";\n\t\tList<String> aliases = Arrays.asList(\"value\", \"location1\", \"location2\", \"location3\", \"xmlFile\", \"groovyScript\");\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"value\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"location1\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"value\", value);\n\t\tattributes.put(\"location1\", value);\n\t\tattributes.put(\"xmlFile\", value);\n\t\tattributes.put(\"groovyScript\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getString(alias)).isEqualTo(value));\n\t}\n\n\t@Test\n\tvoid getAliasedStringArrayWithImplicitAliases() {\n\t\tString[] value = new String[] {\"test.xml\"};\n\t\tList<String> aliases = Arrays.asList(\"value\", \"location1\", \"location2\", \"location3\", \"xmlFile\", \"groovyScript\");\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"location1\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"value\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"location1\", value);\n\t\tattributes.put(\"value\", value);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"location1\", value);\n\t\tAnnotationUtils.registerDefaultValues(attributes);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tattributes.put(\"value\", value);\n\t\tAnnotationUtils.registerDefaultValues(attributes);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(value));\n\n\t\tattributes = new AnnotationAttributes(ImplicitAliasesContextConfig.class);\n\t\tAnnotationUtils.registerDefaultValues(attributes);\n\t\tAnnotationUtils.postProcessAnnotationAttributes(null, attributes, false);\n\t\taliases.stream().forEach(alias -> assertThat(attributes.getStringArray(alias)).isEqualTo(new String[] {\"\"}));\n\t}\n\n\n\tenum Color {\n\n\t\tRED, WHITE, BLUE\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Filter {\n\n\t\t@AliasFor(attribute = \"classes\")\n\t\tClass<?>[] value() default {};\n\n\t\t@AliasFor(attribute = \"value\")\n\t\tClass<?>[] classes() default {};\n\n\t\tString pattern();\n\t}\n\n\n\t@Filter(pattern = \"foo\")\n\tstatic class FilteredClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport jakarta.annotation.Priority;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Juergen Hoeller\n * @author Oliver Gierke\n */\nclass AnnotationAwareOrderComparatorTests {\n\n\t@Test\n\tvoid instanceVariableIsAnAnnotationAwareOrderComparator() {\n\t\tassertThat(AnnotationAwareOrderComparator.INSTANCE).isInstanceOf(AnnotationAwareOrderComparator.class);\n\t}\n\n\t@Test\n\tvoid sortInstances() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(new B());\n\t\tlist.add(new A());\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).hasExactlyElementsOfTypes(A.class, B.class);\n\t}\n\n\t@Test\n\tvoid sortInstancesWithPriority() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(new B2());\n\t\tlist.add(new A2());\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).hasExactlyElementsOfTypes(A2.class, B2.class);\n\t}\n\n\t@Test\n\tvoid sortInstancesWithOrderAndPriority() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(new B());\n\t\tlist.add(new A2());\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).hasExactlyElementsOfTypes(A2.class, B.class);\n\t}\n\n\t@Test\n\tvoid sortInstancesWithSubclass() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(new B());\n\t\tlist.add(new C());\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).hasExactlyElementsOfTypes(C.class, B.class);\n\t}\n\n\t@Test\n\tvoid sortClasses() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(B.class);\n\t\tlist.add(A.class);\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).containsExactly(A.class, B.class);\n\t}\n\n\t@Test\n\tvoid sortClassesWithSubclass() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(B.class);\n\t\tlist.add(C.class);\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).containsExactly(C.class, B.class);\n\t}\n\n\t@Test\n\tvoid sortWithNulls() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(null);\n\t\tlist.add(B.class);\n\t\tlist.add(null);\n\t\tlist.add(A.class);\n\t\tAnnotationAwareOrderComparator.sort(list);\n\t\tassertThat(list).containsExactly(A.class, B.class, null, null);\n\t}\n\n\t@Order(1)\n\tprivate static class A {\n\t}\n\n\t@Order(2)\n\tprivate static class B {\n\t}\n\n\tprivate static class C extends A {\n\t}\n\n\t@Priority(1)\n\tprivate static class A2 {\n\t}\n\n\t@Priority(2)\n\tprivate static class B2 {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid instanceVariableIsAnAnnotationAwareOrderComparator() {\r\n    assertThat(AnnotationAwareOrderComparator.INSTANCE).isInstanceOf(AnnotationAwareOrderComparator.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#instanceVariableIsAnAnnotationAwareOrderComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]