[
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArraysAtPosition()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArrayWhenEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToArrayWhenEmpty() {\r\n    String[] array = new String[0];\r\n    String newElement = \"foo\";\r\n    String[] newArray = ObjectUtils.addObjectToArray(array, newElement);\r\n    assertThat(newArray).hasSize(1);\r\n    assertThat(newArray[0]).isEqualTo(newElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToArrayWhenEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToArrayWhenEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNonNullElementArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToSingleNonNullElementArray() {\r\n    String existingElement = \"foo\";\r\n    String[] array = { existingElement };\r\n    String newElement = \"bar\";\r\n    String[] newArray = ObjectUtils.addObjectToArray(array, newElement);\r\n    assertThat(newArray).hasSize(2);\r\n    assertThat(newArray[0]).isEqualTo(existingElement);\r\n    assertThat(newArray[1]).isEqualTo(newElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNonNullElementArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNonNullElementArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNullElementArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToSingleNullElementArray() {\r\n    String[] array = { null };\r\n    String newElement = \"bar\";\r\n    String[] newArray = ObjectUtils.addObjectToArray(array, newElement);\r\n    assertThat(newArray).hasSize(2);\r\n    assertThat(newArray[0]).isNull();\r\n    assertThat(newArray[1]).isEqualTo(newElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNullElementArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToSingleNullElementArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToNullArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addObjectToNullArray() {\r\n    String newElement = \"foo\";\r\n    String[] newArray = ObjectUtils.addObjectToArray(null, newElement);\r\n    assertThat(newArray).hasSize(1);\r\n    assertThat(newArray[0]).isEqualTo(newElement);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addObjectToNullArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addObjectToNullArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addNullObjectToNullArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addNullObjectToNullArray() {\r\n    Object[] newArray = ObjectUtils.addObjectToArray(null, null);\r\n    assertThat(newArray).hasSize(1);\r\n    assertThat(newArray[0]).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#addNullObjectToNullArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#addNullObjectToNullArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#nullSafeEqualsWithArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeEqualsWithArrays() {\r\n    assertThat(ObjectUtils.nullSafeEquals(new String[] { \"a\", \"b\", \"c\" }, new String[] { \"a\", \"b\", \"c\" })).isTrue();\r\n    assertThat(ObjectUtils.nullSafeEquals(new int[] { 1, 2, 3 }, new int[] { 1, 2, 3 })).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtilsTests#nullSafeEqualsWithArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#nullSafeEqualsWithArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtilsTests#identityToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid identityToString() {\r\n    Object obj = new Object();\r\n    String expected = obj.getClass().getName() + \"@\" + ObjectUtils.getIdentityHexString(obj);\r\n    String actual = ObjectUtils.identityToString(obj);\r\n    assertThat(actual).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  }
]