[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#afterAllMappingsSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Method called after all mappings have been set. At this point no further\r\n * lookups from child mappings will occur.\r\n */\r\nvoid afterAllMappingsSet() {\r\n    validateAllAliasesClaimed();\r\n    for (int i = 0; i < this.mirrorSets.size(); i++) {\r\n        validateMirrorSet(this.mirrorSets.get(i));\r\n    }\r\n    this.claimedAliases.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#afterAllMappingsSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#validateAllAliasesClaimed()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void validateAllAliasesClaimed() {\r\n    for (int i = 0; i < this.attributes.size(); i++) {\r\n        Method attribute = this.attributes.get(i);\r\n        AliasFor aliasFor = AnnotationsScanner.getDeclaredAnnotation(attribute, AliasFor.class);\r\n        if (aliasFor != null && !this.claimedAliases.contains(attribute)) {\r\n            Method target = resolveAliasTarget(attribute, aliasFor);\r\n            throw new AnnotationConfigurationException(String.format(\"@AliasFor declaration on %s declares an alias for %s which is not meta-present.\", AttributeMethods.describe(attribute), AttributeMethods.describe(target)));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#validateAllAliasesClaimed()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#validateMirrorSet(MirrorSet)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void validateMirrorSet(MirrorSet mirrorSet) {\r\n    Method firstAttribute = mirrorSet.get(0);\r\n    Object firstDefaultValue = firstAttribute.getDefaultValue();\r\n    for (int i = 1; i <= mirrorSet.size() - 1; i++) {\r\n        Method mirrorAttribute = mirrorSet.get(i);\r\n        Object mirrorDefaultValue = mirrorAttribute.getDefaultValue();\r\n        if (firstDefaultValue == null || mirrorDefaultValue == null) {\r\n            throw new AnnotationConfigurationException(String.format(\"Misconfigured aliases: %s and %s must declare default values.\", AttributeMethods.describe(firstAttribute), AttributeMethods.describe(mirrorAttribute)));\r\n        }\r\n        if (!ObjectUtils.nullSafeEquals(firstDefaultValue, mirrorDefaultValue)) {\r\n            throw new AnnotationConfigurationException(String.format(\"Misconfigured aliases: %s and %s must declare the same default value.\", AttributeMethods.describe(firstAttribute), AttributeMethods.describe(mirrorAttribute)));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#validateMirrorSet(MirrorSet)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the root mapping.\r\n * @return the root mapping\r\n */\r\nAnnotationTypeMapping getRoot() {\r\n    return this.root;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the source of the mapping or {@code null}.\r\n * @return the source of the mapping\r\n */\r\n@Nullable\r\nAnnotationTypeMapping getSource() {\r\n    return this.source;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getDistance()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the distance of this mapping.\r\n * @return the distance of the mapping\r\n */\r\nint getDistance() {\r\n    return this.distance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getDistance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getAnnotationType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the type of the mapped annotation.\r\n * @return the annotation type\r\n */\r\nClass<? extends Annotation> getAnnotationType() {\r\n    return this.annotationType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getAnnotationType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getMetaTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "List<Class<? extends Annotation>> getMetaTypes() {\r\n    return this.metaTypes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getMetaTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the source annotation for this mapping. This will be the\r\n * meta-annotation, or {@code null} if this is the root mapping.\r\n * @return the source annotation of the mapping\r\n */\r\n@Nullable\r\nAnnotation getAnnotation() {\r\n    return this.annotation;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#getAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#getAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]