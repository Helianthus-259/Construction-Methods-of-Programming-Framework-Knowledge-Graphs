[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValueWithExistingNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldRemoveKeyAndValueWithExistingNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldValueWithNewValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldReplaceOldValueWithNewValue() {\r\n    this.map.put(123, \"123\");\r\n    assertThat(this.map.replace(123, \"456\", \"789\")).isFalse();\r\n    assertThat(this.map.get(123)).isEqualTo(\"123\");\r\n    assertThat(this.map.replace(123, \"123\", \"789\")).isTrue();\r\n    assertThat(this.map.get(123)).isEqualTo(\"789\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldValueWithNewValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldValueWithNewValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SerializationHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldNullValueWithNewValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldReplaceOldNullValueWithNewValue() {\r\n    this.map.put(123, null);\r\n    assertThat(this.map.replace(123, \"456\", \"789\")).isFalse();\r\n    assertThat(this.map.get(123)).isNull();\r\n    assertThat(this.map.replace(123, null, \"789\")).isTrue();\r\n    assertThat(this.map.get(123)).isEqualTo(\"789\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldNullValueWithNewValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceOldNullValueWithNewValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldReplaceValue() {\r\n    this.map.put(123, \"123\");\r\n    assertThat(this.map.replace(123, \"456\")).isEqualTo(\"123\");\r\n    assertThat(this.map.get(123)).isEqualTo(\"456\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceNullValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldReplaceNullValue() {\r\n    this.map.put(123, null);\r\n    assertThat(this.map.replace(123, \"456\")).isNull();\r\n    assertThat(this.map.get(123)).isEqualTo(\"456\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceNullValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldReplaceNullValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldGetSize() {\r\n    assertThat(this.map).isEmpty();\r\n    this.map.put(123, \"123\");\r\n    this.map.put(123, null);\r\n    this.map.put(456, \"456\");\r\n    assertThat(this.map).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldGetSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMapTests#shouldSupportIsEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid shouldSupportIsEmpty() {\r\n    assertThat(this.map).isEmpty();\r\n    this.map.put(123, \"123\");\r\n    this.map.put(123, null);\r\n    this.map.put(456, \"456\");\r\n    assertThat(this.map).isNotEmpty();\r\n}",
    "tailType": "method_code"
  }
]