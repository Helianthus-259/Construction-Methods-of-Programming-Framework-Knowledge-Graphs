[
  {
    "head": "org.springframework.core.convert.ConversionException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2010 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert;\n\nimport org.springframework.core.NestedRuntimeException;\n\n/**\n * Base class for exceptions thrown by the conversion system.\n *\n * @author Keith Donald\n * @since 3.0\n */\n@SuppressWarnings(\"serial\")\npublic abstract class ConversionException extends NestedRuntimeException {\n\n\t/**\n\t * Construct a new conversion exception.\n\t * @param message the exception message\n\t */\n\tpublic ConversionException(String message) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t * Construct a new conversion exception.\n\t * @param message the exception message\n\t * @param cause the cause\n\t */\n\tpublic ConversionException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionException",
    "headType": "class",
    "relation": "extend",
    "tail": "NestedRuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.ConversionFailedException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Exception to be thrown when an actual type conversion attempt fails.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\n@SuppressWarnings(\"serial\")\npublic class ConversionFailedException extends ConversionException {\n\n\tprivate final @Nullable TypeDescriptor sourceType;\n\n\tprivate final TypeDescriptor targetType;\n\n\tprivate final @Nullable Object value;\n\n\n\t/**\n\t * Create a new conversion exception.\n\t * @param sourceType the value's original type\n\t * @param targetType the value's target type\n\t * @param value the value we tried to convert\n\t * @param cause the cause of the conversion failure\n\t */\n\tpublic ConversionFailedException(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType,\n\t\t\t@Nullable Object value, Throwable cause) {\n\n\t\tsuper(\"Failed to convert from type [\" + sourceType + \"] to type [\" + targetType +\n\t\t\t\t\"] for value [\" + ObjectUtils.nullSafeConciseToString(value) + \"]\", cause);\n\t\tthis.sourceType = sourceType;\n\t\tthis.targetType = targetType;\n\t\tthis.value = value;\n\t}\n\n\n\t/**\n\t * Return the source type we tried to convert the value from.\n\t */\n\tpublic @Nullable TypeDescriptor getSourceType() {\n\t\treturn this.sourceType;\n\t}\n\n\t/**\n\t * Return the target type we tried to convert the value to.\n\t */\n\tpublic TypeDescriptor getTargetType() {\n\t\treturn this.targetType;\n\t}\n\n\t/**\n\t * Return the offending value.\n\t */\n\tpublic @Nullable Object getValue() {\n\t\treturn this.value;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.ConversionFailedException#sourceType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#sourceType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.ConversionFailedException#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.ConversionFailedException#value",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#value",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#getSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the source type we tried to convert the value from.\r\n */\r\n@Nullable\r\npublic TypeDescriptor getSourceType() {\r\n    return this.sourceType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionFailedException#getSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#getSourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#getTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the target type we tried to convert the value to.\r\n */\r\npublic TypeDescriptor getTargetType() {\r\n    return this.targetType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionFailedException#getTargetType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the offending value.\r\n */\r\n@Nullable\r\npublic Object getValue() {\r\n    return this.value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.ConversionFailedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.ConversionFailedException#getValue()",
    "tailType": "method"
  }
]