[
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForStringBuilders()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEnum()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForEnum() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(Tropes.FOO)).isEqualTo(\"FOO\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEnum()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForEnum()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPrimitivesAndWrappers()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForPrimitivesAndWrappers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(true)).isEqualTo(\"true\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString('X')).isEqualTo(\"X\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(42L)).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(99.1234D)).isEqualTo(\"99.1234\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPrimitivesAndWrappers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForPrimitivesAndWrappers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForBigNumbers()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForBigNumbers() {\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigInteger.valueOf(42L))).isEqualTo(\"42\");\r\n    assertThat(ObjectUtils.nullSafeConciseToString(BigDecimal.valueOf(99.1234D))).isEqualTo(\"99.1234\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForBigNumbers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForBigNumbers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForDate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForDate() {\r\n    Date date = new Date();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(date)).isEqualTo(date.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForDate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForDate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTemporal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForTemporal() {\r\n    LocalDate localDate = LocalDate.now();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(localDate)).isEqualTo(localDate.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTemporal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForTemporal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForUUID()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForUUID() {\r\n    UUID id = UUID.randomUUID();\r\n    assertThat(ObjectUtils.nullSafeConciseToString(id)).isEqualTo(id.toString());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForUUID()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForUUID()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.NullSafeConciseToStringTests#nullSafeConciseToStringForFile()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullSafeConciseToStringForFile() {\r\n    String path = \"/tmp/file.txt\".replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).isEqualTo(path);\r\n    path = (\"/tmp/\" + \"xyz\".repeat(32)).replace('/', File.separatorChar);\r\n    assertThat(ObjectUtils.nullSafeConciseToString(new File(path))).hasSize(truncatedLength).startsWith(path.subSequence(0, 100)).endsWith(truncated);\r\n}",
    "tailType": "method_code"
  }
]