[
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#isCglibProxyClassName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#isCglibProxyClassName(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#getUserClass(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the user-defined class for the given instance: usually simply\r\n * the class of the given instance, but the original class in case of a\r\n * CGLIB-generated subclass.\r\n * @param instance the instance to check\r\n * @return the user-defined class\r\n */\r\npublic static Class<?> getUserClass(Object instance) {\r\n    Assert.notNull(instance, \"Instance must not be null\");\r\n    return getUserClass(instance.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getUserClass(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getUserClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the user-defined class for the given class: usually simply the given\r\n * class, but the original class in case of a CGLIB-generated subclass.\r\n * @param clazz the class to check\r\n * @return the user-defined class\r\n * @see #CGLIB_CLASS_SEPARATOR\r\n */\r\npublic static Class<?> getUserClass(Class<?> clazz) {\r\n    if (clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\r\n        Class<?> superclass = clazz.getSuperclass();\r\n        if (superclass != null && superclass != Object.class) {\r\n            return superclass;\r\n        }\r\n    }\r\n    return clazz;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getUserClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getDescriptiveType(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a descriptive name for the given object's type: usually simply\r\n * the class name, but component type class name + \"[]\" for arrays,\r\n * and an appended list of implemented interfaces for JDK proxies.\r\n * @param value the value to introspect\r\n * @return the qualified name of the class\r\n */\r\n@Nullable\r\npublic static String getDescriptiveType(@Nullable Object value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    Class<?> clazz = value.getClass();\r\n    if (Proxy.isProxyClass(clazz)) {\r\n        String prefix = clazz.getTypeName() + \" implementing \";\r\n        StringJoiner result = new StringJoiner(\",\", prefix, \"\");\r\n        for (Class<?> ifc : clazz.getInterfaces()) {\r\n            result.add(ifc.getTypeName());\r\n        }\r\n        return result.toString();\r\n    } else {\r\n        return clazz.getTypeName();\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getDescriptiveType(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getDescriptiveType(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtils#matchesTypeName(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given class matches the user-specified type name.\r\n * @param clazz the class to check\r\n * @param typeName the type name to match\r\n */\r\npublic static boolean matchesTypeName(Class<?> clazz, @Nullable String typeName) {\r\n    return (typeName != null && (typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#matchesTypeName(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getShortName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the class name without the qualified package name.\r\n * @param className the className to get the short name for\r\n * @return the class name of the class without the package name\r\n * @throws IllegalArgumentException if the className is empty\r\n */\r\npublic static String getShortName(String className) {\r\n    Assert.hasLength(className, \"Class name must not be empty\");\r\n    int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);\r\n    int nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);\r\n    if (nameEndIndex == -1) {\r\n        nameEndIndex = className.length();\r\n    }\r\n    String shortName = className.substring(lastDotIndex + 1, nameEndIndex);\r\n    shortName = shortName.replace(NESTED_CLASS_SEPARATOR, PACKAGE_SEPARATOR);\r\n    return shortName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getShortName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getShortName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the class name without the qualified package name.\r\n * @param clazz the class to get the short name for\r\n * @return the class name of the class without the package name\r\n */\r\npublic static String getShortName(Class<?> clazz) {\r\n    return getShortName(getQualifiedName(clazz));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getShortName(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getShortNameAsProperty(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the short string name of a Java class in uncapitalized JavaBeans\r\n * property format. Strips the outer class name in case of a nested class.\r\n * @param clazz the class\r\n * @return the short name rendered in a standard JavaBeans property format\r\n * @see StringUtils#uncapitalizeAsProperty(String)\r\n */\r\npublic static String getShortNameAsProperty(Class<?> clazz) {\r\n    String shortName = getShortName(clazz);\r\n    int dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);\r\n    shortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);\r\n    return StringUtils.uncapitalizeAsProperty(shortName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getShortNameAsProperty(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getClassFileName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the name of the class file, relative to the containing\r\n * package: for example, \"String.class\".\r\n * @param clazz the class\r\n * @return the file name of the \".class\" file\r\n */\r\npublic static String getClassFileName(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    String className = clazz.getName();\r\n    int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);\r\n    return className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getClassFileName(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getPackageName(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the name of the package of the given class,\r\n * for example, \"java.lang\" for the {@code java.lang.String} class.\r\n * @param clazz the class\r\n * @return the package name, or the empty String if the class\r\n * is defined in the default package\r\n */\r\npublic static String getPackageName(Class<?> clazz) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    return getPackageName(clazz.getName());\r\n}",
    "tailType": "method_code"
  }
]