[
  {
    "head": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(TypeReference)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that a JDK proxy implementing the interfaces defined by the\r\n * specified {@linkplain TypeReference type references} is required.\r\n * @param proxiedInterfaces the type references for the interfaces the proxy\r\n * should implement\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ProxyHints registerJdkProxy(TypeReference... proxiedInterfaces) {\r\n    return registerJdkProxy(jdkProxyHint -> jdkProxyHint.proxiedInterfaces(proxiedInterfaces));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(TypeReference)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register that a JDK proxy implementing the specified interfaces is\r\n * required.\r\n * <p>When registering a JDK proxy for Spring AOP, consider using\r\n * {@link org.springframework.aop.framework.AopProxyUtils#completeJdkProxyInterfaces(Class...)\r\n * AopProxyUtils.completeJdkProxyInterfaces()} for convenience.\r\n * @param proxiedInterfaces the interfaces the proxy should implement\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic ProxyHints registerJdkProxy(Class<?>... proxiedInterfaces) {\r\n    return registerJdkProxy(jdkProxyHint -> jdkProxyHint.proxiedInterfaces(proxiedInterfaces));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHints#registerJdkProxy(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeCollectionTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\n/**\n * @author Arjen Poutsma\n */\nclass CompositeCollectionTests {\n\n\t@Test\n\tvoid size() {\n\t\tList<String> first = List.of(\"foo\", \"bar\", \"baz\");\n\t\tList<String> second = List.of(\"qux\", \"quux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThat(composite).hasSize(5);\n\t}\n\n\t@Test\n\tvoid isEmpty() {\n\t\tList<String> first = List.of(\"foo\", \"bar\", \"baz\");\n\t\tList<String> second = List.of(\"qux\", \"quux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThat(composite).isNotEmpty();\n\n\t\tcomposite = new CompositeCollection<>(Collections.emptyList(), Collections.emptyList());\n\t\tassertThat(composite).isEmpty();\n\t}\n\n\t@Test\n\tvoid contains() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThat(composite.contains(\"foo\")).isTrue();\n\t\tassertThat(composite.contains(\"bar\")).isTrue();\n\t\tassertThat(composite.contains(\"baz\")).isTrue();\n\t\tassertThat(composite.contains(\"qux\")).isTrue();\n\t\tassertThat(composite.contains(\"quux\")).isFalse();\n\t}\n\n\t@Test\n\tvoid iterator() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tIterator<String> iterator = composite.iterator();\n\t\tassertThat(iterator).hasNext();\n\t\tassertThat(iterator.next()).isEqualTo(\"foo\");\n\t\tassertThat(iterator).hasNext();\n\t\tassertThat(iterator.next()).isEqualTo(\"bar\");\n\t\tassertThat(iterator).hasNext();\n\t\tassertThat(iterator.next()).isEqualTo(\"baz\");\n\t\tassertThat(iterator).hasNext();\n\t\tassertThat(iterator.next()).isEqualTo(\"qux\");\n\t\tassertThat(iterator).isExhausted();\n\t}\n\n\t@Test\n\tvoid toArray() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tObject[] array = composite.toArray();\n\t\tassertThat(array).containsExactly(\"foo\", \"bar\", \"baz\", \"qux\");\n\t}\n\n\t@Test\n\tvoid toArrayArgs() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tString[] array = new String[composite.size()];\n\t\tarray = composite.toArray(array);\n\t\tassertThat(array).containsExactly(\"foo\", \"bar\", \"baz\", \"qux\");\n\t}\n\n\t@Test\n\tvoid add() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> composite.add(\"quux\"));\n\t}\n\n\t@Test\n\tvoid remove() {\n\t\tList<String> first = new ArrayList<>(List.of(\"foo\", \"bar\"));\n\t\tList<String> second = new ArrayList<>(List.of(\"baz\", \"qux\"));\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThat(composite.remove(\"foo\")).isTrue();\n\t\tassertThat(composite.contains(\"foo\")).isFalse();\n\t\tassertThat(first).containsExactly(\"bar\");\n\n\t\tassertThat(composite.remove(\"quux\")).isFalse();\n\t}\n\n\t@Test\n\tvoid containsAll() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tList<String> all = new ArrayList<>(first);\n\t\tall.addAll(second);\n\n\t\tassertThat(composite.containsAll(all)).isTrue();\n\n\t\tall.add(\"quux\");\n\n\t\tassertThat(composite.containsAll(all)).isFalse();\n\t}\n\n\t@Test\n\tvoid addAll() {\n\t\tList<String> first = List.of(\"foo\", \"bar\");\n\t\tList<String> second = List.of(\"baz\", \"qux\");\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> composite.addAll(List.of(\"quux\", \"corge\")));\n\t}\n\n\t@Test\n\tvoid removeAll() {\n\t\tList<String> first = new ArrayList<>(List.of(\"foo\", \"bar\"));\n\t\tList<String> second = new ArrayList<>(List.of(\"baz\", \"qux\"));\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tList<String> all = new ArrayList<>(first);\n\t\tall.addAll(second);\n\n\t\tassertThat(composite.removeAll(all)).isTrue();\n\n\t\tassertThat(composite).isEmpty();\n\t\tassertThat(first).isEmpty();\n\t\tassertThat(second).isEmpty();\n\t}\n\n\t@Test\n\tvoid retainAll() {\n\t\tList<String> first = new ArrayList<>(List.of(\"foo\", \"bar\"));\n\t\tList<String> second = new ArrayList<>(List.of(\"baz\", \"qux\"));\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tassertThat(composite.retainAll(List.of(\"bar\", \"baz\"))).isTrue();\n\n\t\tassertThat(composite).containsExactly(\"bar\", \"baz\");\n\t\tassertThat(first).containsExactly(\"bar\");\n\t\tassertThat(second).containsExactly(\"baz\");\n\t}\n\n\t@Test\n\tvoid clear() {\n\t\tList<String> first = new ArrayList<>(List.of(\"foo\", \"bar\"));\n\t\tList<String> second = new ArrayList<>(List.of(\"baz\", \"qux\"));\n\t\tCompositeCollection<String> composite = new CompositeCollection<>(first, second);\n\n\t\tcomposite.clear();\n\n\t\tassertThat(composite).isEmpty();\n\t\tassertThat(first).isEmpty();\n\t\tassertThat(second).isEmpty();\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid size() {\r\n    List<String> first = List.of(\"foo\", \"bar\", \"baz\");\r\n    List<String> second = List.of(\"qux\", \"quux\");\r\n    CompositeCollection<String> composite = new CompositeCollection<>(first, second);\r\n    assertThat(composite).hasSize(5);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollectionTests#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#isEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isEmpty() {\r\n    List<String> first = List.of(\"foo\", \"bar\", \"baz\");\r\n    List<String> second = List.of(\"qux\", \"quux\");\r\n    CompositeCollection<String> composite = new CompositeCollection<>(first, second);\r\n    assertThat(composite).isNotEmpty();\r\n    composite = new CompositeCollection<>(Collections.emptyList(), Collections.emptyList());\r\n    assertThat(composite).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollectionTests#isEmpty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#isEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#contains()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid contains() {\r\n    List<String> first = List.of(\"foo\", \"bar\");\r\n    List<String> second = List.of(\"baz\", \"qux\");\r\n    CompositeCollection<String> composite = new CompositeCollection<>(first, second);\r\n    assertThat(composite.contains(\"foo\")).isTrue();\r\n    assertThat(composite.contains(\"bar\")).isTrue();\r\n    assertThat(composite.contains(\"baz\")).isTrue();\r\n    assertThat(composite.contains(\"qux\")).isTrue();\r\n    assertThat(composite.contains(\"quux\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollectionTests#contains()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#contains()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#iterator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid iterator() {\r\n    List<String> first = List.of(\"foo\", \"bar\");\r\n    List<String> second = List.of(\"baz\", \"qux\");\r\n    CompositeCollection<String> composite = new CompositeCollection<>(first, second);\r\n    Iterator<String> iterator = composite.iterator();\r\n    assertThat(iterator).hasNext();\r\n    assertThat(iterator.next()).isEqualTo(\"foo\");\r\n    assertThat(iterator).hasNext();\r\n    assertThat(iterator.next()).isEqualTo(\"bar\");\r\n    assertThat(iterator).hasNext();\r\n    assertThat(iterator.next()).isEqualTo(\"baz\");\r\n    assertThat(iterator).hasNext();\r\n    assertThat(iterator.next()).isEqualTo(\"qux\");\r\n    assertThat(iterator).isExhausted();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollectionTests#iterator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#iterator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeCollectionTests#toArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toArray() {\r\n    List<String> first = List.of(\"foo\", \"bar\");\r\n    List<String> second = List.of(\"baz\", \"qux\");\r\n    CompositeCollection<String> composite = new CompositeCollection<>(first, second);\r\n    Object[] array = composite.toArray();\r\n    assertThat(array).containsExactly(\"foo\", \"bar\", \"baz\", \"qux\");\r\n}",
    "tailType": "method_code"
  }
]