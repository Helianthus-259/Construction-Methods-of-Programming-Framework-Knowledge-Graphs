[
  {
    "head": "org.springframework.asm.ConstantDynamic#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the name of this constant.\r\n *\r\n * @return the name of this constant.\r\n */\r\npublic String getName() {\r\n    return name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the type of this constant.\r\n *\r\n * @return the type of this constant, as a field descriptor.\r\n */\r\npublic String getDescriptor() {\r\n    return descriptor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the bootstrap method used to compute the value of this constant.\r\n *\r\n * @return the bootstrap method used to compute the value of this constant.\r\n */\r\npublic Handle getBootstrapMethod() {\r\n    return bootstrapMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getBootstrapMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of arguments passed to the bootstrap method, in order to compute the value\r\n * of this constant.\r\n *\r\n * @return the number of arguments passed to the bootstrap method, in order to compute the value\r\n *     of this constant.\r\n */\r\npublic int getBootstrapMethodArgumentCount() {\r\n    return bootstrapMethodArguments.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns an argument passed to the bootstrap method, in order to compute the value of this\r\n * constant.\r\n *\r\n * @param index an argument index, between 0 and {@link #getBootstrapMethodArgumentCount()}\r\n *     (exclusive).\r\n * @return the argument passed to the bootstrap method, with the given index.\r\n */\r\npublic Object getBootstrapMethodArgument(final int index) {\r\n    return bootstrapMethodArguments[index];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgument(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the arguments to pass to the bootstrap method, in order to compute the value of this\r\n * constant. WARNING: this array must not be modified, and must not be returned to the user.\r\n *\r\n * @return the arguments to pass to the bootstrap method, in order to compute the value of this\r\n *     constant.\r\n */\r\nObject[] getBootstrapMethodArgumentsUnsafe() {\r\n    return bootstrapMethodArguments;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#getSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of this constant.\r\n *\r\n * @return the size of this constant, i.e., 2 for {@code long} and {@code double}, 1 otherwise.\r\n */\r\npublic int getSize() {\r\n    char firstCharOfDescriptor = descriptor.charAt(0);\r\n    return (firstCharOfDescriptor == 'J' || firstCharOfDescriptor == 'D') ? 2 : 1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#getSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(final Object object) {\r\n    if (object == this) {\r\n        return true;\r\n    }\r\n    if (!(object instanceof ConstantDynamic)) {\r\n        return false;\r\n    }\r\n    ConstantDynamic constantDynamic = (ConstantDynamic) object;\r\n    return name.equals(constantDynamic.name) && descriptor.equals(constantDynamic.descriptor) && bootstrapMethod.equals(constantDynamic.bootstrapMethod) && Arrays.equals(bootstrapMethodArguments, constantDynamic.bootstrapMethodArguments);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return name.hashCode() ^ Integer.rotateLeft(descriptor.hashCode(), 8) ^ Integer.rotateLeft(bootstrapMethod.hashCode(), 16) ^ Integer.rotateLeft(Arrays.hashCode(bootstrapMethodArguments), 24);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ConstantDynamic#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ConstantDynamic#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]