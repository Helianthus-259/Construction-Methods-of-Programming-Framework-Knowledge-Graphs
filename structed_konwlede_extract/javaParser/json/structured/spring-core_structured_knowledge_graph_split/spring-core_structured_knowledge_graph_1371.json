[
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the specified {@link Method} against the supplied target object with the\r\n * supplied arguments. The target object can be {@code null} when invoking a\r\n * static {@link Method}.\r\n * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException}.\r\n * @param method the method to invoke\r\n * @param target the target object to invoke the method on\r\n * @param args the invocation arguments (may be {@code null})\r\n * @return the invocation result, if any\r\n */\r\n@Nullable\r\npublic static Object invokeMethod(Method method, @Nullable Object target, @Nullable Object... args) {\r\n    try {\r\n        return method.invoke(target, args);\r\n    } catch (Exception ex) {\r\n        handleReflectionException(ex);\r\n    }\r\n    throw new IllegalStateException(\"Should never get here\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#declaresException(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method explicitly declares the given\r\n * exception or one of its superclasses, which means that an exception\r\n * of that type can be propagated as-is within a reflective invocation.\r\n * @param method the declaring method\r\n * @param exceptionType the exception to throw\r\n * @return {@code true} if the exception can be thrown as-is;\r\n * {@code false} if it needs to be wrapped\r\n */\r\npublic static boolean declaresException(Method method, Class<?> exceptionType) {\r\n    Assert.notNull(method, \"Method must not be null\");\r\n    Class<?>[] declaredExceptions = method.getExceptionTypes();\r\n    for (Class<?> declaredException : declaredExceptions) {\r\n        if (declaredException.isAssignableFrom(exceptionType)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#declaresException(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithLocalMethods(Class<?>,MethodCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Perform the given callback operation on all matching methods of the given\r\n * class, as locally declared or equivalent thereof (such as default methods\r\n * on Java 8 based interfaces that the given class implements).\r\n * @param clazz the class to introspect\r\n * @param mc the callback to invoke for each method\r\n * @throws IllegalStateException if introspection fails\r\n * @since 4.2\r\n * @see #doWithMethods\r\n */\r\npublic static void doWithLocalMethods(Class<?> clazz, MethodCallback mc) {\r\n    Method[] methods = getDeclaredMethods(clazz, false);\r\n    for (Method method : methods) {\r\n        try {\r\n            mc.doWith(method);\r\n        } catch (IllegalAccessException ex) {\r\n            throw new IllegalStateException(\"Not allowed to access method '\" + method.getName() + \"': \" + ex);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithLocalMethods(Class<?>,MethodCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithMethods(Class<?>,MethodCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Perform the given callback operation on all matching methods of the given\r\n * class and superclasses.\r\n * <p>The same named method occurring on subclass and superclass will appear\r\n * twice, unless excluded by a {@link MethodFilter}.\r\n * @param clazz the class to introspect\r\n * @param mc the callback to invoke for each method\r\n * @throws IllegalStateException if introspection fails\r\n * @see #doWithMethods(Class, MethodCallback, MethodFilter)\r\n */\r\npublic static void doWithMethods(Class<?> clazz, MethodCallback mc) {\r\n    doWithMethods(clazz, mc, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithMethods(Class<?>,MethodCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#doWithMethods(Class<?>,MethodCallback,MethodFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Perform the given callback operation on all matching methods of the given\r\n * class and superclasses (or given interface and super-interfaces).\r\n * <p>The same named method occurring on subclass and superclass will appear\r\n * twice, unless excluded by the specified {@link MethodFilter}.\r\n * @param clazz the class to introspect\r\n * @param mc the callback to invoke for each method\r\n * @param mf the filter that determines the methods to apply the callback to\r\n * @throws IllegalStateException if introspection fails\r\n */\r\npublic static void doWithMethods(Class<?> clazz, MethodCallback mc, @Nullable MethodFilter mf) {\r\n    if (mf == USER_DECLARED_METHODS && clazz == Object.class) {\r\n        // nothing to introspect\r\n        return;\r\n    }\r\n    Method[] methods = getDeclaredMethods(clazz, false);\r\n    for (Method method : methods) {\r\n        if (mf != null && !mf.matches(method)) {\r\n            continue;\r\n        }\r\n        try {\r\n            mc.doWith(method);\r\n        } catch (IllegalAccessException ex) {\r\n            throw new IllegalStateException(\"Not allowed to access method '\" + method.getName() + \"': \" + ex);\r\n        }\r\n    }\r\n    // Keep backing up the inheritance hierarchy.\r\n    if (clazz.getSuperclass() != null && (mf != USER_DECLARED_METHODS || clazz.getSuperclass() != Object.class)) {\r\n        doWithMethods(clazz.getSuperclass(), mc, mf);\r\n    } else if (clazz.isInterface()) {\r\n        for (Class<?> superIfc : clazz.getInterfaces()) {\r\n            doWithMethods(superIfc, mc, mf);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#doWithMethods(Class<?>,MethodCallback,MethodFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getAllDeclaredMethods(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get all declared methods on the leaf class and all superclasses.\r\n * Leaf class methods are included first.\r\n * @param leafClass the class to introspect\r\n * @throws IllegalStateException if introspection fails\r\n */\r\npublic static Method[] getAllDeclaredMethods(Class<?> leafClass) {\r\n    final List<Method> methods = new ArrayList<>(20);\r\n    doWithMethods(leafClass, methods::add);\r\n    return methods.toArray(EMPTY_METHOD_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getAllDeclaredMethods(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getUniqueDeclaredMethods(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the unique set of declared methods on the leaf class and all superclasses.\r\n * Leaf class methods are included first and while traversing the superclass hierarchy\r\n * any methods found with signatures matching a method already included are filtered out.\r\n * @param leafClass the class to introspect\r\n * @throws IllegalStateException if introspection fails\r\n */\r\npublic static Method[] getUniqueDeclaredMethods(Class<?> leafClass) {\r\n    return getUniqueDeclaredMethods(leafClass, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getUniqueDeclaredMethods(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getUniqueDeclaredMethods(Class<?>,MethodFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the unique set of declared methods on the leaf class and all superclasses.\r\n * Leaf class methods are included first and while traversing the superclass hierarchy\r\n * any methods found with signatures matching a method already included are filtered out.\r\n * @param leafClass the class to introspect\r\n * @param mf the filter that determines the methods to take into account\r\n * @throws IllegalStateException if introspection fails\r\n * @since 5.2\r\n */\r\npublic static Method[] getUniqueDeclaredMethods(Class<?> leafClass, @Nullable MethodFilter mf) {\r\n    final List<Method> methods = new ArrayList<>(20);\r\n    doWithMethods(leafClass, method -> {\r\n        boolean knownSignature = false;\r\n        Method methodBeingOverriddenWithCovariantReturnType = null;\r\n        for (Method existingMethod : methods) {\r\n            if (method.getName().equals(existingMethod.getName()) && method.getParameterCount() == existingMethod.getParameterCount() && Arrays.equals(method.getParameterTypes(), existingMethod.getParameterTypes())) {\r\n                // Is this a covariant return type situation?\r\n                if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) {\r\n                    methodBeingOverriddenWithCovariantReturnType = existingMethod;\r\n                } else {\r\n                    knownSignature = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (methodBeingOverriddenWithCovariantReturnType != null) {\r\n            methods.remove(methodBeingOverriddenWithCovariantReturnType);\r\n        }\r\n        if (!knownSignature && !isCglibRenamedMethod(method)) {\r\n            methods.add(method);\r\n        }\r\n    }, mf);\r\n    return methods.toArray(EMPTY_METHOD_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getUniqueDeclaredMethods(Class<?>,MethodFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getDeclaredMethods(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Variant of {@link Class#getDeclaredMethods()} that uses a local cache in\r\n * order to avoid new Method instances. In addition, it also includes Java 8\r\n * default methods from locally implemented interfaces, since those are\r\n * effectively to be treated just like declared methods.\r\n * @param clazz the class to introspect\r\n * @return the cached array of methods\r\n * @throws IllegalStateException if introspection fails\r\n * @since 5.2\r\n * @see Class#getDeclaredMethods()\r\n */\r\npublic static Method[] getDeclaredMethods(Class<?> clazz) {\r\n    return getDeclaredMethods(clazz, true);\r\n}",
    "tailType": "method_code"
  }
]