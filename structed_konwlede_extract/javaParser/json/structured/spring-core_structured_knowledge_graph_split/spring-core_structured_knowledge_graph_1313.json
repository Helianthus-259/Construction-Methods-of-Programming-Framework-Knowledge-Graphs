[
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMap#put(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMap#put(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#put(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#remove(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\npublic V remove(Object key) {\r\n    V oldValue = this.delegate.remove(key);\r\n    if (oldValue != null && this.filter.test((K) key)) {\r\n        return oldValue;\r\n    } else {\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMap#remove(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#remove(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void clear() {\r\n    this.delegate.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMap#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMap#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap#keySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<K> keySet() {\r\n    return new FilteredSet<>(this.delegate.keySet(), this.filter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMap#keySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMap#keySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMap",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractMap",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FilteredSet",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FilteredSet",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Set;\nimport java.util.function.Predicate;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Set that filters out values that do not match a predicate.\n * This type is used by {@link CompositeMap}.\n *\n * @author Arjen Poutsma\n * @since 6.2\n * @param <E> the type of elements maintained by this set\n */\nfinal class FilteredSet<E> extends FilteredCollection<E> implements Set<E> {\n\n\tpublic FilteredSet(Set<E> delegate, Predicate<E> filter) {\n\t\tsuper(delegate, filter);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\tif (this == other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (other instanceof Set<?> otherSet && size() == otherSet.size()) {\n\t\t\ttry {\n\t\t\t\treturn containsAll(otherSet);\n\t\t\t}\n\t\t\tcatch (ClassCastException | NullPointerException ignored) {\n\t\t\t\t// fall through\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hashCode = 0;\n\t\tfor (E obj : this) {\n\t\t\tif (obj != null) {\n\t\t\t\thashCode += obj.hashCode();\n\t\t\t}\n\t\t}\n\t\treturn hashCode;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FilteredSet#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other instanceof Set<?> otherSet && size() == otherSet.size()) {\r\n        try {\r\n            return containsAll(otherSet);\r\n        } catch (ClassCastException | NullPointerException ignored) {\r\n            // fall through\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredSet",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredSet#equals(Object)",
    "tailType": "method"
  }
]