[
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileDoesNotExist()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileDoesNotExist()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverride()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsCanOverride() throws IOException {\r\n    this.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\r\n    AtomicBoolean called = new AtomicBoolean(false);\r\n    this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        called.set(true);\r\n        handler.override(createSource(\"overridden\"));\r\n    });\r\n    assertThat(called).isTrue();\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"overridden\").hasOverride(true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverride()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverride()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverrideUsingExistingContent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsCanOverrideUsingExistingContent() throws IOException {\r\n    this.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\r\n    AtomicBoolean called = new AtomicBoolean(false);\r\n    this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\r\n        called.set(true);\r\n        assertThat(handler.getContent()).isNotNull();\r\n        String existing = readSource(handler.getContent());\r\n        handler.override(createSource(existing + \"-override\"));\r\n    });\r\n    assertThat(called).isTrue();\r\n    assertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"existing-override\").hasOverride(true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverrideUsingExistingContent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsCanOverrideUsingExistingContent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsFailedToCreate()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid handleFileWhenFileExistsFailedToCreate() {\r\n    TestFileHandler fileHandler = new TestFileHandler(createSource(\"existing\"));\r\n    this.generatedFiles.setFileHandler(fileHandler);\r\n    assertThatIllegalStateException().isThrownBy(() -> this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> handler.create(createSource(\"should fail\")))).withMessage(\"%s already exists\".formatted(fileHandler));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsFailedToCreate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#handleFileWhenFileExistsFailedToCreate()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#createSource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static InputStreamSource createSource(String content) {\r\n    return new ByteArrayResource(content.getBytes(StandardCharsets.UTF_8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#createSource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#readSource(InputStreamSource)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String readSource(InputStreamSource content) throws IOException {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    content.getInputStream().transferTo(out);\r\n    return out.toString(StandardCharsets.UTF_8);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#readSource(InputStreamSource)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests#assertThatFileAdded(Kind,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private GeneratedFileAssert assertThatFileAdded(Kind kind, String path) throws IOException {\r\n    return this.generatedFiles.assertThatFileAdded(kind, path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedFilesTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedFilesTests#assertThatFileAdded(Kind,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.TestGeneratedFiles",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.TestGeneratedFiles",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport javax.lang.model.element.Modifier;\n\nimport org.assertj.core.api.AbstractStringAssert;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.GeneratedFiles.FileHandler;\nimport org.springframework.aot.generate.GeneratedFiles.Kind;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.core.io.InputStreamSource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.javapoet.JavaFile;\nimport org.springframework.javapoet.MethodSpec;\nimport org.springframework.javapoet.TypeSpec;\nimport org.springframework.util.function.ThrowingConsumer;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link GeneratedFiles}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass GeneratedFilesTests {\n\n\tprivate final TestGeneratedFiles generatedFiles = new TestGeneratedFiles();\n\n\t@Test\n\tvoid addSourceFileWithJavaFileAddsFile() throws Exception {\n\t\tMethodSpec main = MethodSpec.methodBuilder(\"main\")\n\t\t\t\t.addModifiers(Modifier.PUBLIC, Modifier.STATIC).returns(void.class)\n\t\t\t\t.addParameter(String[].class, \"args\")\n\t\t\t\t.addStatement(\"$T.out.println($S)\", System.class, \"Hello, World!\")\n\t\t\t\t.build();\n\t\tTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n\t\t\t\t.addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(main).build();\n\t\tJavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld).build();\n\t\tthis.generatedFiles.addSourceFile(javaFile);\n\t\tassertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\")\n\t\t\t\t.contains(\"Hello, World!\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithJavaFileInTheDefaultPackageThrowsException() {\n\t\tTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\").build();\n\t\tJavaFile javaFile = JavaFile.builder(\"\", helloWorld).build();\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> this.generatedFiles.addSourceFile(javaFile))\n\t\t\t\t.withMessage(\"Could not add 'HelloWorld', processing classes in the \"\n\t\t\t\t\t\t+ \"default package is not supported. Did you forget to add a package statement?\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithCharSequenceAddsFile() throws Exception {\n\t\tthis.generatedFiles.addSourceFile(\"com.example.HelloWorld\", \"{}\");\n\t\tassertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithCharSequenceWhenClassNameIsEmptyThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedFiles.addSourceFile(\"\", \"{}\"))\n\t\t\t\t.withMessage(\"'className' must not be empty\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithCharSequenceWhenClassNameIsInTheDefaultPackageThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedFiles.addSourceFile(\"HelloWorld\", \"{}\"))\n\t\t\t\t.withMessage(\"Could not add 'HelloWorld', processing classes in the \"\n\t\t\t\t\t\t+ \"default package is not supported. Did you forget to add a package statement?\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithCharSequenceWhenClassNameIsInvalidThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> this.generatedFiles\n\t\t\t\t\t\t.addSourceFile(\"com/example/HelloWorld.java\", \"{}\"))\n\t\t\t\t.withMessage(\"'className' must be a valid identifier, got 'com/example/HelloWorld.java'\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithConsumedAppendableAddsFile() throws Exception {\n\t\tthis.generatedFiles.addSourceFile(\"com.example.HelloWorld\",\n\t\t\t\tappendable -> appendable.append(\"{}\"));\n\t\tassertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid addSourceFileWithInputStreamSourceAddsFile() throws Exception {\n\t\tResource resource = new ByteArrayResource(\"{}\".getBytes(StandardCharsets.UTF_8));\n\t\tthis.generatedFiles.addSourceFile(\"com.example.HelloWorld\", resource);\n\t\tassertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid addResourceFileWithCharSequenceAddsFile() throws Exception {\n\t\tthis.generatedFiles.addResourceFile(\"META-INF/file\", \"test\");\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid addResourceFileWithConsumedAppendableAddsFile() throws Exception {\n\t\tthis.generatedFiles.addResourceFile(\"META-INF/file\",\n\t\t\t\tappendable -> appendable.append(\"test\"));\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid addResourceFileWithInputStreamSourceAddsFile() throws IOException {\n\t\tResource resource = new ByteArrayResource(\n\t\t\t\t\"test\".getBytes(StandardCharsets.UTF_8));\n\t\tthis.generatedFiles.addResourceFile(\"META-INF/file\", resource);\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid addClassFileWithInputStreamSourceAddsFile() throws IOException {\n\t\tResource resource = new ByteArrayResource(\n\t\t\t\t\"test\".getBytes(StandardCharsets.UTF_8));\n\t\tthis.generatedFiles.addClassFile(\"com/example/HelloWorld.class\", resource);\n\t\tassertThatFileAdded(Kind.CLASS, \"com/example/HelloWorld.class\").isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid addFileWithCharSequenceAddsFile() throws Exception {\n\t\tthis.generatedFiles.addFile(Kind.RESOURCE, \"META-INF/file\", \"test\");\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/file\").isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid addFileWithConsumedAppendableAddsFile() throws IOException {\n\t\tthis.generatedFiles.addFile(Kind.SOURCE, \"com/example/HelloWorld.java\",\n\t\t\t\tappendable -> appendable.append(\"{}\"));\n\t\tassertThatFileAdded(Kind.SOURCE, \"com/example/HelloWorld.java\").isEqualTo(\"{}\");\n\t}\n\n\t@Test\n\tvoid handleFileWhenFileDoesNotExist() throws IOException {\n\t\tthis.generatedFiles.setFileHandler(new TestFileHandler());\n\t\tAtomicBoolean called = new AtomicBoolean(false);\n\t\tthis.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\n\t\t\tcalled.set(true);\n\t\t\thandler.create(createSource(\"content\"));\n\t\t});\n\t\tassertThat(called).isTrue();\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"content\").hasOverride(false);\n\t}\n\n\t@Test\n\tvoid handleFileWhenFileExistsCanOverride() throws IOException {\n\t\tthis.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\n\t\tAtomicBoolean called = new AtomicBoolean(false);\n\t\tthis.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\n\t\t\tcalled.set(true);\n\t\t\thandler.override(createSource(\"overridden\"));\n\t\t});\n\t\tassertThat(called).isTrue();\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"overridden\").hasOverride(true);\n\t}\n\n\t@Test\n\tvoid handleFileWhenFileExistsCanOverrideUsingExistingContent() throws IOException {\n\t\tthis.generatedFiles.setFileHandler(new TestFileHandler(createSource(\"existing\")));\n\t\tAtomicBoolean called = new AtomicBoolean(false);\n\t\tthis.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler -> {\n\t\t\tcalled.set(true);\n\t\t\tassertThat(handler.getContent()).isNotNull();\n\t\t\tString existing = readSource(handler.getContent());\n\t\t\thandler.override(createSource(existing+\"-override\"));\n\t\t});\n\t\tassertThat(called).isTrue();\n\t\tassertThatFileAdded(Kind.RESOURCE, \"META-INF/test\").isEqualTo(\"existing-override\").hasOverride(true);\n\t}\n\n\t@Test\n\tvoid handleFileWhenFileExistsFailedToCreate() {\n\t\tTestFileHandler fileHandler = new TestFileHandler(createSource(\"existing\"));\n\t\tthis.generatedFiles.setFileHandler(fileHandler);\n\t\tassertThatIllegalStateException()\n\t\t\t\t.isThrownBy(() -> this.generatedFiles.handleFile(Kind.RESOURCE, \"META-INF/test\", handler ->\n\t\t\t\t\t\thandler.create(createSource(\"should fail\"))))\n\t\t\t\t.withMessage(\"%s already exists\".formatted(fileHandler));\n\t}\n\n\tprivate static InputStreamSource createSource(String content) {\n\t\treturn new ByteArrayResource(content.getBytes(StandardCharsets.UTF_8));\n\t}\n\n\tprivate static String readSource(InputStreamSource content) throws IOException {\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\tcontent.getInputStream().transferTo(out);\n\t\treturn out.toString(StandardCharsets.UTF_8);\n\t}\n\n\tprivate GeneratedFileAssert assertThatFileAdded(Kind kind, String path)\n\t\t\tthrows IOException {\n\t\treturn this.generatedFiles.assertThatFileAdded(kind, path);\n\t}\n\n\n\tstatic class TestGeneratedFiles implements GeneratedFiles {\n\n\t\tprivate @Nullable Kind kind;\n\n\t\tprivate @Nullable String path;\n\n\t\tprivate TestFileHandler fileHandler = new TestFileHandler();\n\n\t\tvoid setFileHandler(TestFileHandler fileHandler) {\n\t\t\tthis.fileHandler = fileHandler;\n\t\t}\n\n\t\t@Override\n\t\tpublic void handleFile(Kind kind, String path, ThrowingConsumer<FileHandler> handler) {\n\t\t\tthis.kind = kind;\n\t\t\tthis.path = path;\n\t\t\thandler.accept(this.fileHandler);\n\t\t}\n\n\t\tGeneratedFileAssert assertThatFileAdded(Kind kind, String path)\n\t\t\t\tthrows IOException {\n\t\t\tassertThat(this.kind).as(\"kind\").isEqualTo(kind);\n\t\t\tassertThat(this.path).as(\"path\").isEqualTo(path);\n\t\t\tassertThat(this.fileHandler.content).as(\"content\").isNotNull();\n\t\t\treturn new GeneratedFileAssert(this.fileHandler.content, this.fileHandler.override);\n\t\t}\n\t}\n\n\tprivate static class GeneratedFileAssert extends AbstractStringAssert<GeneratedFileAssert> {\n\n\t\tprivate final @Nullable Boolean override;\n\n\t\tGeneratedFileAssert(InputStreamSource content, @Nullable Boolean override) throws IOException {\n\t\t\tsuper(readSource(content), GeneratedFileAssert.class);\n\t\t\tthis.override = override;\n\t\t}\n\n\t\tpublic GeneratedFileAssert hasOverride(boolean expected) {\n\t\t\tassertThat(this.override).isEqualTo(expected);\n\t\t\treturn this.myself;\n\t\t}\n\t}\n\n\tprivate static class TestFileHandler extends FileHandler {\n\n\t\tprivate @Nullable InputStreamSource content;\n\n\t\tprivate @Nullable Boolean override;\n\n\t\tTestFileHandler(@Nullable InputStreamSource content) {\n\t\t\tsuper(content != null, () -> content);\n\t\t\tthis.content = content;\n\t\t}\n\n\t\tTestFileHandler() {\n\t\t\tthis(null);\n\t\t}\n\n\t\t@Override\n\t\tprotected void copy(InputStreamSource content, boolean override) {\n\t\t\tthis.content = content;\n\t\t\tthis.override = override;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.TestGeneratedFiles",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.TestGeneratedFiles#kind",
    "tailType": "field"
  }
]