[
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CleanPathState#SEGMENTS",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleMaps()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleMaps() {\r\n    assertThat(styler.style(Map.of())).isEqualTo(\";\");\r\n    assertThat(styler.style(Map.of(\"key\", 1))).isEqualTo(\"{\\\"key\\\" -> 1}\");\r\n    Map<String, Integer> map = new LinkedHashMap<>() {\r\n\r\n        {\r\n            put(\"key1\", 1);\r\n            put(\"key2\", 2);\r\n        }\r\n    };\r\n    assertThat(styler.style(map)).isEqualTo(\"{\\\"key1\\\" -> 1, \\\"key2\\\" -> 2}\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CommonStyling#styleMaps()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CleanPathState#SEGMENTS",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleMaps()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CleanPathState#segmentCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CleanPathState#segmentCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CleanPathState#pathsCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CleanPathState#pathsCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CleanPathState#paths",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CleanPathState#paths",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleMapEntries()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleMapEntries() {\r\n    Map<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2);\r\n    assertThat(map.entrySet()).map(styler::style).containsExactlyInAnyOrder(\"\\\"key1\\\" -> 1\", \"\\\"key2\\\" -> 2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CommonStyling#styleMapEntries()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleMapEntries()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CleanPathState#setup()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Setup(Level.Iteration)\r\npublic void setup() {\r\n    this.paths = new ArrayList<>(this.pathsCount);\r\n    Random random = new Random();\r\n    for (int i = 0; i < this.pathsCount; i++) {\r\n        this.paths.add(createSamplePath(random));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CleanPathState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CleanPathState#setup()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CleanPathState#setup()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleLists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleLists() {\r\n    assertThat(styler.style(List.of())).isEqualTo(\"[]\");\r\n    assertThat(styler.style(List.of(1))).isEqualTo(\"[1]\");\r\n    assertThat(styler.style(List.of(1, 2))).isEqualTo(\"[1, 2]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CommonStyling",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CommonStyling#styleLists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CommonStyling#styleLists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]