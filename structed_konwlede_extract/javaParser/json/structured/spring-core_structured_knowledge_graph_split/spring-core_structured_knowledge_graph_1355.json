[
  {
    "head": "org.springframework.util.ObjectUtils#containsElement(Object[],Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given array contains the given element.\r\n * @param array the array to check (may be {@code null},\r\n * in which case the return value will always be {@code false})\r\n * @param element the element to check for\r\n * @return whether the element has been found in the given array\r\n */\r\npublic static boolean containsElement(@Nullable Object @Nullable [] array, @Nullable Object element) {\r\n    if (array == null) {\r\n        return false;\r\n    }\r\n    for (Object arrayEle : array) {\r\n        if (nullSafeEquals(arrayEle, element)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#containsElement(Object[],Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#containsConstant(Enum<?>[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given array of enum constants contains a constant with the given name,\r\n * ignoring case when determining a match.\r\n * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}\r\n * @param constant the constant name to find (must not be null or empty string)\r\n * @return whether the constant has been found in the given array\r\n */\r\npublic static boolean containsConstant(Enum<?>[] enumValues, String constant) {\r\n    return containsConstant(enumValues, constant, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#containsConstant(Enum<?>[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#containsConstant(Enum<?>[],String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given array of enum constants contains a constant with the given name.\r\n * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}\r\n * @param constant the constant name to find (must not be null or empty string)\r\n * @param caseSensitive whether case is significant in determining a match\r\n * @return whether the constant has been found in the given array\r\n */\r\npublic static boolean containsConstant(Enum<?>[] enumValues, String constant, boolean caseSensitive) {\r\n    for (Enum<?> candidate : enumValues) {\r\n        if (caseSensitive ? candidate.toString().equals(constant) : candidate.toString().equalsIgnoreCase(constant)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#containsConstant(Enum<?>[],String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#caseInsensitiveValueOf(E[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Case insensitive alternative to {@link Enum#valueOf(Class, String)}.\r\n * @param <E> the concrete Enum type\r\n * @param enumValues the array of all Enum constants in question, usually per {@code Enum.values()}\r\n * @param constant the constant to get the enum value of\r\n * @throws IllegalArgumentException if the given constant is not found in the given array\r\n * of enum values. Use {@link #containsConstant(Enum[], String)} as a guard to avoid this exception.\r\n */\r\npublic static <E extends Enum<?>> E caseInsensitiveValueOf(E[] enumValues, String constant) {\r\n    for (E candidate : enumValues) {\r\n        if (candidate.toString().equalsIgnoreCase(constant)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(\"Constant [\" + constant + \"] does not exist in enum type \" + enumValues.getClass().componentType().getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#caseInsensitiveValueOf(E[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#addObjectToArray(A[],O)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Append the given object to the given array, returning a new array\r\n * consisting of the input array contents plus the given object.\r\n * @param array the array to append to (can be {@code null})\r\n * @param obj the object to append\r\n * @return the new array (of the same component type; never {@code null})\r\n */\r\npublic static <A, O extends A> A[] addObjectToArray(A @Nullable [] array, @Nullable O obj) {\r\n    return addObjectToArray(array, obj, (array != null ? array.length : 0));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#addObjectToArray(A[],O)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#addObjectToArray(A[],O,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add the given object to the given array at the specified position, returning\r\n * a new array consisting of the input array contents plus the given object.\r\n * @param array the array to add to (can be {@code null})\r\n * @param obj the object to append\r\n * @param position the position at which to add the object\r\n * @return the new array (of the same component type; never {@code null})\r\n * @since 6.0\r\n */\r\n@Nullable\r\npublic static <A, O extends A> A[] addObjectToArray(A @Nullable [] array, @Nullable O obj, int position) {\r\n    Class<?> componentType = Object.class;\r\n    if (array != null) {\r\n        componentType = array.getClass().componentType();\r\n    } else if (obj != null) {\r\n        componentType = obj.getClass();\r\n    }\r\n    int newArrayLength = (array != null ? array.length + 1 : 1);\r\n    @SuppressWarnings(\"unchecked\")\r\n    @Nullable\r\n    A[] newArray = (A[]) Array.newInstance(componentType, newArrayLength);\r\n    if (array != null) {\r\n        System.arraycopy(array, 0, newArray, 0, position);\r\n        System.arraycopy(array, position, newArray, position + 1, array.length - position);\r\n    }\r\n    newArray[position] = obj;\r\n    return newArray;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#addObjectToArray(A[],O,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#addObjectToArray(A[],O,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#toObjectArray(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the given array (which may be a primitive array) to an object array (if\r\n * necessary, to an array of primitive wrapper objects).\r\n * <p>A {@code null} source value or empty primitive array will be converted to an\r\n * empty Object array.\r\n * @param source the (potentially primitive) array\r\n * @return the corresponding object array (never {@code null})\r\n * @throws IllegalArgumentException if the parameter is not an array\r\n */\r\npublic static Object[] toObjectArray(@Nullable Object source) {\r\n    if (source instanceof Object[] objects) {\r\n        return objects;\r\n    }\r\n    if (source == null) {\r\n        return EMPTY_OBJECT_ARRAY;\r\n    }\r\n    if (!source.getClass().isArray()) {\r\n        throw new IllegalArgumentException(\"Source is not an array: \" + source);\r\n    }\r\n    int length = Array.getLength(source);\r\n    if (length == 0) {\r\n        return EMPTY_OBJECT_ARRAY;\r\n    }\r\n    Class<?> wrapperType = Array.get(source, 0).getClass();\r\n    Object[] newArray = (Object[]) Array.newInstance(wrapperType, length);\r\n    for (int i = 0; i < length; i++) {\r\n        newArray[i] = Array.get(source, i);\r\n    }\r\n    return newArray;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#toObjectArray(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeEquals(Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "//---------------------------------------------------------------------\r\n// Convenience methods for content-based equality/hash-code handling\r\n//---------------------------------------------------------------------\r\n/**\r\n * Determine if the given objects are equal, returning {@code true} if\r\n * both are {@code null} or {@code false} if only one is {@code null}.\r\n * <p>Compares arrays with {@code Arrays.equals}, performing an equality\r\n * check based on the array elements rather than the array reference.\r\n * @param o1 first Object to compare\r\n * @param o2 second Object to compare\r\n * @return whether the given objects are equal\r\n * @see Object#equals(Object)\r\n * @see java.util.Arrays#equals\r\n */\r\n@Contract(\"null, null -> true; null, _ -> false; _, null -> false\")\r\npublic static boolean nullSafeEquals(@Nullable Object o1, @Nullable Object o2) {\r\n    if (o1 == o2) {\r\n        return true;\r\n    }\r\n    if (o1 == null || o2 == null) {\r\n        return false;\r\n    }\r\n    if (o1.equals(o2)) {\r\n        return true;\r\n    }\r\n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\r\n        return arrayEquals(o1, o2);\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#nullSafeEquals(Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ObjectUtils#nullSafeEquals(Object,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ObjectUtils#arrayEquals(Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Compare the given arrays with {@code Arrays.equals}, performing an equality\r\n * check based on the array elements rather than the array reference.\r\n * @param o1 first array to compare\r\n * @param o2 second array to compare\r\n * @return whether the given objects are equal\r\n * @see #nullSafeEquals(Object, Object)\r\n * @see java.util.Arrays#equals\r\n */\r\nprivate static boolean arrayEquals(Object o1, Object o2) {\r\n    if (o1 instanceof Object[] objects1 && o2 instanceof Object[] objects2) {\r\n        return Arrays.equals(objects1, objects2);\r\n    }\r\n    if (o1 instanceof boolean[] booleans1 && o2 instanceof boolean[] booleans2) {\r\n        return Arrays.equals(booleans1, booleans2);\r\n    }\r\n    if (o1 instanceof byte[] bytes1 && o2 instanceof byte[] bytes2) {\r\n        return Arrays.equals(bytes1, bytes2);\r\n    }\r\n    if (o1 instanceof char[] chars1 && o2 instanceof char[] chars2) {\r\n        return Arrays.equals(chars1, chars2);\r\n    }\r\n    if (o1 instanceof double[] doubles1 && o2 instanceof double[] doubles2) {\r\n        return Arrays.equals(doubles1, doubles2);\r\n    }\r\n    if (o1 instanceof float[] floats1 && o2 instanceof float[] floats2) {\r\n        return Arrays.equals(floats1, floats2);\r\n    }\r\n    if (o1 instanceof int[] ints1 && o2 instanceof int[] ints2) {\r\n        return Arrays.equals(ints1, ints2);\r\n    }\r\n    if (o1 instanceof long[] longs1 && o2 instanceof long[] longs2) {\r\n        return Arrays.equals(longs1, longs2);\r\n    }\r\n    if (o1 instanceof short[] shorts1 && o2 instanceof short[] shorts2) {\r\n        return Arrays.equals(shorts1, shorts2);\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ObjectUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ObjectUtils#arrayEquals(Object,Object)",
    "tailType": "method"
  }
]