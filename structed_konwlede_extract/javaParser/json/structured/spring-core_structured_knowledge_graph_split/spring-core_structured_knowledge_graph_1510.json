[
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#andPartsReturnsMethodName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andPartsReturnsMethodName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andNameWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andNameWhenPartsIsNullThrowsException() {\r\n    MethodName name = MethodName.of(\"myBean\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> name.and(((MethodName) null))).withMessage(\"'name' must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#andNameWhenPartsIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andNameWhenPartsIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andNameReturnsMethodName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid andNameReturnsMethodName() {\r\n    MethodName name = MethodName.of(\"myBean\");\r\n    assertThat(name.and(MethodName.of(\"test\"))).hasToString(\"myBeanTest\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#andNameReturnsMethodName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#andNameReturnsMethodName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#hashCodeAndEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hashCodeAndEquals() {\r\n    MethodName name1 = MethodName.of(\"myBean\");\r\n    MethodName name2 = MethodName.of(\"my\", \"bean\");\r\n    MethodName name3 = MethodName.of(\"myOtherBean\");\r\n    assertThat(name1.hashCode()).isEqualTo(name2.hashCode());\r\n    assertThat(name1).isEqualTo(name1).isEqualTo(name2).isNotEqualTo(name3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MethodNameTests#hashCodeAndEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MethodNameTests#hashCodeAndEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.PackagePrivateClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.PackagePrivateClass",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PackagePrivateClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\n@SuppressWarnings(\"unused\")\nclass PackagePrivateClass {\n\n\tpublic PackagePrivateClass() {\n\t}\n\n\tpublic String stringBean() {\n\t\treturn \"public\";\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.PackagePrivateClass#stringBean()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String stringBean() {\r\n    return \"public\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PackagePrivateClass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PackagePrivateClass#stringBean()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.ProtectedAccessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.ProtectedAccessor",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  }
]