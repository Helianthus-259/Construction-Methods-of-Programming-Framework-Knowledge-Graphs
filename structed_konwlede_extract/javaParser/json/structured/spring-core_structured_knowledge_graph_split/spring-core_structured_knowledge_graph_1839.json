[
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteBufferEncoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.ByteBufferEncoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuffer.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(ByteBuffer.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    // SPR-15464\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteBufferEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<ByteBuffer> input = Flux.just(this.fooBytes, this.barBytes).map(ByteBuffer::wrap);\r\n    testEncodeAll(input, ByteBuffer.class, step -> step.consumeNextWith(expectBytes(this.fooBytes)).consumeNextWith(expectBytes(this.barBytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.ByteBufferEncoderTests#encode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests#encode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.ByteBufferEncoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractEncoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\nimport reactor.test.StepVerifier;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferLimitException;\nimport org.springframework.core.testfixture.codec.AbstractDecoderTests;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static java.nio.charset.StandardCharsets.UTF_16BE;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link CharBufferDecoder}.\n *\n * @author Markus Heiden\n * @author Arjen Poutsma\n */\nclass CharBufferDecoderTests extends AbstractDecoderTests<CharBufferDecoder> {\n\n\tprivate static final ResolvableType TYPE = ResolvableType.forClass(CharBuffer.class);\n\n\tCharBufferDecoderTests() {\n\t\tsuper(CharBufferDecoder.allMimeTypes());\n\t}\n\n\t@Override\n\t@Test\n\tprotected void canDecode() {\n\t\tassertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_HTML)).isTrue();\n\t\tassertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.APPLICATION_JSON)).isTrue();\n\t\tassertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.parseMimeType(\"text/plain;charset=utf-8\"))).isTrue();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.decoder.canDecode(ResolvableType.forClass(Object.class), MimeTypeUtils.APPLICATION_JSON)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decode() {\n\t\tCharBuffer u = charBuffer(\"ü\");\n\t\tCharBuffer e = charBuffer(\"é\");\n\t\tCharBuffer o = charBuffer(\"ø\");\n\t\tString s = String.format(\"%s\\n%s\\n%s\", u, e, o);\n\t\tFlux<DataBuffer> input = toDataBuffers(s, 1, UTF_8);\n\n\t\ttestDecodeAll(input, TYPE, step -> step.expectNext(u, e, o).verifyComplete(), null, null);\n\t}\n\n\t@Test\n\tvoid decodeMultibyteCharacterUtf16() {\n\t\tCharBuffer u = charBuffer(\"ü\");\n\t\tCharBuffer e = charBuffer(\"é\");\n\t\tCharBuffer o = charBuffer(\"ø\");\n\t\tString s = String.format(\"%s\\n%s\\n%s\", u, e, o);\n\t\tFlux<DataBuffer> source = toDataBuffers(s, 2, UTF_16BE);\n\t\tMimeType mimeType = MimeTypeUtils.parseMimeType(\"text/plain;charset=utf-16be\");\n\n\t\ttestDecode(source, TYPE, step -> step.expectNext(u, e, o).verifyComplete(), mimeType, null);\n\t}\n\n\tprivate Flux<DataBuffer> toDataBuffers(String s, int length, Charset charset) {\n\t\tbyte[] bytes = s.getBytes(charset);\n\t\tList<byte[]> chunks = new ArrayList<>();\n\t\tfor (int i = 0; i < bytes.length; i += length) {\n\t\t\tchunks.add(Arrays.copyOfRange(bytes, i, i + length));\n\t\t}\n\t\treturn Flux.fromIterable(chunks)\n\t\t\t\t.map(chunk -> {\n\t\t\t\t\tDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(length);\n\t\t\t\t\tdataBuffer.write(chunk, 0, chunk.length);\n\t\t\t\t\treturn dataBuffer;\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid decodeNewLine() {\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"\\r\\nabc\\n\"),\n\t\t\t\tstringBuffer(\"def\"),\n\t\t\t\tstringBuffer(\"ghi\\r\\n\\n\"),\n\t\t\t\tstringBuffer(\"jkl\"),\n\t\t\t\tstringBuffer(\"mno\\npqr\\n\"),\n\t\t\t\tstringBuffer(\"stu\"),\n\t\t\t\tstringBuffer(\"vw\"),\n\t\t\t\tstringBuffer(\"xyz\")\n\t\t);\n\n\t\ttestDecode(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"\")).as(\"1st\")\n\t\t\t\t.expectNext(charBuffer(\"abc\"))\n\t\t\t\t.expectNext(charBuffer(\"defghi\"))\n\t\t\t\t.expectNext(charBuffer(\"\")).as(\"2nd\")\n\t\t\t\t.expectNext(charBuffer(\"jklmno\"))\n\t\t\t\t.expectNext(charBuffer(\"pqr\"))\n\t\t\t\t.expectNext(charBuffer(\"stuvwxyz\"))\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\tvoid decodeNewlinesAcrossBuffers() {\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"\\r\"),\n\t\t\t\tstringBuffer(\"\\n\"),\n\t\t\t\tstringBuffer(\"xyz\")\n\t\t);\n\n\t\ttestDecode(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"\"))\n\t\t\t\t.expectNext(charBuffer(\"xyz\"))\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\tvoid maxInMemoryLimit() {\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"abc\\n\"), stringBuffer(\"defg\\n\"),\n\t\t\t\tstringBuffer(\"hi\"), stringBuffer(\"jkl\"), stringBuffer(\"mnop\"));\n\n\t\tthis.decoder.setMaxInMemorySize(5);\n\n\t\ttestDecode(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"abc\"))\n\t\t\t\t.expectNext(charBuffer(\"defg\"))\n\t\t\t\t.verifyError(DataBufferLimitException.class));\n\t}\n\n\t@Test\n\tvoid maxInMemoryLimitDoesNotApplyToParsedItemsThatDontRequireBuffering() {\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"TOO MUCH DATA\\nanother line\\n\\nand another\\n\"));\n\n\t\tthis.decoder.setMaxInMemorySize(5);\n\n\t\ttestDecode(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"TOO MUCH DATA\"))\n\t\t\t\t.expectNext(charBuffer(\"another line\"))\n\t\t\t\t.expectNext(charBuffer(\"\"))\n\t\t\t\t.expectNext(charBuffer(\"and another\"))\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\t\t// gh-24339\n\tvoid maxInMemoryLimitReleaseUnprocessedLinesWhenUnlimited() {\n\t\tFlux<DataBuffer> input = Flux.just(stringBuffer(\"Line 1\\nLine 2\\nLine 3\\n\"));\n\n\t\tthis.decoder.setMaxInMemorySize(-1);\n\t\ttestDecodeCancel(input, ResolvableType.forClass(String.class), null, Collections.emptyMap());\n\t}\n\n\t@Test\n\tvoid decodeNewLineIncludeDelimiters() {\n\t\tthis.decoder = CharBufferDecoder.allMimeTypes(CharBufferDecoder.DEFAULT_DELIMITERS, false);\n\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"\\r\\nabc\\n\"),\n\t\t\t\tstringBuffer(\"def\"),\n\t\t\t\tstringBuffer(\"ghi\\r\\n\\n\"),\n\t\t\t\tstringBuffer(\"jkl\"),\n\t\t\t\tstringBuffer(\"mno\\npqr\\n\"),\n\t\t\t\tstringBuffer(\"stu\"),\n\t\t\t\tstringBuffer(\"vw\"),\n\t\t\t\tstringBuffer(\"xyz\")\n\t\t);\n\n\t\ttestDecode(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"\\r\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"abc\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"defghi\\r\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"jklmno\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"pqr\\n\"))\n\t\t\t\t.expectNext(charBuffer(\"stuvwxyz\"))\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\tvoid decodeEmptyFlux() {\n\t\tFlux<DataBuffer> input = Flux.empty();\n\n\t\ttestDecode(input, String.class, step -> step\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\tvoid decodeEmptyDataBuffer() {\n\t\tFlux<DataBuffer> input = Flux.just(stringBuffer(\"\"));\n\t\tFlux<CharBuffer> output = this.decoder.decode(input,\n\t\t\t\tTYPE, null, Collections.emptyMap());\n\n\t\tStepVerifier.create(output)\n\t\t\t\t.expectNext(charBuffer(\"\"))\n\t\t\t\t.expectComplete().verify();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void decodeToMono() {\n\t\tFlux<DataBuffer> input = Flux.just(\n\t\t\t\tstringBuffer(\"foo\"),\n\t\t\t\tstringBuffer(\"bar\"),\n\t\t\t\tstringBuffer(\"baz\"));\n\n\t\ttestDecodeToMonoAll(input, CharBuffer.class, step -> step\n\t\t\t\t.expectNext(charBuffer(\"foobarbaz\"))\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\t@Test\n\tvoid decodeToMonoWithEmptyFlux() {\n\t\tFlux<DataBuffer> input = Flux.empty();\n\n\t\ttestDecodeToMono(input, String.class, step -> step\n\t\t\t\t.expectComplete()\n\t\t\t\t.verify());\n\t}\n\n\tprivate DataBuffer stringBuffer(String value) {\n\t\tbyte[] bytes = value.getBytes(StandardCharsets.UTF_8);\n\t\tDataBuffer buffer = this.bufferFactory.allocateBuffer(bytes.length);\n\t\tbuffer.write(bytes);\n\t\treturn buffer;\n\t}\n\n\tprivate CharBuffer charBuffer(String value) {\n\t\treturn CharBuffer\n\t\t\t\t.allocate(value.length())\n\t\t\t\t.put(value)\n\t\t\t\t.flip();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#TYPE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#TYPE",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResolvableType",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests#canDecode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canDecode() {\r\n    assertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_HTML)).isTrue();\r\n    assertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    assertThat(this.decoder.canDecode(TYPE, MimeTypeUtils.parseMimeType(\"text/plain;charset=utf-8\"))).isTrue();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.decoder.canDecode(ResolvableType.forClass(Object.class), MimeTypeUtils.APPLICATION_JSON)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.CharBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.CharBufferDecoderTests#canDecode()",
    "tailType": "method"
  }
]