[
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withConstructor(List<TypeReference>,Consumer<ExecutableHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withMethod(String,List<TypeReference>,ExecutableMode)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the method with the specified name\r\n * and parameter types, using the specified {@link ExecutableMode}.\r\n * @param name the name of the method\r\n * @param parameterTypes the parameter types of the constructor\r\n * @param mode the requested mode\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\npublic Builder withMethod(String name, List<TypeReference> parameterTypes, ExecutableMode mode) {\r\n    return withMethod(name, parameterTypes, ExecutableHint.builtWith(mode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withMethod(String,List<TypeReference>,ExecutableMode)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withMethod(String,List<TypeReference>,Consumer<ExecutableHint.Builder>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the need for reflection on the method with the specified name\r\n * and parameter types.\r\n * @param name the name of the method\r\n * @param parameterTypes the parameter types of the constructor\r\n * @param methodHint a builder to further customize the hints of this method\r\n * @return {@code this}, to facilitate method chaining\r\n */\r\nprivate Builder withMethod(String name, List<TypeReference> parameterTypes, Consumer<ExecutableHint.Builder> methodHint) {\r\n    ExecutableKey key = new ExecutableKey(name, parameterTypes);\r\n    ExecutableHint.Builder builder = this.methods.computeIfAbsent(key, k -> ExecutableHint.ofMethod(name, parameterTypes));\r\n    methodHint.accept(builder);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withMethod(String,List<TypeReference>,Consumer<ExecutableHint.Builder>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#withMembers(MemberCategory)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds the specified {@linkplain MemberCategory member categories}.\r\n * @param memberCategories the categories to apply\r\n * @return {@code this}, to facilitate method chaining\r\n * @see TypeHint#builtWith(MemberCategory...)\r\n */\r\npublic Builder withMembers(MemberCategory... memberCategories) {\r\n    this.memberCategories.addAll(Arrays.asList(memberCategories));\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#withMembers(MemberCategory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.Builder#build()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link TypeHint} based on the state of this builder.\r\n * @return a type hint\r\n */\r\nTypeHint build() {\r\n    return new TypeHint(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.Builder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.Builder#build()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ExecutableKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A hint that describes the need for reflection on a type.\n *\n * @author Stephane Nicoll\n * @author Phillip Webb\n * @author Andy Wilkinson\n * @since 6.0\n */\npublic final class TypeHint implements ConditionalHint {\n\n\tprivate final TypeReference type;\n\n\tprivate final @Nullable TypeReference reachableType;\n\n\tprivate final Set<FieldHint> fields;\n\n\tprivate final Set<ExecutableHint> constructors;\n\n\tprivate final Set<ExecutableHint> methods;\n\n\tprivate final Set<MemberCategory> memberCategories;\n\n\n\tprivate TypeHint(Builder builder) {\n\t\tthis.type = builder.type;\n\t\tthis.reachableType = builder.reachableType;\n\t\tthis.memberCategories = Set.copyOf(builder.memberCategories);\n\t\tthis.fields = builder.fields.stream().map(FieldHint::new).collect(Collectors.toSet());\n\t\tthis.constructors = builder.constructors.values().stream().map(ExecutableHint.Builder::build).collect(Collectors.toSet());\n\t\tthis.methods = builder.methods.values().stream().map(ExecutableHint.Builder::build).collect(Collectors.toSet());\n\t}\n\n\t/**\n\t * Initialize a builder for the type defined by the specified\n\t * {@link TypeReference}.\n\t * @param type the type to use\n\t * @return a builder\n\t */\n\tstatic Builder of(TypeReference type) {\n\t\tAssert.notNull(type, \"'type' must not be null\");\n\t\treturn new Builder(type);\n\t}\n\n\n\t/**\n\t * Return the type that this hint handles.\n\t * @return the type\n\t */\n\tpublic TypeReference getType() {\n\t\treturn this.type;\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getReachableType() {\n\t\treturn this.reachableType;\n\t}\n\n\t/**\n\t * Return the fields that require reflection.\n\t * @return a stream of {@link FieldHint}\n\t */\n\tpublic Stream<FieldHint> fields() {\n\t\treturn this.fields.stream();\n\t}\n\n\t/**\n\t * Return the constructors that require reflection.\n\t * @return a stream of {@link ExecutableHint}\n\t */\n\tpublic Stream<ExecutableHint> constructors() {\n\t\treturn this.constructors.stream();\n\t}\n\n\t/**\n\t * Return the methods that require reflection.\n\t * @return a stream of {@link ExecutableHint}\n\t */\n\tpublic Stream<ExecutableHint> methods() {\n\t\treturn this.methods.stream();\n\t}\n\n\t/**\n\t * Return the member categories that apply.\n\t * @return the member categories to enable\n\t */\n\tpublic Set<MemberCategory> getMemberCategories() {\n\t\treturn this.memberCategories;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn TypeHint.class.getSimpleName() + \"[type=\" + this.type + \"]\";\n\t}\n\n\t/**\n\t * Return a {@link Consumer} that applies the given {@link MemberCategory\n\t * MemberCategories} to the accepted {@link Builder}.\n\t * @param memberCategories the memberCategories to apply\n\t * @return a consumer to apply the member categories\n\t */\n\tpublic static Consumer<Builder> builtWith(MemberCategory... memberCategories) {\n\t\treturn builder -> builder.withMembers(memberCategories);\n\t}\n\n\n\t/**\n\t * Builder for {@link TypeHint}.\n\t */\n\tpublic static class Builder {\n\n\t\tprivate final TypeReference type;\n\n\t\tprivate @Nullable TypeReference reachableType;\n\n\t\tprivate final Set<String> fields = new HashSet<>();\n\n\t\tprivate final Map<ExecutableKey, ExecutableHint.Builder> constructors = new HashMap<>();\n\n\t\tprivate final Map<ExecutableKey, ExecutableHint.Builder> methods = new HashMap<>();\n\n\t\tprivate final Set<MemberCategory> memberCategories = new HashSet<>();\n\n\t\tBuilder(TypeReference type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t/**\n\t\t * Make this hint conditional on the fact that the specified type is in a\n\t\t * reachable code path from a static analysis point of view.\n\t\t * @param reachableType the type that should be reachable for this hint to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder onReachableType(TypeReference reachableType) {\n\t\t\tthis.reachableType = reachableType;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Make this hint conditional on the fact that the specified type is in a\n\t\t * reachable code path from a static analysis point of view.\n\t\t * @param reachableType the type that should be reachable for this hint to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder onReachableType(Class<?> reachableType) {\n\t\t\tthis.reachableType = TypeReference.of(reachableType);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Register the need for reflective access on the field with the specified name.\n\t\t * @param name the name of the field\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t * @see java.lang.reflect.Field#get(Object)\n\t\t * @see java.lang.reflect.Field#set(Object, Object)\n\t\t */\n\t\tpublic Builder withField(String name) {\n\t\t\tthis.fields.add(name);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Register the need for reflection on the constructor with the specified\n\t\t * parameter types, using the specified {@link ExecutableMode}.\n\t\t * @param parameterTypes the parameter types of the constructor\n\t\t * @param mode the requested mode\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder withConstructor(List<TypeReference> parameterTypes, ExecutableMode mode) {\n\t\t\treturn withConstructor(parameterTypes, ExecutableHint.builtWith(mode));\n\t\t}\n\n\t\t/**\n\t\t * Register the need for reflection on the constructor with the specified\n\t\t * parameter types.\n\t\t * @param parameterTypes the parameter types of the constructor\n\t\t * @param constructorHint a builder to further customize the hints of this\n\t\t * constructor\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tprivate Builder withConstructor(\n\t\t\t\tList<TypeReference> parameterTypes, Consumer<ExecutableHint.Builder> constructorHint) {\n\n\t\t\tExecutableKey key = new ExecutableKey(\"<init>\", parameterTypes);\n\t\t\tExecutableHint.Builder builder = this.constructors.computeIfAbsent(key,\n\t\t\t\t\tk -> ExecutableHint.ofConstructor(parameterTypes));\n\t\t\tconstructorHint.accept(builder);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Register the need for reflection on the method with the specified name\n\t\t * and parameter types, using the specified {@link ExecutableMode}.\n\t\t * @param name the name of the method\n\t\t * @param parameterTypes the parameter types of the constructor\n\t\t * @param mode the requested mode\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder withMethod(String name, List<TypeReference> parameterTypes, ExecutableMode mode) {\n\t\t\treturn withMethod(name, parameterTypes, ExecutableHint.builtWith(mode));\n\t\t}\n\n\t\t/**\n\t\t * Register the need for reflection on the method with the specified name\n\t\t * and parameter types.\n\t\t * @param name the name of the method\n\t\t * @param parameterTypes the parameter types of the constructor\n\t\t * @param methodHint a builder to further customize the hints of this method\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tprivate Builder withMethod(String name, List<TypeReference> parameterTypes,\n\t\t\t\tConsumer<ExecutableHint.Builder> methodHint) {\n\t\t\tExecutableKey key = new ExecutableKey(name, parameterTypes);\n\t\t\tExecutableHint.Builder builder = this.methods.computeIfAbsent(key,\n\t\t\t\t\tk -> ExecutableHint.ofMethod(name, parameterTypes));\n\t\t\tmethodHint.accept(builder);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Adds the specified {@linkplain MemberCategory member categories}.\n\t\t * @param memberCategories the categories to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t * @see TypeHint#builtWith(MemberCategory...)\n\t\t */\n\t\tpublic Builder withMembers(MemberCategory... memberCategories) {\n\t\t\tthis.memberCategories.addAll(Arrays.asList(memberCategories));\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link TypeHint} based on the state of this builder.\n\t\t * @return a type hint\n\t\t */\n\t\tTypeHint build() {\n\t\t\treturn new TypeHint(this);\n\t\t}\n\t}\n\n\n\tprivate static final class ExecutableKey {\n\n\t\tprivate final String name;\n\n\t\tprivate final List<String> parameterTypes;\n\n\t\tprivate ExecutableKey(String name, List<TypeReference> parameterTypes) {\n\t\t\tthis.name = name;\n\t\t\tthis.parameterTypes = parameterTypes.stream().map(TypeReference::getCanonicalName).toList();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\treturn (this == other || (other instanceof ExecutableKey that &&\n\t\t\t\t\tthis.name.equals(that.name) && this.parameterTypes.equals(that.parameterTypes)));\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn Objects.hash(this.name, this.parameterTypes);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ExecutableKey#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ExecutableKey#parameterTypes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey#parameterTypes",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof ExecutableKey that && this.name.equals(that.name) && this.parameterTypes.equals(that.parameterTypes)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ExecutableKey#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return Objects.hash(this.name, this.parameterTypes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ExecutableKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ExecutableKey#hashCode()",
    "tailType": "method"
  }
]