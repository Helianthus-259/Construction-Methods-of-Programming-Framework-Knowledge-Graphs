[
  {
    "head": "org.springframework.aot.generate.MapDelegate#EMPTY_RESULT",
    "headType": "field",
    "relation": "haveType",
    "tail": "CodeBlock",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic CodeBlock generateCode(ValueCodeGenerator valueCodeGenerator, Object value) {\r\n    if (value instanceof Map<?, ?> map) {\r\n        if (map.isEmpty()) {\r\n            return EMPTY_RESULT;\r\n        }\r\n        return generateMapCode(valueCodeGenerator, map);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MapDelegate#generateCode(ValueCodeGenerator,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#generateMapCode(ValueCodeGenerator,Map<?,?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate the code for a non-empty {@link Map}.\r\n * @param valueCodeGenerator the code generator to use for embedded values\r\n * @param map the value to generate\r\n * @return the code that represents the specified map or {@code null} if\r\n * the specified map is not supported.\r\n */\r\n@Nullable\r\nprotected CodeBlock generateMapCode(ValueCodeGenerator valueCodeGenerator, Map<?, ?> map) {\r\n    map = orderForCodeConsistency(map);\r\n    boolean useOfEntries = map.size() > 10;\r\n    CodeBlock.Builder code = CodeBlock.builder();\r\n    code.add(\"$T\" + ((!useOfEntries) ? \".of(\" : \".ofEntries(\"), Map.class);\r\n    Iterator<? extends Entry<?, ?>> iterator = map.entrySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        Entry<?, ?> entry = iterator.next();\r\n        CodeBlock keyCode = valueCodeGenerator.generateCode(entry.getKey());\r\n        CodeBlock valueCode = valueCodeGenerator.generateCode(entry.getValue());\r\n        if (!useOfEntries) {\r\n            code.add(\"$L, $L\", keyCode, valueCode);\r\n        } else {\r\n            code.add(\"$T.entry($L,$L)\", Map.class, keyCode, valueCode);\r\n        }\r\n        if (iterator.hasNext()) {\r\n            code.add(\", \");\r\n        }\r\n    }\r\n    code.add(\")\");\r\n    return code.build();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MapDelegate#generateMapCode(ValueCodeGenerator,Map<?,?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#generateMapCode(ValueCodeGenerator,Map<?,?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate#orderForCodeConsistency(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private <K, V> Map<K, V> orderForCodeConsistency(Map<K, V> map) {\r\n    try {\r\n        return new TreeMap<>(map);\r\n    } catch (ClassCastException ex) {\r\n        // If elements are not comparable, just keep the original map\r\n        return map;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.MapDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.MapDelegate#orderForCodeConsistency(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.PrimitiveDelegate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.generate.ValueCodeGenerator.Delegate;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.javapoet.CodeBlock;\nimport org.springframework.javapoet.CodeBlock.Builder;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Code generator {@link Delegate} for well known value types.\n *\n * @author Stephane Nicoll\n * @since 6.1.2\n */\npublic abstract class ValueCodeGeneratorDelegates {\n\n\t/**\n\t * A list of {@link Delegate} implementations for the following common value\n\t * types.\n\t * <ul>\n\t * <li>Primitive types</li>\n\t * <li>String</li>\n\t * <li>Charset</li>\n\t * <li>Enum</li>\n\t * <li>Class</li>\n\t * <li>{@link ResolvableType}</li>\n\t * <li>Array</li>\n\t * <li>List via {@code List.of}</li>\n\t * <li>Set via {@code Set.of} and support for {@link LinkedHashSet}</li>\n\t * <li>Map via {@code Map.of} or {@code Map.ofEntries}</li>\n\t * </ul>\n\t * Those implementations do not require the {@link ValueCodeGenerator} to be\n\t * {@linkplain ValueCodeGenerator#scoped(GeneratedMethods) scoped}.\n\t */\n\tpublic static final List<Delegate> INSTANCES = List.of(\n\t\t\tnew PrimitiveDelegate(),\n\t\t\tnew StringDelegate(),\n\t\t\tnew CharsetDelegate(),\n\t\t\tnew EnumDelegate(),\n\t\t\tnew ClassDelegate(),\n\t\t\tnew ResolvableTypeDelegate(),\n\t\t\tnew ArrayDelegate(),\n\t\t\tnew ListDelegate(),\n\t\t\tnew SetDelegate(),\n\t\t\tnew MapDelegate());\n\n\n\t/**\n\t * Abstract {@link Delegate} for {@code Collection} types.\n\t * @param <T> type the collection type\n\t */\n\tpublic abstract static class CollectionDelegate<T extends Collection<?>> implements Delegate {\n\n\t\tprivate final Class<?> collectionType;\n\n\t\tprivate final CodeBlock emptyResult;\n\n\t\tprotected CollectionDelegate(Class<?> collectionType, CodeBlock emptyResult) {\n\t\t\tthis.collectionType = collectionType;\n\t\t\tthis.emptyResult = emptyResult;\n\t\t}\n\n\t\t@Override\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator valueCodeGenerator, Object value) {\n\t\t\tif (this.collectionType.isInstance(value)) {\n\t\t\t\tT collection = (T) value;\n\t\t\t\tif (collection.isEmpty()) {\n\t\t\t\t\treturn this.emptyResult;\n\t\t\t\t}\n\t\t\t\treturn generateCollectionCode(valueCodeGenerator, collection);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprotected CodeBlock generateCollectionCode(ValueCodeGenerator valueCodeGenerator, T collection) {\n\t\t\treturn generateCollectionOf(valueCodeGenerator, collection, this.collectionType);\n\t\t}\n\n\t\tprotected final CodeBlock generateCollectionOf(ValueCodeGenerator valueCodeGenerator,\n\t\t\t\tCollection<?> collection, Class<?> collectionType) {\n\t\t\tBuilder code = CodeBlock.builder();\n\t\t\tcode.add(\"$T.of(\", collectionType);\n\t\t\tIterator<?> iterator = collection.iterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tObject element = iterator.next();\n\t\t\t\tcode.add(\"$L\", valueCodeGenerator.generateCode(element));\n\t\t\t\tif (iterator.hasNext()) {\n\t\t\t\t\tcode.add(\", \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcode.add(\")\");\n\t\t\treturn code.build();\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link Map} types.\n\t */\n\tpublic static class MapDelegate implements Delegate {\n\n\t\tprivate static final CodeBlock EMPTY_RESULT = CodeBlock.of(\"$T.emptyMap()\", Collections.class);\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator valueCodeGenerator, Object value) {\n\t\t\tif (value instanceof Map<?, ?> map) {\n\t\t\t\tif (map.isEmpty()) {\n\t\t\t\t\treturn EMPTY_RESULT;\n\t\t\t\t}\n\t\t\t\treturn generateMapCode(valueCodeGenerator, map);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t * Generate the code for a non-empty {@link Map}.\n\t\t * @param valueCodeGenerator the code generator to use for embedded values\n\t\t * @param map the value to generate\n\t\t * @return the code that represents the specified map or {@code null} if\n\t\t * the specified map is not supported.\n\t\t */\n\t\tprotected @Nullable CodeBlock generateMapCode(ValueCodeGenerator valueCodeGenerator, Map<?, ?> map) {\n\t\t\tmap = orderForCodeConsistency(map);\n\t\t\tboolean useOfEntries = map.size() > 10;\n\t\t\tCodeBlock.Builder code = CodeBlock.builder();\n\t\t\tcode.add(\"$T\" + ((!useOfEntries) ? \".of(\" : \".ofEntries(\"), Map.class);\n\t\t\tIterator<? extends Entry<?, ?>> iterator = map.entrySet().iterator();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tEntry<?, ?> entry = iterator.next();\n\t\t\t\tCodeBlock keyCode = valueCodeGenerator.generateCode(entry.getKey());\n\t\t\t\tCodeBlock valueCode = valueCodeGenerator.generateCode(entry.getValue());\n\t\t\t\tif (!useOfEntries) {\n\t\t\t\t\tcode.add(\"$L, $L\", keyCode, valueCode);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcode.add(\"$T.entry($L,$L)\", Map.class, keyCode, valueCode);\n\t\t\t\t}\n\t\t\t\tif (iterator.hasNext()) {\n\t\t\t\t\tcode.add(\", \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcode.add(\")\");\n\t\t\treturn code.build();\n\t\t}\n\n\t\tprivate <K, V> Map<K, V> orderForCodeConsistency(Map<K, V> map) {\n\t\t\ttry {\n\t\t\t\treturn new TreeMap<>(map);\n\t\t\t}\n\t\t\tcatch (ClassCastException ex) {\n\t\t\t\t// If elements are not comparable, just keep the original map\n\t\t\t\treturn map;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@code primitive} types.\n\t */\n\tprivate static class PrimitiveDelegate implements Delegate {\n\n\t\tprivate static final Map<Character, String> CHAR_ESCAPES = Map.of(\n\t\t\t\t'\\b', \"\\\\b\",\n\t\t\t\t'\\t', \"\\\\t\",\n\t\t\t\t'\\n', \"\\\\n\",\n\t\t\t\t'\\f', \"\\\\f\",\n\t\t\t\t'\\r', \"\\\\r\",\n\t\t\t\t'\\\"', \"\\\"\",\n\t\t\t\t'\\'', \"\\\\'\",\n\t\t\t\t'\\\\', \"\\\\\\\\\"\n\t\t);\n\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof Boolean || value instanceof Integer) {\n\t\t\t\treturn CodeBlock.of(\"$L\", value);\n\t\t\t}\n\t\t\tif (value instanceof Byte) {\n\t\t\t\treturn CodeBlock.of(\"(byte) $L\", value);\n\t\t\t}\n\t\t\tif (value instanceof Short) {\n\t\t\t\treturn CodeBlock.of(\"(short) $L\", value);\n\t\t\t}\n\t\t\tif (value instanceof Long) {\n\t\t\t\treturn CodeBlock.of(\"$LL\", value);\n\t\t\t}\n\t\t\tif (value instanceof Float) {\n\t\t\t\treturn CodeBlock.of(\"$LF\", value);\n\t\t\t}\n\t\t\tif (value instanceof Double) {\n\t\t\t\treturn CodeBlock.of(\"(double) $L\", value);\n\t\t\t}\n\t\t\tif (value instanceof Character character) {\n\t\t\t\treturn CodeBlock.of(\"'$L'\", escape(character));\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate String escape(char ch) {\n\t\t\tString escaped = CHAR_ESCAPES.get(ch);\n\t\t\tif (escaped != null) {\n\t\t\t\treturn escaped;\n\t\t\t}\n\t\t\treturn (!Character.isISOControl(ch)) ? Character.toString(ch)\n\t\t\t\t\t: String.format(\"\\\\u%04x\", (int) ch);\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link String} types.\n\t */\n\tprivate static class StringDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof String) {\n\t\t\t\treturn CodeBlock.of(\"$S\", value);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link Charset} types.\n\t */\n\tprivate static class CharsetDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof Charset charset) {\n\t\t\t\treturn CodeBlock.of(\"$T.forName($S)\", Charset.class, charset.name());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link Enum} types.\n\t */\n\tprivate static class EnumDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof Enum<?> enumValue) {\n\t\t\t\treturn CodeBlock.of(\"$T.$L\", enumValue.getDeclaringClass(),\n\t\t\t\t\t\tenumValue.name());\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link Class} types.\n\t */\n\tprivate static class ClassDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof Class<?> clazz) {\n\t\t\t\treturn CodeBlock.of(\"$T.class\", ClassUtils.getUserClass(clazz));\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link ResolvableType} types.\n\t */\n\tprivate static class ResolvableTypeDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value instanceof ResolvableType resolvableType) {\n\t\t\t\treturn generateCode(resolvableType, false);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\n\t\tprivate static CodeBlock generateCode(ResolvableType resolvableType, boolean allowClassResult) {\n\t\t\tif (ResolvableType.NONE.equals(resolvableType)) {\n\t\t\t\treturn CodeBlock.of(\"$T.NONE\", ResolvableType.class);\n\t\t\t}\n\t\t\tClass<?> type = ClassUtils.getUserClass(resolvableType.toClass());\n\t\t\tif (resolvableType.hasGenerics() && resolvableType.hasResolvableGenerics()) {\n\t\t\t\treturn generateCodeWithGenerics(resolvableType, type);\n\t\t\t}\n\t\t\tif (allowClassResult) {\n\t\t\t\treturn CodeBlock.of(\"$T.class\", type);\n\t\t\t}\n\t\t\treturn CodeBlock.of(\"$T.forClass($T.class)\", ResolvableType.class, type);\n\t\t}\n\n\t\tprivate static CodeBlock generateCodeWithGenerics(ResolvableType target, Class<?> type) {\n\t\t\tResolvableType[] generics = target.getGenerics();\n\t\t\tboolean hasNoNestedGenerics = Arrays.stream(generics).noneMatch(ResolvableType::hasGenerics);\n\t\t\tCodeBlock.Builder code = CodeBlock.builder();\n\t\t\tcode.add(\"$T.forClassWithGenerics($T.class\", ResolvableType.class, type);\n\t\t\tfor (ResolvableType generic : generics) {\n\t\t\t\tcode.add(\", $L\", generateCode(generic, hasNoNestedGenerics));\n\t\t\t}\n\t\t\tcode.add(\")\");\n\t\t\treturn code.build();\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@code array} types.\n\t */\n\tprivate static class ArrayDelegate implements Delegate {\n\n\t\t@Override\n\t\tpublic @Nullable CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\n\t\t\tif (value.getClass().isArray()) {\n\t\t\t\tStream<CodeBlock> elements = Arrays.stream(ObjectUtils.toObjectArray(value))\n\t\t\t\t\t\t.map(codeGenerator::generateCode);\n\t\t\t\tCodeBlock.Builder code = CodeBlock.builder();\n\t\t\t\tcode.add(\"new $T {\", value.getClass());\n\t\t\t\tcode.add(elements.collect(CodeBlock.joining(\", \")));\n\t\t\t\tcode.add(\"}\");\n\t\t\t\treturn code.build();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link List} types.\n\t */\n\tprivate static class ListDelegate extends CollectionDelegate<List<?>> {\n\n\t\tListDelegate() {\n\t\t\tsuper(List.class, CodeBlock.of(\"$T.emptyList()\", Collections.class));\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Delegate} for {@link Set} types.\n\t */\n\tprivate static class SetDelegate extends CollectionDelegate<Set<?>> {\n\n\t\tSetDelegate() {\n\t\t\tsuper(Set.class, CodeBlock.of(\"$T.emptySet()\", Collections.class));\n\t\t}\n\n\t\t@Override\n\t\tprotected CodeBlock generateCollectionCode(ValueCodeGenerator valueCodeGenerator, Set<?> collection) {\n\t\t\tif (collection instanceof LinkedHashSet) {\n\t\t\t\treturn CodeBlock.of(\"new $T($L)\", LinkedHashSet.class,\n\t\t\t\t\t\tgenerateCollectionOf(valueCodeGenerator, collection, List.class));\n\t\t\t}\n\t\t\treturn super.generateCollectionCode(valueCodeGenerator,\n\t\t\t\t\torderForCodeConsistency(collection));\n\t\t}\n\n\t\tprivate Set<?> orderForCodeConsistency(Set<?> set) {\n\t\t\ttry {\n\t\t\t\treturn new TreeSet<Object>(set);\n\t\t\t}\n\t\t\tcatch (ClassCastException ex) {\n\t\t\t\t// If elements are not comparable, just keep the original set\n\t\t\t\treturn set;\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.PrimitiveDelegate#CHAR_ESCAPES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate#CHAR_ESCAPES",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Character, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic CodeBlock generateCode(ValueCodeGenerator codeGenerator, Object value) {\r\n    if (value instanceof Boolean || value instanceof Integer) {\r\n        return CodeBlock.of(\"$L\", value);\r\n    }\r\n    if (value instanceof Byte) {\r\n        return CodeBlock.of(\"(byte) $L\", value);\r\n    }\r\n    if (value instanceof Short) {\r\n        return CodeBlock.of(\"(short) $L\", value);\r\n    }\r\n    if (value instanceof Long) {\r\n        return CodeBlock.of(\"$LL\", value);\r\n    }\r\n    if (value instanceof Float) {\r\n        return CodeBlock.of(\"$LF\", value);\r\n    }\r\n    if (value instanceof Double) {\r\n        return CodeBlock.of(\"(double) $L\", value);\r\n    }\r\n    if (value instanceof Character character) {\r\n        return CodeBlock.of(\"'$L'\", escape(character));\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveDelegate#generateCode(ValueCodeGenerator,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate#generateCode(ValueCodeGenerator,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate#escape(char)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String escape(char ch) {\r\n    String escaped = CHAR_ESCAPES.get(ch);\r\n    if (escaped != null) {\r\n        return escaped;\r\n    }\r\n    return (!Character.isISOControl(ch)) ? Character.toString(ch) : String.format(\"\\\\u%04x\", (int) ch);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveDelegate",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveDelegate#escape(char)",
    "tailType": "method"
  }
]