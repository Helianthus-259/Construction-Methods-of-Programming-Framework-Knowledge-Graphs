[
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return ReflectUtils.getProtectionDomain(beanClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#getProtectionDomain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new instance of the <code>BeanMap</code>. An existing\r\n * generated class will be reused if possible.\r\n */\r\npublic BeanMap create() {\r\n    if (beanClass == null) {\r\n        throw new IllegalArgumentException(\"Class of bean unknown\");\r\n    }\r\n    setNamePrefix(beanClass.getName());\r\n    return (BeanMap) super.create(KEY_FACTORY.newInstance(beanClass, require));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    new BeanMapEmitter(v, getClassName(), beanClass, require);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return ((BeanMap) ReflectUtils.newInstance(type)).newInstance(bean);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return ((BeanMap) instance).newInstance(bean);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.beans.BeanMapKey",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.beans.BeanMapKey",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.beans;\n\nimport java.security.ProtectionDomain;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.AbstractClassGenerator;\nimport org.springframework.cglib.core.KeyFactory;\nimport org.springframework.cglib.core.ReflectUtils;\n\n/**\n * A <code>Map</code>-based view of a JavaBean.  The default set of keys is the\n * union of all property names (getters or setters). An attempt to set\n * a read-only property will be ignored, and write-only properties will\n * be returned as <code>null</code>. Removal of objects is not a\n * supported (the key set is fixed).\n * @author Chris Nokleberg\n */\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nabstract public class BeanMap implements Map {\n\t/**\n\t * Limit the properties reflected in the key set of the map\n\t * to readable properties.\n\t * @see BeanMap.Generator#setRequire\n\t */\n\tpublic static final int REQUIRE_GETTER = 1;\n\n\t/**\n\t * Limit the properties reflected in the key set of the map\n\t * to writable properties.\n\t * @see BeanMap.Generator#setRequire\n\t */\n\tpublic static final int REQUIRE_SETTER = 2;\n\n\t/**\n\t * Helper method to create a new <code>BeanMap</code>.  For finer\n\t * control over the generated instance, use a new instance of\n\t * <code>BeanMap.Generator</code> instead of this static method.\n\t * @param bean the JavaBean underlying the map\n\t * @return a new <code>BeanMap</code> instance\n\t */\n\tpublic static BeanMap create(Object bean) {\n\t\tGenerator gen = new Generator();\n\t\tgen.setBean(bean);\n\t\treturn gen.create();\n\t}\n\n\tpublic static class Generator extends AbstractClassGenerator {\n\t\tprivate static final Source SOURCE = new Source(BeanMap.class.getName());\n\n\t\tprivate static final BeanMapKey KEY_FACTORY =\n\t\t  (BeanMapKey)KeyFactory.create(BeanMapKey.class, KeyFactory.CLASS_BY_NAME);\n\n\t\tinterface BeanMapKey {\n\t\t\tpublic Object newInstance(Class type, int require);\n\t\t}\n\n\t\tprivate Object bean;\n\t\tprivate Class beanClass;\n\t\tprivate int require;\n\n\t\tpublic Generator() {\n\t\t\tsuper(SOURCE);\n\t\t}\n\n\t\t/**\n\t\t * Set the bean that the generated map should reflect. The bean may be swapped\n\t\t * out for another bean of the same type using {@link #setBean}.\n\t\t * Calling this method overrides any value previously set using {@link #setBeanClass}.\n\t\t * You must call either this method or {@link #setBeanClass} before {@link #create}.\n\t\t * @param bean the initial bean\n\t\t */\n\t\tpublic void setBean(Object bean) {\n\t\t\tthis.bean = bean;\n\t\t\tif (bean != null) {\n\t\t\t\tbeanClass = bean.getClass();\n\t\t\t\t// SPRING PATCH BEGIN\n\t\t\t\tsetContextClass(beanClass);\n\t\t\t\t// SPRING PATCH END\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Set the class of the bean that the generated map should support.\n\t\t * You must call either this method or {@link #setBeanClass} before {@link #create}.\n\t\t * @param beanClass the class of the bean\n\t\t */\n\t\tpublic void setBeanClass(Class beanClass) {\n\t\t\tthis.beanClass = beanClass;\n\t\t}\n\n\t\t/**\n\t\t * Limit the properties reflected by the generated map.\n\t\t * @param require any combination of {@link #REQUIRE_GETTER} and\n\t\t * {@link #REQUIRE_SETTER}; default is zero (any property allowed)\n\t\t */\n\t\tpublic void setRequire(int require) {\n\t\t\tthis.require = require;\n\t\t}\n\n\t\t@Override\n\t\tprotected ClassLoader getDefaultClassLoader() {\n\t\t\treturn beanClass.getClassLoader();\n\t\t}\n\n\t\t@Override\n\t\tprotected ProtectionDomain getProtectionDomain() {\n\t\t\treturn ReflectUtils.getProtectionDomain(beanClass);\n\t\t}\n\n\t\t/**\n\t\t * Create a new instance of the <code>BeanMap</code>. An existing\n\t\t * generated class will be reused if possible.\n\t\t */\n\t\tpublic BeanMap create() {\n\t\t\tif (beanClass == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"Class of bean unknown\");\n\t\t\t}\n\t\t\tsetNamePrefix(beanClass.getName());\n\t\t\treturn (BeanMap)super.create(KEY_FACTORY.newInstance(beanClass, require));\n\t\t}\n\n\t\t@Override\n\t\tpublic void generateClass(ClassVisitor v) throws Exception {\n\t\t\tnew BeanMapEmitter(v, getClassName(), beanClass, require);\n\t\t}\n\n\t\t@Override\n\t\tprotected Object firstInstance(Class type) {\n\t\t\treturn ((BeanMap)ReflectUtils.newInstance(type)).newInstance(bean);\n\t\t}\n\n\t\t@Override\n\t\tprotected Object nextInstance(Object instance) {\n\t\t\treturn ((BeanMap)instance).newInstance(bean);\n\t\t}\n\t}\n\n\t/**\n\t * Create a new <code>BeanMap</code> instance using the specified bean.\n\t * This is faster than using the {@link #create} static method.\n\t * @param bean the JavaBean underlying the map\n\t * @return a new <code>BeanMap</code> instance\n\t */\n\tabstract public BeanMap newInstance(Object bean);\n\n\t/**\n\t * Get the type of a property.\n\t * @param name the name of the JavaBean property\n\t * @return the type of the property, or null if the property does not exist\n\t */\n\tabstract public Class getPropertyType(String name);\n\n\tprotected Object bean;\n\n\tprotected BeanMap() {\n\t}\n\n\tprotected BeanMap(Object bean) {\n\t\tsetBean(bean);\n\t}\n\n\t@Override\n\tpublic Object get(Object key) {\n\t\treturn get(bean, key);\n\t}\n\n\t@Override\n\tpublic Object put(Object key, Object value) {\n\t\treturn put(bean, key, value);\n\t}\n\n\t/**\n\t * Get the property of a bean. This allows a <code>BeanMap</code>\n\t * to be used statically for multiple beans--the bean instance tied to the\n\t * map is ignored and the bean passed to this method is used instead.\n\t * @param bean the bean to query; must be compatible with the type of\n\t * this <code>BeanMap</code>\n\t * @param key must be a String\n\t * @return the current value, or null if there is no matching property\n\t */\n\tabstract public Object get(Object bean, Object key);\n\n\t/**\n\t * Set the property of a bean. This allows a <code>BeanMap</code>\n\t * to be used statically for multiple beans--the bean instance tied to the\n\t * map is ignored and the bean passed to this method is used instead.\n\t * @param key must be a String\n\t * @return the old value, if there was one, or null\n\t */\n\tabstract public Object put(Object bean, Object key, Object value);\n\n\t/**\n\t * Change the underlying bean this map should use.\n\t * @param bean the new JavaBean\n\t * @see #getBean\n\t */\n\tpublic void setBean(Object bean) {\n\t\tthis.bean = bean;\n\t}\n\n\t/**\n\t * Return the bean currently in use by this map.\n\t * @return the current JavaBean\n\t * @see #setBean\n\t */\n\tpublic Object getBean() {\n\t\treturn bean;\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn keySet().contains(key);\n\t}\n\n\t@Override\n\tpublic boolean containsValue(Object value) {\n\t\tfor (Iterator it = keySet().iterator(); it.hasNext();) {\n\t\t\tObject v = get(it.next());\n\t\t\tif (((value == null) && (v == null)) || (value != null && value.equals(v))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic int size() {\n\t\treturn keySet().size();\n\t}\n\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn size() == 0;\n\t}\n\n\t@Override\n\tpublic Object remove(Object key) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void putAll(Map t) {\n\t\tfor (Object key : t.keySet()) {\n\t\t\tput(key, t.get(key));\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (o == null || !(o instanceof Map other)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (size() != other.size()) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (Object key : keySet()) {\n\t\t\tif (!other.containsKey(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tObject v1 = get(key);\n\t\t\tObject v2 = other.get(key);\n\t\t\tif (!(Objects.equals(v1, v2))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint code = 0;\n\t\tfor (Object key : keySet()) {\n\t\t\tObject value = get(key);\n\t\t\tcode += ((key == null) ? 0 : key.hashCode()) ^\n\t\t\t\t((value == null) ? 0 : value.hashCode());\n\t\t}\n\t\treturn code;\n\t}\n\n\t// TODO: optimize\n\t@Override\n\tpublic Set entrySet() {\n\t\tHashMap copy = new HashMap();\n\t\tfor (Object key : keySet()) {\n\t\t\tcopy.put(key, get(key));\n\t\t}\n\t\treturn Collections.unmodifiableMap(copy).entrySet();\n\t}\n\n\t@Override\n\tpublic Collection values() {\n\t\tSet keys = keySet();\n\t\tList values = new ArrayList(keys.size());\n\t\tfor (Iterator it = keys.iterator(); it.hasNext();) {\n\t\t\tvalues.add(get(it.next()));\n\t\t}\n\t\treturn Collections.unmodifiableCollection(values);\n\t}\n\n\t/*\n\t * @see java.util.AbstractMap#toString\n\t */\n\t@Override\n\tpublic String toString()\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append('{');\n\t\tfor (Iterator it = keySet().iterator(); it.hasNext();) {\n\t\t\tObject key = it.next();\n\t\t\tsb.append(key);\n\t\t\tsb.append('=');\n\t\t\tsb.append(get(key));\n\t\t\tif (it.hasNext()) {\n\t\t\t\tsb.append(\", \");\n\t\t\t}\n\t\t}\n\t\tsb.append('}');\n\t\treturn sb.toString();\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "public Object newInstance(Class type, int require);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.BeanMapKey",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.BeanMapKey#newInstance(Class,int)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.stereotype",
    "tailType": "package"
  }
]