[
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenInt()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenLong()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenLong() {\r\n    assertThat(generateCode(5L)).hasToString(\"5L\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generateWhenLong()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenLong()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenFloat()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenFloat() {\r\n    assertThat(generateCode(0.1F)).hasToString(\"0.1F\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generateWhenFloat()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenFloat()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenDouble()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenDouble() {\r\n    assertThat(generateCode(0.2)).hasToString(\"(double) 0.2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generateWhenDouble()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenDouble()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenChar()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenChar() {\r\n    assertThat(generateCode('a')).hasToString(\"'a'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generateWhenChar()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenChar()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenSimpleEscapedCharReturnsEscaped()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateWhenSimpleEscapedCharReturnsEscaped() {\r\n    testEscaped('\\b', \"'\\\\b'\");\r\n    testEscaped('\\t', \"'\\\\t'\");\r\n    testEscaped('\\n', \"'\\\\n'\");\r\n    testEscaped('\\f', \"'\\\\f'\");\r\n    testEscaped('\\r', \"'\\\\r'\");\r\n    testEscaped('\\\"', \"'\\\"'\");\r\n    testEscaped('\\'', \"'\\\\''\");\r\n    testEscaped('\\\\', \"'\\\\\\\\'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generateWhenSimpleEscapedCharReturnsEscaped()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generateWhenSimpleEscapedCharReturnsEscaped()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generatedWhenUnicodeEscapedCharReturnsEscaped()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generatedWhenUnicodeEscapedCharReturnsEscaped() {\r\n    testEscaped('\\u007f', \"'\\\\u007f'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.PrimitiveTests#generatedWhenUnicodeEscapedCharReturnsEscaped()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#generatedWhenUnicodeEscapedCharReturnsEscaped()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.PrimitiveTests#testEscaped(char,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testEscaped(char value, String expectedSourceContent) {\r\n    assertThat(generateCode(value)).hasToString(expectedSourceContent);\r\n}",
    "tailType": "method_code"
  }
]