[
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityLowReadPosition(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityLowReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityLowReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityHighReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid decreaseCapacityHighReadPosition(DataBufferFactory bufferFactory) {\r\n    assumeFalse(bufferFactory instanceof Netty5DataBufferFactory, \"Netty 5 does not support decreasing the capacity\");\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(2);\r\n    buffer.writePosition(2);\r\n    buffer.readPosition(2);\r\n    buffer.capacity(1);\r\n    assertThat(buffer.capacity()).isEqualTo(1);\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityHighReadPosition(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityHighReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#decreaseCapacityHighReadPosition(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#capacityLessThanZero(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid capacityLessThanZero(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(1);\r\n    try {\r\n        assertThatIllegalArgumentException().isThrownBy(() -> buffer.capacity(-1));\r\n    } finally {\r\n        release(buffer);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#capacityLessThanZero(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#capacityLessThanZero(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#capacityLessThanZero(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeByteBuffer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer1 = createDataBuffer(1);\r\n    buffer1.write((byte) 'a');\r\n    ByteBuffer buffer2 = createByteBuffer(2);\r\n    buffer2.put((byte) 'b');\r\n    buffer2.flip();\r\n    ByteBuffer buffer3 = createByteBuffer(3);\r\n    buffer3.put((byte) 'c');\r\n    buffer3.flip();\r\n    buffer1.write(buffer2, buffer3);\r\n    // make sure the write index is correctly set\r\n    buffer1.write((byte) 'd');\r\n    assertThat(buffer1.readableByteCount()).isEqualTo(4);\r\n    byte[] result = new byte[4];\r\n    buffer1.read(result);\r\n    assertThat(result).isEqualTo(new byte[] { 'a', 'b', 'c', 'd' });\r\n    release(buffer1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeByteBuffer(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#createByteBuffer(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private ByteBuffer createByteBuffer(int capacity) {\r\n    return ByteBuffer.allocate(capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#createByteBuffer(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeDataBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeDataBuffer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer1 = createDataBuffer(1);\r\n    buffer1.write((byte) 'a');\r\n    DataBuffer buffer2 = createDataBuffer(2);\r\n    buffer2.write((byte) 'b');\r\n    DataBuffer buffer3 = createDataBuffer(3);\r\n    buffer3.write((byte) 'c');\r\n    buffer1.write(buffer2, buffer3);\r\n    // make sure the write index is correctly set\r\n    buffer1.write((byte) 'd');\r\n    assertThat(buffer1.readableByteCount()).isEqualTo(4);\r\n    byte[] result = new byte[4];\r\n    buffer1.read(result);\r\n    assertThat(result).isEqualTo(new byte[] { 'a', 'b', 'c', 'd' });\r\n    release(buffer1, buffer2, buffer3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferTests#writeDataBuffer(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#writeDataBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferTests#asByteBuffer(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\n@SuppressWarnings(\"deprecation\")\r\nvoid asByteBuffer(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer buffer = createDataBuffer(4);\r\n    buffer.write(new byte[] { 'a', 'b', 'c' });\r\n    // skip a\r\n    buffer.read();\r\n    ByteBuffer result = buffer.asByteBuffer();\r\n    assertThat(result.capacity()).isEqualTo(2);\r\n    buffer.write((byte) 'd');\r\n    assertThat(result.remaining()).isEqualTo(2);\r\n    byte[] resultBytes = new byte[2];\r\n    result.get(resultBytes);\r\n    assertThat(resultBytes).isEqualTo(new byte[] { 'b', 'c' });\r\n    release(buffer);\r\n}",
    "tailType": "method_code"
  }
]