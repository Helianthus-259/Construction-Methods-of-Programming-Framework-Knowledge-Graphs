[
  {
    "head": "org.springframework.core.io.ClassPathResource#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ClassPathResource#clazz",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#clazz",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the <em>absolute path</em> for this resource, as a\r\n * {@linkplain StringUtils#cleanPath(String) cleaned} resource path within\r\n * the class path.\r\n * <p>The path returned by this method does not have a leading slash and is\r\n * suitable for use with {@link ClassLoader#getResource(String)}.\r\n */\r\npublic final String getPath() {\r\n    return this.absolutePath;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link ClassLoader} that this resource will be obtained from.\r\n */\r\n@Nullable\r\npublic final ClassLoader getClassLoader() {\r\n    return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks for the resolution of a resource URL.\r\n * @see ClassLoader#getResource(String)\r\n * @see Class#getResource(String)\r\n */\r\n@Override\r\npublic boolean exists() {\r\n    return (resolveURL() != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#isReadable()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation checks for the resolution of a resource URL upfront,\r\n * then proceeding with {@link AbstractFileResolvingResource}'s length check.\r\n * @see ClassLoader#getResource(String)\r\n * @see Class#getResource(String)\r\n */\r\n@Override\r\npublic boolean isReadable() {\r\n    URL url = resolveURL();\r\n    return (url != null && checkReadable(url));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#isReadable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#isReadable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#resolveURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolves a {@link URL} for the underlying class path resource.\r\n * @return the resolved URL, or {@code null} if not resolvable\r\n */\r\n@Nullable\r\nprotected URL resolveURL() {\r\n    try {\r\n        if (this.clazz != null) {\r\n            return this.clazz.getResource(this.path);\r\n        } else if (this.classLoader != null) {\r\n            return this.classLoader.getResource(this.absolutePath);\r\n        } else {\r\n            return ClassLoader.getSystemResource(this.absolutePath);\r\n        }\r\n    } catch (IllegalArgumentException ex) {\r\n        // Should not happen according to the JDK's contract:\r\n        // see https://github.com/openjdk/jdk/pull/2662\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#resolveURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#resolveURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation opens an {@link InputStream} for the underlying class\r\n * path resource, if available.\r\n * @see ClassLoader#getResourceAsStream(String)\r\n * @see Class#getResourceAsStream(String)\r\n * @see ClassLoader#getSystemResourceAsStream(String)\r\n */\r\n@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    InputStream is;\r\n    if (this.clazz != null) {\r\n        is = this.clazz.getResourceAsStream(this.path);\r\n    } else if (this.classLoader != null) {\r\n        is = this.classLoader.getResourceAsStream(this.absolutePath);\r\n    } else {\r\n        is = ClassLoader.getSystemResourceAsStream(this.absolutePath);\r\n    }\r\n    if (is == null) {\r\n        throw new FileNotFoundException(getDescription() + \" cannot be opened because it does not exist\");\r\n    }\r\n    return is;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ClassPathResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ClassPathResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]