[
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#isCancelled()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isCancelled() {\r\n    return this.adaptee.isCancelled();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#isCancelled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#isCancelled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#isDone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isDone() {\r\n    return this.adaptee.isDone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#isDone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#isDone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic T get() throws InterruptedException, ExecutionException {\r\n    return adaptInternal(this.adaptee.get());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#get()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get(long,TimeUnit)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\r\n    return adaptInternal(this.adaptee.get(timeout, unit));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#get(long,TimeUnit)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get(long,TimeUnit)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#get(long,TimeUnit)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#adaptInternal(S)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\nfinal T adaptInternal(S adapteeResult) throws ExecutionException {\r\n    synchronized (this.mutex) {\r\n        return switch(this.state) {\r\n            case SUCCESS ->\r\n                (T) this.result;\r\n            case FAILURE ->\r\n                {\r\n                    Assert.state(this.result instanceof ExecutionException, \"Failure without exception\");\r\n                    throw (ExecutionException) this.result;\r\n                }\r\n            case NEW ->\r\n                {\r\n                    try {\r\n                        T adapted = adapt(adapteeResult);\r\n                        this.result = adapted;\r\n                        this.state = State.SUCCESS;\r\n                        yield adapted;\r\n                    } catch (ExecutionException ex) {\r\n                        this.result = ex;\r\n                        this.state = State.FAILURE;\r\n                        throw ex;\r\n                    } catch (Throwable ex) {\r\n                        ExecutionException execEx = new ExecutionException(ex);\r\n                        this.result = execEx;\r\n                        this.state = State.FAILURE;\r\n                        throw execEx;\r\n                    }\r\n                }\r\n        };\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#adaptInternal(S)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#adaptInternal(S)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#adaptInternal(S)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter#adapt(S)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adapts the given adaptee's result into T.\r\n * @return the adapted result\r\n */\r\n@Nullable\r\nprotected abstract T adapt(S adapteeResult) throws ExecutionException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapter#adapt(S)",
    "tailType": "method"
  }
]