[
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\npublic interface InterceptFieldEnabled {\n    void setInterceptFieldCallback(InterceptFieldCallback callback);\n    InterceptFieldCallback getInterceptFieldCallback();\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#setInterceptFieldCallback(InterceptFieldCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "void setInterceptFieldCallback(InterceptFieldCallback callback);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#setInterceptFieldCallback(InterceptFieldCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#getInterceptFieldCallback()",
    "headType": "method",
    "relation": "provide",
    "tail": "InterceptFieldCallback getInterceptFieldCallback();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldEnabled",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldEnabled#getInterceptFieldCallback()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\nimport org.springframework.asm.Type;\n\npublic interface InterceptFieldFilter {\n    boolean acceptRead(Type owner, String name);\n    boolean acceptWrite(Type owner, String name);\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "boolean acceptRead(Type owner, String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptRead(Type,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptWrite(Type,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "boolean acceptWrite(Type owner, String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldFilter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldFilter#acceptWrite(Type,String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform.impl",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform.impl",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform.impl;\n\nimport org.springframework.asm.Label;\nimport org.springframework.asm.Type;\nimport org.springframework.cglib.core.CodeEmitter;\nimport org.springframework.cglib.core.Constants;\nimport org.springframework.cglib.core.Local;\nimport org.springframework.cglib.core.Signature;\nimport org.springframework.cglib.core.TypeUtils;\nimport org.springframework.cglib.transform.ClassEmitterTransformer;\n\n/**\n * @author Juozas Baliuka, Chris Nokleberg\n */\npublic class InterceptFieldTransformer extends ClassEmitterTransformer {\n    private static final String CALLBACK_FIELD = \"$CGLIB_READ_WRITE_CALLBACK\";\n    private static final Type CALLBACK =\n      TypeUtils.parseType(\"org.springframework.cglib.transform.impl.InterceptFieldCallback\");\n    private static final Type ENABLED =\n      TypeUtils.parseType(\"org.springframework.cglib.transform.impl.InterceptFieldEnabled\");\n    private static final Signature ENABLED_SET =\n      new Signature(\"setInterceptFieldCallback\", Type.VOID_TYPE, new Type[]{ CALLBACK });\n    private static final Signature ENABLED_GET =\n      new Signature(\"getInterceptFieldCallback\", CALLBACK, new Type[0]);\n\n    private InterceptFieldFilter filter;\n\n    public InterceptFieldTransformer(InterceptFieldFilter filter) {\n        this.filter = filter;\n    }\n\n    @Override\n\tpublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\n        if (!TypeUtils.isInterface(access)) {\n            super.begin_class(version, access, className, superType, TypeUtils.add(interfaces, ENABLED), sourceFile);\n\n            super.declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT,\n                                CALLBACK_FIELD,\n                                CALLBACK,\n                                null);\n\n            CodeEmitter e;\n            e = super.begin_method(Constants.ACC_PUBLIC, ENABLED_GET, null);\n            e.load_this();\n            e.getfield(CALLBACK_FIELD);\n            e.return_value();\n            e.end_method();\n\n            e = super.begin_method(Constants.ACC_PUBLIC, ENABLED_SET, null);\n            e.load_this();\n            e.load_arg(0);\n            e.putfield(CALLBACK_FIELD);\n            e.return_value();\n            e.end_method();\n        } else {\n            super.begin_class(version, access, className, superType, interfaces, sourceFile);\n        }\n    }\n\n    @Override\n\tpublic void declare_field(int access, String name, Type type, Object value) {\n        super.declare_field(access, name, type, value);\n        if (!TypeUtils.isStatic(access)) {\n            if (filter.acceptRead(getClassType(), name)) {\n                addReadMethod(name, type);\n            }\n            if (filter.acceptWrite(getClassType(), name)) {\n                addWriteMethod(name, type);\n            }\n        }\n    }\n\n    private void addReadMethod(String name, Type type) {\n        CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC,\n                                           readMethodSig(name, type.getDescriptor()),\n                                           null);\n        e.load_this();\n        e.getfield(name);\n        e.load_this();\n        e.invoke_interface(ENABLED,ENABLED_GET);\n        Label intercept = e.make_label();\n        e.ifnonnull(intercept);\n        e.return_value();\n\n        e.mark(intercept);\n        Local result = e.make_local(type);\n        e.store_local(result);\n        e.load_this();\n        e.invoke_interface(ENABLED,ENABLED_GET);\n        e.load_this();\n        e.push(name);\n        e.load_local(result);\n        e.invoke_interface(CALLBACK, readCallbackSig(type));\n        if (!TypeUtils.isPrimitive(type)) {\n            e.checkcast(type);\n        }\n        e.return_value();\n        e.end_method();\n    }\n\n    private void addWriteMethod(String name, Type type) {\n        CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC,\n                                           writeMethodSig(name, type.getDescriptor()),\n                                           null);\n        e.load_this();\n        e.dup();\n        e.invoke_interface(ENABLED,ENABLED_GET);\n        Label skip = e.make_label();\n        e.ifnull(skip);\n\n        e.load_this();\n        e.invoke_interface(ENABLED,ENABLED_GET);\n        e.load_this();\n        e.push(name);\n        e.load_this();\n        e.getfield(name);\n        e.load_arg(0);\n        e.invoke_interface(CALLBACK, writeCallbackSig(type));\n        if (!TypeUtils.isPrimitive(type)) {\n            e.checkcast(type);\n        }\n        Label go = e.make_label();\n        e.goTo(go);\n        e.mark(skip);\n        e.load_arg(0);\n        e.mark(go);\n        e.putfield(name);\n        e.return_value();\n        e.end_method();\n    }\n\n    @Override\n\tpublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\n        return new CodeEmitter(super.begin_method(access, sig, exceptions)) {\n            @Override\n\t\t\tpublic void visitFieldInsn(int opcode, String owner, String name, String desc) {\n                Type towner = TypeUtils.fromInternalName(owner);\n                switch (opcode) {\n                case Constants.GETFIELD:\n                    if (filter.acceptRead(towner, name)) {\n                        helper(towner, readMethodSig(name, desc));\n                        return;\n                    }\n                    break;\n                case Constants.PUTFIELD:\n                    if (filter.acceptWrite(towner, name)) {\n                        helper(towner, writeMethodSig(name, desc));\n                        return;\n                    }\n                    break;\n                }\n                super.visitFieldInsn(opcode, owner, name, desc);\n            }\n\n            private void helper(Type owner, Signature sig) {\n                invoke_virtual(owner, sig);\n            }\n        };\n    }\n\n    private static Signature readMethodSig(String name, String desc) {\n        return new Signature(\"$cglib_read_\" + name, \"()\" + desc);\n    }\n\n    private static Signature writeMethodSig(String name, String desc) {\n        return new Signature(\"$cglib_write_\" + name, \"(\" + desc + \")V\");\n    }\n\n    private static Signature readCallbackSig(Type type) {\n        Type remap = remap(type);\n        return new Signature(\"read\" + callbackName(remap),\n                             remap,\n                             new Type[]{ Constants.TYPE_OBJECT,\n                                         Constants.TYPE_STRING,\n                                         remap });\n    }\n\n    private static Signature writeCallbackSig(Type type) {\n        Type remap = remap(type);\n        return new Signature(\"write\" + callbackName(remap),\n                             remap,\n                             new Type[]{ Constants.TYPE_OBJECT,\n                                         Constants.TYPE_STRING,\n                                         remap,\n                                         remap });\n    }\n\n    private static Type remap(Type type) {\n        switch (type.getSort()) {\n        case Type.OBJECT:\n        case Type.ARRAY:\n            return Constants.TYPE_OBJECT;\n        default:\n            return type;\n        }\n    }\n\n    private static String callbackName(Type type) {\n        return (type == Constants.TYPE_OBJECT) ?\n            \"Object\" :\n            TypeUtils.upperFirst(TypeUtils.getClassName(type));\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#CALLBACK_FIELD",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#CALLBACK_FIELD",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#CALLBACK",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#CALLBACK",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED",
    "tailType": "field"
  }
]