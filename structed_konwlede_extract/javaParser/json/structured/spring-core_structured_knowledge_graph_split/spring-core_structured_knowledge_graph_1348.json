[
  {
    "head": "org.springframework.util.MultiValueMapAdapter#getFirst(K)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#getFirst(K)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#add(K,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void add(K key, @Nullable V value) {\r\n    List<V> values = this.targetMap.computeIfAbsent(key, k -> new ArrayList<>(1));\r\n    values.add(value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#add(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#add(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#addAll(K,List<? extends V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void addAll(K key, List<? extends V> values) {\r\n    List<V> currentValues = this.targetMap.computeIfAbsent(key, k -> new ArrayList<>(values.size()));\r\n    currentValues.addAll(values);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#addAll(K,List<? extends V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#addAll(K,List<? extends V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#addAll(MultiValueMap<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void addAll(MultiValueMap<K, V> values) {\r\n    values.forEach(this::addAll);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#addAll(MultiValueMap<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#addAll(MultiValueMap<K,V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#set(K,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void set(K key, @Nullable V value) {\r\n    List<V> values = new ArrayList<>(1);\r\n    values.add(value);\r\n    this.targetMap.put(key, values);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#set(K,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#set(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#setAll(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAll(Map<K, V> values) {\r\n    values.forEach(this::set);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#setAll(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#setAll(Map<K,V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#toSingleValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Map<K, V> toSingleValueMap() {\r\n    Map<K, V> singleValueMap = CollectionUtils.newLinkedHashMap(this.targetMap.size());\r\n    this.targetMap.forEach((key, values) -> {\r\n        if (!CollectionUtils.isEmpty(values)) {\r\n            singleValueMap.put(key, values.get(0));\r\n        }\r\n    });\r\n    return singleValueMap;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MultiValueMapAdapter#toSingleValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MultiValueMapAdapter#toSingleValueMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]