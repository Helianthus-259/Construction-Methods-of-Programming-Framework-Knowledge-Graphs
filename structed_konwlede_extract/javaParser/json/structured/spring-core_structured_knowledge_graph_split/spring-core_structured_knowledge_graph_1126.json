[
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClass(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\r\n    if (isEligibleForOverriding(name)) {\r\n        Class<?> result = loadClassForOverriding(name);\r\n        if (result != null) {\r\n            if (resolve) {\r\n                resolveClass(result);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    return super.loadClass(name, resolve);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#loadClass(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClass(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#isEligibleForOverriding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the specified class is eligible for overriding\r\n * by this class loader.\r\n * @param className the class name to check\r\n * @return whether the specified class is eligible\r\n * @see #isExcluded\r\n */\r\nprotected boolean isEligibleForOverriding(String className) {\r\n    return !isExcluded(className);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#isEligibleForOverriding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClassForOverriding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load the specified class for overriding purposes in this ClassLoader.\r\n * <p>The default implementation delegates to {@link #findLoadedClass},\r\n * {@link #loadBytesForClass} and {@link #defineClass}.\r\n * @param name the name of the class\r\n * @return the Class object, or {@code null} if no class defined for that name\r\n * @throws ClassNotFoundException if the class for the given name couldn't be loaded\r\n */\r\n@Nullable\r\nprotected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {\r\n    Class<?> result = findLoadedClass(name);\r\n    if (result == null) {\r\n        byte[] bytes = loadBytesForClass(name);\r\n        if (bytes != null) {\r\n            result = defineClass(name, bytes, 0, bytes.length);\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#loadClassForOverriding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadClassForOverriding(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#loadBytesForClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load the defining bytes for the given class,\r\n * to be turned into a Class object through a {@link #defineClass} call.\r\n * <p>The default implementation delegates to {@link #openStreamForClass}\r\n * and {@link #transformIfNecessary}.\r\n * @param name the name of the class\r\n * @return the byte content (with transformers already applied),\r\n * or {@code null} if no class defined for that name\r\n * @throws ClassNotFoundException if the class for the given name couldn't be loaded\r\n */\r\nprotected byte @Nullable [] loadBytesForClass(String name) throws ClassNotFoundException {\r\n    InputStream is = openStreamForClass(name);\r\n    if (is == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Load the raw bytes.\r\n        byte[] bytes = FileCopyUtils.copyToByteArray(is);\r\n        // Transform if necessary and use the potentially transformed bytes.\r\n        return transformIfNecessary(name, bytes);\r\n    } catch (IOException ex) {\r\n        throw new ClassNotFoundException(\"Cannot load resource for class [\" + name + \"]\", ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#loadBytesForClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#openStreamForClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Open an InputStream for the specified class.\r\n * <p>The default implementation loads a standard class file through\r\n * the parent ClassLoader's {@code getResourceAsStream} method.\r\n * @param name the name of the class\r\n * @return the InputStream containing the byte code for the specified class\r\n */\r\n@Nullable\r\nprotected InputStream openStreamForClass(String name) {\r\n    String internalName = name.replace('.', '/') + CLASS_FILE_SUFFIX;\r\n    return getParent().getResourceAsStream(internalName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#openStreamForClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#openStreamForClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader#transformIfNecessary(String,byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Transformation hook to be implemented by subclasses.\r\n * <p>The default implementation simply returns the given bytes as-is.\r\n * @param name the fully-qualified name of the class being transformed\r\n * @param bytes the raw bytes of the class\r\n * @return the transformed bytes (never {@code null};\r\n * same as the input bytes if the transformation produced no changes)\r\n */\r\nprotected byte[] transformIfNecessary(String name, byte[] bytes) {\r\n    return bytes;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OverridingClassLoader#transformIfNecessary(String,byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OverridingClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "DecoratingClassLoader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ParameterizedTypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ParameterizedTypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * The purpose of this class is to enable capturing and passing a generic\n * {@link Type}. In order to capture the generic type and retain it at runtime,\n * you need to create a subclass (ideally as anonymous inline class) as follows:\n *\n * <pre class=\"code\">\n * ParameterizedTypeReference&lt;List&lt;String&gt;&gt; typeRef = new ParameterizedTypeReference&lt;List&lt;String&gt;&gt;() {};\n * </pre>\n *\n * <p>The resulting {@code typeRef} instance can then be used to obtain a {@link Type}\n * instance that carries the captured parameterized type information at runtime.\n * For more information on \"super type tokens\" see the link to Neal Gafter's blog post.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @since 3.2\n * @param <T> the referenced type\n * @see <a href=\"https://gafter.blogspot.nl/2006/12/super-type-tokens.html\">Neal Gafter on Super Type Tokens</a>\n */\npublic abstract class ParameterizedTypeReference<T> {\n\n\tprivate final Type type;\n\n\n\tprotected ParameterizedTypeReference() {\n\t\tClass<?> parameterizedTypeReferenceSubclass = findParameterizedTypeReferenceSubclass(getClass());\n\t\tType type = parameterizedTypeReferenceSubclass.getGenericSuperclass();\n\t\tAssert.isInstanceOf(ParameterizedType.class, type, \"Type must be a parameterized type\");\n\t\tParameterizedType parameterizedType = (ParameterizedType) type;\n\t\tType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\t\tAssert.isTrue(actualTypeArguments.length == 1, \"Number of type arguments must be 1\");\n\t\tthis.type = actualTypeArguments[0];\n\t}\n\n\tprivate ParameterizedTypeReference(Type type) {\n\t\tthis.type = type;\n\t}\n\n\n\tpublic Type getType() {\n\t\treturn this.type;\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof ParameterizedTypeReference<?> that && this.type.equals(that.type)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.type.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"ParameterizedTypeReference<\" + this.type + \">\";\n\t}\n\n\n\t/**\n\t * Build a {@code ParameterizedTypeReference} wrapping the given type.\n\t * @param type a generic type (possibly obtained via reflection,\n\t * for example, from {@link java.lang.reflect.Method#getGenericReturnType()})\n\t * @return a corresponding reference which may be passed into\n\t * {@code ParameterizedTypeReference}-accepting methods\n\t * @since 4.3.12\n\t */\n\tpublic static <T> ParameterizedTypeReference<T> forType(Type type) {\n\t\treturn new ParameterizedTypeReference<>(type) {};\n\t}\n\n\tprivate static Class<?> findParameterizedTypeReferenceSubclass(Class<?> child) {\n\t\tClass<?> parent = child.getSuperclass();\n\t\tif (Object.class == parent) {\n\t\t\tthrow new IllegalStateException(\"Expected ParameterizedTypeReference superclass\");\n\t\t}\n\t\telse if (ParameterizedTypeReference.class == parent) {\n\t\t\treturn child;\n\t\t}\n\t\telse {\n\t\t\treturn findParameterizedTypeReferenceSubclass(parent);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]