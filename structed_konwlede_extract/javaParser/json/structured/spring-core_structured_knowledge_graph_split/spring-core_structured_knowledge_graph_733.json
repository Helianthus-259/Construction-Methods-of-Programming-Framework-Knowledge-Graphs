[
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnum(String,Class<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <E extends Enum<E>> E getEnum(String attributeName, Class<E> type) {\r\n    Assert.notNull(type, \"Type must not be null\");\r\n    return getRequiredAttributeValue(attributeName, type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnum(String,Class<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnum(String,Class<E>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnumArray(String,Class<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic <E extends Enum<E>> E[] getEnumArray(String attributeName, Class<E> type) {\r\n    Assert.notNull(type, \"Type must not be null\");\r\n    return (E[]) getRequiredAttributeValue(attributeName, type.arrayType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnumArray(String,Class<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnumArray(String,Class<E>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getEnumArray(String,Class<E>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Optional<Object> getValue(String attributeName) {\r\n    return getValue(attributeName, Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T> Optional<T> getValue(String attributeName, Class<T> type) {\r\n    return Optional.ofNullable(getAttributeValue(attributeName, type));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getValue(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getDefaultValue(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Optional<Object> getDefaultValue(String attributeName) {\r\n    return getDefaultValue(attributeName, Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#getDefaultValue(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#getDefaultValue(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#filterDefaultValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<A> filterDefaultValues() {\r\n    return filterAttributes(this::hasNonDefaultValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AbstractMergedAnnotation#filterDefaultValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#filterDefaultValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AbstractMergedAnnotation#asAnnotationAttributes(Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {\r\n    return asMap(mergedAnnotation -> new AnnotationAttributes(mergedAnnotation.getType()), adaptations);\r\n}",
    "tailType": "method_code"
  }
]