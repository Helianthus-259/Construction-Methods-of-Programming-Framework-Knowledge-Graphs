[
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInnerClass(String name, @Nullable String outerName, String innerName, int access) {\r\n    if (outerName != null) {\r\n        String className = toClassName(name);\r\n        String outerClassName = toClassName(outerName);\r\n        if (this.className.equals(className)) {\r\n            this.enclosingClassName = outerClassName;\r\n            this.independentInnerClass = ((access & Opcodes.ACC_STATIC) != 0);\r\n        } else if (this.className.equals(outerClassName)) {\r\n            this.memberClassNames.add(className);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitInnerClass(String,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {\r\n    return MergedAnnotationReadingVisitor.get(this.classLoader, getSource(), descriptor, visible, this.annotations::add);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\r\n    // Skip bridge methods and constructors - we're only interested in original user methods.\r\n    if (isBridge(access) || name.equals(\"<init>\")) {\r\n        return null;\r\n    }\r\n    return new SimpleMethodMetadataReadingVisitor(this.classLoader, this.className, access, name, descriptor, this.declaredMethods::add);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    MergedAnnotations annotations = MergedAnnotations.of(this.annotations);\r\n    this.metadata = new SimpleAnnotationMetadata(this.className, this.access, this.enclosingClassName, this.superClassName, this.independentInnerClass, this.interfaceNames, this.memberClassNames, this.declaredMethods, annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#getMetadata()",
    "headType": "method",
    "relation": "provide",
    "tail": "public SimpleAnnotationMetadata getMetadata() {\r\n    Assert.state(this.metadata != null, \"AnnotationMetadata not initialized\");\r\n    return this.metadata;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#getMetadata()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Source getSource() {\r\n    Source source = this.source;\r\n    if (source == null) {\r\n        source = new Source(this.className);\r\n        this.source = source;\r\n    }\r\n    return source;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.classreading.SimpleAnnotationMetadataReadingVisitor#toClassName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String toClassName(String name) {\r\n    return ClassUtils.convertResourcePathToClassName(name);\r\n}",
    "tailType": "method_code"
  }
]