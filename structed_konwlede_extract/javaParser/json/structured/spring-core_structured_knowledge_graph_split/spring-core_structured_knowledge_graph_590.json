[
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassVisitor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected final ClassWriter getClassWriter() {\r\n    // Cause compile / runtime errors for people who implemented the old\r\n    // interface without using @Override\r\n    throw new UnsupportedOperationException(\"You are calling \" + \"getClassWriter, which no longer exists in this cglib version.\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultGeneratorStrategy#getClassWriter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "protected byte[] transform(byte[] b) throws Exception {\r\n    return b;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(ClassGenerator)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected ClassGenerator transform(ClassGenerator cg) throws Exception {\r\n    return cg;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultGeneratorStrategy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultGeneratorStrategy#transform(ClassGenerator)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.core.DefaultNamingPolicy",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003,2004 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cglib.core;\n\n/**\n * The default policy used by {@link AbstractClassGenerator}.\n * Generates names such as\n * <p><code>org.springframework.cglib.Foo$$EnhancerByCGLIB$$38272841</code><p>\n * This is composed of a prefix based on the name of the superclass, a fixed\n * string incorporating the CGLIB class responsible for generation, and a\n * hashcode derived from the parameters used to create the object. If the same\n * name has been previously been used in the same <code>ClassLoader</code>, a\n * suffix is added to ensure uniqueness.\n */\npublic class DefaultNamingPolicy implements NamingPolicy {\n    public static final DefaultNamingPolicy INSTANCE = new DefaultNamingPolicy();\n\n    /**\n     * This allows to test collisions of {@code key.hashCode()}.\n     */\n    private static final boolean STRESS_HASH_CODE = Boolean.getBoolean(\"org.springframework.cglib.test.stressHashCodes\");\n\n    @Override\n    public String getClassName(String prefix, String source, Object key, Predicate names) {\n        if (prefix == null) {\n            prefix = \"org.springframework.cglib.empty.Object\";\n        } else if (prefix.startsWith(\"java\")) {\n            prefix = \"$\" + prefix;\n        }\n        String base =\n            prefix + \"$$\" +\n            source.substring(source.lastIndexOf('.') + 1) +\n            getTag() + \"$$\" +\n            Integer.toHexString(STRESS_HASH_CODE ? 0 : key.hashCode());\n        String attempt = base;\n        int index = 2;\n        while (names.evaluate(attempt)) {\n\t\t\tattempt = base + \"_\" + index++;\n\t\t}\n        return attempt;\n    }\n\n    /**\n     * Returns a string which is incorporated into every generated class name.\n     * By default returns \"ByCGLIB\"\n     */\n    protected String getTag() {\n        return \"ByCGLIB\";\n    }\n\n    @Override\n    public int hashCode() {\n        return getTag().hashCode();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return (o instanceof DefaultNamingPolicy defaultNamingPolicy) &&\n                defaultNamingPolicy.getTag().equals(getTag());\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.DefaultNamingPolicy#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultNamingPolicy",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.DefaultNamingPolicy#STRESS_HASH_CODE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#STRESS_HASH_CODE",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getClassName(String prefix, String source, Object key, Predicate names) {\r\n    if (prefix == null) {\r\n        prefix = \"org.springframework.cglib.empty.Object\";\r\n    } else if (prefix.startsWith(\"java\")) {\r\n        prefix = \"$\" + prefix;\r\n    }\r\n    String base = prefix + \"$$\" + source.substring(source.lastIndexOf('.') + 1) + getTag() + \"$$\" + Integer.toHexString(STRESS_HASH_CODE ? 0 : key.hashCode());\r\n    String attempt = base;\r\n    int index = 2;\r\n    while (names.evaluate(attempt)) {\r\n        attempt = base + \"_\" + index++;\r\n    }\r\n    return attempt;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#getClassName(String,String,Object,Predicate)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a string which is incorporated into every generated class name.\r\n * By default returns \"ByCGLIB\"\r\n */\r\nprotected String getTag() {\r\n    return \"ByCGLIB\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.DefaultNamingPolicy#getTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.DefaultNamingPolicy#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return getTag().hashCode();\r\n}",
    "tailType": "method_code"
  }
]