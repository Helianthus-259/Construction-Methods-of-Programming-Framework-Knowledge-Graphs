[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterListNoParamTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterListNoParamTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterArray() throws Exception {\r\n    MethodParameter methodParameter = new MethodParameter(getClass().getMethod(\"testParameterArray\", Integer[].class), 0);\r\n    TypeDescriptor desc = new TypeDescriptor(methodParameter);\r\n    assertThat(desc.getType()).isEqualTo(Integer[].class);\r\n    assertThat(desc.getObjectType()).isEqualTo(Integer[].class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.lang.Integer[]\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.lang.Integer[]\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isArray()).isTrue();\r\n    assertThat(desc.getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getElementTypeDescriptor()).isEqualTo(TypeDescriptor.valueOf(Integer.class));\r\n    assertThat(desc.isMap()).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterMap() throws Exception {\r\n    MethodParameter methodParameter = new MethodParameter(getClass().getMethod(\"testParameterMap\", Map.class), 0);\r\n    TypeDescriptor desc = new TypeDescriptor(methodParameter);\r\n    assertThat(desc.getType()).isEqualTo(Map.class);\r\n    assertThat(desc.getObjectType()).isEqualTo(Map.class);\r\n    assertThat(desc.getName()).isEqualTo(\"java.util.Map\");\r\n    assertThat(desc.toString()).isEqualTo(\"java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(desc.isPrimitive()).isFalse();\r\n    assertThat(desc.getAnnotations()).isEmpty();\r\n    assertThat(desc.isCollection()).isFalse();\r\n    assertThat(desc.isArray()).isFalse();\r\n    assertThat(desc.isMap()).isTrue();\r\n    assertThat(desc.getMapValueTypeDescriptor()).isEqualTo(TypeDescriptor.nested(methodParameter, 1));\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor()).isEqualTo(TypeDescriptor.nested(methodParameter, 2));\r\n    assertThat(desc.getMapKeyTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parameterAnnotated() throws Exception {\r\n    TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"testAnnotatedMethod\", String.class), 0));\r\n    assertThat(t1.getType()).isEqualTo(String.class);\r\n    assertThat(t1.getAnnotations()).hasSize(1);\r\n    assertThat(t1.getAnnotation(ParameterAnnotation.class)).isNotNull();\r\n    assertThat(t1.hasAnnotation(ParameterAnnotation.class)).isTrue();\r\n    assertThat(t1.getAnnotation(ParameterAnnotation.class).value()).isEqualTo(123);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#parameterAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#parameterAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationsReturnsClonedArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAnnotationsReturnsClonedArray() throws Exception {\r\n    TypeDescriptor t = new TypeDescriptor(new MethodParameter(getClass().getMethod(\"testAnnotatedMethod\", String.class), 0));\r\n    t.getAnnotations()[0] = null;\r\n    assertThat(t.getAnnotations()[0]).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationsReturnsClonedArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#getAnnotationsReturnsClonedArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyComplex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertyComplex() throws Exception {\r\n    Property property = new Property(getClass(), getClass().getMethod(\"getComplexProperty\"), getClass().getMethod(\"setComplexProperty\", Map.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(desc.getMapValueTypeDescriptor().getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#propertyComplex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyComplex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertyGenericType() throws Exception {\r\n    GenericType<Integer> genericBean = new IntegerType();\r\n    Property property = new Property(getClass(), genericBean.getClass().getMethod(\"getProperty\"), genericBean.getClass().getMethod(\"setProperty\", Integer.class));\r\n    TypeDescriptor desc = new TypeDescriptor(property);\r\n    assertThat(desc.getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#propertyGenericType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]