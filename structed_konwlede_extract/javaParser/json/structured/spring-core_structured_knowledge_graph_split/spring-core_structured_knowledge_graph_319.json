[
  {
    "head": "org.springframework.util.DefaultValueTests#placeholdersWithExactMatchAreConsidered(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest(name = \"{0} -> {1}\")\r\n@MethodSource(\"exactMatchPlaceholders\")\r\nvoid placeholdersWithExactMatchAreConsidered(String text, String expected) {\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"prefix://my-service\", \"example-service\");\r\n    properties.setProperty(\"px\", \"prefix\");\r\n    properties.setProperty(\"p1\", \"${prefix://my-service}\");\r\n    assertThat(this.helper.replacePlaceholders(text, properties)).isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultValueTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultValueTests#placeholdersWithExactMatchAreConsidered(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DefaultValueTests#placeholdersWithExactMatchAreConsidered(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultValueTests#placeholdersWithExactMatchAreConsidered(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DefaultValueTests#exactMatchPlaceholders()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> exactMatchPlaceholders() {\r\n    return Stream.of(Arguments.of(\"${prefix://my-service}\", \"example-service\"), Arguments.of(\"${p1}\", \"example-service\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DefaultValueTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DefaultValueTests#exactMatchPlaceholders()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PublicInterface",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PublicInterface",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\n/**\n * This is intentionally a top-level public interface.\n */\npublic interface PublicInterface {\n\n\tString getText();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PublicInterface#getText()",
    "headType": "method",
    "relation": "provide",
    "tail": "String getText();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PublicInterface",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PublicInterface#getText()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PublicSuperclass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.PublicSuperclass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\n/**\n * This is intentionally a top-level public class.\n */\npublic class PublicSuperclass {\n\n\tpublic String getMessage() {\n\t\treturn \"goodbye\";\n\t}\n\n\tpublic int getNumber() {\n\t\treturn 1;\n\t}\n\n\tpublic String greet(String name) {\n\t\treturn \"Super, \" + name;\n\t}\n\n\tpublic int process(int num) {\n\t\treturn num + 1;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.PublicSuperclass#getMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String getMessage() {\r\n    return \"goodbye\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PublicSuperclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PublicSuperclass#getMessage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PublicSuperclass#getNumber()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int getNumber() {\r\n    return 1;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PublicSuperclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PublicSuperclass#getNumber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PublicSuperclass#greet(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public String greet(String name) {\r\n    return \"Super, \" + name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PublicSuperclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PublicSuperclass#greet(String)",
    "tailType": "method"
  }
]