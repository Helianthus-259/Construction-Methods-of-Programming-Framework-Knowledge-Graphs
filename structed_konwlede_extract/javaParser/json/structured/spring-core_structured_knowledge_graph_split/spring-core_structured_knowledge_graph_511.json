[
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addType(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a type in the type table of this symbol table. Does nothing if the type table already\r\n * contains a similar type.\r\n *\r\n * @param value an internal class name.\r\n * @return the index of a new or already existing type Symbol with the given value.\r\n */\r\nint addType(final String value) {\r\n    int hashCode = hash(Symbol.TYPE_TAG, value);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {\r\n            return entry.index;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    return addTypeInternal(new Entry(typeCount, Symbol.TYPE_TAG, value, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addType(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds an uninitialized type in the type table of this symbol table. Does nothing if the type\r\n * table already contains a similar type.\r\n *\r\n * @param value an internal class name.\r\n * @param bytecodeOffset the bytecode offset of the NEW instruction that created this\r\n *     uninitialized type value.\r\n * @return the index of a new or already existing type #@link Symbol} with the given value.\r\n */\r\nint addUninitializedType(final String value, final int bytecodeOffset) {\r\n    int hashCode = hash(Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.UNINITIALIZED_TYPE_TAG && entry.hashCode == hashCode && entry.data == bytecodeOffset && entry.value.equals(value)) {\r\n            return entry.index;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    return addTypeInternal(new Entry(typeCount, Symbol.UNINITIALIZED_TYPE_TAG, value, bytecodeOffset, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addUninitializedType(String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a \"forward uninitialized\" type in the type table of this symbol table. Does nothing if the\r\n * type table already contains a similar type.\r\n *\r\n * @param value an internal class name.\r\n * @param label the label of the NEW instruction that created this uninitialized type value. If\r\n *     the label is resolved, use the {@link #addUninitializedType} method instead.\r\n * @return the index of a new or already existing type {@link Symbol} with the given value.\r\n */\r\nint addForwardUninitializedType(final String value, final Label label) {\r\n    int labelIndex = getOrAddLabelEntry(label).index;\r\n    int hashCode = hash(Symbol.FORWARD_UNINITIALIZED_TYPE_TAG, value, labelIndex);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.FORWARD_UNINITIALIZED_TYPE_TAG && entry.hashCode == hashCode && entry.data == labelIndex && entry.value.equals(value)) {\r\n            return entry.index;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    return addTypeInternal(new Entry(typeCount, Symbol.FORWARD_UNINITIALIZED_TYPE_TAG, value, labelIndex, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addForwardUninitializedType(String,Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a merged type in the type table of this symbol table. Does nothing if the type table\r\n * already contains a similar type.\r\n *\r\n * @param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\r\n *     table.\r\n * @param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\r\n *     table.\r\n * @return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\r\n *     corresponding to the common super class of the given types.\r\n */\r\nint addMergedType(final int typeTableIndex1, final int typeTableIndex2) {\r\n    long data = typeTableIndex1 < typeTableIndex2 ? typeTableIndex1 | (((long) typeTableIndex2) << 32) : typeTableIndex2 | (((long) typeTableIndex1) << 32);\r\n    int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) {\r\n            return entry.info;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    String type1 = typeTable[typeTableIndex1].value;\r\n    String type2 = typeTable[typeTableIndex2].value;\r\n    int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2));\r\n    put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex;\r\n    return commonSuperTypeIndex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addMergedType(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds the given type Symbol to {@link #typeTable}.\r\n *\r\n * @param entry a {@link Symbol#TYPE_TAG} or {@link Symbol#UNINITIALIZED_TYPE_TAG} type symbol.\r\n *     The index of this Symbol must be equal to the current value of {@link #typeCount}.\r\n * @return the index in {@link #typeTable} where the given type was added, which is also equal to\r\n *     entry's index by hypothesis.\r\n */\r\nprivate int addTypeInternal(final Entry entry) {\r\n    if (typeTable == null) {\r\n        typeTable = new Entry[16];\r\n    }\r\n    if (typeCount == typeTable.length) {\r\n        Entry[] newTypeTable = new Entry[2 * typeTable.length];\r\n        System.arraycopy(typeTable, 0, newTypeTable, 0, typeTable.length);\r\n        typeTable = newTypeTable;\r\n    }\r\n    typeTable[typeCount++] = entry;\r\n    return put(entry).index;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addTypeInternal(Entry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the {@link LabelEntry} corresponding to the given label. Creates a new one if there is\r\n * no such entry.\r\n *\r\n * @param label the {@link Label} of a NEW instruction which created an uninitialized type, in the\r\n *     case where this NEW instruction is after the &lt;init&gt; constructor call (in bytecode\r\n *     offset order). See {@link Symbol#FORWARD_UNINITIALIZED_TYPE_TAG}.\r\n * @return the {@link LabelEntry} corresponding to {@code label}.\r\n */\r\nprivate LabelEntry getOrAddLabelEntry(final Label label) {\r\n    if (labelEntries == null) {\r\n        labelEntries = new LabelEntry[16];\r\n        labelTable = new LabelEntry[16];\r\n    }\r\n    int hashCode = System.identityHashCode(label);\r\n    LabelEntry labelEntry = labelEntries[hashCode % labelEntries.length];\r\n    while (labelEntry != null && labelEntry.label != label) {\r\n        labelEntry = labelEntry.next;\r\n    }\r\n    if (labelEntry != null) {\r\n        return labelEntry;\r\n    }\r\n    if (labelCount > (labelEntries.length * 3) / 4) {\r\n        int currentCapacity = labelEntries.length;\r\n        int newCapacity = currentCapacity * 2 + 1;\r\n        LabelEntry[] newLabelEntries = new LabelEntry[newCapacity];\r\n        for (int i = currentCapacity - 1; i >= 0; --i) {\r\n            LabelEntry currentEntry = labelEntries[i];\r\n            while (currentEntry != null) {\r\n                int newCurrentEntryIndex = System.identityHashCode(currentEntry.label) % newCapacity;\r\n                LabelEntry nextEntry = currentEntry.next;\r\n                currentEntry.next = newLabelEntries[newCurrentEntryIndex];\r\n                newLabelEntries[newCurrentEntryIndex] = currentEntry;\r\n                currentEntry = nextEntry;\r\n            }\r\n        }\r\n        labelEntries = newLabelEntries;\r\n    }\r\n    if (labelCount == labelTable.length) {\r\n        LabelEntry[] newLabelTable = new LabelEntry[2 * labelTable.length];\r\n        System.arraycopy(labelTable, 0, newLabelTable, 0, labelTable.length);\r\n        labelTable = newLabelTable;\r\n    }\r\n    labelEntry = new LabelEntry(labelCount, label);\r\n    int index = hashCode % labelEntries.length;\r\n    labelEntry.next = labelEntries[index];\r\n    labelEntries[index] = labelEntry;\r\n    labelTable[labelCount++] = labelEntry;\r\n    return labelEntry;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#getOrAddLabelEntry(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#hash(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Static helper methods to compute hash codes.\r\n// -----------------------------------------------------------------------------------------------\r\nprivate static int hash(final int tag, final int value) {\r\n    return 0x7FFFFFFF & (tag + value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#hash(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#hash(int,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int hash(final int tag, final long value) {\r\n    return 0x7FFFFFFF & (tag + (int) value + (int) (value >>> 32));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#hash(int,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#hash(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int hash(final int tag, final String value) {\r\n    return 0x7FFFFFFF & (tag + value.hashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#hash(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#hash(int,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static int hash(final int tag, final String value1, final int value2) {\r\n    return 0x7FFFFFFF & (tag + value1.hashCode() + value2);\r\n}",
    "tailType": "method_code"
  }
]