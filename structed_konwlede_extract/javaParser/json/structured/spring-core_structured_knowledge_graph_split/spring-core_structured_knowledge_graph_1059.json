[
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic ClassLoader getClassLoader() {\r\n    return getResourceLoader().getClassLoader();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#setPathMatcher(PathMatcher)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the {@link PathMatcher} implementation to use for this\r\n * resource pattern resolver.\r\n * <p>Default is {@link AntPathMatcher}.\r\n * @see AntPathMatcher\r\n */\r\npublic void setPathMatcher(PathMatcher pathMatcher) {\r\n    Assert.notNull(pathMatcher, \"PathMatcher must not be null\");\r\n    this.pathMatcher = pathMatcher;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#setPathMatcher(PathMatcher)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getPathMatcher()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link PathMatcher} that this resource pattern resolver uses.\r\n */\r\npublic PathMatcher getPathMatcher() {\r\n    return this.pathMatcher;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getPathMatcher()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResource(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource getResource(String location) {\r\n    return getResourceLoader().getResource(location);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResource(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResource(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource[] getResources(String locationPattern) throws IOException {\r\n    Assert.notNull(locationPattern, \"Location pattern must not be null\");\r\n    if (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {\r\n        // a class path resource (multiple resources for same name possible)\r\n        String locationPatternWithoutPrefix = locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length());\r\n        // Search the module path first.\r\n        Set<Resource> resources = findAllModulePathResources(locationPatternWithoutPrefix);\r\n        // Search the class path next.\r\n        if (getPathMatcher().isPattern(locationPatternWithoutPrefix)) {\r\n            // a class path resource pattern\r\n            Collections.addAll(resources, findPathMatchingResources(locationPattern));\r\n        } else {\r\n            // all class path resources with the given name\r\n            Collections.addAll(resources, findAllClassPathResources(locationPatternWithoutPrefix));\r\n        }\r\n        return resources.toArray(new Resource[0]);\r\n    } else {\r\n        // Generally only look for a pattern after a prefix here,\r\n        // and on Tomcat only after the \"*/\" separator for its \"war:\" protocol.\r\n        int prefixEnd = (locationPattern.startsWith(\"war:\") ? locationPattern.indexOf(\"*/\") + 1 : locationPattern.indexOf(':') + 1);\r\n        if (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {\r\n            // a file pattern\r\n            return findPathMatchingResources(locationPattern);\r\n        } else {\r\n            // a single resource with the given name\r\n            return new Resource[] { getResourceLoader().getResource(locationPattern) };\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#clearCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Clear the local resource cache, removing all cached classpath/jar structures.\r\n * @since 6.2\r\n */\r\npublic void clearCache() {\r\n    this.rootDirCache.clear();\r\n    this.jarEntriesCache.clear();\r\n    this.manifestEntriesCache = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#clearCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#findAllClassPathResources(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find all class location resources with the given location via the ClassLoader.\r\n * <p>Delegates to {@link #doFindAllClassPathResources(String)}.\r\n * @param location the absolute path within the class path\r\n * @return the result as Resource array\r\n * @throws IOException in case of I/O errors\r\n * @see java.lang.ClassLoader#getResources\r\n * @see #convertClassLoaderURL\r\n */\r\nprotected Resource[] findAllClassPathResources(String location) throws IOException {\r\n    String path = stripLeadingSlash(location);\r\n    Set<Resource> result = doFindAllClassPathResources(path);\r\n    if (logger.isTraceEnabled()) {\r\n        logger.trace(\"Resolved class path location [\" + path + \"] to resources \" + result);\r\n    }\r\n    return result.toArray(new Resource[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#findAllClassPathResources(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindAllClassPathResources(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find all class path resources with the given path via the configured\r\n * {@link #getClassLoader() ClassLoader}.\r\n * <p>Called by {@link #findAllClassPathResources(String)}.\r\n * @param path the absolute path within the class path (never a leading slash)\r\n * @return a mutable Set of matching Resource instances\r\n * @since 4.1.1\r\n */\r\nprotected Set<Resource> doFindAllClassPathResources(String path) throws IOException {\r\n    Set<Resource> result = new LinkedHashSet<>(16);\r\n    ClassLoader cl = getClassLoader();\r\n    Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path));\r\n    while (resourceUrls.hasMoreElements()) {\r\n        URL url = resourceUrls.nextElement();\r\n        result.add(convertClassLoaderURL(url));\r\n    }\r\n    if (!StringUtils.hasLength(path)) {\r\n        // The above result is likely to be incomplete, i.e. only containing file system references.\r\n        // We need to have pointers to each of the jar files on the class path as well...\r\n        addAllClassLoaderJarRoots(cl, result);\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PathMatchingResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindAllClassPathResources(String)",
    "tailType": "method"
  }
]