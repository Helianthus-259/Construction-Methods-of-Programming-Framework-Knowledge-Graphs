[
  {
    "head": "org.springframework.asm.MethodWriter#visitFrame(int,int,Object[],int,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitInsn(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInsn(final int opcode) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    code.putByte(opcode);\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, 0, null, null);\r\n        } else {\r\n            int size = relativeStackSize + STACK_SIZE_DELTA[opcode];\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n        if ((opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) || opcode == Opcodes.ATHROW) {\r\n            endCurrentBasicBlockWithNoSuccessor();\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitInsn(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitInsn(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitIntInsn(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitIntInsn(final int opcode, final int operand) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    if (opcode == Opcodes.SIPUSH) {\r\n        code.put12(opcode, operand);\r\n    } else {\r\n        // BIPUSH or NEWARRAY\r\n        code.put11(opcode, operand);\r\n    }\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, operand, null, null);\r\n        } else if (opcode != Opcodes.NEWARRAY) {\r\n            // The stack size delta is 1 for BIPUSH or SIPUSH, and 0 for NEWARRAY.\r\n            int size = relativeStackSize + 1;\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitIntInsn(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitIntInsn(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitVarInsn(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitVarInsn(final int opcode, final int varIndex) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    if (varIndex < 4 && opcode != Opcodes.RET) {\r\n        int optimizedOpcode;\r\n        if (opcode < Opcodes.ISTORE) {\r\n            optimizedOpcode = Constants.ILOAD_0 + ((opcode - Opcodes.ILOAD) << 2) + varIndex;\r\n        } else {\r\n            optimizedOpcode = Constants.ISTORE_0 + ((opcode - Opcodes.ISTORE) << 2) + varIndex;\r\n        }\r\n        code.putByte(optimizedOpcode);\r\n    } else if (varIndex >= 256) {\r\n        code.putByte(Constants.WIDE).put12(opcode, varIndex);\r\n    } else {\r\n        code.put11(opcode, varIndex);\r\n    }\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, varIndex, null, null);\r\n        } else {\r\n            if (opcode == Opcodes.RET) {\r\n                // No stack size delta.\r\n                currentBasicBlock.flags |= Label.FLAG_SUBROUTINE_END;\r\n                currentBasicBlock.outputStackSize = (short) relativeStackSize;\r\n                endCurrentBasicBlockWithNoSuccessor();\r\n            } else {\r\n                // xLOAD or xSTORE\r\n                int size = relativeStackSize + STACK_SIZE_DELTA[opcode];\r\n                if (size > maxRelativeStackSize) {\r\n                    maxRelativeStackSize = size;\r\n                }\r\n                relativeStackSize = size;\r\n            }\r\n        }\r\n    }\r\n    if (compute != COMPUTE_NOTHING) {\r\n        int currentMaxLocals;\r\n        if (opcode == Opcodes.LLOAD || opcode == Opcodes.DLOAD || opcode == Opcodes.LSTORE || opcode == Opcodes.DSTORE) {\r\n            currentMaxLocals = varIndex + 2;\r\n        } else {\r\n            currentMaxLocals = varIndex + 1;\r\n        }\r\n        if (currentMaxLocals > maxLocals) {\r\n            maxLocals = currentMaxLocals;\r\n        }\r\n    }\r\n    if (opcode >= Opcodes.ISTORE && compute == COMPUTE_ALL_FRAMES && firstHandler != null) {\r\n        // If there are exception handler blocks, each instruction within a handler range is, in\r\n        // theory, a basic block (since execution can jump from this instruction to the exception\r\n        // handler). As a consequence, the local variable types at the beginning of the handler\r\n        // block should be the merge of the local variable types at all the instructions within the\r\n        // handler range. However, instead of creating a basic block for each instruction, we can\r\n        // get the same result in a more efficient way. Namely, by starting a new basic block after\r\n        // each xSTORE instruction, which is what we do here.\r\n        visitLabel(new Label());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitVarInsn(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitVarInsn(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTypeInsn(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitTypeInsn(final int opcode, final String type) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    Symbol typeSymbol = symbolTable.addConstantClass(type);\r\n    code.put12(opcode, typeSymbol.index);\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, lastBytecodeOffset, typeSymbol, symbolTable);\r\n        } else if (opcode == Opcodes.NEW) {\r\n            // The stack size delta is 1 for NEW, and 0 for ANEWARRAY, CHECKCAST, or INSTANCEOF.\r\n            int size = relativeStackSize + 1;\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitTypeInsn(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitTypeInsn(int,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitFieldInsn(int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitFieldInsn(final int opcode, final String owner, final String name, final String descriptor) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    Symbol fieldrefSymbol = symbolTable.addConstantFieldref(owner, name, descriptor);\r\n    code.put12(opcode, fieldrefSymbol.index);\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, 0, fieldrefSymbol, symbolTable);\r\n        } else {\r\n            int size;\r\n            char firstDescChar = descriptor.charAt(0);\r\n            switch(opcode) {\r\n                case Opcodes.GETSTATIC:\r\n                    size = relativeStackSize + (firstDescChar == 'D' || firstDescChar == 'J' ? 2 : 1);\r\n                    break;\r\n                case Opcodes.PUTSTATIC:\r\n                    size = relativeStackSize + (firstDescChar == 'D' || firstDescChar == 'J' ? -2 : -1);\r\n                    break;\r\n                case Opcodes.GETFIELD:\r\n                    size = relativeStackSize + (firstDescChar == 'D' || firstDescChar == 'J' ? 1 : 0);\r\n                    break;\r\n                case Opcodes.PUTFIELD:\r\n                default:\r\n                    size = relativeStackSize + (firstDescChar == 'D' || firstDescChar == 'J' ? -3 : -2);\r\n                    break;\r\n            }\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitFieldInsn(int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitFieldInsn(int,String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitMethodInsn(int,String,String,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitMethodInsn(final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    Symbol methodrefSymbol = symbolTable.addConstantMethodref(owner, name, descriptor, isInterface);\r\n    if (opcode == Opcodes.INVOKEINTERFACE) {\r\n        code.put12(Opcodes.INVOKEINTERFACE, methodrefSymbol.index).put11(methodrefSymbol.getArgumentsAndReturnSizes() >> 2, 0);\r\n    } else {\r\n        code.put12(opcode, methodrefSymbol.index);\r\n    }\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(opcode, 0, methodrefSymbol, symbolTable);\r\n        } else {\r\n            int argumentsAndReturnSize = methodrefSymbol.getArgumentsAndReturnSizes();\r\n            int stackSizeDelta = (argumentsAndReturnSize & 3) - (argumentsAndReturnSize >> 2);\r\n            int size;\r\n            if (opcode == Opcodes.INVOKESTATIC) {\r\n                size = relativeStackSize + stackSizeDelta + 1;\r\n            } else {\r\n                size = relativeStackSize + stackSizeDelta;\r\n            }\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.MethodWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.MethodWriter#visitMethodInsn(int,String,String,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitMethodInsn(int,String,String,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.MethodWriter#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInvokeDynamicInsn(final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    lastBytecodeOffset = code.length;\r\n    // Add the instruction to the bytecode of the method.\r\n    Symbol invokeDynamicSymbol = symbolTable.addConstantInvokeDynamic(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments);\r\n    code.put12(Opcodes.INVOKEDYNAMIC, invokeDynamicSymbol.index);\r\n    code.putShort(0);\r\n    // If needed, update the maximum stack size and number of locals, and stack map frames.\r\n    if (currentBasicBlock != null) {\r\n        if (compute == COMPUTE_ALL_FRAMES || compute == COMPUTE_INSERTED_FRAMES) {\r\n            currentBasicBlock.frame.execute(Opcodes.INVOKEDYNAMIC, 0, invokeDynamicSymbol, symbolTable);\r\n        } else {\r\n            int argumentsAndReturnSize = invokeDynamicSymbol.getArgumentsAndReturnSizes();\r\n            int stackSizeDelta = (argumentsAndReturnSize & 3) - (argumentsAndReturnSize >> 2) + 1;\r\n            int size = relativeStackSize + stackSizeDelta;\r\n            if (size > maxRelativeStackSize) {\r\n                maxRelativeStackSize = size;\r\n            }\r\n            relativeStackSize = size;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  }
]