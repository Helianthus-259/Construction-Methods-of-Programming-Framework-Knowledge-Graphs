[
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"primitivesAndPrimitivesArray\")\r\nvoid primitivesAreHandledProperly(TypeReference typeReference, String expectedName) {\r\n    assertThat(typeReference.getName()).isEqualTo(expectedName);\r\n    assertThat(typeReference.getCanonicalName()).isEqualTo(expectedName);\r\n    assertThat(typeReference.getPackageName()).isEqualTo(\"java.lang\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAreHandledProperly(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAndPrimitivesArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> primitivesAndPrimitivesArray() {\r\n    return Stream.of(Arguments.of(SimpleTypeReference.of(\"boolean\"), \"boolean\"), Arguments.of(SimpleTypeReference.of(\"byte\"), \"byte\"), Arguments.of(SimpleTypeReference.of(\"short\"), \"short\"), Arguments.of(SimpleTypeReference.of(\"int\"), \"int\"), Arguments.of(SimpleTypeReference.of(\"long\"), \"long\"), Arguments.of(SimpleTypeReference.of(\"char\"), \"char\"), Arguments.of(SimpleTypeReference.of(\"float\"), \"float\"), Arguments.of(SimpleTypeReference.of(\"double\"), \"double\"), Arguments.of(SimpleTypeReference.of(\"boolean[]\"), \"boolean[]\"), Arguments.of(SimpleTypeReference.of(\"byte[]\"), \"byte[]\"), Arguments.of(SimpleTypeReference.of(\"short[]\"), \"short[]\"), Arguments.of(SimpleTypeReference.of(\"int[]\"), \"int[]\"), Arguments.of(SimpleTypeReference.of(\"long[]\"), \"long[]\"), Arguments.of(SimpleTypeReference.of(\"char[]\"), \"char[]\"), Arguments.of(SimpleTypeReference.of(\"float[]\"), \"float[]\"), Arguments.of(SimpleTypeReference.of(\"double[]\"), \"double[]\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#primitivesAndPrimitivesArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"arrays\")\r\nvoid arraysHaveSuitableReflectionTargetName(TypeReference typeReference, String expectedName) {\r\n    assertThat(typeReference.getName()).isEqualTo(expectedName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arraysHaveSuitableReflectionTargetName(TypeReference,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#arrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> arrays() {\r\n    return Stream.of(Arguments.of(SimpleTypeReference.of(\"java.lang.Object[]\"), \"java.lang.Object[]\"), Arguments.of(SimpleTypeReference.of(\"java.lang.Integer[]\"), \"java.lang.Integer[]\"), Arguments.of(SimpleTypeReference.of(\"com.example.Test[]\"), \"com.example.Test[]\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#arrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nameOfCglibProxy() {\r\n    TypeReference reference = TypeReference.of(\"com.example.Test$$SpringCGLIB$$0\");\r\n    assertThat(reference.getSimpleName()).isEqualTo(\"Test$$SpringCGLIB$$0\");\r\n    assertThat(reference.getEnclosingType()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfCglibProxy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nameOfNestedCglibProxy() {\r\n    TypeReference reference = TypeReference.of(\"com.example.Test$Another$$SpringCGLIB$$0\");\r\n    assertThat(reference.getSimpleName()).isEqualTo(\"Another$$SpringCGLIB$$0\");\r\n    assertThat(reference.getEnclosingType()).isNotNull();\r\n    assertThat(reference.getEnclosingType().getSimpleName()).isEqualTo(\"Test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#nameOfNestedCglibProxy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceInRootPackage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeReferenceInRootPackage() {\r\n    TypeReference type = SimpleTypeReference.of(\"MyRootClass\");\r\n    assertThat(type.getCanonicalName()).isEqualTo(\"MyRootClass\");\r\n    assertThat(type.getPackageName()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests#typeReferenceInRootPackage()",
    "tailType": "method"
  }
]