[
  {
    "head": "org.springframework.core.annotation.WithMultipleTestAnnotation",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link MergedAnnotationPredicates}.\n *\n * @author Phillip Webb\n */\nclass MergedAnnotationPredicatesTests {\n\n\t@Test\n\tvoid typeInStringArrayWhenNameMatchesAccepts() {\n\t\tMergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(\n\t\t\t\tWithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(\n\t\t\t\tTestAnnotation.class.getName())).accepts(annotation);\n\t}\n\n\t@Test\n\tvoid typeInStringArrayWhenNameDoesNotMatchRejects() {\n\t\tMergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(\n\t\t\t\tWithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(\n\t\t\t\tMissingAnnotation.class.getName())).rejects(annotation);\n\t}\n\n\t@Test\n\tvoid typeInClassArrayWhenNameMatchesAccepts() {\n\t\tMergedAnnotation<TestAnnotation> annotation =\n\t\t\t\tMergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(TestAnnotation.class)).accepts(annotation);\n\t}\n\n\t@Test\n\tvoid typeInClassArrayWhenNameDoesNotMatchRejects() {\n\t\tMergedAnnotation<TestAnnotation> annotation =\n\t\t\t\tMergedAnnotations.from(WithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(MissingAnnotation.class)).rejects(annotation);\n\t}\n\n\t@Test\n\tvoid typeInCollectionWhenMatchesStringInCollectionAccepts() {\n\t\tMergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(\n\t\t\t\tWithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(\n\t\t\t\tCollections.singleton(TestAnnotation.class.getName()))).accepts(annotation);\n\t}\n\n\t@Test\n\tvoid typeInCollectionWhenMatchesClassInCollectionAccepts() {\n\t\tMergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(\n\t\t\t\tWithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(\n\t\t\t\tCollections.singleton(TestAnnotation.class))).accepts(annotation);\n\t}\n\n\t@Test\n\tvoid typeInCollectionWhenDoesNotMatchAnyRejects() {\n\t\tMergedAnnotation<TestAnnotation> annotation = MergedAnnotations.from(\n\t\t\t\tWithTestAnnotation.class).get(TestAnnotation.class);\n\t\tassertThat(MergedAnnotationPredicates.typeIn(Arrays.asList(\n\t\t\t\tMissingAnnotation.class.getName(), MissingAnnotation.class))).rejects(annotation);\n\t}\n\n\t@Test\n\tvoid firstRunOfAcceptsOnlyFirstRun() {\n\t\tList<MergedAnnotation<TestAnnotation>> filtered = MergedAnnotations.from(\n\t\t\t\tWithMultipleTestAnnotation.class).stream(TestAnnotation.class).filter(\n\t\t\t\t\t\tMergedAnnotationPredicates.firstRunOf(\n\t\t\t\t\t\t\t\tthis::firstCharOfValue)).toList();\n\t\tassertThat(filtered.stream().map(\n\t\t\t\tannotation -> annotation.getString(\"value\"))).containsExactly(\"a1\", \"a2\", \"a3\");\n\t}\n\n\t@Test\n\tvoid firstRunOfWhenValueExtractorIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tMergedAnnotationPredicates.firstRunOf(null));\n\t}\n\n\t@Test\n\tvoid uniqueAcceptsUniquely() {\n\t\tList<MergedAnnotation<TestAnnotation>> filtered = MergedAnnotations.from(\n\t\t\t\tWithMultipleTestAnnotation.class).stream(TestAnnotation.class).filter(\n\t\t\t\t\t\tMergedAnnotationPredicates.unique(\n\t\t\t\t\t\t\t\tthis::firstCharOfValue)).toList();\n\t\tassertThat(filtered.stream().map(\n\t\t\t\tannotation -> annotation.getString(\"value\"))).containsExactly(\"a1\", \"b1\", \"c1\");\n\t}\n\n\t@Test\n\tvoid uniqueWhenKeyExtractorIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tMergedAnnotationPredicates.unique(null));\n\t}\n\n\tprivate char firstCharOfValue(MergedAnnotation<TestAnnotation> annotation) {\n\t\treturn annotation.getString(\"value\").charAt(0);\n\t}\n\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(TestAnnotations.class)\n\t@interface TestAnnotation {\n\n\t\tString value() default \"\";\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotations {\n\n\t\tTestAnnotation[] value();\n\t}\n\n\t@interface MissingAnnotation {\n\t}\n\n\t@TestAnnotation(\"test\")\n\tstatic class WithTestAnnotation {\n\t}\n\n\t@TestAnnotation(\"a1\")\n\t@TestAnnotation(\"a2\")\n\t@TestAnnotation(\"a3\")\n\t@TestAnnotation(\"b1\")\n\t@TestAnnotation(\"b2\")\n\t@TestAnnotation(\"b3\")\n\t@TestAnnotation(\"c1\")\n\t@TestAnnotation(\"c2\")\n\t@TestAnnotation(\"c3\")\n\tstatic class WithMultipleTestAnnotation {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Spliterator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link MergedAnnotationsCollection}.\n *\n * @author Phillip Webb\n */\nclass MergedAnnotationsCollectionTests {\n\n\t@Test\n\tvoid ofWhenDirectAnnotationsIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(\n\t\t\t\t() -> MergedAnnotationsCollection.of(null)).withMessage(\n\t\t\t\t\t\t\"Annotations must not be null\");\n\t}\n\n\t@Test\n\tvoid ofWhenEmptyReturnsSharedNoneInstance() {\n\t\tMergedAnnotations annotations = MergedAnnotationsCollection.of(new ArrayList<>());\n\t\tassertThat(annotations).isSameAs(TypeMappedAnnotations.NONE);\n\t}\n\n\t@Test\n\tvoid createWhenAnnotationIsNotDirectlyPresentThrowsException() {\n\t\tMergedAnnotation<?> annotation = mock();\n\t\tgiven(annotation.isDirectlyPresent()).willReturn(false);\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tMergedAnnotationsCollection.of(Collections.singleton(annotation)))\n\t\t\t.withMessage(\"Annotation must be directly present\");\n\t}\n\n\t@Test\n\tvoid createWhenAnnotationAggregateIndexIsNotZeroThrowsException() {\n\t\tMergedAnnotation<?> annotation = mock();\n\t\tgiven(annotation.isDirectlyPresent()).willReturn(true);\n\t\tgiven(annotation.getAggregateIndex()).willReturn(1);\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tMergedAnnotationsCollection.of(Collections.singleton(annotation)))\n\t\t\t.withMessage(\"Annotation must have aggregate index of zero\");\n\t}\n\n\t@Test\n\tvoid iterateIteratesInCorrectOrder() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tList<Class<?>> types = new ArrayList<>();\n\t\tfor (MergedAnnotation<?> annotation : annotations) {\n\t\t\ttypes.add(annotation.getType());\n\t\t}\n\t\tassertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class,\n\t\t\t\tMeta2.class, Meta11.class);\n\t}\n\n\t@Test\n\tvoid spliteratorIteratesInCorrectOrder() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tSpliterator<MergedAnnotation<Annotation>> spliterator = annotations.spliterator();\n\t\tList<Class<?>> types = new ArrayList<>();\n\t\tspliterator.forEachRemaining(annotation -> types.add(annotation.getType()));\n\t\tassertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class,\n\t\t\t\tMeta2.class, Meta11.class);\n\t}\n\n\t@Test\n\tvoid spliteratorEstimatesSize() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tSpliterator<MergedAnnotation<Annotation>> spliterator = annotations.spliterator();\n\t\tassertThat(spliterator.estimateSize()).isEqualTo(5);\n\t\tspliterator.tryAdvance(\n\t\t\t\tannotation -> assertThat(annotation.getType()).isEqualTo(Direct.class));\n\t\tassertThat(spliterator.estimateSize()).isEqualTo(4);\n\t}\n\n\t@Test\n\tvoid isPresentWhenDirectlyPresentReturnsTrue() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isPresent(Direct.class)).isTrue();\n\t\tassertThat(annotations.isPresent(Direct.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isPresentWhenMetaPresentReturnsTrue() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isPresent(Meta11.class)).isTrue();\n\t\tassertThat(annotations.isPresent(Meta11.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isPresentWhenNotPresentReturnsFalse() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isPresent(Missing.class)).isFalse();\n\t\tassertThat(annotations.isPresent(Missing.class.getName())).isFalse();\n\n\t}\n\n\t@Test\n\tvoid isDirectlyPresentWhenDirectlyPresentReturnsTrue() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isDirectlyPresent(Direct.class)).isTrue();\n\t\tassertThat(annotations.isDirectlyPresent(Direct.class.getName())).isTrue();\n\t}\n\n\t@Test\n\tvoid isDirectlyPresentWhenMetaPresentReturnsFalse() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isDirectlyPresent(Meta11.class)).isFalse();\n\t\tassertThat(annotations.isDirectlyPresent(Meta11.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid isDirectlyPresentWhenNotPresentReturnsFalse() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.isDirectlyPresent(Missing.class)).isFalse();\n\t\tassertThat(annotations.isDirectlyPresent(Missing.class.getName())).isFalse();\n\t}\n\n\t@Test\n\tvoid getReturnsAppropriateAnnotation() {\n\t\tMergedAnnotations annotations = getMultiRoute1();\n\t\tassertThat(annotations.get(MultiRouteTarget.class).getString(\n\t\t\t\tMergedAnnotation.VALUE)).isEqualTo(\"12\");\n\t\tassertThat(annotations.get(MultiRouteTarget.class.getName()).getString(\n\t\t\t\tMergedAnnotation.VALUE)).isEqualTo(\"12\");\n\t}\n\n\t@Test\n\tvoid getWhenNotPresentReturnsMissing() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tassertThat(annotations.get(Missing.class)).isEqualTo(MergedAnnotation.missing());\n\t}\n\n\t@Test\n\tvoid getWithPredicateReturnsOnlyMatching() {\n\t\tMergedAnnotations annotations = getMultiRoute1();\n\t\tassertThat(annotations.get(MultiRouteTarget.class,\n\t\t\t\tannotation -> annotation.getDistance() >= 3).getString(\n\t\t\t\t\t\tMergedAnnotation.VALUE)).isEqualTo(\"111\");\n\t}\n\n\t@Test\n\tvoid getWithSelectorReturnsSelected() {\n\t\tMergedAnnotations annotations = getMultiRoute1();\n\t\tMergedAnnotationSelector<MultiRouteTarget> deepest = (existing,\n\t\t\t\tcandidate) -> candidate.getDistance() > existing.getDistance() ? candidate\n\t\t\t\t\t\t: existing;\n\t\tassertThat(annotations.get(MultiRouteTarget.class, null, deepest).getString(\n\t\t\t\tMergedAnnotation.VALUE)).isEqualTo(\"111\");\n\t}\n\n\t@Test\n\tvoid streamStreamsInCorrectOrder() {\n\t\tMergedAnnotations annotations = getDirectAndSimple();\n\t\tList<Class<?>> types = new ArrayList<>();\n\t\tannotations.stream().forEach(annotation -> types.add(annotation.getType()));\n\t\tassertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class,\n\t\t\t\tMeta2.class, Meta11.class);\n\t}\n\n\t@Test\n\tvoid streamWithTypeStreamsInCorrectOrder() {\n\t\tMergedAnnotations annotations = getMultiRoute1();\n\t\tList<String> values = new ArrayList<>();\n\t\tannotations.stream(MultiRouteTarget.class).forEach(\n\t\t\t\tannotation -> values.add(annotation.getString(MergedAnnotation.VALUE)));\n\t\tassertThat(values).containsExactly(\"12\", \"111\");\n\t}\n\n\t@Test\n\tvoid getMetaWhenRootHasAttributeValuesShouldAliasAttributes() {\n\t\tMergedAnnotation<Aliased> root = MergedAnnotation.of(null, null, Aliased.class,\n\t\t\t\tCollections.singletonMap(\"testAlias\", \"test\"));\n\t\tMergedAnnotations annotations = MergedAnnotationsCollection.of(\n\t\t\t\tCollections.singleton(root));\n\t\tMergedAnnotation<AliasTarget> metaAnnotation = annotations.get(AliasTarget.class);\n\t\tassertThat(metaAnnotation.getString(\"test\")).isEqualTo(\"test\");\n\t}\n\n\t@Test\n\tvoid getMetaWhenRootHasNoAttributeValuesShouldAliasAttributes() {\n\t\tMergedAnnotation<Aliased> root = MergedAnnotation.of(null, null, Aliased.class,\n\t\t\t\tCollections.emptyMap());\n\t\tMergedAnnotations annotations = MergedAnnotationsCollection.of(\n\t\t\t\tCollections.singleton(root));\n\t\tMergedAnnotation<AliasTarget> metaAnnotation = annotations.get(AliasTarget.class);\n\t\tassertThat(root.getString(\"testAlias\")).isEqualTo(\"newdefault\");\n\t\tassertThat(metaAnnotation.getString(\"test\")).isEqualTo(\"newdefault\");\n\t}\n\n\tprivate MergedAnnotations getDirectAndSimple() {\n\t\tList<MergedAnnotation<?>> list = new ArrayList<>();\n\t\tlist.add(MergedAnnotation.of(null, null, Direct.class, Collections.emptyMap()));\n\t\tlist.add(MergedAnnotation.of(null, null, Simple.class, Collections.emptyMap()));\n\t\treturn MergedAnnotationsCollection.of(list);\n\t}\n\n\tprivate MergedAnnotations getMultiRoute1() {\n\t\tList<MergedAnnotation<?>> list = new ArrayList<>();\n\t\tlist.add(MergedAnnotation.of(null, null, MultiRoute1.class,\n\t\t\t\tCollections.emptyMap()));\n\t\treturn MergedAnnotationsCollection.of(list);\n\t}\n\n\t@Meta1\n\t@Meta2\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Direct {\n\n\t}\n\n\t@Meta11\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Meta1 {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Meta2 {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Meta11 {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Simple {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Missing {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MultiRouteTarget {\n\n\t\tString value();\n\n\t}\n\n\t@MultiRoute11\n\t@MultiRoute12\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MultiRoute1 {\n\n\t}\n\n\t@MultiRoute111\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MultiRoute11 {\n\n\t}\n\n\t@MultiRouteTarget(\"12\")\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MultiRoute12 {\n\n\t}\n\n\t@MultiRouteTarget(\"111\")\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface MultiRoute111 {\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface AliasTarget {\n\n\t\tString test() default \"default\";\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@AliasTarget\n\t@interface Aliased {\n\n\t\t@AliasFor(annotation = AliasTarget.class, attribute = \"test\")\n\t\tString testAlias() default \"newdefault\";\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenDirectAnnotationsIsNullThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofWhenDirectAnnotationsIsNullThrowsException() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> MergedAnnotationsCollection.of(null)).withMessage(\"Annotations must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenDirectAnnotationsIsNullThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenDirectAnnotationsIsNullThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenEmptyReturnsSharedNoneInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofWhenEmptyReturnsSharedNoneInstance() {\r\n    MergedAnnotations annotations = MergedAnnotationsCollection.of(new ArrayList<>());\r\n    assertThat(annotations).isSameAs(TypeMappedAnnotations.NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenEmptyReturnsSharedNoneInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#ofWhenEmptyReturnsSharedNoneInstance()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationIsNotDirectlyPresentThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenAnnotationIsNotDirectlyPresentThrowsException() {\r\n    MergedAnnotation<?> annotation = mock();\r\n    given(annotation.isDirectlyPresent()).willReturn(false);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> MergedAnnotationsCollection.of(Collections.singleton(annotation))).withMessage(\"Annotation must be directly present\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationIsNotDirectlyPresentThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationIsNotDirectlyPresentThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationAggregateIndexIsNotZeroThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWhenAnnotationAggregateIndexIsNotZeroThrowsException() {\r\n    MergedAnnotation<?> annotation = mock();\r\n    given(annotation.isDirectlyPresent()).willReturn(true);\r\n    given(annotation.getAggregateIndex()).willReturn(1);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> MergedAnnotationsCollection.of(Collections.singleton(annotation))).withMessage(\"Annotation must have aggregate index of zero\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationAggregateIndexIsNotZeroThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#createWhenAnnotationAggregateIndexIsNotZeroThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#iterateIteratesInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid iterateIteratesInCorrectOrder() {\r\n    MergedAnnotations annotations = getDirectAndSimple();\r\n    List<Class<?>> types = new ArrayList<>();\r\n    for (MergedAnnotation<?> annotation : annotations) {\r\n        types.add(annotation.getType());\r\n    }\r\n    assertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class, Meta2.class, Meta11.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#iterateIteratesInCorrectOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#iterateIteratesInCorrectOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsCollectionTests#spliteratorIteratesInCorrectOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spliteratorIteratesInCorrectOrder() {\r\n    MergedAnnotations annotations = getDirectAndSimple();\r\n    Spliterator<MergedAnnotation<Annotation>> spliterator = annotations.spliterator();\r\n    List<Class<?>> types = new ArrayList<>();\r\n    spliterator.forEachRemaining(annotation -> types.add(annotation.getType()));\r\n    assertThat(types).containsExactly(Direct.class, Simple.class, Meta1.class, Meta2.class, Meta11.class);\r\n}",
    "tailType": "method_code"
  }
]