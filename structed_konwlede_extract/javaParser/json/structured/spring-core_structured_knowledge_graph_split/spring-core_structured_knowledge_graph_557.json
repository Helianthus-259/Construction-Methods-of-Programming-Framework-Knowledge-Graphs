[
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getAttemptLoad()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#setStrategy(GeneratorStrategy)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the strategy to use to create the bytecode from this generator.\r\n * By default an instance of {@link DefaultGeneratorStrategy} is used.\r\n */\r\npublic void setStrategy(GeneratorStrategy strategy) {\r\n    if (strategy == null) {\r\n        strategy = DefaultGeneratorStrategy.INSTANCE;\r\n    }\r\n    this.strategy = strategy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#setStrategy(GeneratorStrategy)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getStrategy()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @see #setStrategy\r\n */\r\npublic GeneratorStrategy getStrategy() {\r\n    return strategy;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getStrategy()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getCurrent()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Used internally by CGLIB. Returns the <code>AbstractClassGenerator</code>\r\n * that is being used to generate a class in the current thread.\r\n */\r\npublic static AbstractClassGenerator getCurrent() {\r\n    return (AbstractClassGenerator) CURRENT.get();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getCurrent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "public ClassLoader getClassLoader() {\r\n    ClassLoader t = classLoader;\r\n    if (t == null) {\r\n        t = getDefaultClassLoader();\r\n    }\r\n    if (t == null) {\r\n        t = getClass().getClassLoader();\r\n    }\r\n    if (t == null) {\r\n        t = Thread.currentThread().getContextClassLoader();\r\n    }\r\n    if (t == null) {\r\n        throw new IllegalStateException(\"Cannot determine classloader\");\r\n    }\r\n    return t;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected ClassLoader getDefaultClassLoader();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#getProtectionDomain()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the protection domain to use when defining the class.\r\n * <p>\r\n * Default implementation returns <code>null</code> for using a default protection domain. Sub-classes may\r\n * override to use a more specific protection domain.\r\n * </p>\r\n * @return the protection domain (<code>null</code> for using a default)\r\n */\r\nprotected ProtectionDomain getProtectionDomain() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#getProtectionDomain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#create(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Object create(Object key) {\r\n    try {\r\n        ClassLoader loader = getClassLoader();\r\n        Map<ClassLoader, ClassLoaderData> cache = CACHE;\r\n        ClassLoaderData data = cache.get(loader);\r\n        if (data == null) {\r\n            synchronized (AbstractClassGenerator.class) {\r\n                cache = CACHE;\r\n                data = cache.get(loader);\r\n                if (data == null) {\r\n                    Map<ClassLoader, ClassLoaderData> newCache = new WeakHashMap<>(cache);\r\n                    data = new ClassLoaderData(loader);\r\n                    newCache.put(loader, data);\r\n                    CACHE = newCache;\r\n                }\r\n            }\r\n        }\r\n        this.key = key;\r\n        Object obj = data.get(this, getUseCache());\r\n        if (obj instanceof Class<?> clazz) {\r\n            return firstInstance(clazz);\r\n        }\r\n        return nextInstance(obj);\r\n    } catch (RuntimeException | Error ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throw new CodeGenerationException(ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#create(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#generate(ClassLoaderData)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected Class generate(ClassLoaderData data) {\r\n    Class gen;\r\n    Object save = CURRENT.get();\r\n    CURRENT.set(this);\r\n    try {\r\n        ClassLoader classLoader = data.getClassLoader();\r\n        if (classLoader == null) {\r\n            throw new IllegalStateException(\"ClassLoader is null while trying to define class \" + getClassName() + \". It seems that the loader has been expired from a weak reference somehow. \" + \"Please file an issue at cglib's issue tracker.\");\r\n        }\r\n        synchronized (classLoader) {\r\n            String name = generateClassName(data.getUniqueNamePredicate());\r\n            data.reserveName(name);\r\n            this.setClassName(name);\r\n        }\r\n        if (attemptLoad) {\r\n            try {\r\n                // SPRING PATCH BEGIN\r\n                synchronized (classLoader) {\r\n                    // just in case\r\n                    gen = ReflectUtils.loadClass(getClassName(), classLoader);\r\n                }\r\n                // SPRING PATCH END\r\n                return gen;\r\n            } catch (ClassNotFoundException e) {\r\n                // ignore\r\n            }\r\n        }\r\n        // SPRING PATCH BEGIN\r\n        if (inNativeImage) {\r\n            throw new UnsupportedOperationException(\"CGLIB runtime enhancement not supported on native image. \" + \"Make sure to include a pre-generated class on the classpath instead: \" + getClassName());\r\n        }\r\n        // SPRING PATCH END\r\n        byte[] b = strategy.generate(this);\r\n        String className = ClassNameReader.getClassName(new ClassReader(b));\r\n        ProtectionDomain protectionDomain = getProtectionDomain();\r\n        synchronized (classLoader) {\r\n            // just in case\r\n            // SPRING PATCH BEGIN\r\n            gen = ReflectUtils.defineClass(className, b, classLoader, protectionDomain, contextClass);\r\n            // SPRING PATCH END\r\n        }\r\n        return gen;\r\n    } catch (RuntimeException | Error ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throw new CodeGenerationException(ex);\r\n    } finally {\r\n        CURRENT.set(save);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#generate(ClassLoaderData)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected Object firstInstance(Class type) throws Exception;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.AbstractClassGenerator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.AbstractClassGenerator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "abstract protected Object nextInstance(Object instance) throws Exception;",
    "tailType": "method_code"
  }
]