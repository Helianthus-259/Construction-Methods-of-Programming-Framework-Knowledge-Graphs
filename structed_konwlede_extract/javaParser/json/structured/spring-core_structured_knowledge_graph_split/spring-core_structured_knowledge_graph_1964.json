[
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withDefaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_propertySourceSearchOrderIsFIFO()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_propertySourceSearchOrderIsFIFO() {\r\n    MutablePropertySources sources = new MutablePropertySources();\r\n    PropertyResolver resolver = new PropertySourcesPropertyResolver(sources);\r\n    sources.addFirst(new MockPropertySource(\"ps1\").withProperty(\"pName\", \"ps1Value\"));\r\n    assertThat(resolver.getProperty(\"pName\")).isEqualTo(\"ps1Value\");\r\n    sources.addFirst(new MockPropertySource(\"ps2\").withProperty(\"pName\", \"ps2Value\"));\r\n    assertThat(resolver.getProperty(\"pName\")).isEqualTo(\"ps2Value\");\r\n    sources.addFirst(new MockPropertySource(\"ps3\").withProperty(\"pName\", \"ps3Value\"));\r\n    assertThat(resolver.getProperty(\"pName\")).isEqualTo(\"ps3Value\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_propertySourceSearchOrderIsFIFO()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_propertySourceSearchOrderIsFIFO()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withExplicitNullValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_withExplicitNullValue() {\r\n    // java.util.Properties does not allow null values (because Hashtable does not)\r\n    Map<String, Object> nullableProperties = new HashMap<>();\r\n    propertySources.addLast(new MapPropertySource(\"nullableProperties\", nullableProperties));\r\n    nullableProperties.put(\"foo\", null);\r\n    assertThat(propertyResolver.getProperty(\"foo\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withExplicitNullValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withExplicitNullValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withTargetType_andDefaultValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_withTargetType_andDefaultValue() {\r\n    assertThat(propertyResolver.getProperty(\"foo\", Integer.class, 42)).isEqualTo(42);\r\n    testProperties.put(\"foo\", 13);\r\n    assertThat(propertyResolver.getProperty(\"foo\", Integer.class, 42)).isEqualTo(13);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withTargetType_andDefaultValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withTargetType_andDefaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withStringArrayConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_withStringArrayConversion() {\r\n    testProperties.put(\"foo\", \"bar,baz\");\r\n    assertThat(propertyResolver.getProperty(\"foo\", String[].class)).isEqualTo(new String[] { \"bar\", \"baz\" });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withStringArrayConversion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withStringArrayConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withNonConvertibleTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_withNonConvertibleTargetType() {\r\n    testProperties.put(\"foo\", \"bar\");\r\n    class TestType ;\r\n    assertThatExceptionOfType(ConverterNotFoundException.class).isThrownBy(() -> propertyResolver.getProperty(\"foo\", TestType.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withNonConvertibleTargetType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_withNonConvertibleTargetType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_replaceExistingKeyPostConstruction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_doesNotCache_replaceExistingKeyPostConstruction() {\r\n    String key = \"foo\";\r\n    String value1 = \"bar\";\r\n    String value2 = \"biz\";\r\n    HashMap<String, Object> map = new HashMap<>();\r\n    // before construction\r\n    map.put(key, value1);\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MapPropertySource(\"testProperties\", map));\r\n    PropertyResolver propertyResolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(propertyResolver.getProperty(key)).isEqualTo(value1);\r\n    // after construction and first resolution\r\n    map.put(key, value2);\r\n    assertThat(propertyResolver.getProperty(key)).isEqualTo(value2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_replaceExistingKeyPostConstruction()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_replaceExistingKeyPostConstruction()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolverTests#getProperty_doesNotCache_addNewKeyPostConstruction()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getProperty_doesNotCache_addNewKeyPostConstruction() {\r\n    HashMap<String, Object> map = new HashMap<>();\r\n    MutablePropertySources propertySources = new MutablePropertySources();\r\n    propertySources.addFirst(new MapPropertySource(\"testProperties\", map));\r\n    PropertyResolver propertyResolver = new PropertySourcesPropertyResolver(propertySources);\r\n    assertThat(propertyResolver.getProperty(\"foo\")).isNull();\r\n    map.put(\"foo\", \"42\");\r\n    assertThat(propertyResolver.getProperty(\"foo\")).isEqualTo(\"42\");\r\n}",
    "tailType": "method_code"
  }
]