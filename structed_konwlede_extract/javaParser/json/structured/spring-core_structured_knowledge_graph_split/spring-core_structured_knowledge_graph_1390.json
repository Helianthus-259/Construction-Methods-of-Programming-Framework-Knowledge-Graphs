[
  {
    "head": "org.springframework.util.StopWatch#getLastTaskTimeMillis()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StopWatch#getTaskInfo()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get an array of the data for tasks performed.\r\n * @see #setKeepTaskList\r\n */\r\npublic TaskInfo[] getTaskInfo() {\r\n    if (this.taskList == null) {\r\n        throw new UnsupportedOperationException(\"Task info is not being kept!\");\r\n    }\r\n    return this.taskList.toArray(new TaskInfo[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTaskInfo()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getTaskCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the number of tasks timed.\r\n */\r\npublic int getTaskCount() {\r\n    return this.taskCount;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTaskCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getTotalTimeNanos()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the total time for all tasks in nanoseconds.\r\n * @since 5.2\r\n * @see #getTotalTime(TimeUnit)\r\n */\r\npublic long getTotalTimeNanos() {\r\n    return this.totalTimeNanos;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTotalTimeNanos()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getTotalTimeMillis()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the total time for all tasks in milliseconds.\r\n * @see #getTotalTime(TimeUnit)\r\n */\r\npublic long getTotalTimeMillis() {\r\n    return TimeUnit.NANOSECONDS.toMillis(this.totalTimeNanos);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTotalTimeMillis()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getTotalTimeSeconds()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the total time for all tasks in seconds.\r\n * @see #getTotalTime(TimeUnit)\r\n */\r\npublic double getTotalTimeSeconds() {\r\n    return getTotalTime(TimeUnit.SECONDS);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTotalTimeSeconds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#getTotalTime(TimeUnit)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the total time for all tasks in the requested time unit\r\n * (with decimal points in nanosecond precision).\r\n * @param timeUnit the unit to use\r\n * @since 6.1\r\n * @see #getTotalTimeNanos()\r\n * @see #getTotalTimeMillis()\r\n * @see #getTotalTimeSeconds()\r\n */\r\npublic double getTotalTime(TimeUnit timeUnit) {\r\n    return (double) this.totalTimeNanos / TimeUnit.NANOSECONDS.convert(1, timeUnit);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#getTotalTime(TimeUnit)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#prettyPrint()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a table describing all tasks performed in seconds\r\n * (with decimal points in nanosecond precision).\r\n * <p>For custom reporting, call {@link #getTaskInfo()} and use the data directly.\r\n * @see #prettyPrint(TimeUnit)\r\n * @see #getTotalTimeSeconds()\r\n * @see TaskInfo#getTimeSeconds()\r\n */\r\npublic String prettyPrint() {\r\n    return prettyPrint(TimeUnit.SECONDS);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#prettyPrint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#prettyPrint(TimeUnit)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate a table describing all tasks performed in the requested time unit\r\n * (with decimal points in nanosecond precision).\r\n * <p>For custom reporting, call {@link #getTaskInfo()} and use the data directly.\r\n * @param timeUnit the unit to use for rendering total time and task time\r\n * @since 6.1\r\n * @see #prettyPrint()\r\n * @see #getTotalTime(TimeUnit)\r\n * @see TaskInfo#getTime(TimeUnit)\r\n */\r\npublic String prettyPrint(TimeUnit timeUnit) {\r\n    NumberFormat nf = NumberFormat.getNumberInstance(Locale.ENGLISH);\r\n    nf.setMaximumFractionDigits(9);\r\n    nf.setGroupingUsed(false);\r\n    NumberFormat pf = NumberFormat.getPercentInstance(Locale.ENGLISH);\r\n    pf.setMinimumIntegerDigits(2);\r\n    pf.setGroupingUsed(false);\r\n    StringBuilder sb = new StringBuilder(128);\r\n    sb.append(\"StopWatch '\").append(getId()).append(\"': \");\r\n    String total = (timeUnit == TimeUnit.NANOSECONDS ? nf.format(getTotalTimeNanos()) : nf.format(getTotalTime(timeUnit)));\r\n    sb.append(total).append(\" \").append(timeUnit.name().toLowerCase(Locale.ENGLISH));\r\n    int width = Math.max(sb.length(), 40);\r\n    sb.append(\"\\n\");\r\n    if (this.taskList != null) {\r\n        String line = \"-\".repeat(width) + \"\\n\";\r\n        String unitName = timeUnit.name();\r\n        unitName = unitName.charAt(0) + unitName.substring(1).toLowerCase(Locale.ENGLISH);\r\n        unitName = String.format(\"%-12s\", unitName);\r\n        sb.append(line);\r\n        sb.append(unitName).append(\"  %       Task name\\n\");\r\n        sb.append(line);\r\n        int digits = total.indexOf('.');\r\n        if (digits < 0) {\r\n            digits = total.length();\r\n        }\r\n        nf.setMinimumIntegerDigits(digits);\r\n        nf.setMaximumFractionDigits(10 - digits);\r\n        for (TaskInfo task : this.taskList) {\r\n            sb.append(String.format(\"%-14s\", (timeUnit == TimeUnit.NANOSECONDS ? nf.format(task.getTimeNanos()) : nf.format(task.getTime(timeUnit)))));\r\n            sb.append(String.format(\"%-8s\", pf.format(task.getTimeSeconds() / getTotalTimeSeconds())));\r\n            sb.append(task.getTaskName()).append('\\n');\r\n        }\r\n    } else {\r\n        sb.append(\"No task info kept\");\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#prettyPrint(TimeUnit)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#shortSummary()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get a short description of the total running time in seconds.\r\n * @see #prettyPrint()\r\n * @see #prettyPrint(TimeUnit)\r\n */\r\npublic String shortSummary() {\r\n    return \"StopWatch '\" + getId() + \"': \" + getTotalTimeSeconds() + \" seconds\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StopWatch",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StopWatch#shortSummary()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StopWatch#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Generate an informative string describing all tasks performed in seconds.\r\n * @see #prettyPrint()\r\n * @see #prettyPrint(TimeUnit)\r\n */\r\n@Override\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder(shortSummary());\r\n    if (this.taskList != null) {\r\n        for (TaskInfo task : this.taskList) {\r\n            sb.append(\"; [\").append(task.getTaskName()).append(\"] took \").append(task.getTimeSeconds()).append(\" seconds\");\r\n            long percent = Math.round(100.0 * task.getTimeSeconds() / getTotalTimeSeconds());\r\n            sb.append(\" = \").append(percent).append('%');\r\n        }\r\n    } else {\r\n        sb.append(\"; no task info kept\");\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  }
]