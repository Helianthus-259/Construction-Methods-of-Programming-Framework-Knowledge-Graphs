[
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.asm.ClassVisitor#cv",
    "tailType": "field"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#cv",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#getDelegate()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The class visitor to which this visitor must delegate method calls. May be {@literal null}.\r\n *\r\n * @return the class visitor to which this visitor must delegate method calls, or {@literal null}.\r\n */\r\npublic ClassVisitor getDelegate() {\r\n    return cv;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#getDelegate()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the header of the class.\r\n *\r\n * @param version the class version. The minor version is stored in the 16 most significant bits,\r\n *     and the major version in the 16 least significant bits.\r\n * @param access the class's access flags (see {@link Opcodes}). This parameter also indicates if\r\n *     the class is deprecated {@link Opcodes#ACC_DEPRECATED} or a record {@link\r\n *     Opcodes#ACC_RECORD}.\r\n * @param name the internal name of the class (see {@link Type#getInternalName()}).\r\n * @param signature the signature of this class. May be {@literal null} if the class is not a\r\n *     generic one, and does not extend or implement generic classes or interfaces.\r\n * @param superName the internal of name of the super class (see {@link Type#getInternalName()}).\r\n *     For interfaces, the super class is {@link Object}. May be {@literal null}, but only for the\r\n *     {@link Object} class.\r\n * @param interfaces the internal names of the class's interfaces (see {@link\r\n *     Type#getInternalName()}). May be {@literal null}.\r\n */\r\npublic void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) {\r\n    if (api < Opcodes.ASM8 && (access & Opcodes.ACC_RECORD) != 0) {\r\n        throw new UnsupportedOperationException(\"Records requires ASM8\");\r\n    }\r\n    if (cv != null) {\r\n        cv.visit(version, access, name, signature, superName, interfaces);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visit(int,int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the source of the class.\r\n *\r\n * @param source the name of the source file from which the class was compiled. May be {@literal\r\n *     null}.\r\n * @param debug additional debug information to compute the correspondence between source and\r\n *     compiled elements of the class. May be {@literal null}.\r\n */\r\npublic void visitSource(final String source, final String debug) {\r\n    if (cv != null) {\r\n        cv.visitSource(source, debug);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitSource(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visit the module corresponding to the class.\r\n *\r\n * @param name the fully qualified name (using dots) of the module.\r\n * @param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\r\n *     ACC_MANDATED}.\r\n * @param version the module version, or {@literal null}.\r\n * @return a visitor to visit the module values, or {@literal null} if this visitor is not\r\n *     interested in visiting this module.\r\n */\r\npublic ModuleVisitor visitModule(final String name, final int access, final String version) {\r\n    if (api < Opcodes.ASM6) {\r\n        throw new UnsupportedOperationException(\"Module requires ASM6\");\r\n    }\r\n    if (cv != null) {\r\n        return cv.visitModule(name, access, version);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitModule(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the nest host class of the class. A nest is a set of classes of the same package that\r\n * share access to their private members. One of these classes, called the host, lists the other\r\n * members of the nest, which in turn should link to the host of their nest. This method must be\r\n * called only once and only if the visited class is a non-host member of a nest. A class is\r\n * implicitly its own nest, so it's invalid to call this method with the visited class name as\r\n * argument.\r\n *\r\n * @param nestHost the internal name of the host class of the nest (see {@link\r\n *     Type#getInternalName()}).\r\n */\r\npublic void visitNestHost(final String nestHost) {\r\n    if (api < Opcodes.ASM7) {\r\n        throw new UnsupportedOperationException(\"NestHost requires ASM7\");\r\n    }\r\n    if (cv != null) {\r\n        cv.visitNestHost(nestHost);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitNestHost(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits the enclosing class of the class. This method must be called only if this class is a\r\n * local or anonymous class. See the JVMS 4.7.7 section for more details.\r\n *\r\n * @param owner internal name of the enclosing class of the class (see {@link\r\n *     Type#getInternalName()}).\r\n * @param name the name of the method that contains the class, or {@literal null} if the class is\r\n *     not enclosed in a method or constructor of its enclosing class (for example, if it is enclosed in\r\n *     an instance initializer, static initializer, instance variable initializer, or class\r\n *     variable initializer).\r\n * @param descriptor the descriptor of the method that contains the class, or {@literal null} if\r\n *     the class is not enclosed in a method or constructor of its enclosing class (for example, if it is\r\n *     enclosed in an instance initializer, static initializer, instance variable initializer, or\r\n *     class variable initializer).\r\n */\r\npublic void visitOuterClass(final String owner, final String name, final String descriptor) {\r\n    if (cv != null) {\r\n        cv.visitOuterClass(owner, name, descriptor);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitOuterClass(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation of the class.\r\n *\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\r\n    if (cv != null) {\r\n        return cv.visitAnnotation(descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits an annotation on a type in the class signature.\r\n *\r\n * @param typeRef a reference to the annotated type. The sort of this type reference must be\r\n *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link\r\n *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See\r\n *     {@link TypeReference}.\r\n * @param typePath the path to the annotated type argument, wildcard bound, array element type, or\r\n *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets\r\n *     'typeRef' as a whole.\r\n * @param descriptor the class descriptor of the annotation class.\r\n * @param visible {@literal true} if the annotation is visible at runtime.\r\n * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not\r\n *     interested in visiting this annotation.\r\n */\r\npublic AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\r\n    if (api < Opcodes.ASM5) {\r\n        throw new UnsupportedOperationException(\"TypeAnnotation requires ASM5\");\r\n    }\r\n    if (cv != null) {\r\n        return cv.visitTypeAnnotation(typeRef, typePath, descriptor, visible);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Visits a non standard attribute of the class.\r\n *\r\n * @param attribute an attribute.\r\n */\r\npublic void visitAttribute(final Attribute attribute) {\r\n    if (cv != null) {\r\n        cv.visitAttribute(attribute);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassVisitor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassVisitor#visitAttribute(Attribute)",
    "tailType": "method"
  }
]