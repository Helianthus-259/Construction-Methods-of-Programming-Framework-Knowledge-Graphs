[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int readPosition() {\r\n    return this.readPosition;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer readPosition(int readPosition) {\r\n    assertIndex(readPosition >= 0, \"'readPosition' %d must be >= 0\", readPosition);\r\n    assertIndex(readPosition <= this.writePosition, \"'readPosition' %d must be <= %d\", readPosition, this.writePosition);\r\n    this.readPosition = readPosition;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#readPosition(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int writePosition() {\r\n    return this.writePosition;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer writePosition(int writePosition) {\r\n    assertIndex(writePosition >= this.readPosition, \"'writePosition' %d must be >= %d\", writePosition, this.readPosition);\r\n    assertIndex(writePosition <= this.capacity, \"'writePosition' %d must be <= %d\", writePosition, this.capacity);\r\n    this.writePosition = writePosition;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writePosition(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int capacity() {\r\n    return this.capacity;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic DataBuffer capacity(int capacity) {\r\n    setCapacity(capacity);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#capacity(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#setCapacity(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void setCapacity(int newCapacity) {\r\n    if (newCapacity < 0) {\r\n        throw new IllegalArgumentException(String.format(\"'newCapacity' %d must be 0 or higher\", newCapacity));\r\n    }\r\n    int readPosition = readPosition();\r\n    int writePosition = writePosition();\r\n    int oldCapacity = capacity();\r\n    if (newCapacity > oldCapacity) {\r\n        ByteBuffer oldBuffer = this.byteBuffer;\r\n        ByteBuffer newBuffer = allocate(newCapacity, oldBuffer.isDirect());\r\n        oldBuffer.position(0).limit(oldBuffer.capacity());\r\n        newBuffer.position(0).limit(oldBuffer.capacity());\r\n        newBuffer.put(oldBuffer);\r\n        newBuffer.clear();\r\n        setNativeBuffer(newBuffer);\r\n    } else if (newCapacity < oldCapacity) {\r\n        ByteBuffer oldBuffer = this.byteBuffer;\r\n        ByteBuffer newBuffer = allocate(newCapacity, oldBuffer.isDirect());\r\n        if (readPosition < newCapacity) {\r\n            if (writePosition > newCapacity) {\r\n                writePosition = newCapacity;\r\n                writePosition(writePosition);\r\n            }\r\n            oldBuffer.position(readPosition).limit(writePosition);\r\n            newBuffer.position(readPosition).limit(writePosition);\r\n            newBuffer.put(oldBuffer);\r\n            newBuffer.clear();\r\n        } else {\r\n            readPosition(newCapacity);\r\n            writePosition(newCapacity);\r\n        }\r\n        setNativeBuffer(newBuffer);\r\n    }\r\n}",
    "tailType": "method_code"
  }
]