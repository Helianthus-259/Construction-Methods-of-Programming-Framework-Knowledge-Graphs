[
  {
    "head": "org.springframework.core.env.BenchmarkState",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.BenchmarkState#setUp()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.BenchmarkState#setUp()",
    "headType": "method",
    "relation": "use",
    "tail": "@Setup",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.ConcurrentLruCacheBenchmark",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheBenchmark",
    "headType": "class",
    "relation": "use",
    "tail": "@BenchmarkMode",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheBenchmark",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.Function;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\n/**\n * Benchmarks for {@link ConcurrentLruCache}.\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class ConcurrentLruCacheBenchmark {\n\n\t@Benchmark\n\tpublic void lruCache(BenchmarkData data, Blackhole bh) {\n\t\tfor (String element : data.elements) {\n\t\t\tString value = data.lruCache.get(element);\n\t\t\tbh.consume(value);\n\t\t}\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkData {\n\n\t\tConcurrentLruCache<String, String> lruCache;\n\n\t\t@Param({\"100\"})\n\t\tpublic int capacity;\n\n\t\t@Param({\"0.1\"})\n\t\tpublic float cacheMissRate;\n\n\t\tpublic List<String> elements;\n\n\t\tpublic Function<String, String> generator;\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tthis.generator = key -> key + \"value\";\n\t\t\tthis.lruCache = new ConcurrentLruCache<>(this.capacity, this.generator);\n\t\t\tAssert.isTrue(this.cacheMissRate < 1, \"cache miss rate should be < 1\");\n\t\t\tRandom random = new Random();\n\t\t\tint elementsCount = Math.round(this.capacity * (1 + this.cacheMissRate));\n\t\t\tthis.elements = new ArrayList<>(elementsCount);\n\t\t\trandom.ints(elementsCount).forEach(value -> this.elements.add(String.valueOf(value)));\n\t\t\tthis.elements.sort(String::compareTo);\n\t\t}\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheBenchmark#lruCache(BenchmarkData,Blackhole)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Benchmark\r\npublic void lruCache(BenchmarkData data, Blackhole bh) {\r\n    for (String element : data.elements) {\r\n        String value = data.lruCache.get(element);\r\n        bh.consume(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheBenchmark",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentLruCacheBenchmark#lruCache(BenchmarkData,Blackhole)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentLruCacheBenchmark#lruCache(BenchmarkData,Blackhole)",
    "headType": "method",
    "relation": "use",
    "tail": "@Benchmark",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.BenchmarkData",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "use",
    "tail": "@State",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.Function;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Level;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.Param;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\nimport org.openjdk.jmh.infra.Blackhole;\n\n/**\n * Benchmarks for {@link ConcurrentLruCache}.\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.Throughput)\npublic class ConcurrentLruCacheBenchmark {\n\n\t@Benchmark\n\tpublic void lruCache(BenchmarkData data, Blackhole bh) {\n\t\tfor (String element : data.elements) {\n\t\t\tString value = data.lruCache.get(element);\n\t\t\tbh.consume(value);\n\t\t}\n\t}\n\n\t@State(Scope.Benchmark)\n\tpublic static class BenchmarkData {\n\n\t\tConcurrentLruCache<String, String> lruCache;\n\n\t\t@Param({\"100\"})\n\t\tpublic int capacity;\n\n\t\t@Param({\"0.1\"})\n\t\tpublic float cacheMissRate;\n\n\t\tpublic List<String> elements;\n\n\t\tpublic Function<String, String> generator;\n\n\t\t@Setup(Level.Iteration)\n\t\tpublic void setup() {\n\t\t\tthis.generator = key -> key + \"value\";\n\t\t\tthis.lruCache = new ConcurrentLruCache<>(this.capacity, this.generator);\n\t\t\tAssert.isTrue(this.cacheMissRate < 1, \"cache miss rate should be < 1\");\n\t\t\tRandom random = new Random();\n\t\t\tint elementsCount = Math.round(this.capacity * (1 + this.cacheMissRate));\n\t\t\tthis.elements = new ArrayList<>(elementsCount);\n\t\t\trandom.ints(elementsCount).forEach(value -> this.elements.add(String.valueOf(value)));\n\t\t\tthis.elements.sort(String::compareTo);\n\t\t}\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.BenchmarkData#lruCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.BenchmarkData#lruCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConcurrentLruCache<String, String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.BenchmarkData#capacity",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.BenchmarkData#capacity",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.BenchmarkData#cacheMissRate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.BenchmarkData#cacheMissRate",
    "headType": "field",
    "relation": "haveType",
    "tail": "float",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.BenchmarkData",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.BenchmarkData#elements",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.BenchmarkData#elements",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  }
]