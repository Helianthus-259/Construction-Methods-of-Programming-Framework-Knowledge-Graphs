[
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.io.buffer;\n\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferUtils;\nimport org.springframework.core.io.buffer.DataBufferWrapper;\nimport org.springframework.core.io.buffer.PooledDataBuffer;\nimport org.springframework.util.Assert;\n\n/**\n * DataBuffer implementation created by {@link LeakAwareDataBufferFactory}.\n *\n * @author Arjen Poutsma\n */\nclass LeakAwareDataBuffer extends DataBufferWrapper implements PooledDataBuffer {\n\n\tprivate final AssertionError leakError;\n\n\tprivate final LeakAwareDataBufferFactory dataBufferFactory;\n\n\n\tLeakAwareDataBuffer(DataBuffer delegate, LeakAwareDataBufferFactory dataBufferFactory) {\n\t\tsuper(delegate);\n\t\tAssert.notNull(dataBufferFactory, \"DataBufferFactory must not be null\");\n\t\tthis.dataBufferFactory = dataBufferFactory;\n\t\tthis.leakError = createLeakError(delegate);\n\t}\n\n\tprivate static AssertionError createLeakError(DataBuffer delegate) {\n\t\tString message = String.format(\"DataBuffer leak detected: {%s} has not been released.%n\" +\n\t\t\t\t\"Stack trace of buffer allocation statement follows:\",\n\t\t\t\tdelegate);\n\t\tAssertionError result = new AssertionError(message);\n\t\t// remove first four irrelevant stack trace elements\n\t\tStackTraceElement[] oldTrace = result.getStackTrace();\n\t\tStackTraceElement[] newTrace = new StackTraceElement[oldTrace.length - 4];\n\t\tSystem.arraycopy(oldTrace, 4, newTrace, 0, oldTrace.length - 4);\n\t\tresult.setStackTrace(newTrace);\n\t\treturn result;\n\t}\n\n\tAssertionError leakError() {\n\t\treturn this.leakError;\n\t}\n\n\n\t@Override\n\tpublic boolean isAllocated() {\n\t\tDataBuffer delegate = dataBuffer();\n\t\treturn delegate instanceof PooledDataBuffer &&\n\t\t\t\t((PooledDataBuffer) delegate).isAllocated();\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer retain() {\n\t\tDataBufferUtils.retain(dataBuffer());\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic PooledDataBuffer touch(Object hint) {\n\t\tDataBufferUtils.touch(dataBuffer(), hint);\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic boolean release() {\n\t\tDataBufferUtils.release(dataBuffer());\n\t\treturn isAllocated();\n\t}\n\n\t@Override\n\tpublic LeakAwareDataBufferFactory factory() {\n\t\treturn this.dataBufferFactory;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"LeakAwareDataBuffer (%s)\", dataBuffer());\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#leakError",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#leakError",
    "headType": "field",
    "relation": "haveType",
    "tail": "AssertionError",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#dataBufferFactory",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#dataBufferFactory",
    "headType": "field",
    "relation": "haveType",
    "tail": "LeakAwareDataBufferFactory",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#createLeakError(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static AssertionError createLeakError(DataBuffer delegate) {\r\n    String message = String.format(\"DataBuffer leak detected: {%s} has not been released.%n\" + \"Stack trace of buffer allocation statement follows:\", delegate);\r\n    AssertionError result = new AssertionError(message);\r\n    // remove first four irrelevant stack trace elements\r\n    StackTraceElement[] oldTrace = result.getStackTrace();\r\n    StackTraceElement[] newTrace = new StackTraceElement[oldTrace.length - 4];\r\n    System.arraycopy(oldTrace, 4, newTrace, 0, oldTrace.length - 4);\r\n    result.setStackTrace(newTrace);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#createLeakError(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#leakError()",
    "headType": "method",
    "relation": "provide",
    "tail": "AssertionError leakError() {\r\n    return this.leakError;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#leakError()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isAllocated() {\r\n    DataBuffer delegate = dataBuffer();\r\n    return delegate instanceof PooledDataBuffer && ((PooledDataBuffer) delegate).isAllocated();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#isAllocated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PooledDataBuffer retain() {\r\n    DataBufferUtils.retain(dataBuffer());\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#retain()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic PooledDataBuffer touch(Object hint) {\r\n    DataBufferUtils.touch(dataBuffer(), hint);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#touch(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean release() {\r\n    DataBufferUtils.release(dataBuffer());\r\n    return isAllocated();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.io.buffer.LeakAwareDataBuffer#release()",
    "tailType": "method"
  }
]