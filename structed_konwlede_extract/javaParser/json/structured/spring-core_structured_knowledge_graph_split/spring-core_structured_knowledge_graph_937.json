[
  {
    "head": "org.springframework.core.env.ProfilesParser",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ProfilesParser#isMatch(Predicate<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.ParsedProfiles",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Internal parser used by {@link Profiles#of}.\n *\n * @author Phillip Webb\n * @author Sam Brannen\n * @since 5.1\n */\nfinal class ProfilesParser {\n\n\tprivate ProfilesParser() {\n\t}\n\n\n\tstatic Profiles parse(String... expressions) {\n\t\tAssert.notEmpty(expressions, \"Must specify at least one profile expression\");\n\t\tProfiles[] parsed = new Profiles[expressions.length];\n\t\tfor (int i = 0; i < expressions.length; i++) {\n\t\t\tparsed[i] = parseExpression(expressions[i]);\n\t\t}\n\t\treturn new ParsedProfiles(expressions, parsed);\n\t}\n\n\tprivate static Profiles parseExpression(String expression) {\n\t\tAssert.hasText(expression, () -> \"Invalid profile expression [\" + expression + \"]: must contain text\");\n\t\tStringTokenizer tokens = new StringTokenizer(expression, \"()&|!\", true);\n\t\treturn parseTokens(expression, tokens);\n\t}\n\n\tprivate static Profiles parseTokens(String expression, StringTokenizer tokens) {\n\t\treturn parseTokens(expression, tokens, Context.NONE);\n\t}\n\n\tprivate static Profiles parseTokens(String expression, StringTokenizer tokens, Context context) {\n\t\tList<Profiles> elements = new ArrayList<>();\n\t\tOperator operator = null;\n\t\twhile (tokens.hasMoreTokens()) {\n\t\t\tString token = tokens.nextToken().trim();\n\t\t\tif (token.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tswitch (token) {\n\t\t\t\tcase \"(\" -> {\n\t\t\t\t\tProfiles contents = parseTokens(expression, tokens, Context.PARENTHESIS);\n\t\t\t\t\tif (context == Context.NEGATE) {\n\t\t\t\t\t\treturn contents;\n\t\t\t\t\t}\n\t\t\t\t\telements.add(contents);\n\t\t\t\t}\n\t\t\t\tcase \"&\" -> {\n\t\t\t\t\tassertWellFormed(expression, operator == null || operator == Operator.AND);\n\t\t\t\t\toperator = Operator.AND;\n\t\t\t\t}\n\t\t\t\tcase \"|\" -> {\n\t\t\t\t\tassertWellFormed(expression, operator == null || operator == Operator.OR);\n\t\t\t\t\toperator = Operator.OR;\n\t\t\t\t}\n\t\t\t\tcase \"!\" -> elements.add(not(parseTokens(expression, tokens, Context.NEGATE)));\n\t\t\t\tcase \")\" -> {\n\t\t\t\t\tProfiles merged = merge(expression, elements, operator);\n\t\t\t\t\tif (context == Context.PARENTHESIS) {\n\t\t\t\t\t\treturn merged;\n\t\t\t\t\t}\n\t\t\t\t\telements.clear();\n\t\t\t\t\telements.add(merged);\n\t\t\t\t\toperator = null;\n\t\t\t\t}\n\t\t\t\tdefault -> {\n\t\t\t\t\tProfiles value = equals(token);\n\t\t\t\t\tif (context == Context.NEGATE) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\telements.add(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn merge(expression, elements, operator);\n\t}\n\n\tprivate static Profiles merge(String expression, List<Profiles> elements, @Nullable Operator operator) {\n\t\tassertWellFormed(expression, !elements.isEmpty());\n\t\tif (elements.size() == 1) {\n\t\t\treturn elements.get(0);\n\t\t}\n\t\tProfiles[] profiles = elements.toArray(new Profiles[0]);\n\t\treturn (operator == Operator.AND ? and(profiles) : or(profiles));\n\t}\n\n\tprivate static void assertWellFormed(String expression, boolean wellFormed) {\n\t\tAssert.isTrue(wellFormed, () -> \"Malformed profile expression [\" + expression + \"]\");\n\t}\n\n\tprivate static Profiles or(Profiles... profiles) {\n\t\treturn activeProfile -> Arrays.stream(profiles).anyMatch(isMatch(activeProfile));\n\t}\n\n\tprivate static Profiles and(Profiles... profiles) {\n\t\treturn activeProfile -> Arrays.stream(profiles).allMatch(isMatch(activeProfile));\n\t}\n\n\tprivate static Profiles not(Profiles profiles) {\n\t\treturn activeProfile -> !profiles.matches(activeProfile);\n\t}\n\n\tprivate static Profiles equals(String profile) {\n\t\treturn activeProfile -> activeProfile.test(profile);\n\t}\n\n\tprivate static Predicate<Profiles> isMatch(Predicate<String> activeProfiles) {\n\t\treturn profiles -> profiles.matches(activeProfiles);\n\t}\n\n\n\tprivate enum Operator { AND, OR }\n\n\tprivate enum Context { NONE, NEGATE, PARENTHESIS }\n\n\n\tprivate static class ParsedProfiles implements Profiles {\n\n\t\tprivate final Set<String> expressions = new LinkedHashSet<>();\n\n\t\tprivate final Profiles[] parsed;\n\n\t\tParsedProfiles(String[] expressions, Profiles[] parsed) {\n\t\t\tCollections.addAll(this.expressions, expressions);\n\t\t\tthis.parsed = parsed;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean matches(Predicate<String> activeProfiles) {\n\t\t\tfor (Profiles candidate : this.parsed) {\n\t\t\t\tif (candidate.matches(activeProfiles)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\treturn (this == other || (other instanceof ParsedProfiles that &&\n\t\t\t\t\tthis.expressions.equals(that.expressions)));\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn this.expressions.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tif (this.expressions.size() == 1) {\n\t\t\t\treturn this.expressions.iterator().next();\n\t\t\t}\n\t\t\treturn this.expressions.stream().map(this::wrap).collect(Collectors.joining(\" | \"));\n\t\t}\n\n\t\tprivate String wrap(String str) {\n\t\t\treturn \"(\" + str + \")\";\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.ParsedProfiles#expressions",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#expressions",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.ParsedProfiles#parsed",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#parsed",
    "headType": "field",
    "relation": "haveType",
    "tail": "Profiles",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#matches(Predicate<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(Predicate<String> activeProfiles) {\r\n    for (Profiles candidate : this.parsed) {\r\n        if (candidate.matches(activeProfiles)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ParsedProfiles#matches(Predicate<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#matches(Predicate<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof ParsedProfiles that && this.expressions.equals(that.expressions)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ParsedProfiles#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.expressions.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ParsedProfiles#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    if (this.expressions.size() == 1) {\r\n        return this.expressions.iterator().next();\r\n    }\r\n    return this.expressions.stream().map(this::wrap).collect(Collectors.joining(\" | \"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.ParsedProfiles#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.ParsedProfiles#wrap(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String wrap(String str) {\r\n    return \"(\" + str + \")\";\r\n}",
    "tailType": "method_code"
  }
]