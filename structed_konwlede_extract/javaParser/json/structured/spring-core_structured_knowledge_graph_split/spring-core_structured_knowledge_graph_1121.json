[
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Handy class for wrapping checked {@code Exceptions} with a root cause.\n * This class is {@code abstract} to force the programmer to extend the class.\n *\n * <p>The similarity between this class and the {@link NestedRuntimeException}\n * class is unavoidable, as Java forces these two classes to have different\n * superclasses (ah, the inflexibility of concrete inheritance!).\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @see #getMessage\n * @see NestedRuntimeException\n */\npublic abstract class NestedCheckedException extends Exception {\n\n\t/** Use serialVersionUID from Spring 1.2 for interoperability. */\n\tprivate static final long serialVersionUID = 7100714597678207546L;\n\n\n\t/**\n\t * Construct a {@code NestedCheckedException} with the specified detail message.\n\t * @param msg the detail message\n\t */\n\tpublic NestedCheckedException(String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Construct a {@code NestedCheckedException} with the specified detail message\n\t * and nested exception.\n\t * @param msg the detail message\n\t * @param cause the nested exception\n\t */\n\tpublic NestedCheckedException(@Nullable String msg, @Nullable Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n\n\t/**\n\t * Retrieve the innermost cause of this exception, if any.\n\t * @return the innermost exception, or {@code null} if none\n\t */\n\tpublic @Nullable Throwable getRootCause() {\n\t\treturn NestedExceptionUtils.getRootCause(this);\n\t}\n\n\t/**\n\t * Retrieve the most specific cause of this exception, that is,\n\t * either the innermost cause (root cause) or this exception itself.\n\t * <p>Differs from {@link #getRootCause()} in that it falls back\n\t * to the present exception if there is no root cause.\n\t * @return the most specific cause (never {@code null})\n\t * @since 2.0.3\n\t */\n\tpublic Throwable getMostSpecificCause() {\n\t\tThrowable rootCause = getRootCause();\n\t\treturn (rootCause != null ? rootCause : this);\n\t}\n\n\t/**\n\t * Check whether this exception contains an exception of the given type:\n\t * either it is of the given class itself or it contains a nested cause\n\t * of the given type.\n\t * @param exType the exception type to look for\n\t * @return whether there is a nested exception of the specified type\n\t */\n\tpublic boolean contains(@Nullable Class<?> exType) {\n\t\tif (exType == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (exType.isInstance(this)) {\n\t\t\treturn true;\n\t\t}\n\t\tThrowable cause = getCause();\n\t\tif (cause == this) {\n\t\t\treturn false;\n\t\t}\n\t\tif (cause instanceof NestedCheckedException exception) {\n\t\t\treturn exception.contains(exType);\n\t\t}\n\t\telse {\n\t\t\twhile (cause != null) {\n\t\t\t\tif (exType.isInstance(cause)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (cause.getCause() == cause) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcause = cause.getCause();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NestedCheckedException#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NestedCheckedException#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NestedCheckedException#getRootCause()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the innermost cause of this exception, if any.\r\n * @return the innermost exception, or {@code null} if none\r\n */\r\n@Nullable\r\npublic Throwable getRootCause() {\r\n    return NestedExceptionUtils.getRootCause(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedCheckedException#getRootCause()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedCheckedException#getRootCause()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NestedCheckedException#getMostSpecificCause()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the most specific cause of this exception, that is,\r\n * either the innermost cause (root cause) or this exception itself.\r\n * <p>Differs from {@link #getRootCause()} in that it falls back\r\n * to the present exception if there is no root cause.\r\n * @return the most specific cause (never {@code null})\r\n * @since 2.0.3\r\n */\r\npublic Throwable getMostSpecificCause() {\r\n    Throwable rootCause = getRootCause();\r\n    return (rootCause != null ? rootCause : this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedCheckedException#getMostSpecificCause()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedCheckedException#contains(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether this exception contains an exception of the given type:\r\n * either it is of the given class itself or it contains a nested cause\r\n * of the given type.\r\n * @param exType the exception type to look for\r\n * @return whether there is a nested exception of the specified type\r\n */\r\npublic boolean contains(@Nullable Class<?> exType) {\r\n    if (exType == null) {\r\n        return false;\r\n    }\r\n    if (exType.isInstance(this)) {\r\n        return true;\r\n    }\r\n    Throwable cause = getCause();\r\n    if (cause == this) {\r\n        return false;\r\n    }\r\n    if (cause instanceof NestedCheckedException exception) {\r\n        return exception.contains(exType);\r\n    } else {\r\n        while (cause != null) {\r\n            if (exType.isInstance(cause)) {\r\n                return true;\r\n            }\r\n            if (cause.getCause() == cause) {\r\n                break;\r\n            }\r\n            cause = cause.getCause();\r\n        }\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedCheckedException#contains(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedCheckedException",
    "headType": "class",
    "relation": "extend",
    "tail": "Exception",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NestedExceptionUtils",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Helper class for implementing exception classes which are capable of\n * holding nested exceptions. Necessary because we can't share a base\n * class among different exception types.\n *\n * <p>Mainly for use within the framework.\n *\n * @author Juergen Hoeller\n * @since 2.0\n * @see NestedRuntimeException\n * @see NestedCheckedException\n */\npublic abstract class NestedExceptionUtils {\n\n\t/**\n\t * Build a message for the given base message and root cause.\n\t * @param message the base message\n\t * @param cause the root cause\n\t * @return the full exception message\n\t * @deprecated as of 6.0, in favor of custom exception messages\n\t * with selective inclusion of cause messages\n\t */\n\t@Deprecated(since = \"6.0\")\n\tpublic static @Nullable String buildMessage(@Nullable String message, @Nullable Throwable cause) {\n\t\tif (cause == null) {\n\t\t\treturn message;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(64);\n\t\tif (message != null) {\n\t\t\tsb.append(message).append(\"; \");\n\t\t}\n\t\tsb.append(\"nested exception is \").append(cause);\n\t\treturn sb.toString();\n\t}\n\n\t/**\n\t * Retrieve the innermost cause of the given exception, if any.\n\t * @param original the original exception to introspect\n\t * @return the innermost exception, or {@code null} if none\n\t * @since 4.3.9\n\t */\n\tpublic static @Nullable Throwable getRootCause(@Nullable Throwable original) {\n\t\tif (original == null) {\n\t\t\treturn null;\n\t\t}\n\t\tThrowable rootCause = null;\n\t\tThrowable cause = original.getCause();\n\t\twhile (cause != null && cause != rootCause) {\n\t\t\trootCause = cause;\n\t\t\tcause = cause.getCause();\n\t\t}\n\t\treturn rootCause;\n\t}\n\n\t/**\n\t * Retrieve the most specific cause of the given exception, that is,\n\t * either the innermost cause (root cause) or the exception itself.\n\t * <p>Differs from {@link #getRootCause} in that it falls back\n\t * to the original exception if there is no root cause.\n\t * @param original the original exception to introspect\n\t * @return the most specific cause (never {@code null})\n\t * @since 4.3.9\n\t */\n\tpublic static Throwable getMostSpecificCause(Throwable original) {\n\t\tThrowable rootCause = getRootCause(original);\n\t\treturn (rootCause != null ? rootCause : original);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils#buildMessage(String,Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a message for the given base message and root cause.\r\n * @param message the base message\r\n * @param cause the root cause\r\n * @return the full exception message\r\n * @deprecated as of 6.0, in favor of custom exception messages\r\n * with selective inclusion of cause messages\r\n */\r\n@Deprecated(since = \"6.0\")\r\n@Nullable\r\npublic static String buildMessage(@Nullable String message, @Nullable Throwable cause) {\r\n    if (cause == null) {\r\n        return message;\r\n    }\r\n    StringBuilder sb = new StringBuilder(64);\r\n    if (message != null) {\r\n        sb.append(message).append(\"; \");\r\n    }\r\n    sb.append(\"nested exception is \").append(cause);\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedExceptionUtils#buildMessage(String,Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils#buildMessage(String,Throwable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils#buildMessage(String,Throwable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils#getRootCause(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the innermost cause of the given exception, if any.\r\n * @param original the original exception to introspect\r\n * @return the innermost exception, or {@code null} if none\r\n * @since 4.3.9\r\n */\r\n@Nullable\r\npublic static Throwable getRootCause(@Nullable Throwable original) {\r\n    if (original == null) {\r\n        return null;\r\n    }\r\n    Throwable rootCause = null;\r\n    Throwable cause = original.getCause();\r\n    while (cause != null && cause != rootCause) {\r\n        rootCause = cause;\r\n        cause = cause.getCause();\r\n    }\r\n    return rootCause;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedExceptionUtils#getRootCause(Throwable)",
    "tailType": "method"
  }
]