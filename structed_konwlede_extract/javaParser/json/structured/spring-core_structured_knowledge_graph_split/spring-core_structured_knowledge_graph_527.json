[
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newTypeReference(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to a type parameter of a generic class or method.\r\n *\r\n * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.\r\n * @param paramIndex the type parameter index.\r\n * @return a reference to the given generic class or method type parameter.\r\n */\r\npublic static TypeReference newTypeParameterReference(final int sort, final int paramIndex) {\r\n    return new TypeReference((sort << 24) | (paramIndex << 16));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newTypeParameterReference(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to a type parameter bound of a generic class or method.\r\n *\r\n * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.\r\n * @param paramIndex the type parameter index.\r\n * @param boundIndex the type bound index within the above type parameters.\r\n * @return a reference to the given generic class or method type parameter bound.\r\n */\r\npublic static TypeReference newTypeParameterBoundReference(final int sort, final int paramIndex, final int boundIndex) {\r\n    return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newTypeParameterBoundReference(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to the super class or to an interface of the 'implements' clause of a\r\n * class.\r\n *\r\n * @param itfIndex the index of an interface in the 'implements' clause of a class, or -1 to\r\n *     reference the super class of the class.\r\n * @return a reference to the given super type of a class.\r\n */\r\npublic static TypeReference newSuperTypeReference(final int itfIndex) {\r\n    return new TypeReference((CLASS_EXTENDS << 24) | ((itfIndex & 0xFFFF) << 8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newSuperTypeReference(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to the type of a formal parameter of a method.\r\n *\r\n * @param paramIndex the formal parameter index.\r\n * @return a reference to the type of the given method formal parameter.\r\n */\r\npublic static TypeReference newFormalParameterReference(final int paramIndex) {\r\n    return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newFormalParameterReference(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newExceptionReference(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to the type of an exception, in a 'throws' clause of a method.\r\n *\r\n * @param exceptionIndex the index of an exception in a 'throws' clause of a method.\r\n * @return a reference to the type of the given exception.\r\n */\r\npublic static TypeReference newExceptionReference(final int exceptionIndex) {\r\n    return new TypeReference((THROWS << 24) | (exceptionIndex << 8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newExceptionReference(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to the type of the exception declared in a 'catch' clause of a method.\r\n *\r\n * @param tryCatchBlockIndex the index of a try catch block (using the order in which they are\r\n *     visited with visitTryCatchBlock).\r\n * @return a reference to the type of the given exception.\r\n */\r\npublic static TypeReference newTryCatchReference(final int tryCatchBlockIndex) {\r\n    return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newTryCatchReference(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns a reference to the type of a type argument in a constructor or method call or\r\n * reference.\r\n *\r\n * @param sort one of {@link #CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link\r\n *     #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link\r\n *     #METHOD_REFERENCE_TYPE_ARGUMENT}.\r\n * @param argIndex the type argument index.\r\n * @return a reference to the type of the given type argument.\r\n */\r\npublic static TypeReference newTypeArgumentReference(final int sort, final int argIndex) {\r\n    return new TypeReference((sort << 24) | argIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#newTypeArgumentReference(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getSort()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the sort of this type reference.\r\n *\r\n * @return one of {@link #CLASS_TYPE_PARAMETER}, {@link #METHOD_TYPE_PARAMETER}, {@link\r\n *     #CLASS_EXTENDS}, {@link #CLASS_TYPE_PARAMETER_BOUND}, {@link #METHOD_TYPE_PARAMETER_BOUND},\r\n *     {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link\r\n *     #METHOD_FORMAL_PARAMETER}, {@link #THROWS}, {@link #LOCAL_VARIABLE}, {@link\r\n *     #RESOURCE_VARIABLE}, {@link #EXCEPTION_PARAMETER}, {@link #INSTANCEOF}, {@link #NEW},\r\n *     {@link #CONSTRUCTOR_REFERENCE}, {@link #METHOD_REFERENCE}, {@link #CAST}, {@link\r\n *     #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link\r\n *     #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.\r\n */\r\npublic int getSort() {\r\n    return targetTypeAndInfo >>> 24;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getSort()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the type parameter referenced by this type reference. This method must\r\n * only be used for type references whose sort is {@link #CLASS_TYPE_PARAMETER}, {@link\r\n * #METHOD_TYPE_PARAMETER}, {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link\r\n * #METHOD_TYPE_PARAMETER_BOUND}.\r\n *\r\n * @return a type parameter index.\r\n */\r\npublic int getTypeParameterIndex() {\r\n    return (targetTypeAndInfo & 0x00FF0000) >> 16;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.TypeReference#getTypeParameterIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.TypeReference#getTypeParameterBoundIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the index of the type parameter bound, within the type parameter {@link\r\n * #getTypeParameterIndex}, referenced by this type reference. This method must only be used for\r\n * type references whose sort is {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link\r\n * #METHOD_TYPE_PARAMETER_BOUND}.\r\n *\r\n * @return a type parameter bound index.\r\n */\r\npublic int getTypeParameterBoundIndex() {\r\n    return (targetTypeAndInfo & 0x0000FF00) >> 8;\r\n}",
    "tailType": "method_code"
  }
]