[
  {
    "head": "org.springframework.core.env.PropertySource#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of this {@code PropertySource}.\r\n * <p>See the {@linkplain PropertySource class-level Javadoc} for details\r\n * on property source identity and names.\r\n */\r\npublic String getName() {\r\n    return this.name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying source object for this {@code PropertySource}.\r\n */\r\npublic T getSource() {\r\n    return this.source;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this {@code PropertySource} contains the given name.\r\n * <p>This implementation simply checks for a {@code null} return value\r\n * from {@link #getProperty(String)}. Subclasses may wish to implement\r\n * a more efficient algorithm if possible.\r\n * @param name the property name to find\r\n */\r\npublic boolean containsProperty(String name) {\r\n    return (getProperty(name) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the value associated with the given name,\r\n * or {@code null} if not found.\r\n * @param name the property to find\r\n * @see PropertyResolver#getRequiredProperty(String)\r\n */\r\n@Nullable\r\npublic abstract Object getProperty(String name);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySource#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This {@code PropertySource} object is equal to the given object if:\r\n * <ul>\r\n * <li>they are the same instance\r\n * <li>the {@code name} properties for both objects are equal\r\n * </ul>\r\n * <p>No properties other than {@code name} are evaluated.\r\n */\r\n@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof PropertySource<?> that && ObjectUtils.nullSafeEquals(getName(), that.getName())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySource#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a hash code derived from the {@code name} property\r\n * of this {@code PropertySource} object.\r\n */\r\n@Override\r\npublic int hashCode() {\r\n    return Objects.hashCode(getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySource#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Produce concise output (type and name) if the current log level does not include\r\n * debug. If debug is enabled, produce verbose output including the hash code of the\r\n * PropertySource instance and every name/value property pair.\r\n * <p>This variable verbosity is useful as a property source such as system properties\r\n * or environment variables may contain an arbitrary number of property pairs,\r\n * potentially leading to difficulties to read exception and log messages.\r\n * @see Log#isDebugEnabled()\r\n */\r\n@Override\r\npublic String toString() {\r\n    if (logger.isDebugEnabled()) {\r\n        return getClass().getSimpleName() + \"@\" + System.identityHashCode(this) + \" {name='\" + getName() + \"', properties=\" + getSource() + \"}\";\r\n    } else {\r\n        return getClass().getSimpleName() + \" {name='\" + getName() + \"'}\";\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySource#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySource#named(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code PropertySource} implementation intended for collection\r\n * comparison purposes only.\r\n * <p>Primarily for internal use, but given a collection of {@code PropertySource}\r\n * objects, may be used as follows:\r\n * <pre class=\"code\">\r\n * List&lt;PropertySource&lt;?&gt;&gt; sources = new ArrayList&lt;&gt;();\r\n * sources.add(new MapPropertySource(\"sourceA\", mapA));\r\n * sources.add(new MapPropertySource(\"sourceB\", mapB));\r\n * assert sources.contains(PropertySource.named(\"sourceA\"));\r\n * assert sources.contains(PropertySource.named(\"sourceB\"));\r\n * assert !sources.contains(PropertySource.named(\"sourceC\"));</pre>\r\n * <p>The returned {@code PropertySource} will throw {@code UnsupportedOperationException}\r\n * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}\r\n * are called.\r\n * @param name the name of the comparison {@code PropertySource} to be created\r\n * and returned\r\n */\r\npublic static PropertySource<?> named(String name) {\r\n    return new ComparisonPropertySource(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySource#named(String)",
    "tailType": "method"
  }
]