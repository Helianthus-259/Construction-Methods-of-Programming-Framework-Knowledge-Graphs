[
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Environment#matchesProfiles(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Environment#acceptsProfiles(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether one or more of the given profiles is active &mdash; or\r\n * in the case of no explicit {@linkplain #getActiveProfiles() active profiles},\r\n * whether one or more of the given profiles is included in the set of\r\n * {@linkplain #getDefaultProfiles() default profiles}.\r\n * <p>If a profile begins with '!' the logic is inverted, meaning this method\r\n * will return {@code true} if the given profile is <em>not</em> active. For\r\n * example, {@code env.acceptsProfiles(\"p1\", \"!p2\")} will return {@code true}\r\n * if profile 'p1' is active or 'p2' is not active.\r\n * @throws IllegalArgumentException if called with a {@code null} array, an\r\n * empty array, zero arguments or if any profile is {@code null}, empty, or\r\n * whitespace only\r\n * @see #getActiveProfiles\r\n * @see #getDefaultProfiles\r\n * @see #matchesProfiles(String...)\r\n * @see #acceptsProfiles(Profiles)\r\n * @deprecated as of 5.1 in favor of {@link #acceptsProfiles(Profiles)} or\r\n * {@link #matchesProfiles(String...)}\r\n */\r\n@Deprecated\r\nboolean acceptsProfiles(String... profiles);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Environment#acceptsProfiles(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Environment#acceptsProfiles(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.Environment#acceptsProfiles(Profiles)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given {@link Profiles} predicate matches the\r\n * {@linkplain #getActiveProfiles() active profiles} &mdash; or in the case\r\n * of no explicit active profiles, whether the given {@code Profiles} predicate\r\n * matches the {@linkplain #getDefaultProfiles() default profiles}.\r\n * <p>If you wish provide profile expressions directly as strings, use\r\n * {@link #matchesProfiles(String...)} instead.\r\n * @since 5.1\r\n * @see #matchesProfiles(String...)\r\n * @see Profiles#of(String...)\r\n */\r\nboolean acceptsProfiles(Profiles profiles);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.Environment#acceptsProfiles(Profiles)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.Environment",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertyResolver",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.EnvironmentCapable",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.EnvironmentCapable",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\n/**\n * Interface indicating a component that contains and exposes an {@link Environment} reference.\n *\n * <p>All Spring application contexts are EnvironmentCapable, and the interface is used primarily\n * for performing {@code instanceof} checks in framework methods that accept BeanFactory\n * instances that may or may not actually be ApplicationContext instances in order to interact\n * with the environment if indeed it is available.\n *\n * <p>As mentioned, {@link org.springframework.context.ApplicationContext ApplicationContext}\n * extends EnvironmentCapable, and thus exposes a {@link #getEnvironment()} method; however,\n * {@link org.springframework.context.ConfigurableApplicationContext ConfigurableApplicationContext}\n * redefines {@link org.springframework.context.ConfigurableApplicationContext#getEnvironment\n * getEnvironment()} and narrows the signature to return a {@link ConfigurableEnvironment}.\n * The effect is that an Environment object is 'read-only' until it is being accessed from\n * a ConfigurableApplicationContext, at which point it too may be configured.\n *\n * @author Chris Beams\n * @since 3.1\n * @see Environment\n * @see ConfigurableEnvironment\n * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment()\n */\npublic interface EnvironmentCapable {\n\n\t/**\n\t * Return the {@link Environment} associated with this component.\n\t */\n\tEnvironment getEnvironment();\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.EnvironmentCapable#getEnvironment()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@link Environment} associated with this component.\r\n */\r\nEnvironment getEnvironment();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.EnvironmentCapable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.EnvironmentCapable#getEnvironment()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.env",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.env;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport joptsimple.OptionSet;\nimport joptsimple.OptionSpec;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/**\n * {@link CommandLinePropertySource} implementation backed by a JOpt {@link OptionSet}.\n *\n * <h2>Typical usage</h2>\n *\n * Configure and execute an {@code OptionParser} against the {@code String[]} of arguments\n * supplied to the {@code main} method, and create a {@link JOptCommandLinePropertySource}\n * using the resulting {@code OptionSet} object:\n *\n * <pre class=\"code\">\n * public static void main(String[] args) {\n *     OptionParser parser = new OptionParser();\n *     parser.accepts(\"option1\");\n *     parser.accepts(\"option2\").withRequiredArg();\n *     OptionSet options = parser.parse(args);\n *     PropertySource&lt;?&gt; ps = new JOptCommandLinePropertySource(options);\n *     // ...\n * }</pre>\n *\n * <p>If an option has several representations, the most descriptive is expected\n * to be set last, and is used as the property name of the associated\n * {@link EnumerablePropertySource#getPropertyNames()}.\n *\n * <p>See {@link CommandLinePropertySource} for complete general usage examples.\n *\n * <p>Requires JOpt Simple version 4.3 or higher. Tested against JOpt up until 5.0.\n *\n * @author Chris Beams\n * @author Juergen Hoeller\n * @author Dave Syer\n * @since 3.1\n * @see CommandLinePropertySource\n * @see joptsimple.OptionParser\n * @see joptsimple.OptionSet\n * @deprecated since 6.1 with no plans for a replacement\n */\n@Deprecated(since = \"6.1\")\npublic class JOptCommandLinePropertySource extends CommandLinePropertySource<OptionSet> {\n\n\t/**\n\t * Create a new {@code JOptCommandLinePropertySource} having the default name\n\t * and backed by the given {@code OptionSet}.\n\t * @see CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME\n\t * @see CommandLinePropertySource#CommandLinePropertySource(Object)\n\t */\n\tpublic JOptCommandLinePropertySource(OptionSet options) {\n\t\tsuper(options);\n\t}\n\n\t/**\n\t * Create a new {@code JOptCommandLinePropertySource} having the given name\n\t * and backed by the given {@code OptionSet}.\n\t */\n\tpublic JOptCommandLinePropertySource(String name, OptionSet options) {\n\t\tsuper(name, options);\n\t}\n\n\n\t@Override\n\tprotected boolean containsOption(String name) {\n\t\treturn this.source.has(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\tList<String> names = new ArrayList<>();\n\t\tfor (OptionSpec<?> spec : this.source.specs()) {\n\t\t\t// Last option is expected to be the most descriptive.\n\t\t\tString lastOption = CollectionUtils.lastElement(spec.options());\n\t\t\tif (lastOption != null) {\n\t\t\t\tnames.add(lastOption);\n\t\t\t}\n\t\t}\n\t\treturn StringUtils.toStringArray(names);\n\t}\n\n\t@Override\n\tpublic @Nullable List<String> getOptionValues(String name) {\n\t\tList<?> argValues = this.source.valuesOf(name);\n\t\tList<String> stringArgValues = new ArrayList<>();\n\t\tfor (Object argValue : argValues) {\n\t\t\tstringArgValues.add(argValue.toString());\n\t\t}\n\t\tif (stringArgValues.isEmpty()) {\n\t\t\treturn (this.source.has(name) ? Collections.emptyList() : null);\n\t\t}\n\t\treturn Collections.unmodifiableList(stringArgValues);\n\t}\n\n\t@Override\n\tprotected List<String> getNonOptionArgs() {\n\t\tList<?> argValues = this.source.nonOptionArguments();\n\t\tList<String> stringArgValues = new ArrayList<>();\n\t\tfor (Object argValue : argValues) {\n\t\t\tstringArgValues.add(argValue.toString());\n\t\t}\n\t\treturn (stringArgValues.isEmpty() ? Collections.emptyList() :\n\t\t\t\tCollections.unmodifiableList(stringArgValues));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#containsOption(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean containsOption(String name) {\r\n    return this.source.has(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.JOptCommandLinePropertySource#containsOption(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#containsOption(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.JOptCommandLinePropertySource#getPropertyNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String[] getPropertyNames() {\r\n    List<String> names = new ArrayList<>();\r\n    for (OptionSpec<?> spec : this.source.specs()) {\r\n        // Last option is expected to be the most descriptive.\r\n        String lastOption = CollectionUtils.lastElement(spec.options());\r\n        if (lastOption != null) {\r\n            names.add(lastOption);\r\n        }\r\n    }\r\n    return StringUtils.toStringArray(names);\r\n}",
    "tailType": "method_code"
  }
]