[
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_SET",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_SET_BY_INDEX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_SET_BY_INDEX",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_BY_INDEX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_BY_INDEX",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_TYPES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_TYPES",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_NAMES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#PROVIDER_GET_NAMES",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#access",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#access",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#fields",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#fields",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isAbstract(access)) {\r\n        interfaces = TypeUtils.add(interfaces, FIELD_PROVIDER);\r\n    }\r\n    this.access = access;\r\n    fields = new HashMap();\r\n    super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void declare_field(int access, String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    if (!TypeUtils.isStatic(access)) {\r\n        fields.put(name, type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.FieldProviderTransformer#end_class()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void end_class() {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        try {\r\n            generate();\r\n        } catch (RuntimeException e) {\r\n            throw e;\r\n        } catch (Exception e) {\r\n            throw new CodeGenerationException(e);\r\n        }\r\n    }\r\n    super.end_class();\r\n}",
    "tailType": "method_code"
  }
]