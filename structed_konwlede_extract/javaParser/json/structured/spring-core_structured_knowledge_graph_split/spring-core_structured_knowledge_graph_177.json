[
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparableComparatorTests#comparableComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests#comparableComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests#shouldNeedComparable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid shouldNeedComparable() {\r\n    @SuppressWarnings(\"deprecation\")\r\n    Comparator c = new ComparableComparator();\r\n    Object o1 = new Object();\r\n    Object o2 = new Object();\r\n    assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> c.compare(o1, o2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparableComparatorTests#shouldNeedComparable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests#shouldNeedComparable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparableComparatorTests#shouldNeedComparable()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.ComparatorsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link Comparators}.\n *\n * @since 6.1.2\n * @author Mathieu Amblard\n * @author Sam Brannen\n */\nclass ComparatorsTests {\n\n\t@Test\n\tvoid nullsLow() {\n\t\tassertThat(Comparators.nullsLow().compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(Comparators.nullsLow().compare(null, null)).isZero();\n\t\tassertThat(Comparators.nullsLow().compare(null, \"boo\")).isNegative();\n\t\tassertThat(Comparators.nullsLow().compare(\"boo\", null)).isPositive();\n\t}\n\n\t@Test\n\tvoid nullsLowWithExplicitComparator() {\n\t\tassertThat(Comparators.nullsLow(String::compareTo).compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(Comparators.nullsLow(String::compareTo).compare(null, null)).isZero();\n\t\tassertThat(Comparators.nullsLow(String::compareTo).compare(null, \"boo\")).isNegative();\n\t\tassertThat(Comparators.nullsLow(String::compareTo).compare(\"boo\", null)).isPositive();\n\t}\n\n\t@Test\n\tvoid nullsHigh() {\n\t\tassertThat(Comparators.nullsHigh().compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(Comparators.nullsHigh().compare(null, null)).isZero();\n\t\tassertThat(Comparators.nullsHigh().compare(null, \"boo\")).isPositive();\n\t\tassertThat(Comparators.nullsHigh().compare(\"boo\", null)).isNegative();\n\t}\n\n\t@Test\n\tvoid nullsHighWithExplicitComparator() {\n\t\tassertThat(Comparators.nullsHigh(String::compareTo).compare(\"boo\", \"boo\")).isZero();\n\t\tassertThat(Comparators.nullsHigh(String::compareTo).compare(null, null)).isZero();\n\t\tassertThat(Comparators.nullsHigh(String::compareTo).compare(null, \"boo\")).isPositive();\n\t\tassertThat(Comparators.nullsHigh(String::compareTo).compare(\"boo\", null)).isNegative();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsLow()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullsLow() {\r\n    assertThat(Comparators.nullsLow().compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(Comparators.nullsLow().compare(null, null)).isZero();\r\n    assertThat(Comparators.nullsLow().compare(null, \"boo\")).isNegative();\r\n    assertThat(Comparators.nullsLow().compare(\"boo\", null)).isPositive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparatorsTests#nullsLow()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsLow()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsLowWithExplicitComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullsLowWithExplicitComparator() {\r\n    assertThat(Comparators.nullsLow(String::compareTo).compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(Comparators.nullsLow(String::compareTo).compare(null, null)).isZero();\r\n    assertThat(Comparators.nullsLow(String::compareTo).compare(null, \"boo\")).isNegative();\r\n    assertThat(Comparators.nullsLow(String::compareTo).compare(\"boo\", null)).isPositive();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparatorsTests#nullsLowWithExplicitComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsLowWithExplicitComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsHigh()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullsHigh() {\r\n    assertThat(Comparators.nullsHigh().compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(Comparators.nullsHigh().compare(null, null)).isZero();\r\n    assertThat(Comparators.nullsHigh().compare(null, \"boo\")).isPositive();\r\n    assertThat(Comparators.nullsHigh().compare(\"boo\", null)).isNegative();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparatorsTests#nullsHigh()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsHigh()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsHighWithExplicitComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid nullsHighWithExplicitComparator() {\r\n    assertThat(Comparators.nullsHigh(String::compareTo).compare(\"boo\", \"boo\")).isZero();\r\n    assertThat(Comparators.nullsHigh(String::compareTo).compare(null, null)).isZero();\r\n    assertThat(Comparators.nullsHigh(String::compareTo).compare(null, \"boo\")).isPositive();\r\n    assertThat(Comparators.nullsHigh(String::compareTo).compare(\"boo\", null)).isNegative();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.ComparatorsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.ComparatorsTests#nullsHighWithExplicitComparator()",
    "tailType": "method"
  }
]