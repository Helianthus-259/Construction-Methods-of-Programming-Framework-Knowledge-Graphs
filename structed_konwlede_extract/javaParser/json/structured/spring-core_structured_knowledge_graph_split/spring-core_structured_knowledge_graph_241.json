[
  {
    "head": "org.springframework.util.function",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.function.ThrowingSupplierTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.function;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link ThrowingSupplier}.\n *\n * @author Phillip Webb\n * @since 6.0\n */\nclass ThrowingSupplierTests {\n\n\t@Test\n\tvoid getWhenThrowingUncheckedExceptionThrowsOriginal() {\n\t\tThrowingSupplier<Object> supplier = this::throwIllegalArgumentException;\n\t\tassertThatIllegalArgumentException().isThrownBy(supplier::get);\n\t}\n\n\t@Test\n\tvoid getWhenThrowingCheckedExceptionThrowsWrapperRuntimeException() {\n\t\tThrowingSupplier<Object> supplier = this::throwIOException;\n\t\tassertThatExceptionOfType(RuntimeException.class).isThrownBy(\n\t\t\t\tsupplier::get).withCauseInstanceOf(IOException.class);\n\t}\n\n\t@Test\n\tvoid getWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal() {\n\t\tThrowingSupplier<Object> supplier = this::throwIllegalArgumentException;\n\t\tassertThatIllegalArgumentException().isThrownBy(\n\t\t\t\t() -> supplier.get(IllegalStateException::new));\n\t}\n\n\t@Test\n\tvoid getWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper() {\n\t\tThrowingSupplier<Object> supplier = this::throwIOException;\n\t\tassertThatIllegalStateException().isThrownBy(\n\t\t\t\t() -> supplier.get(IllegalStateException::new)).withCauseInstanceOf(\n\t\t\t\t\t\tIOException.class);\n\t}\n\n\t@Test\n\tvoid throwingModifiesThrownException() {\n\t\tThrowingSupplier<Object> supplier = this::throwIOException;\n\t\tThrowingSupplier<Object> modified = supplier.throwing(\n\t\t\t\tIllegalStateException::new);\n\t\tassertThatIllegalStateException().isThrownBy(\n\t\t\t\tmodified::get).withCauseInstanceOf(IOException.class);\n\t}\n\n\t@Test\n\tvoid ofModifiesThrowException() {\n\t\tThrowingSupplier<Object> supplier = ThrowingSupplier.of(\n\t\t\t\tthis::throwIOException, IllegalStateException::new);\n\t\tassertThatIllegalStateException().isThrownBy(\n\t\t\t\tsupplier::get).withCauseInstanceOf(IOException.class);\n\t}\n\n\tprivate Object throwIOException() throws IOException {\n\t\tthrow new IOException();\n\t}\n\n\tprivate Object throwIllegalArgumentException() {\n\t\tthrow new IllegalArgumentException();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWhenThrowingUncheckedExceptionThrowsOriginal() {\r\n    ThrowingSupplier<Object> supplier = this::throwIllegalArgumentException;\r\n    assertThatIllegalArgumentException().isThrownBy(supplier::get);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingUncheckedExceptionThrowsOriginal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingCheckedExceptionThrowsWrapperRuntimeException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWhenThrowingCheckedExceptionThrowsWrapperRuntimeException() {\r\n    ThrowingSupplier<Object> supplier = this::throwIOException;\r\n    assertThatExceptionOfType(RuntimeException.class).isThrownBy(supplier::get).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingCheckedExceptionThrowsWrapperRuntimeException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWhenThrowingCheckedExceptionThrowsWrapperRuntimeException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal() {\r\n    ThrowingSupplier<Object> supplier = this::throwIllegalArgumentException;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> supplier.get(IllegalStateException::new));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingUncheckedExceptionThrowsOriginal()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper() {\r\n    ThrowingSupplier<Object> supplier = this::throwIOException;\r\n    assertThatIllegalStateException().isThrownBy(() -> supplier.get(IllegalStateException::new)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#getWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid throwingModifiesThrownException() {\r\n    ThrowingSupplier<Object> supplier = this::throwIOException;\r\n    ThrowingSupplier<Object> modified = supplier.throwing(IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(modified::get).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#throwingModifiesThrownException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#ofModifiesThrowException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofModifiesThrowException() {\r\n    ThrowingSupplier<Object> supplier = ThrowingSupplier.of(this::throwIOException, IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(supplier::get).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingSupplierTests#ofModifiesThrowException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingSupplierTests#ofModifiesThrowException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]