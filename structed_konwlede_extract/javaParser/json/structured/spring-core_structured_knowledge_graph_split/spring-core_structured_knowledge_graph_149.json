[
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArraysInternalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forNameWithPrimitiveArraysInternalName() throws ClassNotFoundException {\r\n    assertThat(ClassUtils.forName(boolean[].class.getName(), classLoader)).isEqualTo(boolean[].class);\r\n    assertThat(ClassUtils.forName(byte[].class.getName(), classLoader)).isEqualTo(byte[].class);\r\n    assertThat(ClassUtils.forName(char[].class.getName(), classLoader)).isEqualTo(char[].class);\r\n    assertThat(ClassUtils.forName(short[].class.getName(), classLoader)).isEqualTo(short[].class);\r\n    assertThat(ClassUtils.forName(int[].class.getName(), classLoader)).isEqualTo(int[].class);\r\n    assertThat(ClassUtils.forName(long[].class.getName(), classLoader)).isEqualTo(long[].class);\r\n    assertThat(ClassUtils.forName(float[].class.getName(), classLoader)).isEqualTo(float[].class);\r\n    assertThat(ClassUtils.forName(double[].class.getName(), classLoader)).isEqualTo(double[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArraysInternalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#forNameWithPrimitiveArraysInternalName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isCacheSafe()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isCacheSafe() {\r\n    ClassLoader childLoader1 = new ClassLoader(classLoader) ;;\r\n    ClassLoader childLoader2 = new ClassLoader(classLoader) ;;\r\n    ClassLoader childLoader3 = new ClassLoader(classLoader) {\r\n\r\n        @Override\r\n        public Class<?> loadClass(String name) throws ClassNotFoundException {\r\n            return childLoader1.loadClass(name);\r\n        }\r\n    };\r\n    Class<?> composite = ClassUtils.createCompositeInterface(new Class<?>[] { Serializable.class, Externalizable.class }, childLoader1);\r\n    assertThat(ClassUtils.isCacheSafe(String.class, null)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(String.class, classLoader)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(String.class, childLoader1)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(String.class, childLoader2)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(String.class, childLoader3)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(NestedClass.class, null)).isFalse();\r\n    assertThat(ClassUtils.isCacheSafe(NestedClass.class, classLoader)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(NestedClass.class, childLoader1)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(NestedClass.class, childLoader2)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(NestedClass.class, childLoader3)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(composite, null)).isFalse();\r\n    assertThat(ClassUtils.isCacheSafe(composite, classLoader)).isFalse();\r\n    assertThat(ClassUtils.isCacheSafe(composite, childLoader1)).isTrue();\r\n    assertThat(ClassUtils.isCacheSafe(composite, childLoader2)).isFalse();\r\n    assertThat(ClassUtils.isCacheSafe(composite, childLoader3)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isCacheSafe()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isCacheSafe()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#resolvePrimitiveClassName(String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest(name = \"''{0}'' -> {1}\")\r\n@CsvSource(textBlock = \"\"\"\r\n    boolean, boolean\r\n    byte, byte\r\n    char, char\r\n    short, short\r\n    int, int\r\n    long, long\r\n    float, float\r\n    double, double\r\n    [Z, boolean[]\r\n    [B, byte[]\r\n    [C, char[]\r\n    [S, short[]\r\n    [I, int[]\r\n    [J, long[]\r\n    [F, float[]\r\n    [D, double[]\r\n    \"\"\")\r\nvoid resolvePrimitiveClassName(String input, Class<?> output) {\r\n    assertThat(ClassUtils.resolvePrimitiveClassName(input)).isEqualTo(output);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#resolvePrimitiveClassName(String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#resolvePrimitiveClassName(String,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#resolvePrimitiveClassName(String,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@CsvSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortName() {\r\n    String className = ClassUtils.getShortName(getClass());\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"ClassUtilsTests\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForObjectArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameForObjectArrayClass() {\r\n    String className = ClassUtils.getShortName(Object[].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"Object[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameForObjectArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForObjectArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalObjectArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameForMultiDimensionalObjectArrayClass() {\r\n    String className = ClassUtils.getShortName(Object[][].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"Object[][]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalObjectArrayClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForMultiDimensionalObjectArrayClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getShortNameForPrimitiveArrayClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getShortNameForPrimitiveArrayClass() {\r\n    String className = ClassUtils.getShortName(byte[].class);\r\n    assertThat(className).as(\"Class name did not match\").isEqualTo(\"byte[]\");\r\n}",
    "tailType": "method_code"
  }
]