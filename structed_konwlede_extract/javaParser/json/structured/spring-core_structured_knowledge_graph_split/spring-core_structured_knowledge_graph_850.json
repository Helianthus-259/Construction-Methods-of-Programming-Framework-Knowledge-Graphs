[
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getFieldCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Exposes the field cache to subclasses:\r\n * a Map from String field name to object value.\r\n */\r\nprotected final Map<String, Object> getFieldCache() {\r\n    return this.fieldCache;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getFieldCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#asNumber(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a constant value cast to a Number.\r\n * @param code the name of the field (never {@code null})\r\n * @return the Number value\r\n * @throws ConstantException if the field name wasn't found\r\n * or if the type wasn't compatible with Number\r\n * @see #asObject\r\n */\r\npublic Number asNumber(String code) throws ConstantException {\r\n    Object obj = asObject(code);\r\n    if (!(obj instanceof Number number)) {\r\n        throw new ConstantException(this.className, code, \"not a Number\");\r\n    }\r\n    return number;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#asNumber(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#asString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a constant value as a String.\r\n * @param code the name of the field (never {@code null})\r\n * @return the String value\r\n * Works even if it's not a string (invokes {@code toString()}).\r\n * @throws ConstantException if the field name wasn't found\r\n * @see #asObject\r\n */\r\npublic String asString(String code) throws ConstantException {\r\n    return asObject(code).toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#asString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#asObject(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Parse the given String (upper or lower case accepted) and return\r\n * the appropriate value if it's the name of a constant field in the\r\n * class that we're analyzing.\r\n * @param code the name of the field (never {@code null})\r\n * @return the Object value\r\n * @throws ConstantException if there's no such field\r\n */\r\npublic Object asObject(String code) throws ConstantException {\r\n    Assert.notNull(code, \"Code must not be null\");\r\n    String codeToUse = code.toUpperCase(Locale.ENGLISH);\r\n    Object val = this.fieldCache.get(codeToUse);\r\n    if (val == null) {\r\n        throw new ConstantException(this.className, codeToUse, \"not found\");\r\n    }\r\n    return val;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#asObject(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getNames(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all names of the given group of constants.\r\n * <p>Note that this method assumes that constants are named\r\n * in accordance with the standard Java convention for constant\r\n * values (i.e. all uppercase). The supplied {@code namePrefix}\r\n * will be uppercased (in a locale-insensitive fashion) prior to\r\n * the main logic of this method kicking in.\r\n * @param namePrefix prefix of the constant names to search (may be {@code null})\r\n * @return the set of constant names\r\n */\r\npublic Set<String> getNames(@Nullable String namePrefix) {\r\n    String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : \"\");\r\n    Set<String> names = new HashSet<>();\r\n    for (String code : this.fieldCache.keySet()) {\r\n        if (code.startsWith(prefixToUse)) {\r\n            names.add(code);\r\n        }\r\n    }\r\n    return names;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getNames(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getNamesForProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all names of the group of constants for the\r\n * given bean property name.\r\n * @param propertyName the name of the bean property\r\n * @return the set of values\r\n * @see #propertyToConstantNamePrefix\r\n */\r\npublic Set<String> getNamesForProperty(String propertyName) {\r\n    return getNames(propertyToConstantNamePrefix(propertyName));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getNamesForProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getNamesForSuffix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all names of the given group of constants.\r\n * <p>Note that this method assumes that constants are named\r\n * in accordance with the standard Java convention for constant\r\n * values (i.e. all uppercase). The supplied {@code nameSuffix}\r\n * will be uppercased (in a locale-insensitive fashion) prior to\r\n * the main logic of this method kicking in.\r\n * @param nameSuffix suffix of the constant names to search (may be {@code null})\r\n * @return the set of constant names\r\n */\r\npublic Set<String> getNamesForSuffix(@Nullable String nameSuffix) {\r\n    String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : \"\");\r\n    Set<String> names = new HashSet<>();\r\n    for (String code : this.fieldCache.keySet()) {\r\n        if (code.endsWith(suffixToUse)) {\r\n            names.add(code);\r\n        }\r\n    }\r\n    return names;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getNamesForSuffix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getValues(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all values of the given group of constants.\r\n * <p>Note that this method assumes that constants are named\r\n * in accordance with the standard Java convention for constant\r\n * values (i.e. all uppercase). The supplied {@code namePrefix}\r\n * will be uppercased (in a locale-insensitive fashion) prior to\r\n * the main logic of this method kicking in.\r\n * @param namePrefix prefix of the constant names to search (may be {@code null})\r\n * @return the set of values\r\n */\r\npublic Set<Object> getValues(@Nullable String namePrefix) {\r\n    String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : \"\");\r\n    Set<Object> values = new HashSet<>();\r\n    this.fieldCache.forEach((code, value) -> {\r\n        if (code.startsWith(prefixToUse)) {\r\n            values.add(value);\r\n        }\r\n    });\r\n    return values;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getValues(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getValuesForProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all values of the group of constants for the\r\n * given bean property name.\r\n * @param propertyName the name of the bean property\r\n * @return the set of values\r\n * @see #propertyToConstantNamePrefix\r\n */\r\npublic Set<Object> getValuesForProperty(String propertyName) {\r\n    return getValues(propertyToConstantNamePrefix(propertyName));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.Constants",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.Constants#getValuesForProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.Constants#getValuesForSuffix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all values of the given group of constants.\r\n * <p>Note that this method assumes that constants are named\r\n * in accordance with the standard Java convention for constant\r\n * values (i.e. all uppercase). The supplied {@code nameSuffix}\r\n * will be uppercased (in a locale-insensitive fashion) prior to\r\n * the main logic of this method kicking in.\r\n * @param nameSuffix suffix of the constant names to search (may be {@code null})\r\n * @return the set of values\r\n */\r\npublic Set<Object> getValuesForSuffix(@Nullable String nameSuffix) {\r\n    String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : \"\");\r\n    Set<Object> values = new HashSet<>();\r\n    this.fieldCache.forEach((code, value) -> {\r\n        if (code.endsWith(suffixToUse)) {\r\n            values.add(value);\r\n        }\r\n    });\r\n    return values;\r\n}",
    "tailType": "method_code"
  }
]