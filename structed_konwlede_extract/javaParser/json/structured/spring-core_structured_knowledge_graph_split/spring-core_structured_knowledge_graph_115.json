[
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,Class<?>,MemberCategory[])",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void registerReflectionHints(ReflectionHints hints, Class<?> target, MemberCategory[] memberCategories) {\r\n    hints.registerType(target, type -> type.withMembers(memberCategories));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#registerReflectionHints(ReflectionHints,Class<?>,MemberCategory[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#loadClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Class<?> loadClass(String className) {\r\n    try {\r\n        return ClassUtils.forName(className, getClass().getClassLoader());\r\n    } catch (Exception ex) {\r\n        if (logger.isWarnEnabled()) {\r\n            logger.warn(\"Ignoring '\" + className + \"': \" + ex);\r\n        }\r\n        return null;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#loadClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.annotation.RegisterReflectionReflectiveProcessor#loadClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.tests.sample.objects",
    "tailType": "package"
  },
  {
    "head": "org.springframework.tests.sample.objects",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.tests.sample.objects.TestObject",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "tailType": "class"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.tests.sample.objects;\n\npublic class TestObject implements ITestObject, ITestInterface, Comparable<Object> {\n\n\tprivate String name;\n\n\tprivate int age;\n\n\tprivate TestObject spouse;\n\n\tpublic TestObject() {\n\t}\n\n\tpublic TestObject(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t@Override\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic int getAge() {\n\t\treturn this.age;\n\t}\n\n\t@Override\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic TestObject getSpouse() {\n\t\treturn this.spouse;\n\t}\n\n\t@Override\n\tpublic void setSpouse(TestObject spouse) {\n\t\tthis.spouse = spouse;\n\t}\n\n\t@Override\n\tpublic void absquatulate() {\n\t}\n\n\t@Override\n\tpublic int compareTo(Object o) {\n\t\tif (this.name != null && o instanceof TestObject) {\n\t\t\treturn this.name.compareTo(((TestObject) o).getName());\n\t\t}\n\t\telse {\n\t\t\treturn 1;\n\t\t}\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.tests.sample.objects.TestObject#name",
    "tailType": "field"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#name",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.tests.sample.objects.TestObject#age",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.annotation.SimpleReflectiveProcessor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.annotation;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\nimport org.springframework.aot.hint.ExecutableMode;\nimport org.springframework.aot.hint.ReflectionHints;\n\n/**\n * A simple {@link ReflectiveProcessor} implementation that registers only a\n * reflection hint for the annotated type. Can be sub-classed to customize\n * processing for a given {@link AnnotatedElement} type.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic class SimpleReflectiveProcessor implements ReflectiveProcessor {\n\n\t@Override\n\tpublic void registerReflectionHints(ReflectionHints hints, AnnotatedElement element) {\n\t\tif (element instanceof Class<?> type) {\n\t\t\tregisterTypeHint(hints, type);\n\t\t}\n\t\telse if (element instanceof Constructor<?> constructor) {\n\t\t\tregisterConstructorHint(hints, constructor);\n\t\t}\n\t\telse if (element instanceof Field field) {\n\t\t\tregisterFieldHint(hints, field);\n\t\t}\n\t\telse if (element instanceof Method method) {\n\t\t\tregisterMethodHint(hints, method);\n\t\t}\n\t}\n\n\t/**\n\t * Register {@link ReflectionHints} against the specified {@link Class}.\n\t * @param hints the reflection hints instance to use\n\t * @param type the class to process\n\t */\n\tprotected void registerTypeHint(ReflectionHints hints, Class<?> type) {\n\t\thints.registerType(type);\n\t}\n\n\t/**\n\t * Register {@link ReflectionHints} against the specified {@link Constructor}.\n\t * @param hints the reflection hints instance to use\n\t * @param constructor the constructor to process\n\t */\n\tprotected void registerConstructorHint(ReflectionHints hints, Constructor<?> constructor) {\n\t\thints.registerConstructor(constructor, ExecutableMode.INVOKE);\n\t}\n\n\t/**\n\t * Register {@link ReflectionHints} against the specified {@link Field}.\n\t * @param hints the reflection hints instance to use\n\t * @param field the field to process\n\t */\n\tprotected void registerFieldHint(ReflectionHints hints, Field field) {\n\t\thints.registerField(field);\n\t}\n\n\t/**\n\t * Register {@link ReflectionHints} against the specified {@link Method}.\n\t * @param hints the reflection hints instance to use\n\t * @param method the method to process\n\t */\n\tprotected void registerMethodHint(ReflectionHints hints, Method method) {\n\t\thints.registerMethod(method, ExecutableMode.INVOKE);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#age",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.tests.sample.objects.TestObject#spouse",
    "tailType": "field"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#spouse",
    "headType": "field",
    "relation": "haveType",
    "tail": "TestObject",
    "tailType": "type"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getName() {\r\n    return name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.tests.sample.objects.TestObject#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.tests.sample.objects.TestObject#getName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]