[
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#classPackageAsResourcePath(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#classNamesToString(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a String that consists of the names of the classes/interfaces\r\n * in the given array.\r\n * <p>Basically like {@code AbstractCollection.toString()}, but stripping\r\n * the \"class \"/\"interface \" prefix before every class name.\r\n * @param classes an array of Class objects\r\n * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"\r\n * @see java.util.AbstractCollection#toString()\r\n */\r\npublic static String classNamesToString(Class<?>... classes) {\r\n    return classNamesToString(Arrays.asList(classes));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#classNamesToString(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#classNamesToString(Collection<Class<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Build a String that consists of the names of the classes/interfaces\r\n * in the given collection.\r\n * <p>Basically like {@code AbstractCollection.toString()}, but stripping\r\n * the \"class \"/\"interface \" prefix before every class name.\r\n * @param classes a Collection of Class objects (can be {@code null})\r\n * @return a String of form \"[com.foo.Bar, com.foo.Baz]\"\r\n * @see java.util.AbstractCollection#toString()\r\n */\r\npublic static String classNamesToString(@Nullable Collection<Class<?>> classes) {\r\n    if (CollectionUtils.isEmpty(classes)) {\r\n        return \"[]\";\r\n    }\r\n    StringJoiner stringJoiner = new StringJoiner(\", \", \"[\", \"]\");\r\n    for (Class<?> clazz : classes) {\r\n        stringJoiner.add(clazz.getName());\r\n    }\r\n    return stringJoiner.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#classNamesToString(Collection<Class<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#toClassArray(Collection<Class<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Copy the given {@code Collection} into a {@code Class} array.\r\n * <p>The {@code Collection} must contain {@code Class} elements only.\r\n * @param collection the {@code Collection} to copy\r\n * @return the {@code Class} array\r\n * @since 3.1\r\n * @see StringUtils#toStringArray\r\n */\r\npublic static Class<?>[] toClassArray(@Nullable Collection<Class<?>> collection) {\r\n    return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_CLASS_ARRAY) : EMPTY_CLASS_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#toClassArray(Collection<Class<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfaces(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given instance implements as an array,\r\n * including ones implemented by superclasses.\r\n * @param instance the instance to analyze for interfaces\r\n * @return all interfaces that the given instance implements as an array\r\n */\r\npublic static Class<?>[] getAllInterfaces(Object instance) {\r\n    Assert.notNull(instance, \"Instance must not be null\");\r\n    return getAllInterfacesForClass(instance.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfaces(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfacesForClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given class implements as an array,\r\n * including ones implemented by superclasses.\r\n * <p>If the class itself is an interface, it gets returned as sole interface.\r\n * @param clazz the class to analyze for interfaces\r\n * @return all interfaces that the given object implements as an array\r\n */\r\npublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {\r\n    return getAllInterfacesForClass(clazz, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfacesForClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfacesForClass(Class<?>,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given class implements as an array,\r\n * including ones implemented by superclasses.\r\n * <p>If the class itself is an interface, it gets returned as sole interface.\r\n * @param clazz the class to analyze for interfaces\r\n * @param classLoader the ClassLoader that the interfaces need to be visible in\r\n * (can be {@code null} when accepting all declared interfaces)\r\n * @return all interfaces that the given object implements as an array\r\n */\r\npublic static Class<?>[] getAllInterfacesForClass(Class<?> clazz, @Nullable ClassLoader classLoader) {\r\n    return toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfacesForClass(Class<?>,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfacesAsSet(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given instance implements as a Set,\r\n * including ones implemented by superclasses.\r\n * @param instance the instance to analyze for interfaces\r\n * @return all interfaces that the given instance implements as a Set\r\n */\r\npublic static Set<Class<?>> getAllInterfacesAsSet(Object instance) {\r\n    Assert.notNull(instance, \"Instance must not be null\");\r\n    return getAllInterfacesForClassAsSet(instance.getClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfacesAsSet(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfacesForClassAsSet(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given class implements as a Set,\r\n * including ones implemented by superclasses.\r\n * <p>If the class itself is an interface, it gets returned as sole interface.\r\n * @param clazz the class to analyze for interfaces\r\n * @return all interfaces that the given object implements as a Set\r\n */\r\npublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {\r\n    return getAllInterfacesForClassAsSet(clazz, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfacesForClassAsSet(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#getAllInterfacesForClassAsSet(Class<?>,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all interfaces that the given class implements as a Set,\r\n * including ones implemented by superclasses.\r\n * <p>If the class itself is an interface, it gets returned as sole interface.\r\n * @param clazz the class to analyze for interfaces\r\n * @param classLoader the ClassLoader that the interfaces need to be visible in\r\n * (can be {@code null} when accepting all declared interfaces)\r\n * @return all interfaces that the given object implements as a Set\r\n */\r\npublic static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, @Nullable ClassLoader classLoader) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    if (clazz.isInterface() && isVisible(clazz, classLoader)) {\r\n        return Collections.singleton(clazz);\r\n    }\r\n    Set<Class<?>> interfaces = new LinkedHashSet<>();\r\n    Class<?> current = clazz;\r\n    while (current != null) {\r\n        Class<?>[] ifcs = current.getInterfaces();\r\n        for (Class<?> ifc : ifcs) {\r\n            if (isVisible(ifc, classLoader)) {\r\n                interfaces.add(ifc);\r\n            }\r\n        }\r\n        current = current.getSuperclass();\r\n    }\r\n    return interfaces;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtils#getAllInterfacesForClassAsSet(Class<?>,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtils#createCompositeInterface(Class<?>[],ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a composite interface Class for the given interfaces,\r\n * implementing the given interfaces in one single Class.\r\n * <p>This implementation builds a JDK proxy class for the given interfaces.\r\n * @param interfaces the interfaces to merge\r\n * @param classLoader the ClassLoader to create the composite Class in\r\n * @return the merged interface as Class\r\n * @throws IllegalArgumentException if the specified interfaces expose\r\n * conflicting method signatures (or a similar constraint is violated)\r\n * @see java.lang.reflect.Proxy#getProxyClass\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\npublic static Class<?> createCompositeInterface(Class<?>[] interfaces, @Nullable ClassLoader classLoader) {\r\n    Assert.notEmpty(interfaces, \"Interface array must not be empty\");\r\n    return Proxy.getProxyClass(classLoader, interfaces);\r\n}",
    "tailType": "method_code"
  }
]