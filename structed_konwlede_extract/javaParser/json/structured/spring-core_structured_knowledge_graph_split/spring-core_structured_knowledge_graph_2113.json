[
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr11219()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr11219() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(BaseProvider.class.getField(\"stuff\"), BaseProvider.class);\r\n    assertThat(type.getNested(2).isAssignableFrom(ResolvableType.forClass(BaseImplementation.class))).isTrue();\r\n    assertThat(type.toString()).isEqualTo(\"java.util.Collection<org.springframework.core.ResolvableTypeTests$IBase<?>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#spr11219()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr11219()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr12701()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr12701() {\r\n    ResolvableType resolvableType = ResolvableType.forClassWithGenerics(Callable.class, String.class);\r\n    Type type = resolvableType.getType();\r\n    assertThat(type).isInstanceOf(ParameterizedType.class);\r\n    assertThat(((ParameterizedType) type).getRawType()).isEqualTo(Callable.class);\r\n    assertThat(((ParameterizedType) type).getActualTypeArguments()).hasSize(1);\r\n    assertThat(((ParameterizedType) type).getActualTypeArguments()[0]).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#spr12701()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr12701()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr14648()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr14648() throws Exception {\r\n    ResolvableType collectionClass = ResolvableType.forRawClass(Collection.class);\r\n    ResolvableType setClass = ResolvableType.forRawClass(Set.class);\r\n    ResolvableType fromReturnType = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"wildcardSet\"));\r\n    assertThat(collectionClass.isAssignableFrom(fromReturnType)).isTrue();\r\n    assertThat(setClass.isAssignableFrom(fromReturnType)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#spr14648()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr14648()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr16456()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid spr16456() throws Exception {\r\n    ResolvableType genericType = ResolvableType.forField(UnresolvedWithGenerics.class.getDeclaredField(\"set\")).asCollection();\r\n    ResolvableType type = ResolvableType.forClassWithGenerics(ArrayList.class, genericType.getGeneric());\r\n    assertThat(type.resolveGeneric()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#spr16456()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#spr16456()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#gh22902()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid gh22902() throws Exception {\r\n    ResolvableType ab = ResolvableType.forField(ABClient.class.getField(\"field\"));\r\n    assertThat(ab.isAssignableFrom(Object.class)).isFalse();\r\n    assertThat(ab.isAssignableFrom(AwithB.class)).isTrue();\r\n    assertThat(ab.isAssignableFrom(AwithoutB.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#gh22902()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#gh22902()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#gh32327()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid gh32327() throws Exception {\r\n    ResolvableType repository1 = ResolvableType.forField(Fields.class.getField(\"repository\"));\r\n    ResolvableType repository2 = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"someRepository\"));\r\n    ResolvableType repository3 = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"subRepository\"));\r\n    assertThat(repository1.hasUnresolvableGenerics()).isFalse();\r\n    assertThat(repository1.isAssignableFrom(repository2)).isFalse();\r\n    assertThat(repository1.isAssignableFromResolvedPart(repository2)).isTrue();\r\n    assertThat(repository1.isAssignableFrom(repository3)).isTrue();\r\n    assertThat(repository1.isAssignableFromResolvedPart(repository3)).isTrue();\r\n    assertThat(repository2.hasUnresolvableGenerics()).isTrue();\r\n    assertThat(repository2.isAssignableFrom(repository1)).isTrue();\r\n    assertThat(repository2.isAssignableFromResolvedPart(repository1)).isTrue();\r\n    assertThat(repository3.hasUnresolvableGenerics()).isTrue();\r\n    assertThat(repository3.isAssignableFrom(repository1)).isFalse();\r\n    assertThat(repository3.isAssignableFromResolvedPart(repository1)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#gh32327()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#gh32327()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#gh33535()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid gh33535() throws Exception {\r\n    ResolvableType repository1 = ResolvableType.forField(Fields.class.getField(\"stringRepository\"));\r\n    ResolvableType repository2 = ResolvableType.forField(Fields.class.getField(\"arrayRepository\"));\r\n    ResolvableType repository3 = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"someRepository\"));\r\n    assertThat(repository1.hasUnresolvableGenerics()).isFalse();\r\n    assertThat(repository1.isAssignableFrom(repository3)).isFalse();\r\n    assertThat(repository1.isAssignableFromResolvedPart(repository3)).isTrue();\r\n    assertThat(repository3.isAssignableFrom(repository1)).isTrue();\r\n    assertThat(repository3.isAssignableFromResolvedPart(repository1)).isTrue();\r\n    assertThat(repository2.hasUnresolvableGenerics()).isFalse();\r\n    assertThat(repository2.isAssignableFrom(repository3)).isFalse();\r\n    assertThat(repository2.isAssignableFromResolvedPart(repository3)).isTrue();\r\n    assertThat(repository3.isAssignableFrom(repository2)).isTrue();\r\n    assertThat(repository3.isAssignableFromResolvedPart(repository2)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#gh33535()",
    "tailType": "method"
  }
]