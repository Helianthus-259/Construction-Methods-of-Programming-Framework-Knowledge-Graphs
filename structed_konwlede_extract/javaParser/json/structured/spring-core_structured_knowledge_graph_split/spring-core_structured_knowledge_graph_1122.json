[
  {
    "head": "org.springframework.core.NestedExceptionUtils#getRootCause(Throwable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils#getMostSpecificCause(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the most specific cause of the given exception, that is,\r\n * either the innermost cause (root cause) or the exception itself.\r\n * <p>Differs from {@link #getRootCause} in that it falls back\r\n * to the original exception if there is no root cause.\r\n * @param original the original exception to introspect\r\n * @return the most specific cause (never {@code null})\r\n * @since 4.3.9\r\n */\r\npublic static Throwable getMostSpecificCause(Throwable original) {\r\n    Throwable rootCause = getRootCause(original);\r\n    return (rootCause != null ? rootCause : original);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedExceptionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedExceptionUtils#getMostSpecificCause(Throwable)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.NestedRuntimeException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Handy class for wrapping runtime {@code Exceptions} with a root cause.\n * This class is {@code abstract} to force the programmer to extend the class.\n *\n * <p>The similarity between this class and the {@link NestedCheckedException}\n * class is unavoidable, as Java forces these two classes to have different\n * superclasses (ah, the inflexibility of concrete inheritance!).\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @see #getMessage\n * @see NestedCheckedException\n */\npublic abstract class NestedRuntimeException extends RuntimeException {\n\n\t/** Use serialVersionUID from Spring 1.2 for interoperability. */\n\tprivate static final long serialVersionUID = 5439915454935047936L;\n\n\n\t/**\n\t * Construct a {@code NestedRuntimeException} with the specified detail message.\n\t * @param msg the detail message\n\t */\n\tpublic NestedRuntimeException(@Nullable String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Construct a {@code NestedRuntimeException} with the specified detail message\n\t * and nested exception.\n\t * @param msg the detail message\n\t * @param cause the nested exception\n\t */\n\tpublic NestedRuntimeException(@Nullable String msg, @Nullable Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n\n\t/**\n\t * Retrieve the innermost cause of this exception, if any.\n\t * @return the innermost exception, or {@code null} if none\n\t * @since 2.0\n\t */\n\tpublic @Nullable Throwable getRootCause() {\n\t\treturn NestedExceptionUtils.getRootCause(this);\n\t}\n\n\t/**\n\t * Retrieve the most specific cause of this exception, that is,\n\t * either the innermost cause (root cause) or this exception itself.\n\t * <p>Differs from {@link #getRootCause()} in that it falls back\n\t * to the present exception if there is no root cause.\n\t * @return the most specific cause (never {@code null})\n\t * @since 2.0.3\n\t */\n\tpublic Throwable getMostSpecificCause() {\n\t\tThrowable rootCause = getRootCause();\n\t\treturn (rootCause != null ? rootCause : this);\n\t}\n\n\t/**\n\t * Check whether this exception contains an exception of the given type:\n\t * either it is of the given class itself or it contains a nested cause\n\t * of the given type.\n\t * @param exType the exception type to look for\n\t * @return whether there is a nested exception of the specified type\n\t */\n\tpublic boolean contains(@Nullable Class<?> exType) {\n\t\tif (exType == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (exType.isInstance(this)) {\n\t\t\treturn true;\n\t\t}\n\t\tThrowable cause = getCause();\n\t\tif (cause == this) {\n\t\t\treturn false;\n\t\t}\n\t\tif (cause instanceof NestedRuntimeException exception) {\n\t\t\treturn exception.contains(exType);\n\t\t}\n\t\telse {\n\t\t\twhile (cause != null) {\n\t\t\t\tif (exType.isInstance(cause)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (cause.getCause() == cause) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcause = cause.getCause();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.NestedRuntimeException#serialVersionUID",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException#serialVersionUID",
    "headType": "field",
    "relation": "haveType",
    "tail": "long",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException#getRootCause()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the innermost cause of this exception, if any.\r\n * @return the innermost exception, or {@code null} if none\r\n * @since 2.0\r\n */\r\n@Nullable\r\npublic Throwable getRootCause() {\r\n    return NestedExceptionUtils.getRootCause(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedRuntimeException#getRootCause()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException#getRootCause()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException#getMostSpecificCause()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the most specific cause of this exception, that is,\r\n * either the innermost cause (root cause) or this exception itself.\r\n * <p>Differs from {@link #getRootCause()} in that it falls back\r\n * to the present exception if there is no root cause.\r\n * @return the most specific cause (never {@code null})\r\n * @since 2.0.3\r\n */\r\npublic Throwable getMostSpecificCause() {\r\n    Throwable rootCause = getRootCause();\r\n    return (rootCause != null ? rootCause : this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedRuntimeException#getMostSpecificCause()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException#contains(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether this exception contains an exception of the given type:\r\n * either it is of the given class itself or it contains a nested cause\r\n * of the given type.\r\n * @param exType the exception type to look for\r\n * @return whether there is a nested exception of the specified type\r\n */\r\npublic boolean contains(@Nullable Class<?> exType) {\r\n    if (exType == null) {\r\n        return false;\r\n    }\r\n    if (exType.isInstance(this)) {\r\n        return true;\r\n    }\r\n    Throwable cause = getCause();\r\n    if (cause == this) {\r\n        return false;\r\n    }\r\n    if (cause instanceof NestedRuntimeException exception) {\r\n        return exception.contains(exType);\r\n    } else {\r\n        while (cause != null) {\r\n            if (exType.isInstance(cause)) {\r\n                return true;\r\n            }\r\n            if (cause.getCause() == cause) {\r\n                break;\r\n            }\r\n            cause = cause.getCause();\r\n        }\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.NestedRuntimeException#contains(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.NestedRuntimeException",
    "headType": "class",
    "relation": "extend",
    "tail": "RuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.KotlinDelegate",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.KotlinDelegate",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.AnnotatedType;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Executable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\nimport java.util.Objects;\nimport java.util.function.Predicate;\n\nimport kotlin.reflect.KFunction;\nimport kotlin.reflect.KParameter;\nimport kotlin.reflect.KProperty;\nimport kotlin.reflect.jvm.ReflectJvmMapping;\nimport org.jspecify.annotations.NonNull;\nimport org.jspecify.annotations.NullMarked;\nimport org.jspecify.annotations.NullUnmarked;\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Constants that indicate nullness, as well as related utility methods.\n *\n * <p>Nullness applies to type usage, a field, a method return type, or a parameter.\n * <a href=\"https://jspecify.dev/docs/user-guide/\">JSpecify annotations</a> are\n * fully supported, as well as\n * <a href=\"https://kotlinlang.org/docs/null-safety.html\">Kotlin null safety</a>,\n * {@code @Nullable} annotations regardless of their package, and Java primitive\n * types.\n *\n * <p>JSR-305 annotations as well as Spring null safety annotations in the\n * {@code org.springframework.lang} package such as {@code @NonNullApi},\n * {@code @NonNullFields}, and {@code @NonNull} are not supported by this API.\n * However, {@code @Nullable} is supported via the package-less check. Migrating\n * to JSpecify is recommended.\n *\n * @author Sebastien Deleuze\n * @since 7.0\n */\npublic enum Nullness {\n\n\t/**\n\t * Unspecified nullness (Java default for non-primitive types and JSpecify\n\t * {@code @NullUnmarked} code).\n\t */\n\tUNSPECIFIED,\n\n\t/**\n\t * Can include null (typically specified with a {@code @Nullable} annotation).\n\t */\n\tNULLABLE,\n\n\t/**\n\t * Will not include null (Kotlin default and JSpecify {@code @NullMarked} code).\n\t */\n\tNON_NULL;\n\n\n\t/**\n\t * Return the nullness of the return type for the given method.\n\t * @param method the source for the method return type\n\t * @return the corresponding nullness\n\t */\n\tpublic static Nullness forMethodReturnType(Method method) {\n\t\tif (KotlinDetector.isKotlinType(method.getDeclaringClass())) {\n\t\t\treturn KotlinDelegate.forMethodReturnType(method);\n\t\t}\n\t\treturn (hasNullableAnnotation(method) ? Nullness.NULLABLE :\n\t\t\t\tjSpecifyNullness(method, method.getDeclaringClass(), method.getAnnotatedReturnType()));\n\t}\n\n\t/**\n\t * Return the nullness of the given parameter.\n\t * @param parameter the parameter descriptor\n\t * @return the corresponding nullness\n\t */\n\tpublic static Nullness forParameter(Parameter parameter) {\n\t\tif (KotlinDetector.isKotlinType(parameter.getDeclaringExecutable().getDeclaringClass())) {\n\t\t\t// TODO Optimize when kotlin-reflect provide a more direct Parameter to KParameter resolution\n\t\t\tMethodParameter methodParameter = MethodParameter.forParameter(parameter);\n\t\t\treturn KotlinDelegate.forParameter(methodParameter.getExecutable(), methodParameter.getParameterIndex());\n\t\t}\n\t\tExecutable executable = parameter.getDeclaringExecutable();\n\t\treturn (hasNullableAnnotation(parameter) ? Nullness.NULLABLE :\n\t\t\t\tjSpecifyNullness(executable, executable.getDeclaringClass(), parameter.getAnnotatedType()));\n\t}\n\n\t/**\n\t * Return the nullness of the given method parameter.\n\t * @param methodParameter the method parameter descriptor\n\t * @return the corresponding nullness\n\t */\n\tpublic static Nullness forMethodParameter(MethodParameter methodParameter) {\n\t\treturn (methodParameter.getParameterIndex() < 0 ?\n\t\t\t\tforMethodReturnType(Objects.requireNonNull(methodParameter.getMethod())) :\n\t\t\t\tforParameter(methodParameter.getParameter()));\n\t}\n\n\t/**\n\t * Return the nullness of the given field.\n\t * @param field the field descriptor\n\t * @return the corresponding nullness\n\t */\n\tpublic static Nullness forField(Field field) {\n\t\tif (KotlinDetector.isKotlinType(field.getDeclaringClass())) {\n\t\t\treturn KotlinDelegate.forField(field);\n\t\t}\n\t\treturn (hasNullableAnnotation(field) ? Nullness.NULLABLE :\n\t\t\t\tjSpecifyNullness(field, field.getDeclaringClass(), field.getAnnotatedType()));\n\t}\n\n\n\t// Check method and parameter level @Nullable annotations regardless of the package\n\t// (including Spring and JSR 305 annotations)\n\tprivate static boolean hasNullableAnnotation(AnnotatedElement element) {\n\t\tfor (Annotation annotation : element.getDeclaredAnnotations()) {\n\t\t\tif (\"Nullable\".equals(annotation.annotationType().getSimpleName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static Nullness jSpecifyNullness(\n\t\t\tAnnotatedElement annotatedElement, Class<?> declaringClass, AnnotatedType annotatedType) {\n\n\t\tif (annotatedType.getType() instanceof Class<?> clazz && clazz.isPrimitive()) {\n\t\t\treturn (clazz != void.class ? Nullness.NON_NULL : Nullness.UNSPECIFIED);\n\t\t}\n\t\tif (annotatedType.isAnnotationPresent(Nullable.class)) {\n\t\t\treturn Nullness.NULLABLE;\n\t\t}\n\t\tif (annotatedType.isAnnotationPresent(NonNull.class)) {\n\t\t\treturn Nullness.NON_NULL;\n\t\t}\n\t\tNullness nullness = Nullness.UNSPECIFIED;\n\t\t// Package level\n\t\tPackage declaringPackage = declaringClass.getPackage();\n\t\tif (declaringPackage.isAnnotationPresent(NullMarked.class)) {\n\t\t\tnullness = Nullness.NON_NULL;\n\t\t}\n\t\t// Class level\n\t\tif (declaringClass.isAnnotationPresent(NullMarked.class)) {\n\t\t\tnullness = Nullness.NON_NULL;\n\t\t}\n\t\telse if (declaringClass.isAnnotationPresent(NullUnmarked.class)) {\n\t\t\tnullness = Nullness.UNSPECIFIED;\n\t\t}\n\t\t// Annotated element level\n\t\tif (annotatedElement.isAnnotationPresent(NullMarked.class)) {\n\t\t\tnullness = Nullness.NON_NULL;\n\t\t}\n\t\telse if (annotatedElement.isAnnotationPresent(NullUnmarked.class)) {\n\t\t\tnullness = Nullness.UNSPECIFIED;\n\t\t}\n\t\treturn nullness;\n\t}\n\n\t/**\n\t * Inner class to avoid a hard dependency on Kotlin at runtime.\n\t */\n\tprivate static class KotlinDelegate {\n\n\t\tpublic static Nullness forMethodReturnType(Method method) {\n\t\t\tKFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);\n\t\t\tif (function != null && function.getReturnType().isMarkedNullable()) {\n\t\t\t\treturn Nullness.NULLABLE;\n\t\t\t}\n\t\t\treturn Nullness.NON_NULL;\n\t\t}\n\n\t\tpublic static Nullness forParameter(Executable executable, int parameterIndex) {\n\t\t\tKFunction<?> function;\n\t\t\tPredicate<KParameter> predicate;\n\t\t\tif (executable instanceof Method method) {\n\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction(method);\n\t\t\t\tpredicate = p -> KParameter.Kind.VALUE.equals(p.getKind());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfunction = ReflectJvmMapping.getKotlinFunction((Constructor<?>) executable);\n\t\t\t\tpredicate = p -> (KParameter.Kind.VALUE.equals(p.getKind()) ||\n\t\t\t\t\t\tKParameter.Kind.INSTANCE.equals(p.getKind()));\n\t\t\t}\n\t\t\tif (function == null) {\n\t\t\t\treturn Nullness.UNSPECIFIED;\n\t\t\t}\n\t\t\tint i = 0;\n\t\t\tfor (KParameter kParameter : function.getParameters()) {\n\t\t\t\tif (predicate.test(kParameter) && parameterIndex == i++) {\n\t\t\t\t\treturn (kParameter.getType().isMarkedNullable() ? Nullness.NULLABLE : Nullness.NON_NULL);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Nullness.UNSPECIFIED;\n\t\t}\n\n\t\tpublic static Nullness forField(Field field) {\n\t\t\tKProperty<?> property = ReflectJvmMapping.getKotlinProperty(field);\n\t\t\tif (property != null && property.getReturnType().isMarkedNullable()) {\n\t\t\t\treturn Nullness.NULLABLE;\n\t\t\t}\n\t\t\treturn Nullness.NON_NULL;\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.KotlinDelegate#forMethodReturnType(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "public static Nullness forMethodReturnType(Method method) {\r\n    KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);\r\n    if (function != null && function.getReturnType().isMarkedNullable()) {\r\n        return Nullness.NULLABLE;\r\n    }\r\n    return Nullness.NON_NULL;\r\n}",
    "tailType": "method_code"
  }
]