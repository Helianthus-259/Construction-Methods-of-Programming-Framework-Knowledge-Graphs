[
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypesAppliesTheSameHints() {\r\n    this.reflectionHints.registerTypes(TypeReference.listOf(Integer.class, String.class, Double.class), TypeHint.builtWith(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\r\n    assertThat(this.reflectionHints.typeHints()).anySatisfy(typeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS)).anySatisfy(typeWithMemberCategories(String.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS)).anySatisfy(typeWithMemberCategories(Double.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS)).hasSize(3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypesAppliesTheSameHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerField() {\r\n    Field field = ReflectionUtils.findField(TestType.class, \"field\");\r\n    assertThat(field).isNotNull();\r\n    this.reflectionHints.registerField(field);\r\n    assertTestTypeFieldHint(fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"field\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIgnoresLambda()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeIgnoresLambda() {\r\n    Runnable lambda = () -> ;;\r\n    Consumer<TypeHint.Builder> hintBuilder = mock();\r\n    this.reflectionHints.registerType(lambda.getClass());\r\n    this.reflectionHints.registerType(lambda.getClass(), hintBuilder);\r\n    assertThat(this.reflectionHints.typeHints()).isEmpty();\r\n    verifyNoInteractions(hintBuilder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIgnoresLambda()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIgnoresLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeFieldHint(Consumer<FieldHint>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertTestTypeFieldHint(Consumer<FieldHint> fieldHint) {\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\r\n        assertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\r\n        assertThat(typeHint.fields()).singleElement().satisfies(fieldHint);\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeFieldHint(Consumer<FieldHint>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerConstructor() {\r\n    this.reflectionHints.registerConstructor(TestType.class.getDeclaredConstructors()[0], ExecutableMode.INTROSPECT);\r\n    assertTestTypeConstructorHint(constructorHint -> {\r\n        assertThat(constructorHint.getParameterTypes()).isEmpty();\r\n        assertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerConstructorTwiceUpdatesExistingEntry() {\r\n    Constructor<?> constructor = TestType.class.getDeclaredConstructors()[0];\r\n    this.reflectionHints.registerConstructor(constructor, ExecutableMode.INTROSPECT);\r\n    this.reflectionHints.registerConstructor(constructor, ExecutableMode.INVOKE);\r\n    assertTestTypeConstructorHint(constructorHint -> {\r\n        assertThat(constructorHint.getParameterTypes()).isEmpty();\r\n        assertThat(constructorHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerConstructorTwiceUpdatesExistingEntry()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertTestTypeConstructorHint(Consumer<ExecutableHint> constructorHint) {\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n        assertThat(typeHint.getType().getCanonicalName()).isEqualTo(TestType.class.getCanonicalName());\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.constructors()).singleElement().satisfies(constructorHint);\r\n        assertThat(typeHint.methods()).isEmpty();\r\n        assertThat(typeHint.getMemberCategories()).isEmpty();\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#assertTestTypeConstructorHint(Consumer<ExecutableHint>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerMethod() {\r\n    Method method = ReflectionUtils.findMethod(TestType.class, \"setName\", String.class);\r\n    assertThat(method).isNotNull();\r\n    this.reflectionHints.registerMethod(method, ExecutableMode.INTROSPECT);\r\n    assertTestTypeMethodHints(methodHint -> {\r\n        assertThat(methodHint.getName()).isEqualTo(\"setName\");\r\n        assertThat(methodHint.getParameterTypes()).containsOnly(TypeReference.of(String.class));\r\n        assertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INTROSPECT);\r\n    });\r\n}",
    "tailType": "method_code"
  }
]