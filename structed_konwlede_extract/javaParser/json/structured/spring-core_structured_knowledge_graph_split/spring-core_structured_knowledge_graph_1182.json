[
  {
    "head": "org.springframework.core.task.TaskExecutor",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskExecutor",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.Executor;\n\n/**\n * Simple task executor interface that abstracts the execution\n * of a {@link Runnable}.\n *\n * <p>Implementations can use all sorts of different execution strategies,\n * such as: synchronous, asynchronous, using a thread pool, and more.\n *\n * <p>Equivalent to Java's {@link java.util.concurrent.Executor} interface,\n * so that clients may declare a dependency on an {@code Executor} and receive\n * any {@code TaskExecutor} implementation. This interface remains separate from\n * the standard {@code Executor} interface primarily for backwards compatibility\n * with older APIs that depend on the {@code TaskExecutor} interface.\n *\n * @author Juergen Hoeller\n * @since 2.0\n * @see java.util.concurrent.Executor\n */\n@FunctionalInterface\npublic interface TaskExecutor extends Executor {\n\n\t/**\n\t * Execute the given {@code task}.\n\t * <p>The call might return immediately if the implementation uses\n\t * an asynchronous execution strategy, or might block in the case\n\t * of synchronous execution.\n\t * @param task the {@code Runnable} to execute (never {@code null})\n\t * @throws TaskRejectedException if the given task was not accepted\n\t */\n\t@Override\n\tvoid execute(Runnable task);\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.TaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Execute the given {@code task}.\r\n * <p>The call might return immediately if the implementation uses\r\n * an asynchronous execution strategy, or might block in the case\r\n * of synchronous execution.\r\n * @param task the {@code Runnable} to execute (never {@code null})\r\n * @throws TaskRejectedException if the given task was not accepted\r\n */\r\n@Override\r\nvoid execute(Runnable task);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.TaskExecutor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.TaskExecutor#execute(Runnable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.TaskExecutor#execute(Runnable)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskExecutor",
    "headType": "class",
    "relation": "extend",
    "tail": "Executor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.TaskRejectedException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.TaskRejectedException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskRejectedException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.RejectedExecutionException;\n\n/**\n * Exception thrown when a {@link TaskExecutor} rejects to accept\n * a given task for execution.\n *\n * @author Juergen Hoeller\n * @since 2.0.1\n * @see TaskExecutor#execute(Runnable)\n */\n@SuppressWarnings(\"serial\")\npublic class TaskRejectedException extends RejectedExecutionException {\n\n\t/**\n\t * Create a new {@code TaskRejectedException}\n\t * with the specified detail message and no root cause.\n\t * @param msg the detail message\n\t */\n\tpublic TaskRejectedException(String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Create a new {@code TaskRejectedException}\n\t * with the specified detail message and the given root cause.\n\t * @param msg the detail message\n\t * @param cause the root cause (usually from using an underlying\n\t * API such as the {@code java.util.concurrent} package)\n\t * @see java.util.concurrent.RejectedExecutionException\n\t */\n\tpublic TaskRejectedException(String msg, Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n\t/**\n\t * Create a new {@code TaskRejectedException}\n\t * with a default message for the given executor and task.\n\t * @param executor the {@code Executor} that rejected the task\n\t * @param task the task object that got rejected\n\t * @param cause the original {@link RejectedExecutionException}\n\t * @since 6.1\n\t * @see ExecutorService#isShutdown()\n\t * @see java.util.concurrent.RejectedExecutionException\n\t */\n\tpublic TaskRejectedException(Executor executor, Object task, RejectedExecutionException cause) {\n\t\tsuper(executorDescription(executor) + \" did not accept task: \" + task, cause);\n\t}\n\n\n\tprivate static String executorDescription(Executor executor) {\n\t\tif (executor instanceof ExecutorService executorService) {\n\t\t\treturn \"ExecutorService in \" + (executorService.isShutdown() ? \"shutdown\" : \"active\") + \" state\";\n\t\t}\n\t\treturn executor.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.TaskRejectedException#executorDescription(Executor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static String executorDescription(Executor executor) {\r\n    if (executor instanceof ExecutorService executorService) {\r\n        return \"ExecutorService in \" + (executorService.isShutdown() ? \"shutdown\" : \"active\") + \" state\";\r\n    }\r\n    return executor.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.task.TaskRejectedException",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.task.TaskRejectedException#executorDescription(Executor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.task.TaskRejectedException",
    "headType": "class",
    "relation": "extend",
    "tail": "RejectedExecutionException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.task",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.task.TaskTimeoutException",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.task.TaskTimeoutException",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskTimeoutException",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.task.TaskTimeoutException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.task;\n\n/**\n * Exception thrown when a {@link AsyncTaskExecutor} rejects to accept\n * a given task for execution because of the specified timeout.\n *\n * @author Juergen Hoeller\n * @since 2.0.3\n * @see AsyncTaskExecutor#execute(Runnable, long)\n * @deprecated as of 5.3.16 since the common executors do not support start timeouts\n */\n@Deprecated\n@SuppressWarnings(\"serial\")\npublic class TaskTimeoutException extends TaskRejectedException {\n\n\t/**\n\t * Create a new {@code TaskTimeoutException}\n\t * with the specified detail message and no root cause.\n\t * @param msg the detail message\n\t */\n\tpublic TaskTimeoutException(String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Create a new {@code TaskTimeoutException}\n\t * with the specified detail message and the given root cause.\n\t * @param msg the detail message\n\t * @param cause the root cause (usually from using an underlying\n\t * API such as the {@code java.util.concurrent} package)\n\t * @see java.util.concurrent.RejectedExecutionException\n\t */\n\tpublic TaskTimeoutException(String msg, Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.task.TaskTimeoutException",
    "headType": "class",
    "relation": "extend",
    "tail": "TaskRejectedException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.task",
    "tailType": "package"
  }
]