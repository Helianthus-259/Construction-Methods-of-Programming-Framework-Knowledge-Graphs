[
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.ComposedContainerClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.ComposedContainerClass",
    "headType": "class",
    "relation": "use",
    "tail": "@PeteRepeat",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedContainerClass",
    "headType": "class",
    "relation": "use",
    "tail": "@ComposedContainer",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.ComposedContainerClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.assertj.core.api.ThrowableAssert.ThrowingCallable;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.findMergedRepeatableAnnotations;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.getMergedRepeatableAnnotations;\n\n/**\n * Unit tests that verify support for getting and finding all composed, repeatable\n * annotations on a single annotated element.\n *\n * <p>See <a href=\"https://jira.spring.io/browse/SPR-13973\">SPR-13973</a>.\n *\n * @author Sam Brannen\n * @since 4.3\n * @see AnnotatedElementUtils#getMergedRepeatableAnnotations\n * @see AnnotatedElementUtils#findMergedRepeatableAnnotations\n * @see AnnotatedElementUtilsTests\n * @see MultipleComposedAnnotationsOnSingleAnnotatedElementTests\n */\nclass ComposedRepeatableAnnotationsTests {\n\n\n\t@Test\n\tvoid getNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnSuperclass() {\n\t\tassertGetRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).isEmpty();\n\t}\n\n\t@Test\n\tvoid findNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class,\n\t\t\t\t\tContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnSuperclass() {\n\t\tassertFindRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\tprivate void expectNonRepeatableAnnotation(ThrowingCallable throwingCallable) {\n\t\tassertThatIllegalArgumentException().isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Annotation type must be a repeatable annotation\")\n\t\t\t.withMessageContaining(\"failed to resolve container type for\")\n\t\t\t.withMessageContaining(NonRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerMissingValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Invalid declaration of container type\")\n\t\t\t.withMessageContaining(ContainerMissingValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"for repeatable annotation\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName())\n\t\t\t.withCauseExactlyInstanceOf(NoSuchMethodException.class);\n\t}\n\n\tprivate void expectContainerWithNonArrayValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithNonArrayValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithArrayValueAttributeButWrongComponentType.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void assertGetRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = getMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertFindRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = findMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertNoninheritedRepeatableAnnotations(Set<Noninherited> annotations) {\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).hasSize(3);\n\n\t\tIterator<Noninherited> iterator = annotations.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NonRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerMissingValueAttribute {\n\t\t// InvalidRepeatable[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithNonArrayValueAttribute {\n\n\t\tInvalidRepeatable value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithArrayValueAttributeButWrongComponentType {\n\n\t\tString[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface InvalidRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface PeteRepeats {\n\n\t\tPeteRepeat[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@Repeatable(PeteRepeats.class)\n\t@interface PeteRepeat {\n\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForPetesSake {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForTheLoveOfFoo {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ComposedContainer {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\tstatic class RepeatableClass {\n\t}\n\n\tstatic class SubRepeatableClass extends RepeatableClass {\n\t}\n\n\t@ForPetesSake(\"B\")\n\t@ForTheLoveOfFoo(\"C\")\n\t@PeteRepeat(\"A\")\n\tstatic class ComposedRepeatableClass {\n\t}\n\n\t@ForPetesSake(\"C\")\n\t@PeteRepeats(@PeteRepeat(\"A\"))\n\t@PeteRepeat(\"B\")\n\tstatic class ComposedRepeatableMixedWithContainerClass {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@ComposedContainer\n\tstatic class ComposedContainerClass {\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Noninheriteds {\n\n\t\tNoninherited[] value();\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(Noninheriteds.class)\n\t@interface Noninherited {\n\n\t\t@AliasFor(\"name\")\n\t\tString value() default \"\";\n\n\t\t@AliasFor(\"value\")\n\t\tString name() default \"\";\n\t}\n\n\t@Noninherited(name = \"shadowed\")\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ComposedNoninherited {\n\n\t\t@AliasFor(annotation = Noninherited.class)\n\t\tString name() default \"\";\n\t}\n\n\t@ComposedNoninherited(name = \"C\")\n\t@Noninheriteds({ @Noninherited(value = \"A\"), @Noninherited(name = \"B\") })\n\tstatic class NoninheritedRepeatableClass {\n\t}\n\n\tstatic class SubNoninheritedRepeatableClass extends NoninheritedRepeatableClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.NoninheritedRepeatableClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.NoninheritedRepeatableClass",
    "headType": "class",
    "relation": "use",
    "tail": "@ComposedNoninherited",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.NoninheritedRepeatableClass",
    "headType": "class",
    "relation": "use",
    "tail": "@Noninheriteds",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.NoninheritedRepeatableClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.assertj.core.api.ThrowableAssert.ThrowingCallable;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.findMergedRepeatableAnnotations;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.getMergedRepeatableAnnotations;\n\n/**\n * Unit tests that verify support for getting and finding all composed, repeatable\n * annotations on a single annotated element.\n *\n * <p>See <a href=\"https://jira.spring.io/browse/SPR-13973\">SPR-13973</a>.\n *\n * @author Sam Brannen\n * @since 4.3\n * @see AnnotatedElementUtils#getMergedRepeatableAnnotations\n * @see AnnotatedElementUtils#findMergedRepeatableAnnotations\n * @see AnnotatedElementUtilsTests\n * @see MultipleComposedAnnotationsOnSingleAnnotatedElementTests\n */\nclass ComposedRepeatableAnnotationsTests {\n\n\n\t@Test\n\tvoid getNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnSuperclass() {\n\t\tassertGetRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).isEmpty();\n\t}\n\n\t@Test\n\tvoid findNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class,\n\t\t\t\t\tContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnSuperclass() {\n\t\tassertFindRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\tprivate void expectNonRepeatableAnnotation(ThrowingCallable throwingCallable) {\n\t\tassertThatIllegalArgumentException().isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Annotation type must be a repeatable annotation\")\n\t\t\t.withMessageContaining(\"failed to resolve container type for\")\n\t\t\t.withMessageContaining(NonRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerMissingValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Invalid declaration of container type\")\n\t\t\t.withMessageContaining(ContainerMissingValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"for repeatable annotation\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName())\n\t\t\t.withCauseExactlyInstanceOf(NoSuchMethodException.class);\n\t}\n\n\tprivate void expectContainerWithNonArrayValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithNonArrayValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithArrayValueAttributeButWrongComponentType.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void assertGetRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = getMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertFindRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = findMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertNoninheritedRepeatableAnnotations(Set<Noninherited> annotations) {\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).hasSize(3);\n\n\t\tIterator<Noninherited> iterator = annotations.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NonRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerMissingValueAttribute {\n\t\t// InvalidRepeatable[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithNonArrayValueAttribute {\n\n\t\tInvalidRepeatable value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithArrayValueAttributeButWrongComponentType {\n\n\t\tString[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface InvalidRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface PeteRepeats {\n\n\t\tPeteRepeat[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@Repeatable(PeteRepeats.class)\n\t@interface PeteRepeat {\n\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForPetesSake {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForTheLoveOfFoo {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ComposedContainer {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\tstatic class RepeatableClass {\n\t}\n\n\tstatic class SubRepeatableClass extends RepeatableClass {\n\t}\n\n\t@ForPetesSake(\"B\")\n\t@ForTheLoveOfFoo(\"C\")\n\t@PeteRepeat(\"A\")\n\tstatic class ComposedRepeatableClass {\n\t}\n\n\t@ForPetesSake(\"C\")\n\t@PeteRepeats(@PeteRepeat(\"A\"))\n\t@PeteRepeat(\"B\")\n\tstatic class ComposedRepeatableMixedWithContainerClass {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@ComposedContainer\n\tstatic class ComposedContainerClass {\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Noninheriteds {\n\n\t\tNoninherited[] value();\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(Noninheriteds.class)\n\t@interface Noninherited {\n\n\t\t@AliasFor(\"name\")\n\t\tString value() default \"\";\n\n\t\t@AliasFor(\"value\")\n\t\tString name() default \"\";\n\t}\n\n\t@Noninherited(name = \"shadowed\")\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ComposedNoninherited {\n\n\t\t@AliasFor(annotation = Noninherited.class)\n\t\tString name() default \"\";\n\t}\n\n\t@ComposedNoninherited(name = \"C\")\n\t@Noninheriteds({ @Noninherited(value = \"A\"), @Noninherited(name = \"B\") })\n\tstatic class NoninheritedRepeatableClass {\n\t}\n\n\tstatic class SubNoninheritedRepeatableClass extends NoninheritedRepeatableClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.SubNoninheritedRepeatableClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.SubNoninheritedRepeatableClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.assertj.core.api.ThrowableAssert.ThrowingCallable;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.findMergedRepeatableAnnotations;\nimport static org.springframework.core.annotation.AnnotatedElementUtils.getMergedRepeatableAnnotations;\n\n/**\n * Unit tests that verify support for getting and finding all composed, repeatable\n * annotations on a single annotated element.\n *\n * <p>See <a href=\"https://jira.spring.io/browse/SPR-13973\">SPR-13973</a>.\n *\n * @author Sam Brannen\n * @since 4.3\n * @see AnnotatedElementUtils#getMergedRepeatableAnnotations\n * @see AnnotatedElementUtils#findMergedRepeatableAnnotations\n * @see AnnotatedElementUtilsTests\n * @see MultipleComposedAnnotationsOnSingleAnnotatedElementTests\n */\nclass ComposedRepeatableAnnotationsTests {\n\n\n\t@Test\n\tvoid getNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid getInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tgetMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getRepeatableAnnotationsOnSuperclass() {\n\t\tassertGetRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertGetRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid getNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = getMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).isEmpty();\n\t}\n\n\t@Test\n\tvoid findNonRepeatableAnnotation() {\n\t\texpectNonRepeatableAnnotation(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), NonRepeatable.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerMissingValueAttribute() {\n\t\texpectContainerMissingValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerMissingValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithNonArrayValueAttribute() {\n\t\texpectContainerWithNonArrayValueAttribute(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class, ContainerWithNonArrayValueAttribute.class));\n\t}\n\n\t@Test\n\tvoid findInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n\t\texpectContainerWithArrayValueAttributeButWrongComponentType(() ->\n\t\t\t\tfindMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class,\n\t\t\t\t\tContainerWithArrayValueAttributeButWrongComponentType.class));\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(RepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findRepeatableAnnotationsOnSuperclass() {\n\t\tassertFindRepeatableAnnotations(SubRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableClass.class);\n\t}\n\n\t@Test\n\tvoid findComposedRepeatableAnnotationsMixedWithContainerOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedRepeatableMixedWithContainerClass.class);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnClass() {\n\t\tClass<?> element = NoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findNoninheritedComposedRepeatableAnnotationsOnSuperclass() {\n\t\tClass<?> element = SubNoninheritedRepeatableClass.class;\n\t\tSet<Noninherited> annotations = findMergedRepeatableAnnotations(element, Noninherited.class);\n\t\tassertNoninheritedRepeatableAnnotations(annotations);\n\t}\n\n\t@Test\n\tvoid findComposedContainerForRepeatableAnnotationsOnClass() {\n\t\tassertFindRepeatableAnnotations(ComposedContainerClass.class);\n\t}\n\n\tprivate void expectNonRepeatableAnnotation(ThrowingCallable throwingCallable) {\n\t\tassertThatIllegalArgumentException().isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Annotation type must be a repeatable annotation\")\n\t\t\t.withMessageContaining(\"failed to resolve container type for\")\n\t\t\t.withMessageContaining(NonRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerMissingValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Invalid declaration of container type\")\n\t\t\t.withMessageContaining(ContainerMissingValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"for repeatable annotation\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName())\n\t\t\t.withCauseExactlyInstanceOf(NoSuchMethodException.class);\n\t}\n\n\tprivate void expectContainerWithNonArrayValueAttribute(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithNonArrayValueAttribute.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void expectContainerWithArrayValueAttributeButWrongComponentType(ThrowingCallable throwingCallable) {\n\t\tassertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(throwingCallable)\n\t\t\t.withMessageStartingWith(\"Container type\")\n\t\t\t.withMessageContaining(ContainerWithArrayValueAttributeButWrongComponentType.class.getName())\n\t\t\t.withMessageContaining(\"must declare a 'value' attribute for an array of type\")\n\t\t\t.withMessageContaining(InvalidRepeatable.class.getName());\n\t}\n\n\tprivate void assertGetRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = getMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertFindRepeatableAnnotations(AnnotatedElement element) {\n\t\tassertThat(element).isNotNull();\n\n\t\tSet<PeteRepeat> peteRepeats = findMergedRepeatableAnnotations(element, PeteRepeat.class);\n\t\tassertThat(peteRepeats).isNotNull();\n\t\tassertThat(peteRepeats).hasSize(3);\n\n\t\tIterator<PeteRepeat> iterator = peteRepeats.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\tprivate void assertNoninheritedRepeatableAnnotations(Set<Noninherited> annotations) {\n\t\tassertThat(annotations).isNotNull();\n\t\tassertThat(annotations).hasSize(3);\n\n\t\tIterator<Noninherited> iterator = annotations.iterator();\n\t\tassertThat(iterator.next().value()).isEqualTo(\"A\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"B\");\n\t\tassertThat(iterator.next().value()).isEqualTo(\"C\");\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface NonRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerMissingValueAttribute {\n\t\t// InvalidRepeatable[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithNonArrayValueAttribute {\n\n\t\tInvalidRepeatable value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ContainerWithArrayValueAttributeButWrongComponentType {\n\n\t\tString[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface InvalidRepeatable {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface PeteRepeats {\n\n\t\tPeteRepeat[] value();\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@Repeatable(PeteRepeats.class)\n\t@interface PeteRepeat {\n\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForPetesSake {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeat(\"shadowed\")\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ForTheLoveOfFoo {\n\n\t\t@AliasFor(annotation = PeteRepeat.class)\n\t\tString value();\n\t}\n\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\t@Target({ ElementType.METHOD, ElementType.TYPE })\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Inherited\n\t@interface ComposedContainer {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@PeteRepeats({ @PeteRepeat(\"B\"), @PeteRepeat(\"C\") })\n\tstatic class RepeatableClass {\n\t}\n\n\tstatic class SubRepeatableClass extends RepeatableClass {\n\t}\n\n\t@ForPetesSake(\"B\")\n\t@ForTheLoveOfFoo(\"C\")\n\t@PeteRepeat(\"A\")\n\tstatic class ComposedRepeatableClass {\n\t}\n\n\t@ForPetesSake(\"C\")\n\t@PeteRepeats(@PeteRepeat(\"A\"))\n\t@PeteRepeat(\"B\")\n\tstatic class ComposedRepeatableMixedWithContainerClass {\n\t}\n\n\t@PeteRepeat(\"A\")\n\t@ComposedContainer\n\tstatic class ComposedContainerClass {\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface Noninheriteds {\n\n\t\tNoninherited[] value();\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(Noninheriteds.class)\n\t@interface Noninherited {\n\n\t\t@AliasFor(\"name\")\n\t\tString value() default \"\";\n\n\t\t@AliasFor(\"value\")\n\t\tString name() default \"\";\n\t}\n\n\t@Noninherited(name = \"shadowed\")\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface ComposedNoninherited {\n\n\t\t@AliasFor(annotation = Noninherited.class)\n\t\tString name() default \"\";\n\t}\n\n\t@ComposedNoninherited(name = \"C\")\n\t@Noninheriteds({ @Noninherited(value = \"A\"), @Noninherited(name = \"B\") })\n\tstatic class NoninheritedRepeatableClass {\n\t}\n\n\tstatic class SubNoninheritedRepeatableClass extends NoninheritedRepeatableClass {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.SubNoninheritedRepeatableClass",
    "headType": "class",
    "relation": "extend",
    "tail": "NoninheritedRepeatableClass",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.OverridingClassLoader;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link MergedAnnotation} to ensure the correct class loader is\n * used.\n *\n * @author Phillip Webb\n * @since 5.2\n */\nclass MergedAnnotationClassLoaderTests {\n\n\tprivate static final String TEST_ANNOTATION = TestAnnotation.class.getName();\n\n\tprivate static final String TEST_META_ANNOTATION = TestMetaAnnotation.class.getName();\n\n\tprivate static final String WITH_TEST_ANNOTATION = WithTestAnnotation.class.getName();\n\n\tprivate static final String TEST_REFERENCE = TestReference.class.getName();\n\n\t@Test\n\tvoid synthesizedUsesCorrectClassLoader() throws Exception {\n\t\tClassLoader parent = getClass().getClassLoader();\n\t\tTestClassLoader child = new TestClassLoader(parent);\n\t\tClass<?> source = child.loadClass(WITH_TEST_ANNOTATION);\n\t\tAnnotation annotation = getDeclaredAnnotation(source, TEST_ANNOTATION);\n\t\tAnnotation metaAnnotation = getDeclaredAnnotation(annotation.annotationType(),\n\t\t\t\tTEST_META_ANNOTATION);\n\t\t// We should have loaded the source and initial annotation from child\n\t\tassertThat(source.getClassLoader()).isEqualTo(child);\n\t\tassertThat(annotation.getClass().getClassLoader()).isEqualTo(child);\n\t\tassertThat(annotation.annotationType().getClassLoader()).isEqualTo(child);\n\t\t// The meta-annotation should have been loaded by the parent\n\t\tassertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(\n\t\t\t\tgetEnumAttribute(metaAnnotation).getClass().getClassLoader()).isEqualTo(\n\t\t\t\t\t\tparent);\n\t\tassertThat(getClassAttribute(metaAnnotation).getClassLoader()).isEqualTo(child);\n\t\t// MergedAnnotation should follow the same class loader logic\n\t\tMergedAnnotations mergedAnnotations = MergedAnnotations.from(source);\n\t\tAnnotation synthesized = mergedAnnotations.get(TEST_ANNOTATION).synthesize();\n\t\tAnnotation synthesizedMeta = mergedAnnotations.get(\n\t\t\t\tTEST_META_ANNOTATION).synthesize();\n\t\tassertThat(synthesized.getClass().getClassLoader()).isEqualTo(child);\n\t\tassertThat(synthesized.annotationType().getClassLoader()).isEqualTo(child);\n\t\tassertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(getClassAttribute(synthesizedMeta).getClassLoader()).isEqualTo(child);\n\t\tassertThat(\n\t\t\t\tgetEnumAttribute(synthesizedMeta).getClass().getClassLoader()).isEqualTo(\n\t\t\t\t\t\tparent);\n\t\tassertThat(synthesized).isEqualTo(annotation);\n\t\tassertThat(synthesizedMeta).isEqualTo(metaAnnotation);\n\t\t// Also check utils version\n\t\tAnnotation utilsMeta = AnnotatedElementUtils.getMergedAnnotation(source,\n\t\t\t\tTestMetaAnnotation.class);\n\t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(getClassAttribute(utilsMeta).getClassLoader()).isEqualTo(child);\n\t\tassertThat(getEnumAttribute(utilsMeta).getClass().getClassLoader()).isEqualTo(\n\t\t\t\tparent);\n\t\tassertThat(utilsMeta).isEqualTo(metaAnnotation);\n\t}\n\n\tprivate Class<?> getClassAttribute(Annotation annotation) throws Exception {\n\t\treturn (Class<?>) getAttributeValue(annotation, \"classValue\");\n\t}\n\n\tprivate Enum<?> getEnumAttribute(Annotation annotation) throws Exception {\n\t\treturn (Enum<?>) getAttributeValue(annotation, \"enumValue\");\n\t}\n\n\tprivate Object getAttributeValue(Annotation annotation, String name)\n\t\t\tthrows Exception {\n\t\tMethod classValueMethod = annotation.annotationType().getDeclaredMethod(name);\n\t\tclassValueMethod.setAccessible(true);\n\t\treturn classValueMethod.invoke(annotation);\n\t}\n\n\tprivate Annotation getDeclaredAnnotation(Class<?> element, String annotationType) {\n\t\tfor (Annotation annotation : element.getDeclaredAnnotations()) {\n\t\t\tif (annotation.annotationType().getName().equals(annotationType)) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static class TestClassLoader extends OverridingClassLoader {\n\n\t\tpublic TestClassLoader(ClassLoader parent) {\n\t\t\tsuper(parent);\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\treturn WITH_TEST_ANNOTATION.equals(className)\n\t\t\t\t\t|| TEST_ANNOTATION.equals(className)\n\t\t\t\t\t|| TEST_REFERENCE.equals(className);\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestMetaAnnotation {\n\n\t\t@AliasFor(\"d\")\n\t\tString c() default \"\";\n\n\t\t@AliasFor(\"c\")\n\t\tString d() default \"\";\n\n\t\tClass<?> classValue();\n\n\t\tTestEnum enumValue();\n\n\t}\n\n\t@TestMetaAnnotation(classValue = TestReference.class, enumValue = TestEnum.TWO)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation {\n\n\t\t@AliasFor(\"b\")\n\t\tString a() default \"\";\n\n\t\t@AliasFor(\"a\")\n\t\tString b() default \"\";\n\n\t}\n\n\t@TestAnnotation\n\tstatic class WithTestAnnotation {\n\t}\n\n\tstatic class TestReference {\n\t}\n\n\tenum TestEnum {\n\t\tONE, TWO, THREE\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_ANNOTATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_ANNOTATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_META_ANNOTATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_META_ANNOTATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#WITH_TEST_ANNOTATION",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#WITH_TEST_ANNOTATION",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  }
]