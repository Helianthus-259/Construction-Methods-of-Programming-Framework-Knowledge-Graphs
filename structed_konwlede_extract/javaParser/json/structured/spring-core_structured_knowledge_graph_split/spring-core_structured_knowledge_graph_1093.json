[
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#debug(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#debug(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with debug log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void debug(Throwable cause, CharSequence message) {\r\n    this.log.debug(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#debug(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#trace(CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with trace log level.\r\n * @param message the message to log\r\n */\r\npublic void trace(CharSequence message) {\r\n    this.log.trace(message);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#trace(CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#trace(Throwable,CharSequence)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with trace log level.\r\n * @param cause the exception to log\r\n * @param message the message to log\r\n */\r\npublic void trace(Throwable cause, CharSequence message) {\r\n    this.log.trace(message, cause);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#trace(Throwable,CharSequence)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#fatal(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Supplier-based log methods\r\n/**\r\n * Log a message with fatal log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void fatal(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isFatalEnabled()) {\r\n        this.log.fatal(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#fatal(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#fatal(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with fatal log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void fatal(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isFatalEnabled()) {\r\n        this.log.fatal(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#fatal(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#error(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with error log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void error(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isErrorEnabled()) {\r\n        this.log.error(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#error(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#error(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with error log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void error(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isErrorEnabled()) {\r\n        this.log.error(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#error(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#warn(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with warn log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void warn(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isWarnEnabled()) {\r\n        this.log.warn(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#warn(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#warn(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with warn log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void warn(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isWarnEnabled()) {\r\n        this.log.warn(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#warn(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#info(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with info log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void info(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isInfoEnabled()) {\r\n        this.log.info(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  }
]