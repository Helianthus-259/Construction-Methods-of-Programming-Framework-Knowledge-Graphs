[
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests#decode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void decodeToMono() {\r\n    Flux<DataBuffer> input = Flux.concat(dataBuffer(this.fooBytes), dataBuffer(this.barBytes));\r\n    byte[] expected = new byte[this.fooBytes.length + this.barBytes.length];\r\n    System.arraycopy(this.fooBytes, 0, expected, 0, this.fooBytes.length);\r\n    System.arraycopy(this.barBytes, 0, expected, this.fooBytes.length, this.barBytes.length);\r\n    testDecodeToMonoAll(input, DataBuffer.class, step -> step.consumeNextWith(expectDataBuffer(expected)).verifyComplete());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferDecoderTests#decodeToMono()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests#expectDataBuffer(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private Consumer<DataBuffer> expectDataBuffer(byte[] expected) {\r\n    return actual -> {\r\n        byte[] actualBytes = new byte[actual.readableByteCount()];\r\n        actual.read(actualBytes);\r\n        assertThat(actualBytes).isEqualTo(expected);\r\n        DataBufferUtils.release(actual);\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferDecoderTests#expectDataBuffer(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.DataBufferEncoderTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.testfixture.codec.AbstractEncoderTests;\nimport org.springframework.util.MimeTypeUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Sebastien Deleuze\n */\nclass DataBufferEncoderTests extends AbstractEncoderTests<DataBufferEncoder> {\n\n\tprivate final byte[] fooBytes = \"foo\".getBytes(StandardCharsets.UTF_8);\n\n\tprivate final byte[] barBytes = \"bar\".getBytes(StandardCharsets.UTF_8);\n\n\tDataBufferEncoderTests() {\n\t\tsuper(new DataBufferEncoder());\n\t}\n\n\n\t@Override\n\t@Test\n\tprotected void canEncode() {\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(DataBuffer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isTrue();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class),\n\t\t\t\tMimeTypeUtils.TEXT_PLAIN)).isFalse();\n\t\tassertThat(this.encoder.canEncode(ResolvableType.forClass(DataBuffer.class),\n\t\t\t\tMimeTypeUtils.APPLICATION_JSON)).isTrue();\n\n\t\t// SPR-15464\n\t\tassertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\n\t}\n\n\t@Override\n\t@Test\n\tprotected void encode() {\n\t\tFlux<DataBuffer> input = Flux.just(this.fooBytes, this.barBytes)\n\t\t\t\t.flatMap(bytes -> Mono.defer(() -> {\n\t\t\t\t\tDataBuffer dataBuffer = this.bufferFactory.allocateBuffer(bytes.length);\n\t\t\t\t\tdataBuffer.write(bytes);\n\t\t\t\t\treturn Mono.just(dataBuffer);\n\t\t\t\t}));\n\n\t\ttestEncodeAll(input, DataBuffer.class, step -> step\n\t\t\t\t.consumeNextWith(expectBytes(this.fooBytes))\n\t\t\t\t.consumeNextWith(expectBytes(this.barBytes))\n\t\t\t\t.verifyComplete());\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.DataBufferEncoderTests#fooBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#fooBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.codec.DataBufferEncoderTests#barBytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#barBytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void canEncode() {\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(DataBuffer.class), MimeTypeUtils.TEXT_PLAIN)).isTrue();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(Integer.class), MimeTypeUtils.TEXT_PLAIN)).isFalse();\r\n    assertThat(this.encoder.canEncode(ResolvableType.forClass(DataBuffer.class), MimeTypeUtils.APPLICATION_JSON)).isTrue();\r\n    // SPR-15464\r\n    assertThat(this.encoder.canEncode(ResolvableType.NONE, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferEncoderTests#canEncode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#canEncode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoderTests#encode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Test\r\nprotected void encode() {\r\n    Flux<DataBuffer> input = Flux.just(this.fooBytes, this.barBytes).flatMap(bytes -> Mono.defer(() -> {\r\n        DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(bytes.length);\r\n        dataBuffer.write(bytes);\r\n        return Mono.just(dataBuffer);\r\n    }));\r\n    testEncodeAll(input, DataBuffer.class, step -> step.consumeNextWith(expectBytes(this.fooBytes)).consumeNextWith(expectBytes(this.barBytes)).verifyComplete());\r\n}",
    "tailType": "method_code"
  }
]