[
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToObjectConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\nimport java.util.StringJoiner;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\n\n/**\n * Converts a Collection to a comma-delimited String.\n *\n * @author Keith Donald\n * @since 3.0\n */\nfinal class CollectionToStringConverter implements ConditionalGenericConverter {\n\n\tprivate static final String DELIMITER = \",\";\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic CollectionToStringConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Collection.class, String.class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(\n\t\t\t\tsourceType.getElementTypeDescriptor(), targetType, this.conversionService);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (!(source instanceof Collection<?> sourceCollection)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (sourceCollection.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringJoiner sj = new StringJoiner(DELIMITER);\n\t\tfor (Object sourceElement : sourceCollection) {\n\t\t\tObject targetElement = this.conversionService.convert(\n\t\t\t\t\tsourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);\n\t\t\tsj.add(String.valueOf(targetElement));\n\t\t}\n\t\treturn sj.toString();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter#DELIMITER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#DELIMITER",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter#conversionService",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#conversionService",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes() {\r\n    return Collections.singleton(new ConvertiblePair(Collection.class, String.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, this.conversionService);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#matches(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (!(source instanceof Collection<?> sourceCollection)) {\r\n        return null;\r\n    }\r\n    if (sourceCollection.isEmpty()) {\r\n        return \"\";\r\n    }\r\n    StringJoiner sj = new StringJoiner(DELIMITER);\r\n    for (Object sourceElement : sourceCollection) {\r\n        Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType);\r\n        sj.add(String.valueOf(targetElement));\r\n    }\r\n    return sj.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CollectionToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToStringConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  }
]