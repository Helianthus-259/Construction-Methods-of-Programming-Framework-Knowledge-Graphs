[
  {
    "head": "org.springframework.aot.hint.support.ExtendedSpringFactoriesLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "SpringFactoriesLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FilteredIteratorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nfinal class FilteredIteratorTests {\n\n\t@Test\n\tvoid filter() {\n\t\tList<String> list = List.of(\"foo\", \"bar\", \"baz\");\n\t\tFilteredIterator<String> filtered = new FilteredIterator<>(list.iterator(), s -> !s.equals(\"bar\"));\n\n\t\tassertThat(filtered).toIterable().containsExactly(\"foo\", \"baz\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FilteredIteratorTests#filter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid filter() {\r\n    List<String> list = List.of(\"foo\", \"bar\", \"baz\");\r\n    FilteredIterator<String> filtered = new FilteredIterator<>(list.iterator(), s -> !s.equals(\"bar\"));\r\n    assertThat(filtered).toIterable().containsExactly(\"foo\", \"baz\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredIteratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredIteratorTests#filter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredIteratorTests#filter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\n\n/**\n * {@link RuntimeHintsRegistrar} to register hints for {@link org.springframework.core.SpringProperties}.\n *\n * @author Brian Clozel\n * @since 6.1\n */\nclass SpringPropertiesRuntimeHints implements RuntimeHintsRegistrar {\n\n\t\t@Override\n\t\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\t\thints.resources().registerPattern(\"spring.properties\");\n\t\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\r\n    hints.resources().registerPattern(\"spring.properties\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.SpringPropertiesRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.FilteredMapTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport static java.util.Map.entry;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n */\nclass FilteredMapTests {\n\n\t@Test\n\tvoid size() {\n\t\tMap<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tassertThat(filtered).hasSize(2);\n\t}\n\n\t@Test\n\tvoid entrySet() {\n\t\tMap<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tassertThat(filtered.entrySet()).containsExactlyInAnyOrder(entry(\"foo\", \"bar\"), entry(\"quux\", \"corge\"));\n\t}\n\n\t@Test\n\tvoid containsKey() {\n\t\tMap<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tboolean contained = filtered.containsKey(\"baz\");\n\t\tassertThat(contained).isFalse();\n\t}\n\n\t@Test\n\tvoid get() {\n\t\tMap<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tString value = filtered.get(\"baz\");\n\t\tassertThat(value).isNull();\n\t}\n\n\t@Test\n\tvoid put() {\n\t\tMap<String, String> map = new HashMap<>(Map.of(\"foo\", \"bar\", \"quux\", \"corge\"));\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tString value = filtered.put(\"baz\", \"qux\");\n\t\tassertThat(value).isNull();\n\t\tassertThat(filtered.containsKey(\"baz\")).isFalse();\n\t\tassertThat(map.get(\"baz\")).isEqualTo(\"qux\");\n\n\t\t// overwrite\n\t\tvalue = filtered.put(\"baz\", \"QUX\");\n\t\tassertThat(value).isNull();\n\t\tassertThat(filtered.containsKey(\"baz\")).isFalse();\n\t\tassertThat(map.get(\"baz\")).isEqualTo(\"QUX\");\n\t}\n\n\t@Test\n\tvoid remove() {\n\t\tMap<String, String> map = new HashMap<>(Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"));\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tString value = filtered.remove(\"baz\");\n\t\tassertThat(value).isNull();\n\t\tassertThat(filtered.containsKey(\"baz\")).isFalse();\n\t\tassertThat(map.containsKey(\"baz\")).isFalse();\n\t}\n\n\t@Test\n\tvoid keySet() {\n\t\tMap<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\n\t\tFilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\n\n\t\tSet<String> keySet = filtered.keySet();\n\t\tassertThat(keySet).containsExactlyInAnyOrder(\"foo\", \"quux\");\n\t}\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#size()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid size() {\r\n    Map<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    assertThat(filtered).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#size()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#size()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#entrySet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid entrySet() {\r\n    Map<String, String> map = Map.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\");\r\n    FilteredMap<String, String> filtered = new FilteredMap<>(map, s -> !s.equals(\"baz\"));\r\n    assertThat(filtered.entrySet()).containsExactlyInAnyOrder(entry(\"foo\", \"bar\"), entry(\"quux\", \"corge\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FilteredMapTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FilteredMapTests#entrySet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FilteredMapTests#entrySet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]