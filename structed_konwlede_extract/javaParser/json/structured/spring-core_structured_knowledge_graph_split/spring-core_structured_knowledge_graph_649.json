[
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#add(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#create()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create an interface using the current set of method signatures.\r\n */\r\npublic Class create() {\r\n    setUseCache(false);\r\n    return (Class) super.create(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#create()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#getDefaultClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected ClassLoader getDefaultClassLoader() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#getDefaultClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#getDefaultClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return type;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    throw new IllegalStateException(\"InterfaceMaker does not cache\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) throws Exception {\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC | Constants.ACC_INTERFACE | Constants.ACC_ABSTRACT, getClassName(), null, null, Constants.SOURCE_FILE);\r\n    for (Iterator it = signatures.keySet().iterator(); it.hasNext(); ) {\r\n        Signature sig = (Signature) it.next();\r\n        Type[] exceptions = (Type[]) signatures.get(sig);\r\n        ce.begin_method(Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig, exceptions).end_method();\r\n    }\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.proxy.InterfaceMaker",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.proxy",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.proxy",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.proxy.InvocationHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.proxy;\n\nimport java.lang.reflect.Method;\n\n/**\n * {@link java.lang.reflect.InvocationHandler} replacement (unavailable under JDK 1.2).\n * This callback type is primarily for use by the {@link Proxy} class but\n * may be used with {@link Enhancer} as well.\n * @author Neeme Praks <a href=\"mailto:neeme@apache.org\">neeme@apache.org</a>\n * @version $Id: InvocationHandler.java,v 1.3 2004/06/24 21:15:20 herbyderby Exp $\n */\npublic interface InvocationHandler\nextends Callback\n{\n    /**\n     * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\n     */\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.proxy.InvocationHandler#invoke(Object,Method,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])\r\n */\r\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable;",
    "tailType": "method_code"
  }
]