[
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#resolvePropertyName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check to see if this property source contains a property with the given name, or\r\n * any underscore / uppercase variation thereof. Return the resolved name if one is\r\n * found or otherwise the original name. Never returns {@code null}.\r\n */\r\nprotected final String resolvePropertyName(String name) {\r\n    Assert.notNull(name, \"Property name must not be null\");\r\n    String resolvedName = checkPropertyName(name);\r\n    if (resolvedName != null) {\r\n        return resolvedName;\r\n    }\r\n    String uppercasedName = name.toUpperCase(Locale.ROOT);\r\n    if (!name.equals(uppercasedName)) {\r\n        resolvedName = checkPropertyName(uppercasedName);\r\n        if (resolvedName != null) {\r\n            return resolvedName;\r\n        }\r\n    }\r\n    return name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySource#resolvePropertyName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#checkPropertyName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate String checkPropertyName(String name) {\r\n    // Check name as-is\r\n    if (this.source.containsKey(name)) {\r\n        return name;\r\n    }\r\n    // Check name with just dots replaced\r\n    String noDotName = name.replace('.', '_');\r\n    if (!name.equals(noDotName) && this.source.containsKey(noDotName)) {\r\n        return noDotName;\r\n    }\r\n    // Check name with just hyphens replaced\r\n    String noHyphenName = name.replace('-', '_');\r\n    if (!name.equals(noHyphenName) && this.source.containsKey(noHyphenName)) {\r\n        return noHyphenName;\r\n    }\r\n    // Check name with dots and hyphens replaced\r\n    String noDotNoHyphenName = noDotName.replace('-', '_');\r\n    if (!noDotName.equals(noDotNoHyphenName) && this.source.containsKey(noDotNoHyphenName)) {\r\n        return noDotNoHyphenName;\r\n    }\r\n    // Give up\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.SystemEnvironmentPropertySource#checkPropertyName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource#checkPropertyName(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.SystemEnvironmentPropertySource",
    "headType": "class",
    "relation": "extend",
    "tail": "MapPropertySource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ExceptionDepthComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport org.springframework.util.Assert;\n\n/**\n * Comparator capable of sorting exceptions based on their depth from the thrown exception type.\n *\n * @author Juergen Hoeller\n * @author Arjen Poutsma\n * @since 3.0.3\n */\npublic class ExceptionDepthComparator implements Comparator<Class<? extends Throwable>> {\n\n\tprivate final Class<? extends Throwable> targetException;\n\n\n\t/**\n\t * Create a new ExceptionDepthComparator for the given exception.\n\t * @param exception the target exception to compare to when sorting by depth\n\t */\n\tpublic ExceptionDepthComparator(Throwable exception) {\n\t\tAssert.notNull(exception, \"Target exception must not be null\");\n\t\tthis.targetException = exception.getClass();\n\t}\n\n\t/**\n\t * Create a new ExceptionDepthComparator for the given exception type.\n\t * @param exceptionType the target exception type to compare to when sorting by depth\n\t */\n\tpublic ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {\n\t\tAssert.notNull(exceptionType, \"Target exception type must not be null\");\n\t\tthis.targetException = exceptionType;\n\t}\n\n\n\t@Override\n\tpublic int compare(Class<? extends Throwable> o1, Class<? extends Throwable> o2) {\n\t\tint depth1 = getDepth(o1, this.targetException, 0);\n\t\tint depth2 = getDepth(o2, this.targetException, 0);\n\t\treturn (depth1 - depth2);\n\t}\n\n\tprivate int getDepth(Class<?> declaredException, Class<?> exceptionToMatch, int depth) {\n\t\tif (exceptionToMatch.equals(declaredException)) {\n\t\t\t// Found it!\n\t\t\treturn depth;\n\t\t}\n\t\t// If we've gone as far as we can go and haven't found it...\n\t\tif (exceptionToMatch == Throwable.class) {\n\t\t\treturn Integer.MAX_VALUE;\n\t\t}\n\t\treturn getDepth(declaredException, exceptionToMatch.getSuperclass(), depth + 1);\n\t}\n\n\n\t/**\n\t * Obtain the closest match from the given exception types for the given target exception.\n\t * @param exceptionTypes the collection of exception types\n\t * @param targetException the target exception to find a match for\n\t * @return the closest matching exception type from the given collection\n\t */\n\tpublic static Class<? extends Throwable> findClosestMatch(\n\t\t\tCollection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {\n\n\t\tAssert.notEmpty(exceptionTypes, \"Exception types must not be empty\");\n\t\tif (exceptionTypes.size() == 1) {\n\t\t\treturn exceptionTypes.iterator().next();\n\t\t}\n\t\tList<Class<? extends Throwable>> handledExceptions = new ArrayList<>(exceptionTypes);\n\t\thandledExceptions.sort(new ExceptionDepthComparator(targetException));\n\t\treturn handledExceptions.get(0);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ExceptionDepthComparator#targetException",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator#targetException",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<? extends Throwable>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator#compare(Class<? extends Throwable>,Class<? extends Throwable>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(Class<? extends Throwable> o1, Class<? extends Throwable> o2) {\r\n    int depth1 = getDepth(o1, this.targetException, 0);\r\n    int depth2 = getDepth(o2, this.targetException, 0);\r\n    return (depth1 - depth2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparator#compare(Class<? extends Throwable>,Class<? extends Throwable>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator#compare(Class<? extends Throwable>,Class<? extends Throwable>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator#getDepth(Class<?>,Class<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int getDepth(Class<?> declaredException, Class<?> exceptionToMatch, int depth) {\r\n    if (exceptionToMatch.equals(declaredException)) {\r\n        // Found it!\r\n        return depth;\r\n    }\r\n    // If we've gone as far as we can go and haven't found it...\r\n    if (exceptionToMatch == Throwable.class) {\r\n        return Integer.MAX_VALUE;\r\n    }\r\n    return getDepth(declaredException, exceptionToMatch.getSuperclass(), depth + 1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparator#getDepth(Class<?>,Class<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator#findClosestMatch(Collection<Class<? extends Throwable>>,Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Obtain the closest match from the given exception types for the given target exception.\r\n * @param exceptionTypes the collection of exception types\r\n * @param targetException the target exception to find a match for\r\n * @return the closest matching exception type from the given collection\r\n */\r\npublic static Class<? extends Throwable> findClosestMatch(Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {\r\n    Assert.notEmpty(exceptionTypes, \"Exception types must not be empty\");\r\n    if (exceptionTypes.size() == 1) {\r\n        return exceptionTypes.iterator().next();\r\n    }\r\n    List<Class<? extends Throwable>> handledExceptions = new ArrayList<>(exceptionTypes);\r\n    handledExceptions.sort(new ExceptionDepthComparator(targetException));\r\n    return handledExceptions.get(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ExceptionDepthComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ExceptionDepthComparator#findClosestMatch(Collection<Class<? extends Throwable>>,Throwable)",
    "tailType": "method"
  }
]