[
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#getNamespace(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#getNamespace(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int next() throws XMLStreamException {\r\n    this.event = this.eventReader.nextEvent();\r\n    return this.event.getEventType();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#close()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void close() throws XMLStreamException {\r\n    this.eventReader.close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#close()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#close()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#countIterator(Iterator)",
    "headType": "method",
    "relation": "provide",
    "tail": "@SuppressWarnings(\"rawtypes\")\r\nprivate static int countIterator(Iterator iterator) {\r\n    int count = 0;\r\n    while (iterator.hasNext()) {\r\n        iterator.next();\r\n        count++;\r\n    }\r\n    return count;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.XMLEventStreamReader#countIterator(Iterator)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader#countIterator(Iterator)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamReader",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractXMLStreamReader",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.XMLEventFactory;\nimport javax.xml.stream.XMLEventWriter;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.stream.events.EndElement;\nimport javax.xml.stream.events.Namespace;\nimport javax.xml.stream.events.StartElement;\n\n/**\n * Implementation of the {@link javax.xml.stream.XMLStreamWriter} interface\n * that wraps an {@link XMLEventWriter}.\n *\n * @author Arjen Poutsma\n * @since 3.0.5\n * @see StaxUtils#createEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)\n */\nclass XMLEventStreamWriter implements XMLStreamWriter {\n\n\tprivate static final String DEFAULT_ENCODING = \"UTF-8\";\n\n\tprivate final XMLEventWriter eventWriter;\n\n\tprivate final XMLEventFactory eventFactory;\n\n\tprivate final List<EndElement> endElements = new ArrayList<>();\n\n\tprivate boolean emptyElement = false;\n\n\n\tpublic XMLEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {\n\t\tthis.eventWriter = eventWriter;\n\t\tthis.eventFactory = eventFactory;\n\t}\n\n\n\t@Override\n\tpublic void setNamespaceContext(NamespaceContext context) throws XMLStreamException {\n\t\tthis.eventWriter.setNamespaceContext(context);\n\t}\n\n\t@Override\n\tpublic NamespaceContext getNamespaceContext() {\n\t\treturn this.eventWriter.getNamespaceContext();\n\t}\n\n\t@Override\n\tpublic void setPrefix(String prefix, String uri) throws XMLStreamException {\n\t\tthis.eventWriter.setPrefix(prefix, uri);\n\t}\n\n\t@Override\n\tpublic String getPrefix(String uri) throws XMLStreamException {\n\t\treturn this.eventWriter.getPrefix(uri);\n\t}\n\n\t@Override\n\tpublic void setDefaultNamespace(String uri) throws XMLStreamException {\n\t\tthis.eventWriter.setDefaultNamespace(uri);\n\t}\n\n\t@Override\n\tpublic Object getProperty(String name) throws IllegalArgumentException {\n\t\tthrow new IllegalArgumentException();\n\t}\n\n\n\t@Override\n\tpublic void writeStartDocument() throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createStartDocument());\n\t}\n\n\t@Override\n\tpublic void writeStartDocument(String version) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createStartDocument(DEFAULT_ENCODING, version));\n\t}\n\n\t@Override\n\tpublic void writeStartDocument(String encoding, String version) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createStartDocument(encoding, version));\n\t}\n\n\t@Override\n\tpublic void writeStartElement(String localName) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tdoWriteStartElement(this.eventFactory.createStartElement(new QName(localName), null, null));\n\t}\n\n\t@Override\n\tpublic void writeStartElement(String namespaceURI, String localName) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tdoWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName), null, null));\n\t}\n\n\t@Override\n\tpublic void writeStartElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tdoWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName, prefix), null, null));\n\t}\n\n\tprivate void doWriteStartElement(StartElement startElement) throws XMLStreamException {\n\t\tthis.eventWriter.add(startElement);\n\t\tthis.endElements.add(this.eventFactory.createEndElement(startElement.getName(), startElement.getNamespaces()));\n\t}\n\n\t@Override\n\tpublic void writeEmptyElement(String localName) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\twriteStartElement(localName);\n\t\tthis.emptyElement = true;\n\t}\n\n\t@Override\n\tpublic void writeEmptyElement(String namespaceURI, String localName) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\twriteStartElement(namespaceURI, localName);\n\t\tthis.emptyElement = true;\n\t}\n\n\t@Override\n\tpublic void writeEmptyElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\twriteStartElement(prefix, localName, namespaceURI);\n\t\tthis.emptyElement = true;\n\t}\n\n\tprivate void closeEmptyElementIfNecessary() throws XMLStreamException {\n\t\tif (this.emptyElement) {\n\t\t\tthis.emptyElement = false;\n\t\t\twriteEndElement();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void writeEndElement() throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tint last = this.endElements.size() - 1;\n\t\tEndElement lastEndElement = this.endElements.remove(last);\n\t\tthis.eventWriter.add(lastEndElement);\n\t}\n\n\t@Override\n\tpublic void writeAttribute(String localName, String value) throws XMLStreamException {\n\t\tthis.eventWriter.add(this.eventFactory.createAttribute(localName, value));\n\t}\n\n\t@Override\n\tpublic void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {\n\t\tthis.eventWriter.add(this.eventFactory.createAttribute(new QName(namespaceURI, localName), value));\n\t}\n\n\t@Override\n\tpublic void writeAttribute(String prefix, String namespaceURI, String localName, String value)\n\t\t\tthrows XMLStreamException {\n\n\t\tthis.eventWriter.add(this.eventFactory.createAttribute(prefix, namespaceURI, localName, value));\n\t}\n\n\t@Override\n\tpublic void writeNamespace(String prefix, String namespaceURI) throws XMLStreamException {\n\t\tdoWriteNamespace(this.eventFactory.createNamespace(prefix, namespaceURI));\n\t}\n\n\t@Override\n\tpublic void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {\n\t\tdoWriteNamespace(this.eventFactory.createNamespace(namespaceURI));\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\tprivate void doWriteNamespace(Namespace namespace) throws XMLStreamException {\n\t\tint last = this.endElements.size() - 1;\n\t\tEndElement oldEndElement = this.endElements.get(last);\n\t\tIterator oldNamespaces = oldEndElement.getNamespaces();\n\t\tList<Namespace> newNamespaces = new ArrayList<>();\n\t\twhile (oldNamespaces.hasNext()) {\n\t\t\tNamespace oldNamespace = (Namespace) oldNamespaces.next();\n\t\t\tnewNamespaces.add(oldNamespace);\n\t\t}\n\t\tnewNamespaces.add(namespace);\n\t\tEndElement newEndElement = this.eventFactory.createEndElement(oldEndElement.getName(), newNamespaces.iterator());\n\t\tthis.eventWriter.add(namespace);\n\t\tthis.endElements.set(last, newEndElement);\n\t}\n\n\t@Override\n\tpublic void writeCharacters(String text) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createCharacters(text));\n\t}\n\n\t@Override\n\tpublic void writeCharacters(char[] text, int start, int len) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createCharacters(new String(text, start, len)));\n\t}\n\n\t@Override\n\tpublic void writeCData(String data) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createCData(data));\n\t}\n\n\t@Override\n\tpublic void writeComment(String data) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createComment(data));\n\t}\n\n\t@Override\n\tpublic void writeProcessingInstruction(String target) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createProcessingInstruction(target, \"\"));\n\t}\n\n\t@Override\n\tpublic void writeProcessingInstruction(String target, String data) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createProcessingInstruction(target, data));\n\t}\n\n\t@Override\n\tpublic void writeDTD(String dtd) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createDTD(dtd));\n\t}\n\n\t@Override\n\tpublic void writeEntityRef(String name) throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createEntityReference(name, null));\n\t}\n\n\t@Override\n\tpublic void writeEndDocument() throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.add(this.eventFactory.createEndDocument());\n\t}\n\n\t@Override\n\tpublic void flush() throws XMLStreamException {\n\t\tthis.eventWriter.flush();\n\t}\n\n\t@Override\n\tpublic void close() throws XMLStreamException {\n\t\tcloseEmptyElementIfNecessary();\n\t\tthis.eventWriter.close();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#DEFAULT_ENCODING",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#DEFAULT_ENCODING",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#eventWriter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter#eventWriter",
    "headType": "field",
    "relation": "haveType",
    "tail": "XMLEventWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.XMLEventStreamWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.XMLEventStreamWriter#eventFactory",
    "tailType": "field"
  }
]