[
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#isEmpty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsKey() {\r\n    assertThat(this.adapter.containsKey(\"foo\")).isTrue();\r\n    assertThat(this.adapter.containsKey(\"qux\")).isTrue();\r\n    assertThat(this.adapter.containsKey(\"corge\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid containsValue() {\r\n    assertThat(this.adapter.containsValue(List.of(\"bar\"))).isTrue();\r\n    assertThat(this.adapter.containsValue(List.of(\"quux\"))).isTrue();\r\n    assertThat(this.adapter.containsValue(List.of(\"corge\"))).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#containsValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#get()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid get() {\r\n    assertThat(this.adapter.get(\"foo\")).isEqualTo(List.of(\"bar\"));\r\n    assertThat(this.adapter.get(\"qux\")).isEqualTo(List.of(\"quux\"));\r\n    assertThat(this.adapter.get(\"corge\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#get()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#get()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#put()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid put() {\r\n    assertThat(this.adapter.put(\"foo\", List.of(\"baz\"))).containsExactly(\"bar\");\r\n    assertThat(this.adapter.put(\"qux\", Collections.emptyList())).containsExactly(\"quux\");\r\n    assertThat(this.adapter.put(\"grault\", List.of(\"garply\"))).isNull();\r\n    assertThat(this.delegate).containsExactly(entry(\"foo\", \"baz\"), entry(\"qux\", null), entry(\"grault\", \"garply\"));\r\n    assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(() -> this.adapter.put(\"foo\", List.of(\"bar\", \"baz\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#put()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#put()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#remove()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid remove() {\r\n    assertThat(this.adapter.remove(\"foo\")).isEqualTo(List.of(\"bar\"));\r\n    assertThat(this.adapter.containsKey(\"foo\")).isFalse();\r\n    assertThat(this.delegate.containsKey(\"foo\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#remove()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#putAll()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid putAll() {\r\n    MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\r\n    map.add(\"foo\", \"baz\");\r\n    map.add(\"qux\", null);\r\n    map.add(\"grault\", \"garply\");\r\n    this.adapter.putAll(map);\r\n    assertThat(this.delegate).containsExactly(entry(\"foo\", \"baz\"), entry(\"qux\", null), entry(\"grault\", \"garply\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.SingleToMultiValueMapAdapterTests#putAll()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#putAll()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.SingleToMultiValueMapAdapterTests#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid clear() {\r\n    this.adapter.clear();\r\n    assertThat(this.adapter).isEmpty();\r\n    assertThat(this.delegate).isEmpty();\r\n}",
    "tailType": "method_code"
  }
]