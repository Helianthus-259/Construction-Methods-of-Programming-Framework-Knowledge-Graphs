[
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link Resource} implementation for a given byte array.\n * <p>Creates a {@link ByteArrayInputStream} for the given byte array.\n *\n * <p>Useful for loading content from any given byte array,\n * without having to resort to a single-use {@link InputStreamResource}.\n * Particularly useful for creating mail attachments from local content,\n * where JavaMail needs to be able to read the stream multiple times.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 1.2.3\n * @see java.io.ByteArrayInputStream\n * @see InputStreamResource\n * @see org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)\n */\npublic class ByteArrayResource extends AbstractResource {\n\n\tprivate final byte[] byteArray;\n\n\tprivate final String description;\n\n\n\t/**\n\t * Create a new {@code ByteArrayResource}.\n\t * @param byteArray the byte array to wrap\n\t */\n\tpublic ByteArrayResource(byte[] byteArray) {\n\t\tthis(byteArray, \"resource loaded from byte array\");\n\t}\n\n\t/**\n\t * Create a new {@code ByteArrayResource} with a description.\n\t * @param byteArray the byte array to wrap\n\t * @param description where the byte array comes from\n\t */\n\tpublic ByteArrayResource(byte[] byteArray, @Nullable String description) {\n\t\tAssert.notNull(byteArray, \"Byte array must not be null\");\n\t\tthis.byteArray = byteArray;\n\t\tthis.description = (description != null ? description : \"\");\n\t}\n\n\n\t/**\n\t * Return the underlying byte array.\n\t */\n\tpublic final byte[] getByteArray() {\n\t\treturn this.byteArray;\n\t}\n\n\t/**\n\t * This implementation always returns {@code true}.\n\t */\n\t@Override\n\tpublic boolean exists() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * This implementation returns the length of the underlying byte array.\n\t */\n\t@Override\n\tpublic long contentLength() {\n\t\treturn this.byteArray.length;\n\t}\n\n\t/**\n\t * This implementation returns a ByteArrayInputStream for the\n\t * underlying byte array.\n\t * @see java.io.ByteArrayInputStream\n\t */\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\treturn new ByteArrayInputStream(this.byteArray);\n\t}\n\n\t@Override\n\tpublic byte[] getContentAsByteArray() throws IOException {\n\t\tint length = this.byteArray.length;\n\t\tbyte[] result = new byte[length];\n\t\tSystem.arraycopy(this.byteArray, 0, result, 0, length);\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic String getContentAsString(Charset charset) throws IOException {\n\t\treturn new String(this.byteArray, charset);\n\t}\n\n\t/**\n\t * This implementation returns a description that includes the passed-in\n\t * {@code description}, if any.\n\t */\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"Byte array resource [\" + this.description + \"]\";\n\t}\n\n\n\t/**\n\t * This implementation compares the underlying byte array.\n\t * @see java.util.Arrays#equals(byte[], byte[])\n\t */\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof ByteArrayResource that &&\n\t\t\t\tArrays.equals(this.byteArray, that.byteArray)));\n\t}\n\n\t/**\n\t * This implementation returns the hash code based on the\n\t * underlying byte array.\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Arrays.hashCode(this.byteArray);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ByteArrayResource#byteArray",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#byteArray",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.ByteArrayResource#description",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#description",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the underlying byte array.\r\n */\r\npublic final byte[] getByteArray() {\r\n    return this.byteArray;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#getByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#exists()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation always returns {@code true}.\r\n */\r\n@Override\r\npublic boolean exists() {\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#exists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#exists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#contentLength()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns the length of the underlying byte array.\r\n */\r\n@Override\r\npublic long contentLength() {\r\n    return this.byteArray.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#contentLength()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#contentLength()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getInputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * This implementation returns a ByteArrayInputStream for the\r\n * underlying byte array.\r\n * @see java.io.ByteArrayInputStream\r\n */\r\n@Override\r\npublic InputStream getInputStream() throws IOException {\r\n    return new ByteArrayInputStream(this.byteArray);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#getInputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getInputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte[] getContentAsByteArray() throws IOException {\r\n    int length = this.byteArray.length;\r\n    byte[] result = new byte[length];\r\n    System.arraycopy(this.byteArray, 0, result, 0, length);\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.ByteArrayResource#getContentAsByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getContentAsByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.ByteArrayResource#getContentAsString(Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getContentAsString(Charset charset) throws IOException {\r\n    return new String(this.byteArray, charset);\r\n}",
    "tailType": "method_code"
  }
]