[
  {
    "head": "org.springframework.core.CollectionFactory#createStringAdaptingProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a variant of {@link java.util.Properties} that automatically adapts\r\n * non-String values to String representations in {@link Properties#getProperty}.\r\n * <p>In addition, the returned {@code Properties} instance sorts properties\r\n * alphanumerically based on their keys.\r\n * @return a new {@code Properties} instance\r\n * @since 4.3.4\r\n * @see #createSortedProperties(boolean)\r\n * @see #createSortedProperties(Properties, boolean)\r\n */\r\n@SuppressWarnings(\"serial\")\r\npublic static Properties createStringAdaptingProperties() {\r\n    return new SortedProperties(false) {\r\n\r\n        @Override\r\n        @Nullable\r\n        public String getProperty(String key) {\r\n            Object value = get(key);\r\n            return (value != null ? value.toString() : null);\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createStringAdaptingProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createStringAdaptingProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createSortedProperties(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a variant of {@link java.util.Properties} that sorts properties\r\n * alphanumerically based on their keys.\r\n * <p>This can be useful when storing the {@link Properties} instance in a\r\n * properties file, since it allows such files to be generated in a repeatable\r\n * manner with consistent ordering of properties. Comments in generated\r\n * properties files can also be optionally omitted.\r\n * @param omitComments {@code true} if comments should be omitted when\r\n * storing properties in a file\r\n * @return a new {@code Properties} instance\r\n * @since 5.2\r\n * @see #createStringAdaptingProperties()\r\n * @see #createSortedProperties(Properties, boolean)\r\n */\r\npublic static Properties createSortedProperties(boolean omitComments) {\r\n    return new SortedProperties(omitComments);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createSortedProperties(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#createSortedProperties(Properties,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a variant of {@link java.util.Properties} that sorts properties\r\n * alphanumerically based on their keys.\r\n * <p>This can be useful when storing the {@code Properties} instance in a\r\n * properties file, since it allows such files to be generated in a repeatable\r\n * manner with consistent ordering of properties. Comments in generated\r\n * properties files can also be optionally omitted.\r\n * <p>The returned {@code Properties} instance will be populated with\r\n * properties from the supplied {@code properties} object, but default\r\n * properties from the supplied {@code properties} object will not be copied.\r\n * @param properties the {@code Properties} object from which to copy the\r\n * initial properties\r\n * @param omitComments {@code true} if comments should be omitted when\r\n * storing properties in a file\r\n * @return a new {@code Properties} instance\r\n * @since 5.2\r\n * @see #createStringAdaptingProperties()\r\n * @see #createSortedProperties(boolean)\r\n */\r\npublic static Properties createSortedProperties(Properties properties, boolean omitComments) {\r\n    return new SortedProperties(properties, omitComments);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#createSortedProperties(Properties,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#asEnumType(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Cast the given type to a subtype of {@link Enum}.\r\n * @param enumType the enum type, never {@code null}\r\n * @return the given type as subtype of {@link Enum}\r\n * @throws IllegalArgumentException if the given type is not a subtype of {@link Enum}\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\nprivate static Class<? extends Enum> asEnumType(Class<?> enumType) {\r\n    Assert.notNull(enumType, \"Enum type must not be null\");\r\n    if (!Enum.class.isAssignableFrom(enumType)) {\r\n        throw new IllegalArgumentException(\"Supplied type is not an enum: \" + enumType.getName());\r\n    }\r\n    return enumType.asSubclass(Enum.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactory#asEnumType(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactory#asEnumType(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ConfigurableObjectInputStream",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.NotSerializableException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectStreamClass;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ClassUtils;\n\n/**\n * Special {@link ObjectInputStream} subclass that resolves class names\n * against a specific {@link ClassLoader}.\n *\n * @author Juergen Hoeller\n * @since 2.5.5\n * @see org.springframework.core.serializer.DefaultDeserializer\n */\npublic class ConfigurableObjectInputStream extends ObjectInputStream {\n\n\tprivate final @Nullable ClassLoader classLoader;\n\n\tprivate final boolean acceptProxyClasses;\n\n\n\t/**\n\t * Create a new ConfigurableObjectInputStream for the given InputStream and ClassLoader.\n\t * @param in the InputStream to read from\n\t * @param classLoader the ClassLoader to use for loading local classes\n\t * @see java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\n\t */\n\tpublic ConfigurableObjectInputStream(InputStream in, @Nullable ClassLoader classLoader) throws IOException {\n\t\tthis(in, classLoader, true);\n\t}\n\n\t/**\n\t * Create a new ConfigurableObjectInputStream for the given InputStream and ClassLoader.\n\t * @param in the InputStream to read from\n\t * @param classLoader the ClassLoader to use for loading local classes\n\t * @param acceptProxyClasses whether to accept deserialization of proxy classes\n\t * (may be deactivated as a security measure)\n\t * @see java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\n\t */\n\tpublic ConfigurableObjectInputStream(\n\t\t\tInputStream in, @Nullable ClassLoader classLoader, boolean acceptProxyClasses) throws IOException {\n\n\t\tsuper(in);\n\t\tthis.classLoader = classLoader;\n\t\tthis.acceptProxyClasses = acceptProxyClasses;\n\t}\n\n\n\t@Override\n\tprotected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {\n\t\ttry {\n\t\t\tif (this.classLoader != null) {\n\t\t\t\t// Use the specified ClassLoader to resolve local classes.\n\t\t\t\treturn ClassUtils.forName(classDesc.getName(), this.classLoader);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Use the default ClassLoader...\n\t\t\t\treturn super.resolveClass(classDesc);\n\t\t\t}\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\treturn resolveFallbackIfPossible(classDesc.getName(), ex);\n\t\t}\n\t}\n\n\t@Override\n\tprotected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {\n\t\tif (!this.acceptProxyClasses) {\n\t\t\tthrow new NotSerializableException(\"Not allowed to accept serialized proxy classes\");\n\t\t}\n\t\tif (this.classLoader != null) {\n\t\t\t// Use the specified ClassLoader to resolve local proxy classes.\n\t\t\tClass<?>[] resolvedInterfaces = new Class<?>[interfaces.length];\n\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tresolvedInterfaces[i] = ClassUtils.forName(interfaces[i], this.classLoader);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tresolvedInterfaces[i] = resolveFallbackIfPossible(interfaces[i], ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn ClassUtils.createCompositeInterface(resolvedInterfaces, this.classLoader);\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\tthrow new ClassNotFoundException(null, ex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Use ObjectInputStream's default ClassLoader...\n\t\t\ttry {\n\t\t\t\treturn super.resolveProxyClass(interfaces);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\tClass<?>[] resolvedInterfaces = new Class<?>[interfaces.length];\n\t\t\t\tfor (int i = 0; i < interfaces.length; i++) {\n\t\t\t\t\tresolvedInterfaces[i] = resolveFallbackIfPossible(interfaces[i], ex);\n\t\t\t\t}\n\t\t\t\treturn ClassUtils.createCompositeInterface(resolvedInterfaces, getFallbackClassLoader());\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Resolve the given class name against a fallback class loader.\n\t * <p>The default implementation simply rethrows the original exception,\n\t * since there is no fallback available.\n\t * @param className the class name to resolve\n\t * @param ex the original exception thrown when attempting to load the class\n\t * @return the newly resolved class (never {@code null})\n\t */\n\tprotected Class<?> resolveFallbackIfPossible(String className, ClassNotFoundException ex)\n\t\t\tthrows IOException, ClassNotFoundException{\n\n\t\tthrow ex;\n\t}\n\n\t/**\n\t * Return the fallback ClassLoader to use when no ClassLoader was specified\n\t * and ObjectInputStream's own default class loader failed.\n\t * <p>The default implementation simply returns {@code null}, indicating\n\t * that no specific fallback is available.\n\t */\n\tprotected @Nullable ClassLoader getFallbackClassLoader() throws IOException {\n\t\treturn null;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ConfigurableObjectInputStream#classLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream#classLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ConfigurableObjectInputStream#acceptProxyClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream#acceptProxyClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream#resolveClass(ObjectStreamClass)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {\r\n    try {\r\n        if (this.classLoader != null) {\r\n            // Use the specified ClassLoader to resolve local classes.\r\n            return ClassUtils.forName(classDesc.getName(), this.classLoader);\r\n        } else {\r\n            // Use the default ClassLoader...\r\n            return super.resolveClass(classDesc);\r\n        }\r\n    } catch (ClassNotFoundException ex) {\r\n        return resolveFallbackIfPossible(classDesc.getName(), ex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ConfigurableObjectInputStream#resolveClass(ObjectStreamClass)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ConfigurableObjectInputStream#resolveClass(ObjectStreamClass)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]