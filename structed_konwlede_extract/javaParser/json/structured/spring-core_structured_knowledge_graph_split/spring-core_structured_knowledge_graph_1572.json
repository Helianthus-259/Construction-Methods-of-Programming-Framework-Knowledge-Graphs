[
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resourceHintWithClass() {\r\n    this.hints.resources().registerType(String.class);\r\n    assertThat(this.hints.resources().resourcePatternHints()).singleElement().satisfies(resourceHint -> assertThat(resourceHint.getIncludes()).map(ResourcePatternHint::getPattern).containsExactlyInAnyOrder(\"/\", \"java\", \"java/lang\", \"java/lang/String.class\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#resourceHintWithClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaSerializationHintWithClass() {\r\n    this.hints.serialization().registerType(String.class);\r\n    assertThat(this.hints.serialization().javaSerializationHints().map(JavaSerializationHint::getType)).containsExactly(TypeReference.of(String.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#javaSerializationHintWithClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid jdkProxyWithClass() {\r\n    this.hints.proxies().registerJdkProxy(Function.class);\r\n    assertThat(this.hints.proxies().jdkProxyHints()).singleElement().satisfies(jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces()).containsExactly(TypeReference.of(Function.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#jdkProxyWithClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SerializationHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.net.URL;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link SerializationHints}.\n *\n * @author Stephane Nicoll\n */\nclass SerializationHintsTests {\n\n\tprivate final SerializationHints serializationHints = new SerializationHints();\n\n\t@Test\n\tvoid registerTypeTwiceExposesOneHint() {\n\t\tthis.serializationHints.registerType(URL.class);\n\t\tthis.serializationHints.registerType(TypeReference.of(URL.class.getName()));\n\t\tassertThat(this.serializationHints.javaSerializationHints()).singleElement()\n\t\t\t\t.extracting(JavaSerializationHint::getType).isEqualTo(TypeReference.of(URL.class));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.SerializationHintsTests#serializationHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests#serializationHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "SerializationHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests#registerTypeTwiceExposesOneHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeTwiceExposesOneHint() {\r\n    this.serializationHints.registerType(URL.class);\r\n    this.serializationHints.registerType(TypeReference.of(URL.class.getName()));\r\n    assertThat(this.serializationHints.javaSerializationHints()).singleElement().extracting(JavaSerializationHint::getType).isEqualTo(TypeReference.of(URL.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SerializationHintsTests#registerTypeTwiceExposesOneHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SerializationHintsTests#registerTypeTwiceExposesOneHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReferenceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n\n/**\n * Tests for {@link SimpleTypeReference}.\n *\n * @author Stephane Nicoll\n */\nclass SimpleTypeReferenceTests {\n\n\n\t@ParameterizedTest\n\t@MethodSource(\"primitivesAndPrimitivesArray\")\n\tvoid primitivesAreHandledProperly(TypeReference typeReference, String expectedName) {\n\t\tassertThat(typeReference.getName()).isEqualTo(expectedName);\n\t\tassertThat(typeReference.getCanonicalName()).isEqualTo(expectedName);\n\t\tassertThat(typeReference.getPackageName()).isEqualTo(\"java.lang\");\n\t}\n\n\tstatic Stream<Arguments> primitivesAndPrimitivesArray() {\n\t\treturn Stream.of(\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"boolean\"), \"boolean\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"byte\"), \"byte\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"short\"), \"short\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"int\"), \"int\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"long\"), \"long\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"char\"), \"char\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"float\"), \"float\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"double\"), \"double\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"boolean[]\"), \"boolean[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"byte[]\"), \"byte[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"short[]\"), \"short[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"int[]\"), \"int[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"long[]\"), \"long[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"char[]\"), \"char[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"float[]\"), \"float[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"double[]\"), \"double[]\"));\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"arrays\")\n\tvoid arraysHaveSuitableReflectionTargetName(TypeReference typeReference, String expectedName) {\n\t\tassertThat(typeReference.getName()).isEqualTo(expectedName);\n\t}\n\n\tstatic Stream<Arguments> arrays() {\n\t\treturn Stream.of(\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"java.lang.Object[]\"), \"java.lang.Object[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"java.lang.Integer[]\"), \"java.lang.Integer[]\"),\n\t\t\t\tArguments.of(SimpleTypeReference.of(\"com.example.Test[]\"), \"com.example.Test[]\"));\n\t}\n\n\t@Test\n\tvoid nameOfCglibProxy() {\n\t\tTypeReference reference = TypeReference.of(\"com.example.Test$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getSimpleName()).isEqualTo(\"Test$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getEnclosingType()).isNull();\n\t}\n\n\t@Test\n\tvoid nameOfNestedCglibProxy() {\n\t\tTypeReference reference = TypeReference.of(\"com.example.Test$Another$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getSimpleName()).isEqualTo(\"Another$$SpringCGLIB$$0\");\n\t\tassertThat(reference.getEnclosingType()).isNotNull();\n\t\tassertThat(reference.getEnclosingType().getSimpleName()).isEqualTo(\"Test\");\n\t}\n\n\t@Test\n\tvoid typeReferenceInRootPackage() {\n\t\tTypeReference type = SimpleTypeReference.of(\"MyRootClass\");\n\t\tassertThat(type.getCanonicalName()).isEqualTo(\"MyRootClass\");\n\t\tassertThat(type.getPackageName()).isEmpty();\n\t}\n\n\t@ParameterizedTest(name = \"{0}\")\n\t@ValueSource(strings = { \"com.example.Tes(t\", \"com.example..Test\" })\n\tvoid typeReferenceWithInvalidClassName(String invalidClassName) {\n\t\tassertThatIllegalStateException().isThrownBy(() -> SimpleTypeReference.of(invalidClassName))\n\t\t\t\t.withMessageContaining(\"Invalid class name\");\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]