[
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getDeclaredMethods(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#getDeclaredMethods(Class<?>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Method[] getDeclaredMethods(Class<?> clazz, boolean defensive) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Method[] result = declaredMethodsCache.get(clazz);\r\n    if (result == null) {\r\n        try {\r\n            Method[] declaredMethods = clazz.getDeclaredMethods();\r\n            List<Method> defaultMethods = findDefaultMethodsOnInterfaces(clazz);\r\n            if (defaultMethods != null) {\r\n                result = new Method[declaredMethods.length + defaultMethods.size()];\r\n                System.arraycopy(declaredMethods, 0, result, 0, declaredMethods.length);\r\n                int index = declaredMethods.length;\r\n                for (Method defaultMethod : defaultMethods) {\r\n                    result[index] = defaultMethod;\r\n                    index++;\r\n                }\r\n            } else {\r\n                result = declaredMethods;\r\n            }\r\n            declaredMethodsCache.put(clazz, (result.length == 0 ? EMPTY_METHOD_ARRAY : result));\r\n        } catch (Throwable ex) {\r\n            throw new IllegalStateException(\"Failed to introspect Class [\" + clazz.getName() + \"] from ClassLoader [\" + clazz.getClassLoader() + \"]\", ex);\r\n        }\r\n    }\r\n    return (result.length == 0 || !defensive) ? result : result.clone();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#getDeclaredMethods(Class<?>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findDefaultMethodsOnInterfaces(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static List<Method> findDefaultMethodsOnInterfaces(Class<?> clazz) {\r\n    List<Method> result = null;\r\n    for (Class<?> ifc : clazz.getInterfaces()) {\r\n        for (Method method : ifc.getMethods()) {\r\n            if (method.isDefault()) {\r\n                if (result == null) {\r\n                    result = new ArrayList<>();\r\n                }\r\n                result.add(method);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findDefaultMethodsOnInterfaces(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findDefaultMethodsOnInterfaces(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#isEqualsMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is an \"equals\" method.\r\n * @see java.lang.Object#equals(Object)\r\n */\r\npublic static boolean isEqualsMethod(@Nullable Method method) {\r\n    return (method != null && method.getParameterCount() == 1 && method.getName().equals(\"equals\") && method.getParameterTypes()[0] == Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#isEqualsMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#isHashCodeMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is a \"hashCode\" method.\r\n * @see java.lang.Object#hashCode()\r\n */\r\npublic static boolean isHashCodeMethod(@Nullable Method method) {\r\n    return (method != null && method.getParameterCount() == 0 && method.getName().equals(\"hashCode\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#isHashCodeMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#isToStringMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is a \"toString\" method.\r\n * @see java.lang.Object#toString()\r\n */\r\npublic static boolean isToStringMethod(@Nullable Method method) {\r\n    return (method != null && method.getParameterCount() == 0 && method.getName().equals(\"toString\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#isToStringMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#isObjectMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is originally declared by {@link java.lang.Object}.\r\n */\r\npublic static boolean isObjectMethod(@Nullable Method method) {\r\n    return (method != null && (method.getDeclaringClass() == Object.class || isEqualsMethod(method) || isHashCodeMethod(method) || isToStringMethod(method)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#isObjectMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#isCglibRenamedMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given method is a CGLIB 'renamed' method,\r\n * following the pattern \"CGLIB$methodName$0\".\r\n * @param renamedMethod the method to check\r\n */\r\npublic static boolean isCglibRenamedMethod(Method renamedMethod) {\r\n    String name = renamedMethod.getName();\r\n    if (name.startsWith(CGLIB_RENAMED_METHOD_PREFIX)) {\r\n        int i = name.length() - 1;\r\n        while (i >= 0 && Character.isDigit(name.charAt(i))) {\r\n            i--;\r\n        }\r\n        return (i > CGLIB_RENAMED_METHOD_PREFIX.length() && (i < name.length() - 1) && name.charAt(i) == '$');\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#isCglibRenamedMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#makeAccessible(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Make the given method accessible, explicitly setting it accessible if\r\n * necessary. The {@code setAccessible(true)} method is only called\r\n * when actually necessary, to avoid unnecessary conflicts.\r\n * @param method the method to make accessible\r\n * @see java.lang.reflect.Method#setAccessible\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\npublic static void makeAccessible(Method method) {\r\n    if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\r\n        method.setAccessible(true);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#makeAccessible(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#makeAccessible(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findField(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Field handling\r\n/**\r\n * Attempt to find a {@link Field field} on the supplied {@link Class} with the\r\n * supplied {@code name}. Searches all superclasses up to {@link Object}.\r\n * @param clazz the class to introspect\r\n * @param name the name of the field\r\n * @return the corresponding Field object, or {@code null} if not found\r\n */\r\n@Nullable\r\npublic static Field findField(Class<?> clazz, String name) {\r\n    return findField(clazz, name, null);\r\n}",
    "tailType": "method_code"
  }
]