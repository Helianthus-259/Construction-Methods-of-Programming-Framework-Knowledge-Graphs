[
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeCollection#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeCollection#clear()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeIterator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\n/**\n * Composite iterator that combines multiple other iterators,\n * as registered via {@link #add(Iterator)}.\n *\n * <p>This implementation maintains a linked set of iterators\n * which are invoked in sequence until all iterators are exhausted.\n *\n * @author Erwin Vervaet\n * @author Juergen Hoeller\n * @since 3.0\n * @param <E> the element type\n */\npublic class CompositeIterator<E> implements Iterator<E> {\n\n\tprivate final Set<Iterator<E>> iterators = new LinkedHashSet<>();\n\n\tprivate boolean inUse = false;\n\n\n\t/**\n\t * Add given iterator to this composite.\n\t */\n\tpublic void add(Iterator<E> iterator) {\n\t\tAssert.state(!this.inUse, \"You can no longer add iterators to a composite iterator that's already in use\");\n\t\tif (this.iterators.contains(iterator)) {\n\t\t\tthrow new IllegalArgumentException(\"You cannot add the same iterator twice\");\n\t\t}\n\t\tthis.iterators.add(iterator);\n\t}\n\n\t@Override\n\tpublic boolean hasNext() {\n\t\tthis.inUse = true;\n\t\tfor (Iterator<E> iterator : this.iterators) {\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic E next() {\n\t\tthis.inUse = true;\n\t\tfor (Iterator<E> iterator : this.iterators) {\n\t\t\tif (iterator.hasNext()) {\n\t\t\t\treturn iterator.next();\n\t\t\t}\n\t\t}\n\t\tthrow new NoSuchElementException(\"All iterators exhausted\");\n\t}\n\n\t@Override\n\tpublic void remove() {\n\t\tthrow new UnsupportedOperationException(\"CompositeIterator does not support remove()\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CompositeIterator#iterators",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CompositeIterator#iterators",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Iterator<E>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CompositeIterator#inUse",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CompositeIterator#inUse",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CompositeIterator#add(Iterator<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add given iterator to this composite.\r\n */\r\npublic void add(Iterator<E> iterator) {\r\n    Assert.state(!this.inUse, \"You can no longer add iterators to a composite iterator that's already in use\");\r\n    if (this.iterators.contains(iterator)) {\r\n        throw new IllegalArgumentException(\"You cannot add the same iterator twice\");\r\n    }\r\n    this.iterators.add(iterator);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIterator#add(Iterator<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIterator#hasNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasNext() {\r\n    this.inUse = true;\r\n    for (Iterator<E> iterator : this.iterators) {\r\n        if (iterator.hasNext()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIterator#hasNext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIterator#hasNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIterator#next()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic E next() {\r\n    this.inUse = true;\r\n    for (Iterator<E> iterator : this.iterators) {\r\n        if (iterator.hasNext()) {\r\n            return iterator.next();\r\n        }\r\n    }\r\n    throw new NoSuchElementException(\"All iterators exhausted\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIterator#next()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIterator#next()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CompositeIterator#remove()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void remove() {\r\n    throw new UnsupportedOperationException(\"CompositeIterator does not support remove()\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CompositeIterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CompositeIterator#remove()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CompositeIterator#remove()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]