[
  {
    "head": "org.springframework.asm.ModuleWriter#visitOpen(String,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitOpen(final String packaze, final int access, final String... modules) {\r\n    opens.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access);\r\n    if (modules == null) {\r\n        opens.putShort(0);\r\n    } else {\r\n        opens.putShort(modules.length);\r\n        for (String module : modules) {\r\n            opens.putShort(symbolTable.addConstantModule(module).index);\r\n        }\r\n    }\r\n    opensCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitOpen(String,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitOpen(String,int,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitUse(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitUse(final String service) {\r\n    usesIndex.putShort(symbolTable.addConstantClass(service).index);\r\n    usesCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitUse(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitUse(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitProvide(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitProvide(final String service, final String... providers) {\r\n    provides.putShort(symbolTable.addConstantClass(service).index);\r\n    provides.putShort(providers.length);\r\n    for (String provider : providers) {\r\n        provides.putShort(symbolTable.addConstantClass(provider).index);\r\n    }\r\n    providesCount++;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitProvide(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitProvide(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    // Nothing to do.\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#getAttributeCount()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this\r\n * ModuleWriter.\r\n *\r\n * @return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).\r\n */\r\nint getAttributeCount() {\r\n    return 1 + (packageCount > 0 ? 1 : 0) + (mainClassIndex > 0 ? 1 : 0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#getAttributeCount()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#computeAttributesSize()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\r\n * ModuleWriter. Also add the names of these attributes in the constant pool.\r\n *\r\n * @return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.\r\n */\r\nint computeAttributesSize() {\r\n    symbolTable.addConstantUtf8(Constants.MODULE);\r\n    // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts.\r\n    int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length;\r\n    if (packageCount > 0) {\r\n        symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES);\r\n        // 6 attribute header bytes, and 2 bytes for package_count.\r\n        size += 8 + packageIndex.length;\r\n    }\r\n    if (mainClassIndex > 0) {\r\n        symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS);\r\n        // 6 attribute header bytes, and 2 bytes for main_class_index.\r\n        size += 8;\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#computeAttributesSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter#putAttributes(ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\r\n * in the given ByteVector.\r\n *\r\n * @param output where the attributes must be put.\r\n */\r\nvoid putAttributes(final ByteVector output) {\r\n    // 6 bytes for name, flags and version, and 5 * 2 bytes for counts.\r\n    int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length;\r\n    output.putShort(symbolTable.addConstantUtf8(Constants.MODULE)).putInt(moduleAttributeLength).putShort(moduleNameIndex).putShort(moduleFlags).putShort(moduleVersionIndex).putShort(requiresCount).putByteArray(requires.data, 0, requires.length).putShort(exportsCount).putByteArray(exports.data, 0, exports.length).putShort(opensCount).putByteArray(opens.data, 0, opens.length).putShort(usesCount).putByteArray(usesIndex.data, 0, usesIndex.length).putShort(providesCount).putByteArray(provides.data, 0, provides.length);\r\n    if (packageCount > 0) {\r\n        output.putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)).putInt(2 + packageIndex.length).putShort(packageCount).putByteArray(packageIndex.data, 0, packageIndex.length);\r\n    }\r\n    if (mainClassIndex > 0) {\r\n        output.putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)).putInt(2).putShort(mainClassIndex);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ModuleWriter#putAttributes(ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.ModuleWriter",
    "headType": "class",
    "relation": "extend",
    "tail": "ModuleVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture",
    "tailType": "package"
  }
]