[
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nullableProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nonNullProcess()",
    "headType": "method",
    "relation": "provide",
    "tail": "@NonNull\r\nString nonNullProcess();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nonNullProcess()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.marked.unmarked.PackageUnmarkedJSpecifyProcessor#nonNullProcess()",
    "headType": "method",
    "relation": "use",
    "tail": "@NonNull",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void generateClass(ClassVisitor v) {\r\n    Type sourceType = Type.getType(source);\r\n    Type targetType = Type.getType(target);\r\n    ClassEmitter ce = new ClassEmitter(v);\r\n    ce.begin_class(Constants.V1_8, Constants.ACC_PUBLIC, getClassName(), BEAN_COPIER, null, Constants.SOURCE_FILE);\r\n    EmitUtils.null_constructor(ce);\r\n    CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, COPY, null);\r\n    PropertyDescriptor[] getters = ReflectUtils.getBeanGetters(source);\r\n    PropertyDescriptor[] setters = ReflectUtils.getBeanSetters(target);\r\n    Map names = new HashMap();\r\n    for (PropertyDescriptor getter : getters) {\r\n        names.put(getter.getName(), getter);\r\n    }\r\n    Local targetLocal = e.make_local();\r\n    Local sourceLocal = e.make_local();\r\n    if (useConverter) {\r\n        e.load_arg(1);\r\n        e.checkcast(targetType);\r\n        e.store_local(targetLocal);\r\n        e.load_arg(0);\r\n        e.checkcast(sourceType);\r\n        e.store_local(sourceLocal);\r\n    } else {\r\n        e.load_arg(1);\r\n        e.checkcast(targetType);\r\n        e.load_arg(0);\r\n        e.checkcast(sourceType);\r\n    }\r\n    for (PropertyDescriptor setter : setters) {\r\n        PropertyDescriptor getter = (PropertyDescriptor) names.get(setter.getName());\r\n        if (getter != null) {\r\n            MethodInfo read = ReflectUtils.getMethodInfo(getter.getReadMethod());\r\n            MethodInfo write = ReflectUtils.getMethodInfo(setter.getWriteMethod());\r\n            if (useConverter) {\r\n                Type setterType = write.getSignature().getArgumentTypes()[0];\r\n                e.load_local(targetLocal);\r\n                e.load_arg(2);\r\n                e.load_local(sourceLocal);\r\n                e.invoke(read);\r\n                e.box(read.getSignature().getReturnType());\r\n                EmitUtils.load_class(e, setterType);\r\n                e.push(write.getSignature().getName());\r\n                e.invoke_interface(CONVERTER, CONVERT);\r\n                e.unbox_or_zero(setterType);\r\n                e.invoke(write);\r\n            } else if (compatible(getter, setter)) {\r\n                e.dup2();\r\n                e.invoke(read);\r\n                e.invoke(write);\r\n            }\r\n        }\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n    ce.end_class();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#generateClass(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean compatible(PropertyDescriptor getter, PropertyDescriptor setter) {\r\n    // TODO: allow automatic widening conversions?\r\n    return setter.getPropertyType().isAssignableFrom(getter.getPropertyType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#compatible(PropertyDescriptor,PropertyDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object firstInstance(Class type) {\r\n    return ReflectUtils.newInstance(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#firstInstance(Class)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected Object nextInstance(Object instance) {\r\n    return instance;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.beans.Generator#nextInstance(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.beans.Generator",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractClassGenerator",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.testfixture.nullness",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.testfixture.nullness",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.testfixture.nullness.NullnessFields",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.NullnessFields",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.testfixture.nullness;\n\npublic class NullnessFields {\n\n\tpublic String unannotatedField = \"\";\n\n\tpublic @org.jspecify.annotations.Nullable String jspecifyNullableField;\n\n\tpublic @org.jspecify.annotations.NonNull String jspecifyNonNullField = \"\";\n\n\t@org.springframework.core.testfixture.nullness.custom.Nullable\n\tpublic String customNullableField;\n\n\tpublic int primitiveField = 0;\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.testfixture.nullness.NullnessFields",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.testfixture.nullness.NullnessFields#unannotatedField",
    "tailType": "field"
  }
]