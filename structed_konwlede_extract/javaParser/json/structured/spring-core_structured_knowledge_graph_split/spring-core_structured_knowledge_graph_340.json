[
  {
    "head": "org.springframework.util.StreamUtilsTests#copyToByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassReader#getInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).\r\n *\r\n * @return the internal names of the directly implemented interfaces. Inherited implemented\r\n *     interfaces are not returned.\r\n * @see ClassVisitor#visit(int, int, String, String, String, String[])\r\n */\r\npublic String[] getInterfaces() {\r\n    // interfaces_count is after the access_flags, this_class and super_class fields (2 bytes each).\r\n    int currentOffset = header + 6;\r\n    int interfacesCount = readUnsignedShort(currentOffset);\r\n    String[] interfaces = new String[interfacesCount];\r\n    if (interfacesCount > 0) {\r\n        char[] charBuffer = new char[maxStringLength];\r\n        for (int i = 0; i < interfacesCount; ++i) {\r\n            currentOffset += 2;\r\n            interfaces[i] = readClass(currentOffset, charBuffer);\r\n        }\r\n    }\r\n    return interfaces;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#getInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyToString() throws Exception {\r\n    Charset charset = Charset.defaultCharset();\r\n    InputStream inputStream = new ByteArrayInputStream(string.getBytes(charset));\r\n    String actual = StreamUtils.copyToString(inputStream, charset);\r\n    assertThat(actual).isEqualTo(string);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.ClassReader#accept(ClassVisitor,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Public methods\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this\r\n * {@link ClassReader}.\r\n *\r\n * @param classVisitor the visitor that must visit this class.\r\n * @param parsingOptions the options to use to parse this class. One or more of {@link\r\n *     #SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.\r\n */\r\npublic void accept(final ClassVisitor classVisitor, final int parsingOptions) {\r\n    accept(classVisitor, new Attribute[0], parsingOptions);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.ClassReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.ClassReader#accept(ClassVisitor,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyBytes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyBytes() throws Exception {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    StreamUtils.copy(bytes, out);\r\n    assertThat(out.toByteArray()).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyBytes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyBytes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyString() throws Exception {\r\n    Charset charset = Charset.defaultCharset();\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    StreamUtils.copy(string, charset, out);\r\n    assertThat(out.toByteArray()).isEqualTo(string.getBytes(charset));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyStream() throws Exception {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    StreamUtils.copy(new ByteArrayInputStream(bytes), out);\r\n    assertThat(out.toByteArray()).isEqualTo(bytes);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeWithinBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyRangeWithinBuffer() throws Exception {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    ByteArrayInputStream in = new ByteArrayInputStream(bytes);\r\n    StreamUtils.copyRange(in, out, 0, 100);\r\n    assertThat(in.available()).isEqualTo(bytes.length - 101);\r\n    assertThat(out.toByteArray()).isEqualTo(Arrays.copyOfRange(bytes, 0, 101));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StreamUtilsTests#copyRangeWithinBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StreamUtilsTests#copyRangeWithinBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]