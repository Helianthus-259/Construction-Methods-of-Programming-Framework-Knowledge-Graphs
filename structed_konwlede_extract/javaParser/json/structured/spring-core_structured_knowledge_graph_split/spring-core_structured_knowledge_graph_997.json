[
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#write(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer write(DataBuffer... buffers) {\r\n    this.delegate.write(buffers);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#write(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#write(DataBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer write(ByteBuffer... buffers) {\r\n    this.delegate.write(buffers);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#write(ByteBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#write(ByteBuffer)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic DataBuffer slice(int index, int length) {\r\n    DefaultDataBuffer delegateSlice = this.delegate.slice(index, length);\r\n    if (this.chunk != null) {\r\n        this.chunk.retain();\r\n        return new JettyDataBuffer(this.bufferFactory, delegateSlice, this.chunk);\r\n    } else {\r\n        return new JettyDataBuffer(this.bufferFactory, delegateSlice);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#slice(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#slice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#split(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer split(int index) {\r\n    DefaultDataBuffer delegateSplit = this.delegate.split(index);\r\n    if (this.chunk != null) {\r\n        this.chunk.retain();\r\n        return new JettyDataBuffer(this.bufferFactory, delegateSplit, this.chunk);\r\n    } else {\r\n        return new JettyDataBuffer(this.bufferFactory, delegateSplit);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#split(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#split(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic ByteBuffer asByteBuffer() {\r\n    return this.delegate.asByteBuffer();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic ByteBuffer asByteBuffer(int index, int length) {\r\n    return this.delegate.asByteBuffer(index, length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.JettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.JettyDataBuffer#asByteBuffer(int,int)",
    "tailType": "method"
  }
]