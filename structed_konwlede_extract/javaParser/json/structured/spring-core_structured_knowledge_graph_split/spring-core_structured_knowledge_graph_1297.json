[
  {
    "head": "org.springframework.util.WeakEntryReference#getHash()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.WeakEntryReference#getNext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Reference<K, V> getNext() {\r\n    return this.nextReference;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.WeakEntryReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.WeakEntryReference#getNext()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.WeakEntryReference#getNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.WeakEntryReference#getNext()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.WeakEntryReference#release()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void release() {\r\n    enqueue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.WeakEntryReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.WeakEntryReference#release()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.WeakEntryReference#release()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.WeakEntryReference",
    "headType": "class",
    "relation": "extend",
    "tail": "WeakReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CustomizableThreadCreator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.Serializable;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Simple customizable helper class for creating new {@link Thread} instances.\n * Provides various bean properties: thread name prefix, thread priority, etc.\n *\n * <p>Serves as base class for thread factories such as\n * {@link org.springframework.scheduling.concurrent.CustomizableThreadFactory}.\n *\n * @author Juergen Hoeller\n * @since 2.0.3\n * @see org.springframework.scheduling.concurrent.CustomizableThreadFactory\n */\n@SuppressWarnings(\"serial\")\npublic class CustomizableThreadCreator implements Serializable {\n\n\tprivate String threadNamePrefix;\n\n\tprivate int threadPriority = Thread.NORM_PRIORITY;\n\n\tprivate boolean daemon = false;\n\n\tprivate @Nullable ThreadGroup threadGroup;\n\n\tprivate final AtomicInteger threadCount = new AtomicInteger();\n\n\n\t/**\n\t * Create a new CustomizableThreadCreator with default thread name prefix.\n\t */\n\tpublic CustomizableThreadCreator() {\n\t\tthis.threadNamePrefix = getDefaultThreadNamePrefix();\n\t}\n\n\t/**\n\t * Create a new CustomizableThreadCreator with the given thread name prefix.\n\t * @param threadNamePrefix the prefix to use for the names of newly created threads\n\t */\n\tpublic CustomizableThreadCreator(@Nullable String threadNamePrefix) {\n\t\tthis.threadNamePrefix = (threadNamePrefix != null ? threadNamePrefix : getDefaultThreadNamePrefix());\n\t}\n\n\n\t/**\n\t * Specify the prefix to use for the names of newly created threads.\n\t * Default is \"SimpleAsyncTaskExecutor-\".\n\t */\n\tpublic void setThreadNamePrefix(@Nullable String threadNamePrefix) {\n\t\tthis.threadNamePrefix = (threadNamePrefix != null ? threadNamePrefix : getDefaultThreadNamePrefix());\n\t}\n\n\t/**\n\t * Return the thread name prefix to use for the names of newly\n\t * created threads.\n\t */\n\tpublic String getThreadNamePrefix() {\n\t\treturn this.threadNamePrefix;\n\t}\n\n\t/**\n\t * Set the priority of the threads that this factory creates.\n\t * Default is 5.\n\t * @see java.lang.Thread#NORM_PRIORITY\n\t */\n\tpublic void setThreadPriority(int threadPriority) {\n\t\tthis.threadPriority = threadPriority;\n\t}\n\n\t/**\n\t * Return the priority of the threads that this factory creates.\n\t */\n\tpublic int getThreadPriority() {\n\t\treturn this.threadPriority;\n\t}\n\n\t/**\n\t * Set whether this factory is supposed to create daemon threads,\n\t * just executing as long as the application itself is running.\n\t * <p>Default is \"false\": Concrete factories usually support explicit cancelling.\n\t * Hence, if the application shuts down, Runnables will by default finish their\n\t * execution.\n\t * <p>Specify \"true\" for eager shutdown of threads which still actively execute\n\t * a {@link Runnable} at the time that the application itself shuts down.\n\t * @see java.lang.Thread#setDaemon\n\t */\n\tpublic void setDaemon(boolean daemon) {\n\t\tthis.daemon = daemon;\n\t}\n\n\t/**\n\t * Return whether this factory should create daemon threads.\n\t */\n\tpublic boolean isDaemon() {\n\t\treturn this.daemon;\n\t}\n\n\t/**\n\t * Specify the name of the thread group that threads should be created in.\n\t * @see #setThreadGroup\n\t */\n\tpublic void setThreadGroupName(String name) {\n\t\tthis.threadGroup = new ThreadGroup(name);\n\t}\n\n\t/**\n\t * Specify the thread group that threads should be created in.\n\t * @see #setThreadGroupName\n\t */\n\tpublic void setThreadGroup(@Nullable ThreadGroup threadGroup) {\n\t\tthis.threadGroup = threadGroup;\n\t}\n\n\t/**\n\t * Return the thread group that threads should be created in\n\t * (or {@code null} for the default group).\n\t */\n\tpublic @Nullable ThreadGroup getThreadGroup() {\n\t\treturn this.threadGroup;\n\t}\n\n\n\t/**\n\t * Template method for the creation of a new {@link Thread}.\n\t * <p>The default implementation creates a new Thread for the given\n\t * {@link Runnable}, applying an appropriate thread name.\n\t * @param runnable the Runnable to execute\n\t * @see #nextThreadName()\n\t */\n\tpublic Thread createThread(Runnable runnable) {\n\t\tThread thread = new Thread(getThreadGroup(), runnable, nextThreadName());\n\t\tthread.setPriority(getThreadPriority());\n\t\tthread.setDaemon(isDaemon());\n\t\treturn thread;\n\t}\n\n\t/**\n\t * Return the thread name to use for a newly created {@link Thread}.\n\t * <p>The default implementation returns the specified thread name prefix\n\t * with an increasing thread count appended: for example, \"SimpleAsyncTaskExecutor-0\".\n\t * @see #getThreadNamePrefix()\n\t */\n\tprotected String nextThreadName() {\n\t\treturn getThreadNamePrefix() + this.threadCount.incrementAndGet();\n\t}\n\n\t/**\n\t * Build the default thread name prefix for this factory.\n\t * @return the default thread name prefix (never {@code null})\n\t */\n\tprotected String getDefaultThreadNamePrefix() {\n\t\treturn ClassUtils.getShortName(getClass()) + \"-\";\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CustomizableThreadCreator#threadNamePrefix",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#threadNamePrefix",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CustomizableThreadCreator#threadPriority",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#threadPriority",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CustomizableThreadCreator#daemon",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#daemon",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CustomizableThreadCreator#threadGroup",
    "tailType": "field"
  }
]