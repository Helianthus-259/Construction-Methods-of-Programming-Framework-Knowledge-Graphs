[
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#getExactSizeIfKnown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic long getExactSizeIfKnown() {\r\n    return this.delegate.getExactSizeIfKnown();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableEntrySpliterator#getExactSizeIfKnown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#getExactSizeIfKnown()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#characteristics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int characteristics() {\r\n    return this.delegate.characteristics();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableEntrySpliterator#characteristics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#characteristics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#hasCharacteristics(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasCharacteristics(int characteristics) {\r\n    return this.delegate.hasCharacteristics(characteristics);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableEntrySpliterator#hasCharacteristics(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#hasCharacteristics(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#getComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Comparator<? super Entry<K, List<V>>> getComparator() {\r\n    return this.delegate.getComparator();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableEntrySpliterator#getComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntrySpliterator#getComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.UnmodifiableEntry",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Spliterator;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Unmodifiable wrapper for {@link MultiValueMap}.\n *\n * @author Arjen Poutsma\n * @since 6.0\n * @param <K> the key type\n * @param <V> the value element type\n */\nfinal class UnmodifiableMultiValueMap<K,V> implements MultiValueMap<K,V>, Serializable {\n\n\tprivate static final long serialVersionUID = -8697084563854098920L;\n\n\t@SuppressWarnings(\"serial\")\n\tprivate final MultiValueMap<K, V> delegate;\n\n\tprivate transient @Nullable Set<K> keySet;\n\n\tprivate transient @Nullable Set<Entry<K, List<V>>> entrySet;\n\n\tprivate transient @Nullable Collection<List<V>> values;\n\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic UnmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> delegate) {\n\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\tthis.delegate = (MultiValueMap<K, V>) delegate;\n\t}\n\n\n\t// delegation\n\n\t@Override\n\tpublic int size() {\n\t\treturn this.delegate.size();\n\t}\n\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn this.delegate.isEmpty();\n\t}\n\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn this.delegate.containsKey(key);\n\t}\n\n\t@Override\n\tpublic boolean containsValue(Object value) {\n\t\treturn this.delegate.containsValue(value);\n\t}\n\n\t@Override\n\tpublic @Nullable List<V> get(Object key) {\n\t\tList<V> result = this.delegate.get(key);\n\t\treturn (result != null ? Collections.unmodifiableList(result) : null);\n\t}\n\n\t@Override\n\tpublic @Nullable V getFirst(K key) {\n\t\treturn this.delegate.getFirst(key);\n\t}\n\n\t@Override\n\tpublic List<V> getOrDefault(Object key, List<V> defaultValue) {\n\t\tList<V> result = this.delegate.getOrDefault(key, defaultValue);\n\t\tif (result != defaultValue) {\n\t\t\tresult = Collections.unmodifiableList(result);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic void forEach(BiConsumer<? super K, ? super List<V>> action) {\n\t\tthis.delegate.forEach((k, vs) -> action.accept(k, Collections.unmodifiableList(vs)));\n\t}\n\n\t@Override\n\tpublic Map<K, V> toSingleValueMap() {\n\t\treturn this.delegate.toSingleValueMap();\n\t}\n\n\t@Override\n\tpublic Map<K, V> asSingleValueMap() {\n\t\treturn this.delegate.asSingleValueMap();\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || this.delegate.equals(other));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.delegate.hashCode();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.delegate.toString();\n\t}\n\n\n\t// lazy init\n\n\t@Override\n\tpublic Set<K> keySet() {\n\t\tif (this.keySet == null) {\n\t\t\tthis.keySet = Collections.unmodifiableSet(this.delegate.keySet());\n\t\t}\n\t\treturn this.keySet;\n\t}\n\n\t@Override\n\tpublic Set<Entry<K, List<V>>> entrySet() {\n\t\tif (this.entrySet == null) {\n\t\t\tthis.entrySet = new UnmodifiableEntrySet<>(this.delegate.entrySet());\n\t\t}\n\t\treturn this.entrySet;\n\t}\n\n\t@Override\n\tpublic Collection<List<V>> values() {\n\t\tif (this.values == null) {\n\t\t\tthis.values = new UnmodifiableValueCollection<>(this.delegate.values());\n\t\t}\n\t\treturn this.values;\n\t}\n\n\t// unsupported\n\n\t@Override\n\tpublic @Nullable List<V> put(K key, List<V> value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> putIfAbsent(K key, List<V> value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void putAll(Map<? extends K, ? extends List<V>> m) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> remove(Object key) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void add(K key, @Nullable V value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void addAll(K key, List<? extends V> values) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void addAll(MultiValueMap<K, V> values) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void addIfAbsent(K key, @Nullable V value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void set(K key, @Nullable V value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void setAll(Map<K, V> values) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void replaceAll(BiFunction<? super K, ? super List<V>, ? extends List<V>> function) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic boolean remove(Object key, Object value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic boolean replace(K key, List<V> oldValue, List<V> newValue) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> replace(K key, List<V> value) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> computeIfAbsent(K key, Function<? super K, ? extends List<V>> mappingFunction) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> computeIfPresent(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> compute(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic List<V> merge(K key, List<V> value, BiFunction<? super List<V>, ? super List<V>, ? extends List<V>> remappingFunction) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\n\tprivate static class UnmodifiableEntrySet<K,V> implements Set<Map.Entry<K, List<V>>>, Serializable {\n\n\t\tprivate static final long serialVersionUID = 2407578793783925203L;\n\n\t\t@SuppressWarnings(\"serial\")\n\t\tprivate final Set<Entry<K, List<V>>> delegate;\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tpublic UnmodifiableEntrySet(Set<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\n\t\t\tthis.delegate = (Set<Entry<K, List<V>>>) delegate;\n\t\t}\n\n\t\t// delegation\n\n\t\t@Override\n\t\tpublic int size() {\n\t\t\treturn this.delegate.size();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isEmpty() {\n\t\t\treturn this.delegate.isEmpty();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean contains(Object o) {\n\t\t\treturn this.delegate.contains(o);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsAll(Collection<?> c) {\n\t\t\treturn this.delegate.containsAll(c);\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<Entry<K, List<V>>> iterator() {\n\t\t\tIterator<? extends Entry<? extends K, ? extends List<? extends V>>> iterator = this.delegate.iterator();\n\t\t\treturn new Iterator<>() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\treturn iterator.hasNext();\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Entry<K, List<V>> next() {\n\t\t\t\t\treturn new UnmodifiableEntry<>(iterator.next());\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t@Override\n\t\tpublic Object[] toArray() {\n\t\t\tObject[] result = this.delegate.toArray();\n\t\t\tfilterArray(result);\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic <T> T[] toArray(T[] a) {\n\t\t\tT[] result = this.delegate.toArray(a);\n\t\t\tfilterArray(result);\n\t\t\treturn result;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tprivate void filterArray(Object[] result) {\n\t\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\t\tif (result[i] instanceof Map.Entry<?,?> entry) {\n\t\t\t\t\tresult[i] = new UnmodifiableEntry<>((Entry<K, List<V>>) entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void forEach(Consumer<? super Entry<K, List<V>>> action) {\n\t\t\tthis.delegate.forEach(e -> action.accept(new UnmodifiableEntry<>(e)));\n\t\t}\n\n\t\t@Override\n\t\tpublic Stream<Entry<K, List<V>>> stream() {\n\t\t\treturn StreamSupport.stream(spliterator(), false);\n\t\t}\n\n\t\t@Override\n\t\tpublic Stream<Entry<K, List<V>>> parallelStream() {\n\t\t\treturn StreamSupport.stream(spliterator(), true);\n\t\t}\n\n\t\t@Override\n\t\tpublic Spliterator<Entry<K, List<V>>> spliterator() {\n\t\t\treturn new UnmodifiableEntrySpliterator<>(this.delegate.spliterator());\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\treturn (this == other || other instanceof Set<?> that && size() == that.size() && containsAll(that));\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn this.delegate.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.delegate.toString();\n\t\t}\n\n\t\t// unsupported\n\n\t\t@Override\n\t\tpublic boolean add(Entry<K, List<V>> kListEntry) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean remove(Object o) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean removeIf(Predicate<? super Entry<K, List<V>>> filter) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean addAll(Collection<? extends Entry<K, List<V>>> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean retainAll(Collection<?> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean removeAll(Collection<?> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void clear() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\n\t\tprivate static class UnmodifiableEntrySpliterator<K,V> implements Spliterator<Entry<K,List<V>>> {\n\n\t\t\tprivate final Spliterator<Entry<K, List<V>>> delegate;\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic UnmodifiableEntrySpliterator(\n\t\t\t\t\tSpliterator<? extends Entry<? extends K, ? extends List<? extends V>>> delegate) {\n\n\t\t\t\tthis.delegate = (Spliterator<Entry<K, List<V>>>) delegate;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean tryAdvance(Consumer<? super Entry<K, List<V>>> action) {\n\t\t\t\treturn this.delegate.tryAdvance(entry -> action.accept(new UnmodifiableEntry<>(entry)));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void forEachRemaining(Consumer<? super Entry<K, List<V>>> action) {\n\t\t\t\tthis.delegate.forEachRemaining(entry -> action.accept(new UnmodifiableEntry<>(entry)));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic @Nullable Spliterator<Entry<K, List<V>>> trySplit() {\n\t\t\t\tSpliterator<? extends Entry<? extends K, ? extends List<? extends V>>> split = this.delegate.trySplit();\n\t\t\t\tif (split != null) {\n\t\t\t\t\treturn new UnmodifiableEntrySpliterator<>(split);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long estimateSize() {\n\t\t\t\treturn this.delegate.estimateSize();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getExactSizeIfKnown() {\n\t\t\t\treturn this.delegate.getExactSizeIfKnown();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int characteristics() {\n\t\t\t\treturn this.delegate.characteristics();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean hasCharacteristics(int characteristics) {\n\t\t\t\treturn this.delegate.hasCharacteristics(characteristics);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Comparator<? super Entry<K, List<V>>> getComparator() {\n\t\t\t\treturn this.delegate.getComparator();\n\t\t\t}\n\t\t}\n\n\n\t\tprivate static class UnmodifiableEntry<K,V> implements Map.Entry<K,List<V>> {\n\n\t\t\tprivate final Entry<K, List<V>> delegate;\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic UnmodifiableEntry(Entry<? extends K, ? extends List<? extends V>> delegate) {\n\t\t\t\tAssert.notNull(delegate, \"Delegate must not be null\");\n\t\t\t\tthis.delegate = (Entry<K, List<V>>) delegate;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic K getKey() {\n\t\t\t\treturn this.delegate.getKey();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<V> getValue() {\n\t\t\t\treturn Collections.unmodifiableList(this.delegate.getValue());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<V> setValue(List<V> value) {\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\t\treturn (this == other || (other instanceof Map.Entry<?, ?> that &&\n\t\t\t\t\t\tgetKey().equals(that.getKey()) && getValue().equals(that.getValue())));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int hashCode() {\n\t\t\t\treturn this.delegate.hashCode();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn this.delegate.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate static class UnmodifiableValueCollection<V> implements Collection<List<V>>, Serializable {\n\n\t\tprivate static final long serialVersionUID = 5518377583904339588L;\n\n\t\t@SuppressWarnings(\"serial\")\n\t\tprivate final Collection<List<V>> delegate;\n\n\t\tpublic UnmodifiableValueCollection(Collection<List<V>> delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\n\t\t // delegation\n\n\t\t@Override\n\t\tpublic int size() {\n\t\t\treturn this.delegate.size();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isEmpty() {\n\t\t\treturn this.delegate.isEmpty();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean contains(Object o) {\n\t\t\treturn this.delegate.contains(o);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsAll(Collection<?> c) {\n\t\t\treturn this.delegate.containsAll(c);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object[] toArray() {\n\t\t\tObject[] result = this.delegate.toArray();\n\t\t\tfilterArray(result);\n\t\t\treturn result;\n\t\t}\n\n\t\t@Override\n\t\tpublic <T> T[] toArray(T[] a) {\n\t\t\tT[] result = this.delegate.toArray(a);\n\t\t\tfilterArray(result);\n\t\t\treturn result;\n\t\t}\n\n\t\tprivate void filterArray(Object[] array) {\n\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\tif (array[i] instanceof List<?> list) {\n\t\t\t\t\tarray[i] = Collections.unmodifiableList(list);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<List<V>> iterator() {\n\t\t\tIterator<List<V>> iterator = this.delegate.iterator();\n\t\t\treturn new Iterator<>() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\treturn iterator.hasNext();\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic List<V> next() {\n\t\t\t\t\treturn Collections.unmodifiableList(iterator.next());\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t@Override\n\t\tpublic void forEach(Consumer<? super List<V>> action) {\n\t\t\tthis.delegate.forEach(list -> action.accept(Collections.unmodifiableList(list)));\n\t\t}\n\n\t\t@Override\n\t\tpublic Spliterator<List<V>> spliterator() {\n\t\t\treturn new UnmodifiableValueSpliterator<>(this.delegate.spliterator());\n\t\t}\n\n\t\t@Override\n\t\tpublic Stream<List<V>> stream() {\n\t\t\treturn StreamSupport.stream(spliterator(), false);\n\t\t}\n\n\t\t@Override\n\t\tpublic Stream<List<V>> parallelStream() {\n\t\t\treturn StreamSupport.stream(spliterator(), true);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\treturn (this == other || this.delegate.equals(other));\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn this.delegate.hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn this.delegate.toString();\n\t\t}\n\n\t\t// unsupported\n\n\t\t@Override\n\t\tpublic boolean add(List<V> ts) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean remove(Object o) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean addAll(Collection<? extends List<V>> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean removeAll(Collection<?> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean retainAll(Collection<?> c) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean removeIf(Predicate<? super List<V>> filter) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\t@Override\n\t\tpublic void clear() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\n\t\tprivate static class UnmodifiableValueSpliterator<T> implements Spliterator<List<T>> {\n\n\t\t\tprivate final Spliterator<List<T>> delegate;\n\n\t\t\tpublic UnmodifiableValueSpliterator(Spliterator<List<T>> delegate) {\n\t\t\t\tthis.delegate = delegate;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean tryAdvance(Consumer<? super List<T>> action) {\n\t\t\t\treturn this.delegate.tryAdvance(l -> action.accept(Collections.unmodifiableList(l)));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void forEachRemaining(Consumer<? super List<T>> action) {\n\t\t\t\tthis.delegate.forEachRemaining(l -> action.accept(Collections.unmodifiableList(l)));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic @Nullable Spliterator<List<T>> trySplit() {\n\t\t\t\tSpliterator<List<T>> split = this.delegate.trySplit();\n\t\t\t\tif (split != null) {\n\t\t\t\t\treturn new UnmodifiableValueSpliterator<>(split);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long estimateSize() {\n\t\t\t\treturn this.delegate.estimateSize();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getExactSizeIfKnown() {\n\t\t\t\treturn this.delegate.getExactSizeIfKnown();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int characteristics() {\n\t\t\t\treturn this.delegate.characteristics();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic boolean hasCharacteristics(int characteristics) {\n\t\t\t\treturn this.delegate.hasCharacteristics(characteristics);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Comparator<? super List<T>> getComparator() {\n\t\t\t\treturn this.delegate.getComparator();\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.UnmodifiableEntry#delegate",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry#delegate",
    "headType": "field",
    "relation": "haveType",
    "tail": "Entry<K, List<V>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry#getKey()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic K getKey() {\r\n    return this.delegate.getKey();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableEntry#getKey()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry#getKey()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableEntry#getValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic List<V> getValue() {\r\n    return Collections.unmodifiableList(this.delegate.getValue());\r\n}",
    "tailType": "method_code"
  }
]