[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#setCapacity(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#ensureWritable(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer ensureWritable(int length) {\r\n    if (length > writableByteCount()) {\r\n        int newCapacity = calculateCapacity(this.writePosition + length);\r\n        setCapacity(newCapacity);\r\n    }\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#ensureWritable(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#ensureWritable(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#allocate(int,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static ByteBuffer allocate(int capacity, boolean direct) {\r\n    return (direct ? ByteBuffer.allocateDirect(capacity) : ByteBuffer.allocate(capacity));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#allocate(int,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#getByte(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte getByte(int index) {\r\n    assertIndex(index >= 0, \"index %d must be >= 0\", index);\r\n    assertIndex(index <= this.writePosition - 1, \"index %d must be <= %d\", index, this.writePosition - 1);\r\n    return this.byteBuffer.get(index);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#getByte(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#getByte(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic byte read() {\r\n    assertIndex(this.readPosition <= this.writePosition - 1, \"readPosition %d must be <= %d\", this.readPosition, this.writePosition - 1);\r\n    int pos = this.readPosition;\r\n    byte b = this.byteBuffer.get(pos);\r\n    this.readPosition = pos + 1;\r\n    return b;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#read()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer read(byte[] destination) {\r\n    Assert.notNull(destination, \"Byte array must not be null\");\r\n    read(destination, 0, destination.length);\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[],int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer read(byte[] destination, int offset, int length) {\r\n    Assert.notNull(destination, \"Byte array must not be null\");\r\n    assertIndex(this.readPosition <= this.writePosition - length, \"readPosition %d and length %d should be smaller than writePosition %d\", this.readPosition, length, this.writePosition);\r\n    ByteBuffer tmp = this.byteBuffer.duplicate();\r\n    int limit = this.readPosition + length;\r\n    tmp.clear().position(this.readPosition).limit(limit);\r\n    tmp.get(destination, offset, length);\r\n    this.readPosition += length;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[],int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#read(byte[],int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DefaultDataBuffer write(byte b) {\r\n    ensureWritable(1);\r\n    int pos = this.writePosition;\r\n    this.byteBuffer.put(pos, b);\r\n    this.writePosition = pos + 1;\r\n    return this;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#write(byte)",
    "tailType": "method"
  }
]