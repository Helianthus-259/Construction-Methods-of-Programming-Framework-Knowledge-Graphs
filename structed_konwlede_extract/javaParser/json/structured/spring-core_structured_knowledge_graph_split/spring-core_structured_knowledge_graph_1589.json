[
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid two() throws JSONException {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> ;);\r\n    hints.reflection().registerType(Long.class, builder -> ;);\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{ \"type\": \"java.lang.Integer\" },\r\n        \t\t{ \"type\": \"java.lang.Long\" }\r\n        \t]\r\n        }\r\n        \"\"\", hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#two()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methods() throws JSONException {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> builder.withMethod(\"parseInt\", TypeReference.listOf(String.class), ExecutableMode.INVOKE));\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{\r\n        \t\t\t\"type\": \"java.lang.Integer\",\r\n        \t\t\t\"methods\": [\r\n        \t\t\t\t{\r\n        \t\t\t\t\t\"name\": \"parseInt\",\r\n        \t\t\t\t\t\"parameterTypes\": [\"java.lang.String\"]\r\n        \t\t\t\t}\r\n        \t\t\t]\r\n        \t\t}\r\n        \t]\r\n        }\r\n        \"\"\", hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodWithInnerClassParameter() throws JSONException {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> builder.withMethod(\"test\", TypeReference.listOf(InnerClass.class), ExecutableMode.INVOKE));\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{\r\n        \t\t\t\"type\": \"java.lang.Integer\",\r\n        \t\t\t\"methods\": [\r\n        \t\t\t\t{\r\n        \t\t\t\t\t\"name\": \"test\",\r\n        \t\t\t\t\t\"parameterTypes\": [\"org.springframework.aot.nativex.RuntimeHintsWriterTests$InnerClass\"]\r\n        \t\t\t\t}\r\n        \t\t\t]\r\n        \t\t}\r\n        \t]\r\n        }\r\n        \"\"\", hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodWithInnerClassParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodAndQueriedMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid methodAndQueriedMethods() throws JSONException {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> builder.withMethod(\"parseInt\", TypeReference.listOf(String.class), ExecutableMode.INVOKE));\r\n    assertEquals(\"\"\"\r\n        {\r\n        \t\"reflection\": [\r\n        \t\t{\r\n        \t\t\t\"type\": \"java.lang.Integer\",\r\n        \t\t\t\"methods\": [\r\n        \t\t\t\t{\r\n        \t\t\t\t\t\"name\": \"parseInt\",\r\n        \t\t\t\t\t\"parameterTypes\": [\"java.lang.String\"]\r\n        \t\t\t\t}\r\n        \t\t\t]\r\n        \t\t}\r\n        \t]\r\n        }\r\n        \"\"\", hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#methodAndQueriedMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#methodAndQueriedMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ignoreLambda() throws JSONException {\r\n    Runnable anonymousRunnable = () -> ;;\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(anonymousRunnable.getClass());\r\n    assertEquals(\";\", hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#ignoreLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortTypeHints() {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> ;);\r\n    hints.reflection().registerType(Long.class, builder -> ;);\r\n    RuntimeHints hints2 = new RuntimeHints();\r\n    hints2.reflection().registerType(Long.class, builder -> ;);\r\n    hints2.reflection().registerType(Integer.class, builder -> ;);\r\n    assertThat(writeJson(hints)).isEqualTo(writeJson(hints2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortTypeHints()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortFieldHints() {\r\n    RuntimeHints hints = new RuntimeHints();\r\n    hints.reflection().registerType(Integer.class, builder -> {\r\n        builder.withField(\"first\");\r\n        builder.withField(\"second\");\r\n    });\r\n    RuntimeHints hints2 = new RuntimeHints();\r\n    hints2.reflection().registerType(Integer.class, builder -> {\r\n        builder.withField(\"second\");\r\n        builder.withField(\"first\");\r\n    });\r\n    assertThat(writeJson(hints)).isEqualTo(writeJson(hints2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.ReflectionHintsTests#sortFieldHints()",
    "tailType": "method"
  }
]