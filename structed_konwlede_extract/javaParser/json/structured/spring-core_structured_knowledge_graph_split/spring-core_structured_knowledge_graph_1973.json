[
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#NON_STRING_PROPERTY_VALUE",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#environment",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#environment",
    "headType": "field",
    "relation": "haveType",
    "tail": "ConfigurableEnvironment",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#merge()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid merge() {\r\n    ConfigurableEnvironment child = new StandardEnvironment();\r\n    child.setActiveProfiles(\"c1\", \"c2\");\r\n    child.getPropertySources().addLast(new MockPropertySource(\"childMock\").withProperty(\"childKey\", \"childVal\").withProperty(\"bothKey\", \"childBothVal\"));\r\n    ConfigurableEnvironment parent = new StandardEnvironment();\r\n    parent.setActiveProfiles(\"p1\", \"p2\");\r\n    parent.getPropertySources().addLast(new MockPropertySource(\"parentMock\").withProperty(\"parentKey\", \"parentVal\").withProperty(\"bothKey\", \"parentBothVal\"));\r\n    assertThat(child.getProperty(\"childKey\")).isEqualTo(\"childVal\");\r\n    assertThat(child.getProperty(\"parentKey\")).isNull();\r\n    assertThat(child.getProperty(\"bothKey\")).isEqualTo(\"childBothVal\");\r\n    assertThat(parent.getProperty(\"childKey\")).isNull();\r\n    assertThat(parent.getProperty(\"parentKey\")).isEqualTo(\"parentVal\");\r\n    assertThat(parent.getProperty(\"bothKey\")).isEqualTo(\"parentBothVal\");\r\n    assertThat(child.getActiveProfiles()).containsExactly(\"c1\", \"c2\");\r\n    assertThat(parent.getActiveProfiles()).containsExactly(\"p1\", \"p2\");\r\n    child.merge(parent);\r\n    assertThat(child.getProperty(\"childKey\")).isEqualTo(\"childVal\");\r\n    assertThat(child.getProperty(\"parentKey\")).isEqualTo(\"parentVal\");\r\n    assertThat(child.getProperty(\"bothKey\")).isEqualTo(\"childBothVal\");\r\n    assertThat(parent.getProperty(\"childKey\")).isNull();\r\n    assertThat(parent.getProperty(\"parentKey\")).isEqualTo(\"parentVal\");\r\n    assertThat(parent.getProperty(\"bothKey\")).isEqualTo(\"parentBothVal\");\r\n    assertThat(child.getActiveProfiles()).containsExactly(\"c1\", \"c2\", \"p1\", \"p2\");\r\n    assertThat(parent.getActiveProfiles()).containsExactly(\"p1\", \"p2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#merge()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#merge()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#propertySourceOrder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertySourceOrder() {\r\n    ConfigurableEnvironment env = new StandardEnvironment();\r\n    MutablePropertySources sources = env.getPropertySources();\r\n    assertThat(sources.precedenceOf(PropertySource.named(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME))).isEqualTo(0);\r\n    assertThat(sources.precedenceOf(PropertySource.named(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME))).isEqualTo(1);\r\n    assertThat(sources).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#propertySourceOrder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#propertySourceOrder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#propertySourceTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid propertySourceTypes() {\r\n    ConfigurableEnvironment env = new StandardEnvironment();\r\n    MutablePropertySources sources = env.getPropertySources();\r\n    assertThat(sources.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)).isInstanceOf(SystemEnvironmentPropertySource.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#propertySourceTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#propertySourceTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#activeProfilesIsEmptyByDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid activeProfilesIsEmptyByDefault() {\r\n    assertThat(environment.getActiveProfiles()).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#activeProfilesIsEmptyByDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#activeProfilesIsEmptyByDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#defaultProfilesContainsDefaultProfileByDefault()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultProfilesContainsDefaultProfileByDefault() {\r\n    assertThat(environment.getDefaultProfiles()).containsExactly(\"default\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#defaultProfilesContainsDefaultProfileByDefault()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#defaultProfilesContainsDefaultProfileByDefault()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests#setActiveProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid setActiveProfiles() {\r\n    environment.setActiveProfiles(\"local\", \"embedded\");\r\n    String[] activeProfiles = environment.getActiveProfiles();\r\n    assertThat(activeProfiles).containsExactly(\"local\", \"embedded\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.StandardEnvironmentTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.StandardEnvironmentTests#setActiveProfiles()",
    "tailType": "method"
  }
]