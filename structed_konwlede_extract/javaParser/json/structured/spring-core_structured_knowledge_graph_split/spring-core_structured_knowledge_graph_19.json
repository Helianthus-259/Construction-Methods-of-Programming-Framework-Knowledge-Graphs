[
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleMapEntries()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleMapEntries() {\r\n    Map<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2);\r\n    assertThat(map.entrySet()).map(styler::style).containsExactlyInAnyOrder(\"'key1' -> 1\", \"'key2' -> 2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.DefaultValueStylerTests#styleMapEntries()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleMapEntries()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleLists()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleLists() {\r\n    assertThat(styler.style(List.of())).isEqualTo(\"list[[empty]]\");\r\n    assertThat(styler.style(List.of(1))).isEqualTo(\"list[1]\");\r\n    assertThat(styler.style(List.of(1, 2))).isEqualTo(\"list[1, 2]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.DefaultValueStylerTests#styleLists()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleLists()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#stylePrimitiveArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stylePrimitiveArrays() {\r\n    int[] array = new int[0];\r\n    assertThat(styler.style(array)).isEqualTo(\"array<Object>[[empty]]\");\r\n    array = new int[] { 1 };\r\n    assertThat(styler.style(array)).isEqualTo(\"array<Integer>[1]\");\r\n    array = new int[] { 1, 2 };\r\n    assertThat(styler.style(array)).isEqualTo(\"array<Integer>[1, 2]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.DefaultValueStylerTests#stylePrimitiveArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#stylePrimitiveArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleObjectArrays()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleObjectArrays() {\r\n    String[] array = new String[0];\r\n    assertThat(styler.style(array)).isEqualTo(\"array<String>[[empty]]\");\r\n    array = new String[] { \"str1\" };\r\n    assertThat(styler.style(array)).isEqualTo(\"array<String>['str1']\");\r\n    array = new String[] { \"str1\", \"str2\" };\r\n    assertThat(styler.style(array)).isEqualTo(\"array<String>['str1', 'str2']\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.DefaultValueStylerTests#styleObjectArrays()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.DefaultValueStylerTests#styleObjectArrays()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsUniqueDeclaredMethodsBenchmark",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.Method;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Mode;\n\n/**\n * Benchmark for finding declared methods on a class using {@link ReflectionUtils}.\n * This benchmark is using {@link Mode#SingleShotTime} since we want to benchmark\n * cold JVM iterations.\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.SingleShotTime)\npublic class ReflectionUtilsUniqueDeclaredMethodsBenchmark {\n\n\t@Benchmark\n\tpublic Method[] findMethods() {\n\t\treturn ReflectionUtils.getUniqueDeclaredMethods(C.class);\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tclass C {\n\t\tvoid m00() { } void m01() { } void m02() { } void m03() { } void m04() { }\n\t\tvoid m05() { } void m06() { } void m07() { } void m08() { } void m09() { }\n\t\tvoid m10() { } void m11() { } void m12() { } void m13() { } void m14() { }\n\t\tvoid m15() { } void m16() { } void m17() { } void m18() { } void m19() { }\n\t\tvoid m20() { } void m21() { } void m22() { } void m23() { } void m24() { }\n\t\tvoid m25() { } void m26() { } void m27() { } void m28() { } void m29() { }\n\t\tvoid m30() { } void m31() { } void m32() { } void m33() { } void m34() { }\n\t\tvoid m35() { } void m36() { } void m37() { } void m38() { } void m39() { }\n\t\tvoid m40() { } void m41() { } void m42() { } void m43() { } void m44() { }\n\t\tvoid m45() { } void m46() { } void m47() { } void m48() { } void m49() { }\n\t\tvoid m50() { } void m51() { } void m52() { } void m53() { } void m54() { }\n\t\tvoid m55() { } void m56() { } void m57() { } void m58() { } void m59() { }\n\t\tvoid m60() { } void m61() { } void m62() { } void m63() { } void m64() { }\n\t\tvoid m65() { } void m66() { } void m67() { } void m68() { } void m69() { }\n\t\tvoid m70() { } void m71() { } void m72() { } void m73() { } void m74() { }\n\t\tvoid m75() { } void m76() { } void m77() { } void m78() { } void m79() { }\n\t\tvoid m80() { } void m81() { } void m82() { } void m83() { } void m84() { }\n\t\tvoid m85() { } void m86() { } void m87() { } void m88() { } void m89() { }\n\t\tvoid m90() { } void m91() { } void m92() { } void m93() { } void m94() { }\n\t\tvoid m95() { } void m96() { } void m97() { } void m98() { } void m99() { }\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsUniqueDeclaredMethodsBenchmark#findMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Benchmark\r\npublic Method[] findMethods() {\r\n    return ReflectionUtils.getUniqueDeclaredMethods(C.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsUniqueDeclaredMethodsBenchmark",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtilsUniqueDeclaredMethodsBenchmark#findMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtilsUniqueDeclaredMethodsBenchmark#findMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Benchmark",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.C",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.C",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.C",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.Method;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Mode;\n\n/**\n * Benchmark for finding declared methods on a class using {@link ReflectionUtils}.\n * This benchmark is using {@link Mode#SingleShotTime} since we want to benchmark\n * cold JVM iterations.\n * @author Brian Clozel\n */\n@BenchmarkMode(Mode.SingleShotTime)\npublic class ReflectionUtilsUniqueDeclaredMethodsBenchmark {\n\n\t@Benchmark\n\tpublic Method[] findMethods() {\n\t\treturn ReflectionUtils.getUniqueDeclaredMethods(C.class);\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tclass C {\n\t\tvoid m00() { } void m01() { } void m02() { } void m03() { } void m04() { }\n\t\tvoid m05() { } void m06() { } void m07() { } void m08() { } void m09() { }\n\t\tvoid m10() { } void m11() { } void m12() { } void m13() { } void m14() { }\n\t\tvoid m15() { } void m16() { } void m17() { } void m18() { } void m19() { }\n\t\tvoid m20() { } void m21() { } void m22() { } void m23() { } void m24() { }\n\t\tvoid m25() { } void m26() { } void m27() { } void m28() { } void m29() { }\n\t\tvoid m30() { } void m31() { } void m32() { } void m33() { } void m34() { }\n\t\tvoid m35() { } void m36() { } void m37() { } void m38() { } void m39() { }\n\t\tvoid m40() { } void m41() { } void m42() { } void m43() { } void m44() { }\n\t\tvoid m45() { } void m46() { } void m47() { } void m48() { } void m49() { }\n\t\tvoid m50() { } void m51() { } void m52() { } void m53() { } void m54() { }\n\t\tvoid m55() { } void m56() { } void m57() { } void m58() { } void m59() { }\n\t\tvoid m60() { } void m61() { } void m62() { } void m63() { } void m64() { }\n\t\tvoid m65() { } void m66() { } void m67() { } void m68() { } void m69() { }\n\t\tvoid m70() { } void m71() { } void m72() { } void m73() { } void m74() { }\n\t\tvoid m75() { } void m76() { } void m77() { } void m78() { } void m79() { }\n\t\tvoid m80() { } void m81() { } void m82() { } void m83() { } void m84() { }\n\t\tvoid m85() { } void m86() { } void m87() { } void m88() { } void m89() { }\n\t\tvoid m90() { } void m91() { } void m92() { } void m93() { } void m94() { }\n\t\tvoid m95() { } void m96() { } void m97() { } void m98() { } void m99() { }\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.C#m00()",
    "headType": "method",
    "relation": "provide",
    "tail": "void m00() ;",
    "tailType": "method_code"
  }
]