[
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#nullsLow",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#compare(T,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(@Nullable T left, @Nullable T right) {\r\n    Comparator<T> comparator = this.nullsLow ? Comparator.nullsFirst(this.nonNullComparator) : Comparator.nullsLast(this.nonNullComparator);\r\n    return comparator.compare(left, right);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparator#compare(T,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#compare(T,T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof NullSafeComparator<?> that && this.nonNullComparator.equals(that.nonNullComparator) && this.nullsLow == that.nullsLow));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparator#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return Boolean.hashCode(this.nullsLow);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparator#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"NullSafeComparator: non-null comparator [\" + this.nonNullComparator + \"]; \" + (this.nullsLow ? \"nulls low\" : \"nulls high\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.NullSafeComparator#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CompositeCollection",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.lang.reflect.Array;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport org.jspecify.annotations.Nullable;\n\n\n/**\n * Composite collection that combines two other collections. This type is only\n * exposed through {@link CompositeMap#values()}.\n *\n * @author Arjen Poutsma\n * @since 6.2\n * @param <E> the type of elements maintained by this collection\n */\nclass CompositeCollection<E> implements Collection<E> {\n\n\tprivate final Collection<E> first;\n\n\tprivate final Collection<E> second;\n\n\n\tCompositeCollection(Collection<E> first, Collection<E> second) {\n\t\tAssert.notNull(first, \"First must not be null\");\n\t\tAssert.notNull(second, \"Second must not be null\");\n\t\tthis.first = first;\n\t\tthis.second = second;\n\t}\n\n\n\t@Override\n\tpublic int size() {\n\t\treturn this.first.size() + this.second.size();\n\t}\n\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn this.first.isEmpty() && this.second.isEmpty();\n\t}\n\n\t@Override\n\tpublic boolean contains(Object o) {\n\t\tif (this.first.contains(o)) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn this.second.contains(o);\n\t\t}\n\t}\n\n\t@Override\n\tpublic Iterator<E> iterator() {\n\t\tCompositeIterator<E> iterator = new CompositeIterator<>();\n\t\titerator.add(this.first.iterator());\n\t\titerator.add(this.second.iterator());\n\t\treturn iterator;\n\t}\n\n\t@Override\n\tpublic Object[] toArray() {\n\t\tObject[] result = new Object[size()];\n\t\tObject[] firstArray = this.first.toArray();\n\t\tObject[] secondArray = this.second.toArray();\n\t\tSystem.arraycopy(firstArray, 0, result, 0, firstArray.length);\n\t\tSystem.arraycopy(secondArray, 0, result, firstArray.length, secondArray.length);\n\t\treturn result;\n\t}\n\n\t@Override\n\t@SuppressWarnings({\"unchecked\",\"NullAway\"}) // Overridden method does not define nullness\n\tpublic <T> @Nullable T[] toArray(@Nullable T[] a) {\n\t\tint size = this.size();\n\t\t@Nullable T[] result;\n\t\tif (a.length >= size) {\n\t\t\tresult = a;\n\t\t}\n\t\telse {\n\t\t\tresult = (T[]) Array.newInstance(a.getClass().getComponentType(), size);\n\t\t}\n\n\t\tint idx = 0;\n\t\tfor (E e : this) {\n\t\t\tresult[idx++] = (T) e;\n\t\t}\n\t\tif (result.length > size) {\n\t\t\tresult[size] = null;\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean add(E e) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic boolean remove(Object o) {\n\t\tboolean firstResult = this.first.remove(o);\n\t\tboolean secondResult = this.second.remove(o);\n\t\treturn firstResult || secondResult;\n\t}\n\n\t@Override\n\tpublic boolean containsAll(Collection<?> c) {\n\t\tfor (Object o : c) {\n\t\t\tif (!contains(o)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean addAll(Collection<? extends E> c) {\n\t\tboolean changed = false;\n\t\tfor (E e : c) {\n\t\t\tif (add(e)) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t}\n\n\t@Override\n\tpublic boolean removeAll(Collection<?> c) {\n\t\tif (c.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tboolean firstResult = this.first.removeAll(c);\n\t\tboolean secondResult = this.second.removeAll(c);\n\n\t\treturn firstResult || secondResult;\n\t}\n\n\t@Override\n\tpublic boolean retainAll(Collection<?> c) {\n\t\tboolean firstResult = this.first.retainAll(c);\n\t\tboolean secondResult = this.second.retainAll(c);\n\n\t\treturn firstResult || secondResult;\n\t}\n\n\t@Override\n\tpublic void clear() {\n\t\tthis.first.clear();\n\t\tthis.second.clear();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CompositeCollection#first",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CompositeCollection#first",
    "headType": "field",
    "relation": "haveType",
    "tail": "Collection<E>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CompositeCollection",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CompositeCollection#second",
    "tailType": "field"
  }
]