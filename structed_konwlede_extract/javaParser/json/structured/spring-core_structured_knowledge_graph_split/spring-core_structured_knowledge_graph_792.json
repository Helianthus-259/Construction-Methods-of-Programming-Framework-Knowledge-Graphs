[
  {
    "head": "org.springframework.core.annotation.Nearest",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.Nearest#isBestCandidate(MergedAnnotation<Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.Nearest#isBestCandidate(MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.Nearest#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<Annotation> select(MergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\r\n    if (candidate.getDistance() < existing.getDistance()) {\r\n        return candidate;\r\n    }\r\n    return existing;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.Nearest",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.Nearest#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.Nearest#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.FirstDirectlyDeclared",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.function.Predicate;\n\n/**\n * {@link MergedAnnotationSelector} implementations that provide various options\n * for {@link MergedAnnotation} instances.\n *\n * @author Phillip Webb\n * @since 5.2\n * @see MergedAnnotations#get(Class, Predicate, MergedAnnotationSelector)\n * @see MergedAnnotations#get(String, Predicate, MergedAnnotationSelector)\n */\npublic abstract class MergedAnnotationSelectors {\n\n\tprivate static final MergedAnnotationSelector<?> NEAREST = new Nearest();\n\n\tprivate static final MergedAnnotationSelector<?> FIRST_DIRECTLY_DECLARED = new FirstDirectlyDeclared();\n\n\n\tprivate MergedAnnotationSelectors() {\n\t}\n\n\n\t/**\n\t * Select the nearest annotation, i.e. the one with the lowest distance.\n\t * @return a selector that picks the annotation with the lowest distance\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> nearest() {\n\t\treturn (MergedAnnotationSelector<A>) NEAREST;\n\t}\n\n\t/**\n\t * Select the first directly declared annotation when possible. If no direct\n\t * annotations are declared then the nearest annotation is selected.\n\t * @return a selector that picks the first directly declared annotation whenever possible\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <A extends Annotation> MergedAnnotationSelector<A> firstDirectlyDeclared() {\n\t\treturn (MergedAnnotationSelector<A>) FIRST_DIRECTLY_DECLARED;\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the nearest annotation.\n\t */\n\tprivate static class Nearest implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (candidate.getDistance() < existing.getDistance()) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n\n\t/**\n\t * {@link MergedAnnotationSelector} to select the first directly declared\n\t * annotation.\n\t */\n\tprivate static class FirstDirectlyDeclared implements MergedAnnotationSelector<Annotation> {\n\n\t\t@Override\n\t\tpublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\n\t\t\treturn annotation.getDistance() == 0;\n\t\t}\n\n\t\t@Override\n\t\tpublic MergedAnnotation<Annotation> select(\n\t\t\t\tMergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\n\n\t\t\tif (existing.getDistance() > 0 && candidate.getDistance() == 0) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared#isBestCandidate(MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isBestCandidate(MergedAnnotation<Annotation> annotation) {\r\n    return annotation.getDistance() == 0;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.FirstDirectlyDeclared#isBestCandidate(MergedAnnotation<Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared#isBestCandidate(MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MergedAnnotation<Annotation> select(MergedAnnotation<Annotation> existing, MergedAnnotation<Annotation> candidate) {\r\n    if (existing.getDistance() > 0 && candidate.getDistance() == 0) {\r\n        return candidate;\r\n    }\r\n    return existing;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.FirstDirectlyDeclared#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.FirstDirectlyDeclared#select(MergedAnnotation<Annotation>,MergedAnnotation<Annotation>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * An {@link AbstractMergedAnnotation} used as the implementation of\n * {@link MergedAnnotation#missing()}.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @since 5.2\n * @param <A> the annotation type\n */\nfinal class MissingMergedAnnotation<A extends Annotation> extends AbstractMergedAnnotation<A> {\n\n\tprivate static final MissingMergedAnnotation<?> INSTANCE = new MissingMergedAnnotation<>();\n\n\n\tprivate MissingMergedAnnotation() {\n\t}\n\n\n\t@Override\n\tpublic Class<A> getType() {\n\t\tthrow new NoSuchElementException(\"Unable to get type for missing annotation\");\n\t}\n\n\t@Override\n\tpublic boolean isPresent() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic @Nullable Object getSource() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic @Nullable MergedAnnotation<?> getMetaSource() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic MergedAnnotation<?> getRoot() {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic List<Class<? extends Annotation>> getMetaTypes() {\n\t\treturn Collections.emptyList();\n\t}\n\n\t@Override\n\tpublic int getDistance() {\n\t\treturn -1;\n\t}\n\n\t@Override\n\tpublic int getAggregateIndex() {\n\t\treturn -1;\n\t}\n\n\t@Override\n\tpublic boolean hasNonDefaultValue(String attributeName) {\n\t\tthrow new NoSuchElementException(\n\t\t\t\t\"Unable to check non-default value for missing annotation\");\n\t}\n\n\t@Override\n\tpublic boolean hasDefaultValue(String attributeName) {\n\t\tthrow new NoSuchElementException(\n\t\t\t\t\"Unable to check default value for missing annotation\");\n\t}\n\n\t@Override\n\tpublic <T> Optional<T> getValue(String attributeName, Class<T> type) {\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic <T> Optional<T> getDefaultValue(@Nullable String attributeName, Class<T> type) {\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic MergedAnnotation<A> filterAttributes(Predicate<String> predicate) {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic MergedAnnotation<A> withNonMergedAttributes() {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {\n\t\treturn new AnnotationAttributes();\n\t}\n\n\t@Override\n\tpublic Map<String, Object> asMap(Adapt... adaptations) {\n\t\treturn Collections.emptyMap();\n\t}\n\n\t@Override\n\tpublic <T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations) {\n\t\treturn factory.apply(this);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"(missing)\";\n\t}\n\n\t@Override\n\tpublic <T extends Annotation> MergedAnnotation<T> getAnnotation(String attributeName,\n\t\t\tClass<T> type) throws NoSuchElementException {\n\n\t\tthrow new NoSuchElementException(\n\t\t\t\t\"Unable to get attribute value for missing annotation\");\n\t}\n\n\t@Override\n\tpublic <T extends Annotation> MergedAnnotation<T>[] getAnnotationArray(\n\t\t\tString attributeName, Class<T> type) throws NoSuchElementException {\n\n\t\tthrow new NoSuchElementException(\n\t\t\t\t\"Unable to get attribute value for missing annotation\");\n\t}\n\n\t@Override\n\tprotected <T> T getAttributeValue(String attributeName, Class<T> type) {\n\t\tthrow new NoSuchElementException(\n\t\t\t\t\"Unable to get attribute value for missing annotation\");\n\t}\n\n\t@Override\n\tprotected A createSynthesizedAnnotation() {\n\t\tthrow new NoSuchElementException(\"Unable to synthesize missing annotation\");\n\t}\n\n\n\t@SuppressWarnings(\"unchecked\")\n\tstatic <A extends Annotation> MergedAnnotation<A> getInstance() {\n\t\treturn (MergedAnnotation<A>) INSTANCE;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation#INSTANCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#INSTANCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "MissingMergedAnnotation<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Class<A> getType() {\r\n    throw new NoSuchElementException(\"Unable to get type for missing annotation\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MissingMergedAnnotation",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MissingMergedAnnotation#getType()",
    "tailType": "method"
  }
]