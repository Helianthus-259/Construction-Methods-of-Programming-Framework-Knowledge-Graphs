[
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#arrayToList(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#mergeArrayIntoCollection(Object,Collection<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Merge the given array into the given Collection.\r\n * @param array the array to merge (may be {@code null})\r\n * @param collection the target Collection to merge the array into\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {\r\n    Object[] arr = ObjectUtils.toObjectArray(array);\r\n    Collections.addAll(collection, (E[]) arr);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#mergeArrayIntoCollection(Object,Collection<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#mergeArrayIntoCollection(Object,Collection<E>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#mergePropertiesIntoMap(Properties,Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Merge the given Properties instance into the given Map,\r\n * copying all properties (key-value pairs) over.\r\n * <p>Uses {@code Properties.propertyNames()} to even catch\r\n * default properties linked into the original Properties instance.\r\n * @param props the Properties instance to merge (may be {@code null})\r\n * @param map the target Map to merge the properties into\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {\r\n    if (props != null) {\r\n        for (Enumeration<?> en = props.propertyNames(); en.hasMoreElements(); ) {\r\n            String key = (String) en.nextElement();\r\n            Object value = props.get(key);\r\n            if (value == null) {\r\n                // Allow for defaults fallback or potentially overridden accessor...\r\n                value = props.getProperty(key);\r\n            }\r\n            map.put((K) key, (V) value);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#mergePropertiesIntoMap(Properties,Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#mergePropertiesIntoMap(Properties,Map<K,V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#contains(Iterator<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given Iterator contains the given element.\r\n * @param iterator the Iterator to check\r\n * @param element the element to look for\r\n * @return {@code true} if found, {@code false} otherwise\r\n */\r\npublic static boolean contains(@Nullable Iterator<?> iterator, Object element) {\r\n    if (iterator != null) {\r\n        while (iterator.hasNext()) {\r\n            Object candidate = iterator.next();\r\n            if (ObjectUtils.nullSafeEquals(candidate, element)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#contains(Iterator<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#contains(Enumeration<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given Enumeration contains the given element.\r\n * @param enumeration the Enumeration to check\r\n * @param element the element to look for\r\n * @return {@code true} if found, {@code false} otherwise\r\n */\r\npublic static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {\r\n    if (enumeration != null) {\r\n        while (enumeration.hasMoreElements()) {\r\n            Object candidate = enumeration.nextElement();\r\n            if (ObjectUtils.nullSafeEquals(candidate, element)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#contains(Enumeration<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#containsInstance(Collection<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given Collection contains the given element instance.\r\n * <p>Enforces the given instance to be present, rather than returning\r\n * {@code true} for an equal element as well.\r\n * @param collection the Collection to check\r\n * @param element the element to look for\r\n * @return {@code true} if found, {@code false} otherwise\r\n */\r\npublic static boolean containsInstance(@Nullable Collection<?> collection, Object element) {\r\n    if (collection != null) {\r\n        for (Object candidate : collection) {\r\n            if (candidate == element) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#containsInstance(Collection<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#containsAny(Collection<?>,Collection<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return {@code true} if any element in '{@code candidates}' is\r\n * contained in '{@code source}'; otherwise returns {@code false}.\r\n * @param source the source Collection\r\n * @param candidates the candidates to search for\r\n * @return whether any of the candidates has been found\r\n */\r\npublic static boolean containsAny(Collection<?> source, Collection<?> candidates) {\r\n    return findFirstMatch(source, candidates) != null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#containsAny(Collection<?>,Collection<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findFirstMatch(Collection<?>,Collection<E>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the first element in '{@code candidates}' that is contained in\r\n * '{@code source}'. If no element in '{@code candidates}' is present in\r\n * '{@code source}' returns {@code null}. Iteration order is\r\n * {@link Collection} implementation specific.\r\n * @param source the source Collection\r\n * @param candidates the candidates to search for\r\n * @return the first present object, or {@code null} if not found\r\n */\r\n@Nullable\r\npublic static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {\r\n    if (isEmpty(source) || isEmpty(candidates)) {\r\n        return null;\r\n    }\r\n    for (E candidate : candidates) {\r\n        if (source.contains(candidate)) {\r\n            return candidate;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#findFirstMatch(Collection<?>,Collection<E>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findFirstMatch(Collection<?>,Collection<E>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find a single value of the given type in the given Collection.\r\n * @param collection the Collection to search\r\n * @param type the type to look for\r\n * @return a value of the given type found if there is a clear match,\r\n * or {@code null} if none or more than one such value found\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Nullable\r\npublic static <T> T findValueOfType(@Nullable Collection<?> collection, @Nullable Class<T> type) {\r\n    if (isEmpty(collection)) {\r\n        return null;\r\n    }\r\n    T value = null;\r\n    for (Object element : collection) {\r\n        if (type == null || type.isInstance(element)) {\r\n            if (value != null) {\r\n                // More than one value found... no clear single value.\r\n                return null;\r\n            }\r\n            value = (T) element;\r\n        }\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CollectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CollectionUtils#findValueOfType(Collection<?>,Class<T>)",
    "tailType": "method"
  }
]