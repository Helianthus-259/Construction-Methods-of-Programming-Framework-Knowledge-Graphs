[
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstances()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortInstances() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B());\r\n    list.add(new A());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(A.class, B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstances()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstances()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortInstancesWithPriority() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B2());\r\n    list.add(new A2());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(A2.class, B2.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithPriority()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithOrderAndPriority()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortInstancesWithOrderAndPriority() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B());\r\n    list.add(new A2());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(A2.class, B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithOrderAndPriority()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithOrderAndPriority()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortInstancesWithSubclass() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new B());\r\n    list.add(new C());\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).hasExactlyElementsOfTypes(C.class, B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortInstancesWithSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortClasses() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(B.class);\r\n    list.add(A.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(A.class, B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortClassesWithSubclass() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(B.class);\r\n    list.add(C.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(C.class, B.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortClassesWithSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortWithNulls()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sortWithNulls() {\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(null);\r\n    list.add(B.class);\r\n    list.add(null);\r\n    list.add(A.class);\r\n    AnnotationAwareOrderComparator.sort(list);\r\n    assertThat(list).containsExactly(A.class, B.class, null, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAwareOrderComparatorTests#sortWithNulls()",
    "tailType": "method"
  }
]