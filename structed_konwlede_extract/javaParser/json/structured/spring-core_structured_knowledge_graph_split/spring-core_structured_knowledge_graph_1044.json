[
  {
    "head": "org.springframework.core.io.FileUrlResource#getFile()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#isWritable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isWritable() {\r\n    try {\r\n        File file = getFile();\r\n        return (file.canWrite() && !file.isDirectory());\r\n    } catch (IOException ex) {\r\n        return false;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileUrlResource#isWritable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#isWritable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#getOutputStream()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic OutputStream getOutputStream() throws IOException {\r\n    return Files.newOutputStream(getFile().toPath());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileUrlResource#getOutputStream()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#getOutputStream()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#writableChannel()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic WritableByteChannel writableChannel() throws IOException {\r\n    return FileChannel.open(getFile().toPath(), StandardOpenOption.WRITE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileUrlResource#writableChannel()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#writableChannel()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#createRelative(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Resource createRelative(String relativePath) throws MalformedURLException {\r\n    return new FileUrlResource(createRelativeURL(relativePath));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.FileUrlResource#createRelative(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource#createRelative(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.FileUrlResource",
    "headType": "class",
    "relation": "extend",
    "tail": "UrlResource",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.InputStreamResource",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * {@link Resource} implementation for a given {@link InputStream} or a given\n * {@link InputStreamSource} (which can be supplied as a lambda expression)\n * for a lazy {@link InputStream} on demand.\n *\n * <p>Should only be used if no other specific {@code Resource} implementation\n * is applicable. In particular, prefer {@link ByteArrayResource} or any of the\n * file-based {@code Resource} implementations if possible. If you need to obtain\n * a custom stream multiple times, use a custom {@link AbstractResource} subclass\n * with a corresponding {@code getInputStream()} implementation.\n *\n * <p>In contrast to other {@code Resource} implementations, this is a descriptor\n * for an <i>already opened</i> resource - therefore returning {@code true} from\n * {@link #isOpen()}. Do not use an {@code InputStreamResource} if you need to keep\n * the resource descriptor somewhere, or if you need to read from a stream multiple\n * times. This also applies when constructed with an {@code InputStreamSource}\n * which lazily obtains the stream but only allows for single access as well.\n *\n * <p><b>NOTE: This class does not provide an independent {@link #contentLength()}\n * implementation: Any such call will consume the given {@code InputStream}!</b>\n * Consider overriding {@code #contentLength()} with a custom implementation if\n * possible. For any other purpose, it is not recommended to extend from this\n * class; this is particularly true when used with Spring's web resource rendering\n * which specifically skips {@code #contentLength()} for this exact class only.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 28.12.2003\n * @see ByteArrayResource\n * @see ClassPathResource\n * @see FileSystemResource\n * @see UrlResource\n */\npublic class InputStreamResource extends AbstractResource {\n\n\tprivate final InputStreamSource inputStreamSource;\n\n\tprivate final String description;\n\n\tprivate final Object equality;\n\n\tprivate boolean read = false;\n\n\n\t/**\n\t * Create a new {@code InputStreamResource} with a lazy {@code InputStream}\n\t * for single use.\n\t * @param inputStreamSource an on-demand source for a single-use InputStream\n\t * @since 6.1.7\n\t */\n\tpublic InputStreamResource(InputStreamSource inputStreamSource) {\n\t\tthis(inputStreamSource, \"resource loaded from InputStreamSource\");\n\t}\n\n\t/**\n\t * Create a new {@code InputStreamResource} with a lazy {@code InputStream}\n\t * for single use.\n\t * @param inputStreamSource an on-demand source for a single-use InputStream\n\t * @param description where the InputStream comes from\n\t * @since 6.1.7\n\t */\n\tpublic InputStreamResource(InputStreamSource inputStreamSource, @Nullable String description) {\n\t\tAssert.notNull(inputStreamSource, \"InputStreamSource must not be null\");\n\t\tthis.inputStreamSource = inputStreamSource;\n\t\tthis.description = (description != null ? description : \"\");\n\t\tthis.equality = inputStreamSource;\n\t}\n\n\t/**\n\t * Create a new {@code InputStreamResource} for an existing {@code InputStream}.\n\t * <p>Consider retrieving the InputStream on demand if possible, reducing its\n\t * lifetime and reliably opening it and closing it through regular\n\t * {@link InputStreamSource#getInputStream()} usage.\n\t * @param inputStream the InputStream to use\n\t * @see #InputStreamResource(InputStreamSource)\n\t */\n\tpublic InputStreamResource(InputStream inputStream) {\n\t\tthis(inputStream, \"resource loaded through InputStream\");\n\t}\n\n\t/**\n\t * Create a new {@code InputStreamResource} for an existing {@code InputStream}.\n\t * @param inputStream the InputStream to use\n\t * @param description where the InputStream comes from\n\t * @see #InputStreamResource(InputStreamSource, String)\n\t */\n\tpublic InputStreamResource(InputStream inputStream, @Nullable String description) {\n\t\tAssert.notNull(inputStream, \"InputStream must not be null\");\n\t\tthis.inputStreamSource = () -> inputStream;\n\t\tthis.description = (description != null ? description : \"\");\n\t\tthis.equality = inputStream;\n\t}\n\n\n\t/**\n\t * This implementation always returns {@code true}.\n\t */\n\t@Override\n\tpublic boolean exists() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * This implementation always returns {@code true}.\n\t */\n\t@Override\n\tpublic boolean isOpen() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * This implementation throws IllegalStateException if attempting to\n\t * read the underlying stream multiple times.\n\t */\n\t@Override\n\tpublic InputStream getInputStream() throws IOException, IllegalStateException {\n\t\tif (this.read) {\n\t\t\tthrow new IllegalStateException(\"InputStream has already been read (possibly for early content length \" +\n\t\t\t\t\t\"determination) - do not use InputStreamResource if a stream needs to be read multiple times\");\n\t\t}\n\t\tthis.read = true;\n\t\treturn this.inputStreamSource.getInputStream();\n\t}\n\n\t/**\n\t * This implementation returns a description that includes the passed-in\n\t * description, if any.\n\t */\n\t@Override\n\tpublic String getDescription() {\n\t\treturn \"InputStream resource [\" + this.description + \"]\";\n\t}\n\n\n\t/**\n\t * This implementation compares the underlying InputStream.\n\t */\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof InputStreamResource that &&\n\t\t\t\tthis.equality.equals(that.equality)));\n\t}\n\n\t/**\n\t * This implementation returns the hash code of the underlying InputStream.\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.equality.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.InputStreamResource#inputStreamSource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource#inputStreamSource",
    "headType": "field",
    "relation": "haveType",
    "tail": "InputStreamSource",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.InputStreamResource",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.InputStreamResource#description",
    "tailType": "field"
  }
]