[
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#number",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#number",
    "headType": "field",
    "relation": "haveType",
    "tail": "Integer",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#objects",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#objects",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#strings",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#strings",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#openObjects",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#openObjects",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<? extends Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#openNumbers",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#openNumbers",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<? extends Number>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#storableObjectList",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#storableObjectList",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<? super Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#array",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#array",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<Number>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.TypeUtilsTests#openArray",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#openArray",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<? extends Number>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withClasses()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withClasses() {\r\n    assertThat(TypeUtils.isAssignable(Object.class, Object.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(Object.class, String.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(String.class, Object.class)).isFalse();\r\n    assertThat(TypeUtils.isAssignable(List.class, List.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List.class, LinkedList.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List.class, Collection.class)).isFalse();\r\n    assertThat(TypeUtils.isAssignable(List.class, HashSet.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.TypeUtilsTests#withClasses()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withClasses()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.TypeUtilsTests#withParameterizedTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid withParameterizedTypes() throws Exception {\r\n    Type objectsType = getClass().getField(\"objects\").getGenericType();\r\n    Type openObjectsType = getClass().getField(\"openObjects\").getGenericType();\r\n    Type stringsType = getClass().getField(\"strings\").getGenericType();\r\n    assertThat(TypeUtils.isAssignable(Object.class, objectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(Object.class, openObjectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(Object.class, stringsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List.class, objectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List.class, openObjectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(List.class, stringsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(objectsType, List.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openObjectsType, List.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(stringsType, List.class)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(objectsType, objectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openObjectsType, openObjectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(stringsType, stringsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openObjectsType, objectsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(openObjectsType, stringsType)).isTrue();\r\n    assertThat(TypeUtils.isAssignable(stringsType, objectsType)).isFalse();\r\n    assertThat(TypeUtils.isAssignable(objectsType, stringsType)).isFalse();\r\n}",
    "tailType": "method_code"
  }
]