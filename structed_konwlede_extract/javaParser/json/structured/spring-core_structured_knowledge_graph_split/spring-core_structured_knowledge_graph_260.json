[
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalCharset()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeIllegalCharset() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"text/html; charset=foo-bar\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalCharset()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalCharset()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeQuotedParameterValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-8917\r\n@Test\r\nvoid parseMimeTypeQuotedParameterValue() {\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(\"audio/*;attr=\\\"v>alue\\\"\");\r\n    assertThat(mimeType.getParameter(\"attr\")).isEqualTo(\"\\\"v>alue\\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeQuotedParameterValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeQuotedParameterValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeSingleQuotedParameterValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-8917\r\n@Test\r\nvoid parseMimeTypeSingleQuotedParameterValue() {\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(\"audio/*;attr='v>alue'\");\r\n    assertThat(mimeType.getParameter(\"attr\")).isEqualTo(\"'v>alue'\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeSingleQuotedParameterValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeSingleQuotedParameterValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16630\r\n@Test\r\nvoid parseMimeTypeWithSpacesAroundEquals() {\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(\"multipart/x-mixed-replace;boundary = --myboundary\");\r\n    assertThat(mimeType.getParameter(\"boundary\")).isEqualTo(\"--myboundary\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEqualsAndQuotedValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16630\r\n@Test\r\nvoid parseMimeTypeWithSpacesAroundEqualsAndQuotedValue() {\r\n    MimeType mimeType = MimeTypeUtils.parseMimeType(\"text/plain; foo = \\\" bar \\\" \");\r\n    assertThat(mimeType.getParameter(\"foo\")).isEqualTo(\"\\\" bar \\\"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEqualsAndQuotedValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeWithSpacesAroundEqualsAndQuotedValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalQuotedParameterValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeIllegalQuotedParameterValue() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(\"audio/*;attr=\\\"\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalQuotedParameterValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeIllegalQuotedParameterValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.MimeTypeTests#parseMimeTypeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseMimeTypeNull() {\r\n    assertThatExceptionOfType(InvalidMimeTypeException.class).isThrownBy(() -> MimeTypeUtils.parseMimeType(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.MimeTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.MimeTypeTests#parseMimeTypeNull()",
    "tailType": "method"
  }
]