[
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#initParameterNameDiscovery(ParameterNameDiscoverer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the name of the method/constructor parameter.\r\n * @return the parameter name (may be {@code null} if no\r\n * parameter name metadata is contained in the class file or no\r\n * {@link #initParameterNameDiscovery ParameterNameDiscoverer}\r\n * has been set to begin with)\r\n */\r\n@Nullable\r\npublic String getParameterName() {\r\n    if (this.parameterIndex < 0) {\r\n        return null;\r\n    }\r\n    ParameterNameDiscoverer discoverer = this.parameterNameDiscoverer;\r\n    if (discoverer != null) {\r\n        @Nullable\r\n        String[] parameterNames = null;\r\n        if (this.executable instanceof Method method) {\r\n            parameterNames = discoverer.getParameterNames(method);\r\n        } else if (this.executable instanceof Constructor<?> constructor) {\r\n            parameterNames = discoverer.getParameterNames(constructor);\r\n        }\r\n        if (parameterNames != null && this.parameterIndex < parameterNames.length) {\r\n            this.parameterName = parameterNames[this.parameterIndex];\r\n        }\r\n        this.parameterNameDiscoverer = null;\r\n    }\r\n    return this.parameterName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#getParameterName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#getParameterName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#adaptAnnotation(A)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * A template method to post-process a given annotation instance before\r\n * returning it to the caller.\r\n * <p>The default implementation simply returns the given annotation as-is.\r\n * @param annotation the annotation about to be returned\r\n * @return the post-processed annotation (or simply the original one)\r\n * @since 4.2\r\n */\r\nprotected <A extends Annotation> A adaptAnnotation(A annotation) {\r\n    return annotation;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#adaptAnnotation(A)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#adaptAnnotationArray(Annotation[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * A template method to post-process a given annotation array before\r\n * returning it to the caller.\r\n * <p>The default implementation simply returns the given annotation array as-is.\r\n * @param annotations the annotation array about to be returned\r\n * @return the post-processed annotation array (or simply the original one)\r\n * @since 4.2\r\n */\r\nprotected Annotation[] adaptAnnotationArray(Annotation[] annotations) {\r\n    return annotations;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#adaptAnnotationArray(Annotation[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof MethodParameter that && getContainingClass() == that.getContainingClass() && ObjectUtils.nullSafeEquals(this.typeIndexesPerLevel, that.typeIndexesPerLevel) && this.nestingLevel == that.nestingLevel && this.parameterIndex == that.parameterIndex && this.executable.equals(that.executable)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return (31 * this.executable.hashCode() + this.parameterIndex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    Method method = getMethod();\r\n    return (method != null ? \"method '\" + method.getName() + \"'\" : \"constructor\") + \" parameter \" + this.parameterIndex;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodParameter#clone()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MethodParameter clone() {\r\n    return new MethodParameter(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodParameter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodParameter#clone()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodParameter#clone()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]