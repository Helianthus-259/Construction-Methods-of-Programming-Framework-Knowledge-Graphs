[
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * If this type is a {@link Map}, creates a mapValue {@link TypeDescriptor}\r\n * from the provided map value.\r\n * <p>Narrows the {@link #getMapValueTypeDescriptor() mapValueType} property\r\n * to the class of the provided map value. For example, if this describes a\r\n * {@code java.util.Map<java.lang.String, java.lang.Number>} and the value\r\n * argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be\r\n * {@code java.lang.Integer}. If this describes a {@code java.util.Map<?, ?>}\r\n * and the value argument is a {@code java.lang.Integer}, the returned\r\n * TypeDescriptor will be {@code java.lang.Integer} as well.\r\n * <p>Annotation and nested type context will be preserved in the narrowed\r\n * TypeDescriptor that is returned.\r\n * @param mapValue the map value\r\n * @return the map value type descriptor\r\n * @throws IllegalStateException if this type is not a {@code java.util.Map}\r\n * @see #narrow(Object)\r\n */\r\n@Nullable\r\npublic TypeDescriptor getMapValueTypeDescriptor(@Nullable Object mapValue) {\r\n    return narrow(mapValue, getMapValueTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getMapValueTypeDescriptor(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getRelatedIfResolvable(ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate TypeDescriptor getRelatedIfResolvable(ResolvableType type) {\r\n    if (type.resolve() == null) {\r\n        return null;\r\n    }\r\n    return new TypeDescriptor(type, null, getAnnotations());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#getRelatedIfResolvable(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#getRelatedIfResolvable(ResolvableType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#narrow(Object,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate TypeDescriptor narrow(@Nullable Object value, @Nullable TypeDescriptor typeDescriptor) {\r\n    if (typeDescriptor != null) {\r\n        return typeDescriptor.narrow(value);\r\n    }\r\n    if (value != null) {\r\n        return narrow(value);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#narrow(Object,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#narrow(Object,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (!(other instanceof TypeDescriptor otherDesc)) {\r\n        return false;\r\n    }\r\n    if (getType() != otherDesc.getType()) {\r\n        return false;\r\n    }\r\n    if (!annotationsMatch(otherDesc)) {\r\n        return false;\r\n    }\r\n    return Arrays.equals(getResolvableType().getGenerics(), otherDesc.getResolvableType().getGenerics());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#annotationsMatch(TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean annotationsMatch(TypeDescriptor otherDesc) {\r\n    Annotation[] anns = getAnnotations();\r\n    Annotation[] otherAnns = otherDesc.getAnnotations();\r\n    if (anns == otherAnns) {\r\n        return true;\r\n    }\r\n    if (anns.length != otherAnns.length) {\r\n        return false;\r\n    }\r\n    if (anns.length > 0) {\r\n        for (int i = 0; i < anns.length; i++) {\r\n            if (!annotationEquals(anns[i], otherAnns[i])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#annotationsMatch(TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#annotationEquals(Annotation,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean annotationEquals(Annotation ann, Annotation otherAnn) {\r\n    // Annotation.equals is reflective and pretty slow, so let's check identity and proxy type first.\r\n    return (ann == otherAnn || (ann.getClass() == otherAnn.getClass() && ann.equals(otherAnn)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#annotationEquals(Annotation,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return getType().hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptor#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptor#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Annotation ann : getAnnotations()) {\r\n        builder.append('@').append(getName(ann.annotationType())).append(' ');\r\n    }\r\n    builder.append(getResolvableType());\r\n    return builder.toString();\r\n}",
    "tailType": "method_code"
  }
]