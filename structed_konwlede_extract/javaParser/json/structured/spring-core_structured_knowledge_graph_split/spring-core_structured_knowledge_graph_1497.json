[
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnInnerClassReturnsParent()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getEnclosingNameOnInnerClassReturnsParent() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Test\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass.getEnclosingClass()).isEqualTo(generatedClass);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnInnerClassReturnsParent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getEnclosingNameOnInnerClassReturnsParent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getNameReturnsName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getNameReturnsName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.getName()).isSameAs(TEST_CLASS_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#getNameReturnsName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getNameReturnsName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesWhenNameUsedThrowsException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reserveMethodNamesWhenNameUsedThrowsException() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThatIllegalStateException().isThrownBy(() -> generatedClass.reserveMethodNames(\"apply\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesWhenNameUsedThrowsException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesWhenNameUsedThrowsException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesReservesNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reserveMethodNamesReservesNames() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    generatedClass.reserveMethodNames(\"apply\");\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"apply\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"apply1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesReservesNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#reserveMethodNamesReservesNames()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#generateMethodNameWhenAllEmptyPartsGeneratesSetName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateMethodNameWhenAllEmptyPartsGeneratesSetName() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedMethod generatedMethod = generatedClass.getMethods().add(\"123\", emptyMethodCustomizer);\r\n    assertThat(generatedMethod.getName()).isEqualTo(\"$$aot\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#generateMethodNameWhenAllEmptyPartsGeneratesSetName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#generateMethodNameWhenAllEmptyPartsGeneratesSetName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getOrAddWhenRepeatReturnsSameGeneratedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getOrAddWhenRepeatReturnsSameGeneratedClass() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    GeneratedClass innerGeneratedClass = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass2 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    GeneratedClass innerGeneratedClass3 = generatedClass.getOrAdd(\"Inner\", emptyTypeCustomizer);\r\n    assertThat(innerGeneratedClass).isSameAs(innerGeneratedClass2).isSameAs(innerGeneratedClass3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#getOrAddWhenRepeatReturnsSameGeneratedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#getOrAddWhenRepeatReturnsSameGeneratedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileIsAnnotatedWithGenerated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateJavaFileIsAnnotatedWithGenerated() {\r\n    GeneratedClass generatedClass = createGeneratedClass(TEST_CLASS_NAME);\r\n    assertThat(generatedClass.generateJavaFile().toString()).contains(\"@Generated\").contains(\"import \" + Generated.class.getName() + \";\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.GeneratedClassTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.GeneratedClassTests#generateJavaFileIsAnnotatedWithGenerated()",
    "tailType": "method"
  }
]