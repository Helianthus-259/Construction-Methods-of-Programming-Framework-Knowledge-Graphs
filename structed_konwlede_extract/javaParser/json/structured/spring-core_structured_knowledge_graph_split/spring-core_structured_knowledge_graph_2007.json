[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#verifyWrittenData(Flux<DataBuffer>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInFlux(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeAsynchronousFileChannelErrorInFlux(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar).concatWith(Mono.error(new RuntimeException()));\r\n    AsynchronousFileChannel channel = AsynchronousFileChannel.open(tempFile, StandardOpenOption.WRITE);\r\n    Flux<DataBuffer> writeResult = DataBufferUtils.write(flux, channel);\r\n    StepVerifier.create(writeResult).consumeNextWith(stringConsumer(\"foo\")).consumeNextWith(stringConsumer(\"bar\")).expectError(RuntimeException.class).verify();\r\n    String result = String.join(\"\", Files.readAllLines(tempFile));\r\n    assertThat(result).isEqualTo(\"foobar\");\r\n    channel.close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInFlux(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInFlux(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInWrite(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeAsynchronousFileChannelErrorInWrite(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar);\r\n    AsynchronousFileChannel channel = mock();\r\n    willAnswer(invocation -> {\r\n        ByteBuffer buffer = invocation.getArgument(0);\r\n        long pos = invocation.getArgument(1);\r\n        assertThat(pos).isEqualTo(0);\r\n        Object attachment = invocation.getArgument(2);\r\n        CompletionHandler<Integer, Object> completionHandler = invocation.getArgument(3);\r\n        int written = buffer.remaining();\r\n        buffer.position(buffer.limit());\r\n        completionHandler.completed(written, attachment);\r\n        return null;\r\n    }).willAnswer(invocation -> {\r\n        Object attachment = invocation.getArgument(2);\r\n        CompletionHandler<Integer, Object> completionHandler = invocation.getArgument(3);\r\n        completionHandler.failed(new IOException(), attachment);\r\n        return null;\r\n    }).given(channel).write(any(), anyLong(), any(), any());\r\n    Flux<DataBuffer> writeResult = DataBufferUtils.write(flux, channel);\r\n    StepVerifier.create(writeResult).consumeNextWith(stringConsumer(\"foo\")).consumeNextWith(stringConsumer(\"bar\")).expectError(IOException.class).verify();\r\n    channel.close();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInWrite(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelErrorInWrite(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelCanceled(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writeAsynchronousFileChannelCanceled(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar);\r\n    AsynchronousFileChannel channel = AsynchronousFileChannel.open(tempFile, StandardOpenOption.WRITE);\r\n    Flux<DataBuffer> writeResult = DataBufferUtils.write(flux, channel);\r\n    StepVerifier.create(writeResult, 1).consumeNextWith(stringConsumer(\"foo\")).thenCancel().verify();\r\n    String result = String.join(\"\", Files.readAllLines(tempFile));\r\n    assertThat(result).isEqualTo(\"foo\");\r\n    channel.close();\r\n    flux.subscribe(DataBufferUtils::release);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelCanceled(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writeAsynchronousFileChannelCanceled(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writePath(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid writePath(DataBufferFactory bufferFactory) throws Exception {\r\n    super.bufferFactory = bufferFactory;\r\n    DataBuffer foo = stringBuffer(\"foo\");\r\n    DataBuffer bar = stringBuffer(\"bar\");\r\n    Flux<DataBuffer> flux = Flux.just(foo, bar);\r\n    Mono<Void> result = DataBufferUtils.write(flux, tempFile);\r\n    StepVerifier.create(result).verifyComplete();\r\n    List<String> written = Files.readAllLines(tempFile);\r\n    assertThat(written).contains(\"foobar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#writePath(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#writePath(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisher(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStreamPublisher(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    byte[] foo = \"foo\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] bar = \"bar\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] baz = \"baz\".getBytes(StandardCharsets.UTF_8);\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(outputStream -> {\r\n        try {\r\n            outputStream.write(foo);\r\n            outputStream.write(bar);\r\n            outputStream.write(baz);\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor());\r\n    StepVerifier.create(publisher).consumeNextWith(stringConsumer(\"foobarbaz\")).verifyComplete();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisher(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisher(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherFlush(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStreamPublisherFlush(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    byte[] foo = \"foo\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] bar = \"bar\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] baz = \"baz\".getBytes(StandardCharsets.UTF_8);\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(outputStream -> {\r\n        try {\r\n            outputStream.write(foo);\r\n            outputStream.flush();\r\n            outputStream.write(bar);\r\n            outputStream.flush();\r\n            outputStream.write(baz);\r\n            outputStream.flush();\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor());\r\n    StepVerifier.create(publisher).consumeNextWith(stringConsumer(\"foo\")).consumeNextWith(stringConsumer(\"bar\")).consumeNextWith(stringConsumer(\"baz\")).verifyComplete();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherFlush(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherFlush(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherChunkSize(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStreamPublisherChunkSize(DataBufferFactory bufferFactory) {\r\n    super.bufferFactory = bufferFactory;\r\n    byte[] foo = \"foo\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] bar = \"bar\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] baz = \"baz\".getBytes(StandardCharsets.UTF_8);\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(outputStream -> {\r\n        try {\r\n            outputStream.write(foo);\r\n            outputStream.write(bar);\r\n            outputStream.write(baz);\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor(), 3);\r\n    StepVerifier.create(publisher).consumeNextWith(stringConsumer(\"foo\")).consumeNextWith(stringConsumer(\"bar\")).consumeNextWith(stringConsumer(\"baz\")).verifyComplete();\r\n}",
    "tailType": "method_code"
  }
]