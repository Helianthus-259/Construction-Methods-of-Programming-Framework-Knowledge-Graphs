[
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#annotationValueMappings",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#annotationValueSource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#annotationValueSource",
    "headType": "field",
    "relation": "haveType",
    "tail": "AnnotationTypeMapping",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#aliasedBy",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#aliasedBy",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Method, List<Method>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#synthesizable",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#synthesizable",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#claimedAliases",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#claimedAliases",
    "headType": "field",
    "relation": "haveType",
    "tail": "Set<Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#merge(List<T>,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static <T> List<T> merge(@Nullable List<T> existing, T element) {\r\n    if (existing == null) {\r\n        return Collections.singletonList(element);\r\n    }\r\n    List<T> merged = new ArrayList<>(existing.size() + 1);\r\n    merged.addAll(existing);\r\n    merged.add(element);\r\n    return Collections.unmodifiableList(merged);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#merge(List<T>,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasedForTargets()",
    "headType": "method",
    "relation": "provide",
    "tail": "private Map<Method, List<Method>> resolveAliasedForTargets() {\r\n    Map<Method, List<Method>> aliasedBy = new HashMap<>();\r\n    for (int i = 0; i < this.attributes.size(); i++) {\r\n        Method attribute = this.attributes.get(i);\r\n        AliasFor aliasFor = AnnotationsScanner.getDeclaredAnnotation(attribute, AliasFor.class);\r\n        if (aliasFor != null) {\r\n            Method target = resolveAliasTarget(attribute, aliasFor);\r\n            aliasedBy.computeIfAbsent(target, key -> new ArrayList<>()).add(attribute);\r\n        }\r\n    }\r\n    return Collections.unmodifiableMap(aliasedBy);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasedForTargets()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasTarget(Method,AliasFor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Method resolveAliasTarget(Method attribute, AliasFor aliasFor) {\r\n    return resolveAliasTarget(attribute, aliasFor, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasTarget(Method,AliasFor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasTarget(Method,AliasFor,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Method resolveAliasTarget(Method attribute, AliasFor aliasFor, boolean checkAliasPair) {\r\n    if (StringUtils.hasText(aliasFor.value()) && StringUtils.hasText(aliasFor.attribute())) {\r\n        throw new AnnotationConfigurationException(String.format(\"In @AliasFor declared on %s, attribute 'attribute' and its alias 'value' \" + \"are present with values of '%s' and '%s', but only one is permitted.\", AttributeMethods.describe(attribute), aliasFor.attribute(), aliasFor.value()));\r\n    }\r\n    Class<? extends Annotation> targetAnnotation = aliasFor.annotation();\r\n    if (targetAnnotation == Annotation.class) {\r\n        targetAnnotation = this.annotationType;\r\n    }\r\n    String targetAttributeName = aliasFor.attribute();\r\n    if (!StringUtils.hasLength(targetAttributeName)) {\r\n        targetAttributeName = aliasFor.value();\r\n    }\r\n    if (!StringUtils.hasLength(targetAttributeName)) {\r\n        targetAttributeName = attribute.getName();\r\n    }\r\n    Method target = AttributeMethods.forAnnotationType(targetAnnotation).get(targetAttributeName);\r\n    if (target == null) {\r\n        if (targetAnnotation == this.annotationType) {\r\n            throw new AnnotationConfigurationException(String.format(\"@AliasFor declaration on %s declares an alias for '%s' which is not present.\", AttributeMethods.describe(attribute), targetAttributeName));\r\n        }\r\n        throw new AnnotationConfigurationException(String.format(\"%s is declared as an @AliasFor nonexistent %s.\", StringUtils.capitalize(AttributeMethods.describe(attribute)), AttributeMethods.describe(targetAnnotation, targetAttributeName)));\r\n    }\r\n    if (target.equals(attribute)) {\r\n        throw new AnnotationConfigurationException(String.format(\"@AliasFor declaration on %s points to itself. \" + \"Specify 'annotation' to point to a same-named attribute on a meta-annotation.\", AttributeMethods.describe(attribute)));\r\n    }\r\n    if (!isCompatibleReturnType(attribute.getReturnType(), target.getReturnType())) {\r\n        throw new AnnotationConfigurationException(String.format(\"Misconfigured aliases: %s and %s must declare the same return type.\", AttributeMethods.describe(attribute), AttributeMethods.describe(target)));\r\n    }\r\n    if (isAliasPair(target) && checkAliasPair) {\r\n        AliasFor targetAliasFor = target.getAnnotation(AliasFor.class);\r\n        if (targetAliasFor != null) {\r\n            Method mirror = resolveAliasTarget(target, targetAliasFor, false);\r\n            if (!mirror.equals(attribute)) {\r\n                throw new AnnotationConfigurationException(String.format(\"%s must be declared as an @AliasFor %s, not %s.\", StringUtils.capitalize(AttributeMethods.describe(target)), AttributeMethods.describe(attribute), AttributeMethods.describe(mirror)));\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#resolveAliasTarget(Method,AliasFor,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#isAliasPair(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isAliasPair(Method target) {\r\n    return (this.annotationType == target.getDeclaringClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationTypeMapping#isAliasPair(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationTypeMapping#isCompatibleReturnType(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private boolean isCompatibleReturnType(Class<?> attributeType, Class<?> targetType) {\r\n    return (attributeType == targetType || attributeType == targetType.componentType());\r\n}",
    "tailType": "method_code"
  }
]