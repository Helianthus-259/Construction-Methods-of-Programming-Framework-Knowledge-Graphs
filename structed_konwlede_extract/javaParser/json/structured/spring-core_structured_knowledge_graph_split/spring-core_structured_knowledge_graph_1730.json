[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithoutAttributeAliases()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithoutAttributeAliases() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(WebController.class).get(Component.class);\r\n    assertThat(annotation.getString(\"value\")).isEqualTo(\"webController\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithoutAttributeAliases()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithoutAttributeAliases()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithNestedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithNestedAnnotations() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ComponentScanClass.class).get(ComponentScan.class);\r\n    MergedAnnotation<Filter>[] filters = annotation.getAnnotationArray(\"excludeFilters\", Filter.class);\r\n    assertThat(Arrays.stream(filters).map(filter -> filter.getString(\"pattern\"))).containsExactly(\"*Foo\", \"*Bar\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithNestedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithNestedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases1()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithAttributeAliases1() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithValueAttribute\");\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method).get(RequestMapping.class);\r\n    assertThat(annotation.getString(\"name\")).isEqualTo(\"foo\");\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"/test\");\r\n    assertThat(annotation.getStringArray(\"path\")).containsExactly(\"/test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases1()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases1()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases2()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithAttributeAliases2() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithPathAttribute\");\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method).get(RequestMapping.class);\r\n    assertThat(annotation.getString(\"name\")).isEqualTo(\"bar\");\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"/test\");\r\n    assertThat(annotation.getStringArray(\"path\")).containsExactly(\"/test\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases2()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliases2()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getDirectWithAttributeAliasesWithDifferentValues() throws Exception {\r\n    Method method = WebController.class.getMethod(\"handleMappedWithDifferentPathAndValueAttributes\");\r\n    assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> MergedAnnotations.from(method).get(RequestMapping.class)).withMessageContaining(\"attribute 'path' and its alias 'value'\").withMessageContaining(\"values of [{/test}] and [{/enigma}]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliasesWithDifferentValues()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getDirectWithAttributeAliasesWithDifferentValues()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValueFromAnnotation() throws Exception {\r\n    Method method = TransactionalStringGeneric.class.getMethod(\"something\", Object.class);\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.getInt(\"value\")).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromNonPublicAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getValueFromNonPublicAnnotation() {\r\n    Annotation[] declaredAnnotations = NonPublicAnnotatedClass.class.getDeclaredAnnotations();\r\n    assertThat(declaredAnnotations).hasSize(1);\r\n    Annotation annotation = declaredAnnotations[0];\r\n    MergedAnnotation<Annotation> mergedAnnotation = MergedAnnotation.from(annotation);\r\n    assertThat(mergedAnnotation.getType().getSimpleName()).isEqualTo(\"NonPublicAnnotation\");\r\n    assertThat(mergedAnnotation.synthesize().annotationType().getSimpleName()).isEqualTo(\"NonPublicAnnotation\");\r\n    assertThat(mergedAnnotation.getInt(\"value\")).isEqualTo(42);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getValueFromNonPublicAnnotation()",
    "tailType": "method"
  }
]