[
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#environment",
    "headType": "field",
    "relation": "haveType",
    "tail": "StandardEnvironment",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessorTests#resourceLoader",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#resourceLoader",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourceLoader",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.PropertySourceProcessorTests#processor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#processor",
    "headType": "field",
    "relation": "haveType",
    "tail": "PropertySourceProcessor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#checkInitialPropertySources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid checkInitialPropertySources() {\r\n    assertThat(environment.getPropertySources()).hasSize(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessorTests#checkInitialPropertySources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#checkInitialPropertySources()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#processorRegistersPropertySource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid processorRegistersPropertySource() throws Exception {\r\n    PropertySourceDescriptor descriptor = new PropertySourceDescriptor(List.of(PROPS_FILE), false, null, DefaultPropertySourceFactory.class, null);\r\n    processor.processPropertySource(descriptor);\r\n    assertThat(environment.getPropertySources()).hasSize(3);\r\n    assertThat(environment.getProperty(\"enigma\")).isEqualTo(\"42\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.PropertySourceProcessorTests#processorRegistersPropertySource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.PropertySourceProcessorTests#processorRegistersPropertySource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.FailOnErrorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests",
    "headType": "class",
    "relation": "use",
    "tail": "@Nested",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.PlaceholderResolutionException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.mockito.Mockito.mock;\n\n/**\n * Tests for {@link PropertySourceProcessor}.\n *\n * @author Sam Brannen\n * @since 6.0.12\n */\nclass PropertySourceProcessorTests {\n\n\tprivate static final String PROPS_FILE = ClassUtils.classPackageAsResourcePath(PropertySourceProcessorTests.class) + \"/test.properties\";\n\n\tprivate final StandardEnvironment environment = new StandardEnvironment();\n\n\tprivate final ResourceLoader resourceLoader = new DefaultResourceLoader();\n\n\tprivate final PropertySourceProcessor processor = new PropertySourceProcessor(environment, resourceLoader);\n\n\n\t@BeforeEach\n\tvoid checkInitialPropertySources() {\n\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t}\n\n\t@Test\n\tvoid processorRegistersPropertySource() throws Exception {\n\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(\n\t\t\t\tList.of(PROPS_FILE), false, null, DefaultPropertySourceFactory.class, null);\n\t\tprocessor.processPropertySource(descriptor);\n\t\tassertThat(environment.getPropertySources()).hasSize(3);\n\t\tassertThat(environment.getProperty(\"enigma\")).isEqualTo(\"42\");\n\t}\n\n\n\t@Nested\n\tclass FailOnErrorTests {\n\n\t\t@Test\n\t\tvoid processorFailsOnPlaceholderResolutionException() {\n\t\t\tassertProcessorFailsOnError(PlaceholderResolutionExceptionPropertySourceFactory.class, PlaceholderResolutionException.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorFailsOnFileNotFoundException() {\n\t\t\tassertProcessorFailsOnError(FileNotFoundExceptionPropertySourceFactory.class, FileNotFoundException.class);\n\t\t}\n\n\t\tprivate void assertProcessorFailsOnError(\n\t\t\t\tClass<? extends PropertySourceFactory> factoryClass, Class<? extends Throwable> exceptionType) {\n\n\t\t\tPropertySourceDescriptor descriptor =\n\t\t\t\t\tnew PropertySourceDescriptor(List.of(PROPS_FILE), false, null, factoryClass, null);\n\t\t\tassertThatExceptionOfType(exceptionType).isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\t@Nested\n\tclass IgnoreResourceNotFoundTests {\n\n\t\t@Test\n\t\tvoid processorIgnoresIllegalArgumentException() {\n\t\t\tassertProcessorIgnoresFailure(PlaceholderResolutionExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresFileNotFoundException() {\n\t\t\tassertProcessorIgnoresFailure(FileNotFoundExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresUnknownHostException() {\n\t\t\tassertProcessorIgnoresFailure(UnknownHostExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSocketException() {\n\t\t\tassertProcessorIgnoresFailure(SocketExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInIllegalStateException() {\n\t\t\tassertProcessorIgnoresFailure(WrappedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\t@Test\n\t\tvoid processorIgnoresSupportedExceptionWrappedInUncheckedIOException() {\n\t\t\tassertProcessorIgnoresFailure(UncheckedIOExceptionPropertySourceFactory.class);\n\t\t}\n\n\t\tprivate void assertProcessorIgnoresFailure(Class<? extends PropertySourceFactory> factoryClass) {\n\t\t\tPropertySourceDescriptor descriptor = new PropertySourceDescriptor(List.of(PROPS_FILE), true, null, factoryClass, null);\n\t\t\tassertThatNoException().isThrownBy(() -> processor.processPropertySource(descriptor));\n\t\t\tassertThat(environment.getPropertySources()).hasSize(2);\n\t\t}\n\t}\n\n\n\tprivate static class PlaceholderResolutionExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow mock(PlaceholderResolutionException.class);\n\t\t}\n\t}\n\n\tprivate static class FileNotFoundExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new FileNotFoundException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class UnknownHostExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new UnknownHostException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class SocketExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException {\n\t\t\tthrow new SocketException(\"bogus\");\n\t\t}\n\t}\n\n\tprivate static class WrappedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new IllegalStateException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n\tprivate static class UncheckedIOExceptionPropertySourceFactory implements PropertySourceFactory {\n\n\t\t@Override\n\t\tpublic PropertySource<?> createPropertySource(String name, EncodedResource resource) {\n\t\t\tthrow new UncheckedIOException(\"Wrapped\", new FileNotFoundException(\"bogus\"));\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnPlaceholderResolutionException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid processorFailsOnPlaceholderResolutionException() {\r\n    assertProcessorFailsOnError(PlaceholderResolutionExceptionPropertySourceFactory.class, PlaceholderResolutionException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnPlaceholderResolutionException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnPlaceholderResolutionException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnFileNotFoundException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid processorFailsOnFileNotFoundException() {\r\n    assertProcessorFailsOnError(FileNotFoundExceptionPropertySourceFactory.class, FileNotFoundException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnFileNotFoundException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.FailOnErrorTests#processorFailsOnFileNotFoundException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]