[
  {
    "head": "org.springframework.cglib.core.ClassEmitter#staticInit",
    "headType": "field",
    "relation": "haveType",
    "tail": "CodeEmitter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ClassEmitter#staticHook",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#staticHook",
    "headType": "field",
    "relation": "haveType",
    "tail": "CodeEmitter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.core.ClassEmitter#staticHookSig",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#staticHookSig",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor cv) {\r\n    this.cv = cv;\r\n    fieldInfo = new HashMap();\r\n    // just to be safe\r\n    staticInit = staticHook = null;\r\n    staticHookSig = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#getNextHook()",
    "headType": "method",
    "relation": "provide",
    "tail": "synchronized private static int getNextHook() {\r\n    return ++hookCounter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#getNextHook()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#getClassInfo()",
    "headType": "method",
    "relation": "provide",
    "tail": "public ClassInfo getClassInfo() {\r\n    return classInfo;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#getClassInfo()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void begin_class(int version, final int access, String className, final Type superType, final Type[] interfaces, String source) {\r\n    final Type classType = Type.getType(\"L\" + className.replace('.', '/') + \";\");\r\n    classInfo = new ClassInfo() {\r\n\r\n        @Override\r\n        public Type getType() {\r\n            return classType;\r\n        }\r\n\r\n        @Override\r\n        public Type getSuperType() {\r\n            return (superType != null) ? superType : Constants.TYPE_OBJECT;\r\n        }\r\n\r\n        @Override\r\n        public Type[] getInterfaces() {\r\n            return interfaces;\r\n        }\r\n\r\n        @Override\r\n        public int getModifiers() {\r\n            return access;\r\n        }\r\n    };\r\n    cv.visit(version, access, classInfo.getType().getInternalName(), null, classInfo.getSuperType().getInternalName(), TypeUtils.toInternalNames(interfaces));\r\n    if (source != null) {\r\n        cv.visitSource(source, null);\r\n    }\r\n    init();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#begin_class(int,int,String,Type,Type[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#getStaticHook()",
    "headType": "method",
    "relation": "provide",
    "tail": "public CodeEmitter getStaticHook() {\r\n    if (TypeUtils.isInterface(getAccess())) {\r\n        throw new IllegalStateException(\"static hook is invalid for this class\");\r\n    }\r\n    if (staticHook == null) {\r\n        staticHookSig = new Signature(\"CGLIB$STATICHOOK\" + getNextHook(), \"()V\");\r\n        staticHook = begin_method(Constants.ACC_STATIC, staticHookSig, null);\r\n        if (staticInit != null) {\r\n            staticInit.invoke_static_this(staticHookSig);\r\n        }\r\n    }\r\n    return staticHook;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#getStaticHook()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#init()",
    "headType": "method",
    "relation": "provide",
    "tail": "protected void init() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#init()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter#getAccess()",
    "headType": "method",
    "relation": "provide",
    "tail": "public int getAccess() {\r\n    return classInfo.getModifiers();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.ClassEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.ClassEmitter#getAccess()",
    "tailType": "method"
  }
]