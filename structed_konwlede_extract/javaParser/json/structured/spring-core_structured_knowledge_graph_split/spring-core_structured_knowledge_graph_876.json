[
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionService#NO_OP_CONVERTER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#NO_OP_CONVERTER",
    "headType": "field",
    "relation": "haveType",
    "tail": "GenericConverter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionService#NO_MATCH",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#NO_MATCH",
    "headType": "field",
    "relation": "haveType",
    "tail": "GenericConverter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionService#converters",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#converters",
    "headType": "field",
    "relation": "haveType",
    "tail": "Converters",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.GenericConversionService#converterCache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#converterCache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<ConverterCacheKey, GenericConverter>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(Converter<?,?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// ConverterRegistry implementation\r\n@Override\r\npublic void addConverter(Converter<?, ?> converter) {\r\n    ResolvableType[] typeInfo = getRequiredTypeInfo(converter.getClass(), Converter.class);\r\n    if (typeInfo == null && converter instanceof DecoratingProxy decoratingProxy) {\r\n        typeInfo = getRequiredTypeInfo(decoratingProxy.getDecoratedClass(), Converter.class);\r\n    }\r\n    if (typeInfo == null) {\r\n        throw new IllegalArgumentException(\"Unable to determine source type <S> and target type <T> for your \" + \"Converter [\" + converter.getClass().getName() + \"]; does the class parameterize those types?\");\r\n    }\r\n    addConverter(new ConverterAdapter(converter, typeInfo[0], typeInfo[1]));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#addConverter(Converter<?,?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(Converter<?,?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(Class<S>,Class<T>,Converter<? super S,? extends T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter) {\r\n    addConverter(new ConverterAdapter(converter, ResolvableType.forClass(sourceType), ResolvableType.forClass(targetType)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#addConverter(Class<S>,Class<T>,Converter<? super S,? extends T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(Class<S>,Class<T>,Converter<? super S,? extends T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(GenericConverter)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void addConverter(GenericConverter converter) {\r\n    this.converters.add(converter);\r\n    invalidateCache();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#addConverter(GenericConverter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverter(GenericConverter)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverterFactory(ConverterFactory<?,?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void addConverterFactory(ConverterFactory<?, ?> factory) {\r\n    ResolvableType[] typeInfo = getRequiredTypeInfo(factory.getClass(), ConverterFactory.class);\r\n    if (typeInfo == null && factory instanceof DecoratingProxy decoratingProxy) {\r\n        typeInfo = getRequiredTypeInfo(decoratingProxy.getDecoratedClass(), ConverterFactory.class);\r\n    }\r\n    if (typeInfo == null) {\r\n        throw new IllegalArgumentException(\"Unable to determine source type <S> and target type <T> for your \" + \"ConverterFactory [\" + factory.getClass().getName() + \"]; does the class parameterize those types?\");\r\n    }\r\n    addConverter(new ConverterFactoryAdapter(factory, new ConvertiblePair(typeInfo[0].toClass(), typeInfo[1].toClass())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#addConverterFactory(ConverterFactory<?,?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#addConverterFactory(ConverterFactory<?,?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]