[
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitTypeAnnotation(typeRef, typePath, desc, visible), cv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.FieldVisitor;\nimport org.springframework.asm.TypePath;\nimport org.springframework.cglib.core.Constants;\n\npublic class FieldVisitorTee extends FieldVisitor {\n    private FieldVisitor fv1, fv2;\n\n    public FieldVisitorTee(FieldVisitor fv1, FieldVisitor fv2) {\n\tsuper(Constants.ASM_API);\n\tthis.fv1 = fv1;\n        this.fv2 = fv2;\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(fv1.visitAnnotation(desc, visible),\n                                                fv2.visitAnnotation(desc, visible));\n    }\n\n    @Override\n\tpublic void visitAttribute(Attribute attr) {\n        fv1.visitAttribute(attr);\n        fv2.visitAttribute(attr);\n    }\n\n    @Override\n\tpublic void visitEnd() {\n        fv1.visitEnd();\n        fv2.visitEnd();\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(fv1.visitTypeAnnotation(typeRef, typePath, desc, visible),\n                                                fv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\n    }\n}\n\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#fv1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#fv1",
    "headType": "field",
    "relation": "haveType",
    "tail": "FieldVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#fv2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#fv2",
    "headType": "field",
    "relation": "haveType",
    "tail": "FieldVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(fv1.visitAnnotation(desc, visible), fv2.visitAnnotation(desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(Attribute attr) {\r\n    fv1.visitAttribute(attr);\r\n    fv2.visitAttribute(attr);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.FieldVisitorTee#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    fv1.visitEnd();\r\n    fv2.visitEnd();\r\n}",
    "tailType": "method_code"
  }
]