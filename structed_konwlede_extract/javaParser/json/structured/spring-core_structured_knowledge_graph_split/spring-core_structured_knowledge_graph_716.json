[
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameter(String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitParameter(String name, int access) {\r\n    mv1.visitParameter(name, access);\r\n    mv2.visitParameter(name, access);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitParameter(String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitParameter(String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitTypeAnnotation(typeRef, typePath, desc, visible), mv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTypeAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs) {\r\n    mv1.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);\r\n    mv2.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInvokeDynamicInsn(String,String,Handle,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitInsnAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitInsnAnnotation(typeRef, typePath, desc, visible), mv2.visitInsnAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitInsnAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitTryCatchAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitTryCatchAnnotation(typeRef, typePath, desc, visible), mv2.visitTryCatchAnnotation(typeRef, typePath, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitTryCatchAnnotation(int,TypePath,String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitLocalVariableAnnotation(int typeRef, TypePath typePath, Label[] start, Label[] end, int[] index, String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(mv1.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, desc, visible), mv2.visitLocalVariableAnnotation(typeRef, typePath, start, end, index, desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee#visitLocalVariableAnnotation(int,TypePath,Label[],Label[],int[],String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.MethodVisitorTee",
    "headType": "class",
    "relation": "extend",
    "tail": "MethodVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  }
]