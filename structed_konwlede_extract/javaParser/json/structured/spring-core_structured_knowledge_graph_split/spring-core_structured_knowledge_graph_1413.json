[
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#set(K,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#setAll(Map<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAll(Map<K, V> values) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#setAll(Map<K,V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#setAll(Map<K,V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replaceAll(BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void replaceAll(BiFunction<? super K, ? super List<V>, ? extends List<V>> function) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#replaceAll(BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replaceAll(BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#remove(Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean remove(Object key, Object value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#remove(Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#remove(Object,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>,List<V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean replace(K key, List<V> oldValue, List<V> newValue) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>,List<V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>,List<V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic List<V> replace(K key, List<V> value) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#replace(K,List<V>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#computeIfAbsent(K,Function<? super K,? extends List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic List<V> computeIfAbsent(K key, Function<? super K, ? extends List<V>> mappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableMultiValueMap#computeIfAbsent(K,Function<? super K,? extends List<V>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#computeIfAbsent(K,Function<? super K,? extends List<V>>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableMultiValueMap#computeIfPresent(K,BiFunction<? super K,? super List<V>,? extends List<V>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic List<V> computeIfPresent(K key, BiFunction<? super K, ? super List<V>, ? extends List<V>> remappingFunction) {\r\n    throw new UnsupportedOperationException();\r\n}",
    "tailType": "method_code"
  }
]