[
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getProperty(String key) {\r\n    return getProperty(key, String.class, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic <T> T getProperty(String key, Class<T> targetValueType) {\r\n    return getProperty(key, targetValueType, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getPropertyAsRawString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\nprotected String getPropertyAsRawString(String key) {\r\n    return getProperty(key, String.class, false);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#getPropertyAsRawString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getPropertyAsRawString(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getPropertyAsRawString(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\r\n    if (this.propertySources != null) {\r\n        for (PropertySource<?> propertySource : this.propertySources) {\r\n            if (logger.isTraceEnabled()) {\r\n                logger.trace(\"Searching for key '\" + key + \"' in PropertySource '\" + propertySource.getName() + \"'\");\r\n            }\r\n            Object value = propertySource.getProperty(key);\r\n            if (value != null) {\r\n                if (resolveNestedPlaceholders) {\r\n                    if (value instanceof String string) {\r\n                        value = resolveNestedPlaceholders(string);\r\n                    } else if ((value instanceof CharSequence cs) && (String.class.equals(targetValueType) || CharSequence.class.equals(targetValueType))) {\r\n                        value = resolveNestedPlaceholders(cs.toString());\r\n                    }\r\n                }\r\n                logKeyFound(key, propertySource, value);\r\n                return convertValueIfNecessary(value, targetValueType);\r\n            }\r\n        }\r\n    }\r\n    if (logger.isTraceEnabled()) {\r\n        logger.trace(\"Could not find key '\" + key + \"' in any property source\");\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#getProperty(String,Class<T>,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver#logKeyFound(String,PropertySource<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log the given key as found in the given {@link PropertySource}, resulting in\r\n * the given value.\r\n * <p>The default implementation writes a debug log message with key and source.\r\n * As of 4.3.3, this does not log the value anymore in order to avoid accidental\r\n * logging of sensitive settings. Subclasses may override this method to change\r\n * the log level and/or log message, including the property's value if desired.\r\n * @param key the key found\r\n * @param propertySource the {@code PropertySource} that the key has been found in\r\n * @param value the corresponding value\r\n * @since 4.3.1\r\n */\r\nprotected void logKeyFound(String key, PropertySource<?> propertySource, Object value) {\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(\"Found key '\" + key + \"' in PropertySource '\" + propertySource.getName() + \"' with value of type \" + value.getClass().getSimpleName());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.PropertySourcesPropertyResolver#logKeyFound(String,PropertySource<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.PropertySourcesPropertyResolver",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractPropertyResolver",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.env",
    "tailType": "package"
  }
]