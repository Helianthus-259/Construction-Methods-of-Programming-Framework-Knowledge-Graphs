[
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#toByteBuf(DataBuffer)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return \"NettyDataBufferFactory (\" + this.byteBufAllocator + \")\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBufferFactory#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBufferFactory#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.buffer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.buffer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.buffer;\n\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Objects;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.locks.LockSupport;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport org.reactivestreams.Subscriber;\nimport org.reactivestreams.Subscription;\n\nimport org.springframework.util.Assert;\n\n/**\n * Bridges between {@link OutputStream} and {@link Publisher Publisher&lt;DataBuffer&gt;}.\n *\n * <p>When there is demand on the Reactive Streams subscription, any write to\n * the OutputStream is mapped to a buffer and published to the subscriber.\n * If there is no demand, writes block until demand materializes.\n * If the subscription is cancelled, further writes raise {@code IOException}.\n *\n * <p>Note that this class has a near duplicate in\n * {@link org.springframework.http.client.OutputStreamPublisher}.\n *\n * @author Oleh Dokuka\n * @author Arjen Poutsma\n * @since 6.1\n * @param <T> the published byte buffer type\n */\nfinal class OutputStreamPublisher<T> implements Publisher<T> {\n\n\tprivate static final int DEFAULT_CHUNK_SIZE = 1024;\n\n\n\tprivate final OutputStreamHandler outputStreamHandler;\n\n\tprivate final ByteMapper<T> byteMapper;\n\n\tprivate final Executor executor;\n\n\tprivate final int chunkSize;\n\n\n\t/**\n\t * Create an instance.\n\t * @param outputStreamHandler invoked when the first buffer is requested\n\t * @param byteMapper maps written bytes to {@code T}\n\t * @param executor used to invoke the {@code outputStreamHandler}\n\t * @param chunkSize the chunk sizes to be produced by the publisher\n\t */\n\tOutputStreamPublisher(\n\t\t\tOutputStreamHandler outputStreamHandler, ByteMapper<T> byteMapper,\n\t\t\tExecutor executor, @Nullable Integer chunkSize) {\n\n\t\tAssert.notNull(outputStreamHandler, \"OutputStreamHandler must not be null\");\n\t\tAssert.notNull(byteMapper, \"ByteMapper must not be null\");\n\t\tAssert.notNull(executor, \"Executor must not be null\");\n\t\tAssert.isTrue(chunkSize == null || chunkSize > 0, \"ChunkSize must be larger than 0\");\n\n\t\tthis.outputStreamHandler = outputStreamHandler;\n\t\tthis.byteMapper = byteMapper;\n\t\tthis.executor = executor;\n\t\tthis.chunkSize = (chunkSize != null ? chunkSize : DEFAULT_CHUNK_SIZE);\n\t}\n\n\n\t@Override\n\tpublic void subscribe(Subscriber<? super T> subscriber) {\n\t\t// We don't use Assert.notNull(), because a NullPointerException is required\n\t\t// for Reactive Streams compliance.\n\t\tObjects.requireNonNull(subscriber, \"Subscriber must not be null\");\n\n\t\tOutputStreamSubscription<T> subscription = new OutputStreamSubscription<>(\n\t\t\t\tsubscriber, this.outputStreamHandler, this.byteMapper, this.chunkSize);\n\n\t\tsubscriber.onSubscribe(subscription);\n\t\tthis.executor.execute(subscription::invokeHandler);\n\t}\n\n\n\t/**\n\t * Contract to provide callback access to the {@link OutputStream}.\n\t */\n\t@FunctionalInterface\n\tpublic interface OutputStreamHandler {\n\n\t\tvoid handle(OutputStream outputStream) throws Exception;\n\n\t}\n\n\n\t/**\n\t * Maps from bytes to byte buffers.\n\t * @param <T> the type of byte buffer to map to\n\t */\n\tpublic interface ByteMapper<T> {\n\n\t\tT map(int b);\n\n\t\tT map(byte[] b, int off, int len);\n\n\t}\n\n\n\tprivate static final class OutputStreamSubscription<T> extends OutputStream implements Subscription {\n\n\t\tprivate static final Object READY = new Object();\n\n\t\tprivate final Subscriber<? super T> actual;\n\n\t\tprivate final OutputStreamHandler outputStreamHandler;\n\n\t\tprivate final ByteMapper<T> byteMapper;\n\n\t\tprivate final int chunkSize;\n\n\t\tprivate final AtomicLong requested = new AtomicLong();\n\n\t\tprivate final AtomicReference<Object> parkedThread = new AtomicReference<>();\n\n\t\tprivate volatile @Nullable Throwable error;\n\n\t\tprivate long produced;\n\n\t\tOutputStreamSubscription(\n\t\t\t\tSubscriber<? super T> actual, OutputStreamHandler outputStreamHandler,\n\t\t\t\tByteMapper<T> byteMapper, int chunkSize) {\n\n\t\t\tthis.actual = actual;\n\t\t\tthis.outputStreamHandler = outputStreamHandler;\n\t\t\tthis.byteMapper = byteMapper;\n\t\t\tthis.chunkSize = chunkSize;\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(int b) throws IOException {\n\t\t\tcheckDemandAndAwaitIfNeeded();\n\t\t\tT next = this.byteMapper.map(b);\n\t\t\tthis.actual.onNext(next);\n\t\t\tthis.produced++;\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(byte[] b) throws IOException {\n\t\t\twrite(b, 0, b.length);\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(byte[] b, int off, int len) throws IOException {\n\t\t\tcheckDemandAndAwaitIfNeeded();\n\t\t\tT next = this.byteMapper.map(b, off, len);\n\t\t\tthis.actual.onNext(next);\n\t\t\tthis.produced++;\n\t\t}\n\n\t\tprivate void checkDemandAndAwaitIfNeeded() throws IOException {\n\t\t\tlong r = this.requested.get();\n\n\t\t\tif (isTerminated(r) || isCancelled(r)) {\n\t\t\t\tthrow new IOException(\"Subscription has been terminated\");\n\t\t\t}\n\n\t\t\tlong p = this.produced;\n\t\t\tif (p == r) {\n\t\t\t\tif (p > 0) {\n\t\t\t\t\tr = tryProduce(p);\n\t\t\t\t\tthis.produced = 0;\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (isTerminated(r) || isCancelled(r)) {\n\t\t\t\t\t\tthrow new IOException(\"Subscription has been terminated\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (r != 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait();\n\n\t\t\t\t\tr = this.requested.get();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate void invokeHandler() {\n\t\t\t// assume sync write within try-with-resource block\n\n\t\t\t// use BufferedOutputStream, so that written bytes are buffered\n\t\t\t// before publishing as byte buffer\n\t\t\ttry (OutputStream outputStream = new BufferedOutputStream(this, this.chunkSize)) {\n\t\t\t\tthis.outputStreamHandler.handle(outputStream);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlong previousState = tryTerminate();\n\t\t\t\tif (isCancelled(previousState)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isTerminated(previousState)) {\n\t\t\t\t\t// failure due to illegal requestN\n\t\t\t\t\tThrowable error = this.error;\n\t\t\t\t\tif (error != null) {\n\t\t\t\t\t\tthis.actual.onError(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.actual.onError(ex);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlong previousState = tryTerminate();\n\t\t\tif (isCancelled(previousState)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isTerminated(previousState)) {\n\t\t\t\t// failure due to illegal requestN\n\t\t\t\tThrowable error = this.error;\n\t\t\t\tif (error != null) {\n\t\t\t\t\tthis.actual.onError(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.actual.onComplete();\n\t\t}\n\n\n\t\t@Override\n\t\tpublic void request(long n) {\n\t\t\tif (n <= 0) {\n\t\t\t\tthis.error = new IllegalArgumentException(\"request should be a positive number\");\n\t\t\t\tlong previousState = tryTerminate();\n\t\t\t\tif (isTerminated(previousState) || isCancelled(previousState)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (previousState > 0) {\n\t\t\t\t\t// error should eventually be observed and propagated\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// resume parked thread, so it can observe error and propagate it\n\t\t\t\tresume();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (addCap(n) == 0) {\n\t\t\t\t// resume parked thread so it can continue the work\n\t\t\t\tresume();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void cancel() {\n\t\t\tlong previousState = tryCancel();\n\t\t\tif (isCancelled(previousState) || previousState > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// resume parked thread, so it can be unblocked and close all the resources\n\t\t\tresume();\n\t\t}\n\n\t\tprivate void await() {\n\t\t\tThread toUnpark = Thread.currentThread();\n\n\t\t\twhile (true) {\n\t\t\t\tObject current = this.parkedThread.get();\n\t\t\t\tif (current == READY) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (current != null && current != toUnpark) {\n\t\t\t\t\tthrow new IllegalStateException(\"Only one (Virtual)Thread can await!\");\n\t\t\t\t}\n\n\t\t\t\tif (this.parkedThread.compareAndSet(null, toUnpark)) {\n\t\t\t\t\tLockSupport.park();\n\t\t\t\t\t// we don't just break here because park() can wake up spuriously\n\t\t\t\t\t// if we got a proper resume, get() == READY and the loop will quit above\n\t\t\t\t}\n\t\t\t}\n\t\t\t// clear the resume indicator so that the next await call will park without a resume()\n\t\t\tthis.parkedThread.lazySet(null);\n\t\t}\n\n\t\tprivate void resume() {\n\t\t\tif (this.parkedThread.get() != READY) {\n\t\t\t\tObject old = this.parkedThread.getAndSet(READY);\n\t\t\t\tif (old != READY) {\n\t\t\t\t\tLockSupport.unpark((Thread)old);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate long tryCancel() {\n\t\t\twhile (true) {\n\t\t\t\tlong r = this.requested.get();\n\t\t\t\tif (isCancelled(r)) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\tif (this.requested.compareAndSet(r, Long.MIN_VALUE)) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate long tryTerminate() {\n\t\t\twhile (true) {\n\t\t\t\tlong r = this.requested.get();\n\t\t\t\tif (isCancelled(r) || isTerminated(r)) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\tif (this.requested.compareAndSet(r, Long.MIN_VALUE | Long.MAX_VALUE)) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate long tryProduce(long n) {\n\t\t\twhile (true) {\n\t\t\t\tlong current = this.requested.get();\n\t\t\t\tif (isTerminated(current) || isCancelled(current)) {\n\t\t\t\t\treturn current;\n\t\t\t\t}\n\t\t\t\tif (current == Long.MAX_VALUE) {\n\t\t\t\t\treturn Long.MAX_VALUE;\n\t\t\t\t}\n\t\t\t\tlong update = current - n;\n\t\t\t\tif (update < 0L) {\n\t\t\t\t\tupdate = 0L;\n\t\t\t\t}\n\t\t\t\tif (this.requested.compareAndSet(current, update)) {\n\t\t\t\t\treturn update;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate long addCap(long n) {\n\t\t\twhile (true) {\n\t\t\t\tlong r = this.requested.get();\n\t\t\t\tif (isTerminated(r) || isCancelled(r) || r == Long.MAX_VALUE) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\tlong u = addCap(r, n);\n\t\t\t\tif (this.requested.compareAndSet(r, u)) {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate static boolean isTerminated(long state) {\n\t\t\treturn state == (Long.MIN_VALUE | Long.MAX_VALUE);\n\t\t}\n\n\t\tprivate static boolean isCancelled(long state) {\n\t\t\treturn state == Long.MIN_VALUE;\n\t\t}\n\n\t\tprivate static long addCap(long a, long b) {\n\t\t\tlong res = a + b;\n\t\t\tif (res < 0L) {\n\t\t\t\treturn Long.MAX_VALUE;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#DEFAULT_CHUNK_SIZE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#DEFAULT_CHUNK_SIZE",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#outputStreamHandler",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#outputStreamHandler",
    "headType": "field",
    "relation": "haveType",
    "tail": "OutputStreamHandler",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#byteMapper",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#byteMapper",
    "headType": "field",
    "relation": "haveType",
    "tail": "ByteMapper<T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#executor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#executor",
    "headType": "field",
    "relation": "haveType",
    "tail": "Executor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#chunkSize",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#chunkSize",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#subscribe(Subscriber<? super T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void subscribe(Subscriber<? super T> subscriber) {\r\n    // We don't use Assert.notNull(), because a NullPointerException is required\r\n    // for Reactive Streams compliance.\r\n    Objects.requireNonNull(subscriber, \"Subscriber must not be null\");\r\n    OutputStreamSubscription<T> subscription = new OutputStreamSubscription<>(subscriber, this.outputStreamHandler, this.byteMapper, this.chunkSize);\r\n    subscriber.onSubscribe(subscription);\r\n    this.executor.execute(subscription::invokeHandler);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.OutputStreamPublisher#subscribe(Subscriber<? super T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.OutputStreamPublisher#subscribe(Subscriber<? super T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]