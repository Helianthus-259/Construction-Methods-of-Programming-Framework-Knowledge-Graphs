[
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConversionForAllTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid conditionalConversionForAllTypes() {\r\n    MyConditionalGenericConverter converter = new MyConditionalGenericConverter();\r\n    conversionService.addConverter(converter);\r\n    assertThat(conversionService.convert(3, Integer.class)).isEqualTo(3);\r\n    assertThat(converter.getSourceTypes()).hasSizeGreaterThan(2);\r\n    assertThat(converter.getSourceTypes().stream().allMatch(td -> Integer.class.equals(td.getType()))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConversionForAllTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#conditionalConversionForAllTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertOptimizeArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "// gh-14200, SPR-9566\r\n@Test\r\nvoid convertOptimizeArray() {\r\n    byte[] byteArray = new byte[] { 1, 2, 3 };\r\n    byte[] converted = conversionService.convert(byteArray, byte[].class);\r\n    assertThat(converted).isSameAs(byteArray);\r\n    assertThat(converted).containsExactly(1, 2, 3);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#convertOptimizeArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#convertOptimizeArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#enumToStringConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enumToStringConversion() {\r\n    conversionService.addConverter(new EnumToStringConverter(conversionService));\r\n    assertThat(conversionService.convert(MyEnum.A, String.class)).isEqualTo(\"A\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#enumToStringConversion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#enumToStringConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#subclassOfEnumToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid subclassOfEnumToString() {\r\n    conversionService.addConverter(new EnumToStringConverter(conversionService));\r\n    assertThat(conversionService.convert(EnumWithSubclass.FIRST, String.class)).isEqualTo(\"FIRST\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#subclassOfEnumToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#subclassOfEnumToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#enumWithInterfaceToStringConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid enumWithInterfaceToStringConversion() {\r\n    // SPR-9692\r\n    conversionService.addConverter(new EnumToStringConverter(conversionService));\r\n    conversionService.addConverter(new MyEnumInterfaceToStringConverter<>());\r\n    assertThat(conversionService.convert(MyEnum.A, String.class)).isEqualTo(\"1\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#enumWithInterfaceToStringConversion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#enumWithInterfaceToStringConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithInterfaceConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumWithInterfaceConversion() {\r\n    conversionService.addConverterFactory(new StringToEnumConverterFactory());\r\n    conversionService.addConverterFactory(new StringToMyEnumInterfaceConverterFactory());\r\n    assertThat(conversionService.convert(\"1\", MyEnum.class)).isEqualTo(MyEnum.A);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithInterfaceConversion()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithInterfaceConversion()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithBaseInterfaceConversion()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stringToEnumWithBaseInterfaceConversion() {\r\n    conversionService.addConverterFactory(new StringToEnumConverterFactory());\r\n    conversionService.addConverterFactory(new StringToMyEnumBaseInterfaceConverterFactory());\r\n    assertThat(conversionService.convert(\"base1\", MyEnum.class)).isEqualTo(MyEnum.A);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionServiceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionServiceTests#stringToEnumWithBaseInterfaceConversion()",
    "tailType": "method"
  }
]