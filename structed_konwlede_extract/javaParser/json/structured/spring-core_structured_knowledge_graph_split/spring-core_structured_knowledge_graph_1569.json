[
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceWithUnsupportedResourceType() {\r\n    DescriptiveResource resource = new DescriptiveResource(\"bogus\");\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.resourceHints.registerResource(resource)).withMessage(\"Resource must be a ClassPathResource that exists: %s\", resource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithUnsupportedResourceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceWithNonexistentClassPathResource() {\r\n    ClassPathResource resource = new ClassPathResource(\"bogus\", getClass());\r\n    assertThatIllegalArgumentException().isThrownBy(() -> this.resourceHints.registerResource(resource)).withMessage(\"Resource must be a ClassPathResource that exists: %s\", resource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithNonexistentClassPathResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceWithExistingClassPathResource() {\r\n    String path = \"org/springframework/aot/hint/support\";\r\n    ClassPathResource resource = new ClassPathResource(path);\r\n    this.resourceHints.registerResource(resource);\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\", \"org\", \"org/springframework\", \"org/springframework/aot\", \"org/springframework/aot/hint\", path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingClassPathResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceWithExistingRelativeClassPathResource() {\r\n    String path = \"org/springframework/aot/hint/support\";\r\n    ClassPathResource resource = new ClassPathResource(\"support\", RuntimeHints.class);\r\n    this.resourceHints.registerResource(resource);\r\n    assertThat(this.resourceHints.resourcePatternHints()).singleElement().satisfies(patternOf(\"/\", \"org\", \"org/springframework\", \"org/springframework/aot\", \"org/springframework/aot/hint\", path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceWithExistingRelativeClassPathResource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundle()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceBundle() {\r\n    this.resourceHints.registerResourceBundle(\"com.example.message\");\r\n    assertThat(this.resourceHints.resourceBundleHints()).singleElement().satisfies(resourceBundle(\"com.example.message\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundle()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundle()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundleSeveralTimesAddsOneEntry()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerResourceBundleSeveralTimesAddsOneEntry() {\r\n    this.resourceHints.registerResourceBundle(\"com.example.message\").registerResourceBundle(\"com.example.message\");\r\n    assertThat(this.resourceHints.resourceBundleHints()).singleElement().satisfies(resourceBundle(\"com.example.message\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundleSeveralTimesAddsOneEntry()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#registerResourceBundleSeveralTimesAddsOneEntry()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests#patternOf(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Consumer<ResourcePatternHints> patternOf(String... includes) {\r\n    return patternOf(Arrays.asList(includes), Collections.emptyList());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourceHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourceHintsTests#patternOf(String)",
    "tailType": "method"
  }
]