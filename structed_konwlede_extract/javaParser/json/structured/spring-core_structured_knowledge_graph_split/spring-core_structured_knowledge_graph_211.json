[
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n */\nclass DigestUtilsTests {\n\n\tprivate byte[] bytes;\n\n\n\t@BeforeEach\n\tvoid createBytes() throws UnsupportedEncodingException {\n\t\tbytes = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n\t}\n\n\n\t@Test\n\tvoid md5() throws IOException {\n\t\tbyte[] expected = new byte[]\n\t\t\t\t{-0x4f, 0xa, -0x73, -0x4f, 0x64, -0x20, 0x75, 0x41, 0x5, -0x49, -0x57, -0x65, -0x19, 0x2e, 0x3f, -0x1b};\n\n\t\tbyte[] result = DigestUtils.md5Digest(bytes);\n\t\tassertThat(result).as(\"Invalid hash\").isEqualTo(expected);\n\n\t\tresult = DigestUtils.md5Digest(new ByteArrayInputStream(bytes));\n\t\tassertThat(result).as(\"Invalid hash\").isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid md5Hex() throws IOException {\n\t\tString expected = \"b10a8db164e0754105b7a99be72e3fe5\";\n\n\t\tString hash = DigestUtils.md5DigestAsHex(bytes);\n\t\tassertThat(hash).as(\"Invalid hash\").isEqualTo(expected);\n\n\t\thash = DigestUtils.md5DigestAsHex(new ByteArrayInputStream(bytes));\n\t\tassertThat(hash).as(\"Invalid hash\").isEqualTo(expected);\n\t}\n\n\t@Test\n\tvoid md5StringBuilder() throws IOException {\n\t\tString expected = \"b10a8db164e0754105b7a99be72e3fe5\";\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\tDigestUtils.appendMd5DigestAsHex(bytes, builder);\n\t\tassertThat(builder.toString()).as(\"Invalid hash\").isEqualTo(expected);\n\n\t\tbuilder = new StringBuilder();\n\t\tDigestUtils.appendMd5DigestAsHex(new ByteArrayInputStream(bytes), builder);\n\t\tassertThat(builder.toString()).as(\"Invalid hash\").isEqualTo(expected);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.DigestUtilsTests#bytes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#bytes",
    "headType": "field",
    "relation": "haveType",
    "tail": "byte",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#createBytes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@BeforeEach\r\nvoid createBytes() throws UnsupportedEncodingException {\r\n    bytes = \"Hello World\".getBytes(StandardCharsets.UTF_8);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtilsTests#createBytes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#createBytes()",
    "headType": "method",
    "relation": "use",
    "tail": "@BeforeEach",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid md5() throws IOException {\r\n    byte[] expected = new byte[] { -0x4f, 0xa, -0x73, -0x4f, 0x64, -0x20, 0x75, 0x41, 0x5, -0x49, -0x57, -0x65, -0x19, 0x2e, 0x3f, -0x1b };\r\n    byte[] result = DigestUtils.md5Digest(bytes);\r\n    assertThat(result).as(\"Invalid hash\").isEqualTo(expected);\r\n    result = DigestUtils.md5Digest(new ByteArrayInputStream(bytes));\r\n    assertThat(result).as(\"Invalid hash\").isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtilsTests#md5()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5Hex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid md5Hex() throws IOException {\r\n    String expected = \"b10a8db164e0754105b7a99be72e3fe5\";\r\n    String hash = DigestUtils.md5DigestAsHex(bytes);\r\n    assertThat(hash).as(\"Invalid hash\").isEqualTo(expected);\r\n    hash = DigestUtils.md5DigestAsHex(new ByteArrayInputStream(bytes));\r\n    assertThat(hash).as(\"Invalid hash\").isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtilsTests#md5Hex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5Hex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5StringBuilder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid md5StringBuilder() throws IOException {\r\n    String expected = \"b10a8db164e0754105b7a99be72e3fe5\";\r\n    StringBuilder builder = new StringBuilder();\r\n    DigestUtils.appendMd5DigestAsHex(bytes, builder);\r\n    assertThat(builder.toString()).as(\"Invalid hash\").isEqualTo(expected);\r\n    builder = new StringBuilder();\r\n    DigestUtils.appendMd5DigestAsHex(new ByteArrayInputStream(bytes), builder);\r\n    assertThat(builder.toString()).as(\"Invalid hash\").isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.DigestUtilsTests#md5StringBuilder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.DigestUtilsTests#md5StringBuilder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SimpleTypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.List;\n\nimport javax.lang.model.SourceVersion;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A {@link TypeReference} based on fully qualified name.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\nfinal class SimpleTypeReference extends AbstractTypeReference {\n\n\tprivate static final List<String> PRIMITIVE_NAMES = List.of(\"boolean\", \"byte\",\n\t\t\t\"short\", \"int\", \"long\", \"char\", \"float\", \"double\", \"void\");\n\n\tprivate @Nullable String canonicalName;\n\n\tSimpleTypeReference(String packageName, String simpleName, @Nullable TypeReference enclosingType) {\n\t\tsuper(packageName, simpleName, enclosingType);\n\t}\n\n\tstatic SimpleTypeReference of(String className) {\n\t\tAssert.notNull(className, \"'className' must not be null\");\n\t\tif (!isValidClassName(className)) {\n\t\t\tthrow new IllegalStateException(\"Invalid class name '\" + className + \"'\");\n\t\t}\n\t\tif (!className.contains(\"$\")) {\n\t\t\treturn createTypeReference(className);\n\t\t}\n\t\tString[] elements = className.split(\"(?<!\\\\$)\\\\$(?!\\\\$)\");\n\t\tSimpleTypeReference typeReference = createTypeReference(elements[0]);\n\t\tfor (int i = 1; i < elements.length; i++) {\n\t\t\ttypeReference = new SimpleTypeReference(typeReference.getPackageName(), elements[i], typeReference);\n\t\t}\n\t\treturn typeReference;\n\t}\n\n\tprivate static boolean isValidClassName(String className) {\n\t\tfor (String s : className.split(\"\\\\.\", -1)) {\n\t\t\tString candidate = s.replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tif (!SourceVersion.isIdentifier(candidate)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static SimpleTypeReference createTypeReference(String className) {\n\t\tint i = className.lastIndexOf('.');\n\t\tif (i != -1) {\n\t\t\treturn new SimpleTypeReference(className.substring(0, i), className.substring(i + 1), null);\n\t\t}\n\t\telse {\n\t\t\tString packageName = (isPrimitive(className) ? \"java.lang\" : \"\");\n\t\t\treturn new SimpleTypeReference(packageName, className, null);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getCanonicalName() {\n\t\tif (this.canonicalName == null) {\n\t\t\tStringBuilder names = new StringBuilder();\n\t\t\tbuildName(this, names);\n\t\t\tthis.canonicalName = addPackageIfNecessary(names.toString());\n\t\t}\n\t\treturn this.canonicalName;\n\t}\n\n\t@Override\n\tprotected boolean isPrimitive() {\n\t\treturn isPrimitive(getSimpleName());\n\t}\n\n\tprivate static boolean isPrimitive(String name) {\n\t\treturn PRIMITIVE_NAMES.stream().anyMatch(name::startsWith);\n\t}\n\n\tprivate static void buildName(@Nullable TypeReference type, StringBuilder sb) {\n\t\tif (type == null) {\n\t\t\treturn;\n\t\t}\n\t\tString typeName = (type.getEnclosingType() != null ? \".\" + type.getSimpleName() : type.getSimpleName());\n\t\tsb.insert(0, typeName);\n\t\tbuildName(type.getEnclosingType(), sb);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.SimpleTypeReference#PRIMITIVE_NAMES",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.SimpleTypeReference#PRIMITIVE_NAMES",
    "headType": "field",
    "relation": "haveType",
    "tail": "List<String>",
    "tailType": "type"
  }
]