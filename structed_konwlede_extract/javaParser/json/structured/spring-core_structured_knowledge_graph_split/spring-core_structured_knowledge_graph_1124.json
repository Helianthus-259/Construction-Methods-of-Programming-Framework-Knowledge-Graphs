[
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#getOrder(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparator#findOrder(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find an order value indicated by the given object.\r\n * <p>The default implementation checks against the {@link Ordered} interface.\r\n * Can be overridden in subclasses.\r\n * @param obj the object to check\r\n * @return the order value, or {@code null} if none found\r\n */\r\n@Nullable\r\nprotected Integer findOrder(Object obj) {\r\n    return (obj instanceof Ordered ordered ? ordered.getOrder() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#findOrder(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparator#findOrder(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OrderComparator#getPriority(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine a priority value for the given object, if any.\r\n * <p>The default implementation always returns {@code null}.\r\n * Subclasses may override this to give specific kinds of values a\r\n * 'priority' characteristic, in addition to their 'order' semantics.\r\n * A priority indicates that it may be used for selecting one object over\r\n * another, in addition to serving for ordering purposes in a list/array.\r\n * @param obj the object to check\r\n * @return the priority value, or {@code null} if none\r\n * @since 4.1\r\n */\r\n@Nullable\r\npublic Integer getPriority(Object obj) {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#getPriority(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparator#getPriority(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OrderComparator#sort(List<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given List with a default OrderComparator.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param list the List to sort\r\n * @see java.util.List#sort(java.util.Comparator)\r\n */\r\npublic static void sort(List<?> list) {\r\n    if (list.size() > 1) {\r\n        list.sort(INSTANCE);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#sort(List<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparator#sort(Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given array with a default OrderComparator.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param array the array to sort\r\n * @see java.util.Arrays#sort(Object[], java.util.Comparator)\r\n */\r\npublic static void sort(Object[] array) {\r\n    if (array.length > 1) {\r\n        Arrays.sort(array, INSTANCE);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#sort(Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderComparator#sortIfNecessary(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Sort the given array or List with a default OrderComparator,\r\n * if necessary. Simply skips sorting when given any other value.\r\n * <p>Optimized to skip sorting for lists with size 0 or 1,\r\n * in order to avoid unnecessary array extraction.\r\n * @param value the array or List to sort\r\n * @see java.util.Arrays#sort(Object[], java.util.Comparator)\r\n */\r\npublic static void sortIfNecessary(Object value) {\r\n    if (value instanceof Object[] objects) {\r\n        sort(objects);\r\n    } else if (value instanceof List<?> list) {\r\n        sort(list);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderComparator#sortIfNecessary(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.OrderSourceProvider",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.OrderSourceProvider",
    "headType": "class",
    "relation": "use",
    "tail": "@FunctionalInterface",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.OrderSourceProvider",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ObjectUtils;\n\n/**\n * {@link Comparator} implementation for {@link Ordered} objects, sorting\n * by order value ascending, respectively by priority descending.\n *\n * <h3>{@code PriorityOrdered} Objects</h3>\n * <p>{@link PriorityOrdered} objects will be sorted with higher priority than\n * <em>plain</em> {@code Ordered} objects.\n *\n * <h3>Same Order Objects</h3>\n * <p>Objects that have the same order value will be sorted with arbitrary\n * ordering with respect to other objects with the same order value.\n *\n * <h3>Non-ordered Objects</h3>\n * <p>Any object that does not provide its own order value is implicitly\n * assigned a value of {@link Ordered#LOWEST_PRECEDENCE}, thus ending up\n * at the end of a sorted collection in arbitrary order with respect to\n * other objects with the same order value.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 07.04.2003\n * @see Ordered\n * @see PriorityOrdered\n * @see org.springframework.core.annotation.AnnotationAwareOrderComparator\n * @see java.util.List#sort(java.util.Comparator)\n * @see java.util.Arrays#sort(Object[], java.util.Comparator)\n */\npublic class OrderComparator implements Comparator<Object> {\n\n\t/**\n\t * Shared default instance of {@code OrderComparator}.\n\t */\n\tpublic static final OrderComparator INSTANCE = new OrderComparator();\n\n\n\t/**\n\t * Build an adapted order comparator with the given source provider.\n\t * @param sourceProvider the order source provider to use\n\t * @return the adapted comparator\n\t * @since 4.1\n\t */\n\tpublic Comparator<Object> withSourceProvider(OrderSourceProvider sourceProvider) {\n\t\treturn (o1, o2) -> doCompare(o1, o2, sourceProvider);\n\t}\n\n\t@Override\n\tpublic int compare(@Nullable Object o1, @Nullable Object o2) {\n\t\treturn doCompare(o1, o2, null);\n\t}\n\n\tprivate int doCompare(@Nullable Object o1, @Nullable Object o2, @Nullable OrderSourceProvider sourceProvider) {\n\t\tboolean p1 = (o1 instanceof PriorityOrdered);\n\t\tboolean p2 = (o2 instanceof PriorityOrdered);\n\t\tif (p1 && !p2) {\n\t\t\treturn -1;\n\t\t}\n\t\telse if (p2 && !p1) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tint i1 = getOrder(o1, sourceProvider);\n\t\tint i2 = getOrder(o2, sourceProvider);\n\t\treturn Integer.compare(i1, i2);\n\t}\n\n\t/**\n\t * Determine the order value for the given object.\n\t * <p>The default implementation checks against the given {@link OrderSourceProvider}\n\t * using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call.\n\t * @param obj the object to check\n\t * @return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback\n\t */\n\tprivate int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {\n\t\tInteger order = null;\n\t\tif (obj != null && sourceProvider != null) {\n\t\t\tObject orderSource = sourceProvider.getOrderSource(obj);\n\t\t\tif (orderSource != null) {\n\t\t\t\tif (orderSource.getClass().isArray()) {\n\t\t\t\t\tfor (Object source : ObjectUtils.toObjectArray(orderSource)) {\n\t\t\t\t\t\torder = findOrder(source);\n\t\t\t\t\t\tif (order != null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\torder = findOrder(orderSource);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (order != null ? order : getOrder(obj));\n\t}\n\n\t/**\n\t * Determine the order value for the given object.\n\t * <p>The default implementation checks against the {@link Ordered} interface\n\t * through delegating to {@link #findOrder}. Can be overridden in subclasses.\n\t * @param obj the object to check\n\t * @return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback\n\t */\n\tprotected int getOrder(@Nullable Object obj) {\n\t\tif (obj != null) {\n\t\t\tInteger order = findOrder(obj);\n\t\t\tif (order != null) {\n\t\t\t\treturn order;\n\t\t\t}\n\t\t}\n\t\treturn Ordered.LOWEST_PRECEDENCE;\n\t}\n\n\t/**\n\t * Find an order value indicated by the given object.\n\t * <p>The default implementation checks against the {@link Ordered} interface.\n\t * Can be overridden in subclasses.\n\t * @param obj the object to check\n\t * @return the order value, or {@code null} if none found\n\t */\n\tprotected @Nullable Integer findOrder(Object obj) {\n\t\treturn (obj instanceof Ordered ordered ? ordered.getOrder() : null);\n\t}\n\n\t/**\n\t * Determine a priority value for the given object, if any.\n\t * <p>The default implementation always returns {@code null}.\n\t * Subclasses may override this to give specific kinds of values a\n\t * 'priority' characteristic, in addition to their 'order' semantics.\n\t * A priority indicates that it may be used for selecting one object over\n\t * another, in addition to serving for ordering purposes in a list/array.\n\t * @param obj the object to check\n\t * @return the priority value, or {@code null} if none\n\t * @since 4.1\n\t */\n\tpublic @Nullable Integer getPriority(Object obj) {\n\t\treturn null;\n\t}\n\n\n\t/**\n\t * Sort the given List with a default OrderComparator.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param list the List to sort\n\t * @see java.util.List#sort(java.util.Comparator)\n\t */\n\tpublic static void sort(List<?> list) {\n\t\tif (list.size() > 1) {\n\t\t\tlist.sort(INSTANCE);\n\t\t}\n\t}\n\n\t/**\n\t * Sort the given array with a default OrderComparator.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param array the array to sort\n\t * @see java.util.Arrays#sort(Object[], java.util.Comparator)\n\t */\n\tpublic static void sort(Object[] array) {\n\t\tif (array.length > 1) {\n\t\t\tArrays.sort(array, INSTANCE);\n\t\t}\n\t}\n\n\t/**\n\t * Sort the given array or List with a default OrderComparator,\n\t * if necessary. Simply skips sorting when given any other value.\n\t * <p>Optimized to skip sorting for lists with size 0 or 1,\n\t * in order to avoid unnecessary array extraction.\n\t * @param value the array or List to sort\n\t * @see java.util.Arrays#sort(Object[], java.util.Comparator)\n\t */\n\tpublic static void sortIfNecessary(Object value) {\n\t\tif (value instanceof Object[] objects) {\n\t\t\tsort(objects);\n\t\t}\n\t\telse if (value instanceof List<?> list) {\n\t\t\tsort(list);\n\t\t}\n\t}\n\n\n\t/**\n\t * Strategy interface to provide an order source for a given object.\n\t * @since 4.1\n\t */\n\t@FunctionalInterface\n\tpublic interface OrderSourceProvider {\n\n\t\t/**\n\t\t * Return an order source for the specified object, i.e. an object that\n\t\t * should be checked for an order value as a replacement to the given object.\n\t\t * <p>Can also be an array of order source objects.\n\t\t * <p>If the returned object does not indicate any order, the comparator\n\t\t * will fall back to checking the original object.\n\t\t * @param obj the object to find an order source for\n\t\t * @return the order source for that object, or {@code null} if none found\n\t\t */\n\t\t@Nullable Object getOrderSource(Object obj);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.OrderSourceProvider#getOrderSource(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return an order source for the specified object, i.e. an object that\r\n * should be checked for an order value as a replacement to the given object.\r\n * <p>Can also be an array of order source objects.\r\n * <p>If the returned object does not indicate any order, the comparator\r\n * will fall back to checking the original object.\r\n * @param obj the object to find an order source for\r\n * @return the order source for that object, or {@code null} if none found\r\n */\r\n@Nullable\r\nObject getOrderSource(Object obj);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.OrderSourceProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.OrderSourceProvider#getOrderSource(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.OrderSourceProvider#getOrderSource(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  }
]