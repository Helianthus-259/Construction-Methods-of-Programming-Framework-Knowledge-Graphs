[
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return this.converters.toString();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convertNullSource(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Protected template methods\r\n/**\r\n * Template method to convert a {@code null} source.\r\n * <p>The default implementation returns {@code null} or the Java 8\r\n * {@link java.util.Optional#empty()} instance if the target type is\r\n * {@code java.util.Optional}. Subclasses may override this to return\r\n * custom {@code null} objects for specific target types.\r\n * @param sourceType the source type to convert from\r\n * @param targetType the target type to convert to\r\n * @return the converted null object\r\n */\r\n@Nullable\r\nprotected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (targetType.getObjectType() == Optional.class) {\r\n        return Optional.empty();\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#convertNullSource(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#convertNullSource(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#getConverter(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Hook method to look up the converter for a given sourceType/targetType pair.\r\n * First queries this ConversionService's converter cache.\r\n * On a cache miss, then performs an exhaustive search for a matching converter.\r\n * If no converter matches, returns the default converter.\r\n * @param sourceType the source type to convert from\r\n * @param targetType the target type to convert to\r\n * @return the generic converter that will perform the conversion,\r\n * or {@code null} if no suitable converter was found\r\n * @see #getDefaultConverter(TypeDescriptor, TypeDescriptor)\r\n */\r\n@Nullable\r\nprotected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);\r\n    GenericConverter converter = this.converterCache.get(key);\r\n    if (converter != null) {\r\n        return (converter != NO_MATCH ? converter : null);\r\n    }\r\n    converter = this.converters.find(sourceType, targetType);\r\n    if (converter == null) {\r\n        converter = getDefaultConverter(sourceType, targetType);\r\n    }\r\n    if (converter != null) {\r\n        this.converterCache.put(key, converter);\r\n        return converter;\r\n    }\r\n    this.converterCache.put(key, NO_MATCH);\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#getConverter(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#getConverter(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#getDefaultConverter(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the default converter if no converter is found for the given sourceType/targetType pair.\r\n * <p>Returns a NO_OP Converter if the source type is assignable to the target type.\r\n * Returns {@code null} otherwise, indicating no suitable converter could be found.\r\n * @param sourceType the source type to convert from\r\n * @param targetType the target type to convert to\r\n * @return the default generic converter that will perform the conversion\r\n */\r\n@Nullable\r\nprotected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#getDefaultConverter(TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#getDefaultConverter(TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#getRequiredTypeInfo(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Internal helpers\r\nprivate ResolvableType @Nullable [] getRequiredTypeInfo(Class<?> converterClass, Class<?> genericIfc) {\r\n    ResolvableType resolvableType = ResolvableType.forClass(converterClass).as(genericIfc);\r\n    ResolvableType[] generics = resolvableType.getGenerics();\r\n    if (generics.length < 2) {\r\n        return null;\r\n    }\r\n    Class<?> sourceType = generics[0].resolve();\r\n    Class<?> targetType = generics[1].resolve();\r\n    if (sourceType == null || targetType == null) {\r\n        return null;\r\n    }\r\n    return generics;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#getRequiredTypeInfo(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#invalidateCache()",
    "headType": "method",
    "relation": "provide",
    "tail": "private void invalidateCache() {\r\n    this.converterCache.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#invalidateCache()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#handleConverterNotFound(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object handleConverterNotFound(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {\r\n    if (source == null) {\r\n        assertNotPrimitiveTargetType(sourceType, targetType);\r\n        return null;\r\n    }\r\n    if ((sourceType == null || sourceType.isAssignableTo(targetType)) && targetType.getObjectType().isInstance(source)) {\r\n        return source;\r\n    }\r\n    throw new ConverterNotFoundException(sourceType, targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.GenericConversionService#handleConverterNotFound(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#handleConverterNotFound(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.GenericConversionService#handleResult(TypeDescriptor,TypeDescriptor,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate Object handleResult(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType, @Nullable Object result) {\r\n    if (result == null) {\r\n        assertNotPrimitiveTargetType(sourceType, targetType);\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  }
]