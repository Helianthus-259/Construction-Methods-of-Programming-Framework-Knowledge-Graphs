[
  {
    "head": "org.springframework.util.PrivateSubclass#getNumber()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int getNumber() {\r\n    return 2;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PrivateSubclass#getNumber()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#getNumber()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#getMessage()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getMessage() {\r\n    return \"hello\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PrivateSubclass#getMessage()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#getMessage()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#greet(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String greet(String name) {\r\n    return \"Hello, \" + name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PrivateSubclass#greet(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#greet(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#process(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int process(int num) {\r\n    return num * 2;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PrivateSubclass#process(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#process(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#getText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getText() {\r\n    return \"enigma\";\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PrivateSubclass#getText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PrivateSubclass#getText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PrivateSubclass",
    "headType": "class",
    "relation": "extend",
    "tail": "PublicSuperclass",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.CollectionUtilsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport java.util.Vector;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link CollectionUtils}.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Rick Evans\n */\nclass CollectionUtilsTests {\n\n\t@Test\n\tvoid isEmpty() {\n\t\tassertThat(CollectionUtils.isEmpty((Set<Object>) null)).isTrue();\n\t\tassertThat(CollectionUtils.isEmpty((Map<String, String>) null)).isTrue();\n\t\tassertThat(CollectionUtils.isEmpty(new HashMap<>())).isTrue();\n\t\tassertThat(CollectionUtils.isEmpty(new HashSet<>())).isTrue();\n\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(new Object());\n\t\tassertThat(CollectionUtils.isEmpty(list)).isFalse();\n\n\t\tMap<String, String> map = new HashMap<>();\n\t\tmap.put(\"foo\", \"bar\");\n\t\tassertThat(CollectionUtils.isEmpty(map)).isFalse();\n\t}\n\n\t@Test\n\tvoid mergeArrayIntoCollection() {\n\t\tObject[] arr = new Object[] {\"value1\", \"value2\"};\n\t\tList<Comparable<?>> list = new ArrayList<>();\n\t\tlist.add(\"value3\");\n\n\t\tCollectionUtils.mergeArrayIntoCollection(arr, list);\n\t\tassertThat(list).containsExactly(\"value3\", \"value1\", \"value2\");\n\t}\n\n\t@Test\n\tvoid mergePrimitiveArrayIntoCollection() {\n\t\tint[] arr = new int[] {1, 2};\n\t\tList<Comparable<?>> list = new ArrayList<>();\n\t\tlist.add(3);\n\n\t\tCollectionUtils.mergeArrayIntoCollection(arr, list);\n\t\tassertThat(list).containsExactly(3, 1, 2);\n\t}\n\n\t@Test\n\tvoid mergePropertiesIntoMap() {\n\t\tProperties defaults = new Properties();\n\t\tdefaults.setProperty(\"prop1\", \"value1\");\n\t\tProperties props = new Properties(defaults);\n\t\tprops.setProperty(\"prop2\", \"value2\");\n\t\tprops.put(\"prop3\", 3);\n\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"prop4\", \"value4\");\n\n\t\tCollectionUtils.mergePropertiesIntoMap(props, map);\n\t\tassertThat(map.get(\"prop1\")).isEqualTo(\"value1\");\n\t\tassertThat(map.get(\"prop2\")).isEqualTo(\"value2\");\n\t\tassertThat(map.get(\"prop3\")).isEqualTo(3);\n\t\tassertThat(map.get(\"prop4\")).isEqualTo(\"value4\");\n\t}\n\n\t@Test\n\tvoid contains() {\n\t\tassertThat(CollectionUtils.contains((Iterator<String>) null, \"myElement\")).isFalse();\n\t\tassertThat(CollectionUtils.contains((Enumeration<String>) null, \"myElement\")).isFalse();\n\t\tassertThat(CollectionUtils.contains(new ArrayList<String>().iterator(), \"myElement\")).isFalse();\n\t\tassertThat(CollectionUtils.contains(new Hashtable<String, Object>().keys(), \"myElement\")).isFalse();\n\n\t\tList<String> list = new ArrayList<>();\n\t\tlist.add(\"myElement\");\n\t\tassertThat(CollectionUtils.contains(list.iterator(), \"myElement\")).isTrue();\n\n\t\tHashtable<String, String> ht = new Hashtable<>();\n\t\tht.put(\"myElement\", \"myValue\");\n\t\tassertThat(CollectionUtils.contains(ht.keys(), \"myElement\")).isTrue();\n\t}\n\n\t@Test\n\tvoid containsAny() {\n\t\tList<String> source = new ArrayList<>();\n\t\tsource.add(\"abc\");\n\t\tsource.add(\"def\");\n\t\tsource.add(\"ghi\");\n\n\t\tList<String> candidates = new ArrayList<>();\n\t\tcandidates.add(\"xyz\");\n\t\tcandidates.add(\"def\");\n\t\tcandidates.add(\"abc\");\n\n\t\tassertThat(CollectionUtils.containsAny(source, candidates)).isTrue();\n\t\tcandidates.remove(\"def\");\n\t\tassertThat(CollectionUtils.containsAny(source, candidates)).isTrue();\n\t\tcandidates.remove(\"abc\");\n\t\tassertThat(CollectionUtils.containsAny(source, candidates)).isFalse();\n\t}\n\n\t@Test\n\tvoid containsInstanceWithNullCollection() {\n\t\tassertThat(CollectionUtils.containsInstance(null, this)).as(\"Must return false if supplied Collection argument is null\").isFalse();\n\t}\n\n\t@Test\n\tvoid containsInstanceWithInstancesThatAreEqualButDistinct() {\n\t\tList<Instance> list = new ArrayList<>();\n\t\tlist.add(new Instance(\"fiona\"));\n\t\tassertThat(CollectionUtils.containsInstance(list, new Instance(\"fiona\"))).as(\"Must return false if instance is not in the supplied Collection argument\").isFalse();\n\t}\n\n\t@Test\n\tvoid containsInstanceWithSameInstance() {\n\t\tList<Instance> list = new ArrayList<>();\n\t\tlist.add(new Instance(\"apple\"));\n\t\tInstance instance = new Instance(\"fiona\");\n\t\tlist.add(instance);\n\t\tassertThat(CollectionUtils.containsInstance(list, instance)).as(\"Must return true if instance is in the supplied Collection argument\").isTrue();\n\t}\n\n\t@Test\n\tvoid containsInstanceWithNullInstance() {\n\t\tList<Instance> list = new ArrayList<>();\n\t\tlist.add(new Instance(\"apple\"));\n\t\tlist.add(new Instance(\"fiona\"));\n\t\tassertThat(CollectionUtils.containsInstance(list, null)).as(\"Must return false if null instance is supplied\").isFalse();\n\t}\n\n\t@Test\n\tvoid findFirstMatch() {\n\t\tList<String> source = new ArrayList<>();\n\t\tsource.add(\"abc\");\n\t\tsource.add(\"def\");\n\t\tsource.add(\"ghi\");\n\n\t\tList<String> candidates = new ArrayList<>();\n\t\tcandidates.add(\"xyz\");\n\t\tcandidates.add(\"def\");\n\t\tcandidates.add(\"abc\");\n\n\t\tassertThat(CollectionUtils.findFirstMatch(source, candidates)).isEqualTo(\"def\");\n\t}\n\n\t@Test\n\tvoid findValueOfType() {\n\t\tList<Integer> integerList = new ArrayList<>();\n\t\tintegerList.add(1);\n\t\tassertThat(CollectionUtils.findValueOfType(integerList, Integer.class)).isEqualTo(1);\n\n\t\tSet<Integer> integerSet = new HashSet<>();\n\t\tintegerSet.add(2);\n\t\tassertThat(CollectionUtils.findValueOfType(integerSet, Integer.class)).isEqualTo(2);\n\t}\n\n\t@Test\n\tvoid findValueOfTypeWithEmptyCollection() {\n\t\tList<Integer> emptyList = new ArrayList<>();\n\t\tassertThat(CollectionUtils.findValueOfType(emptyList, Integer.class)).isNull();\n\t}\n\n\t@Test\n\tvoid findValueOfTypeWithMoreThanOneValue() {\n\t\tList<Integer> integerList = new ArrayList<>();\n\t\tintegerList.add(1);\n\t\tintegerList.add(2);\n\t\tassertThat(CollectionUtils.findValueOfType(integerList, Integer.class)).isNull();\n\t}\n\n\t@Test\n\tvoid hasUniqueObject() {\n\t\tList<String> list = new ArrayList<>();\n\t\tlist.add(\"myElement\");\n\t\tlist.add(\"myOtherElement\");\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isFalse();\n\n\t\tlist = new ArrayList<>();\n\t\tlist.add(\"myElement\");\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isTrue();\n\n\t\tlist = new ArrayList<>();\n\t\tlist.add(\"myElement\");\n\t\tlist.add(null);\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isFalse();\n\n\t\tlist = new ArrayList<>();\n\t\tlist.add(null);\n\t\tlist.add(\"myElement\");\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isFalse();\n\n\t\tlist = new ArrayList<>();\n\t\tlist.add(null);\n\t\tlist.add(null);\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isTrue();\n\n\t\tlist = new ArrayList<>();\n\t\tlist.add(null);\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isTrue();\n\n\t\tlist = new ArrayList<>();\n\t\tassertThat(CollectionUtils.hasUniqueObject(list)).isFalse();\n\t}\n\n\t@Test\n\tvoid findCommonElementType() {\n\t\tList<Integer> integerList = new ArrayList<>();\n\t\tintegerList.add(1);\n\t\tintegerList.add(2);\n\n\t\tassertThat(CollectionUtils.findCommonElementType(integerList)).isEqualTo(Integer.class);\n\t}\n\n\t@Test\n\tvoid findCommonElementTypeWithEmptyCollection() {\n\t\tList<Integer> emptyList = new ArrayList<>();\n\t\tassertThat(CollectionUtils.findCommonElementType(emptyList)).isNull();\n\t}\n\n\t@Test\n\tvoid findCommonElementTypeWithDifferentElementType() {\n\t\tList<Object> list = new ArrayList<>();\n\t\tlist.add(1);\n\t\tlist.add(\"foo\");\n\t\tassertThat(CollectionUtils.findCommonElementType(list)).isNull();\n\t}\n\n\t@Test\n\tvoid firstElementWithSet() {\n\t\tSet<Integer> set = new HashSet<>();\n\t\tset.add(17);\n\t\tset.add(3);\n\t\tset.add(2);\n\t\tset.add(1);\n\t\tassertThat(CollectionUtils.firstElement(set)).isEqualTo(17);\n\t}\n\n\t@Test\n\tvoid firstElementWithSortedSet() {\n\t\tSortedSet<Integer> sortedSet = new TreeSet<>();\n\t\tsortedSet.add(17);\n\t\tsortedSet.add(3);\n\t\tsortedSet.add(2);\n\t\tsortedSet.add(1);\n\t\tassertThat(CollectionUtils.firstElement(sortedSet)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid firstElementWithList() {\n\t\tList<Integer> list = new ArrayList<>();\n\t\tlist.add(1);\n\t\tlist.add(2);\n\t\tlist.add(3);\n\t\tassertThat(CollectionUtils.firstElement(list)).isEqualTo(1);\n\t}\n\n\t@Test\n\tvoid lastElementWithSet() {\n\t\tSet<Integer> set = new HashSet<>();\n\t\tset.add(17);\n\t\tset.add(3);\n\t\tset.add(2);\n\t\tset.add(1);\n\t\tassertThat(CollectionUtils.lastElement(set)).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid lastElementWithSortedSet() {\n\t\tSortedSet<Integer> sortedSet = new TreeSet<>();\n\t\tsortedSet.add(17);\n\t\tsortedSet.add(3);\n\t\tsortedSet.add(2);\n\t\tsortedSet.add(1);\n\t\tassertThat(CollectionUtils.lastElement(sortedSet)).isEqualTo(17);\n\t}\n\n\t@Test\n\tvoid lastElementWithList() {\n\t\tList<Integer> list = new ArrayList<>();\n\t\tlist.add(1);\n\t\tlist.add(2);\n\t\tlist.add(3);\n\t\tassertThat(CollectionUtils.lastElement(list)).isEqualTo(3);\n\t}\n\n\t@Test\n\tvoid toArray() {\n\t\tVector<String> vector = new Vector<>();\n\t\tvector.add(\"foo\");\n\t\tvector.add(\"bar\");\n\t\tEnumeration<String> enumeration = vector.elements();\n\t\tassertThat(CollectionUtils.toArray(enumeration, new String[]{})).containsExactly(\"foo\", \"bar\");\n\t}\n\n\t@Test\n\tvoid conversionOfEmptyMap() {\n\t\tMultiValueMap<String, String> asMultiValueMap = CollectionUtils.toMultiValueMap(new HashMap<>());\n\t\tassertThat(asMultiValueMap).isEmpty();\n\t\tassertThat(asMultiValueMap).isEmpty();\n\t}\n\n\t@Test\n\tvoid conversionOfNonEmptyMap() {\n\t\tMap<String, List<String>> wrapped = new HashMap<>();\n\t\twrapped.put(\"key\", Arrays.asList(\"first\", \"second\"));\n\t\tMultiValueMap<String, String> asMultiValueMap = CollectionUtils.toMultiValueMap(wrapped);\n\t\tassertThat(asMultiValueMap).containsAllEntriesOf(wrapped);\n\t}\n\n\t@Test\n\tvoid changesValueByReference() {\n\t\tMap<String, List<String>> wrapped = new HashMap<>();\n\t\tMultiValueMap<String, String> asMultiValueMap = CollectionUtils.toMultiValueMap(wrapped);\n\t\tassertThat(asMultiValueMap).doesNotContainKeys(\"key\");\n\t\twrapped.put(\"key\", new ArrayList<>());\n\t\tassertThat(asMultiValueMap).containsKey(\"key\");\n\t}\n\n\t@Test\n\tvoid compositeMap() {\n\t\tMap<String, String> first = new HashMap<>();\n\t\tfirst.put(\"key1\", \"value1\");\n\t\tfirst.put(\"key2\", \"value2\");\n\n\t\tMap<String, String> second = new HashMap<>();\n\t\tsecond.put(\"key3\", \"value3\");\n\t\tsecond.put(\"key4\", \"value4\");\n\n\t\tMap<String, String> compositeMap = CollectionUtils.compositeMap(first, second);\n\n\t\tassertThat(compositeMap).containsKeys(\"key1\", \"key2\", \"key3\", \"key4\");\n\t\tassertThat(compositeMap).containsValues(\"value1\", \"value2\", \"value3\", \"value4\");\n\t}\n\n\n\tprivate static final class Instance {\n\n\t\tprivate final String name;\n\n\t\tpublic Instance(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object rhs) {\n\t\t\tif (this == rhs) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (rhs == null || this.getClass() != rhs.getClass()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tInstance instance = (Instance) rhs;\n\t\t\treturn this.name.equals(instance.name);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn this.name.hashCode();\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.CollectionUtilsTests#isEmpty()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isEmpty() {\r\n    assertThat(CollectionUtils.isEmpty((Set<Object>) null)).isTrue();\r\n    assertThat(CollectionUtils.isEmpty((Map<String, String>) null)).isTrue();\r\n    assertThat(CollectionUtils.isEmpty(new HashMap<>())).isTrue();\r\n    assertThat(CollectionUtils.isEmpty(new HashSet<>())).isTrue();\r\n    List<Object> list = new ArrayList<>();\r\n    list.add(new Object());\r\n    assertThat(CollectionUtils.isEmpty(list)).isFalse();\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"foo\", \"bar\");\r\n    assertThat(CollectionUtils.isEmpty(map)).isFalse();\r\n}",
    "tailType": "method_code"
  }
]