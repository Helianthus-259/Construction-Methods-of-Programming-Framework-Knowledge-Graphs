[
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#getTimeOut()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTimeOut() throws Exception {\r\n    given(adaptee.get(1, TimeUnit.SECONDS)).willReturn(42);\r\n    String result = adapter.get(1, TimeUnit.SECONDS);\r\n    assertThat(result).isEqualTo(\"42\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.concurrent.FutureAdapterTests#getTimeOut()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.concurrent.FutureAdapterTests#getTimeOut()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ResourcePatternHint",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Objects;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.AntPathMatcher;\nimport org.springframework.util.Assert;\n\n/**\n * A hint that describes resources that should be made available at runtime.\n *\n * <p>Each pattern may be a simple path which has a one-to-one mapping to a\n * resource on the classpath, or alternatively may contain the special\n * {@code *} character to indicate a wildcard match. For example:\n * <ul>\n *     <li>\"file.properties\": matches just the {@code file.properties}\n *         file at the root of the classpath.</li>\n *     <li>\"com/example/file.properties\": matches just the\n *         {@code file.properties} file in {@code com/example/}.</li>\n *     <li>\"*.properties\": matches all the files with a {@code .properties}\n *         extension at the root of the classpath.</li>\n *     <li>\"com/example/*.properties\": matches all the files with a {@code .properties}\n *         extension in {@code com/example/}.</li>\n *     <li>\"com/example/{@literal **}\": matches all the files in {@code com/example/}\n *         and its child directories at any depth.</li>\n *     <li>\"com/example/{@literal **}/*.properties\": matches all the files with a {@code .properties}\n *         extension in {@code com/example/} and its child directories at any depth.</li>\n * </ul>\n *\n * <p>A resource pattern must not start with a slash ({@code /}) unless it is the\n * root directory.\n *\n * @author Stephane Nicoll\n * @author Brian Clozel\n * @author Sebastien Deleuze\n * @author Sam Brannen\n * @since 6.0\n */\npublic final class ResourcePatternHint implements ConditionalHint {\n\n\tprivate static final AntPathMatcher PATH_MATCHER = new AntPathMatcher();\n\n\tprivate final String pattern;\n\n\tprivate final @Nullable TypeReference reachableType;\n\n\n\tResourcePatternHint(String pattern, @Nullable TypeReference reachableType) {\n\t\tAssert.isTrue((\"/\".equals(pattern) || !pattern.startsWith(\"/\")),\n\t\t\t\t() -> \"Resource pattern [%s] must not start with a '/' unless it is the root directory\"\n\t\t\t\t\t\t.formatted(pattern));\n\t\tthis.pattern = pattern;\n\t\tthis.reachableType = reachableType;\n\t}\n\n\n\t/**\n\t * Return the pattern to use for identifying the resources to match.\n\t */\n\tpublic String getPattern() {\n\t\treturn this.pattern;\n\t}\n\n\t/**\n\t * Whether the given path matches the current glob pattern.\n\t * @param path the path to match against\n\t */\n\tpublic boolean matches(String path) {\n\t\treturn PATH_MATCHER.match(this.pattern, path);\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getReachableType() {\n\t\treturn this.reachableType;\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof ResourcePatternHint that &&\n\t\t\t\tthis.pattern.equals(that.pattern) && Objects.equals(this.reachableType, that.reachableType)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.pattern, this.reachableType);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#PATH_MATCHER",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#PATH_MATCHER",
    "headType": "field",
    "relation": "haveType",
    "tail": "AntPathMatcher",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#pattern",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#pattern",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#reachableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#reachableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#getPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the pattern to use for identifying the resources to match.\r\n */\r\npublic String getPattern() {\r\n    return this.pattern;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#getPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#matches(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Whether the given path matches the current glob pattern.\r\n * @param path the path to match against\r\n */\r\npublic boolean matches(String path) {\r\n    return PATH_MATCHER.match(this.pattern, path);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#matches(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#getReachableType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic TypeReference getReachableType() {\r\n    return this.reachableType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHint#getReachableType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#getReachableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHint#getReachableType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]