[
  {
    "head": "org.springframework.util.Assert#hasText(String,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#doesNotContain(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given text does not contain the given substring.\r\n * <pre class=\"code\">Assert.doesNotContain(name, \"rod\", \"Name must not contain 'rod'\");</pre>\r\n * @param textToSearch the text to search\r\n * @param substring the substring to find within the text\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the text contains the substring\r\n */\r\npublic static void doesNotContain(@Nullable String textToSearch, String substring, String message) {\r\n    if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) && textToSearch.contains(substring)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#doesNotContain(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#doesNotContain(String,String,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the given text does not contain the given substring.\r\n * <pre class=\"code\">\r\n * Assert.doesNotContain(name, forbidden, () -&gt; \"Name must not contain '\" + forbidden + \"'\");\r\n * </pre>\r\n * @param textToSearch the text to search\r\n * @param substring the substring to find within the text\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the text contains the substring\r\n * @since 5.0\r\n */\r\npublic static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {\r\n    if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) && textToSearch.contains(substring)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#doesNotContain(String,String,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Object[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an array contains elements; that is, it must not be\r\n * {@code null} and must contain at least one element.\r\n * <pre class=\"code\">Assert.notEmpty(array, \"The array must contain elements\");</pre>\r\n * @param array the array to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the object array is {@code null} or contains no elements\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(@Nullable Object @Nullable [] array, String message) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Object[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Object[],String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Object[],Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an array contains elements; that is, it must not be\r\n * {@code null} and must contain at least one element.\r\n * <pre class=\"code\">\r\n * Assert.notEmpty(array, () -&gt; \"The \" + arrayType + \" array must contain elements\");\r\n * </pre>\r\n * @param array the array to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the object array is {@code null} or contains no elements\r\n * @since 5.0\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(Object @Nullable [] array, Supplier<String> messageSupplier) {\r\n    if (ObjectUtils.isEmpty(array)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Object[],Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Object[],Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#noNullElements(Object[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an array contains no {@code null} elements.\r\n * <p>Note: Does not complain if the array is empty!\r\n * <pre class=\"code\">Assert.noNullElements(array, \"The array must contain non-null elements\");</pre>\r\n * @param array the array to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the object array contains a {@code null} element\r\n */\r\npublic static void noNullElements(Object @Nullable [] array, String message) {\r\n    if (array != null) {\r\n        for (Object element : array) {\r\n            if (element == null) {\r\n                throw new IllegalArgumentException(message);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#noNullElements(Object[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#noNullElements(Object[],Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that an array contains no {@code null} elements.\r\n * <p>Note: Does not complain if the array is empty!\r\n * <pre class=\"code\">\r\n * Assert.noNullElements(array, () -&gt; \"The \" + arrayType + \" array must contain non-null elements\");\r\n * </pre>\r\n * @param array the array to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the object array contains a {@code null} element\r\n * @since 5.0\r\n */\r\npublic static void noNullElements(Object @Nullable [] array, Supplier<String> messageSupplier) {\r\n    if (array != null) {\r\n        for (Object element : array) {\r\n            if (element == null) {\r\n                throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#noNullElements(Object[],Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Collection<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a collection contains elements; that is, it must not be\r\n * {@code null} and must contain at least one element.\r\n * <pre class=\"code\">Assert.notEmpty(collection, \"Collection must contain elements\");</pre>\r\n * @param collection the collection to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the collection is {@code null} or\r\n * contains no elements\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(@Nullable Collection<?> collection, String message) {\r\n    if (CollectionUtils.isEmpty(collection)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Collection<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Collection<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Collection<?>,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a collection contains elements; that is, it must not be\r\n * {@code null} and must contain at least one element.\r\n * <pre class=\"code\">\r\n * Assert.notEmpty(collection, () -&gt; \"The \" + collectionType + \" collection must contain elements\");\r\n * </pre>\r\n * @param collection the collection to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the collection is {@code null} or\r\n * contains no elements\r\n * @since 5.0\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {\r\n    if (CollectionUtils.isEmpty(collection)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Collection<?>,Supplier<String>)",
    "tailType": "method"
  }
]