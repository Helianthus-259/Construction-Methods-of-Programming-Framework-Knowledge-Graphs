[
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileInDirectory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fileInDirectory() {\r\n    ResourcePatternHint hint = new ResourcePatternHint(\"com/example/file.properties\", null);\r\n    assertThat(hint.matches(\"com/example/file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"file.properties\")).isFalse();\r\n    assertThat(hint.matches(\"com/file.properties\")).isFalse();\r\n    assertThat(hint.matches(\"com/example/another-file.properties\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHintTests#fileInDirectory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#fileInDirectory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#extension()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extension() {\r\n    ResourcePatternHint hint = new ResourcePatternHint(\"**/*.properties\", null);\r\n    assertThat(hint.matches(\"file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"com/example/file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"file.prop\")).isFalse();\r\n    assertThat(hint.matches(\"com/example/file.prop\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHintTests#extension()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#extension()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#extensionInDirectoryAtAnyDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extensionInDirectoryAtAnyDepth() {\r\n    ResourcePatternHint hint = new ResourcePatternHint(\"com/example/*.properties\", null);\r\n    assertThat(hint.matches(\"com/example/file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"com/example/another/file.properties\")).isFalse();\r\n    assertThat(hint.matches(\"com/file.properties\")).isFalse();\r\n    assertThat(hint.matches(\"file.properties\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHintTests#extensionInDirectoryAtAnyDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#extensionInDirectoryAtAnyDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid anyFileInDirectoryAtAnyDepth() {\r\n    ResourcePatternHint hint = new ResourcePatternHint(\"com/example/**\", null);\r\n    assertThat(hint.matches(\"com/example/file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"com/example/another/file.properties\")).isTrue();\r\n    assertThat(hint.matches(\"com/example/another\")).isTrue();\r\n    assertThat(hint.matches(\"file.properties\")).isFalse();\r\n    assertThat(hint.matches(\"com/file.properties\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ResourcePatternHintTests#anyFileInDirectoryAtAnyDepth()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link RuntimeHints}.\n *\n * @author Stephane Nicoll\n */\nclass RuntimeHintsTests {\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\n\t@Test\n\tvoid reflectionHintWithClass() {\n\t\tthis.hints.reflection().registerType(String.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement().satisfies(typeHint -> {\n\t\t\tassertThat(typeHint.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\tassertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\n\t\t});\n\t}\n\n\t@Test\n\tvoid resourceHintWithClass() {\n\t\tthis.hints.resources().registerType(String.class);\n\t\tassertThat(this.hints.resources().resourcePatternHints()).singleElement().satisfies(resourceHint ->\n\t\t\t\tassertThat(resourceHint.getIncludes()).map(ResourcePatternHint::getPattern)\n\t\t\t\t.containsExactlyInAnyOrder(\"/\", \"java\", \"java/lang\", \"java/lang/String.class\"));\n\t}\n\n\t@Test\n\tvoid javaSerializationHintWithClass() {\n\t\tthis.hints.serialization().registerType(String.class);\n\t\tassertThat(this.hints.serialization().javaSerializationHints().map(JavaSerializationHint::getType))\n\t\t\t\t.containsExactly(TypeReference.of(String.class));\n\t}\n\n\t@Test\n\tvoid jdkProxyWithClass() {\n\t\tthis.hints.proxies().registerJdkProxy(Function.class);\n\t\tassertThat(this.hints.proxies().jdkProxyHints()).singleElement().satisfies(jdkProxyHint ->\n\t\t\t\tassertThat(jdkProxyHint.getProxiedInterfaces()).containsExactly(TypeReference.of(Function.class)));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests#hints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#hints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reflectionHintWithClass() {\r\n    this.hints.reflection().registerType(String.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\r\n    assertThat(this.hints.reflection().typeHints()).singleElement().satisfies(typeHint -> {\r\n        assertThat(typeHint.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\r\n        assertThat(typeHint.fields()).isEmpty();\r\n        assertThat(typeHint.constructors()).isEmpty();\r\n        assertThat(typeHint.methods()).isEmpty();\r\n        assertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.RuntimeHintsTests#reflectionHintWithClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]