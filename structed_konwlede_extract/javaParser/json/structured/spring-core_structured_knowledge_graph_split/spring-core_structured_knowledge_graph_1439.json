[
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#hasName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#hasName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isWhiteSpace()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isWhiteSpace() {\r\n    return getEventType() == XMLStreamConstants.SPACE;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#isWhiteSpace()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isWhiteSpace()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isStartElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isStartElement() {\r\n    return getEventType() == XMLStreamConstants.START_ELEMENT;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#isStartElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isStartElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isEndElement()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isEndElement() {\r\n    return getEventType() == XMLStreamConstants.END_ELEMENT;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#isEndElement()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isEndElement()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isCharacters()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isCharacters() {\r\n    return getEventType() == XMLStreamConstants.CHARACTERS;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#isCharacters()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#isCharacters()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#nextTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int nextTag() throws XMLStreamException {\r\n    int eventType = next();\r\n    while (eventType == XMLStreamConstants.CHARACTERS && isWhiteSpace() || eventType == XMLStreamConstants.CDATA && isWhiteSpace() || eventType == XMLStreamConstants.SPACE || eventType == XMLStreamConstants.PROCESSING_INSTRUCTION || eventType == XMLStreamConstants.COMMENT) {\r\n        eventType = next();\r\n    }\r\n    if (eventType != XMLStreamConstants.START_ELEMENT && eventType != XMLStreamConstants.END_ELEMENT) {\r\n        throw new XMLStreamException(\"expected start or end tag\", getLocation());\r\n    }\r\n    return eventType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#nextTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#nextTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#require(int,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void require(int expectedType, String namespaceURI, String localName) throws XMLStreamException {\r\n    int eventType = getEventType();\r\n    if (eventType != expectedType) {\r\n        throw new XMLStreamException(\"Expected [\" + expectedType + \"] but read [\" + eventType + \"]\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.AbstractXMLStreamReader#require(int,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.AbstractXMLStreamReader#require(int,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]