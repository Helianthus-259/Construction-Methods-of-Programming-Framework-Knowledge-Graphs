[
  {
    "head": "org.springframework.util.CustomizableThreadCreator#threadGroup",
    "headType": "field",
    "relation": "haveType",
    "tail": "ThreadGroup",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.CustomizableThreadCreator#threadCount",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#threadCount",
    "headType": "field",
    "relation": "haveType",
    "tail": "AtomicInteger",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#setThreadNamePrefix(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the prefix to use for the names of newly created threads.\r\n * Default is \"SimpleAsyncTaskExecutor-\".\r\n */\r\npublic void setThreadNamePrefix(@Nullable String threadNamePrefix) {\r\n    this.threadNamePrefix = (threadNamePrefix != null ? threadNamePrefix : getDefaultThreadNamePrefix());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#setThreadNamePrefix(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#getThreadNamePrefix()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the thread name prefix to use for the names of newly\r\n * created threads.\r\n */\r\npublic String getThreadNamePrefix() {\r\n    return this.threadNamePrefix;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#getThreadNamePrefix()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#setThreadPriority(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the priority of the threads that this factory creates.\r\n * Default is 5.\r\n * @see java.lang.Thread#NORM_PRIORITY\r\n */\r\npublic void setThreadPriority(int threadPriority) {\r\n    this.threadPriority = threadPriority;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#setThreadPriority(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#getThreadPriority()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the priority of the threads that this factory creates.\r\n */\r\npublic int getThreadPriority() {\r\n    return this.threadPriority;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#getThreadPriority()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#setDaemon(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether this factory is supposed to create daemon threads,\r\n * just executing as long as the application itself is running.\r\n * <p>Default is \"false\": Concrete factories usually support explicit cancelling.\r\n * Hence, if the application shuts down, Runnables will by default finish their\r\n * execution.\r\n * <p>Specify \"true\" for eager shutdown of threads which still actively execute\r\n * a {@link Runnable} at the time that the application itself shuts down.\r\n * @see java.lang.Thread#setDaemon\r\n */\r\npublic void setDaemon(boolean daemon) {\r\n    this.daemon = daemon;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#setDaemon(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#isDaemon()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether this factory should create daemon threads.\r\n */\r\npublic boolean isDaemon() {\r\n    return this.daemon;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#isDaemon()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#setThreadGroupName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the name of the thread group that threads should be created in.\r\n * @see #setThreadGroup\r\n */\r\npublic void setThreadGroupName(String name) {\r\n    this.threadGroup = new ThreadGroup(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#setThreadGroupName(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#setThreadGroup(ThreadGroup)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the thread group that threads should be created in.\r\n * @see #setThreadGroupName\r\n */\r\npublic void setThreadGroup(@Nullable ThreadGroup threadGroup) {\r\n    this.threadGroup = threadGroup;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.CustomizableThreadCreator#setThreadGroup(ThreadGroup)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.CustomizableThreadCreator#getThreadGroup()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the thread group that threads should be created in\r\n * (or {@code null} for the default group).\r\n */\r\n@Nullable\r\npublic ThreadGroup getThreadGroup() {\r\n    return this.threadGroup;\r\n}",
    "tailType": "method_code"
  }
]