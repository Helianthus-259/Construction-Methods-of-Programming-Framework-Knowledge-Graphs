[
  {
    "head": "org.springframework.core.io.UrlResourceTests#sameResourceWithRelativePathIsEqual()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid sameResourceWithRelativePathIsEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n    assertThat(new UrlResource(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#sameResourceWithRelativePathIsEqual()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#sameResourceWithRelativePathIsEqual()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromFilePath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid filenameIsExtractedFromFilePath() throws Exception {\r\n    assertThat(new UrlResource(\"file:test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:/dir/test?argh\").getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromFilePath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromFilePath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromURL()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid filenameIsExtractedFromURL() throws Exception {\r\n    assertThat(new UrlResource(new URL(\"file:test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test?argh\")).getFilename()).isEqualTo(\"test\");\r\n    assertThat(new UrlResource(new URL(\"file:/dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir\\\\test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(new UrlResource(new URL(\"file:\\\\dir/test.txt?argh\")).getFilename()).isEqualTo(\"test.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromURL()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameIsExtractedFromURL()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameContainingHashTagIsExtractedFromFilePathUnencoded()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid filenameContainingHashTagIsExtractedFromFilePathUnencoded() throws Exception {\r\n    String unencodedPath = \"/dir/test#1.txt\";\r\n    String encodedPath = \"/dir/test%231.txt\";\r\n    URI uri = new URI(\"file\", unencodedPath, null);\r\n    URL url = uri.toURL();\r\n    assertThat(uri.getPath()).isEqualTo(unencodedPath);\r\n    assertThat(uri.getRawPath()).isEqualTo(encodedPath);\r\n    assertThat(url.getPath()).isEqualTo(encodedPath);\r\n    UrlResource urlResource = new UrlResource(url);\r\n    assertThat(urlResource.getURI().getPath()).isEqualTo(unencodedPath);\r\n    assertThat(urlResource.getFilename()).isEqualTo(\"test#1.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#filenameContainingHashTagIsExtractedFromFilePathUnencoded()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#filenameContainingHashTagIsExtractedFromFilePathUnencoded()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#factoryMethodsProduceEqualResources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid factoryMethodsProduceEqualResources() throws Exception {\r\n    Resource resource1 = new UrlResource(\"file:core/io/ResourceTests.class\");\r\n    Resource resource2 = UrlResource.from(\"file:core/io/ResourceTests.class\");\r\n    Resource resource3 = UrlResource.from(resource1.getURI());\r\n    assertThat(resource2.getURL()).isEqualTo(resource1.getURL());\r\n    assertThat(resource3.getURL()).isEqualTo(resource1.getURL());\r\n    assertThat(UrlResource.from(\"file:core/../core/io/./ResourceTests.class\")).isEqualTo(resource1);\r\n    assertThat(UrlResource.from(\"file:/dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(UrlResource.from(\"file:\\\\dir\\\\test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n    assertThat(UrlResource.from(\"file:\\\\dir/test.txt?argh\").getFilename()).isEqualTo(\"test.txt\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#factoryMethodsProduceEqualResources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#factoryMethodsProduceEqualResources()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#relativeResourcesAreEqual()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid relativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:dir/\");\r\n    Resource relative = resource.createRelative(\"subdir\");\r\n    assertThat(relative).isEqualTo(new UrlResource(\"file:dir/subdir\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#relativeResourcesAreEqual()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#relativeResourcesAreEqual()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests#unusualRelativeResourcesAreEqual()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid unusualRelativeResourcesAreEqual() throws Exception {\r\n    Resource resource = new UrlResource(\"file:dir/\");\r\n    Resource relative = resource.createRelative(\"https://spring.io\");\r\n    assertThat(relative).isEqualTo(new UrlResource(\"file:dir/https://spring.io\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.UrlResourceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.UrlResourceTests#unusualRelativeResourcesAreEqual()",
    "tailType": "method"
  }
]