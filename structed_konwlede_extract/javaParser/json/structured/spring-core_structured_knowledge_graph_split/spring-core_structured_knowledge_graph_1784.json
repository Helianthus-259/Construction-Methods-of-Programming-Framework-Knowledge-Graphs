[
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#streamRepeatableAnnotationsWithExplicitRepeatables_MergedAnnotationsApi()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid streamRepeatableAnnotationsWithExplicitRepeatables_MergedAnnotationsApi() {\r\n    RepeatableContainers repeatableContainers = RepeatableContainers.of(A.class, A.Container.class).and(B.Container.class, B.class);\r\n    Set<A> annotations = MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY, repeatableContainers).stream(A.class).collect(MergedAnnotationCollectors.toAnnotationSet());\r\n    // Merged, so we expect to find @A twice with values coming from @B(5) and @B(10).\r\n    assertThat(annotations).extracting(A::value).containsExactly(5, 10);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#streamRepeatableAnnotationsWithExplicitRepeatables_MergedAnnotationsApi()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#streamRepeatableAnnotationsWithExplicitRepeatables_MergedAnnotationsApi()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils() {\r\n    Set<A> annotations = AnnotatedElementUtils.findMergedRepeatableAnnotations(method, A.class);\r\n    // Merged, so we expect to find @A twice with values coming from @B(5) and @B(10).\r\n    assertThat(annotations).extracting(A::value).containsExactly(5, 10);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils() {\r\n    Set<A> annotations = AnnotatedElementUtils.findMergedRepeatableAnnotations(method, A.class, A.Container.class);\r\n    // When findMergedRepeatableAnnotations(...) is invoked with an explicit container\r\n    // type, it uses RepeatableContainers.of(...) which limits the repeatable annotation\r\n    // support to a single container type.\r\n    //\r\n    // In this test case, we are therefore limiting the support to @A.Container, which\r\n    // means that @B.Container is unsupported and effectively ignored as a repeatable\r\n    // container type.\r\n    //\r\n    // Long story, short: the search doesn't find anything.\r\n    assertThat(annotations).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#findMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils() {\r\n    Set<A> annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(method, A.class);\r\n    // Merged, so we expect to find @A twice with values coming from @B(5) and @B(10).\r\n    assertThat(annotations).extracting(A::value).containsExactly(5, 10);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithStandardRepeatables_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils() {\r\n    Set<A> annotations = AnnotatedElementUtils.getMergedRepeatableAnnotations(method, A.class, A.Container.class);\r\n    // When getMergedRepeatableAnnotations(...) is invoked with an explicit container\r\n    // type, it uses RepeatableContainers.of(...) which limits the repeatable annotation\r\n    // support to a single container type.\r\n    //\r\n    // In this test case, we are therefore limiting the support to @A.Container, which\r\n    // means that @B.Container is unsupported and effectively ignored as a repeatable\r\n    // container type.\r\n    //\r\n    // Long story, short: the search doesn't find anything.\r\n    assertThat(annotations).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getMergedRepeatableAnnotationsWithExplicitContainer_AnnotatedElementUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getRepeatableAnnotations_AnnotationUtils()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid getRepeatableAnnotations_AnnotationUtils() {\r\n    Set<A> annotations = AnnotationUtils.getRepeatableAnnotations(method, A.class);\r\n    // Not merged, so we expect to find a single @A with default value of 0.\r\n    // @A will actually be found twice, but we have Set semantics here.\r\n    assertThat(annotations).extracting(A::value).containsExactly(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getRepeatableAnnotations_AnnotationUtils()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getRepeatableAnnotations_AnnotationUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#getRepeatableAnnotations_AnnotationUtils()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleRepeatableAnnotationsTests#annotatedMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@B(5)\r\n@B(10)\r\nvoid annotatedMethod() ;",
    "tailType": "method_code"
  }
]