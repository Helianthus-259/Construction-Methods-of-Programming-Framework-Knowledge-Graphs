[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Collector} that accumulates merged annotations to a\r\n * {@link LinkedHashSet} containing {@linkplain MergedAnnotation#synthesize()\r\n * synthesized} versions.\r\n * <p>The collector returned by this method is effectively equivalent to\r\n * {@code Collectors.mapping(MergedAnnotation::synthesize, Collectors.toCollection(LinkedHashSet::new))}\r\n * but avoids the creation of a composite collector.\r\n * @param <A> the annotation type\r\n * @return a {@link Collector} which collects and synthesizes the\r\n * annotations into a {@link Set}\r\n */\r\npublic static <A extends Annotation> Collector<MergedAnnotation<A>, ?, Set<A>> toAnnotationSet() {\r\n    return Collector.of(LinkedHashSet::new, (set, annotation) -> set.add(annotation.synthesize()), MergedAnnotationCollectors::combiner);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Collector} that accumulates merged annotations to an\r\n * {@link Annotation} array containing {@linkplain MergedAnnotation#synthesize()\r\n * synthesized} versions.\r\n * @param <A> the annotation type\r\n * @return a {@link Collector} which collects and synthesizes the\r\n * annotations into an {@code Annotation[]}\r\n * @see #toAnnotationArray(IntFunction)\r\n */\r\npublic static <A extends Annotation> Collector<MergedAnnotation<A>, ?, Annotation[]> toAnnotationArray() {\r\n    return toAnnotationArray(Annotation[]::new);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationArray(IntFunction<R[]>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Collector} that accumulates merged annotations to an\r\n * {@link Annotation} array containing {@linkplain MergedAnnotation#synthesize()\r\n * synthesized} versions.\r\n * @param <A> the annotation type\r\n * @param <R> the resulting array type\r\n * @param generator a function which produces a new array of the desired\r\n * type and the provided length\r\n * @return a {@link Collector} which collects and synthesizes the\r\n * annotations into an annotation array\r\n * @see #toAnnotationArray\r\n */\r\npublic static <R extends Annotation, A extends R> Collector<MergedAnnotation<A>, ?, R[]> toAnnotationArray(IntFunction<R[]> generator) {\r\n    return Collector.of(ArrayList::new, (list, annotation) -> list.add(annotation.synthesize()), MergedAnnotationCollectors::combiner, list -> list.toArray(generator.apply(list.size())));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#toAnnotationArray(IntFunction<R[]>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#toMultiValueMap(Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Collector} that accumulates merged annotations to a\r\n * {@link MultiValueMap} with items {@linkplain MultiValueMap#add(Object, Object)\r\n * added} from each merged annotation\r\n * {@linkplain MergedAnnotation#asMap(Adapt...) as a map}.\r\n * @param <A> the annotation type\r\n * @param adaptations the adaptations that should be applied to the annotation values\r\n * @return a {@link Collector} which collects and synthesizes the\r\n * annotations into a {@link LinkedMultiValueMap}\r\n * @see #toMultiValueMap(Function, MergedAnnotation.Adapt...)\r\n */\r\npublic static <A extends Annotation> Collector<MergedAnnotation<A>, ? extends @Nullable Object, @Nullable MultiValueMap<String, @Nullable Object>> toMultiValueMap(Adapt... adaptations) {\r\n    return toMultiValueMap((MultiValueMap<String, @Nullable Object> t) -> t, adaptations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#toMultiValueMap(Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#toMultiValueMap(Function<MultiValueMap<String,Object>,MultiValueMap<String,Object>>,Adapt)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Collector} that accumulates merged annotations to a\r\n * {@link MultiValueMap} with items {@linkplain MultiValueMap#add(Object, Object)\r\n * added} from each merged annotation\r\n * {@linkplain MergedAnnotation#asMap(Adapt...) as a map}.\r\n * @param <A> the annotation type\r\n * @param finisher the finisher function for the new {@link MultiValueMap}\r\n * @param adaptations the adaptations that should be applied to the annotation values\r\n * @return a {@link Collector} which collects and synthesizes the\r\n * annotations into a {@link LinkedMultiValueMap}\r\n * @see #toMultiValueMap(MergedAnnotation.Adapt...)\r\n */\r\npublic static <A extends Annotation> Collector<MergedAnnotation<A>, ? extends @Nullable Object, @Nullable MultiValueMap<String, @Nullable Object>> toMultiValueMap(Function<MultiValueMap<String, @Nullable Object>, @Nullable MultiValueMap<String, @Nullable Object>> finisher, Adapt... adaptations) {\r\n    Characteristics[] characteristics = (isSameInstance(finisher, Function.identity()) ? IDENTITY_FINISH_CHARACTERISTICS : NO_CHARACTERISTICS);\r\n    return Collector.of(LinkedMultiValueMap::new, (MultiValueMap<String, @Nullable Object> map, MergedAnnotation<A> annotation) -> annotation.asMap(adaptations).forEach(map::add), MergedAnnotationCollectors::combiner, finisher, characteristics);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#toMultiValueMap(Function<MultiValueMap<String,Object>,MultiValueMap<String,Object>>,Adapt)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#isSameInstance(Object,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isSameInstance(Object instance, Object candidate) {\r\n    return instance == candidate;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#isSameInstance(Object,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#combiner(C,C)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * {@link Collector#combiner() Combiner} for collections.\r\n * <p>This method is only invoked if the {@link java.util.stream.Stream} is\r\n * processed in {@linkplain java.util.stream.Stream#parallel() parallel}.\r\n */\r\nprivate static <E, C extends Collection<E>> C combiner(C collection, C additions) {\r\n    collection.addAll(additions);\r\n    return collection;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#combiner(C,C)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors#combiner(MultiValueMap<K,V>,MultiValueMap<K,V>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * {@link Collector#combiner() Combiner} for multi-value maps.\r\n * <p>This method is only invoked if the {@link java.util.stream.Stream} is\r\n * processed in {@linkplain java.util.stream.Stream#parallel() parallel}.\r\n */\r\nprivate static <K, V> MultiValueMap<K, @Nullable V> combiner(MultiValueMap<K, @Nullable V> map, MultiValueMap<K, @Nullable V> additions) {\r\n    map.addAll(additions);\r\n    return map;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationCollectors",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationCollectors#combiner(MultiValueMap<K,V>,MultiValueMap<K,V>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\n/**\n * Predicate implementations that provide various test operations for\n * {@link MergedAnnotation MergedAnnotations}.\n *\n * @author Phillip Webb\n * @since 5.2\n */\npublic abstract class MergedAnnotationPredicates {\n\n\tprivate MergedAnnotationPredicates() {\n\t}\n\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the name of the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified array.\n\t * @param <A> the annotation type\n\t * @param typeNames the names that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(String... typeNames) {\n\t\treturn annotation -> ObjectUtils.containsElement(typeNames, annotation.getType().getName());\n\t}\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified array.\n\t * @param <A> the annotation type\n\t * @param types the types that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Class<?>... types) {\n\t\treturn annotation -> ObjectUtils.containsElement(types, annotation.getType());\n\t}\n\n\t/**\n\t * Create a new {@link Predicate} that evaluates to {@code true} if the\n\t * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\n\t * the specified collection.\n\t * @param <A> the annotation type\n\t * @param types the type names or classes that should be matched\n\t * @return a {@link Predicate} to test the annotation type\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Collection<?> types) {\n\t\treturn annotation -> types.stream()\n\t\t\t\t.map(type -> type instanceof Class<?> clazz ? clazz.getName() : type.toString())\n\t\t\t\t.anyMatch(typeName -> typeName.equals(annotation.getType().getName()));\n\t}\n\n\t/**\n\t * Create a new stateful, single use {@link Predicate} that matches only\n\t * the first run of an extracted value. For example,\n\t * {@code MergedAnnotationPredicates.firstRunOf(MergedAnnotation::distance)}\n\t * will match the first annotation, and any subsequent runs that have the\n\t * same distance.\n\t * <p>NOTE: This predicate only matches the first run. Once the extracted\n\t * value changes, the predicate always returns {@code false}. For example,\n\t * if you have a set of annotations with distances {@code [1, 1, 2, 1]} then\n\t * only the first two will match.\n\t * @param valueExtractor function used to extract the value to check\n\t * @return a {@link Predicate} that matches the first run of the extracted\n\t * values\n\t */\n\tpublic static <A extends Annotation> Predicate<MergedAnnotation<A>> firstRunOf(\n\t\t\tFunction<? super MergedAnnotation<A>, ?> valueExtractor) {\n\n\t\treturn new FirstRunOfPredicate<>(valueExtractor);\n\t}\n\n\t/**\n\t * Create a new stateful, single use {@link Predicate} that matches\n\t * annotations that are unique based on the extracted key. For example\n\t * {@code MergedAnnotationPredicates.unique(MergedAnnotation::getType)} will\n\t * match the first time a unique type is encountered.\n\t * @param keyExtractor function used to extract the key used to test for\n\t * uniqueness\n\t * @return a {@link Predicate} that matches a unique annotation based on the\n\t * extracted key\n\t */\n\tpublic static <A extends Annotation, K> Predicate<MergedAnnotation<A>> unique(\n\t\t\tFunction<? super MergedAnnotation<A>, K> keyExtractor) {\n\n\t\treturn new UniquePredicate<>(keyExtractor);\n\t}\n\n\n\t/**\n\t * {@link Predicate} implementation used for\n\t * {@link MergedAnnotationPredicates#firstRunOf(Function)}.\n\t */\n\tprivate static class FirstRunOfPredicate<A extends Annotation> implements Predicate<MergedAnnotation<A>> {\n\n\t\tprivate final Function<? super MergedAnnotation<A>, ?> valueExtractor;\n\n\t\tprivate boolean hasLastValue;\n\n\t\t@SuppressWarnings(\"NullAway.Init\")\n\t\tprivate Object lastValue;\n\n\t\tFirstRunOfPredicate(Function<? super MergedAnnotation<A>, ?> valueExtractor) {\n\t\t\tAssert.notNull(valueExtractor, \"Value extractor must not be null\");\n\t\t\tthis.valueExtractor = valueExtractor;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean test(MergedAnnotation<A> annotation) {\n\t\t\tif (!this.hasLastValue) {\n\t\t\t\tthis.hasLastValue = true;\n\t\t\t\tthis.lastValue = this.valueExtractor.apply(annotation);\n\t\t\t}\n\t\t\tObject value = this.valueExtractor.apply(annotation);\n\t\t\treturn ObjectUtils.nullSafeEquals(value, this.lastValue);\n\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Predicate} implementation used for\n\t * {@link MergedAnnotationPredicates#unique(Function)}.\n\t */\n\tprivate static class UniquePredicate<A extends Annotation, K> implements Predicate<MergedAnnotation<A>> {\n\n\t\tprivate final Function<? super MergedAnnotation<A>, K> keyExtractor;\n\n\t\tprivate final Set<K> seen = new HashSet<>();\n\n\t\tUniquePredicate(Function<? super MergedAnnotation<A>, K> keyExtractor) {\n\t\t\tAssert.notNull(keyExtractor, \"Key extractor must not be null\");\n\t\t\tthis.keyExtractor = keyExtractor;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean test(MergedAnnotation<A> annotation) {\n\t\t\tK key = this.keyExtractor.apply(annotation);\n\t\t\treturn this.seen.add(key);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationPredicates#typeIn(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link Predicate} that evaluates to {@code true} if the name of the\r\n * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in\r\n * the specified array.\r\n * @param <A> the annotation type\r\n * @param typeNames the names that should be matched\r\n * @return a {@link Predicate} to test the annotation type\r\n */\r\npublic static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(String... typeNames) {\r\n    return annotation -> ObjectUtils.containsElement(typeNames, annotation.getType().getName());\r\n}",
    "tailType": "method_code"
  }
]