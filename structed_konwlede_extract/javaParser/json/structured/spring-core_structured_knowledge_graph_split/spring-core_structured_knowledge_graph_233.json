[
  {
    "head": "org.springframework.util.FixedBackOffTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FixedBackOffTests#toStringContent()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FixedBackOffTests#toStringContent()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.TypeReference",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Type abstraction that can be used to refer to types that are not available as\n * a {@link Class} yet.\n *\n * @author Stephane Nicoll\n * @author Sebastien Deleuze\n * @since 6.0\n */\npublic interface TypeReference extends Comparable<TypeReference> {\n\n\t/**\n\t * Return the fully qualified name of this type reference.\n\t * @return the reflection target name\n\t */\n\tString getName();\n\n\t/**\n\t * Return the {@linkplain Class#getCanonicalName() canonical name} of this\n\t * type reference.\n\t * @return the canonical name\n\t */\n\tString getCanonicalName();\n\n\t/**\n\t * Return the package name of this type.\n\t * @return the package name\n\t */\n\tString getPackageName();\n\n\t/**\n\t * Return the {@linkplain Class#getSimpleName() simple name} of this type\n\t * reference.\n\t * @return the simple name\n\t */\n\tString getSimpleName();\n\n\t/**\n\t * Return the enclosing type reference, or {@code null} if this type reference\n\t * does not have an enclosing type.\n\t * @return the enclosing type, if any\n\t */\n\t@Nullable TypeReference getEnclosingType();\n\n\t/**\n\t * Create an instance based on the specified type.\n\t * @param type the type to wrap\n\t * @return a type reference for the specified type\n\t * @throws IllegalArgumentException if the specified type {@linkplain Class#getCanonicalName() canonical name} is {@code null}\n\t */\n\tstatic TypeReference of(Class<?> type) {\n\t\treturn ReflectionTypeReference.of(type);\n\t}\n\n\t/**\n\t * Create an instance based on the specified class name.\n\t * The format of the class name must follow {@linkplain Class#getName()},\n\t * in particular inner classes should be separated by a {@code $}.\n\t * @param className the class name of the type to wrap\n\t * @return a type reference for the specified class name\n\t */\n\tstatic TypeReference of(String className) {\n\t\treturn SimpleTypeReference.of(className);\n\t}\n\n\t/**\n\t * Create a list of {@link TypeReference type references} mapped by the specified\n\t * types.\n\t * @param types the types to map\n\t * @return a list of type references\n\t */\n\tstatic List<TypeReference> listOf(Class<?>... types) {\n\t\treturn Arrays.stream(types).map(TypeReference::of).toList();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the fully qualified name of this type reference.\r\n * @return the reflection target name\r\n */\r\nString getName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getCanonicalName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@linkplain Class#getCanonicalName() canonical name} of this\r\n * type reference.\r\n * @return the canonical name\r\n */\r\nString getCanonicalName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#getCanonicalName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getPackageName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the package name of this type.\r\n * @return the package name\r\n */\r\nString getPackageName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#getPackageName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getSimpleName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the {@linkplain Class#getSimpleName() simple name} of this type\r\n * reference.\r\n * @return the simple name\r\n */\r\nString getSimpleName();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#getSimpleName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getEnclosingType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the enclosing type reference, or {@code null} if this type reference\r\n * does not have an enclosing type.\r\n * @return the enclosing type, if any\r\n */\r\n@Nullable\r\nTypeReference getEnclosingType();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#getEnclosingType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#getEnclosingType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#of(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create an instance based on the specified type.\r\n * @param type the type to wrap\r\n * @return a type reference for the specified type\r\n * @throws IllegalArgumentException if the specified type {@linkplain Class#getCanonicalName() canonical name} is {@code null}\r\n */\r\nstatic TypeReference of(Class<?> type) {\r\n    return ReflectionTypeReference.of(type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#of(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference#of(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create an instance based on the specified class name.\r\n * The format of the class name must follow {@linkplain Class#getName()},\r\n * in particular inner classes should be separated by a {@code $}.\r\n * @param className the class name of the type to wrap\r\n * @return a type reference for the specified class name\r\n */\r\nstatic TypeReference of(String className) {\r\n    return SimpleTypeReference.of(className);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.TypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.TypeReference#of(String)",
    "tailType": "method"
  }
]