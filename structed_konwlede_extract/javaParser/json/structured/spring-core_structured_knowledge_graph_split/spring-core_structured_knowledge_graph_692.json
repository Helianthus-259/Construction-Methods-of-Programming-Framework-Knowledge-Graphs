[
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.ClassTransformerTee",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.cglib.core.ClassTransformer;\nimport org.springframework.cglib.core.Constants;\n\npublic class ClassTransformerTee extends ClassTransformer {\n    private ClassVisitor branch;\n\n    public ClassTransformerTee(ClassVisitor branch) {\n        super(Constants.ASM_API);\n        this.branch = branch;\n    }\n\n    @Override\n\tpublic void setTarget(ClassVisitor target) {\n        cv = new ClassVisitorTee(branch, target);\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassTransformerTee#branch",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee#branch",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setTarget(ClassVisitor target) {\r\n    cv = new ClassVisitorTee(branch, target);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee#setTarget(ClassVisitor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassTransformerTee",
    "headType": "class",
    "relation": "extend",
    "tail": "ClassTransformer",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.cglib.transform",
    "tailType": "package"
  },
  {
    "head": "org.springframework.cglib.transform",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee",
    "tailType": "class"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2003 The Apache Software Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.cglib.transform;\n\nimport org.springframework.asm.AnnotationVisitor;\nimport org.springframework.asm.Attribute;\nimport org.springframework.asm.ClassVisitor;\nimport org.springframework.asm.FieldVisitor;\nimport org.springframework.asm.MethodVisitor;\nimport org.springframework.asm.TypePath;\nimport org.springframework.cglib.core.Constants;\n\npublic class ClassVisitorTee extends ClassVisitor {\n    private ClassVisitor cv1, cv2;\n\n    public ClassVisitorTee(ClassVisitor cv1, ClassVisitor cv2) {\n\tsuper(Constants.ASM_API);\n\tthis.cv1 = cv1;\n        this.cv2 = cv2;\n    }\n\n    @Override\n\tpublic void visit(int version,\n                      int access,\n                      String name,\n                      String signature,\n                      String superName,\n                      String[] interfaces) {\n        cv1.visit(version, access, name, signature, superName, interfaces);\n        cv2.visit(version, access, name, signature, superName, interfaces);\n    }\n\n    @Override\n\tpublic void visitEnd() {\n        cv1.visitEnd();\n        cv2.visitEnd();\n        cv1 = cv2 = null;\n    }\n\n    @Override\n\tpublic void visitInnerClass(String name, String outerName, String innerName, int access) {\n        cv1.visitInnerClass(name, outerName, innerName, access);\n        cv2.visitInnerClass(name, outerName, innerName, access);\n    }\n\n    @Override\n\tpublic FieldVisitor visitField(int access,\n                                   String name,\n                                   String desc,\n                                   String signature,\n                                   Object value) {\n        FieldVisitor fv1 = cv1.visitField(access, name, desc, signature, value);\n        FieldVisitor fv2 = cv2.visitField(access, name, desc, signature, value);\n        if (fv1 == null) {\n\t\t\treturn fv2;\n\t\t}\n        if (fv2 == null) {\n\t\t\treturn fv1;\n\t\t}\n        return new FieldVisitorTee(fv1, fv2);\n    }\n\n\n    @Override\n\tpublic MethodVisitor visitMethod(int access,\n                                     String name,\n                                     String desc,\n                                     String signature,\n                                     String[] exceptions) {\n        MethodVisitor mv1 = cv1.visitMethod(access, name, desc, signature, exceptions);\n        MethodVisitor mv2 = cv2.visitMethod(access, name, desc, signature, exceptions);\n        if (mv1 == null) {\n\t\t\treturn mv2;\n\t\t}\n        if (mv2 == null) {\n\t\t\treturn mv1;\n\t\t}\n        return new MethodVisitorTee(mv1, mv2);\n    }\n\n    @Override\n\tpublic void visitSource(String source, String debug) {\n        cv1.visitSource(source, debug);\n        cv2.visitSource(source, debug);\n    }\n\n    @Override\n\tpublic void visitOuterClass(String owner, String name, String desc) {\n        cv1.visitOuterClass(owner, name, desc);\n        cv2.visitOuterClass(owner, name, desc);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(cv1.visitAnnotation(desc, visible),\n                                                cv2.visitAnnotation(desc, visible));\n    }\n\n    @Override\n\tpublic void visitAttribute(Attribute attrs) {\n        cv1.visitAttribute(attrs);\n        cv2.visitAttribute(attrs);\n    }\n\n    @Override\n\tpublic AnnotationVisitor visitTypeAnnotation(int typeRef, TypePath typePath, String desc, boolean visible) {\n        return AnnotationVisitorTee.getInstance(cv1.visitTypeAnnotation(typeRef, typePath, desc, visible),\n                                                cv2.visitTypeAnnotation(typeRef, typePath, desc, visible));\n    }\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#cv1",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#cv1",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#cv2",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#cv2",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassVisitor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\r\n    cv1.visit(version, access, name, signature, superName, interfaces);\r\n    cv2.visit(version, access, name, signature, superName, interfaces);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visit(int,int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    cv1.visitEnd();\r\n    cv2.visitEnd();\r\n    cv1 = cv2 = null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
    "tailType": "method"
  }
]