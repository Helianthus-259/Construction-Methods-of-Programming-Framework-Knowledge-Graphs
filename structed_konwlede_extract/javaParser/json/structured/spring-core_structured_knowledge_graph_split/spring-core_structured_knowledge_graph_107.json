[
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.AbstractTypeReference",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.type",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.type",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.type.StandardMethodMetadataTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadataTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.type;\n\n/**\n * Tests for {@link StandardMethodMetadata}.\n *\n * @author Phillip Webb\n */\nclass StandardMethodMetadataTests extends AbstractMethodMetadataTests {\n\n\t@Override\n\tprotected AnnotationMetadata get(Class<?> source) {\n\t\treturn AnnotationMetadata.introspect(source);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadataTests#get(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected AnnotationMetadata get(Class<?> source) {\r\n    return AnnotationMetadata.introspect(source);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadataTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.type.StandardMethodMetadataTests#get(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadataTests#get(Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.type.StandardMethodMetadataTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractMethodMetadataTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.Objects;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Base {@link TypeReference} implementation that ensures consistent behaviour\n * for {@code equals()}, {@code hashCode()}, and {@code toString()} based on\n * the {@linkplain #getCanonicalName() canonical name}.\n *\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic abstract class AbstractTypeReference implements TypeReference {\n\n\tprivate final String packageName;\n\n\tprivate final String simpleName;\n\n\tprivate final @Nullable TypeReference enclosingType;\n\n\n\tprotected AbstractTypeReference(String packageName, String simpleName, @Nullable TypeReference enclosingType) {\n\t\tthis.packageName = packageName;\n\t\tthis.simpleName = simpleName;\n\t\tthis.enclosingType = enclosingType;\n\t}\n\n\n\t@Override\n\tpublic String getName() {\n\t\tTypeReference enclosingType = getEnclosingType();\n\t\tString simpleName = getSimpleName();\n\t\treturn (enclosingType != null ? (enclosingType.getName() + '$' + simpleName) :\n\t\t\t\taddPackageIfNecessary(simpleName));\n\t}\n\n\t@Override\n\tpublic String getPackageName() {\n\t\treturn this.packageName;\n\t}\n\n\t@Override\n\tpublic String getSimpleName() {\n\t\treturn this.simpleName;\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getEnclosingType() {\n\t\treturn this.enclosingType;\n\t}\n\n\tprotected String addPackageIfNecessary(String part) {\n\t\tif (this.packageName.isEmpty() ||\n\t\t\t\t(this.packageName.equals(\"java.lang\") && isPrimitive())) {\n\t\t\treturn part;\n\t\t}\n\t\treturn this.packageName + '.' + part;\n\t}\n\n\tprotected abstract boolean isPrimitive();\n\n\t@Override\n\tpublic int compareTo(TypeReference other) {\n\t\treturn this.getCanonicalName().compareToIgnoreCase(other.getCanonicalName());\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof TypeReference that &&\n\t\t\t\tgetCanonicalName().equals(that.getCanonicalName())));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(getCanonicalName());\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getCanonicalName();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#packageName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#packageName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#simpleName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#simpleName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#enclosingType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#enclosingType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getName() {\r\n    TypeReference enclosingType = getEnclosingType();\r\n    String simpleName = getSimpleName();\r\n    return (enclosingType != null ? (enclosingType.getName() + '$' + simpleName) : addPackageIfNecessary(simpleName));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference#getPackageName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String getPackageName() {\r\n    return this.packageName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.AbstractTypeReference",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.AbstractTypeReference#getPackageName()",
    "tailType": "method"
  }
]