[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_REFERENCE",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#TEST_REFERENCE",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#synthesizedUsesCorrectClassLoader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid synthesizedUsesCorrectClassLoader() throws Exception {\r\n    ClassLoader parent = getClass().getClassLoader();\r\n    TestClassLoader child = new TestClassLoader(parent);\r\n    Class<?> source = child.loadClass(WITH_TEST_ANNOTATION);\r\n    Annotation annotation = getDeclaredAnnotation(source, TEST_ANNOTATION);\r\n    Annotation metaAnnotation = getDeclaredAnnotation(annotation.annotationType(), TEST_META_ANNOTATION);\r\n    // We should have loaded the source and initial annotation from child\r\n    assertThat(source.getClassLoader()).isEqualTo(child);\r\n    assertThat(annotation.getClass().getClassLoader()).isEqualTo(child);\r\n    assertThat(annotation.annotationType().getClassLoader()).isEqualTo(child);\r\n    // The meta-annotation should have been loaded by the parent\r\n    assertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(getEnumAttribute(metaAnnotation).getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(getClassAttribute(metaAnnotation).getClassLoader()).isEqualTo(child);\r\n    // MergedAnnotation should follow the same class loader logic\r\n    MergedAnnotations mergedAnnotations = MergedAnnotations.from(source);\r\n    Annotation synthesized = mergedAnnotations.get(TEST_ANNOTATION).synthesize();\r\n    Annotation synthesizedMeta = mergedAnnotations.get(TEST_META_ANNOTATION).synthesize();\r\n    assertThat(synthesized.getClass().getClassLoader()).isEqualTo(child);\r\n    assertThat(synthesized.annotationType().getClassLoader()).isEqualTo(child);\r\n    assertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(getClassAttribute(synthesizedMeta).getClassLoader()).isEqualTo(child);\r\n    assertThat(getEnumAttribute(synthesizedMeta).getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(synthesized).isEqualTo(annotation);\r\n    assertThat(synthesizedMeta).isEqualTo(metaAnnotation);\r\n    // Also check utils version\r\n    Annotation utilsMeta = AnnotatedElementUtils.getMergedAnnotation(source, TestMetaAnnotation.class);\r\n    assertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(getClassAttribute(utilsMeta).getClassLoader()).isEqualTo(child);\r\n    assertThat(getEnumAttribute(utilsMeta).getClass().getClassLoader()).isEqualTo(parent);\r\n    assertThat(utilsMeta).isEqualTo(metaAnnotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#synthesizedUsesCorrectClassLoader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#synthesizedUsesCorrectClassLoader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getClassAttribute(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Class<?> getClassAttribute(Annotation annotation) throws Exception {\r\n    return (Class<?>) getAttributeValue(annotation, \"classValue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getClassAttribute(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getEnumAttribute(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Enum<?> getEnumAttribute(Annotation annotation) throws Exception {\r\n    return (Enum<?>) getAttributeValue(annotation, \"enumValue\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getEnumAttribute(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getAttributeValue(Annotation,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object getAttributeValue(Annotation annotation, String name) throws Exception {\r\n    Method classValueMethod = annotation.annotationType().getDeclaredMethod(name);\r\n    classValueMethod.setAccessible(true);\r\n    return classValueMethod.invoke(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getAttributeValue(Annotation,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getDeclaredAnnotation(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Annotation getDeclaredAnnotation(Class<?> element, String annotationType) {\r\n    for (Annotation annotation : element.getDeclaredAnnotations()) {\r\n        if (annotation.annotationType().getName().equals(annotationType)) {\r\n            return annotation;\r\n        }\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationClassLoaderTests#getDeclaredAnnotation(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.TestClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.TestClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.core.OverridingClassLoader;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link MergedAnnotation} to ensure the correct class loader is\n * used.\n *\n * @author Phillip Webb\n * @since 5.2\n */\nclass MergedAnnotationClassLoaderTests {\n\n\tprivate static final String TEST_ANNOTATION = TestAnnotation.class.getName();\n\n\tprivate static final String TEST_META_ANNOTATION = TestMetaAnnotation.class.getName();\n\n\tprivate static final String WITH_TEST_ANNOTATION = WithTestAnnotation.class.getName();\n\n\tprivate static final String TEST_REFERENCE = TestReference.class.getName();\n\n\t@Test\n\tvoid synthesizedUsesCorrectClassLoader() throws Exception {\n\t\tClassLoader parent = getClass().getClassLoader();\n\t\tTestClassLoader child = new TestClassLoader(parent);\n\t\tClass<?> source = child.loadClass(WITH_TEST_ANNOTATION);\n\t\tAnnotation annotation = getDeclaredAnnotation(source, TEST_ANNOTATION);\n\t\tAnnotation metaAnnotation = getDeclaredAnnotation(annotation.annotationType(),\n\t\t\t\tTEST_META_ANNOTATION);\n\t\t// We should have loaded the source and initial annotation from child\n\t\tassertThat(source.getClassLoader()).isEqualTo(child);\n\t\tassertThat(annotation.getClass().getClassLoader()).isEqualTo(child);\n\t\tassertThat(annotation.annotationType().getClassLoader()).isEqualTo(child);\n\t\t// The meta-annotation should have been loaded by the parent\n\t\tassertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(metaAnnotation.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(\n\t\t\t\tgetEnumAttribute(metaAnnotation).getClass().getClassLoader()).isEqualTo(\n\t\t\t\t\t\tparent);\n\t\tassertThat(getClassAttribute(metaAnnotation).getClassLoader()).isEqualTo(child);\n\t\t// MergedAnnotation should follow the same class loader logic\n\t\tMergedAnnotations mergedAnnotations = MergedAnnotations.from(source);\n\t\tAnnotation synthesized = mergedAnnotations.get(TEST_ANNOTATION).synthesize();\n\t\tAnnotation synthesizedMeta = mergedAnnotations.get(\n\t\t\t\tTEST_META_ANNOTATION).synthesize();\n\t\tassertThat(synthesized.getClass().getClassLoader()).isEqualTo(child);\n\t\tassertThat(synthesized.annotationType().getClassLoader()).isEqualTo(child);\n\t\tassertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(synthesizedMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(getClassAttribute(synthesizedMeta).getClassLoader()).isEqualTo(child);\n\t\tassertThat(\n\t\t\t\tgetEnumAttribute(synthesizedMeta).getClass().getClassLoader()).isEqualTo(\n\t\t\t\t\t\tparent);\n\t\tassertThat(synthesized).isEqualTo(annotation);\n\t\tassertThat(synthesizedMeta).isEqualTo(metaAnnotation);\n\t\t// Also check utils version\n\t\tAnnotation utilsMeta = AnnotatedElementUtils.getMergedAnnotation(source,\n\t\t\t\tTestMetaAnnotation.class);\n\t\tassertThat(utilsMeta.getClass().getClassLoader()).isEqualTo(parent);\n\t\tassertThat(getClassAttribute(utilsMeta).getClassLoader()).isEqualTo(child);\n\t\tassertThat(getEnumAttribute(utilsMeta).getClass().getClassLoader()).isEqualTo(\n\t\t\t\tparent);\n\t\tassertThat(utilsMeta).isEqualTo(metaAnnotation);\n\t}\n\n\tprivate Class<?> getClassAttribute(Annotation annotation) throws Exception {\n\t\treturn (Class<?>) getAttributeValue(annotation, \"classValue\");\n\t}\n\n\tprivate Enum<?> getEnumAttribute(Annotation annotation) throws Exception {\n\t\treturn (Enum<?>) getAttributeValue(annotation, \"enumValue\");\n\t}\n\n\tprivate Object getAttributeValue(Annotation annotation, String name)\n\t\t\tthrows Exception {\n\t\tMethod classValueMethod = annotation.annotationType().getDeclaredMethod(name);\n\t\tclassValueMethod.setAccessible(true);\n\t\treturn classValueMethod.invoke(annotation);\n\t}\n\n\tprivate Annotation getDeclaredAnnotation(Class<?> element, String annotationType) {\n\t\tfor (Annotation annotation : element.getDeclaredAnnotations()) {\n\t\t\tif (annotation.annotationType().getName().equals(annotationType)) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static class TestClassLoader extends OverridingClassLoader {\n\n\t\tpublic TestClassLoader(ClassLoader parent) {\n\t\t\tsuper(parent);\n\t\t}\n\n\t\t@Override\n\t\tprotected boolean isEligibleForOverriding(String className) {\n\t\t\treturn WITH_TEST_ANNOTATION.equals(className)\n\t\t\t\t\t|| TEST_ANNOTATION.equals(className)\n\t\t\t\t\t|| TEST_REFERENCE.equals(className);\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestMetaAnnotation {\n\n\t\t@AliasFor(\"d\")\n\t\tString c() default \"\";\n\n\t\t@AliasFor(\"c\")\n\t\tString d() default \"\";\n\n\t\tClass<?> classValue();\n\n\t\tTestEnum enumValue();\n\n\t}\n\n\t@TestMetaAnnotation(classValue = TestReference.class, enumValue = TestEnum.TWO)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation {\n\n\t\t@AliasFor(\"b\")\n\t\tString a() default \"\";\n\n\t\t@AliasFor(\"a\")\n\t\tString b() default \"\";\n\n\t}\n\n\t@TestAnnotation\n\tstatic class WithTestAnnotation {\n\t}\n\n\tstatic class TestReference {\n\t}\n\n\tenum TestEnum {\n\t\tONE, TWO, THREE\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation.TestClassLoader#isEligibleForOverriding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\nprotected boolean isEligibleForOverriding(String className) {\r\n    return WITH_TEST_ANNOTATION.equals(className) || TEST_ANNOTATION.equals(className) || TEST_REFERENCE.equals(className);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.TestClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.TestClassLoader#isEligibleForOverriding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.TestClassLoader#isEligibleForOverriding(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.TestClassLoader",
    "headType": "class",
    "relation": "extend",
    "tail": "OverridingClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.WithTestAnnotation",
    "tailType": "class"
  }
]