[
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#setBindings(Map<String,String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set the bindings for this namespace context.\r\n * The supplied map must consist of string key value pairs.\r\n */\r\npublic void setBindings(Map<String, String> bindings) {\r\n    bindings.forEach(this::bindNamespaceUri);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#setBindings(Map<String,String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#bindDefaultNamespaceUri(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Bind the given namespace as default namespace.\r\n * @param namespaceUri the namespace uri\r\n */\r\npublic void bindDefaultNamespaceUri(String namespaceUri) {\r\n    bindNamespaceUri(XMLConstants.DEFAULT_NS_PREFIX, namespaceUri);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#bindDefaultNamespaceUri(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#bindNamespaceUri(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Bind the given prefix to the given namespace.\r\n * @param prefix the namespace prefix\r\n * @param namespaceUri the namespace URI\r\n */\r\npublic void bindNamespaceUri(String prefix, String namespaceUri) {\r\n    Assert.notNull(prefix, \"'prefix' must not be null\");\r\n    Assert.notNull(namespaceUri, \"'namespaceUri' must not be null\");\r\n    if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\r\n        this.defaultNamespaceUri = namespaceUri;\r\n    } else {\r\n        this.prefixToNamespaceUri.put(prefix, namespaceUri);\r\n        Set<String> prefixes = this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());\r\n        prefixes.add(prefix);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#bindNamespaceUri(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#removeBinding(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove the given prefix from this context.\r\n * @param prefix the prefix to be removed\r\n */\r\npublic void removeBinding(@Nullable String prefix) {\r\n    if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\r\n        this.defaultNamespaceUri = \"\";\r\n    } else if (prefix != null) {\r\n        String namespaceUri = this.prefixToNamespaceUri.remove(prefix);\r\n        if (namespaceUri != null) {\r\n            Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);\r\n            if (prefixes != null) {\r\n                prefixes.remove(prefix);\r\n                if (prefixes.isEmpty()) {\r\n                    this.namespaceUriToPrefixes.remove(namespaceUri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#removeBinding(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#clear()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Remove all declared prefixes.\r\n */\r\npublic void clear() {\r\n    this.prefixToNamespaceUri.clear();\r\n    this.namespaceUriToPrefixes.clear();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#clear()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext#getBoundPrefixes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return all declared prefixes.\r\n */\r\npublic Iterator<String> getBoundPrefixes() {\r\n    return this.prefixToNamespaceUri.keySet().iterator();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleNamespaceContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleNamespaceContext#getBoundPrefixes()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.xml",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.xml",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.xml;\n\nimport org.apache.commons.logging.Log;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\n/**\n * Simple {@code org.xml.sax.ErrorHandler} implementation:\n * logs warnings using the given Commons Logging logger instance,\n * and rethrows errors to discontinue the XML transformation.\n *\n * @author Juergen Hoeller\n * @since 1.2\n */\npublic class SimpleSaxErrorHandler implements ErrorHandler {\n\n\tprivate final Log logger;\n\n\n\t/**\n\t * Create a new SimpleSaxErrorHandler for the given\n\t * Commons Logging logger instance.\n\t */\n\tpublic SimpleSaxErrorHandler(Log logger) {\n\t\tthis.logger = logger;\n\t}\n\n\n\t@Override\n\tpublic void warning(SAXParseException ex) throws SAXException {\n\t\tlogger.warn(\"Ignored XML validation warning\", ex);\n\t}\n\n\t@Override\n\tpublic void error(SAXParseException ex) throws SAXException {\n\t\tthrow ex;\n\t}\n\n\t@Override\n\tpublic void fatalError(SAXParseException ex) throws SAXException {\n\t\tthrow ex;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.xml.SimpleSaxErrorHandler#logger",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#logger",
    "headType": "field",
    "relation": "haveType",
    "tail": "Log",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#warning(SAXParseException)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void warning(SAXParseException ex) throws SAXException {\r\n    logger.warn(\"Ignored XML validation warning\", ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.xml.SimpleSaxErrorHandler#warning(SAXParseException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.xml.SimpleSaxErrorHandler#warning(SAXParseException)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]