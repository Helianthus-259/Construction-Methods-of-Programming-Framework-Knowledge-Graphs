[
  {
    "head": "org.springframework.util.Assert#notEmpty(Collection<?>,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#noNullElements(Collection<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a collection contains no {@code null} elements.\r\n * <p>Note: Does not complain if the collection is empty!\r\n * <pre class=\"code\">Assert.noNullElements(collection, \"Collection must contain non-null elements\");</pre>\r\n * @param collection the collection to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the collection contains a {@code null} element\r\n * @since 5.2\r\n */\r\npublic static void noNullElements(@Nullable Collection<?> collection, String message) {\r\n    if (collection != null) {\r\n        for (Object element : collection) {\r\n            if (element == null) {\r\n                throw new IllegalArgumentException(message);\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#noNullElements(Collection<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#noNullElements(Collection<?>,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a collection contains no {@code null} elements.\r\n * <p>Note: Does not complain if the collection is empty!\r\n * <pre class=\"code\">\r\n * Assert.noNullElements(collection, () -&gt; \"Collection \" + collectionName + \" must contain non-null elements\");\r\n * </pre>\r\n * @param collection the collection to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the collection contains a {@code null} element\r\n * @since 5.2\r\n */\r\npublic static void noNullElements(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {\r\n    if (collection != null) {\r\n        for (Object element : collection) {\r\n            if (element == null) {\r\n                throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n            }\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#noNullElements(Collection<?>,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Map<?,?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a Map contains entries; that is, it must not be {@code null}\r\n * and must contain at least one entry.\r\n * <pre class=\"code\">Assert.notEmpty(map, \"Map must contain entries\");</pre>\r\n * @param map the map to check\r\n * @param message the exception message to use if the assertion fails\r\n * @throws IllegalArgumentException if the map is {@code null} or contains no entries\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(@Nullable Map<?, ?> map, String message) {\r\n    if (CollectionUtils.isEmpty(map)) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Map<?,?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Map<?,?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Map<?,?>,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that a Map contains entries; that is, it must not be {@code null}\r\n * and must contain at least one entry.\r\n * <pre class=\"code\">\r\n * Assert.notEmpty(map, () -&gt; \"The \" + mapType + \" map must contain entries\");\r\n * </pre>\r\n * @param map the map to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails\r\n * @throws IllegalArgumentException if the map is {@code null} or contains no entries\r\n * @since 5.0\r\n */\r\n@Contract(\"null, _ -> fail\")\r\npublic static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {\r\n    if (CollectionUtils.isEmpty(map)) {\r\n        throw new IllegalArgumentException(nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#notEmpty(Map<?,?>,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#notEmpty(Map<?,?>,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the provided object is an instance of the provided class.\r\n * <pre class=\"code\">Assert.instanceOf(Foo.class, foo, \"Foo expected\");</pre>\r\n * @param type the type to check against\r\n * @param obj the object to check\r\n * @param message a message which will be prepended to provide further context.\r\n * If it is empty or ends in \":\" or \";\" or \",\" or \".\", a full exception message\r\n * will be appended. If it ends in a space, the name of the offending object's\r\n * type will be appended. In any other case, a \":\" with a space and the name\r\n * of the offending object's type will be appended.\r\n * @throws IllegalArgumentException if the object is not an instance of type\r\n */\r\n@Contract(\"_, null, _ -> fail\")\r\npublic static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {\r\n    notNull(type, \"Type to check against must not be null\");\r\n    if (!type.isInstance(obj)) {\r\n        instanceCheckFailed(type, obj, message);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,Supplier<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the provided object is an instance of the provided class.\r\n * <pre class=\"code\">\r\n * Assert.instanceOf(Foo.class, foo, () -&gt; \"Processing \" + Foo.class.getSimpleName() + \":\");\r\n * </pre>\r\n * @param type the type to check against\r\n * @param obj the object to check\r\n * @param messageSupplier a supplier for the exception message to use if the\r\n * assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details.\r\n * @throws IllegalArgumentException if the object is not an instance of type\r\n * @since 5.0\r\n */\r\n@Contract(\"_, null, _ -> fail\")\r\npublic static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {\r\n    notNull(type, \"Type to check against must not be null\");\r\n    if (!type.isInstance(obj)) {\r\n        instanceCheckFailed(type, obj, nullSafeGet(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,Supplier<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object,Supplier<String>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Assert that the provided object is an instance of the provided class.\r\n * <pre class=\"code\">Assert.instanceOf(Foo.class, foo);</pre>\r\n * @param type the type to check against\r\n * @param obj the object to check\r\n * @throws IllegalArgumentException if the object is not an instance of type\r\n */\r\n@Contract(\"_, null -> fail\")\r\npublic static void isInstanceOf(Class<?> type, @Nullable Object obj) {\r\n    isInstanceOf(type, obj, \"\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Assert",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Assert#isInstanceOf(Class<?>,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Contract",
    "tailType": "annotation"
  }
]