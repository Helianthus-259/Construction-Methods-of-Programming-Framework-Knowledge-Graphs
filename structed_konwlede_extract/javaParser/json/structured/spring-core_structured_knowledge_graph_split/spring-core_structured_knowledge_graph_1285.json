[
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#createReferenceManager()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Factory method that returns the {@link ReferenceManager}.\r\n * This method will be called once for each {@link Segment}.\r\n * @return a new reference manager\r\n */\r\nprotected ReferenceManager createReferenceManager() {\r\n    return new ReferenceManager();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#createReferenceManager()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getHash(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the hash for a given object, apply an additional hash function to reduce\r\n * collisions. This implementation uses the same Wang/Jenkins algorithm as\r\n * {@link ConcurrentHashMap}. Subclasses can override to provide alternative hashing.\r\n * @param o the object to hash (may be null)\r\n * @return the resulting hash code\r\n */\r\nprotected int getHash(@Nullable Object o) {\r\n    int hash = (o != null ? o.hashCode() : 0);\r\n    hash += (hash << 15) ^ 0xffffcd7d;\r\n    hash ^= (hash >>> 10);\r\n    hash += (hash << 3);\r\n    hash ^= (hash >>> 6);\r\n    hash += (hash << 2) + (hash << 14);\r\n    hash ^= (hash >>> 16);\r\n    return hash;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#getHash(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#get(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V get(@Nullable Object key) {\r\n    Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);\r\n    Entry<K, V> entry = (ref != null ? ref.get() : null);\r\n    return (entry != null ? entry.getValue() : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#get(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#get(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#get(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\r\n    Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);\r\n    Entry<K, V> entry = (ref != null ? ref.get() : null);\r\n    return (entry != null ? entry.getValue() : defaultValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#getOrDefault(Object,V)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getOrDefault(Object,V)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#containsKey(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean containsKey(@Nullable Object key) {\r\n    Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);\r\n    Entry<K, V> entry = (ref != null ? ref.get() : null);\r\n    return (entry != null && ObjectUtils.nullSafeEquals(entry.getKey(), key));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#containsKey(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#containsKey(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getReference(Object,Restructure)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@link Reference} to the {@link Entry} for the specified {@code key},\r\n * or {@code null} if not found.\r\n * @param key the key (can be {@code null})\r\n * @param restructure types of restructure allowed during this call\r\n * @return the reference, or {@code null} if not found\r\n */\r\n@Nullable\r\nprotected final Reference<K, V> getReference(@Nullable Object key, Restructure restructure) {\r\n    int hash = getHash(key);\r\n    return getSegmentForHash(hash).getReference(key, hash, restructure);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#getReference(Object,Restructure)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#getReference(Object,Restructure)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic V put(@Nullable K key, @Nullable V value) {\r\n    return put(key, value, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ConcurrentReferenceHashMap",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ConcurrentReferenceHashMap#put(K,V)",
    "tailType": "method"
  }
]