[
  {
    "head": "org.springframework.util.ClassUtilsTests#getMethodCountForName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#countOverloadedMethods()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid countOverloadedMethods() {\r\n    assertThat(ClassUtils.hasAtLeastOneMethodWithName(TestObject.class, \"foobar\")).isFalse();\r\n    // no args\r\n    assertThat(ClassUtils.hasAtLeastOneMethodWithName(TestObject.class, \"hashCode\")).isTrue();\r\n    // matches although it takes an arg\r\n    assertThat(ClassUtils.hasAtLeastOneMethodWithName(TestObject.class, \"setAge\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#countOverloadedMethods()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#countOverloadedMethods()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isAssignable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignable() {\r\n    assertThat(ClassUtils.isAssignable(Object.class, Object.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(String.class, String.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(Object.class, String.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(Object.class, Integer.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(Number.class, Integer.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(Number.class, int.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(Integer.class, int.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(int.class, Integer.class)).isTrue();\r\n    assertThat(ClassUtils.isAssignable(String.class, Object.class)).isFalse();\r\n    assertThat(ClassUtils.isAssignable(Integer.class, Number.class)).isFalse();\r\n    assertThat(ClassUtils.isAssignable(Integer.class, double.class)).isFalse();\r\n    assertThat(ClassUtils.isAssignable(double.class, Integer.class)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#isAssignable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#isAssignable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#classPackageAsResourcePath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid classPackageAsResourcePath() {\r\n    String result = ClassUtils.classPackageAsResourcePath(Proxy.class);\r\n    assertThat(result).isEqualTo(\"java/lang/reflect\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#classPackageAsResourcePath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#classPackageAsResourcePath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#addResourcePathToPackagePath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid addResourcePathToPackagePath() {\r\n    String result = \"java/lang/reflect/xyzabc.xml\";\r\n    assertThat(ClassUtils.addResourcePathToPackagePath(Proxy.class, \"xyzabc.xml\")).isEqualTo(result);\r\n    assertThat(ClassUtils.addResourcePathToPackagePath(Proxy.class, \"/xyzabc.xml\")).isEqualTo(result);\r\n    assertThat(ClassUtils.addResourcePathToPackagePath(Proxy.class, \"a/b/c/d.xml\")).isEqualTo(\"java/lang/reflect/a/b/c/d.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#addResourcePathToPackagePath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#addResourcePathToPackagePath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getAllInterfaces()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getAllInterfaces() {\r\n    DerivedTestObject testBean = new DerivedTestObject();\r\n    List<Class<?>> ifcs = Arrays.asList(ClassUtils.getAllInterfaces(testBean));\r\n    assertThat(ifcs).as(\"Correct number of interfaces\").hasSize(4);\r\n    assertThat(ifcs.contains(Serializable.class)).as(\"Contains Serializable\").isTrue();\r\n    assertThat(ifcs.contains(ITestObject.class)).as(\"Contains ITestBean\").isTrue();\r\n    assertThat(ifcs.contains(ITestInterface.class)).as(\"Contains IOther\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#getAllInterfaces()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#getAllInterfaces()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#classNamesToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid classNamesToString() {\r\n    List<Class<?>> ifcs = new ArrayList<>();\r\n    ifcs.add(Serializable.class);\r\n    ifcs.add(Runnable.class);\r\n    assertThat(ifcs.toString()).isEqualTo(\"[interface java.io.Serializable, interface java.lang.Runnable]\");\r\n    assertThat(ClassUtils.classNamesToString(ifcs)).isEqualTo(\"[java.io.Serializable, java.lang.Runnable]\");\r\n    List<Class<?>> classes = new ArrayList<>();\r\n    classes.add(ArrayList.class);\r\n    classes.add(Integer.class);\r\n    assertThat(classes.toString()).isEqualTo(\"[class java.util.ArrayList, class java.lang.Integer]\");\r\n    assertThat(ClassUtils.classNamesToString(classes)).isEqualTo(\"[java.util.ArrayList, java.lang.Integer]\");\r\n    assertThat(Collections.singletonList(List.class).toString()).isEqualTo(\"[interface java.util.List]\");\r\n    assertThat(ClassUtils.classNamesToString(List.class)).isEqualTo(\"[java.util.List]\");\r\n    assertThat(Collections.EMPTY_LIST.toString()).isEqualTo(\"[]\");\r\n    assertThat(ClassUtils.classNamesToString(Collections.emptyList())).isEqualTo(\"[]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ClassUtilsTests#classNamesToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#classNamesToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ClassUtilsTests#determineCommonAncestor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid determineCommonAncestor() {\r\n    assertThat(ClassUtils.determineCommonAncestor(Integer.class, Number.class)).isEqualTo(Number.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Number.class, Integer.class)).isEqualTo(Number.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Number.class, null)).isEqualTo(Number.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(null, Integer.class)).isEqualTo(Integer.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Integer.class, Integer.class)).isEqualTo(Integer.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Integer.class, Float.class)).isEqualTo(Number.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Float.class, Integer.class)).isEqualTo(Number.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Integer.class, String.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(String.class, Integer.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, Collection.class)).isEqualTo(Collection.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Collection.class, List.class)).isEqualTo(Collection.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(Collection.class, null)).isEqualTo(Collection.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(null, List.class)).isEqualTo(List.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, List.class)).isEqualTo(List.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, Set.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(Set.class, List.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, Runnable.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(Runnable.class, List.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, ArrayList.class)).isEqualTo(List.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(ArrayList.class, List.class)).isEqualTo(List.class);\r\n    assertThat(ClassUtils.determineCommonAncestor(List.class, String.class)).isNull();\r\n    assertThat(ClassUtils.determineCommonAncestor(String.class, List.class)).isNull();\r\n}",
    "tailType": "method_code"
  }
]