[
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#retainedSlice(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#retainedSlice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#retainedSlice(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#split(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic NettyDataBuffer split(int index) {\r\n    ByteBuf split = this.byteBuf.retainedSlice(0, index);\r\n    int writerIndex = this.byteBuf.writerIndex();\r\n    int readerIndex = this.byteBuf.readerIndex();\r\n    split.writerIndex(Math.min(writerIndex, index));\r\n    split.readerIndex(Math.min(readerIndex, index));\r\n    this.byteBuf = this.byteBuf.slice(index, this.byteBuf.capacity() - index);\r\n    this.byteBuf.writerIndex(Math.max(writerIndex, index) - index);\r\n    this.byteBuf.readerIndex(Math.max(readerIndex, index) - index);\r\n    return new NettyDataBuffer(split, this.dataBufferFactory);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#split(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#split(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic ByteBuffer asByteBuffer() {\r\n    return this.byteBuf.nioBuffer();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic ByteBuffer asByteBuffer(int index, int length) {\r\n    return this.byteBuf.nioBuffer(index, length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#asByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic ByteBuffer toByteBuffer(int index, int length) {\r\n    ByteBuffer result = this.byteBuf.isDirect() ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length);\r\n    this.byteBuf.getBytes(index, result);\r\n    return result.flip();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,ByteBuffer,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void toByteBuffer(int srcPos, ByteBuffer dest, int destPos, int length) {\r\n    Assert.notNull(dest, \"Dest must not be null\");\r\n    dest = dest.duplicate().clear();\r\n    dest.put(destPos, this.byteBuf.nioBuffer(srcPos, length), 0, length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.NettyDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.NettyDataBuffer#toByteBuffer(int,ByteBuffer,int,int)",
    "tailType": "method"
  }
]