[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnInheritedAnnotationInterface() {\r\n    Transactional tx = findAnnotation(InheritedAnnotationInterface.class, Transactional.class);\r\n    assertThat(tx).as(\"Should find @Transactional on InheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnSubInheritedAnnotationInterface() {\r\n    Transactional tx = findAnnotation(SubInheritedAnnotationInterface.class, Transactional.class);\r\n    assertThat(tx).as(\"Should find @Transactional on SubInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnSubSubInheritedAnnotationInterface() {\r\n    Transactional tx = findAnnotation(SubSubInheritedAnnotationInterface.class, Transactional.class);\r\n    assertThat(tx).as(\"Should find @Transactional on SubSubInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnNonInheritedAnnotationInterface() {\r\n    Order order = findAnnotation(NonInheritedAnnotationInterface.class, Order.class);\r\n    assertThat(order).as(\"Should find @Order on NonInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnSubNonInheritedAnnotationInterface() {\r\n    Order order = findAnnotation(SubNonInheritedAnnotationInterface.class, Order.class);\r\n    assertThat(order).as(\"Should find @Order on SubNonInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findClassAnnotationOnSubSubNonInheritedAnnotationInterface() {\r\n    Order order = findAnnotation(SubSubNonInheritedAnnotationInterface.class, Order.class);\r\n    assertThat(order).as(\"Should find @Order on SubSubNonInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findClassAnnotationOnSubSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findAnnotationDeclaringClassForAllScenarios() {\r\n    // no class-level annotation\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, NonAnnotatedInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, NonAnnotatedClass.class)).isNull();\r\n    // inherited class-level annotation; note: @Transactional is inherited\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, InheritedAnnotationInterface.class)).isEqualTo(InheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, SubInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, InheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClass(Transactional.class, SubInheritedAnnotationClass.class)).isEqualTo(InheritedAnnotationClass.class);\r\n    // non-inherited class-level annotation; note: @Order is not inherited,\r\n    // but findAnnotationDeclaringClass() should still find it on classes.\r\n    assertThat(findAnnotationDeclaringClass(Order.class, NonInheritedAnnotationInterface.class)).isEqualTo(NonInheritedAnnotationInterface.class);\r\n    assertThat(findAnnotationDeclaringClass(Order.class, SubNonInheritedAnnotationInterface.class)).isNull();\r\n    assertThat(findAnnotationDeclaringClass(Order.class, NonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n    assertThat(findAnnotationDeclaringClass(Order.class, SubNonInheritedAnnotationClass.class)).isEqualTo(NonInheritedAnnotationClass.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findAnnotationDeclaringClassForAllScenarios()",
    "tailType": "method"
  }
]