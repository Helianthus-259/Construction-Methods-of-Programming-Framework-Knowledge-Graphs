[
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService#sharedInstance",
    "headType": "field",
    "relation": "haveType",
    "tail": "DefaultConversionService",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService#getSharedInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a shared default {@code ConversionService} instance,\r\n * lazily building it once needed.\r\n * <p><b>NOTE:</b> We highly recommend constructing individual\r\n * {@code ConversionService} instances for customization purposes.\r\n * This accessor is only meant as a fallback for code paths which\r\n * need simple type coercion but cannot access a longer-lived\r\n * {@code ConversionService} instance any other way.\r\n * @return the shared {@code ConversionService} instance (never {@code null})\r\n * @since 4.3.5\r\n */\r\npublic static ConversionService getSharedInstance() {\r\n    DefaultConversionService cs = sharedInstance;\r\n    if (cs == null) {\r\n        synchronized (DefaultConversionService.class) {\r\n            cs = sharedInstance;\r\n            if (cs == null) {\r\n                cs = new DefaultConversionService();\r\n                sharedInstance = cs;\r\n            }\r\n        }\r\n    }\r\n    return cs;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.DefaultConversionService#getSharedInstance()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService#addDefaultConverters(ConverterRegistry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add converters appropriate for most environments.\r\n * @param converterRegistry the registry of converters to add to\r\n * (must also be castable to ConversionService, for example, being a {@link ConfigurableConversionService})\r\n * @throws ClassCastException if the given ConverterRegistry could not be cast to a ConversionService\r\n */\r\npublic static void addDefaultConverters(ConverterRegistry converterRegistry) {\r\n    addScalarConverters(converterRegistry);\r\n    addCollectionConverters(converterRegistry);\r\n    converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));\r\n    converterRegistry.addConverter(new StringToTimeZoneConverter());\r\n    converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());\r\n    converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());\r\n    converterRegistry.addConverter(new ObjectToObjectConverter());\r\n    converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));\r\n    converterRegistry.addConverter(new FallbackObjectToStringConverter());\r\n    converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.DefaultConversionService#addDefaultConverters(ConverterRegistry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService#addCollectionConverters(ConverterRegistry)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Add common collection converters.\r\n * @param converterRegistry the registry of converters to add to\r\n * (must also be castable to ConversionService, for example, being a {@link ConfigurableConversionService})\r\n * @throws ClassCastException if the given ConverterRegistry could not be cast to a ConversionService\r\n * @since 4.2.3\r\n */\r\npublic static void addCollectionConverters(ConverterRegistry converterRegistry) {\r\n    ConversionService conversionService = (ConversionService) converterRegistry;\r\n    converterRegistry.addConverter(new ArrayToCollectionConverter(conversionService));\r\n    converterRegistry.addConverter(new CollectionToArrayConverter(conversionService));\r\n    converterRegistry.addConverter(new ArrayToArrayConverter(conversionService));\r\n    converterRegistry.addConverter(new CollectionToCollectionConverter(conversionService));\r\n    converterRegistry.addConverter(new MapToMapConverter(conversionService));\r\n    converterRegistry.addConverter(new ArrayToStringConverter(conversionService));\r\n    converterRegistry.addConverter(new StringToArrayConverter(conversionService));\r\n    converterRegistry.addConverter(new ArrayToObjectConverter(conversionService));\r\n    converterRegistry.addConverter(new ObjectToArrayConverter(conversionService));\r\n    converterRegistry.addConverter(new CollectionToStringConverter(conversionService));\r\n    converterRegistry.addConverter(new StringToCollectionConverter(conversionService));\r\n    converterRegistry.addConverter(new CollectionToObjectConverter(conversionService));\r\n    converterRegistry.addConverter(new ObjectToCollectionConverter(conversionService));\r\n    converterRegistry.addConverter(new StreamConverter(conversionService));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.DefaultConversionService#addCollectionConverters(ConverterRegistry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService#addScalarConverters(ConverterRegistry)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static void addScalarConverters(ConverterRegistry converterRegistry) {\r\n    converterRegistry.addConverterFactory(new NumberToNumberConverterFactory());\r\n    converterRegistry.addConverterFactory(new StringToNumberConverterFactory());\r\n    converterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new StringToCharacterConverter());\r\n    converterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new NumberToCharacterConverter());\r\n    converterRegistry.addConverterFactory(new CharacterToNumberFactory());\r\n    converterRegistry.addConverter(new StringToBooleanConverter());\r\n    converterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverterFactory(new StringToEnumConverterFactory());\r\n    converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));\r\n    converterRegistry.addConverterFactory(new IntegerToEnumConverterFactory());\r\n    converterRegistry.addConverter(new EnumToIntegerConverter((ConversionService) converterRegistry));\r\n    converterRegistry.addConverter(new StringToLocaleConverter());\r\n    converterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new StringToCharsetConverter());\r\n    converterRegistry.addConverter(Charset.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new StringToCurrencyConverter());\r\n    converterRegistry.addConverter(Currency.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new StringToPropertiesConverter());\r\n    converterRegistry.addConverter(new PropertiesToStringConverter());\r\n    converterRegistry.addConverter(new StringToUUIDConverter());\r\n    converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());\r\n    converterRegistry.addConverter(new StringToPatternConverter());\r\n    converterRegistry.addConverter(Pattern.class, String.class, new ObjectToStringConverter());\r\n    if (KotlinDetector.isKotlinPresent()) {\r\n        converterRegistry.addConverter(new StringToRegexConverter());\r\n        converterRegistry.addConverter(kotlin.text.Regex.class, String.class, new ObjectToStringConverter());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.DefaultConversionService#addScalarConverters(ConverterRegistry)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.DefaultConversionService",
    "headType": "class",
    "relation": "extend",
    "tail": "GenericConversionService",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.EnumToIntegerConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToIntegerConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Calls {@link Enum#ordinal()} to convert a source Enum to an Integer.\n * This converter will not match enums with interfaces that can be converted.\n *\n * @author Yanming Zhou\n * @since 4.3\n */\nfinal class EnumToIntegerConverter extends AbstractConditionalEnumConverter implements Converter<Enum<?>, Integer> {\n\n\tpublic EnumToIntegerConverter(ConversionService conversionService) {\n\t\tsuper(conversionService);\n\t}\n\n\t@Override\n\tpublic Integer convert(Enum<?> source) {\n\t\treturn source.ordinal();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToIntegerConverter#convert(Enum<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Integer convert(Enum<?> source) {\r\n    return source.ordinal();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToIntegerConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.EnumToIntegerConverter#convert(Enum<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToIntegerConverter#convert(Enum<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToIntegerConverter",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractConditionalEnumConverter",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.EnumToStringConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.EnumToStringConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.converter.Converter;\n\n/**\n * Calls {@link Enum#name()} to convert a source Enum to a String.\n * This converter will not match enums with interfaces that can be converted.\n *\n * @author Keith Donald\n * @author Phillip Webb\n * @since 3.0\n */\nfinal class EnumToStringConverter extends AbstractConditionalEnumConverter implements Converter<Enum<?>, String> {\n\n\tpublic EnumToStringConverter(ConversionService conversionService) {\n\t\tsuper(conversionService);\n\t}\n\n\t@Override\n\tpublic String convert(Enum<?> source) {\n\t\treturn source.name();\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]