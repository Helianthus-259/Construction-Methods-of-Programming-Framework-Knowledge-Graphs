[
  {
    "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#multiplRoutesToMetaAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid defaultValue() {\r\n    DefaultValueAnnotation synthesized = MergedAnnotations.from(WithDefaultValue.class).get(DefaultValueAnnotation.class).synthesize();\r\n    assertThat(AnnotationUtils.isSynthesizedAnnotation(synthesized)).as(\"synthesized annotation\").isTrue();\r\n    Object defaultValue = AnnotationUtils.getDefaultValue(synthesized, \"enumValue\");\r\n    assertThat(defaultValue).isEqualTo(TestEnum.ONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationBackCompatibilityTests#defaultValue()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
    "headType": "class",
    "relation": "use",
    "tail": "@MetaMetaTestAnnotation",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
    "headType": "class",
    "relation": "use",
    "tail": "@TestAndMetaTestAnnotation",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.WithMetaMetaTestAnnotation1AndMetaTestAnnotation2",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests to ensure back-compatibility with Spring Framework 5.1.\n *\n * @author Phillip Webb\n * @since 5.2\n */\nclass AnnotationBackCompatibilityTests {\n\n\t@Test\n\tvoid multiplRoutesToMetaAnnotation() {\n\t\tClass<?> source = WithMetaMetaTestAnnotation1AndMetaTestAnnotation2.class;\n\t\t// Merged annotation chooses lowest depth\n\t\tMergedAnnotation<TestAnnotation> mergedAnnotation = MergedAnnotations.from(source).get(TestAnnotation.class);\n\t\tassertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"testAndMetaTest\");\n\t\t// AnnotatedElementUtils finds first\n\t\tTestAnnotation previousVersion = AnnotatedElementUtils.getMergedAnnotation(source, TestAnnotation.class);\n\t\tassertThat(previousVersion.value()).isEqualTo(\"metaTest\");\n\t}\n\n\t@Test\n\tvoid defaultValue() {\n\t\tDefaultValueAnnotation synthesized = MergedAnnotations.from(WithDefaultValue.class).get(DefaultValueAnnotation.class).synthesize();\n\t\tassertThat(AnnotationUtils.isSynthesizedAnnotation(synthesized)).as(\"synthesized annotation\").isTrue();\n\t\tObject defaultValue = AnnotationUtils.getDefaultValue(synthesized, \"enumValue\");\n\t\tassertThat(defaultValue).isEqualTo(TestEnum.ONE);\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation {\n\n\t\tString value();\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@TestAnnotation(\"metaTest\")\n\t@interface MetaTestAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@TestAnnotation(\"testAndMetaTest\")\n\t@MetaTestAnnotation\n\t@interface TestAndMetaTestAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaTestAnnotation\n\t@interface MetaMetaTestAnnotation {\n\t}\n\n\t@MetaMetaTestAnnotation\n\t@TestAndMetaTestAnnotation\n\tstatic class WithMetaMetaTestAnnotation1AndMetaTestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface DefaultValueAnnotation {\n\n\t\t@AliasFor(\"enumAlias\")\n\t\tTestEnum enumValue() default TestEnum.ONE;\n\n\t\t@AliasFor(\"enumValue\")\n\t\tTestEnum enumAlias() default TestEnum.ONE;\n\n\t}\n\n\t@DefaultValueAnnotation\n\tstatic class WithDefaultValue {\n\t}\n\n\tenum TestEnum {\n\n\t\tONE,\n\n\t\tTWO\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.WithDefaultValue",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.WithDefaultValue",
    "headType": "class",
    "relation": "use",
    "tail": "@DefaultValueAnnotation",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.WithDefaultValue",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests to ensure back-compatibility with Spring Framework 5.1.\n *\n * @author Phillip Webb\n * @since 5.2\n */\nclass AnnotationBackCompatibilityTests {\n\n\t@Test\n\tvoid multiplRoutesToMetaAnnotation() {\n\t\tClass<?> source = WithMetaMetaTestAnnotation1AndMetaTestAnnotation2.class;\n\t\t// Merged annotation chooses lowest depth\n\t\tMergedAnnotation<TestAnnotation> mergedAnnotation = MergedAnnotations.from(source).get(TestAnnotation.class);\n\t\tassertThat(mergedAnnotation.getString(\"value\")).isEqualTo(\"testAndMetaTest\");\n\t\t// AnnotatedElementUtils finds first\n\t\tTestAnnotation previousVersion = AnnotatedElementUtils.getMergedAnnotation(source, TestAnnotation.class);\n\t\tassertThat(previousVersion.value()).isEqualTo(\"metaTest\");\n\t}\n\n\t@Test\n\tvoid defaultValue() {\n\t\tDefaultValueAnnotation synthesized = MergedAnnotations.from(WithDefaultValue.class).get(DefaultValueAnnotation.class).synthesize();\n\t\tassertThat(AnnotationUtils.isSynthesizedAnnotation(synthesized)).as(\"synthesized annotation\").isTrue();\n\t\tObject defaultValue = AnnotationUtils.getDefaultValue(synthesized, \"enumValue\");\n\t\tassertThat(defaultValue).isEqualTo(TestEnum.ONE);\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface TestAnnotation {\n\n\t\tString value();\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@TestAnnotation(\"metaTest\")\n\t@interface MetaTestAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@TestAnnotation(\"testAndMetaTest\")\n\t@MetaTestAnnotation\n\t@interface TestAndMetaTestAnnotation {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@MetaTestAnnotation\n\t@interface MetaMetaTestAnnotation {\n\t}\n\n\t@MetaMetaTestAnnotation\n\t@TestAndMetaTestAnnotation\n\tstatic class WithMetaMetaTestAnnotation1AndMetaTestAnnotation2 {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface DefaultValueAnnotation {\n\n\t\t@AliasFor(\"enumAlias\")\n\t\tTestEnum enumValue() default TestEnum.ONE;\n\n\t\t@AliasFor(\"enumValue\")\n\t\tTestEnum enumAlias() default TestEnum.ONE;\n\n\t}\n\n\t@DefaultValueAnnotation\n\tstatic class WithDefaultValue {\n\t}\n\n\tenum TestEnum {\n\n\t\tONE,\n\n\t\tTWO\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.annotation",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
    "headType": "class",
    "relation": "use",
    "tail": "@AnnotationEnclosingClassSample.EnclosedOne",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationEnclosingClassSample",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n/**\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n */\n@AnnotationEnclosingClassSample.EnclosedOne\npublic class AnnotationEnclosingClassSample {\n\n\t@EnclosedTwo\n\tpublic static class EnclosedStatic {\n\n\t\t@EnclosedThree\n\t\tpublic static class EnclosedStaticStatic {\n\t\t}\n\n\t}\n\n\t@EnclosedTwo\n\tpublic class EnclosedInner {\n\n\t\t@EnclosedThree\n\t\tpublic class EnclosedInnerInner {\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedOne {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedTwo {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedThree {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.EnclosedStatic",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedStatic",
    "headType": "class",
    "relation": "use",
    "tail": "@EnclosedTwo",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.EnclosedStatic",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.annotation;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\n\n/**\n * Example class used to test {@link AnnotationsScanner} with enclosing classes.\n *\n * @author Phillip Webb\n * @since 5.2\n */\n@AnnotationEnclosingClassSample.EnclosedOne\npublic class AnnotationEnclosingClassSample {\n\n\t@EnclosedTwo\n\tpublic static class EnclosedStatic {\n\n\t\t@EnclosedThree\n\t\tpublic static class EnclosedStaticStatic {\n\t\t}\n\n\t}\n\n\t@EnclosedTwo\n\tpublic class EnclosedInner {\n\n\t\t@EnclosedThree\n\t\tpublic class EnclosedInnerInner {\n\t\t}\n\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedOne {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedTwo {\n\t}\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@interface EnclosedThree {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.annotation",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.annotation.EnclosedStaticStatic",
    "tailType": "class"
  }
]