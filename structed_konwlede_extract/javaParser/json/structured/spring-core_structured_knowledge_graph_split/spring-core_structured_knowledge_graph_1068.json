[
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#ignoreUnresolvablePlaceholders",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setAsText(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Treat the given text as a location pattern or comma delimited location patterns\r\n * and convert it to a Resource array.\r\n */\r\n@Override\r\npublic void setAsText(String text) {\r\n    String pattern = resolvePath(text).trim();\r\n    String[] locationPatterns = StringUtils.commaDelimitedListToStringArray(pattern);\r\n    if (locationPatterns.length == 1) {\r\n        setValue(getResources(locationPatterns[0]));\r\n    } else {\r\n        Resource[] resources = Arrays.stream(locationPatterns).map(String::trim).map(this::getResources).flatMap(Arrays::stream).toArray(Resource[]::new);\r\n        setValue(resources);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setAsText(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setAsText(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#getResources(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Resource[] getResources(String locationPattern) {\r\n    try {\r\n        return this.resourcePatternResolver.getResources(locationPattern);\r\n    } catch (IOException ex) {\r\n        throw new IllegalArgumentException(\"Could not resolve resource location pattern [\" + locationPattern + \"]: \" + ex.getMessage());\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#getResources(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setValue(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Treat the given value as a collection or array and convert it to a Resource array.\r\n * <p>Considers String elements as location patterns and takes Resource elements as-is.\r\n */\r\n@Override\r\npublic void setValue(Object value) throws IllegalArgumentException {\r\n    if (value instanceof Collection || (value instanceof Object[] && !(value instanceof Resource[]))) {\r\n        Collection<?> input = (value instanceof Collection<?> collection ? collection : Arrays.asList((Object[]) value));\r\n        Set<Resource> merged = new LinkedHashSet<>();\r\n        for (Object element : input) {\r\n            if (element instanceof String path) {\r\n                // A location pattern: resolve it into a Resource array.\r\n                // Might point to a single resource or to multiple resources.\r\n                String pattern = resolvePath(path.trim());\r\n                try {\r\n                    Resource[] resources = this.resourcePatternResolver.getResources(pattern);\r\n                    Collections.addAll(merged, resources);\r\n                } catch (IOException ex) {\r\n                    // ignore - might be an unresolved placeholder or non-existing base directory\r\n                    if (logger.isDebugEnabled()) {\r\n                        logger.debug(\"Could not retrieve resources for pattern '\" + pattern + \"'\", ex);\r\n                    }\r\n                }\r\n            } else if (element instanceof Resource resource) {\r\n                // A Resource object: add it to the result.\r\n                merged.add(resource);\r\n            } else {\r\n                throw new IllegalArgumentException(\"Cannot convert element [\" + element + \"] to [\" + Resource.class.getName() + \"]: only location String and Resource object supported\");\r\n            }\r\n        }\r\n        super.setValue(merged.toArray(new Resource[0]));\r\n    } else {\r\n        // An arbitrary value: probably a String or a Resource array.\r\n        // setAsText will be called for a String; a Resource array will be used as-is.\r\n        super.setValue(value);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setValue(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#setValue(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor#resolvePath(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given path, replacing placeholders with\r\n * corresponding system property values if necessary.\r\n * @param path the original file path\r\n * @return the resolved file path\r\n * @see PropertyResolver#resolvePlaceholders\r\n * @see PropertyResolver#resolveRequiredPlaceholders(String)\r\n */\r\nprotected String resolvePath(String path) {\r\n    if (this.propertyResolver == null) {\r\n        this.propertyResolver = new StandardEnvironment();\r\n    }\r\n    return (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) : this.propertyResolver.resolveRequiredPlaceholders(path));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourceArrayPropertyEditor#resolvePath(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourceArrayPropertyEditor",
    "headType": "class",
    "relation": "extend",
    "tail": "PropertyEditorSupport",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.io.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.ResourcePatternResolver",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.io.support;\n\nimport java.io.IOException;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\n\n/**\n * Strategy interface for resolving a location pattern (for example,\n * an Ant-style path pattern) into {@link Resource} objects.\n *\n * <p>This is an extension to the {@link org.springframework.core.io.ResourceLoader}\n * interface. A passed-in {@code ResourceLoader} (for example, an\n * {@link org.springframework.context.ApplicationContext} passed in via\n * {@link org.springframework.context.ResourceLoaderAware} when running in a context)\n * can be checked whether it implements this extended interface too.\n *\n * <p>{@link PathMatchingResourcePatternResolver} is a standalone implementation\n * that is usable outside an {@code ApplicationContext}, also used by\n * {@link ResourceArrayPropertyEditor} for populating {@code Resource} array bean\n * properties.\n *\n * <p>Can be used with any sort of location pattern &mdash; for example,\n * {@code \"/WEB-INF/*-context.xml\"}. However, input patterns have to match the\n * strategy implementation. This interface just specifies the conversion method\n * rather than a specific pattern format.\n *\n * <p>This interface also defines a {@value #CLASSPATH_ALL_URL_PREFIX} resource\n * prefix for all matching resources from the module path and the class path. Note\n * that the resource location may also contain placeholders &mdash; for example\n * {@code \"/beans-*.xml\"}. JAR files or different directories in the module path\n * or class path can contain multiple files of the same name.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 1.0.2\n * @see org.springframework.core.io.Resource\n * @see org.springframework.core.io.ResourceLoader\n * @see org.springframework.context.ApplicationContext\n * @see org.springframework.context.ResourceLoaderAware\n */\npublic interface ResourcePatternResolver extends ResourceLoader {\n\n\t/**\n\t * Pseudo URL prefix for all matching resources from the class path: {@code \"classpath*:\"}.\n\t * <p>This differs from ResourceLoader's {@code \"classpath:\"} URL prefix in\n\t * that it retrieves all matching resources for a given path &mdash; for\n\t * example, to locate all \"beans.xml\" files in the root of all deployed JAR\n\t * files you can use the location pattern {@code \"classpath*:/beans.xml\"}.\n\t * <p>As of Spring Framework 6.0, the semantics for the {@code \"classpath*:\"}\n\t * prefix have been expanded to include the module path as well as the class path.\n\t * @see org.springframework.core.io.ResourceLoader#CLASSPATH_URL_PREFIX\n\t */\n\tString CLASSPATH_ALL_URL_PREFIX = \"classpath*:\";\n\n\t/**\n\t * Resolve the given location pattern into {@code Resource} objects.\n\t * <p>Overlapping resource entries that point to the same physical\n\t * resource should be avoided, as far as possible. The result should\n\t * have set semantics.\n\t * @param locationPattern the location pattern to resolve\n\t * @return the corresponding {@code Resource} objects\n\t * @throws IOException in case of I/O errors\n\t */\n\tResource[] getResources(String locationPattern) throws IOException;\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.io.support.ResourcePatternResolver#CLASSPATH_ALL_URL_PREFIX",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver#CLASSPATH_ALL_URL_PREFIX",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver#getResources(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve the given location pattern into {@code Resource} objects.\r\n * <p>Overlapping resource entries that point to the same physical\r\n * resource should be avoided, as far as possible. The result should\r\n * have set semantics.\r\n * @param locationPattern the location pattern to resolve\r\n * @return the corresponding {@code Resource} objects\r\n * @throws IOException in case of I/O errors\r\n */\r\nResource[] getResources(String locationPattern) throws IOException;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.ResourcePatternResolver#getResources(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.ResourcePatternResolver",
    "headType": "class",
    "relation": "extend",
    "tail": "ResourceLoader",
    "tailType": "class"
  }
]