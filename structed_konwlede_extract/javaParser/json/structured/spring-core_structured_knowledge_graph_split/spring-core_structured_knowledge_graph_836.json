[
  {
    "head": "org.springframework.core.codec.CodecException",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.NestedRuntimeException;\n\n/**\n * General error that indicates a problem while encoding and decoding to and\n * from an Object stream.\n *\n * @author Sebastien Deleuze\n * @author Rossen Stoyanchev\n * @since 5.0\n */\n@SuppressWarnings(\"serial\")\npublic class CodecException extends NestedRuntimeException {\n\n\t/**\n\t * Create a new CodecException.\n\t * @param msg the detail message\n\t */\n\tpublic CodecException(@Nullable String msg) {\n\t\tsuper(msg);\n\t}\n\n\t/**\n\t * Create a new CodecException.\n\t * @param msg the detail message\n\t * @param cause root cause for the exception, if any\n\t */\n\tpublic CodecException(@Nullable String msg, @Nullable Throwable cause) {\n\t\tsuper(msg, cause);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.CodecException",
    "headType": "class",
    "relation": "extend",
    "tail": "NestedRuntimeException",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.DataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Simple pass-through decoder for {@link DataBuffer DataBuffers}.\n *\n * <p><strong>Note:</strong> The data buffers should be released via\n * {@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}\n * after they have been consumed. In addition, if using {@code Flux} or\n * {@code Mono} operators such as flatMap, reduce, and others that prefetch,\n * cache, and skip or filter out data items internally, please add\n * {@code doOnDiscard(DataBuffer.class, DataBufferUtils::release)} to the\n * composition chain to ensure cached data buffers are released prior to an\n * error or cancellation signal.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @since 5.0\n */\npublic class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer> {\n\n\tpublic DataBufferDecoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\treturn (DataBuffer.class.isAssignableFrom(elementType.toClass()) &&\n\t\t\t\tsuper.canDecode(elementType, mimeType));\n\t}\n\n\t@Override\n\tpublic Flux<DataBuffer> decode(Publisher<DataBuffer> input, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\treturn Flux.from(input);\n\t}\n\n\t@Override\n\tpublic DataBuffer decode(DataBuffer buffer, ResolvableType elementType,\n\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(Hints.getLogPrefix(hints) + \"Read \" + buffer.readableByteCount() + \" bytes\");\n\t\t}\n\t\treturn buffer;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    return (DataBuffer.class.isAssignableFrom(elementType.toClass()) && super.canDecode(elementType, mimeType));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferDecoder#canDecode(ResolvableType,MimeType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#canDecode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Flux<DataBuffer> decode(Publisher<DataBuffer> input, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    return Flux.from(input);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#decode(Publisher<DataBuffer>,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer decode(DataBuffer buffer, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(Hints.getLogPrefix(hints) + \"Read \" + buffer.readableByteCount() + \" bytes\");\r\n    }\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder#decode(DataBuffer,ResolvableType,MimeType,Map<String,Object>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.DataBufferDecoder",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDataBufferDecoder",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.codec",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.codec",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.codec.DataBufferEncoder",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.codec;\n\nimport java.util.Map;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.core.io.buffer.DataBufferFactory;\nimport org.springframework.util.MimeType;\nimport org.springframework.util.MimeTypeUtils;\n\n/**\n * Simple pass-through encoder for {@link DataBuffer DataBuffers}.\n *\n * @author Arjen Poutsma\n * @since 5.0\n */\npublic class DataBufferEncoder extends AbstractEncoder<DataBuffer> {\n\n\tpublic DataBufferEncoder() {\n\t\tsuper(MimeTypeUtils.ALL);\n\t}\n\n\n\t@Override\n\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n\t\tClass<?> clazz = elementType.toClass();\n\t\treturn super.canEncode(elementType, mimeType) && DataBuffer.class.isAssignableFrom(clazz);\n\t}\n\n\t@Override\n\tpublic Flux<DataBuffer> encode(Publisher<? extends DataBuffer> inputStream,\n\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n\t\t\t@Nullable Map<String, Object> hints) {\n\n\t\tFlux<DataBuffer> flux = Flux.from(inputStream);\n\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n\t\t\tflux = flux.doOnNext(buffer -> logValue(buffer, hints));\n\t\t}\n\t\treturn flux;\n\t}\n\n\t@Override\n\tpublic DataBuffer encodeValue(DataBuffer buffer, DataBufferFactory bufferFactory,\n\t\t\tResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n\n\t\tif (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {\n\t\t\tlogValue(buffer, hints);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate void logValue(DataBuffer buffer, @Nullable Map<String, Object> hints) {\n\t\tString logPrefix = Hints.getLogPrefix(hints);\n\t\tlogger.debug(logPrefix + \"Writing \" + buffer.readableByteCount() + \" bytes\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder#canEncode(ResolvableType,MimeType)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\r\n    Class<?> clazz = elementType.toClass();\r\n    return super.canEncode(elementType, mimeType) && DataBuffer.class.isAssignableFrom(clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.DataBufferEncoder",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.DataBufferEncoder#canEncode(ResolvableType,MimeType)",
    "tailType": "method"
  }
]