[
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeToMono()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeToMonoWithEmptyFlux()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid decodeToMonoWithEmptyFlux() {\r\n    Flux<DataBuffer> input = Flux.empty();\r\n    testDecodeToMono(input, String.class, step -> step.expectComplete().verify());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#decodeToMonoWithEmptyFlux()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#decodeToMonoWithEmptyFlux()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests#stringBuffer(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private DataBuffer stringBuffer(String value) {\r\n    byte[] bytes = value.getBytes(StandardCharsets.UTF_8);\r\n    DataBuffer buffer = this.bufferFactory.allocateBuffer(bytes.length);\r\n    buffer.write(bytes);\r\n    return buffer;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.codec.StringDecoderTests#stringBuffer(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.codec.StringDecoderTests",
    "headType": "class",
    "relation": "extend",
    "tail": "AbstractDecoderTests",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.CollectionFactoryTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.EnumMap;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NavigableMap;\nimport java.util.NavigableSet;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.springframework.core.CollectionFactory.createApproximateCollection;\nimport static org.springframework.core.CollectionFactory.createApproximateMap;\nimport static org.springframework.core.CollectionFactory.createCollection;\nimport static org.springframework.core.CollectionFactory.createMap;\n\n/**\n * Tests for {@link CollectionFactory}.\n *\n * @author Oliver Gierke\n * @author Sam Brannen\n * @since 4.1.4\n */\nclass CollectionFactoryTests {\n\n\t/**\n\t * The test demonstrates that the generics-based API for\n\t * {@link CollectionFactory#createApproximateCollection(Object, int)}\n\t * is not type-safe.\n\t * <p>Specifically, the parameterized type {@code E} is not bound to\n\t * the type of elements contained in the {@code collection} argument\n\t * passed to {@code createApproximateCollection()}. Thus casting the\n\t * value returned by {@link EnumSet#copyOf(EnumSet)} to\n\t * {@code (Collection<E>)} cannot guarantee that the returned collection\n\t * actually contains elements of type {@code E}.\n\t */\n\t@Test\n\tvoid createApproximateCollectionIsNotTypeSafeForEnumSet() {\n\t\tCollection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3);\n\n\t\t// Use a try-catch block to ensure that the exception is thrown as a result of the\n\t\t// next line and not as a result of the previous line.\n\n\t\t// Note that ints is of type Collection<Integer>, but the collection returned\n\t\t// by createApproximateCollection() is of type Collection<Color>. Thus, 42\n\t\t// cannot be cast to a Color.\n\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() ->\n\t\t\t\tints.add(42));\n\t}\n\n\t@Test\n\tvoid createCollectionIsNotTypeSafeForEnumSet() {\n\t\tCollection<Integer> ints = createCollection(EnumSet.class, Color.class, 3);\n\n\t\t// Use a try-catch block to ensure that the exception is thrown as a result of the\n\t\t// next line and not as a result of the previous line.\n\n\t\t// Note that ints is of type Collection<Integer>, but the collection returned\n\t\t// by createCollection() is of type Collection<Color>. Thus, 42 cannot be cast\n\t\t// to a Color.\n\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() ->\n\t\t\t\tints.add(42));\n\t}\n\n\t/**\n\t * The test demonstrates that the generics-based API for\n\t * {@link CollectionFactory#createApproximateMap(Object, int)}\n\t * is not type-safe.\n\t * <p>The reasoning is similar that described in\n\t * {@link #createApproximateCollectionIsNotTypeSafeForEnumSet}.\n\t */\n\t@Test\n\tvoid createApproximateMapIsNotTypeSafeForEnumMap() {\n\t\tEnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class);\n\t\tenumMap.put(Color.RED, 1);\n\t\tenumMap.put(Color.BLUE, 2);\n\t\tMap<String, Integer> map = createApproximateMap(enumMap, 3);\n\n\t\t// Use a try-catch block to ensure that the exception is thrown as a result of the\n\t\t// next line and not as a result of the previous line.\n\n\t\t// Note that the 'map' key must be of type String, but the keys in the map\n\t\t// returned by createApproximateMap() are of type Color. Thus \"foo\" cannot be\n\t\t// cast to a Color.\n\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() ->\n\t\t\t\tmap.put(\"foo\", 1));\n\t}\n\n\t@Test\n\tvoid createMapIsNotTypeSafeForEnumMap() {\n\t\tMap<String, Integer> map = createMap(EnumMap.class, Color.class, 3);\n\n\t\t// Use a try-catch block to ensure that the exception is thrown as a result of the\n\t\t// next line and not as a result of the previous line.\n\n\t\t// Note that the 'map' key must be of type String, but the keys in the map\n\t\t// returned by createMap() are of type Color. Thus \"foo\" cannot be cast to a\n\t\t// Color.\n\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() ->\n\t\t\t\tmap.put(\"foo\", 1));\n\t}\n\n\t@Test\n\tvoid createMapIsNotTypeSafeForLinkedMultiValueMap() {\n\t\tMap<String, Integer> map = createMap(MultiValueMap.class, null, 3);\n\n\t\t// Use a try-catch block to ensure that the exception is thrown as a result of the\n\t\t// next line and not as a result of the previous line.\n\n\t\t// Note: 'map' values must be of type Integer, but the values in the map\n\t\t// returned by createMap() are of type java.util.List. Thus 1 cannot be\n\t\t// cast to a List.\n\n\t\tassertThatExceptionOfType(ClassCastException.class).isThrownBy(() ->\n\t\t\t\tmap.put(\"foo\", 1));\n\t}\n\n\t@Test\n\tvoid createApproximateCollectionFromEmptyHashSet() {\n\t\tCollection<String> set = createApproximateCollection(new HashSet<>(), 2);\n\t\tassertThat(set).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateCollectionFromNonEmptyHashSet() {\n\t\tHashSet<String> hashSet = new HashSet<>();\n\t\thashSet.add(\"foo\");\n\t\tCollection<String> set = createApproximateCollection(hashSet, 2);\n\t\tassertThat(set).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateCollectionFromEmptyEnumSet() {\n\t\tCollection<Color> colors = createApproximateCollection(EnumSet.noneOf(Color.class), 2);\n\t\tassertThat(colors).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateCollectionFromNonEmptyEnumSet() {\n\t\tCollection<Color> colors = createApproximateCollection(EnumSet.of(Color.BLUE), 2);\n\t\tassertThat(colors).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateMapFromEmptyHashMap() {\n\t\tMap<String, String> map = createApproximateMap(new HashMap<>(), 2);\n\t\tassertThat(map).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateMapFromNonEmptyHashMap() {\n\t\tMap<String, String> hashMap = new HashMap<>();\n\t\thashMap.put(\"foo\", \"bar\");\n\t\tMap<String, String> map = createApproximateMap(hashMap, 2);\n\t\tassertThat(map).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateMapFromEmptyEnumMap() {\n\t\tMap<Color, String> colors = createApproximateMap(new EnumMap<>(Color.class), 2);\n\t\tassertThat(colors).isEmpty();\n\t}\n\n\t@Test\n\tvoid createApproximateMapFromNonEmptyEnumMap() {\n\t\tEnumMap<Color, String> enumMap = new EnumMap<>(Color.class);\n\t\tenumMap.put(Color.BLUE, \"blue\");\n\t\tMap<Color, String> colors = createApproximateMap(enumMap, 2);\n\t\tassertThat(colors).isEmpty();\n\t}\n\n\t@Test\n\tvoid createsCollectionsCorrectly() {\n\t\t// interfaces\n\t\ttestCollection(List.class, ArrayList.class);\n\t\ttestCollection(Set.class, LinkedHashSet.class);\n\t\ttestCollection(Collection.class, LinkedHashSet.class);\n\t\t// on JDK 21: testCollection(SequencedSet.class, LinkedHashSet.class);\n\t\t// on JDK 21: testCollection(SequencedCollection.class, LinkedHashSet.class);\n\t\ttestCollection(SortedSet.class, TreeSet.class);\n\t\ttestCollection(NavigableSet.class, TreeSet.class);\n\n\t\t// concrete types\n\t\ttestCollection(ArrayList.class, ArrayList.class);\n\t\ttestCollection(HashSet.class, HashSet.class);\n\t\ttestCollection(LinkedHashSet.class, LinkedHashSet.class);\n\t\ttestCollection(TreeSet.class, TreeSet.class);\n\t}\n\n\tprivate void testCollection(Class<?> collectionType, Class<?> resultType) {\n\t\tassertThat(CollectionFactory.isApproximableCollectionType(collectionType)).isTrue();\n\t\tassertThat(createCollection(collectionType, 0)).isExactlyInstanceOf(resultType);\n\t\tassertThat(createCollection(collectionType, String.class, 0)).isExactlyInstanceOf(resultType);\n\t}\n\n\t@Test\n\tvoid createsEnumSet() {\n\t\tassertThat(createCollection(EnumSet.class, Color.class, 0)).isInstanceOf(EnumSet.class);\n\t}\n\n\t@Test  // SPR-17619\n\tvoid createsEnumSetSubclass() {\n\t\tEnumSet<Color> enumSet = EnumSet.noneOf(Color.class);\n\t\tassertThat(createCollection(enumSet.getClass(), Color.class, 0)).isInstanceOf(enumSet.getClass());\n\t}\n\n\t@Test\n\tvoid rejectsInvalidElementTypeForEnumSet() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateCollection(EnumSet.class, Object.class, 0));\n\t}\n\n\t@Test\n\tvoid rejectsNullElementTypeForEnumSet() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateCollection(EnumSet.class, null, 0));\n\t}\n\n\t@Test\n\tvoid rejectsNullCollectionType() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateCollection(null, Object.class, 0));\n\t}\n\n\t@Test\n\tvoid createsMapsCorrectly() {\n\t\t// interfaces\n\t\ttestMap(Map.class, LinkedHashMap.class);\n\t\t// on JDK 21: testMap(SequencedMap.class, LinkedHashMap.class);\n\t\ttestMap(SortedMap.class, TreeMap.class);\n\t\ttestMap(NavigableMap.class, TreeMap.class);\n\t\ttestMap(MultiValueMap.class, LinkedMultiValueMap.class);\n\n\t\t// concrete types\n\t\ttestMap(HashMap.class, HashMap.class);\n\t\ttestMap(LinkedHashMap.class, LinkedHashMap.class);\n\t\ttestMap(TreeMap.class, TreeMap.class);\n\t\ttestMap(LinkedMultiValueMap.class, LinkedMultiValueMap.class);\n\t}\n\n\tprivate void testMap(Class<?> mapType, Class<?> resultType) {\n\t\tassertThat(CollectionFactory.isApproximableMapType(mapType)).isTrue();\n\t\tassertThat(createMap(mapType, 0)).isExactlyInstanceOf(resultType);\n\t\tassertThat(createMap(mapType, String.class, 0)).isExactlyInstanceOf(resultType);\n\t}\n\n\t@Test\n\tvoid createsEnumMap() {\n\t\tassertThat(createMap(EnumMap.class, Color.class, 0)).isInstanceOf(EnumMap.class);\n\t}\n\n\t@Test\n\tvoid rejectsInvalidKeyTypeForEnumMap() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateMap(EnumMap.class, Object.class, 0));\n\t}\n\n\t@Test\n\tvoid rejectsNullKeyTypeForEnumMap() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateMap(EnumMap.class, null, 0));\n\t}\n\n\t@Test\n\tvoid rejectsNullMapType() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() ->\n\t\t\t\tcreateMap(null, Object.class, 0));\n\t}\n\n\n\tenum Color {\n\t\tRED, BLUE\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateCollectionIsNotTypeSafeForEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The test demonstrates that the generics-based API for\r\n * {@link CollectionFactory#createApproximateCollection(Object, int)}\r\n * is not type-safe.\r\n * <p>Specifically, the parameterized type {@code E} is not bound to\r\n * the type of elements contained in the {@code collection} argument\r\n * passed to {@code createApproximateCollection()}. Thus casting the\r\n * value returned by {@link EnumSet#copyOf(EnumSet)} to\r\n * {@code (Collection<E>)} cannot guarantee that the returned collection\r\n * actually contains elements of type {@code E}.\r\n */\r\n@Test\r\nvoid createApproximateCollectionIsNotTypeSafeForEnumSet() {\r\n    Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3);\r\n    // Use a try-catch block to ensure that the exception is thrown as a result of the\r\n    // next line and not as a result of the previous line.\r\n    // Note that ints is of type Collection<Integer>, but the collection returned\r\n    // by createApproximateCollection() is of type Collection<Color>. Thus, 42\r\n    // cannot be cast to a Color.\r\n    assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> ints.add(42));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createApproximateCollectionIsNotTypeSafeForEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateCollectionIsNotTypeSafeForEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createCollectionIsNotTypeSafeForEnumSet()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createCollectionIsNotTypeSafeForEnumSet() {\r\n    Collection<Integer> ints = createCollection(EnumSet.class, Color.class, 3);\r\n    // Use a try-catch block to ensure that the exception is thrown as a result of the\r\n    // next line and not as a result of the previous line.\r\n    // Note that ints is of type Collection<Integer>, but the collection returned\r\n    // by createCollection() is of type Collection<Color>. Thus, 42 cannot be cast\r\n    // to a Color.\r\n    assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> ints.add(42));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createCollectionIsNotTypeSafeForEnumSet()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createCollectionIsNotTypeSafeForEnumSet()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapIsNotTypeSafeForEnumMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The test demonstrates that the generics-based API for\r\n * {@link CollectionFactory#createApproximateMap(Object, int)}\r\n * is not type-safe.\r\n * <p>The reasoning is similar that described in\r\n * {@link #createApproximateCollectionIsNotTypeSafeForEnumSet}.\r\n */\r\n@Test\r\nvoid createApproximateMapIsNotTypeSafeForEnumMap() {\r\n    EnumMap<Color, Integer> enumMap = new EnumMap<>(Color.class);\r\n    enumMap.put(Color.RED, 1);\r\n    enumMap.put(Color.BLUE, 2);\r\n    Map<String, Integer> map = createApproximateMap(enumMap, 3);\r\n    // Use a try-catch block to ensure that the exception is thrown as a result of the\r\n    // next line and not as a result of the previous line.\r\n    // Note that the 'map' key must be of type String, but the keys in the map\r\n    // returned by createApproximateMap() are of type Color. Thus \"foo\" cannot be\r\n    // cast to a Color.\r\n    assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> map.put(\"foo\", 1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.CollectionFactoryTests#createApproximateMapIsNotTypeSafeForEnumMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.CollectionFactoryTests#createApproximateMapIsNotTypeSafeForEnumMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]