[
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassList()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleClassList() {\r\n    assertThat(styler.style(List.of(Integer.class, String.class))).isEqualTo(\"[Integer, String]\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassList()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassList()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid styleClassArray() {\r\n    Class<?>[] array = new Class<?>[] { Integer.class, getClass() };\r\n    assertThat(styler.style(array)).isEqualTo(\"[%s, %s]\", Integer.class.getSimpleName(), getClass().getSimpleName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.style.CustomClassAndMethodStylers#styleClassArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.AotDetector",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.AotDetector",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot;\n\nimport org.springframework.core.NativeDetector;\nimport org.springframework.core.NativeDetector.Context;\nimport org.springframework.core.SpringProperties;\n\n/**\n * Utility for determining if AOT-processed optimizations must be used rather\n * than the regular runtime. Strictly for internal use within the framework.\n *\n * @author Stephane Nicoll\n * @author Sebastien Deleuze\n * @since 6.0\n */\npublic abstract class AotDetector {\n\n\t/**\n\t * System property that indicates the application should run with AOT\n\t * generated artifacts. If such optimizations are not available, it is\n\t * recommended to throw an exception rather than fall back to the regular\n\t * runtime behavior.\n\t */\n\tpublic static final String AOT_ENABLED = \"spring.aot.enabled\";\n\n\tprivate static final boolean inNativeImage = NativeDetector.inNativeImage(Context.RUN, Context.BUILD);\n\n\n\t/**\n\t * Determine whether AOT optimizations must be considered at runtime. This\n\t * is mandatory in a native image but can be triggered on the JVM using\n\t * the {@value #AOT_ENABLED} Spring property.\n\t * @return whether AOT optimizations must be considered\n\t */\n\tpublic static boolean useGeneratedArtifacts() {\n\t\treturn (inNativeImage || SpringProperties.getFlag(AOT_ENABLED));\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.AotDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.AotDetector#AOT_ENABLED",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.AotDetector#AOT_ENABLED",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.AotDetector",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.AotDetector#inNativeImage",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.AotDetector#inNativeImage",
    "headType": "field",
    "relation": "haveType",
    "tail": "boolean",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.AotDetector#useGeneratedArtifacts()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether AOT optimizations must be considered at runtime. This\r\n * is mandatory in a native image but can be triggered on the JVM using\r\n * the {@value #AOT_ENABLED} Spring property.\r\n * @return whether AOT optimizations must be considered\r\n */\r\npublic static boolean useGeneratedArtifacts() {\r\n    return (inNativeImage || SpringProperties.getFlag(AOT_ENABLED));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.AotDetector",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.AotDetector#useGeneratedArtifacts()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.style",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.style",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.style.ToStringCreatorTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.style.ToStringCreatorTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.style;\n\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.ObjectUtils;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ToStringCreator}.\n *\n * @author Keith Donald\n * @author Sam Brannen\n */\nclass ToStringCreatorTests {\n\n\tprivate final SomeObject s1 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"A\";\n\t\t}\n\t};\n\n\tprivate final SomeObject s2 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"B\";\n\t\t}\n\t};\n\n\tprivate final SomeObject s3 = new SomeObject() {\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"C\";\n\t\t}\n\t};\n\n\n\t@Test\n\tvoid primitiveArray() {\n\t\tint[] integers = {0, 1, 2, 3, 4};\n\t\tString str = new ToStringCreator(integers).toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[@%s array<Integer>[0, 1, 2, 3, 4]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(integers));\n\t}\n\n\t@Test\n\tvoid objectArray() {\n\t\tSomeObject[] array = new SomeObject[] {s1, s2, s3};\n\t\tString str = new ToStringCreator(array).toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[@%s array<ToStringCreatorTests.SomeObject>[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(array));\n\t}\n\n\t@Test\n\tvoid appendTopLevelClass() {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myClass\", Integer.class)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myClass = Integer]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendNestedClass() {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myClass\", object.getClass())\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myClass = ToStringCreatorTests.SomeObject]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendTopLevelMethod() throws Exception {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myMethod\", ToStringCreatorTests.class.getDeclaredMethod(\"someMethod\"))\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myMethod = someMethod@ToStringCreatorTests]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendNestedMethod() throws Exception {\n\t\tSomeObject object = new SomeObject();\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myMethod\", SomeObject.class.getDeclaredMethod(\"someMethod\"))\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myMethod = someMethod@ToStringCreatorTests.SomeObject]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendList() {\n\t\tSomeObject object = new SomeObject();\n\t\tList<SomeObject> list = List.of(s1, s2, s3);\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myLetters\", list)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myLetters = list[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendSet() {\n\t\tSomeObject object = new SomeObject();\n\t\tSet<SomeObject> set = new LinkedHashSet<>();\n\t\tset.add(s1);\n\t\tset.add(s2);\n\t\tset.add(s3);\n\t\tString str = new ToStringCreator(object)\n\t\t\t\t.append(\"myLetters\", set)\n\t\t\t\t.toString();\n\t\tassertThat(str).isEqualTo(\n\t\t\t\t\"[ToStringCreatorTests.SomeObject@%s myLetters = set[A, B, C]]\",\n\t\t\t\tObjectUtils.getIdentityHexString(object));\n\t}\n\n\t@Test\n\tvoid appendMap() {\n\t\tMap<String, String> map = new LinkedHashMap<>() {{\n\t\t\tput(\"Keri\", \"Softball\");\n\t\t\tput(\"Scot\", \"Fishing\");\n\t\t\tput(\"Keith\", \"Flag Football\");\n\t\t}};\n\t\tObject stringy = new Object() {\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn new ToStringCreator(this)\n\t\t\t\t\t\t.append(\"familyFavoriteSport\", map)\n\t\t\t\t\t\t.toString();\n\t\t\t}\n\t\t};\n\t\tassertThat(stringy.toString())\n\t\t\t.containsSubsequence(\n\t\t\t\t\"[\",\n\t\t\t\tClassUtils.getShortName(stringy.getClass().getName()),\n\t\t\t\t\"@\",\n\t\t\t\tObjectUtils.getIdentityHexString(stringy),\n\t\t\t\t\"familyFavoriteSport = map['Keri' -> 'Softball', 'Scot' -> 'Fishing', 'Keith' -> 'Flag Football']\",\n\t\t\t\t\"]\"\n\t\t\t);\n\t}\n\n\n\tprivate static class SomeObject {\n\t\t@SuppressWarnings(\"unused\")\n\t\tprivate static void someMethod() {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tprivate static void someMethod() {\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]