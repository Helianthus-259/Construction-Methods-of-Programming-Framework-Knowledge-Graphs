[
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\r\n * to the constant pool of this symbol table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\r\n *     or {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\r\n * @param owner the internal name of a class.\r\n * @param name a field or method name.\r\n * @param descriptor a field or method descriptor.\r\n */\r\nprivate void addConstantMemberReference(final int index, final int tag, final String owner, final String name, final String descriptor) {\r\n    add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantMemberReference(int,int,String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantString(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_String_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value a string.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantString(final String value) {\r\n    return addConstantUtf8Reference(Symbol.CONSTANT_STRING_TAG, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantString(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Integer_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value an int.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantInteger(final int value) {\r\n    return addConstantIntegerOrFloat(Symbol.CONSTANT_INTEGER_TAG, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantInteger(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Float_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value a float.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantFloat(final float value) {\r\n    return addConstantIntegerOrFloat(Symbol.CONSTANT_FLOAT_TAG, Float.floatToRawIntBits(value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantFloat(float)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\r\n * Does nothing if the constant pool already contains a similar item.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\r\n * @param value an int or float.\r\n * @return a constant pool constant with the given tag and primitive values.\r\n */\r\nprivate Symbol addConstantIntegerOrFloat(final int tag, final int value) {\r\n    int hashCode = hash(tag, value);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.putByte(tag).putInt(value);\r\n    return put(new Entry(constantPoolCount++, tag, value, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\r\n * table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\r\n * @param value an int or float.\r\n */\r\nprivate void addConstantIntegerOrFloat(final int index, final int tag, final int value) {\r\n    add(new Entry(index, tag, value, hash(tag, value)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantLong(long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Long_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value a long.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantLong(final long value) {\r\n    return addConstantLongOrDouble(Symbol.CONSTANT_LONG_TAG, value);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantLong(long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Double_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param value a double.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantDouble(final double value) {\r\n    return addConstantLongOrDouble(Symbol.CONSTANT_DOUBLE_TAG, Double.doubleToRawLongBits(value));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantDouble(double)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\r\n * Does nothing if the constant pool already contains a similar item.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\r\n * @param value a long or double.\r\n * @return a constant pool constant with the given tag and primitive values.\r\n */\r\nprivate Symbol addConstantLongOrDouble(final int tag, final long value) {\r\n    int hashCode = hash(tag, value);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    int index = constantPoolCount;\r\n    constantPool.putByte(tag).putLong(value);\r\n    constantPoolCount += 2;\r\n    return put(new Entry(index, tag, value, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,long)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantLongOrDouble(int,int,long)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\r\n * table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\r\n * @param value a long or double.\r\n */\r\nprivate void addConstantLongOrDouble(final int index, final int tag, final long value) {\r\n    add(new Entry(index, tag, value, hash(tag, value)));\r\n}",
    "tailType": "method_code"
  }
]