[
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.InstanceComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * Compares objects based on an arbitrary class order. Allows objects to be sorted based\n * on the types of class that they inherit &mdash; for example, this comparator can be used\n * to sort a list of {@code Number}s such that {@code Long}s occur before {@code Integer}s.\n *\n * <p>Only the specified {@code instanceOrder} classes are considered during comparison.\n * If two objects are both instances of the ordered type this comparator will return a\n * value of {@code 0}. Consider combining with {@link Comparator#thenComparing(Comparator)}\n * if additional sorting is required.\n *\n * @author Phillip Webb\n * @since 3.2\n * @param <T> the type of objects that may be compared by this comparator\n * @see Comparator#thenComparing(Comparator)\n */\npublic class InstanceComparator<T> implements Comparator<T> {\n\n\tprivate final Class<?>[] instanceOrder;\n\n\n\t/**\n\t * Create a new {@link InstanceComparator} instance.\n\t * @param instanceOrder the ordered list of classes that should be used when comparing\n\t * objects. Classes earlier in the list will be given a higher priority.\n\t */\n\tpublic InstanceComparator(Class<?>... instanceOrder) {\n\t\tAssert.notNull(instanceOrder, \"'instanceOrder' array must not be null\");\n\t\tthis.instanceOrder = instanceOrder;\n\t}\n\n\n\t@Override\n\tpublic int compare(T o1, T o2) {\n\t\tint i1 = getOrder(o1);\n\t\tint i2 = getOrder(o2);\n\t\treturn (Integer.compare(i1, i2));\n\t}\n\n\tprivate int getOrder(@Nullable T object) {\n\t\tif (object != null) {\n\t\t\tfor (int i = 0; i < this.instanceOrder.length; i++) {\n\t\t\t\tif (this.instanceOrder[i].isInstance(object)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.instanceOrder.length;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.InstanceComparator#instanceOrder",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator#instanceOrder",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator#compare(T,T)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int compare(T o1, T o2) {\r\n    int i1 = getOrder(o1);\r\n    int i2 = getOrder(o2);\r\n    return (Integer.compare(i1, i2));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.InstanceComparator#compare(T,T)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator#compare(T,T)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator#getOrder(T)",
    "headType": "method",
    "relation": "provide",
    "tail": "private int getOrder(@Nullable T object) {\r\n    if (object != null) {\r\n        for (int i = 0; i < this.instanceOrder.length; i++) {\r\n            if (this.instanceOrder[i].isInstance(object)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return this.instanceOrder.length;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.comparator.InstanceComparator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.comparator.InstanceComparator#getOrder(T)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util.comparator",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util.comparator",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.comparator.NullSafeComparator",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util.comparator;\n\nimport java.util.Comparator;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\n\n/**\n * A Comparator that will safely compare nulls to be lower or higher than\n * other objects. Can decorate a given Comparator or work on Comparables.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 1.2.2\n * @param <T> the type of objects that may be compared by this comparator\n * @see Comparable\n * @see Comparators\n * @deprecated as of 6.1 in favor of {@link Comparator#nullsLast} and {@link Comparator#nullsFirst}\n */\n@Deprecated(since = \"6.1\")\npublic class NullSafeComparator<T> implements Comparator<T> {\n\n\t/**\n\t * A shared default instance of this comparator, treating nulls lower\n\t * than non-null objects.\n\t * @see Comparators#nullsLow()\n\t */\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic static final NullSafeComparator NULLS_LOW = new NullSafeComparator<>(true);\n\n\t/**\n\t * A shared default instance of this comparator, treating nulls higher\n\t * than non-null objects.\n\t * @see Comparators#nullsHigh()\n\t */\n\t@SuppressWarnings(\"rawtypes\")\n\tpublic static final NullSafeComparator NULLS_HIGH = new NullSafeComparator<>(false);\n\n\n\tprivate final Comparator<T> nonNullComparator;\n\n\tprivate final boolean nullsLow;\n\n\n\t/**\n\t * Create a NullSafeComparator that sorts {@code null} based on\n\t * the provided flag, working on Comparables.\n\t * <p>When comparing two non-null objects, their Comparable implementation\n\t * will be used: this means that non-null elements (that this Comparator\n\t * will be applied to) need to implement Comparable.\n\t * <p>As a convenience, you can use the default shared instances:\n\t * {@code NullSafeComparator.NULLS_LOW} and\n\t * {@code NullSafeComparator.NULLS_HIGH}.\n\t * @param nullsLow whether to treat nulls lower or higher than non-null objects\n\t * @see Comparable\n\t * @see #NULLS_LOW\n\t * @see #NULLS_HIGH\n\t */\n\tprivate NullSafeComparator(boolean nullsLow) {\n\t\tthis.nonNullComparator = Comparators.comparable();\n\t\tthis.nullsLow = nullsLow;\n\t}\n\n\t/**\n\t * Create a NullSafeComparator that sorts {@code null} based on the\n\t * provided flag, decorating the given Comparator.\n\t * <p>When comparing two non-null objects, the specified Comparator will be used.\n\t * The given underlying Comparator must be able to handle the elements that this\n\t * Comparator will be applied to.\n\t * @param comparator the comparator to use when comparing two non-null objects\n\t * @param nullsLow whether to treat nulls lower or higher than non-null objects\n\t */\n\tpublic NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {\n\t\tAssert.notNull(comparator, \"Comparator must not be null\");\n\t\tthis.nonNullComparator = comparator;\n\t\tthis.nullsLow = nullsLow;\n\t}\n\n\n\t@Override\n\tpublic int compare(@Nullable T left, @Nullable T right) {\n\t\tComparator<T> comparator = this.nullsLow ? Comparator.nullsFirst(this.nonNullComparator) : Comparator.nullsLast(this.nonNullComparator);\n\t\treturn comparator.compare(left, right);\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof NullSafeComparator<?> that &&\n\t\t\t\tthis.nonNullComparator.equals(that.nonNullComparator) &&\n\t\t\t\tthis.nullsLow == that.nullsLow));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Boolean.hashCode(this.nullsLow);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"NullSafeComparator: non-null comparator [\" + this.nonNullComparator + \"]; \" +\n\t\t\t\t(this.nullsLow ? \"nulls low\" : \"nulls high\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.NullSafeComparator#NULLS_LOW",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#NULLS_LOW",
    "headType": "field",
    "relation": "haveType",
    "tail": "NullSafeComparator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.NullSafeComparator#NULLS_HIGH",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#NULLS_HIGH",
    "headType": "field",
    "relation": "haveType",
    "tail": "NullSafeComparator",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.NullSafeComparator#nonNullComparator",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator#nonNullComparator",
    "headType": "field",
    "relation": "haveType",
    "tail": "Comparator<T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.comparator.NullSafeComparator",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.comparator.NullSafeComparator#nullsLow",
    "tailType": "field"
  }
]