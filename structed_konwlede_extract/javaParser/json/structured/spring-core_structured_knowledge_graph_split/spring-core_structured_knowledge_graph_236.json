[
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper() {\r\n    ThrowingConsumer<Object> consumer = this::throwIOException;\r\n    assertThatIllegalStateException().isThrownBy(() -> consumer.accept(this, IllegalStateException::new)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingConsumerTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#applyWithExceptionWrapperWhenThrowingCheckedExceptionThrowsWrapper()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid throwingModifiesThrownException() {\r\n    ThrowingConsumer<Object> consumer = this::throwIOException;\r\n    ThrowingConsumer<Object> modified = consumer.throwing(IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(() -> modified.accept(this)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingConsumerTests#throwingModifiesThrownException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#throwingModifiesThrownException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#ofModifiesThrownException()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid ofModifiesThrownException() {\r\n    ThrowingConsumer<Object> consumer = ThrowingConsumer.of(this::throwIOException, IllegalStateException::new);\r\n    assertThatIllegalStateException().isThrownBy(() -> consumer.accept(this)).withCauseInstanceOf(IOException.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingConsumerTests#ofModifiesThrownException()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#ofModifiesThrownException()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#throwIOException(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void throwIOException(Object o) throws IOException {\r\n    throw new IOException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingConsumerTests#throwIOException(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests#throwIllegalArgumentException(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void throwIllegalArgumentException(Object o) {\r\n    throw new IllegalArgumentException();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.function.ThrowingConsumerTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.function.ThrowingConsumerTests#throwIllegalArgumentException(Object)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.nativex",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.nativex",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.nativex.BasicJsonWriter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.nativex;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport org.springframework.aot.hint.TypeReference;\n\n/**\n * Very basic json writer for the purposes of translating runtime hints to native\n * configuration.\n *\n * @author Stephane Nicoll\n */\nclass BasicJsonWriter {\n\n\tprivate final IndentingWriter writer;\n\n\t/**\n\t * Create a new instance with the specified indent value.\n\t * @param writer the writer to use\n\t * @param singleIndent the value of one indent\n\t */\n\tpublic BasicJsonWriter(Writer writer, String singleIndent) {\n\t\tthis.writer = new IndentingWriter(writer, singleIndent);\n\t}\n\n\t/**\n\t * Create a new instance using two whitespaces for the indent.\n\t * @param writer the writer to use\n\t */\n\tpublic BasicJsonWriter(Writer writer) {\n\t\tthis(writer, \"  \");\n\t}\n\n\n\t/**\n\t * Write an object with the specified attributes. Each attribute is\n\t * written according to its value type:\n\t * <ul>\n\t * <li>Map: write the value as a nested object</li>\n\t * <li>List: write the value as a nested array</li>\n\t * <li>Otherwise, write a single value</li>\n\t * </ul>\n\t * @param attributes the attributes of the object\n\t */\n\tpublic void writeObject(Map<String, Object> attributes) {\n\t\twriteObject(attributes, true);\n\t}\n\n\t/**\n\t * Write an array with the specified items. Each item in the\n\t * list is written either as a nested object or as an attribute\n\t * depending on its type.\n\t * @param items the items to write\n\t * @see #writeObject(Map)\n\t */\n\tpublic void writeArray(List<?> items) {\n\t\twriteArray(items, true);\n\t}\n\n\tprivate void writeObject(Map<String, Object> attributes, boolean newLine) {\n\t\tif (attributes.isEmpty()) {\n\t\t\tthis.writer.print(\"{ }\");\n\t\t}\n\t\telse {\n\t\t\tthis.writer.println(\"{\").indented(writeAll(attributes.entrySet().iterator(),\n\t\t\t\t\tentry -> writeAttribute(entry.getKey(), entry.getValue()))).print(\"}\");\n\t\t}\n\t\tif (newLine) {\n\t\t\tthis.writer.println();\n\t\t}\n\t}\n\n\tprivate void writeArray(List<?> items, boolean newLine) {\n\t\tif (items.isEmpty()) {\n\t\t\tthis.writer.print(\"[ ]\");\n\t\t}\n\t\telse {\n\t\t\tthis.writer.println(\"[\")\n\t\t\t\t\t.indented(writeAll(items.iterator(), this::writeValue)).print(\"]\");\n\t\t}\n\t\tif (newLine) {\n\t\t\tthis.writer.println();\n\t\t}\n\t}\n\n\tprivate <T> Runnable writeAll(Iterator<T> it, Consumer<T> writer) {\n\t\treturn () -> {\n\t\t\twhile (it.hasNext()) {\n\t\t\t\twriter.accept(it.next());\n\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tthis.writer.println(\",\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.writer.println();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void writeAttribute(String name, Object value) {\n\t\tthis.writer.print(quote(name) + \": \");\n\t\twriteValue(value);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void writeValue(Object value) {\n\t\tif (value instanceof Map<?, ?> map) {\n\t\t\twriteObject((Map<String, Object>) map, false);\n\t\t}\n\t\telse if (value instanceof List<?> list) {\n\t\t\twriteArray(list, false);\n\t\t}\n\t\telse if (value instanceof TypeReference typeReference) {\n\t\t\tthis.writer.print(quote(typeReference.getName()));\n\t\t}\n\t\telse if (value instanceof CharSequence string) {\n\t\t\tthis.writer.print(quote(escape(string)));\n\t\t}\n\t\telse if (value instanceof Boolean flag) {\n\t\t\tthis.writer.print(Boolean.toString(flag));\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\"unsupported type: \" + value.getClass());\n\t\t}\n\t}\n\n\tprivate String quote(String name) {\n\t\treturn \"\\\"\" + name + \"\\\"\";\n\t}\n\n\n\tprivate static String escape(CharSequence input) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tinput.chars().forEach(c -> builder.append(\n\t\t\tswitch (c) {\n\t\t\t\tcase '\"' -> \"\\\\\\\"\";\n\t\t\t\tcase '\\\\' -> \"\\\\\\\\\";\n\t\t\t\tcase '/' -> \"\\\\/\";\n\t\t\t\tcase '\\b' -> \"\\\\b\";\n\t\t\t\tcase '\\f' -> \"\\\\f\";\n\t\t\t\tcase '\\n' -> \"\\\\n\";\n\t\t\t\tcase '\\r' -> \"\\\\r\";\n\t\t\t\tcase '\\t' -> \"\\\\t\";\n\t\t\t\tdefault -> {\n\t\t\t\t\tif (c <= 0x1F) {\n\t\t\t\t\t\tyield String.format(\"\\\\u%04x\", c);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tyield (char) c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\t\treturn builder.toString();\n\t}\n\n\n\tstatic class IndentingWriter extends Writer {\n\n\t\tprivate final Writer out;\n\n\t\tprivate final String singleIndent;\n\n\t\tprivate int level = 0;\n\n\t\tprivate String currentIndent = \"\";\n\n\t\tprivate boolean prependIndent = false;\n\n\t\tIndentingWriter(Writer out, String singleIndent) {\n\t\t\tthis.out = out;\n\t\t\tthis.singleIndent = singleIndent;\n\t\t}\n\n\t\t/**\n\t\t * Write the specified text.\n\t\t * @param string the content to write\n\t\t */\n\t\tpublic IndentingWriter print(String string) {\n\t\t\twrite(string.toCharArray(), 0, string.length());\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Write the specified text and append a new line.\n\t\t * @param string the content to write\n\t\t */\n\t\tpublic IndentingWriter println(String string) {\n\t\t\twrite(string.toCharArray(), 0, string.length());\n\t\t\treturn println();\n\t\t}\n\n\t\t/**\n\t\t * Write a new line.\n\t\t */\n\t\tpublic IndentingWriter println() {\n\t\t\tString separator = System.lineSeparator();\n\t\t\ttry {\n\t\t\t\tthis.out.write(separator.toCharArray(), 0, separator.length());\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t\tthis.prependIndent = true;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Increase the indentation level and execute the {@link Runnable}. Decrease the\n\t\t * indentation level on completion.\n\t\t * @param runnable the code to execute within an extra indentation level\n\t\t */\n\t\tpublic IndentingWriter indented(Runnable runnable) {\n\t\t\tindent();\n\t\t\trunnable.run();\n\t\t\treturn outdent();\n\t\t}\n\n\t\t/**\n\t\t * Increase the indentation level.\n\t\t */\n\t\tprivate IndentingWriter indent() {\n\t\t\tthis.level++;\n\t\t\treturn refreshIndent();\n\t\t}\n\n\t\t/**\n\t\t * Decrease the indentation level.\n\t\t */\n\t\tprivate IndentingWriter outdent() {\n\t\t\tthis.level--;\n\t\t\treturn refreshIndent();\n\t\t}\n\n\t\tprivate IndentingWriter refreshIndent() {\n\t\t\tthis.currentIndent = this.singleIndent.repeat(Math.max(0, this.level));\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(char[] chars, int offset, int length) {\n\t\t\ttry {\n\t\t\t\tif (this.prependIndent) {\n\t\t\t\t\tthis.out.write(this.currentIndent.toCharArray(), 0, this.currentIndent.length());\n\t\t\t\t\tthis.prependIndent = false;\n\t\t\t\t}\n\t\t\t\tthis.out.write(chars, offset, length);\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void flush() throws IOException {\n\t\t\tthis.out.flush();\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\tthis.out.close();\n\t\t}\n\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.nativex.BasicJsonWriter#writer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriter#writer",
    "headType": "field",
    "relation": "haveType",
    "tail": "IndentingWriter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriter#writeObject(Map<String,Object>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Write an object with the specified attributes. Each attribute is\r\n * written according to its value type:\r\n * <ul>\r\n * <li>Map: write the value as a nested object</li>\r\n * <li>List: write the value as a nested array</li>\r\n * <li>Otherwise, write a single value</li>\r\n * </ul>\r\n * @param attributes the attributes of the object\r\n */\r\npublic void writeObject(Map<String, Object> attributes) {\r\n    writeObject(attributes, true);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.nativex.BasicJsonWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.nativex.BasicJsonWriter#writeObject(Map<String,Object>)",
    "tailType": "method"
  }
]