[
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setActiveProfiles(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setActiveProfiles(String... profiles) {\r\n    Assert.notNull(profiles, \"Profile array must not be null\");\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(\"Activating profiles \" + Arrays.toString(profiles));\r\n    }\r\n    synchronized (this.activeProfiles) {\r\n        this.activeProfiles.clear();\r\n        for (String profile : profiles) {\r\n            validateProfile(profile);\r\n            this.activeProfiles.add(profile);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setActiveProfiles(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setActiveProfiles(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#addActiveProfile(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void addActiveProfile(String profile) {\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(\"Activating profile '\" + profile + \"'\");\r\n    }\r\n    validateProfile(profile);\r\n    doGetActiveProfiles();\r\n    synchronized (this.activeProfiles) {\r\n        this.activeProfiles.add(profile);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#addActiveProfile(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#addActiveProfile(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String[] getDefaultProfiles() {\r\n    return StringUtils.toStringArray(doGetDefaultProfiles());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getDefaultProfiles()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetDefaultProfiles()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the set of default profiles explicitly set via\r\n * {@link #setDefaultProfiles(String...)} or if the current set of default profiles\r\n * consists only of {@linkplain #getReservedDefaultProfiles() reserved default\r\n * profiles}, then check for the presence of {@link #doGetActiveProfilesProperty()}\r\n * and assign its value (if any) to the set of default profiles.\r\n * @see #AbstractEnvironment()\r\n * @see #getDefaultProfiles()\r\n * @see #getReservedDefaultProfiles()\r\n * @see #doGetDefaultProfilesProperty()\r\n */\r\nprotected Set<String> doGetDefaultProfiles() {\r\n    synchronized (this.defaultProfiles) {\r\n        if (this.defaultProfiles.equals(getReservedDefaultProfiles())) {\r\n            String profiles = doGetDefaultProfilesProperty();\r\n            if (StringUtils.hasText(profiles)) {\r\n                setDefaultProfiles(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(profiles)));\r\n            }\r\n        }\r\n        return this.defaultProfiles;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#doGetDefaultProfiles()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetDefaultProfilesProperty()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the property value for the default profiles.\r\n * @since 5.3.4\r\n * @see #DEFAULT_PROFILES_PROPERTY_NAME\r\n */\r\n@Nullable\r\nprotected String doGetDefaultProfilesProperty() {\r\n    return getProperty(DEFAULT_PROFILES_PROPERTY_NAME);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#doGetDefaultProfilesProperty()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#doGetDefaultProfilesProperty()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setDefaultProfiles(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the set of profiles to be made active by default if no other profiles\r\n * are explicitly made active through {@link #setActiveProfiles}.\r\n * <p>Calling this method removes overrides any reserved default profiles\r\n * that may have been added during construction of the environment.\r\n * @see #AbstractEnvironment()\r\n * @see #getReservedDefaultProfiles()\r\n */\r\n@Override\r\npublic void setDefaultProfiles(String... profiles) {\r\n    Assert.notNull(profiles, \"Profile array must not be null\");\r\n    synchronized (this.defaultProfiles) {\r\n        this.defaultProfiles.clear();\r\n        for (String profile : profiles) {\r\n            validateProfile(profile);\r\n            this.defaultProfiles.add(profile);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#setDefaultProfiles(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#setDefaultProfiles(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Deprecated\r\npublic boolean acceptsProfiles(String... profiles) {\r\n    Assert.notEmpty(profiles, \"Must specify at least one profile\");\r\n    for (String profile : profiles) {\r\n        if (StringUtils.hasLength(profile) && profile.charAt(0) == '!') {\r\n            if (!isProfileActive(profile.substring(1))) {\r\n                return true;\r\n            }\r\n        } else if (isProfileActive(profile)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]