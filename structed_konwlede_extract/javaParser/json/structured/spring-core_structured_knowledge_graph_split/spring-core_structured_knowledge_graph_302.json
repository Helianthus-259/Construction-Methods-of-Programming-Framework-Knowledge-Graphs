[
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#visitArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#visitArray(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#visitEnd()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitEnd() {\r\n    if (numElementValuePairsOffset != -1) {\r\n        byte[] data = annotation.data;\r\n        data[numElementValuePairsOffset] = (byte) (numElementValuePairs >>> 8);\r\n        data[numElementValuePairsOffset + 1] = (byte) numElementValuePairs;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#visitEnd()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Utility methods\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the size of a Runtime[In]Visible[Type]Annotations attribute containing this annotation\r\n * and all its <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the attribute name\r\n * to the constant pool of the class (if not null).\r\n *\r\n * @param attributeName one of \"Runtime[In]Visible[Type]Annotations\", or {@literal null}.\r\n * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing this\r\n *     annotation and all its predecessors. This includes the size of the attribute_name_index and\r\n *     attribute_length fields.\r\n */\r\nint computeAnnotationsSize(final String attributeName) {\r\n    if (attributeName != null) {\r\n        symbolTable.addConstantUtf8(attributeName);\r\n    }\r\n    // The attribute_name_index, attribute_length and num_annotations fields use 8 bytes.\r\n    int attributeSize = 8;\r\n    AnnotationWriter annotationWriter = this;\r\n    while (annotationWriter != null) {\r\n        attributeSize += annotationWriter.annotation.length;\r\n        annotationWriter = annotationWriter.previousAnnotation;\r\n    }\r\n    return attributeSize;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of the Runtime[In]Visible[Type]Annotations attributes containing the given\r\n * annotations and all their <i>predecessors</i> (see {@link #previousAnnotation}. Also adds the\r\n * attribute names to the constant pool of the class (if not null).\r\n *\r\n * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\r\n *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\r\n *     {@literal null}.\r\n * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\r\n *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\r\n *     field. May be {@literal null}.\r\n * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\r\n *     field, method or class. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\r\n *     field, method or class field. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @return the size in bytes of a Runtime[In]Visible[Type]Annotations attribute containing the\r\n *     given annotations and all their predecessors. This includes the size of the\r\n *     attribute_name_index and attribute_length fields.\r\n */\r\nstatic int computeAnnotationsSize(final AnnotationWriter lastRuntimeVisibleAnnotation, final AnnotationWriter lastRuntimeInvisibleAnnotation, final AnnotationWriter lastRuntimeVisibleTypeAnnotation, final AnnotationWriter lastRuntimeInvisibleTypeAnnotation) {\r\n    int size = 0;\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        size += lastRuntimeVisibleAnnotation.computeAnnotationsSize(Constants.RUNTIME_VISIBLE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize(Constants.RUNTIME_INVISIBLE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS);\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);\r\n    }\r\n    return size;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#computeAnnotationsSize(AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#putAnnotations(int,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a Runtime[In]Visible[Type]Annotations attribute containing this annotations and all its\r\n * <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector. Annotations are\r\n * put in the same order they have been visited.\r\n *\r\n * @param attributeNameIndex the constant pool index of the attribute name (one of\r\n *     \"Runtime[In]Visible[Type]Annotations\").\r\n * @param output where the attribute must be put.\r\n */\r\nvoid putAnnotations(final int attributeNameIndex, final ByteVector output) {\r\n    // For num_annotations.\r\n    int attributeLength = 2;\r\n    int numAnnotations = 0;\r\n    AnnotationWriter annotationWriter = this;\r\n    AnnotationWriter firstAnnotation = null;\r\n    while (annotationWriter != null) {\r\n        // In case the user forgot to call visitEnd().\r\n        annotationWriter.visitEnd();\r\n        attributeLength += annotationWriter.annotation.length;\r\n        numAnnotations++;\r\n        firstAnnotation = annotationWriter;\r\n        annotationWriter = annotationWriter.previousAnnotation;\r\n    }\r\n    output.putShort(attributeNameIndex);\r\n    output.putInt(attributeLength);\r\n    output.putShort(numAnnotations);\r\n    annotationWriter = firstAnnotation;\r\n    while (annotationWriter != null) {\r\n        output.putByteArray(annotationWriter.annotation.data, 0, annotationWriter.annotation.length);\r\n        annotationWriter = annotationWriter.nextAnnotation;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#putAnnotations(int,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#putAnnotations(SymbolTable,AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts the Runtime[In]Visible[Type]Annotations attributes containing the given annotations and\r\n * all their <i>predecessors</i> (see {@link #previousAnnotation} in the given ByteVector.\r\n * Annotations are put in the same order they have been visited.\r\n *\r\n * @param symbolTable where the constants used in the AnnotationWriter instances are stored.\r\n * @param lastRuntimeVisibleAnnotation The last runtime visible annotation of a field, method or\r\n *     class. The previous ones can be accessed with the {@link #previousAnnotation} field. May be\r\n *     {@literal null}.\r\n * @param lastRuntimeInvisibleAnnotation The last runtime invisible annotation of this a field,\r\n *     method or class. The previous ones can be accessed with the {@link #previousAnnotation}\r\n *     field. May be {@literal null}.\r\n * @param lastRuntimeVisibleTypeAnnotation The last runtime visible type annotation of this a\r\n *     field, method or class. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param lastRuntimeInvisibleTypeAnnotation The last runtime invisible type annotation of a\r\n *     field, method or class field. The previous ones can be accessed with the {@link\r\n *     #previousAnnotation} field. May be {@literal null}.\r\n * @param output where the attributes must be put.\r\n */\r\nstatic void putAnnotations(final SymbolTable symbolTable, final AnnotationWriter lastRuntimeVisibleAnnotation, final AnnotationWriter lastRuntimeInvisibleAnnotation, final AnnotationWriter lastRuntimeVisibleTypeAnnotation, final AnnotationWriter lastRuntimeInvisibleTypeAnnotation, final ByteVector output) {\r\n    if (lastRuntimeVisibleAnnotation != null) {\r\n        lastRuntimeVisibleAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeInvisibleAnnotation != null) {\r\n        lastRuntimeInvisibleAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeVisibleTypeAnnotation != null) {\r\n        lastRuntimeVisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output);\r\n    }\r\n    if (lastRuntimeInvisibleTypeAnnotation != null) {\r\n        lastRuntimeInvisibleTypeAnnotation.putAnnotations(symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#putAnnotations(SymbolTable,AnnotationWriter,AnnotationWriter,AnnotationWriter,AnnotationWriter,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#computeParameterAnnotationsSize(String,AnnotationWriter[],int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the size of a Runtime[In]VisibleParameterAnnotations attribute containing all the\r\n * annotation lists from the given AnnotationWriter sub-array. Also adds the attribute name to the\r\n * constant pool of the class.\r\n *\r\n * @param attributeName one of \"Runtime[In]VisibleParameterAnnotations\".\r\n * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\r\n *     element).\r\n * @param annotableParameterCount the number of elements in annotationWriters to take into account\r\n *     (elements [0..annotableParameterCount[ are taken into account).\r\n * @return the size in bytes of a Runtime[In]VisibleParameterAnnotations attribute corresponding\r\n *     to the given sub-array of AnnotationWriter lists. This includes the size of the\r\n *     attribute_name_index and attribute_length fields.\r\n */\r\nstatic int computeParameterAnnotationsSize(final String attributeName, final AnnotationWriter[] annotationWriters, final int annotableParameterCount) {\r\n    // Note: attributeName is added to the constant pool by the call to computeAnnotationsSize\r\n    // below. This assumes that there is at least one non-null element in the annotationWriters\r\n    // sub-array (which is ensured by the lazy instantiation of this array in MethodWriter).\r\n    // The attribute_name_index, attribute_length and num_parameters fields use 7 bytes, and each\r\n    // element of the parameter_annotations array uses 2 bytes for its num_annotations field.\r\n    int attributeSize = 7 + 2 * annotableParameterCount;\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        attributeSize += annotationWriter == null ? 0 : annotationWriter.computeAnnotationsSize(attributeName) - 8;\r\n    }\r\n    return attributeSize;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#computeParameterAnnotationsSize(String,AnnotationWriter[],int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter#putParameterAnnotations(int,AnnotationWriter[],int,ByteVector)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Puts a Runtime[In]VisibleParameterAnnotations attribute containing all the annotation lists\r\n * from the given AnnotationWriter sub-array in the given ByteVector.\r\n *\r\n * @param attributeNameIndex constant pool index of the attribute name (one of\r\n *     Runtime[In]VisibleParameterAnnotations).\r\n * @param annotationWriters an array of AnnotationWriter lists (designated by their <i>last</i>\r\n *     element).\r\n * @param annotableParameterCount the number of elements in annotationWriters to put (elements\r\n *     [0..annotableParameterCount[ are put).\r\n * @param output where the attribute must be put.\r\n */\r\nstatic void putParameterAnnotations(final int attributeNameIndex, final AnnotationWriter[] annotationWriters, final int annotableParameterCount, final ByteVector output) {\r\n    // The num_parameters field uses 1 byte, and each element of the parameter_annotations array\r\n    // uses 2 bytes for its num_annotations field.\r\n    int attributeLength = 1 + 2 * annotableParameterCount;\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        attributeLength += annotationWriter == null ? 0 : annotationWriter.computeAnnotationsSize(null) - 8;\r\n    }\r\n    output.putShort(attributeNameIndex);\r\n    output.putInt(attributeLength);\r\n    output.putByte(annotableParameterCount);\r\n    for (int i = 0; i < annotableParameterCount; ++i) {\r\n        AnnotationWriter annotationWriter = annotationWriters[i];\r\n        AnnotationWriter firstAnnotation = null;\r\n        int numAnnotations = 0;\r\n        while (annotationWriter != null) {\r\n            // In case user the forgot to call visitEnd().\r\n            annotationWriter.visitEnd();\r\n            numAnnotations++;\r\n            firstAnnotation = annotationWriter;\r\n            annotationWriter = annotationWriter.previousAnnotation;\r\n        }\r\n        output.putShort(numAnnotations);\r\n        annotationWriter = firstAnnotation;\r\n        while (annotationWriter != null) {\r\n            output.putByteArray(annotationWriter.annotation.data, 0, annotationWriter.annotation.length);\r\n            annotationWriter = annotationWriter.nextAnnotation;\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.AnnotationWriter#putParameterAnnotations(int,AnnotationWriter[],int,ByteVector)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.AnnotationWriter",
    "headType": "class",
    "relation": "extend",
    "tail": "AnnotationVisitor",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.PatternMatchUtilsTests",
    "tailType": "class"
  }
]