[
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getNumber(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getNumber(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getEnum(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as an enum.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic <E extends Enum<?>> E getEnum(String attributeName) {\r\n    return (E) getRequiredAttribute(attributeName, Enum.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getEnum(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getEnum(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getClass(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as a class.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic <T> Class<? extends T> getClass(String attributeName) {\r\n    return getRequiredAttribute(attributeName, Class.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getClass(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getClass(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getClassArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName} as an\r\n * array of classes.\r\n * <p>If the value stored under the specified {@code attributeName} is a class,\r\n * it will be wrapped in a single-element array before returning it.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic Class<?>[] getClassArray(String attributeName) {\r\n    return getRequiredAttribute(attributeName, Class[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getClassArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotation(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the {@link AnnotationAttributes} stored under the specified\r\n * {@code attributeName}.\r\n * <p>Note: if you expect an actual annotation, invoke\r\n * {@link #getAnnotation(String, Class)} instead.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the {@code AnnotationAttributes}\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic AnnotationAttributes getAnnotation(String attributeName) {\r\n    return getRequiredAttribute(attributeName, AnnotationAttributes.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getAnnotation(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotation(String,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the annotation of type {@code annotationType} stored under the\r\n * specified {@code attributeName}.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @param annotationType the expected annotation type; never {@code null}\r\n * @return the annotation\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n * @since 4.2\r\n */\r\npublic <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {\r\n    return getRequiredAttribute(attributeName, annotationType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getAnnotation(String,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationArray(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the array of {@link AnnotationAttributes} stored under the specified\r\n * {@code attributeName}.\r\n * <p>If the value stored under the specified {@code attributeName} is\r\n * an instance of {@code AnnotationAttributes}, it will be wrapped in\r\n * a single-element array before returning it.\r\n * <p>Note: if you expect an actual array of annotations, invoke\r\n * {@link #getAnnotationArray(String, Class)} instead.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @return the array of {@code AnnotationAttributes}\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\npublic AnnotationAttributes[] getAnnotationArray(String attributeName) {\r\n    return getRequiredAttribute(attributeName, AnnotationAttributes[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationArray(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationArray(String,Class<A>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the array of type {@code annotationType} stored under the specified\r\n * {@code attributeName}.\r\n * <p>If the value stored under the specified {@code attributeName} is\r\n * an {@code Annotation}, it will be wrapped in a single-element array\r\n * before returning it.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @param annotationType the expected annotation type; never {@code null}\r\n * @return the annotation array\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n * @since 4.2\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {\r\n    return (A[]) getRequiredAttribute(attributeName, annotationType.arrayType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationArray(String,Class<A>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getAnnotationArray(String,Class<A>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationAttributes#getRequiredAttribute(String,Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Get the value stored under the specified {@code attributeName},\r\n * ensuring that the value is of the {@code expectedType}.\r\n * <p>If the {@code expectedType} is an array and the value stored\r\n * under the specified {@code attributeName} is a single element of the\r\n * component type of the expected array type, the single element will be\r\n * wrapped in a single-element array of the appropriate type before\r\n * returning it.\r\n * @param attributeName the name of the attribute to get;\r\n * never {@code null} or empty\r\n * @param expectedType the expected type; never {@code null}\r\n * @return the value\r\n * @throws IllegalArgumentException if the attribute does not exist or\r\n * if it is not of the expected type\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {\r\n    Assert.hasText(attributeName, \"'attributeName' must not be null or empty\");\r\n    Object value = get(attributeName);\r\n    if (value == null) {\r\n        throw new IllegalArgumentException(String.format(\"Attribute '%s' not found in attributes for annotation [%s]\", attributeName, this.displayName));\r\n    }\r\n    if (value instanceof Throwable throwable) {\r\n        throw new IllegalArgumentException(String.format(\"Attribute '%s' for annotation [%s] was not resolvable due to exception [%s]\", attributeName, this.displayName, value), throwable);\r\n    }\r\n    if (!expectedType.isInstance(value) && expectedType.isArray() && expectedType.componentType().isInstance(value)) {\r\n        Object array = Array.newInstance(expectedType.componentType(), 1);\r\n        Array.set(array, 0, value);\r\n        value = array;\r\n    }\r\n    if (!expectedType.isInstance(value)) {\r\n        throw new IllegalArgumentException(String.format(\"Attribute '%s' is of type %s, but %s was expected in attributes for annotation [%s]\", attributeName, value.getClass().getSimpleName(), expectedType.getSimpleName(), this.displayName));\r\n    }\r\n    return (T) value;\r\n}",
    "tailType": "method_code"
  }
]