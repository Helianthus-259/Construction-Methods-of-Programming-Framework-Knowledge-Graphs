[
  {
    "head": "org.springframework.core.PrioritizedParameterNameDiscoverer#getParameterNames(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.PriorityOrdered",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.PriorityOrdered",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\n/**\n * Extension of the {@link Ordered} interface, expressing a <em>priority</em>\n * ordering: {@code PriorityOrdered} objects are always applied before\n * <em>plain</em> {@link Ordered} objects regardless of their order values.\n *\n * <p>When sorting a set of {@code Ordered} objects, {@code PriorityOrdered}\n * objects and <em>plain</em> {@code Ordered} objects are effectively treated as\n * two separate subsets, with the set of {@code PriorityOrdered} objects preceding\n * the set of <em>plain</em> {@code Ordered} objects and with relative\n * ordering applied within those subsets.\n *\n * <p>This is primarily a special-purpose interface, used within the framework\n * itself for objects where it is particularly important to recognize\n * <em>prioritized</em> objects first, potentially without even obtaining the\n * remaining objects. A typical example: prioritized post-processors in a Spring\n * {@link org.springframework.context.ApplicationContext}.\n *\n * <p>Note: {@code PriorityOrdered} post-processor beans are initialized in\n * a special phase, ahead of other post-processor beans. This subtly\n * affects their autowiring behavior: they will only be autowired against\n * beans which do not require eager initialization for type matching.\n *\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 2.5\n * @see org.springframework.beans.factory.config.PropertyOverrideConfigurer\n */\npublic interface PriorityOrdered extends Ordered {\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.PriorityOrdered",
    "headType": "class",
    "relation": "extend",
    "tail": "Ordered",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.ReactiveAdapter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.util.function.Function;\n\nimport org.jspecify.annotations.Nullable;\nimport org.reactivestreams.Publisher;\n\nimport org.springframework.util.Assert;\n\n/**\n * Adapter for a Reactive Streams {@link Publisher} to and from an async/reactive\n * type such as {@code CompletableFuture}, RxJava {@code Observable}, and others.\n *\n * <p>An adapter is typically obtained via {@link ReactiveAdapterRegistry}.\n *\n * @author Rossen Stoyanchev\n * @since 5.0\n */\npublic class ReactiveAdapter {\n\n\tprivate final ReactiveTypeDescriptor descriptor;\n\n\tprivate final Function<Object, Publisher<?>> toPublisherFunction;\n\n\tprivate final Function<Publisher<?>, Object> fromPublisherFunction;\n\n\n\t/**\n\t * Constructor for an adapter with functions to convert the target reactive\n\t * or async type to and from a Reactive Streams Publisher.\n\t * @param descriptor the reactive type descriptor\n\t * @param toPublisherFunction adapter to a Publisher\n\t * @param fromPublisherFunction adapter from a Publisher\n\t */\n\tpublic ReactiveAdapter(ReactiveTypeDescriptor descriptor,\n\t\t\tFunction<Object, Publisher<?>> toPublisherFunction,\n\t\t\tFunction<Publisher<?>, Object> fromPublisherFunction) {\n\n\t\tAssert.notNull(descriptor, \"'descriptor' is required\");\n\t\tAssert.notNull(toPublisherFunction, \"'toPublisherFunction' is required\");\n\t\tAssert.notNull(fromPublisherFunction, \"'fromPublisherFunction' is required\");\n\n\t\tthis.descriptor = descriptor;\n\t\tthis.toPublisherFunction = toPublisherFunction;\n\t\tthis.fromPublisherFunction = fromPublisherFunction;\n\t}\n\n\n\t/**\n\t * Return the descriptor of the reactive type for the adapter.\n\t */\n\tpublic ReactiveTypeDescriptor getDescriptor() {\n\t\treturn this.descriptor;\n\t}\n\n\t/**\n\t * Shortcut for {@code getDescriptor().getReactiveType()}.\n\t */\n\tpublic Class<?> getReactiveType() {\n\t\treturn getDescriptor().getReactiveType();\n\t}\n\n\t/**\n\t * Shortcut for {@code getDescriptor().isMultiValue()}.\n\t */\n\tpublic boolean isMultiValue() {\n\t\treturn getDescriptor().isMultiValue();\n\t}\n\n\t/**\n\t * Shortcut for {@code getDescriptor().isNoValue()}.\n\t */\n\tpublic boolean isNoValue() {\n\t\treturn getDescriptor().isNoValue();\n\t}\n\n\t/**\n\t * Shortcut for {@code getDescriptor().supportsEmpty()}.\n\t */\n\tpublic boolean supportsEmpty() {\n\t\treturn getDescriptor().supportsEmpty();\n\t}\n\n\n\t/**\n\t * Adapt the given instance to a Reactive Streams {@code Publisher}.\n\t * @param source the source object to adapt from; if the given object is\n\t * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used.\n\t * @return the Publisher representing the adaptation\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> Publisher<T> toPublisher(@Nullable Object source) {\n\t\tif (source == null) {\n\t\t\tsource = getDescriptor().getEmptyValue();\n\t\t}\n\t\treturn (Publisher<T>) this.toPublisherFunction.apply(source);\n\t}\n\n\t/**\n\t * Adapt from the given Reactive Streams Publisher.\n\t * @param publisher the publisher to adapt from\n\t * @return the reactive type instance representing the adapted publisher\n\t */\n\tpublic Object fromPublisher(Publisher<?> publisher) {\n\t\treturn this.fromPublisherFunction.apply(publisher);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapter#descriptor",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#descriptor",
    "headType": "field",
    "relation": "haveType",
    "tail": "ReactiveTypeDescriptor",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapter#toPublisherFunction",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#toPublisherFunction",
    "headType": "field",
    "relation": "haveType",
    "tail": "Function<Object, Publisher<?>>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.ReactiveAdapter#fromPublisherFunction",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#fromPublisherFunction",
    "headType": "field",
    "relation": "haveType",
    "tail": "Function<Publisher<?>, Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#getDescriptor()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the descriptor of the reactive type for the adapter.\r\n */\r\npublic ReactiveTypeDescriptor getDescriptor() {\r\n    return this.descriptor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapter#getDescriptor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#getReactiveType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Shortcut for {@code getDescriptor().getReactiveType()}.\r\n */\r\npublic Class<?> getReactiveType() {\r\n    return getDescriptor().getReactiveType();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapter#getReactiveType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter#isMultiValue()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Shortcut for {@code getDescriptor().isMultiValue()}.\r\n */\r\npublic boolean isMultiValue() {\r\n    return getDescriptor().isMultiValue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ReactiveAdapter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ReactiveAdapter#isMultiValue()",
    "tailType": "method"
  }
]