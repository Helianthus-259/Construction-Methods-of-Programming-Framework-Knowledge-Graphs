[
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenInnerClassGeneratesName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassNameWithClassWhenInnerClassGeneratesName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassWithClassWhenMultipleCallsGeneratesSequencedName()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid generateClassWithClassWhenMultipleCallsGeneratesSequencedName() {\r\n    ClassName generated1 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated2 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    ClassName generated3 = this.generator.generateClassName(\"bytes\", ClassName.get(InputStream.class));\r\n    assertThat(generated1).hasToString(\"java.io.InputStream__Bytes\");\r\n    assertThat(generated2).hasToString(\"java.io.InputStream__Bytes1\");\r\n    assertThat(generated3).hasToString(\"java.io.InputStream__Bytes2\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassWithClassWhenMultipleCallsGeneratesSequencedName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.generate.ClassNameGeneratorTests#generateClassWithClassWhenMultipleCallsGeneratesSequencedName()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.generate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.generate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.generate;\n\nimport java.util.function.Consumer;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.generate.GeneratedFiles.Kind;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.javapoet.ClassName;\nimport org.springframework.javapoet.TypeSpec;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\n/**\n * Tests for {@link DefaultGenerationContext}.\n *\n * @author Phillip Webb\n * @author Stephane Nicoll\n */\nclass DefaultGenerationContextTests {\n\n\tprivate static final ClassName SAMPLE_TARGET = ClassName.get(\"com.example\", \"SampleTarget\");\n\n\tprivate static final Consumer<TypeSpec.Builder> typeSpecCustomizer = type -> {};\n\n\tprivate final GeneratedClasses generatedClasses = new GeneratedClasses(\n\t\t\tnew ClassNameGenerator(SAMPLE_TARGET));\n\n\tprivate final InMemoryGeneratedFiles generatedFiles = new InMemoryGeneratedFiles();\n\n\tprivate final RuntimeHints runtimeHints = new RuntimeHints();\n\n\n\t@Test\n\tvoid createWithOnlyGeneratedFilesCreatesContext() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tnew ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\n\t\tassertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\n\t\tassertThat(context.getRuntimeHints()).isInstanceOf(RuntimeHints.class);\n\t}\n\n\t@Test\n\tvoid createCreatesContext() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tthis.generatedClasses, this.generatedFiles, this.runtimeHints);\n\t\tassertThat(context.getGeneratedFiles()).isNotNull();\n\t\tassertThat(context.getRuntimeHints()).isNotNull();\n\t}\n\n\t@Test\n\tvoid createWhenGeneratedClassesIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new DefaultGenerationContext((GeneratedClasses) null,\n\t\t\t\t\t\tthis.generatedFiles, this.runtimeHints))\n\t\t\t\t.withMessage(\"'generatedClasses' must not be null\");\n\t}\n\n\t@Test\n\tvoid createWhenGeneratedFilesIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses,\n\t\t\t\t\t\tnull, this.runtimeHints))\n\t\t\t\t.withMessage(\"'generatedFiles' must not be null\");\n\t}\n\n\t@Test\n\tvoid createWhenRuntimeHintsIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException()\n\t\t\t\t.isThrownBy(() -> new DefaultGenerationContext(this.generatedClasses,\n\t\t\t\t\t\tthis.generatedFiles, null))\n\t\t\t\t.withMessage(\"'runtimeHints' must not be null\");\n\t}\n\n\t@Test\n\tvoid getGeneratedClassesReturnsClassNameGenerator() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tthis.generatedClasses, this.generatedFiles, this.runtimeHints);\n\t\tassertThat(context.getGeneratedClasses()).isSameAs(this.generatedClasses);\n\t}\n\n\t@Test\n\tvoid getGeneratedFilesReturnsGeneratedFiles() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tthis.generatedClasses, this.generatedFiles, this.runtimeHints);\n\t\tassertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\n\t}\n\n\t@Test\n\tvoid getRuntimeHintsReturnsRuntimeHints() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tthis.generatedClasses, this.generatedFiles, this.runtimeHints);\n\t\tassertThat(context.getRuntimeHints()).isSameAs(this.runtimeHints);\n\t}\n\n\t@Test\n\tvoid withNameUpdateNamingConvention() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tnew ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\n\t\tGenerationContext anotherContext = context.withName(\"Another\");\n\t\tGeneratedClass generatedClass = anotherContext.getGeneratedClasses()\n\t\t\t\t.addForFeature(\"Test\", typeSpecCustomizer);\n\t\tassertThat(generatedClass.getName().simpleName()).endsWith(\"__AnotherTest\");\n\t}\n\n\t@Test\n\tvoid withNameKeepsTrackOfAllGeneratedFiles() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tnew ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\n\t\tcontext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\n\t\tGenerationContext anotherContext = context.withName(\"Another\");\n\t\tassertThat(anotherContext.getGeneratedClasses()).isNotSameAs(context.getGeneratedClasses());\n\t\tassertThat(anotherContext.getGeneratedFiles()).isSameAs(context.getGeneratedFiles());\n\t\tassertThat(anotherContext.getRuntimeHints()).isSameAs(context.getRuntimeHints());\n\t\tanotherContext.getGeneratedClasses().addForFeature(\"Test\", typeSpecCustomizer);\n\t\tcontext.writeGeneratedContent();\n\t\tassertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).hasSize(2);\n\t}\n\n\t@Test\n\tvoid withNameGeneratesUniqueName() {\n\t\tDefaultGenerationContext context = new DefaultGenerationContext(\n\t\t\t\tnew ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\n\t\tcontext.withName(\"Test\").getGeneratedClasses()\n\t\t\t\t.addForFeature(\"Feature\", typeSpecCustomizer);\n\t\tcontext.withName(\"Test\").getGeneratedClasses()\n\t\t\t\t.addForFeature(\"Feature\", typeSpecCustomizer);\n\t\tcontext.withName(\"Test\").getGeneratedClasses()\n\t\t\t\t.addForFeature(\"Feature\", typeSpecCustomizer);\n\t\tcontext.writeGeneratedContent();\n\t\tassertThat(this.generatedFiles.getGeneratedFiles(Kind.SOURCE)).containsOnlyKeys(\n\t\t\t\t\"com/example/SampleTarget__TestFeature.java\",\n\t\t\t\t\"com/example/SampleTarget__Test1Feature.java\",\n\t\t\t\t\"com/example/SampleTarget__Test2Feature.java\");\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#SAMPLE_TARGET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#SAMPLE_TARGET",
    "headType": "field",
    "relation": "haveType",
    "tail": "ClassName",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#typeSpecCustomizer",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#typeSpecCustomizer",
    "headType": "field",
    "relation": "haveType",
    "tail": "Consumer<TypeSpec.Builder>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#generatedClasses",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#generatedClasses",
    "headType": "field",
    "relation": "haveType",
    "tail": "GeneratedClasses",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#generatedFiles",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#generatedFiles",
    "headType": "field",
    "relation": "haveType",
    "tail": "InMemoryGeneratedFiles",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#runtimeHints",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#runtimeHints",
    "headType": "field",
    "relation": "haveType",
    "tail": "RuntimeHints",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests#createWithOnlyGeneratedFilesCreatesContext()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid createWithOnlyGeneratedFilesCreatesContext() {\r\n    DefaultGenerationContext context = new DefaultGenerationContext(new ClassNameGenerator(SAMPLE_TARGET), this.generatedFiles);\r\n    assertThat(context.getGeneratedFiles()).isSameAs(this.generatedFiles);\r\n    assertThat(context.getRuntimeHints()).isInstanceOf(RuntimeHints.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.generate.DefaultGenerationContextTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.generate.DefaultGenerationContextTests#createWithOnlyGeneratedFilesCreatesContext()",
    "tailType": "method"
  }
]