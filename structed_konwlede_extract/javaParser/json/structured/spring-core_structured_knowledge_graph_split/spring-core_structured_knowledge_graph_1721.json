[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithInherited(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void testGetWithInherited(Class<?> element, String... expected) {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS).get(ContextConfiguration.class);\r\n    assertThat(annotation.getStringArray(\"locations\")).isEqualTo(expected);\r\n    assertThat(annotation.getStringArray(\"value\")).isEqualTo(expected);\r\n    assertThat(annotation.getClassArray(\"classes\")).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#testGetWithInherited(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromShadowedAliasComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithInheritedAnnotationsFromShadowedAliasComposedAnnotation() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ShadowedAliasComposedContextConfigurationClass.class, SearchStrategy.INHERITED_ANNOTATIONS).get(ContextConfiguration.class);\r\n    assertThat(annotation.getStringArray(\"locations\")).containsExactly(\"test.xml\");\r\n    assertThat(annotation.getStringArray(\"value\")).containsExactly(\"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromShadowedAliasComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithInheritedAnnotationsFromShadowedAliasComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(InheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromSubInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromSubSubInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubSubInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Transactional.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromNonInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(NonInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(0);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromNonInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubNonInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getWithTypeHierarchyFromSubNonInheritedAnnotationInterface() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(SubNonInheritedAnnotationInterface.class, SearchStrategy.TYPE_HIERARCHY).get(Order.class);\r\n    assertThat(annotation.isPresent()).isTrue();\r\n    assertThat(annotation.getAggregateIndex()).isEqualTo(1);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getWithTypeHierarchyFromSubNonInheritedAnnotationInterface()",
    "tailType": "method"
  }
]