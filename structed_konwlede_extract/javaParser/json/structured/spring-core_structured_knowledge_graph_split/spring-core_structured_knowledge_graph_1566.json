[
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.junit.jupiter.params.provider.Arguments.arguments;\n\n/**\n * Tests for {@link ReflectionTypeReference}.\n *\n * @author Stephane Nicoll\n * @author Moritz Halbritter\n * @author Sebastien Deleuze\n */\nclass ReflectionTypeReferenceTests {\n\n\t@Test\n\tvoid typeReferenceWithNullClass() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(null));\n\t}\n\n\t@Test\n\tvoid typeReferenceWithLambda() {\n\t\tRunnable lambda = () -> { };\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(lambda.getClass()));\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"reflectionTargetNames\")\n\tvoid typeReferenceFromClassHasSuitableReflectionTargetName(Class<?> clazz, String binaryName) {\n\t\tassertThat(ReflectionTypeReference.of(clazz).getName()).isEqualTo(binaryName);\n\t}\n\n\tstatic Stream<Arguments> reflectionTargetNames() {\n\t\treturn Stream.of(\n\t\t\t\targuments(int.class, \"int\"),\n\t\t\t\targuments(int[].class, \"int[]\"),\n\t\t\t\targuments(Integer[].class, \"java.lang.Integer[]\"),\n\t\t\t\targuments(Object[].class, \"java.lang.Object[]\"),\n\t\t\t\targuments(StaticNested.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested\"),\n\t\t\t\targuments(StaticNested[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested[]\"),\n\t\t\t\targuments(Inner.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner\"),\n\t\t\t\targuments(Inner[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner[]\")\n\t\t);\n\t}\n\n\tstatic class StaticNested {\n\t}\n\n\tclass Inner {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeReferenceWithNullClass() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithNullClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithLambda()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeReferenceWithLambda() {\r\n    Runnable lambda = () -> ;;\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(lambda.getClass()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithLambda()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceWithLambda()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedTest\r\n@MethodSource(\"reflectionTargetNames\")\r\nvoid typeReferenceFromClassHasSuitableReflectionTargetName(Class<?> clazz, String binaryName) {\r\n    assertThat(ReflectionTypeReference.of(clazz).getName()).isEqualTo(binaryName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#typeReferenceFromClassHasSuitableReflectionTargetName(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@MethodSource",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests#reflectionTargetNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "static Stream<Arguments> reflectionTargetNames() {\r\n    return Stream.of(arguments(int.class, \"int\"), arguments(int[].class, \"int[]\"), arguments(Integer[].class, \"java.lang.Integer[]\"), arguments(Object[].class, \"java.lang.Object[]\"), arguments(StaticNested.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested\"), arguments(StaticNested[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested[]\"), arguments(Inner.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner\"), arguments(Inner[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner[]\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionTypeReferenceTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionTypeReferenceTests#reflectionTargetNames()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.StaticNested",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.StaticNested",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.junit.jupiter.params.provider.Arguments.arguments;\n\n/**\n * Tests for {@link ReflectionTypeReference}.\n *\n * @author Stephane Nicoll\n * @author Moritz Halbritter\n * @author Sebastien Deleuze\n */\nclass ReflectionTypeReferenceTests {\n\n\t@Test\n\tvoid typeReferenceWithNullClass() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(null));\n\t}\n\n\t@Test\n\tvoid typeReferenceWithLambda() {\n\t\tRunnable lambda = () -> { };\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(lambda.getClass()));\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"reflectionTargetNames\")\n\tvoid typeReferenceFromClassHasSuitableReflectionTargetName(Class<?> clazz, String binaryName) {\n\t\tassertThat(ReflectionTypeReference.of(clazz).getName()).isEqualTo(binaryName);\n\t}\n\n\tstatic Stream<Arguments> reflectionTargetNames() {\n\t\treturn Stream.of(\n\t\t\t\targuments(int.class, \"int\"),\n\t\t\t\targuments(int[].class, \"int[]\"),\n\t\t\t\targuments(Integer[].class, \"java.lang.Integer[]\"),\n\t\t\t\targuments(Object[].class, \"java.lang.Object[]\"),\n\t\t\t\targuments(StaticNested.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested\"),\n\t\t\t\targuments(StaticNested[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested[]\"),\n\t\t\t\targuments(Inner.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner\"),\n\t\t\t\targuments(Inner[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner[]\")\n\t\t);\n\t}\n\n\tstatic class StaticNested {\n\t}\n\n\tclass Inner {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.Inner",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.Inner",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport static org.junit.jupiter.params.provider.Arguments.arguments;\n\n/**\n * Tests for {@link ReflectionTypeReference}.\n *\n * @author Stephane Nicoll\n * @author Moritz Halbritter\n * @author Sebastien Deleuze\n */\nclass ReflectionTypeReferenceTests {\n\n\t@Test\n\tvoid typeReferenceWithNullClass() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(null));\n\t}\n\n\t@Test\n\tvoid typeReferenceWithLambda() {\n\t\tRunnable lambda = () -> { };\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> ReflectionTypeReference.of(lambda.getClass()));\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"reflectionTargetNames\")\n\tvoid typeReferenceFromClassHasSuitableReflectionTargetName(Class<?> clazz, String binaryName) {\n\t\tassertThat(ReflectionTypeReference.of(clazz).getName()).isEqualTo(binaryName);\n\t}\n\n\tstatic Stream<Arguments> reflectionTargetNames() {\n\t\treturn Stream.of(\n\t\t\t\targuments(int.class, \"int\"),\n\t\t\t\targuments(int[].class, \"int[]\"),\n\t\t\t\targuments(Integer[].class, \"java.lang.Integer[]\"),\n\t\t\t\targuments(Object[].class, \"java.lang.Object[]\"),\n\t\t\t\targuments(StaticNested.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested\"),\n\t\t\t\targuments(StaticNested[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$StaticNested[]\"),\n\t\t\t\targuments(Inner.class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner\"),\n\t\t\t\targuments(Inner[].class, \"org.springframework.aot.hint.ReflectionTypeReferenceTests$Inner[]\")\n\t\t);\n\t}\n\n\tstatic class StaticNested {\n\t}\n\n\tclass Inner {\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  }
]