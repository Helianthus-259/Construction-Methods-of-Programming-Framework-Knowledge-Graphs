[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayFromGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveGenericArrayFromGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableGenericArray() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"variableTypeGenericArray\"), TypedFields.class);\r\n    assertThat(type.getType().toString()).isEqualTo(\"T[]\");\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.resolve()).isEqualTo(String[].class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableGenericArrayUnknown() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"variableTypeGenericArray\"));\r\n    assertThat(type.getType().toString()).isEqualTo(\"T[]\");\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.resolve()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknown()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknownWithFallback()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableGenericArrayUnknownWithFallback() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"variableTypeGenericArray\"));\r\n    assertThat(type.getType().toString()).isEqualTo(\"T[]\");\r\n    assertThat(type.isArray()).isTrue();\r\n    assertThat(type.toClass()).isEqualTo(Object.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknownWithFallback()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableGenericArrayUnknownWithFallback()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveWildcardTypeUpperBounds()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveWildcardTypeUpperBounds() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"wildcardType\"));\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(Number.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveWildcardTypeUpperBounds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveWildcardTypeUpperBounds()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveWildcardLowerBounds()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveWildcardLowerBounds() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"wildcardSuperType\"));\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(Number.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveWildcardLowerBounds()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveWildcardLowerBounds()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableFromFieldType() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"stringList\"));\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableFromFieldType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]