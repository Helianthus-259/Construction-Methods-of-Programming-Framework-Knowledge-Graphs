[
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableMapKeyValueTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableMapKeyValueTypes() throws Exception {\r\n    assertThat(new TypeDescriptor(getClass().getField(\"mapField\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"mapField\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"notGenericMap\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"mapField\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"mapField\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"notGenericMap\")))).isTrue();\r\n    assertThat(new TypeDescriptor(getClass().getField(\"isAssignableMapKeyValueTypes\")).isAssignableTo(new TypeDescriptor(getClass().getField(\"mapField\")))).isFalse();\r\n    assertThat(TypeDescriptor.valueOf(Map.class).isAssignableTo(new TypeDescriptor(getClass().getField(\"mapField\")))).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#isAssignableMapKeyValueTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#isAssignableMapKeyValueTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#multiValueMap()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid multiValueMap() throws Exception {\r\n    TypeDescriptor td = new TypeDescriptor(getClass().getField(\"multiValueMap\"));\r\n    assertThat(td.isMap()).isTrue();\r\n    assertThat(td.getMapKeyTypeDescriptor().getType()).isEqualTo(String.class);\r\n    assertThat(td.getMapValueTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(td.getMapValueTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#multiValueMap()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#multiValueMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#passDownGeneric()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid passDownGeneric() throws Exception {\r\n    TypeDescriptor td = new TypeDescriptor(getClass().getField(\"passDownGeneric\"));\r\n    assertThat(td.getElementTypeDescriptor().getType()).isEqualTo(List.class);\r\n    assertThat(td.getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Set.class);\r\n    assertThat(td.getElementTypeDescriptor().getElementTypeDescriptor().getElementTypeDescriptor().getType()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#passDownGeneric()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#passDownGeneric()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#upcast()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid upcast() throws Exception {\r\n    Property property = new Property(getClass(), getClass().getMethod(\"getProperty\"), getClass().getMethod(\"setProperty\", Map.class));\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(property);\r\n    TypeDescriptor upcast = typeDescriptor.upcast(Object.class);\r\n    assertThat(upcast.getAnnotation(MethodAnnotation1.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#upcast()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#upcast()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#upCastNotSuper()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid upCastNotSuper() throws Exception {\r\n    Property property = new Property(getClass(), getClass().getMethod(\"getProperty\"), getClass().getMethod(\"setProperty\", Map.class));\r\n    TypeDescriptor typeDescriptor = new TypeDescriptor(property);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> typeDescriptor.upcast(Collection.class)).withMessage(\"interface java.util.Map is not assignable to interface java.util.Collection\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#upCastNotSuper()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#upCastNotSuper()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForCollectionSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid elementTypeForCollectionSubclass() {\r\n    @SuppressWarnings(\"serial\")\r\n    class CustomSet extends HashSet<String> ;\r\n    assertThat(TypeDescriptor.valueOf(String.class)).isEqualTo(TypeDescriptor.valueOf(CustomSet.class).getElementTypeDescriptor());\r\n    assertThat(TypeDescriptor.valueOf(String.class)).isEqualTo(TypeDescriptor.forObject(new CustomSet()).getElementTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForCollectionSubclass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForCollectionSubclass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForMapSubclass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid elementTypeForMapSubclass() {\r\n    @SuppressWarnings(\"serial\")\r\n    class CustomMap extends HashMap<String, Integer> ;\r\n    assertThat(TypeDescriptor.valueOf(String.class)).isEqualTo(TypeDescriptor.valueOf(CustomMap.class).getMapKeyTypeDescriptor());\r\n    assertThat(TypeDescriptor.valueOf(Integer.class)).isEqualTo(TypeDescriptor.valueOf(CustomMap.class).getMapValueTypeDescriptor());\r\n    assertThat(TypeDescriptor.valueOf(String.class)).isEqualTo(TypeDescriptor.forObject(new CustomMap()).getMapKeyTypeDescriptor());\r\n    assertThat(TypeDescriptor.valueOf(Integer.class)).isEqualTo(TypeDescriptor.forObject(new CustomMap()).getMapValueTypeDescriptor());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.TypeDescriptorTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.TypeDescriptorTests#elementTypeForMapSubclass()",
    "tailType": "method"
  }
]