[
  {
    "head": "org.springframework.core.ResolvableType#forClassWithGenerics(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Class} with pre-declared generics.\r\n * @param clazz the class (or interface) to introspect\r\n * @param generics the generics of the class\r\n * @return a {@code ResolvableType} for the specific class and generics\r\n * @see #forClassWithGenerics(Class, ResolvableType...)\r\n */\r\npublic static ResolvableType forClassWithGenerics(Class<?> clazz, Class<?>... generics) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(generics, \"Generics array must not be null\");\r\n    ResolvableType[] resolvableGenerics = new ResolvableType[generics.length];\r\n    for (int i = 0; i < generics.length; i++) {\r\n        resolvableGenerics[i] = forClass(generics[i]);\r\n    }\r\n    return forClassWithGenerics(clazz, resolvableGenerics);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forClassWithGenerics(Class<?>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forClassWithGenerics(Class<?>,ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Class} with pre-declared generics.\r\n * @param clazz the class (or interface) to introspect\r\n * @param generics the generics of the class\r\n * @return a {@code ResolvableType} for the specific class and generics\r\n * @see #forClassWithGenerics(Class, Class...)\r\n */\r\npublic static ResolvableType forClassWithGenerics(Class<?> clazz, @Nullable ResolvableType@Nullable ... generics) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    TypeVariable<?>[] variables = clazz.getTypeParameters();\r\n    if (generics != null) {\r\n        Assert.isTrue(variables.length == generics.length, () -> \"Mismatched number of generics specified for \" + clazz.toGenericString());\r\n    }\r\n    Type[] arguments = new Type[variables.length];\r\n    for (int i = 0; i < variables.length; i++) {\r\n        ResolvableType generic = (generics != null ? generics[i] : null);\r\n        Type argument = (generic != null ? generic.getType() : null);\r\n        arguments[i] = (argument != null && !(argument instanceof TypeVariable) ? argument : variables[i]);\r\n    }\r\n    return forType(new SyntheticParameterizedType(clazz, arguments), (generics != null ? new TypeVariablesVariableResolver(variables, generics) : null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forClassWithGenerics(Class<?>,ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forInstance(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified instance. The instance does not\r\n * convey generic information but if it implements {@link ResolvableTypeProvider} a\r\n * more precise {@code ResolvableType} can be used than the simple one based on\r\n * the {@link #forClass(Class) Class instance}.\r\n * @param instance the instance (possibly {@code null})\r\n * @return a {@code ResolvableType} for the specified instance,\r\n * or {@code NONE} for {@code null}\r\n * @since 4.2\r\n * @see ResolvableTypeProvider\r\n */\r\npublic static ResolvableType forInstance(@Nullable Object instance) {\r\n    if (instance instanceof ResolvableTypeProvider resolvableTypeProvider) {\r\n        ResolvableType type = resolvableTypeProvider.getResolvableType();\r\n        if (type != null) {\r\n            return type;\r\n        }\r\n    }\r\n    return (instance != null ? forClass(instance.getClass()) : NONE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forInstance(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forField(Field)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Field}.\r\n * @param field the source field\r\n * @return a {@code ResolvableType} for the specified field\r\n * @see #forField(Field, Class)\r\n */\r\npublic static ResolvableType forField(Field field) {\r\n    Assert.notNull(field, \"Field must not be null\");\r\n    return forType(null, new FieldTypeProvider(field), null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forField(Field)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forField(Field,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Field} with a given\r\n * implementation.\r\n * <p>Use this variant when the class that declares the field includes generic\r\n * parameter variables that are satisfied by the implementation class.\r\n * @param field the source field\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified field\r\n * @see #forField(Field)\r\n */\r\npublic static ResolvableType forField(Field field, Class<?> implementationClass) {\r\n    Assert.notNull(field, \"Field must not be null\");\r\n    ResolvableType owner = forType(implementationClass).as(field.getDeclaringClass());\r\n    return forType(null, new FieldTypeProvider(field), owner.asVariableResolver());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forField(Field,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forField(Field,ResolvableType)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Field} with a given\r\n * implementation.\r\n * <p>Use this variant when the class that declares the field includes generic\r\n * parameter variables that are satisfied by the implementation type.\r\n * @param field the source field\r\n * @param implementationType the implementation type\r\n * @return a {@code ResolvableType} for the specified field\r\n * @see #forField(Field)\r\n */\r\npublic static ResolvableType forField(Field field, @Nullable ResolvableType implementationType) {\r\n    Assert.notNull(field, \"Field must not be null\");\r\n    ResolvableType owner = (implementationType != null ? implementationType : NONE);\r\n    owner = owner.as(field.getDeclaringClass());\r\n    return forType(null, new FieldTypeProvider(field), owner.asVariableResolver());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forField(Field,ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forField(Field,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Field} with the\r\n * given nesting level.\r\n * @param field the source field\r\n * @param nestingLevel the nesting level (1 for the outer level; 2 for a nested\r\n * generic type; etc)\r\n * @see #forField(Field)\r\n */\r\npublic static ResolvableType forField(Field field, int nestingLevel) {\r\n    Assert.notNull(field, \"Field must not be null\");\r\n    return forType(null, new FieldTypeProvider(field), null).getNested(nestingLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forField(Field,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forField(Field,int,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Field} with a given\r\n * implementation and the given nesting level.\r\n * <p>Use this variant when the class that declares the field includes generic\r\n * parameter variables that are satisfied by the implementation class.\r\n * @param field the source field\r\n * @param nestingLevel the nesting level (1 for the outer level; 2 for a nested\r\n * generic type; etc)\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified field\r\n * @see #forField(Field)\r\n */\r\npublic static ResolvableType forField(Field field, int nestingLevel, @Nullable Class<?> implementationClass) {\r\n    Assert.notNull(field, \"Field must not be null\");\r\n    ResolvableType owner = forType(implementationClass).as(field.getDeclaringClass());\r\n    return forType(null, new FieldTypeProvider(field), owner.asVariableResolver()).getNested(nestingLevel);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forField(Field,int,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forConstructorParameter(Constructor<?>,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Constructor} parameter.\r\n * @param constructor the source constructor (must not be {@code null})\r\n * @param parameterIndex the parameter index\r\n * @return a {@code ResolvableType} for the specified constructor parameter\r\n * @see #forConstructorParameter(Constructor, int, Class)\r\n */\r\npublic static ResolvableType forConstructorParameter(Constructor<?> constructor, int parameterIndex) {\r\n    Assert.notNull(constructor, \"Constructor must not be null\");\r\n    return forMethodParameter(new MethodParameter(constructor, parameterIndex));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forConstructorParameter(Constructor<?>,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forConstructorParameter(Constructor<?>,int,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Constructor} parameter\r\n * with a given implementation. Use this variant when the class that declares the\r\n * constructor includes generic parameter variables that are satisfied by the\r\n * implementation class.\r\n * @param constructor the source constructor (must not be {@code null})\r\n * @param parameterIndex the parameter index\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified constructor parameter\r\n * @see #forConstructorParameter(Constructor, int)\r\n */\r\npublic static ResolvableType forConstructorParameter(Constructor<?> constructor, int parameterIndex, Class<?> implementationClass) {\r\n    Assert.notNull(constructor, \"Constructor must not be null\");\r\n    MethodParameter methodParameter = new MethodParameter(constructor, parameterIndex, implementationClass);\r\n    return forMethodParameter(methodParameter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forConstructorParameter(Constructor<?>,int,Class<?>)",
    "tailType": "method"
  }
]