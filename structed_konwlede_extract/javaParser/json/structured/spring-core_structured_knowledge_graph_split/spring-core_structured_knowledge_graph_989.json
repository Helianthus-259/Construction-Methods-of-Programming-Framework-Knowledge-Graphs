[
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteBuffers()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic DataBuffer.ByteBufferIterator writableByteBuffers() {\r\n    ByteBuffer slice = this.byteBuffer.slice(this.writePosition, writableByteCount());\r\n    return new ByteBufferIterator(slice);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteBuffers()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#writableByteBuffers()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#toString(int,int,Charset)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString(int index, int length, Charset charset) {\r\n    checkIndex(index, length);\r\n    Assert.notNull(charset, \"Charset must not be null\");\r\n    byte[] bytes;\r\n    int offset;\r\n    if (this.byteBuffer.hasArray()) {\r\n        bytes = this.byteBuffer.array();\r\n        offset = this.byteBuffer.arrayOffset() + index;\r\n    } else {\r\n        bytes = new byte[length];\r\n        offset = 0;\r\n        ByteBuffer duplicate = this.byteBuffer.duplicate();\r\n        duplicate.clear().position(index).limit(index + length);\r\n        duplicate.get(bytes, 0, length);\r\n    }\r\n    return new String(bytes, offset, length, charset);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#toString(int,int,Charset)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#toString(int,int,Charset)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#calculateCapacity(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Calculate the capacity of the buffer.\r\n * @see io.netty.buffer.AbstractByteBufAllocator#calculateNewCapacity(int, int)\r\n */\r\nprivate int calculateCapacity(int neededCapacity) {\r\n    Assert.isTrue(neededCapacity >= 0, \"'neededCapacity' must be >= 0\");\r\n    if (neededCapacity == CAPACITY_THRESHOLD) {\r\n        return CAPACITY_THRESHOLD;\r\n    } else if (neededCapacity > CAPACITY_THRESHOLD) {\r\n        int newCapacity = neededCapacity / CAPACITY_THRESHOLD * CAPACITY_THRESHOLD;\r\n        if (newCapacity > MAX_CAPACITY - CAPACITY_THRESHOLD) {\r\n            newCapacity = MAX_CAPACITY;\r\n        } else {\r\n            newCapacity += CAPACITY_THRESHOLD;\r\n        }\r\n        return newCapacity;\r\n    } else {\r\n        int newCapacity = 64;\r\n        while (newCapacity < neededCapacity) {\r\n            newCapacity <<= 1;\r\n        }\r\n        return Math.min(newCapacity, MAX_CAPACITY);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#calculateCapacity(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    return (this == other || (other instanceof DefaultDataBuffer that && this.readPosition == that.readPosition && this.writePosition == that.writePosition && this.byteBuffer.equals(that.byteBuffer)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#equals(Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#equals(Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return this.byteBuffer.hashCode();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String toString() {\r\n    return String.format(\"DefaultDataBuffer (r: %d, w: %d, c: %d)\", this.readPosition, this.writePosition, this.capacity);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#checkIndex(int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void checkIndex(int index, int length) {\r\n    checkIndex(index);\r\n    checkLength(length);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DefaultDataBuffer#checkIndex(int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DefaultDataBuffer#checkIndex(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void checkIndex(int index) {\r\n    assertIndex(index >= 0, \"index %d must be >= 0\", index);\r\n    assertIndex(index <= this.capacity, \"index %d must be <= %d\", index, this.capacity);\r\n}",
    "tailType": "method_code"
  }
]