[
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndNullMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableWithTypeMismatchAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isAssignable(String.class, Integer.class, () -> \"enigma\")).withMessageContaining(\"enigma: class java.lang.Integer\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isAssignableWithTypeMismatchAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#state()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid state() {\r\n    Assert.state(true, \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#state()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#state()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#stateWithFalseExpression()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid stateWithFalseExpression() {\r\n    assertThatIllegalStateException().isThrownBy(() -> Assert.state(false, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#stateWithFalseExpression()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#stateWithFalseExpression()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.JavaSerializationHint",
    "tailType": "class"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.AutoPopulatingListTests",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.JavaSerializationHint",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\n\nimport java.io.Serializable;\nimport java.util.Objects;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * A hint that describes the need for Java serialization at runtime.\n *\n * @author Brian Clozel\n * @since 6.0\n */\npublic final class JavaSerializationHint implements ConditionalHint {\n\n\tprivate final TypeReference type;\n\n\tprivate final @Nullable TypeReference reachableType;\n\n\n\tJavaSerializationHint(Builder builder) {\n\t\tthis.type = builder.type;\n\t\tthis.reachableType = builder.reachableType;\n\t}\n\n\n\t/**\n\t * Return the {@link TypeReference type} that needs to be serialized using Java serialization at runtime.\n\t * @return a {@link Serializable} type\n\t */\n\tpublic TypeReference getType() {\n\t\treturn this.type;\n\t}\n\n\t@Override\n\tpublic @Nullable TypeReference getReachableType() {\n\t\treturn this.reachableType;\n\t}\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof JavaSerializationHint that &&\n\t\t\t\tthis.type.equals(that.type) && Objects.equals(this.reachableType, that.reachableType)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(this.type, this.reachableType);\n\t}\n\n\n\t/**\n\t * Builder for {@link JavaSerializationHint}.\n\t */\n\tpublic static class Builder {\n\n\t\tprivate final TypeReference type;\n\n\t\tprivate @Nullable TypeReference reachableType;\n\n\t\tBuilder(TypeReference type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t/**\n\t\t * Make this hint conditional on the fact that the specified type can be resolved.\n\t\t * @param reachableType the type that should be reachable for this hint to apply\n\t\t * @return {@code this}, to facilitate method chaining\n\t\t */\n\t\tpublic Builder onReachableType(TypeReference reachableType) {\n\t\t\tthis.reachableType = reachableType;\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Create a {@link JavaSerializationHint} based on the state of this builder.\n\t\t * @return a java serialization hint\n\t\t */\n\t\tJavaSerializationHint build() {\n\t\t\treturn new JavaSerializationHint(this);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.JavaSerializationHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.JavaSerializationHint#type",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.JavaSerializationHint#type",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.JavaSerializationHint",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.JavaSerializationHint#reachableType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.JavaSerializationHint#reachableType",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeReference",
    "tailType": "type"
  }
]