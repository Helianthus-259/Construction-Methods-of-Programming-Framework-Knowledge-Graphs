[
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantInvokeDynamic(String,String,Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\r\n * table. Does nothing if the constant pool already contains a similar item.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\r\n *     Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\r\n * @param name a method name.\r\n * @param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\r\n *     CONSTANT_INVOKE_DYNAMIC_TAG.\r\n * @param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nprivate Symbol addConstantDynamicOrInvokeDynamicReference(final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) {\r\n    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor));\r\n    return put(new Entry(constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\r\n * symbol table.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\r\n *     Symbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\r\n * @param index the constant pool index of the new Symbol.\r\n * @param name a method name.\r\n * @param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\r\n *     CONSTANT_INVOKE_DYNAMIC_TAG.\r\n * @param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\r\n */\r\nprivate void addConstantDynamicOrInvokeDynamicReference(final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) {\r\n    int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex);\r\n    add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantModule(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Module_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param moduleName a fully qualified name (using dots) of a module.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantModule(final String moduleName) {\r\n    return addConstantUtf8Reference(Symbol.CONSTANT_MODULE_TAG, moduleName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantModule(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Package_info to the constant pool of this symbol table. Does nothing if the\r\n * constant pool already contains a similar item.\r\n *\r\n * @param packageName the internal name of a package.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addConstantPackage(final String packageName) {\r\n    return addConstantUtf8Reference(Symbol.CONSTANT_PACKAGE_TAG, packageName);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantPackage(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\r\n * CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\r\n * nothing if the constant pool already contains a similar item.\r\n *\r\n * @param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\r\n *     Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\r\n *     Symbol#CONSTANT_PACKAGE_TAG}.\r\n * @param value an internal class name, an arbitrary string, a method descriptor, a module or a\r\n *     package name, depending on tag.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nprivate Symbol addConstantUtf8Reference(final int tag, final String value) {\r\n    int hashCode = hash(tag, value);\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) {\r\n            return entry;\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    constantPool.put12(tag, addConstantUtf8(value));\r\n    return put(new Entry(constantPoolCount++, tag, value, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\r\n * CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\r\n *\r\n * @param index the constant pool index of the new Symbol.\r\n * @param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\r\n *     Symbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\r\n *     Symbol#CONSTANT_PACKAGE_TAG}.\r\n * @param value an internal class name, an arbitrary string, a method descriptor, a module or a\r\n *     package name, depending on tag.\r\n */\r\nprivate void addConstantUtf8Reference(final int index, final int tag, final String value) {\r\n    add(new Entry(index, tag, value, hash(tag, value)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addConstantUtf8Reference(int,int,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Bootstrap method entries management.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\r\n * the BootstrapMethods already contains a similar bootstrap method.\r\n *\r\n * @param bootstrapMethodHandle a bootstrap method handle.\r\n * @param bootstrapMethodArguments the bootstrap method arguments.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nSymbol addBootstrapMethod(final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) {\r\n    ByteVector bootstrapMethodsAttribute = bootstrapMethods;\r\n    if (bootstrapMethodsAttribute == null) {\r\n        bootstrapMethodsAttribute = bootstrapMethods = new ByteVector();\r\n    }\r\n    // The bootstrap method arguments can be Constant_Dynamic values, which reference other\r\n    // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool\r\n    // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified\r\n    // while adding the given bootstrap method to it, in the rest of this method.\r\n    int numBootstrapArguments = bootstrapMethodArguments.length;\r\n    int[] bootstrapMethodArgumentIndexes = new int[numBootstrapArguments];\r\n    for (int i = 0; i < numBootstrapArguments; i++) {\r\n        bootstrapMethodArgumentIndexes[i] = addConstant(bootstrapMethodArguments[i]).index;\r\n    }\r\n    // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to\r\n    // compare it with existing ones, and will be reverted below if there is already a similar\r\n    // bootstrap method.\r\n    int bootstrapMethodOffset = bootstrapMethodsAttribute.length;\r\n    bootstrapMethodsAttribute.putShort(addConstantMethodHandle(bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()).index);\r\n    bootstrapMethodsAttribute.putShort(numBootstrapArguments);\r\n    for (int i = 0; i < numBootstrapArguments; i++) {\r\n        bootstrapMethodsAttribute.putShort(bootstrapMethodArgumentIndexes[i]);\r\n    }\r\n    // Compute the length and the hash code of the bootstrap method.\r\n    int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset;\r\n    int hashCode = bootstrapMethodHandle.hashCode();\r\n    for (Object bootstrapMethodArgument : bootstrapMethodArguments) {\r\n        hashCode ^= bootstrapMethodArgument.hashCode();\r\n    }\r\n    hashCode &= 0x7FFFFFFF;\r\n    // Add the bootstrap method to the symbol table or revert the above changes.\r\n    return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addBootstrapMethod(Handle,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\r\n * the BootstrapMethods already contains a similar bootstrap method (more precisely, reverts the\r\n * content of {@link #bootstrapMethods} to remove the last, duplicate bootstrap method).\r\n *\r\n * @param offset the offset of the last bootstrap method in {@link #bootstrapMethods}, in bytes.\r\n * @param length the length of this bootstrap method in {@link #bootstrapMethods}, in bytes.\r\n * @param hashCode the hash code of this bootstrap method.\r\n * @return a new or already existing Symbol with the given value.\r\n */\r\nprivate Symbol addBootstrapMethod(final int offset, final int length, final int hashCode) {\r\n    final byte[] bootstrapMethodsData = bootstrapMethods.data;\r\n    Entry entry = get(hashCode);\r\n    while (entry != null) {\r\n        if (entry.tag == Symbol.BOOTSTRAP_METHOD_TAG && entry.hashCode == hashCode) {\r\n            int otherOffset = (int) entry.data;\r\n            boolean isSameBootstrapMethod = true;\r\n            for (int i = 0; i < length; ++i) {\r\n                if (bootstrapMethodsData[offset + i] != bootstrapMethodsData[otherOffset + i]) {\r\n                    isSameBootstrapMethod = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (isSameBootstrapMethod) {\r\n                // Revert to old position.\r\n                bootstrapMethods.length = offset;\r\n                return entry;\r\n            }\r\n        }\r\n        entry = entry.next;\r\n    }\r\n    return put(new Entry(bootstrapMethodCount++, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#addBootstrapMethod(int,int,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#getType(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "// -----------------------------------------------------------------------------------------------\r\n// Type table entries management.\r\n// -----------------------------------------------------------------------------------------------\r\n/**\r\n * Returns the type table element whose index is given.\r\n *\r\n * @param typeIndex a type table index.\r\n * @return the type table element whose index is given.\r\n */\r\nSymbol getType(final int typeIndex) {\r\n    return typeTable[typeIndex];\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.asm.SymbolTable",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.asm.SymbolTable#getType(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.asm.SymbolTable#getForwardUninitializedLabel(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns the label corresponding to the \"forward uninitialized\" type table element whose index\r\n * is given.\r\n *\r\n * @param typeIndex the type table index of a \"forward uninitialized\" type table element.\r\n * @return the label corresponding of the NEW instruction which created this \"forward\r\n *     uninitialized\" type.\r\n */\r\nLabel getForwardUninitializedLabel(final int typeIndex) {\r\n    return labelTable[(int) typeTable[typeIndex].data].label;\r\n}",
    "tailType": "method_code"
  }
]