[
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnTypeReferenceShouldMatchIntrospection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid reflectionOnDifferentClassShouldNotMatchIntrospection() {\r\n    runtimeHints.reflection().registerType(Integer.class);\r\n    assertPredicateDoesNotMatch(reflection.onType(TypeReference.of(SampleClass.class)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#reflectionOnDifferentClassShouldNotMatchIntrospection()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithMemberCategoryFailsWithNullCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> reflection.onType(SampleClass.class).withMemberCategory(null));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryFailsWithNullCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithMemberCategoryMatchesCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertPredicateMatches(reflection.onType(SampleClass.class).withMemberCategory(MemberCategory.INTROSPECT_PUBLIC_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryMatchesCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithMemberCategoryDoesNotMatchOtherCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onType(SampleClass.class).withMemberCategory(MemberCategory.INVOKE_PUBLIC_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoryDoesNotMatchOtherCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithMemberCategoriesMatchesCategories() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertPredicateMatches(reflection.onType(SampleClass.class).withMemberCategories(MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesMatchesCategories()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithMemberCategoriesDoesNotMatchMissingCategory() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertPredicateDoesNotMatch(reflection.onType(SampleClass.class).withMemberCategories(MemberCategory.INTROSPECT_PUBLIC_CONSTRUCTORS, MemberCategory.INTROSPECT_PUBLIC_METHODS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithMemberCategoriesDoesNotMatchMissingCategory()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.predicate.ReflectionOnType#typeWithAnyMemberCategoryFailsWithNullCategories()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid typeWithAnyMemberCategoryFailsWithNullCategories() {\r\n    runtimeHints.reflection().registerType(SampleClass.class, MemberCategory.INTROSPECT_PUBLIC_METHODS);\r\n    assertThatIllegalArgumentException().isThrownBy(() -> reflection.onType(SampleClass.class).withAnyMemberCategory(new MemberCategory[0]));\r\n}",
    "tailType": "method_code"
  }
]