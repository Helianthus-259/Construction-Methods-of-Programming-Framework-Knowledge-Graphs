[
  {
    "head": "org.springframework.util.AssertTests#hasLengthWithNullAndNullMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasText()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasText() {\r\n    Assert.hasText(\"foo\", \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasText()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasText()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnly()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithWhitespaceOnly() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnly()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnly()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithEmptyString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithEmptyString() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasTextWithEmptyString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithEmptyString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(null, \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasTextWithNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithMessageSupplier() {\r\n    Assert.hasText(\"foo\", () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasTextWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnlyAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithWhitespaceOnlyAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\\t \", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnlyAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithWhitespaceOnlyAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#hasTextWithEmptyStringAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hasTextWithEmptyStringAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.hasText(\"\", () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  }
]