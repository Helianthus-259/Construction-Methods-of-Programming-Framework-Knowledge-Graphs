[
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayMatchWords()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#doTestStringArrayReverseTransformationMatches(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestStringArrayReverseTransformationMatches(String[] sa) {\r\n    String[] reverse = StringUtils.commaDelimitedListToStringArray(StringUtils.arrayToCommaDelimitedString(sa));\r\n    assertThat(Arrays.asList(reverse)).as(\"Reverse transformation is equal\").isEqualTo(Arrays.asList(sa));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#doTestStringArrayReverseTransformationMatches(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid commaDelimitedListToStringArraySingleString() {\r\n    // Could read these from files\r\n    String s = \"woeirqupoiewuropqiewuorpqiwueopriquwopeiurqopwieur\";\r\n    String[] sa = StringUtils.commaDelimitedListToStringArray(s);\r\n    assertThat(sa.length).as(\"Found one String with no delimiters\").isEqualTo(1);\r\n    assertThat(sa[0]).as(\"Single array entry matches input String with no delimiters\").isEqualTo(s);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArraySingleString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid commaDelimitedListToStringArrayWithOtherPunctuation() {\r\n    // Could read these from files\r\n    String[] sa = new String[] { \"xcvwert4456346&*.\", \"///\", \".!\", \".\", \";\" };\r\n    doTestCommaDelimitedListToStringArrayLegalMatch(sa);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayWithOtherPunctuation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * We expect to see the empty Strings in the output.\r\n */\r\n@Test\r\nvoid commaDelimitedListToStringArrayEmptyStrings() {\r\n    // Could read these from files\r\n    String[] sa = StringUtils.commaDelimitedListToStringArray(\"a,,b\");\r\n    assertThat(sa.length).as(\"a,,b produces array length 3\").isEqualTo(3);\r\n    assertThat(sa[0].equals(\"a\") && sa[1].isEmpty() && sa[2].equals(\"b\")).as(\"components are correct\").isTrue();\r\n    sa = new String[] { \"\", \"\", \"a\", \"\" };\r\n    doTestCommaDelimitedListToStringArrayLegalMatch(sa);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#commaDelimitedListToStringArrayEmptyStrings()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#doTestCommaDelimitedListToStringArrayLegalMatch(String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private void doTestCommaDelimitedListToStringArrayLegalMatch(String[] components) {\r\n    String sb = String.join(String.valueOf(','), components);\r\n    String[] sa = StringUtils.commaDelimitedListToStringArray(sb);\r\n    assertThat(sa).as(\"String array isn't null with legal match\").isNotNull();\r\n    assertThat(sa.length).as(\"String array length is correct with legal match\").isEqualTo(components.length);\r\n    assertThat(Arrays.equals(sa, components)).as(\"Output equals input\").isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#doTestCommaDelimitedListToStringArrayLegalMatch(String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocaleStringSunnyDay() {\r\n    Locale expectedLocale = Locale.UK;\r\n    Locale locale = StringUtils.parseLocaleString(expectedLocale.toString());\r\n    assertThat(locale).as(\"When given a bona-fide Locale string, must not return null.\").isNotNull();\r\n    assertThat(locale).isEqualTo(expectedLocale);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringSunnyDay()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocaleStringWithEmptyLocaleStringYieldsNullLocale() {\r\n    Locale locale = StringUtils.parseLocaleString(\"\");\r\n    assertThat(locale).as(\"When given an empty Locale string, must return null.\").isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyLocaleStringYieldsNullLocale()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]