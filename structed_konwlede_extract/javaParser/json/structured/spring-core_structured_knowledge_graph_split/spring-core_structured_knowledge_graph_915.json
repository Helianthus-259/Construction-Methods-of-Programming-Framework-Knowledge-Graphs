[
  {
    "head": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(Profiles)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean acceptsProfiles(Profiles profiles) {\r\n    Assert.notNull(profiles, \"Profiles must not be null\");\r\n    return profiles.matches(this::isProfileActive);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(Profiles)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#acceptsProfiles(Profiles)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#isProfileActive(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return whether the given profile is active, or if active profiles are empty\r\n * whether the profile should be active by default.\r\n * @throws IllegalArgumentException per {@link #validateProfile(String)}\r\n */\r\nprotected boolean isProfileActive(String profile) {\r\n    validateProfile(profile);\r\n    Set<String> currentActiveProfiles = doGetActiveProfiles();\r\n    return (currentActiveProfiles.contains(profile) || (currentActiveProfiles.isEmpty() && doGetDefaultProfiles().contains(profile)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#isProfileActive(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#validateProfile(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Validate the given profile, called internally prior to adding to the set of\r\n * active or default profiles.\r\n * <p>Subclasses may override to impose further restrictions on profile syntax.\r\n * @throws IllegalArgumentException if the profile is null, empty, whitespace-only or\r\n * begins with the profile NOT operator (!).\r\n * @see #acceptsProfiles\r\n * @see #addActiveProfile\r\n * @see #setDefaultProfiles\r\n */\r\nprotected void validateProfile(String profile) {\r\n    if (!StringUtils.hasText(profile)) {\r\n        throw new IllegalArgumentException(\"Invalid profile [\" + profile + \"]: must contain text\");\r\n    }\r\n    if (profile.charAt(0) == '!') {\r\n        throw new IllegalArgumentException(\"Invalid profile [\" + profile + \"]: must not begin with ! operator\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#validateProfile(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getPropertySources()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MutablePropertySources getPropertySources() {\r\n    return this.propertySources;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getPropertySources()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getPropertySources()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\npublic Map<String, Object> getSystemProperties() {\r\n    return (Map) System.getProperties();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getSystemProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemEnvironment()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\npublic Map<String, Object> getSystemEnvironment() {\r\n    if (suppressGetenvAccess()) {\r\n        return Collections.emptyMap();\r\n    }\r\n    return (Map) System.getenv();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractEnvironment#getSystemEnvironment()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemEnvironment()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#getSystemEnvironment()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractEnvironment#suppressGetenvAccess()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether to suppress {@link System#getenv()}/{@link System#getenv(String)}\r\n * access for the purposes of {@link #getSystemEnvironment()}.\r\n * <p>If this method returns {@code true}, an empty dummy Map will be used instead\r\n * of the regular system environment Map, never even trying to call {@code getenv}\r\n * and therefore avoiding security manager warnings (if any).\r\n * <p>The default implementation checks for the \"spring.getenv.ignore\" system property,\r\n * returning {@code true} if its value equals \"true\" in any case.\r\n * @see #IGNORE_GETENV_PROPERTY_NAME\r\n * @see SpringProperties#getFlag\r\n */\r\nprotected boolean suppressGetenvAccess() {\r\n    return SpringProperties.getFlag(IGNORE_GETENV_PROPERTY_NAME);\r\n}",
    "tailType": "method_code"
  }
]