[
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setValueSeparator(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setEscapeCharacter(Character)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Specify the escape character to use to ignore placeholder prefix\r\n * or value separator, or {@code null} if no escaping should take\r\n * place.\r\n * <p>The default is \"\\\".\r\n * @since 6.2\r\n * @see org.springframework.util.SystemPropertyUtils#ESCAPE_CHARACTER\r\n */\r\n@Override\r\npublic void setEscapeCharacter(@Nullable Character escapeCharacter) {\r\n    this.escapeCharacter = escapeCharacter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setEscapeCharacter(Character)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setEscapeCharacter(Character)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setIgnoreUnresolvableNestedPlaceholders(boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Set whether to throw an exception when encountering an unresolvable placeholder\r\n * nested within the value of a given property. A {@code false} value indicates strict\r\n * resolution, i.e. that an exception will be thrown. A {@code true} value indicates\r\n * that unresolvable nested placeholders should be passed through in their unresolved\r\n * ${...} form.\r\n * <p>The default is {@code false}.\r\n * @since 3.2\r\n */\r\n@Override\r\npublic void setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNestedPlaceholders) {\r\n    this.ignoreUnresolvableNestedPlaceholders = ignoreUnresolvableNestedPlaceholders;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setIgnoreUnresolvableNestedPlaceholders(boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setIgnoreUnresolvableNestedPlaceholders(boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setRequiredProperties(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setRequiredProperties(String... requiredProperties) {\r\n    Collections.addAll(this.requiredProperties, requiredProperties);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#setRequiredProperties(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#setRequiredProperties(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#validateRequiredProperties()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void validateRequiredProperties() {\r\n    MissingRequiredPropertiesException ex = new MissingRequiredPropertiesException();\r\n    for (String key : this.requiredProperties) {\r\n        if (this.getProperty(key) == null) {\r\n            ex.addMissingRequiredProperty(key);\r\n        }\r\n    }\r\n    if (!ex.getMissingRequiredProperties().isEmpty()) {\r\n        throw ex;\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#validateRequiredProperties()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#validateRequiredProperties()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#containsProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean containsProperty(String key) {\r\n    return (getProperty(key) != null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#containsProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#containsProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic String getProperty(String key) {\r\n    return getProperty(key, String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.env.AbstractPropertyResolver#getProperty(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]