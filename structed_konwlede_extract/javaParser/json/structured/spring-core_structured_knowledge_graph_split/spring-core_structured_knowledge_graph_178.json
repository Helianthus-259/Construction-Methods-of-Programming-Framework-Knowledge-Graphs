[
  {
    "head": "org.springframework.util.comparator.ComparatorsTests#nullsHighWithExplicitComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.predicate",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.predicate",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.predicate;\n\nimport org.springframework.aot.hint.ProxyHints;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.ResourceHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.SerializationHints;\n\n/**\n * Static generator of predicates that test whether the given {@link RuntimeHints}\n * instance matches the expected behavior for reflection, resource, serialization,\n * or proxy generation.\n *\n * <p>This utility class can be used by {@link RuntimeHintsRegistrar} to conditionally\n * register hints depending on what's present already. This can also be used as a\n * testing utility for checking proper registration of hints:\n * <pre class=\"code\">\n * Predicate&lt;RuntimeHints&gt; predicate = RuntimeHintsPredicates.reflection().onMethod(MyClass.class, \"someMethod\").invoke();\n * assertThat(predicate).accepts(runtimeHints);\n * </pre>\n *\n * @author Brian Clozel\n * @author Stephane Nicoll\n * @since 6.0\n */\npublic abstract class RuntimeHintsPredicates {\n\n\tprivate static final ReflectionHintsPredicates reflection = new ReflectionHintsPredicates();\n\n\tprivate static final ResourceHintsPredicates resource = new ResourceHintsPredicates();\n\n\tprivate static final SerializationHintsPredicates serialization = new SerializationHintsPredicates();\n\n\tprivate static final ProxyHintsPredicates proxies = new ProxyHintsPredicates();\n\n\n\tprivate RuntimeHintsPredicates() {\n\t}\n\n\t/**\n\t * Return a predicate generator for {@link ReflectionHints reflection hints}.\n\t * @return the predicate generator\n\t */\n\tpublic static ReflectionHintsPredicates reflection() {\n\t\treturn reflection;\n\t}\n\n\t/**\n\t * Return a predicate generator for {@link ResourceHints resource hints}.\n\t * @return the predicate generator\n\t */\n\tpublic static ResourceHintsPredicates resource() {\n\t\treturn resource;\n\t}\n\n\t/**\n\t * Return a predicate generator for {@link SerializationHints serialization hints}.\n\t * @return the predicate generator\n\t */\n\tpublic static SerializationHintsPredicates serialization() {\n\t\treturn serialization;\n\t}\n\n\t/**\n\t * Return a predicate generator for {@link ProxyHints proxy hints}.\n\t * @return the predicate generator\n\t */\n\tpublic static ProxyHintsPredicates proxies() {\n\t\treturn proxies;\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#reflection",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#reflection",
    "headType": "field",
    "relation": "haveType",
    "tail": "ReflectionHintsPredicates",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#resource",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#resource",
    "headType": "field",
    "relation": "haveType",
    "tail": "ResourceHintsPredicates",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#serialization",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#serialization",
    "headType": "field",
    "relation": "haveType",
    "tail": "SerializationHintsPredicates",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#proxies",
    "tailType": "field"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#proxies",
    "headType": "field",
    "relation": "haveType",
    "tail": "ProxyHintsPredicates",
    "tailType": "type"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#reflection()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate generator for {@link ReflectionHints reflection hints}.\r\n * @return the predicate generator\r\n */\r\npublic static ReflectionHintsPredicates reflection() {\r\n    return reflection;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#reflection()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#resource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate generator for {@link ResourceHints resource hints}.\r\n * @return the predicate generator\r\n */\r\npublic static ResourceHintsPredicates resource() {\r\n    return resource;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#resource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#serialization()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate generator for {@link SerializationHints serialization hints}.\r\n * @return the predicate generator\r\n */\r\npublic static SerializationHintsPredicates serialization() {\r\n    return serialization;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#serialization()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#proxies()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a predicate generator for {@link ProxyHints proxy hints}.\r\n * @return the predicate generator\r\n */\r\npublic static ProxyHintsPredicates proxies() {\r\n    return proxies;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.predicate.RuntimeHintsPredicates#proxies()",
    "tailType": "method"
  }
]