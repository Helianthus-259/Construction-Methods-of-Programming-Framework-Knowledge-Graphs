[
  {
    "head": "org.springframework.core.TypeProvider#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the source of the type, or {@code null} if not known.\r\n * <p>The default implementation returns {@code null}.\r\n */\r\n@Nullable\r\ndefault Object getSource() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TypeProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TypeProvider#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TypeProvider#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.TypeProvider",
    "headType": "class",
    "relation": "extend",
    "tail": "Serializable",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.TypeProxyInvocationHandler",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Internal utility class that can be used to obtain wrapped {@link Serializable}\n * variants of {@link java.lang.reflect.Type java.lang.reflect.Types}.\n *\n * <p>{@link #forField(Field) Fields} or {@link #forMethodParameter(MethodParameter)\n * MethodParameters} can be used as the root source for a serializable type.\n * Alternatively, a regular {@link Class} can also be used as source.\n *\n * <p>The returned type will either be a {@link Class} or a serializable proxy of\n * {@link GenericArrayType}, {@link ParameterizedType}, {@link TypeVariable} or\n * {@link WildcardType}. With the exception of {@link Class} (which is final) calls\n * to methods that return further {@link Type Types} (for example\n * {@link GenericArrayType#getGenericComponentType()}) will be automatically wrapped.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 4.0\n */\nfinal class SerializableTypeWrapper {\n\n\tprivate static final Class<?>[] SUPPORTED_SERIALIZABLE_TYPES = {\n\t\t\tGenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class};\n\n\tstatic final ConcurrentReferenceHashMap<Type, Type> cache = new ConcurrentReferenceHashMap<>(256);\n\n\n\tprivate SerializableTypeWrapper() {\n\t}\n\n\n\t/**\n\t * Return a {@link Serializable} variant of {@link Field#getGenericType()}.\n\t */\n\tpublic static @Nullable Type forField(Field field) {\n\t\treturn forTypeProvider(new FieldTypeProvider(field));\n\t}\n\n\t/**\n\t * Return a {@link Serializable} variant of\n\t * {@link MethodParameter#getGenericParameterType()}.\n\t */\n\tpublic static @Nullable Type forMethodParameter(MethodParameter methodParameter) {\n\t\treturn forTypeProvider(new MethodParameterTypeProvider(methodParameter));\n\t}\n\n\t/**\n\t * Unwrap the given type, effectively returning the original non-serializable type.\n\t * @param type the type to unwrap\n\t * @return the original non-serializable type\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Type> T unwrap(T type) {\n\t\tType unwrapped = null;\n\t\tif (type instanceof SerializableTypeProxy proxy) {\n\t\t\tunwrapped = proxy.getTypeProvider().getType();\n\t\t}\n\t\treturn (unwrapped != null ? (T) unwrapped : type);\n\t}\n\n\t/**\n\t * Return a {@link Serializable} {@link Type} backed by a {@link TypeProvider} .\n\t * <p>If type artifacts are generally not serializable in the current runtime\n\t * environment, this delegate will simply return the original {@code Type} as-is.\n\t */\n\tstatic @Nullable Type forTypeProvider(TypeProvider provider) {\n\t\tType providedType = provider.getType();\n\t\tif (providedType == null || providedType instanceof Serializable) {\n\t\t\t// No serializable type wrapping necessary (for example, for java.lang.Class)\n\t\t\treturn providedType;\n\t\t}\n\t\tif (NativeDetector.inNativeImage() || !Serializable.class.isAssignableFrom(Class.class)) {\n\t\t\t// Let's skip any wrapping attempts if types are generally not serializable in\n\t\t\t// the current runtime environment (even java.lang.Class itself, for example, on GraalVM native images)\n\t\t\treturn providedType;\n\t\t}\n\n\t\t// Obtain a serializable type proxy for the given provider...\n\t\tType cached = cache.get(providedType);\n\t\tif (cached != null) {\n\t\t\treturn cached;\n\t\t}\n\t\tfor (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) {\n\t\t\tif (type.isInstance(providedType)) {\n\t\t\t\tClassLoader classLoader = provider.getClass().getClassLoader();\n\t\t\t\tClass<?>[] interfaces = new Class<?>[] {type, SerializableTypeProxy.class, Serializable.class};\n\t\t\t\tInvocationHandler handler = new TypeProxyInvocationHandler(provider);\n\t\t\t\tcached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);\n\t\t\t\tcache.put(providedType, cached);\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Unsupported Type class: \" + providedType.getClass().getName());\n\t}\n\n\n\t/**\n\t * Additional interface implemented by the type proxy.\n\t */\n\tinterface SerializableTypeProxy {\n\n\t\t/**\n\t\t * Return the underlying type provider.\n\t\t */\n\t\tTypeProvider getTypeProvider();\n\t}\n\n\n\t/**\n\t * A {@link Serializable} interface providing access to a {@link Type}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tinterface TypeProvider extends Serializable {\n\n\t\t/**\n\t\t * Return the (possibly non {@link Serializable}) {@link Type}.\n\t\t */\n\t\t@Nullable Type getType();\n\n\t\t/**\n\t\t * Return the source of the type, or {@code null} if not known.\n\t\t * <p>The default implementation returns {@code null}.\n\t\t */\n\t\tdefault @Nullable Object getSource() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Serializable} {@link InvocationHandler} used by the proxied {@link Type}.\n\t * Provides serialization support and enhances any methods that return {@code Type}\n\t * or {@code Type[]}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tprivate static class TypeProxyInvocationHandler implements InvocationHandler, Serializable {\n\n\t\tprivate final TypeProvider provider;\n\n\t\tpublic TypeProxyInvocationHandler(TypeProvider provider) {\n\t\t\tthis.provider = provider;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\tswitch (method.getName()) {\n\t\t\t\tcase \"equals\" -> {\n\t\t\t\t\tObject other = args[0];\n\t\t\t\t\t// Unwrap proxies for speed\n\t\t\t\t\tif (other instanceof Type otherType) {\n\t\t\t\t\t\tother = unwrap(otherType);\n\t\t\t\t\t}\n\t\t\t\t\treturn ObjectUtils.nullSafeEquals(this.provider.getType(), other);\n\t\t\t\t}\n\t\t\t\tcase \"hashCode\" -> {\n\t\t\t\t\treturn ObjectUtils.nullSafeHashCode(this.provider.getType());\n\t\t\t\t}\n\t\t\t\tcase \"getTypeProvider\" -> {\n\t\t\t\t\treturn this.provider;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Type.class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\n\t\t\t\treturn forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, -1));\n\t\t\t}\n\t\t\telse if (Type[].class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\n\t\t\t\tObject returnValue = ReflectionUtils.invokeMethod(method, this.provider.getType());\n\t\t\t\tif (returnValue == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t@Nullable Type[] result = new Type[((Type[]) returnValue).length];\n\t\t\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\t\t\tresult[i] = forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, i));\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tType type = this.provider.getType();\n\t\t\tif (type instanceof TypeVariable<?> tv && method.getName().equals(\"getName\")) {\n\t\t\t\t// Avoid reflection for common comparison of type variables\n\t\t\t\treturn tv.getName();\n\t\t\t}\n\t\t\treturn ReflectionUtils.invokeMethod(method, type, args);\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained from a {@link Field}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class FieldTypeProvider implements TypeProvider {\n\n\t\tprivate final String fieldName;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate transient Field field;\n\n\t\tpublic FieldTypeProvider(Field field) {\n\t\t\tthis.fieldName = field.getName();\n\t\t\tthis.declaringClass = field.getDeclaringClass();\n\t\t\tthis.field = field;\n\t\t}\n\n\t\t@Override\n\t\tpublic Type getType() {\n\t\t\treturn this.field.getGenericType();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\treturn this.field;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\ttry {\n\t\t\t\tthis.field = this.declaringClass.getDeclaredField(this.fieldName);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not find original class structure\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained from a {@link MethodParameter}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class MethodParameterTypeProvider implements TypeProvider {\n\n\t\tprivate final @Nullable String methodName;\n\n\t\tprivate final Class<?>[] parameterTypes;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate final int parameterIndex;\n\n\t\tprivate transient MethodParameter methodParameter;\n\n\t\tpublic MethodParameterTypeProvider(MethodParameter methodParameter) {\n\t\t\tthis.methodName = (methodParameter.getMethod() != null ? methodParameter.getMethod().getName() : null);\n\t\t\tthis.parameterTypes = methodParameter.getExecutable().getParameterTypes();\n\t\t\tthis.declaringClass = methodParameter.getDeclaringClass();\n\t\t\tthis.parameterIndex = methodParameter.getParameterIndex();\n\t\t\tthis.methodParameter = methodParameter;\n\t\t}\n\n\t\t@Override\n\t\tpublic Type getType() {\n\t\t\treturn this.methodParameter.getGenericParameterType();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\treturn this.methodParameter;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\ttry {\n\t\t\t\tif (this.methodName != null) {\n\t\t\t\t\tthis.methodParameter = new MethodParameter(\n\t\t\t\t\t\t\tthis.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.methodParameter = new MethodParameter(\n\t\t\t\t\t\t\tthis.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not find original class structure\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained by invoking a no-arg method.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class MethodInvokeTypeProvider implements TypeProvider {\n\n\t\tprivate final TypeProvider provider;\n\n\t\tprivate final String methodName;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate final int index;\n\n\t\tprivate transient Method method;\n\n\t\tprivate transient volatile @Nullable Object result;\n\n\t\tpublic MethodInvokeTypeProvider(TypeProvider provider, Method method, int index) {\n\t\t\tthis.provider = provider;\n\t\t\tthis.methodName = method.getName();\n\t\t\tthis.declaringClass = method.getDeclaringClass();\n\t\t\tthis.index = index;\n\t\t\tthis.method = method;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Type getType() {\n\t\t\tObject result = this.result;\n\t\t\tif (result == null) {\n\t\t\t\t// Lazy invocation of the target method on the provided type\n\t\t\t\tresult = ReflectionUtils.invokeMethod(this.method, this.provider.getType());\n\t\t\t\t// Cache the result for further calls to getType()\n\t\t\t\tthis.result = result;\n\t\t\t}\n\t\t\treturn (result instanceof Type[] results ? results[this.index] : (Type) result);\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Object getSource() {\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\tMethod method = ReflectionUtils.findMethod(this.declaringClass, this.methodName);\n\t\t\tif (method == null) {\n\t\t\t\tthrow new IllegalStateException(\"Cannot find method on deserialization: \" + this.methodName);\n\t\t\t}\n\t\t\tif (method.getReturnType() != Type.class && method.getReturnType() != Type[].class) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Invalid return type on deserialized method - needs to be Type or Type[]: \" + method);\n\t\t\t}\n\t\t\tthis.method = method;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.TypeProxyInvocationHandler#provider",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler#provider",
    "headType": "field",
    "relation": "haveType",
    "tail": "TypeProvider",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler#invoke(Object,Method,Object[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n    switch(method.getName()) {\r\n        case \"equals\" ->\r\n            {\r\n                Object other = args[0];\r\n                // Unwrap proxies for speed\r\n                if (other instanceof Type otherType) {\r\n                    other = unwrap(otherType);\r\n                }\r\n                return ObjectUtils.nullSafeEquals(this.provider.getType(), other);\r\n            }\r\n        case \"hashCode\" ->\r\n            {\r\n                return ObjectUtils.nullSafeHashCode(this.provider.getType());\r\n            }\r\n        case \"getTypeProvider\" ->\r\n            {\r\n                return this.provider;\r\n            }\r\n    }\r\n    if (Type.class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\r\n        return forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, -1));\r\n    } else if (Type[].class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\r\n        Object returnValue = ReflectionUtils.invokeMethod(method, this.provider.getType());\r\n        if (returnValue == null) {\r\n            return null;\r\n        }\r\n        @Nullable\r\n        Type[] result = new Type[((Type[]) returnValue).length];\r\n        for (int i = 0; i < result.length; i++) {\r\n            result[i] = forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, i));\r\n        }\r\n        return result;\r\n    }\r\n    Type type = this.provider.getType();\r\n    if (type instanceof TypeVariable<?> tv && method.getName().equals(\"getName\")) {\r\n        // Avoid reflection for common comparison of type variables\r\n        return tv.getName();\r\n    }\r\n    return ReflectionUtils.invokeMethod(method, type, args);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.TypeProxyInvocationHandler#invoke(Object,Method,Object[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler#invoke(Object,Method,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.TypeProxyInvocationHandler#invoke(Object,Method,Object[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.FieldTypeProvider",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.ConcurrentReferenceHashMap;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.ReflectionUtils;\n\n/**\n * Internal utility class that can be used to obtain wrapped {@link Serializable}\n * variants of {@link java.lang.reflect.Type java.lang.reflect.Types}.\n *\n * <p>{@link #forField(Field) Fields} or {@link #forMethodParameter(MethodParameter)\n * MethodParameters} can be used as the root source for a serializable type.\n * Alternatively, a regular {@link Class} can also be used as source.\n *\n * <p>The returned type will either be a {@link Class} or a serializable proxy of\n * {@link GenericArrayType}, {@link ParameterizedType}, {@link TypeVariable} or\n * {@link WildcardType}. With the exception of {@link Class} (which is final) calls\n * to methods that return further {@link Type Types} (for example\n * {@link GenericArrayType#getGenericComponentType()}) will be automatically wrapped.\n *\n * @author Phillip Webb\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 4.0\n */\nfinal class SerializableTypeWrapper {\n\n\tprivate static final Class<?>[] SUPPORTED_SERIALIZABLE_TYPES = {\n\t\t\tGenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class};\n\n\tstatic final ConcurrentReferenceHashMap<Type, Type> cache = new ConcurrentReferenceHashMap<>(256);\n\n\n\tprivate SerializableTypeWrapper() {\n\t}\n\n\n\t/**\n\t * Return a {@link Serializable} variant of {@link Field#getGenericType()}.\n\t */\n\tpublic static @Nullable Type forField(Field field) {\n\t\treturn forTypeProvider(new FieldTypeProvider(field));\n\t}\n\n\t/**\n\t * Return a {@link Serializable} variant of\n\t * {@link MethodParameter#getGenericParameterType()}.\n\t */\n\tpublic static @Nullable Type forMethodParameter(MethodParameter methodParameter) {\n\t\treturn forTypeProvider(new MethodParameterTypeProvider(methodParameter));\n\t}\n\n\t/**\n\t * Unwrap the given type, effectively returning the original non-serializable type.\n\t * @param type the type to unwrap\n\t * @return the original non-serializable type\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T extends Type> T unwrap(T type) {\n\t\tType unwrapped = null;\n\t\tif (type instanceof SerializableTypeProxy proxy) {\n\t\t\tunwrapped = proxy.getTypeProvider().getType();\n\t\t}\n\t\treturn (unwrapped != null ? (T) unwrapped : type);\n\t}\n\n\t/**\n\t * Return a {@link Serializable} {@link Type} backed by a {@link TypeProvider} .\n\t * <p>If type artifacts are generally not serializable in the current runtime\n\t * environment, this delegate will simply return the original {@code Type} as-is.\n\t */\n\tstatic @Nullable Type forTypeProvider(TypeProvider provider) {\n\t\tType providedType = provider.getType();\n\t\tif (providedType == null || providedType instanceof Serializable) {\n\t\t\t// No serializable type wrapping necessary (for example, for java.lang.Class)\n\t\t\treturn providedType;\n\t\t}\n\t\tif (NativeDetector.inNativeImage() || !Serializable.class.isAssignableFrom(Class.class)) {\n\t\t\t// Let's skip any wrapping attempts if types are generally not serializable in\n\t\t\t// the current runtime environment (even java.lang.Class itself, for example, on GraalVM native images)\n\t\t\treturn providedType;\n\t\t}\n\n\t\t// Obtain a serializable type proxy for the given provider...\n\t\tType cached = cache.get(providedType);\n\t\tif (cached != null) {\n\t\t\treturn cached;\n\t\t}\n\t\tfor (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) {\n\t\t\tif (type.isInstance(providedType)) {\n\t\t\t\tClassLoader classLoader = provider.getClass().getClassLoader();\n\t\t\t\tClass<?>[] interfaces = new Class<?>[] {type, SerializableTypeProxy.class, Serializable.class};\n\t\t\t\tInvocationHandler handler = new TypeProxyInvocationHandler(provider);\n\t\t\t\tcached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);\n\t\t\t\tcache.put(providedType, cached);\n\t\t\t\treturn cached;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Unsupported Type class: \" + providedType.getClass().getName());\n\t}\n\n\n\t/**\n\t * Additional interface implemented by the type proxy.\n\t */\n\tinterface SerializableTypeProxy {\n\n\t\t/**\n\t\t * Return the underlying type provider.\n\t\t */\n\t\tTypeProvider getTypeProvider();\n\t}\n\n\n\t/**\n\t * A {@link Serializable} interface providing access to a {@link Type}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tinterface TypeProvider extends Serializable {\n\n\t\t/**\n\t\t * Return the (possibly non {@link Serializable}) {@link Type}.\n\t\t */\n\t\t@Nullable Type getType();\n\n\t\t/**\n\t\t * Return the source of the type, or {@code null} if not known.\n\t\t * <p>The default implementation returns {@code null}.\n\t\t */\n\t\tdefault @Nullable Object getSource() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link Serializable} {@link InvocationHandler} used by the proxied {@link Type}.\n\t * Provides serialization support and enhances any methods that return {@code Type}\n\t * or {@code Type[]}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tprivate static class TypeProxyInvocationHandler implements InvocationHandler, Serializable {\n\n\t\tprivate final TypeProvider provider;\n\n\t\tpublic TypeProxyInvocationHandler(TypeProvider provider) {\n\t\t\tthis.provider = provider;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\tswitch (method.getName()) {\n\t\t\t\tcase \"equals\" -> {\n\t\t\t\t\tObject other = args[0];\n\t\t\t\t\t// Unwrap proxies for speed\n\t\t\t\t\tif (other instanceof Type otherType) {\n\t\t\t\t\t\tother = unwrap(otherType);\n\t\t\t\t\t}\n\t\t\t\t\treturn ObjectUtils.nullSafeEquals(this.provider.getType(), other);\n\t\t\t\t}\n\t\t\t\tcase \"hashCode\" -> {\n\t\t\t\t\treturn ObjectUtils.nullSafeHashCode(this.provider.getType());\n\t\t\t\t}\n\t\t\t\tcase \"getTypeProvider\" -> {\n\t\t\t\t\treturn this.provider;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Type.class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\n\t\t\t\treturn forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, -1));\n\t\t\t}\n\t\t\telse if (Type[].class == method.getReturnType() && ObjectUtils.isEmpty(args)) {\n\t\t\t\tObject returnValue = ReflectionUtils.invokeMethod(method, this.provider.getType());\n\t\t\t\tif (returnValue == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t@Nullable Type[] result = new Type[((Type[]) returnValue).length];\n\t\t\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\t\t\tresult[i] = forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, i));\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tType type = this.provider.getType();\n\t\t\tif (type instanceof TypeVariable<?> tv && method.getName().equals(\"getName\")) {\n\t\t\t\t// Avoid reflection for common comparison of type variables\n\t\t\t\treturn tv.getName();\n\t\t\t}\n\t\t\treturn ReflectionUtils.invokeMethod(method, type, args);\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained from a {@link Field}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class FieldTypeProvider implements TypeProvider {\n\n\t\tprivate final String fieldName;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate transient Field field;\n\n\t\tpublic FieldTypeProvider(Field field) {\n\t\t\tthis.fieldName = field.getName();\n\t\t\tthis.declaringClass = field.getDeclaringClass();\n\t\t\tthis.field = field;\n\t\t}\n\n\t\t@Override\n\t\tpublic Type getType() {\n\t\t\treturn this.field.getGenericType();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\treturn this.field;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\ttry {\n\t\t\t\tthis.field = this.declaringClass.getDeclaredField(this.fieldName);\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not find original class structure\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained from a {@link MethodParameter}.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class MethodParameterTypeProvider implements TypeProvider {\n\n\t\tprivate final @Nullable String methodName;\n\n\t\tprivate final Class<?>[] parameterTypes;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate final int parameterIndex;\n\n\t\tprivate transient MethodParameter methodParameter;\n\n\t\tpublic MethodParameterTypeProvider(MethodParameter methodParameter) {\n\t\t\tthis.methodName = (methodParameter.getMethod() != null ? methodParameter.getMethod().getName() : null);\n\t\t\tthis.parameterTypes = methodParameter.getExecutable().getParameterTypes();\n\t\t\tthis.declaringClass = methodParameter.getDeclaringClass();\n\t\t\tthis.parameterIndex = methodParameter.getParameterIndex();\n\t\t\tthis.methodParameter = methodParameter;\n\t\t}\n\n\t\t@Override\n\t\tpublic Type getType() {\n\t\t\treturn this.methodParameter.getGenericParameterType();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\treturn this.methodParameter;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\ttry {\n\t\t\t\tif (this.methodName != null) {\n\t\t\t\t\tthis.methodParameter = new MethodParameter(\n\t\t\t\t\t\t\tthis.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.methodParameter = new MethodParameter(\n\t\t\t\t\t\t\tthis.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not find original class structure\", ex);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * {@link TypeProvider} for {@link Type Types} obtained by invoking a no-arg method.\n\t */\n\t@SuppressWarnings(\"serial\")\n\tstatic class MethodInvokeTypeProvider implements TypeProvider {\n\n\t\tprivate final TypeProvider provider;\n\n\t\tprivate final String methodName;\n\n\t\tprivate final Class<?> declaringClass;\n\n\t\tprivate final int index;\n\n\t\tprivate transient Method method;\n\n\t\tprivate transient volatile @Nullable Object result;\n\n\t\tpublic MethodInvokeTypeProvider(TypeProvider provider, Method method, int index) {\n\t\t\tthis.provider = provider;\n\t\t\tthis.methodName = method.getName();\n\t\t\tthis.declaringClass = method.getDeclaringClass();\n\t\t\tthis.index = index;\n\t\t\tthis.method = method;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Type getType() {\n\t\t\tObject result = this.result;\n\t\t\tif (result == null) {\n\t\t\t\t// Lazy invocation of the target method on the provided type\n\t\t\t\tresult = ReflectionUtils.invokeMethod(this.method, this.provider.getType());\n\t\t\t\t// Cache the result for further calls to getType()\n\t\t\t\tthis.result = result;\n\t\t\t}\n\t\t\treturn (result instanceof Type[] results ? results[this.index] : (Type) result);\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable Object getSource() {\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\n\t\t\tinputStream.defaultReadObject();\n\t\t\tMethod method = ReflectionUtils.findMethod(this.declaringClass, this.methodName);\n\t\t\tif (method == null) {\n\t\t\t\tthrow new IllegalStateException(\"Cannot find method on deserialization: \" + this.methodName);\n\t\t\t}\n\t\t\tif (method.getReturnType() != Type.class && method.getReturnType() != Type[].class) {\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"Invalid return type on deserialized method - needs to be Type or Type[]: \" + method);\n\t\t\t}\n\t\t\tthis.method = method;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.FieldTypeProvider#fieldName",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider#fieldName",
    "headType": "field",
    "relation": "haveType",
    "tail": "String",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.FieldTypeProvider#declaringClass",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.FieldTypeProvider#declaringClass",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  }
]