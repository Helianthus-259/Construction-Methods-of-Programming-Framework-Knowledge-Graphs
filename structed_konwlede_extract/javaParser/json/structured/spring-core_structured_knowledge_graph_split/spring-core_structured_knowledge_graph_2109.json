[
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedWildcard()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedWildcard()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedDoubleWildcard()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isAssignableFromForUnresolvedDoubleWildcard() {\r\n    ResolvableType wildcard = ResolvableType.forInstance(new DoubleWildcard<>());\r\n    ResolvableType wildcardFixed = ResolvableType.forInstance(new DoubleWildcardFixed());\r\n    ResolvableType wildcardConsumer = ResolvableType.forInstance(new DoubleWildcardConsumer<>());\r\n    assertThat(wildcard.isAssignableFrom(wildcardFixed)).isTrue();\r\n    assertThat(wildcard.isAssignableFromResolvedPart(wildcardFixed)).isTrue();\r\n    assertThat(wildcardFixed.isAssignableFrom(wildcard)).isFalse();\r\n    assertThat(wildcardFixed.isAssignableFromResolvedPart(wildcard)).isFalse();\r\n    assertThat(wildcardConsumer.as(Consumer.class).getGeneric().isAssignableFrom(wildcard)).isTrue();\r\n    assertThat(wildcardConsumer.as(Consumer.class).getGeneric().isAssignableFromResolvedPart(wildcard)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedDoubleWildcard()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#isAssignableFromForUnresolvedDoubleWildcard()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#strictGenericsMatching()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid strictGenericsMatching() {\r\n    ResolvableType consumerUnresolved = ResolvableType.forClass(Consumer.class);\r\n    ResolvableType consumerObject = ResolvableType.forClassWithGenerics(Consumer.class, Object.class);\r\n    ResolvableType consumerNestedUnresolved = ResolvableType.forClassWithGenerics(Consumer.class, ResolvableType.forClass(Consumer.class));\r\n    ResolvableType consumerNumber = ResolvableType.forClassWithGenerics(Consumer.class, Number.class);\r\n    ResolvableType consumerExtendsNumber = ResolvableType.forClass(SubConsumer.class);\r\n    assertThat(consumerUnresolved.isAssignableFrom(consumerObject)).isTrue();\r\n    assertThat(consumerUnresolved.isAssignableFromResolvedPart(consumerObject)).isTrue();\r\n    assertThat(consumerObject.isAssignableFrom(consumerUnresolved)).isTrue();\r\n    assertThat(consumerObject.isAssignableFromResolvedPart(consumerUnresolved)).isTrue();\r\n    assertThat(consumerUnresolved.isAssignableFrom(consumerNestedUnresolved)).isTrue();\r\n    assertThat(consumerUnresolved.isAssignableFromResolvedPart(consumerNestedUnresolved)).isTrue();\r\n    assertThat(consumerObject.isAssignableFrom(consumerNestedUnresolved)).isFalse();\r\n    assertThat(consumerObject.isAssignableFromResolvedPart(consumerNestedUnresolved)).isFalse();\r\n    assertThat(consumerObject.isAssignableFrom(consumerNumber)).isFalse();\r\n    assertThat(consumerObject.isAssignableFromResolvedPart(consumerNumber)).isFalse();\r\n    assertThat(consumerObject.isAssignableFrom(consumerExtendsNumber)).isFalse();\r\n    assertThat(consumerObject.isAssignableFromResolvedPart(consumerExtendsNumber)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#strictGenericsMatching()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#strictGenericsMatching()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#identifyTypeVariable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid identifyTypeVariable() throws Exception {\r\n    Method method = ClassArguments.class.getMethod(\"typedArgumentFirst\", Class.class, Class.class, Class.class);\r\n    ResolvableType returnType = ResolvableType.forMethodReturnType(method, ClassArguments.class);\r\n    ResolvableType arg0 = ResolvableType.forMethodParameter(method, 0, ClassArguments.class);\r\n    ResolvableType arg1 = ResolvableType.forMethodParameter(method, 1, ClassArguments.class);\r\n    ResolvableType arg2 = ResolvableType.forMethodParameter(method, 2, ClassArguments.class);\r\n    assertThat(returnType.getType().equals(arg0.as(Class.class).getGeneric(0).getType())).isTrue();\r\n    assertThat(returnType.getType().equals(arg1.as(Class.class).getGeneric(0).getType())).isFalse();\r\n    assertThat(returnType.getType().equals(arg2.as(Class.class).getGeneric(0).getType())).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#identifyTypeVariable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#identifyTypeVariable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hashCodeAndEquals()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid hashCodeAndEquals() throws Exception {\r\n    ResolvableType forClass = ResolvableType.forClass(List.class);\r\n    ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField(\"stringList\"));\r\n    ResolvableType forFieldViaType = ResolvableType.forType(Fields.class.getDeclaredField(\"stringList\").getGenericType(), (VariableResolver) null);\r\n    ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField(\"stringList\"), TypedFields.class);\r\n    assertThat(forClass).isEqualTo(forClass);\r\n    assertThat(forClass.hashCode()).isEqualTo(forClass.hashCode());\r\n    assertThat(forClass).isNotEqualTo(forFieldDirect);\r\n    assertThat(forClass).isNotEqualTo(forFieldWithImplementation);\r\n    assertThat(forFieldDirect).isEqualTo(forFieldDirect);\r\n    assertThat(forFieldDirect).isNotEqualTo(forFieldViaType);\r\n    assertThat(forFieldDirect).isNotEqualTo(forFieldWithImplementation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#hashCodeAndEquals()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#hashCodeAndEquals()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#javaDocSample()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid javaDocSample() throws Exception {\r\n    ResolvableType t = ResolvableType.forField(getClass().getDeclaredField(\"myMap\"));\r\n    assertThat(t.toString()).isEqualTo(\"java.util.HashMap<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(t.getType().getTypeName()).isEqualTo(\"java.util.HashMap<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(t.getType().toString()).isEqualTo(\"java.util.HashMap<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(t.getSuperType().toString()).isEqualTo(\"java.util.AbstractMap<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(t.asMap().toString()).isEqualTo(\"java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>\");\r\n    assertThat(t.getGeneric(0).resolve()).isEqualTo(Integer.class);\r\n    assertThat(t.getGeneric(1).resolve()).isEqualTo(List.class);\r\n    assertThat(t.getGeneric(1).toString()).isEqualTo(\"java.util.List<java.lang.String>\");\r\n    assertThat(t.resolveGeneric(1, 0)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#javaDocSample()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#javaDocSample()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forClassWithGenerics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forClassWithGenerics() {\r\n    ResolvableType elementType = ResolvableType.forClassWithGenerics(Map.class, Integer.class, String.class);\r\n    ResolvableType listType = ResolvableType.forClassWithGenerics(List.class, elementType);\r\n    assertThat(listType.toString()).isEqualTo(\"java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>\");\r\n    assertThat(listType.getType().getTypeName()).isEqualTo(\"java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>\");\r\n    assertThat(listType.getType().toString()).isEqualTo(\"java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forClassWithGenerics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forClassWithGenerics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]