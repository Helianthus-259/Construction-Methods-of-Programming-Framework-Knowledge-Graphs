[
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMap()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid notEmptyMapWithMessageSupplier() {\r\n    Assert.notEmpty(singletonMap(\"foo\", \"bar\"), () -> \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#notEmptyMapWithMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid notEmptyMapWithEmptyMapAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyMap(), () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithNullMapAndMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid notEmptyMapWithNullMapAndMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty((Map<?, ?>) null, () -> \"enigma\")).withMessageContaining(\"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#notEmptyMapWithNullMapAndMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithNullMapAndMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndNullMessageSupplier()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid notEmptyMapWithEmptyMapAndNullMessageSupplier() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.notEmpty(emptyMap(), (Supplier<String>) null)).withMessage(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndNullMessageSupplier()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#notEmptyMapWithEmptyMapAndNullMessageSupplier()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOf()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOf() {\r\n    Assert.isInstanceOf(String.class, \"foo\", \"enigma\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithNullType() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(null, \"foo\", \"enigma\")).withMessageContaining(\"Type to check against must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AssertTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AssertTests#isInstanceOfWithNullType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AssertTests#isInstanceOfWithNullInstance()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid isInstanceOfWithNullInstance() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Assert.isInstanceOf(String.class, null, \"enigma\")).withMessageContaining(\"enigma: null\");\r\n}",
    "tailType": "method_code"
  }
]