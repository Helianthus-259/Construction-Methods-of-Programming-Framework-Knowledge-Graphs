[
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#resolvePlaceholder(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#resolvePlaceholder(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#resolvePlaceholder(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#handleUnresolvablePlaceholder(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public String handleUnresolvablePlaceholder(String key, String text) {\r\n    if (this.ignoreUnresolvablePlaceholders) {\r\n        return toPlaceholderText(key);\r\n    }\r\n    String originalValue = (!key.equals(text) ? toPlaceholderText(text) : null);\r\n    throw new PlaceholderResolutionException(\"Could not resolve placeholder '%s'\".formatted(key), key, originalValue);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#handleUnresolvablePlaceholder(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#toPlaceholderText(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private String toPlaceholderText(String text) {\r\n    return this.prefix + text + this.suffix;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#toPlaceholderText(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#parse(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public List<Part> parse(String text) {\r\n    return this.parser.apply(text);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#parse(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#flagPlaceholderAsVisited(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void flagPlaceholderAsVisited(String placeholder) {\r\n    if (this.visitedPlaceholders == null) {\r\n        this.visitedPlaceholders = new HashSet<>(4);\r\n    }\r\n    if (!this.visitedPlaceholders.add(placeholder)) {\r\n        throw new PlaceholderResolutionException(\"Circular placeholder reference '%s'\".formatted(placeholder), placeholder, null);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#flagPlaceholderAsVisited(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.PartResolutionContext#removePlaceholder(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void removePlaceholder(String placeholder) {\r\n    Assert.state(this.visitedPlaceholders != null, \"Visited placeholders must not be null\");\r\n    this.visitedPlaceholders.remove(placeholder);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.PartResolutionContext",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.PartResolutionContext#removePlaceholder(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.Part",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.Part",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Function;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;\n\n/**\n * Parser for Strings that have placeholder values in them. In its simplest form,\n * a placeholder takes the form of {@code ${name}}, where {@code name} is the key\n * that can be resolved using a {@link PlaceholderResolver PlaceholderResolver},\n * <code>${</code> the prefix, and <code>}</code> the suffix.\n *\n * <p>A placeholder can also have a default value if its key does not represent a\n * known property. The default value is separated from the key using a\n * {@code separator}. For instance {@code ${name:John}} resolves to {@code John} if\n * the placeholder resolver does not provide a value for the {@code name}\n * property.\n *\n * <p>Placeholders can also have a more complex structure, and the resolution of\n * a given key can involve the resolution of nested placeholders. Default values\n * can also have placeholders.\n *\n * <p>For situations where the syntax of a valid placeholder matches a String that\n * must be rendered as is, the placeholder can be escaped using an {@code escape}\n * character. For instance {@code \\${name}} resolves as {@code ${name}}.\n *\n * <p>The prefix, suffix, separator, and escape characters are configurable. Only\n * the prefix and suffix are mandatory, and the support for default values or\n * escaping is conditional on providing non-null values for them.\n *\n * <p>This parser makes sure to resolves placeholders as lazily as possible.\n *\n * @author Stephane Nicoll\n * @since 6.2\n */\nfinal class PlaceholderParser {\n\n\tprivate static final Log logger = LogFactory.getLog(PlaceholderParser.class);\n\n\tprivate static final Map<String, String> wellKnownSimplePrefixes = Map.of(\n\t\t\t\"}\", \"{\",\n\t\t\t\"]\", \"[\",\n\t\t\t\")\", \"(\"\n\t\t);\n\n\n\tprivate final String prefix;\n\n\tprivate final String suffix;\n\n\tprivate final String simplePrefix;\n\n\tprivate final @Nullable String separator;\n\n\tprivate final boolean ignoreUnresolvablePlaceholders;\n\n\tprivate final @Nullable Character escape;\n\n\n\t/**\n\t * Create an instance using the specified input for the parser.\n\t * @param prefix the prefix that denotes the start of a placeholder\n\t * @param suffix the suffix that denotes the end of a placeholder\n\t * @param separator the separating character between the placeholder\n\t * variable and the associated default value, if any\n\t * @param escape the character to use at the beginning of a placeholder\n\t * prefix or separator to escape it and render it as is\n\t * @param ignoreUnresolvablePlaceholders whether unresolvable placeholders\n\t * should be ignored ({@code true}) or cause an exception ({@code false})\n\t */\n\tPlaceholderParser(String prefix, String suffix, @Nullable String separator,\n\t\t\t@Nullable Character escape, boolean ignoreUnresolvablePlaceholders) {\n\t\tthis.prefix = prefix;\n\t\tthis.suffix = suffix;\n\t\tString simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.suffix);\n\t\tif (simplePrefixForSuffix != null && this.prefix.endsWith(simplePrefixForSuffix)) {\n\t\t\tthis.simplePrefix = simplePrefixForSuffix;\n\t\t}\n\t\telse {\n\t\t\tthis.simplePrefix = this.prefix;\n\t\t}\n\t\tthis.separator = separator;\n\t\tthis.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;\n\t\tthis.escape = escape;\n\t}\n\n\t/**\n\t * Replace all placeholders of format {@code ${name}} with the value returned\n\t * from the supplied {@link PlaceholderResolver}.\n\t * @param value the value containing the placeholders to be replaced\n\t * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\n\t * @return the supplied value with placeholders replaced inline\n\t */\n\tpublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\n\t\tAssert.notNull(value, \"'value' must not be null\");\n\t\tParsedValue parsedValue = parse(value);\n\t\tPartResolutionContext resolutionContext = new PartResolutionContext(placeholderResolver,\n\t\t\t\tthis.prefix, this.suffix, this.ignoreUnresolvablePlaceholders,\n\t\t\t\tcandidate -> parse(candidate, false));\n\t\treturn parsedValue.resolve(resolutionContext);\n\t}\n\n\t/**\n\t * Parse the specified value.\n\t * @param value the value containing the placeholders to be replaced\n\t * @return the different parts that have been identified\n\t */\n\tParsedValue parse(String value) {\n\t\tList<Part> parts = parse(value, false);\n\t\treturn new ParsedValue(value, parts);\n\t}\n\n\tprivate List<Part> parse(String value, boolean inPlaceholder) {\n\t\tLinkedList<Part> parts = new LinkedList<>();\n\t\tint startIndex = nextStartPrefix(value, 0);\n\t\tif (startIndex == -1) {\n\t\t\tPart part = (inPlaceholder ? createSimplePlaceholderPart(value) : new TextPart(value));\n\t\t\tparts.add(part);\n\t\t\treturn parts;\n\t\t}\n\t\tint position = 0;\n\t\twhile (startIndex != -1) {\n\t\t\tint endIndex = nextValidEndPrefix(value, startIndex);\n\t\t\tif (endIndex == -1) { // Not a valid placeholder, consume the prefix and continue\n\t\t\t\taddText(value, position, startIndex + this.prefix.length(), parts);\n\t\t\t\tposition = startIndex + this.prefix.length();\n\t\t\t\tstartIndex = nextStartPrefix(value, position);\n\t\t\t}\n\t\t\telse if (isEscaped(value, startIndex)) { // Not a valid index, accumulate and skip the escape character\n\t\t\t\taddText(value, position, startIndex - 1, parts);\n\t\t\t\taddText(value, startIndex, startIndex + this.prefix.length(), parts);\n\t\t\t\tposition = startIndex + this.prefix.length();\n\t\t\t\tstartIndex = nextStartPrefix(value, position);\n\t\t\t}\n\t\t\telse { // Found valid placeholder, recursive parsing\n\t\t\t\taddText(value, position, startIndex, parts);\n\t\t\t\tString placeholder = value.substring(startIndex + this.prefix.length(), endIndex);\n\t\t\t\tList<Part> placeholderParts = parse(placeholder, true);\n\t\t\t\tparts.addAll(placeholderParts);\n\t\t\t\tstartIndex = nextStartPrefix(value, endIndex + this.suffix.length());\n\t\t\t\tposition = endIndex + this.suffix.length();\n\t\t\t}\n\t\t}\n\t\t// Add rest of text if necessary\n\t\taddText(value, position, value.length(), parts);\n\t\treturn (inPlaceholder ? List.of(createNestedPlaceholderPart(value, parts)) : parts);\n\t}\n\n\tprivate SimplePlaceholderPart createSimplePlaceholderPart(String text) {\n\t\tParsedSection section = parseSection(text);\n\t\treturn new SimplePlaceholderPart(text, section.key(), section.fallback());\n\t}\n\n\tprivate NestedPlaceholderPart createNestedPlaceholderPart(String text, List<Part> parts) {\n\t\tif (this.separator == null) {\n\t\t\treturn new NestedPlaceholderPart(text, parts, null);\n\t\t}\n\t\tList<Part> keyParts = new ArrayList<>();\n\t\tList<Part> defaultParts = new ArrayList<>();\n\t\tfor (int i = 0; i < parts.size(); i++) {\n\t\t\tPart part = parts.get(i);\n\t\t\tif (!(part instanceof TextPart)) {\n\t\t\t\tkeyParts.add(part);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString candidate = part.text();\n\t\t\t\tParsedSection section = parseSection(candidate);\n\t\t\t\tkeyParts.add(new TextPart(section.key()));\n\t\t\t\tif (section.fallback() != null) {\n\t\t\t\t\tdefaultParts.add(new TextPart(section.fallback()));\n\t\t\t\t\tdefaultParts.addAll(parts.subList(i + 1, parts.size()));\n\t\t\t\t\treturn new NestedPlaceholderPart(text, keyParts, defaultParts);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new NestedPlaceholderPart(text, keyParts, null);\n\t}\n\n\t/**\n\t * Parse an input value that may contain a separator character and return a\n\t * {@link ParsedValue}. If a valid separator character has been identified, the\n\t * given {@code value} is split between a {@code key} and a {@code fallback}. If not,\n\t * only the {@code key} is set.\n\t * <p>\n\t * The returned key may be different from the original value as escaped\n\t * separators, if any, are resolved.\n\t * @param value the value to parse\n\t * @return the parsed section\n\t */\n\tprivate ParsedSection parseSection(String value) {\n\t\tif (this.separator == null || !value.contains(this.separator)) {\n\t\t\treturn new ParsedSection(value, null);\n\t\t}\n\t\tint position = 0;\n\t\tint index = value.indexOf(this.separator, position);\n\t\tStringBuilder buffer = new StringBuilder();\n\t\twhile (index != -1) {\n\t\t\tif (isEscaped(value, index)) {\n\t\t\t\t// Accumulate, without the escape character.\n\t\t\t\tbuffer.append(value, position, index - 1);\n\t\t\t\tbuffer.append(value, index, index + this.separator.length());\n\t\t\t\tposition = index + this.separator.length();\n\t\t\t\tindex = value.indexOf(this.separator, position);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuffer.append(value, position, index);\n\t\t\t\tString key = buffer.toString();\n\t\t\t\tString fallback = value.substring(index + this.separator.length());\n\t\t\t\treturn new ParsedSection(key, fallback);\n\t\t\t}\n\t\t}\n\t\tbuffer.append(value, position, value.length());\n\t\treturn new ParsedSection(buffer.toString(), null);\n\t}\n\n\tprivate static void addText(String value, int start, int end, LinkedList<Part> parts) {\n\t\tif (start > end) {\n\t\t\treturn;\n\t\t}\n\t\tString text = value.substring(start, end);\n\t\tif (!text.isEmpty()) {\n\t\t\tif (!parts.isEmpty()) {\n\t\t\t\tPart current = parts.removeLast();\n\t\t\t\tif (current instanceof TextPart textPart) {\n\t\t\t\t\tparts.add(new TextPart(textPart.text() + text));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tparts.add(current);\n\t\t\t\t\tparts.add(new TextPart(text));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparts.add(new TextPart(text));\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate int nextStartPrefix(String value, int index) {\n\t\treturn value.indexOf(this.prefix, index);\n\t}\n\n\tprivate int nextValidEndPrefix(String value, int startIndex) {\n\t\tint index = startIndex + this.prefix.length();\n\t\tint withinNestedPlaceholder = 0;\n\t\twhile (index < value.length()) {\n\t\t\tif (StringUtils.substringMatch(value, index, this.suffix)) {\n\t\t\t\tif (withinNestedPlaceholder > 0) {\n\t\t\t\t\twithinNestedPlaceholder--;\n\t\t\t\t\tindex = index + this.suffix.length();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (StringUtils.substringMatch(value, index, this.simplePrefix)) {\n\t\t\t\twithinNestedPlaceholder++;\n\t\t\t\tindex = index + this.simplePrefix.length();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate boolean isEscaped(String value, int index) {\n\t\treturn (this.escape != null && index > 0 && value.charAt(index - 1) == this.escape);\n\t}\n\n\trecord ParsedSection(String key, @Nullable String fallback) {\n\n\t}\n\n\n\t/**\n\t * Provide the necessary context to handle and resolve underlying placeholders.\n\t */\n\tstatic class PartResolutionContext implements PlaceholderResolver {\n\n\t\tprivate final String prefix;\n\n\t\tprivate final String suffix;\n\n\t\tprivate final boolean ignoreUnresolvablePlaceholders;\n\n\t\tprivate final Function<String, List<Part>> parser;\n\n\t\tprivate final PlaceholderResolver resolver;\n\n\t\tprivate @Nullable Set<String> visitedPlaceholders;\n\n\n\t\tPartResolutionContext(PlaceholderResolver resolver, String prefix, String suffix,\n\t\t\t\tboolean ignoreUnresolvablePlaceholders, Function<String, List<Part>> parser) {\n\t\t\tthis.prefix = prefix;\n\t\t\tthis.suffix = suffix;\n\t\t\tthis.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;\n\t\t\tthis.parser = parser;\n\t\t\tthis.resolver = resolver;\n\t\t}\n\n\t\t@Override\n\t\tpublic @Nullable String resolvePlaceholder(String placeholderName) {\n\t\t\tString value = this.resolver.resolvePlaceholder(placeholderName);\n\t\t\tif (value != null && logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Resolved placeholder '\" + placeholderName + \"'\");\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tpublic String handleUnresolvablePlaceholder(String key, String text) {\n\t\t\tif (this.ignoreUnresolvablePlaceholders) {\n\t\t\t\treturn toPlaceholderText(key);\n\t\t\t}\n\t\t\tString originalValue = (!key.equals(text) ? toPlaceholderText(text) : null);\n\t\t\tthrow new PlaceholderResolutionException(\n\t\t\t\t\t\"Could not resolve placeholder '%s'\".formatted(key), key, originalValue);\n\t\t}\n\n\t\tprivate String toPlaceholderText(String text) {\n\t\t\treturn this.prefix + text + this.suffix;\n\t\t}\n\n\t\tpublic List<Part> parse(String text) {\n\t\t\treturn this.parser.apply(text);\n\t\t}\n\n\t\tpublic void flagPlaceholderAsVisited(String placeholder) {\n\t\t\tif (this.visitedPlaceholders == null) {\n\t\t\t\tthis.visitedPlaceholders = new HashSet<>(4);\n\t\t\t}\n\t\t\tif (!this.visitedPlaceholders.add(placeholder)) {\n\t\t\t\tthrow new PlaceholderResolutionException(\n\t\t\t\t\t\t\"Circular placeholder reference '%s'\".formatted(placeholder), placeholder, null);\n\t\t\t}\n\t\t}\n\n\t\tpublic void removePlaceholder(String placeholder) {\n\t\t\tAssert.state(this.visitedPlaceholders != null, \"Visited placeholders must not be null\");\n\t\t\tthis.visitedPlaceholders.remove(placeholder);\n\t\t}\n\n\t}\n\n\n\t/**\n\t * A part is a section of a String containing placeholders to replace.\n\t */\n\tinterface Part {\n\n\t\t/**\n\t\t * Resolve this part using the specified {@link PartResolutionContext}.\n\t\t * @param resolutionContext the context to use\n\t\t * @return the resolved part\n\t\t */\n\t\tString resolve(PartResolutionContext resolutionContext);\n\n\t\t/**\n\t\t * Provide a textual representation of this part.\n\t\t * @return the raw text that this part defines\n\t\t */\n\t\tString text();\n\n\t\t/**\n\t\t * Return a String that appends the resolution of the specified parts.\n\t\t * @param parts the parts to resolve\n\t\t * @param resolutionContext the context to use for the resolution\n\t\t * @return a concatenation of the supplied parts with placeholders replaced inline\n\t\t */\n\t\tstatic String resolveAll(Iterable<Part> parts, PartResolutionContext resolutionContext) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (Part part : parts) {\n\t\t\t\tsb.append(part.resolve(resolutionContext));\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n\n\n\t/**\n\t * A representation of the parsing of an input string.\n\t * @param text the raw input string\n\t * @param parts the parts that appear in the string, in order\n\t */\n\trecord ParsedValue(String text, List<Part> parts) {\n\n\t\tpublic String resolve(PartResolutionContext resolutionContext) {\n\t\t\ttry {\n\t\t\t\treturn Part.resolveAll(this.parts, resolutionContext);\n\t\t\t}\n\t\t\tcatch (PlaceholderResolutionException ex) {\n\t\t\t\tthrow ex.withValue(this.text);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * A base {@link Part} implementation.\n\t */\n\tabstract static class AbstractPart implements Part {\n\n\t\tprivate final String text;\n\n\t\tprotected AbstractPart(String text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\t@Override\n\t\tpublic String text() {\n\t\t\treturn this.text;\n\t\t}\n\n\t\t/**\n\t\t * Resolve the placeholder with the given {@code key}. If the result of such\n\t\t * resolution return other placeholders, those are resolved as well until the\n\t\t * resolution no longer contains any placeholders.\n\t\t * @param resolutionContext the resolution context to use\n\t\t * @param key the initial placeholder\n\t\t * @return the full resolution of the given {@code key} or {@code null} if\n\t\t * the placeholder has no value to begin with\n\t\t */\n\t\tprotected @Nullable String resolveRecursively(PartResolutionContext resolutionContext, String key) {\n\t\t\tString resolvedValue = resolutionContext.resolvePlaceholder(key);\n\t\t\tif (resolvedValue != null) {\n\t\t\t\tresolutionContext.flagPlaceholderAsVisited(key);\n\t\t\t\t// Let's check if we need to recursively resolve that value\n\t\t\t\tList<Part> nestedParts = resolutionContext.parse(resolvedValue);\n\t\t\t\tString value = toText(nestedParts);\n\t\t\t\tif (!isTextOnly(nestedParts)) {\n\t\t\t\t\tvalue = new ParsedValue(resolvedValue, nestedParts).resolve(resolutionContext);\n\t\t\t\t}\n\t\t\t\tresolutionContext.removePlaceholder(key);\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t// Not found\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate boolean isTextOnly(List<Part> parts) {\n\t\t\treturn parts.stream().allMatch(TextPart.class::isInstance);\n\t\t}\n\n\t\tprivate String toText(List<Part> parts) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tparts.forEach(part -> sb.append(part.text()));\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n\n\n\t/**\n\t * A {@link Part} implementation that does not contain a valid placeholder.\n\t */\n\tstatic class TextPart extends AbstractPart {\n\n\t\t/**\n\t\t * Create a new instance.\n\t\t * @param text the raw (and resolved) text\n\t\t */\n\t\tpublic TextPart(String text) {\n\t\t\tsuper(text);\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolve(PartResolutionContext resolutionContext) {\n\t\t\treturn text();\n\t\t}\n\t}\n\n\n\t/**\n\t * A {@link Part} implementation that represents a single placeholder with\n\t * a hard-coded fallback.\n\t */\n\tstatic class SimplePlaceholderPart extends AbstractPart {\n\n\t\tprivate final String key;\n\n\t\tprivate final @Nullable String fallback;\n\n\t\t/**\n\t\t * Create a new instance.\n\t\t * @param text the raw text\n\t\t * @param key the key of the placeholder\n\t\t * @param fallback the fallback to use, if any\n\t\t */\n\t\tpublic SimplePlaceholderPart(String text,String key, @Nullable String fallback) {\n\t\t\tsuper(text);\n\t\t\tthis.key = key;\n\t\t\tthis.fallback = fallback;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolve(PartResolutionContext resolutionContext) {\n\t\t\tString value = resolveRecursively(resolutionContext);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\telse if (this.fallback != null) {\n\t\t\t\treturn this.fallback;\n\t\t\t}\n\t\t\treturn resolutionContext.handleUnresolvablePlaceholder(this.key, text());\n\t\t}\n\n\t\t@Nullable\n\t\tprivate String resolveRecursively(PartResolutionContext resolutionContext) {\n\t\t\tif (!this.text().equals(this.key)) {\n\t\t\t\tString value = resolveRecursively(resolutionContext, this.text());\n\t\t\t\tif (value != null) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resolveRecursively(resolutionContext, this.key);\n\t\t}\n\t}\n\n\n\t/**\n\t * A {@link Part} implementation that represents a single placeholder\n\t * containing nested placeholders.\n\t */\n\tstatic class NestedPlaceholderPart extends AbstractPart {\n\n\t\tprivate final List<Part> keyParts;\n\n\t\tprivate final @Nullable List<Part> defaultParts;\n\n\t\t/**\n\t\t * Create a new instance.\n\t\t * @param text the raw text of the root placeholder\n\t\t * @param keyParts the parts of the key\n\t\t * @param defaultParts the parts of the fallback, if any\n\t\t */\n\t\tNestedPlaceholderPart(String text, List<Part> keyParts, @Nullable List<Part> defaultParts) {\n\t\t\tsuper(text);\n\t\t\tthis.keyParts = keyParts;\n\t\t\tthis.defaultParts = defaultParts;\n\t\t}\n\n\t\t@Override\n\t\tpublic String resolve(PartResolutionContext resolutionContext) {\n\t\t\tString resolvedKey = Part.resolveAll(this.keyParts, resolutionContext);\n\t\t\tString value = resolveRecursively(resolutionContext, resolvedKey);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\telse if (this.defaultParts != null) {\n\t\t\t\treturn Part.resolveAll(this.defaultParts, resolutionContext);\n\t\t\t}\n\t\t\treturn resolutionContext.handleUnresolvablePlaceholder(resolvedKey, text());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.Part#resolve(PartResolutionContext)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve this part using the specified {@link PartResolutionContext}.\r\n * @param resolutionContext the context to use\r\n * @return the resolved part\r\n */\r\nString resolve(PartResolutionContext resolutionContext);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Part",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Part#resolve(PartResolutionContext)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Part#text()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Provide a textual representation of this part.\r\n * @return the raw text that this part defines\r\n */\r\nString text();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.Part",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.Part#text()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.Part#resolveAll(Iterable<Part>,PartResolutionContext)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String that appends the resolution of the specified parts.\r\n * @param parts the parts to resolve\r\n * @param resolutionContext the context to use for the resolution\r\n * @return a concatenation of the supplied parts with placeholders replaced inline\r\n */\r\nstatic String resolveAll(Iterable<Part> parts, PartResolutionContext resolutionContext) {\r\n    StringBuilder sb = new StringBuilder();\r\n    for (Part part : parts) {\r\n        sb.append(part.resolve(resolutionContext));\r\n    }\r\n    return sb.toString();\r\n}",
    "tailType": "method_code"
  }
]