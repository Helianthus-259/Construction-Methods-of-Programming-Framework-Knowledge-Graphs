[
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.BridgeMethodResolver#cache",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#cache",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<Object, Method>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find the local original method for the supplied {@link Method bridge Method}.\r\n * <p>It is safe to call this method passing in a non-bridge {@link Method} instance.\r\n * In such a case, the supplied {@link Method} instance is returned directly to the caller.\r\n * Callers are <strong>not</strong> required to check for bridging before calling this method.\r\n * @param bridgeMethod the method to introspect against its declaring class\r\n * @return the original method (either the bridged method or the passed-in method\r\n * if no more specific one could be found)\r\n * @see #getMostSpecificMethod(Method, Class)\r\n */\r\npublic static Method findBridgedMethod(Method bridgeMethod) {\r\n    return resolveBridgeMethod(bridgeMethod, bridgeMethod.getDeclaringClass());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#getMostSpecificMethod(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the most specific method for the supplied {@link Method bridge Method}\r\n * in the given class hierarchy, even if not available on the local declaring class.\r\n * <p>This is effectively a combination of {@link ClassUtils#getMostSpecificMethod}\r\n * and {@link #findBridgedMethod}, resolving the original method even if no bridge\r\n * method has been generated at the same class hierarchy level (a known difference\r\n * between the Eclipse compiler and regular javac).\r\n * @param bridgeMethod the method to introspect against the given target class\r\n * @param targetClass the target class to find the most specific method on\r\n * @return the most specific method corresponding to the given bridge method\r\n * (can be the original method if no more specific one could be found)\r\n * @since 6.1.3\r\n * @see #findBridgedMethod\r\n * @see org.springframework.util.ClassUtils#getMostSpecificMethod\r\n */\r\npublic static Method getMostSpecificMethod(Method bridgeMethod, @Nullable Class<?> targetClass) {\r\n    if (targetClass != null && !ClassUtils.getUserClass(bridgeMethod.getDeclaringClass()).isAssignableFrom(targetClass) && !Proxy.isProxyClass(bridgeMethod.getDeclaringClass())) {\r\n        // From a different class hierarchy, and not a JDK or CGLIB proxy either -> return as-is.\r\n        return bridgeMethod;\r\n    }\r\n    Method specificMethod = ClassUtils.getMostSpecificMethod(bridgeMethod, targetClass);\r\n    return resolveBridgeMethod(specificMethod, (targetClass != null ? targetClass : specificMethod.getDeclaringClass()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#getMostSpecificMethod(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#resolveBridgeMethod(Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Method resolveBridgeMethod(Method bridgeMethod, Class<?> targetClass) {\r\n    boolean localBridge = (targetClass == bridgeMethod.getDeclaringClass());\r\n    Class<?> userClass = targetClass;\r\n    if (!bridgeMethod.isBridge() && localBridge) {\r\n        userClass = ClassUtils.getUserClass(targetClass);\r\n        if (userClass == targetClass) {\r\n            return bridgeMethod;\r\n        }\r\n    }\r\n    Object cacheKey = (localBridge ? bridgeMethod : new MethodClassKey(bridgeMethod, targetClass));\r\n    Method bridgedMethod = cache.get(cacheKey);\r\n    if (bridgedMethod == null) {\r\n        // Gather all methods with matching name and parameter size.\r\n        List<Method> candidateMethods = new ArrayList<>();\r\n        MethodFilter filter = (candidateMethod -> isBridgedCandidateFor(candidateMethod, bridgeMethod));\r\n        ReflectionUtils.doWithMethods(userClass, candidateMethods::add, filter);\r\n        if (!candidateMethods.isEmpty()) {\r\n            bridgedMethod = (candidateMethods.size() == 1 ? candidateMethods.get(0) : searchCandidates(candidateMethods, bridgeMethod));\r\n        }\r\n        if (bridgedMethod == null) {\r\n            // A bridge method was passed in but we couldn't find the bridged method.\r\n            // Let's proceed with the passed-in method and hope for the best...\r\n            bridgedMethod = bridgeMethod;\r\n        }\r\n        cache.put(cacheKey, bridgedMethod);\r\n    }\r\n    return bridgedMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#resolveBridgeMethod(Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#isBridgedCandidateFor(Method,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@code true} if the supplied '{@code candidateMethod}' can be\r\n * considered a valid candidate for the {@link Method} that is {@link Method#isBridge() bridged}\r\n * by the supplied {@link Method bridge Method}. This method performs inexpensive\r\n * checks and can be used to quickly filter for a set of possible matches.\r\n */\r\nprivate static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {\r\n    return (!candidateMethod.isBridge() && candidateMethod.getName().equals(bridgeMethod.getName()) && candidateMethod.getParameterCount() == bridgeMethod.getParameterCount());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#isBridgedCandidateFor(Method,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#searchCandidates(List<Method>,Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Searches for the bridged method in the given candidates.\r\n * @param candidateMethods the List of candidate Methods\r\n * @param bridgeMethod the bridge method\r\n * @return the bridged method, or {@code null} if none found\r\n */\r\n@Nullable\r\nprivate static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {\r\n    if (candidateMethods.isEmpty()) {\r\n        return null;\r\n    }\r\n    Method previousMethod = null;\r\n    boolean sameSig = true;\r\n    for (Method candidateMethod : candidateMethods) {\r\n        if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {\r\n            return candidateMethod;\r\n        } else if (previousMethod != null) {\r\n            sameSig = sameSig && Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());\r\n        }\r\n        previousMethod = candidateMethod;\r\n    }\r\n    return (sameSig ? candidateMethods.get(0) : null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#searchCandidates(List<Method>,Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#searchCandidates(List<Method>,Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#isBridgeMethodFor(Method,Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determines whether the bridge {@link Method} is the bridge for the\r\n * supplied candidate {@link Method}.\r\n */\r\nstatic boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {\r\n    if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {\r\n        return true;\r\n    }\r\n    Method method = findGenericDeclaration(bridgeMethod);\r\n    return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#isBridgeMethodFor(Method,Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#isResolvedTypeMatch(Method,Method,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Returns {@code true} if the {@link Type} signature of both the supplied\r\n * {@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}\r\n * are equal after resolving all types against the declaringType, otherwise\r\n * returns {@code false}.\r\n */\r\nprivate static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {\r\n    Type[] genericParameters = genericMethod.getGenericParameterTypes();\r\n    if (genericParameters.length != candidateMethod.getParameterCount()) {\r\n        return false;\r\n    }\r\n    Class<?>[] candidateParameters = candidateMethod.getParameterTypes();\r\n    for (int i = 0; i < candidateParameters.length; i++) {\r\n        ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass);\r\n        Class<?> candidateParameter = candidateParameters[i];\r\n        if (candidateParameter.isArray()) {\r\n            // An array type: compare the component type.\r\n            if (!candidateParameter.componentType().equals(genericParameter.getComponentType().toClass())) {\r\n                return false;\r\n            }\r\n        }\r\n        // A non-array type: compare the type itself.\r\n        if (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#isResolvedTypeMatch(Method,Method,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#findGenericDeclaration(Method)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Searches for the generic {@link Method} declaration whose erased signature\r\n * matches that of the supplied bridge method.\r\n * @throws IllegalStateException if the generic declaration cannot be found\r\n */\r\n@Nullable\r\nprivate static Method findGenericDeclaration(Method bridgeMethod) {\r\n    if (!bridgeMethod.isBridge()) {\r\n        return bridgeMethod;\r\n    }\r\n    // Search parent types for method that has same signature as bridge.\r\n    Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();\r\n    while (superclass != null && Object.class != superclass) {\r\n        Method method = searchForMatch(superclass, bridgeMethod);\r\n        if (method != null && !method.isBridge()) {\r\n            return method;\r\n        }\r\n        superclass = superclass.getSuperclass();\r\n    }\r\n    Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());\r\n    return searchInterfaces(interfaces, bridgeMethod);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.BridgeMethodResolver#findGenericDeclaration(Method)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.BridgeMethodResolver#findGenericDeclaration(Method)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]