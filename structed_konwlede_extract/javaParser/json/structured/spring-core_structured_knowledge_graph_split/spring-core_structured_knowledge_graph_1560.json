[
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConcreteClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyWithInterface() {\r\n    this.proxyHints.registerJdkProxy(Function.class);\r\n    assertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyWithTypeReferences() {\r\n    this.proxyHints.registerJdkProxy(TypeReference.of(Function.class), TypeReference.of(\"com.example.Advised\"));\r\n    assertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class.getName(), \"com.example.Advised\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithTypeReferences()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyWithConsumer() {\r\n    this.proxyHints.registerJdkProxy(springProxy(\"com.example.Test\"));\r\n    assertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(\"com.example.Test\", \"org.springframework.aop.SpringProxy\", \"org.springframework.aop.framework.Advised\", \"org.springframework.core.DecoratingProxy\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyWithConsumer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerJdkProxyTwiceExposesOneHint() {\r\n    this.proxyHints.registerJdkProxy(Function.class);\r\n    this.proxyHints.registerJdkProxy(TypeReference.of(Function.class.getName()));\r\n    assertThat(this.proxyHints.jdkProxyHints()).singleElement().satisfies(proxiedInterfaces(Function.class));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#registerJdkProxyTwiceExposesOneHint()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#springProxy(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Consumer<JdkProxyHint.Builder> springProxy(String proxiedInterface) {\r\n    return builder -> builder.proxiedInterfaces(toTypeReferences(proxiedInterface, \"org.springframework.aop.SpringProxy\", \"org.springframework.aop.framework.Advised\", \"org.springframework.core.DecoratingProxy\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#springProxy(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Consumer<JdkProxyHint> proxiedInterfaces(String... proxiedInterfaces) {\r\n    return jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces()).containsExactly(toTypeReferences(proxiedInterfaces));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Consumer<JdkProxyHint> proxiedInterfaces(Class<?>... proxiedInterfaces) {\r\n    return jdkProxyHint -> assertThat(jdkProxyHint.getProxiedInterfaces()).containsExactlyElementsOf(TypeReference.listOf(proxiedInterfaces));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ProxyHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ProxyHintsTests#proxiedInterfaces(Class<?>)",
    "tailType": "method"
  }
]