[
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findMethodAnnotationWithMetaAnnotationOnLeaf() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"metaAnnotatedOnLeaf\");\r\n    assertThat(m.getAnnotation(Order.class)).isNull();\r\n    assertThat(getAnnotation(m, Order.class)).isNotNull();\r\n    assertThat(findAnnotation(m, Order.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findMethodAnnotationWithMetaMetaAnnotationOnLeaf() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"metaMetaAnnotatedOnLeaf\");\r\n    assertThat(m.getAnnotation(Component.class)).isNull();\r\n    assertThat(getAnnotation(m, Component.class)).isNull();\r\n    assertThat(findAnnotation(m, Component.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaMetaAnnotationOnLeaf()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethodAnnotationOnRoot() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"annotatedOnRoot\");\r\n    assertThat(m.getAnnotation(Order.class)).isNotNull();\r\n    assertThat(getAnnotation(m, Order.class)).isNotNull();\r\n    assertThat(findAnnotation(m, Order.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRoot()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
    "headType": "method",
    "relation": "provide",
    "tail": "// @since 4.2\r\n@Test\r\nvoid findMethodAnnotationWithMetaAnnotationOnRoot() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"metaAnnotatedOnRoot\");\r\n    assertThat(m.getAnnotation(Order.class)).isNull();\r\n    assertThat(getAnnotation(m, Order.class)).isNotNull();\r\n    assertThat(findAnnotation(m, Order.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationWithMetaAnnotationOnRoot()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethodAnnotationOnRootButOverridden() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"overrideWithoutNewAnnotation\");\r\n    assertThat(m.getAnnotation(Order.class)).isNull();\r\n    assertThat(getAnnotation(m, Order.class)).isNull();\r\n    assertThat(findAnnotation(m, Order.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnRootButOverridden()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethodAnnotationNotAnnotated() throws Exception {\r\n    Method m = Leaf.class.getMethod(\"notAnnotated\");\r\n    assertThat(findAnnotation(m, Order.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationNotAnnotated()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMethodAnnotationOnBridgeMethod() throws Exception {\r\n    Method bridgeMethod = SimpleFoo.class.getMethod(\"something\", Object.class);\r\n    assertThat(bridgeMethod.isBridge()).isTrue();\r\n    assertThat(bridgeMethod.getAnnotation(Order.class)).isNull();\r\n    assertThat(getAnnotation(bridgeMethod, Order.class)).isNull();\r\n    assertThat(findAnnotation(bridgeMethod, Order.class)).isNotNull();\r\n    // As of JDK 8, invoking getAnnotation() on a bridge method actually finds an\r\n    // annotation on its 'bridged' method [1]; however, the Eclipse compiler does\r\n    // not support this [2]. Thus, we effectively ignore the following\r\n    // assertion if the test is currently executing within the Eclipse IDE.\r\n    //\r\n    // [1] https://bugs.openjdk.java.net/browse/JDK-6695379\r\n    // [2] https://bugs.eclipse.org/bugs/show_bug.cgi?id=495396\r\n    //\r\n    if (!IdeUtils.runningInEclipse()) {\r\n        assertThat(bridgeMethod.getAnnotation(Transactional.class)).isNotNull();\r\n    }\r\n    assertThat(getAnnotation(bridgeMethod, Transactional.class)).isNotNull();\r\n    assertThat(findAnnotation(bridgeMethod, Transactional.class)).isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtilsTests#findMethodAnnotationOnBridgeMethod()",
    "tailType": "method"
  }
]