[
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#info(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#info(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with info log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void info(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isInfoEnabled()) {\r\n        this.log.info(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#info(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#debug(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with debug log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void debug(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isDebugEnabled()) {\r\n        this.log.debug(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#debug(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#debug(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with debug log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void debug(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isDebugEnabled()) {\r\n        this.log.debug(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#debug(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#trace(Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log a message with trace log level.\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void trace(Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isTraceEnabled()) {\r\n        this.log.trace(LogMessage.of(messageSupplier));\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#trace(Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogAccessor#trace(Throwable,Supplier<? extends CharSequence>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Log an error with trace log level.\r\n * @param cause the exception to log\r\n * @param messageSupplier a lazy supplier for the message to log\r\n */\r\npublic void trace(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {\r\n    if (this.log.isTraceEnabled()) {\r\n        this.log.trace(LogMessage.of(messageSupplier), cause);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogAccessor#trace(Throwable,Supplier<? extends CharSequence>)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.log",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.log",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.log.LogDelegateFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.log;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\n/**\n * Factory for common {@link Log} delegates with Spring's logging conventions.\n *\n * <p>Mainly for internal use within the framework with Apache Commons Logging.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 5.1\n * @see org.apache.commons.logging.LogFactory\n */\npublic final class LogDelegateFactory {\n\n\tprivate LogDelegateFactory() {\n\t}\n\n\n\t/**\n\t * Create a composite logger that delegates to a primary or falls back on a\n\t * secondary logger if logging for the primary logger is not enabled.\n\t * <p>This may be used for fallback logging from lower-level packages that\n\t * logically should log together with some higher-level package but the two\n\t * don't happen to share a suitable parent package (for example, logging for the web\n\t * and lower-level http and codec packages). For such cases the primary\n\t * (class-based) logger can be wrapped with a shared fallback logger.\n\t * @param primaryLogger primary logger to try first\n\t * @param secondaryLogger secondary logger\n\t * @param tertiaryLoggers optional vararg of further fallback loggers\n\t * @return the resulting composite logger for the related categories\n\t */\n\tpublic static Log getCompositeLog(Log primaryLogger, Log secondaryLogger, Log... tertiaryLoggers) {\n\t\tList<Log> loggers = new ArrayList<>(2 + tertiaryLoggers.length);\n\t\tloggers.add(primaryLogger);\n\t\tloggers.add(secondaryLogger);\n\t\tCollections.addAll(loggers, tertiaryLoggers);\n\t\treturn new CompositeLog(loggers);\n\t}\n\n\t/**\n\t * Create a \"hidden\" logger with a category name prefixed with \"_\", thus\n\t * precluding it from being enabled together with other log categories from\n\t * the same package. This is useful for specialized output that is either\n\t * too verbose or otherwise optional or unnecessary to see all the time.\n\t * @param clazz the class for which to create a logger\n\t * @return a Log with the category {@code \"_\" + fully-qualified class name}\n\t */\n\tpublic static Log getHiddenLog(Class<?> clazz) {\n\t\treturn getHiddenLog(clazz.getName());\n\t}\n\n\t/**\n\t * Create a \"hidden\" logger with a category name prefixed with \"_\", thus\n\t * precluding it from being enabled together with other log categories from\n\t * the same package. This is useful for specialized output that is either\n\t * too verbose or otherwise optional or unnecessary to see all the time.\n\t * @param category the log category to use\n\t * @return a Log with the category {@code \"_\" + category}\n\t * @since 5.3.5\n\t */\n\tpublic static Log getHiddenLog(String category) {\n\t\treturn LogFactory.getLog(\"_\" + category);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory#getCompositeLog(Log,Log,Log)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a composite logger that delegates to a primary or falls back on a\r\n * secondary logger if logging for the primary logger is not enabled.\r\n * <p>This may be used for fallback logging from lower-level packages that\r\n * logically should log together with some higher-level package but the two\r\n * don't happen to share a suitable parent package (for example, logging for the web\r\n * and lower-level http and codec packages). For such cases the primary\r\n * (class-based) logger can be wrapped with a shared fallback logger.\r\n * @param primaryLogger primary logger to try first\r\n * @param secondaryLogger secondary logger\r\n * @param tertiaryLoggers optional vararg of further fallback loggers\r\n * @return the resulting composite logger for the related categories\r\n */\r\npublic static Log getCompositeLog(Log primaryLogger, Log secondaryLogger, Log... tertiaryLoggers) {\r\n    List<Log> loggers = new ArrayList<>(2 + tertiaryLoggers.length);\r\n    loggers.add(primaryLogger);\r\n    loggers.add(secondaryLogger);\r\n    Collections.addAll(loggers, tertiaryLoggers);\r\n    return new CompositeLog(loggers);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogDelegateFactory#getCompositeLog(Log,Log,Log)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory#getHiddenLog(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a \"hidden\" logger with a category name prefixed with \"_\", thus\r\n * precluding it from being enabled together with other log categories from\r\n * the same package. This is useful for specialized output that is either\r\n * too verbose or otherwise optional or unnecessary to see all the time.\r\n * @param clazz the class for which to create a logger\r\n * @return a Log with the category {@code \"_\" + fully-qualified class name}\r\n */\r\npublic static Log getHiddenLog(Class<?> clazz) {\r\n    return getHiddenLog(clazz.getName());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogDelegateFactory#getHiddenLog(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory#getHiddenLog(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a \"hidden\" logger with a category name prefixed with \"_\", thus\r\n * precluding it from being enabled together with other log categories from\r\n * the same package. This is useful for specialized output that is either\r\n * too verbose or otherwise optional or unnecessary to see all the time.\r\n * @param category the log category to use\r\n * @return a Log with the category {@code \"_\" + category}\r\n * @since 5.3.5\r\n */\r\npublic static Log getHiddenLog(String category) {\r\n    return LogFactory.getLog(\"_\" + category);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.log.LogDelegateFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.log.LogDelegateFactory#getHiddenLog(String)",
    "tailType": "method"
  }
]