[
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findComposedPlusLocalAnnotationsOnMethod() throws Exception {\r\n    AnnotatedElement element = getClass().getDeclaredMethod(\"composedPlusLocalCachesMethod\");\r\n    assertFindAllMergedAnnotationsBehavior(element);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findComposedPlusLocalAnnotationsOnMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMultipleComposedAnnotationsOnBridgeMethod() {\r\n    assertFindAllMergedAnnotationsBehavior(getBridgeMethod());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnBridgeMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#findMultipleComposedAnnotationsOnBridgeMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getBridgeMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Bridge/bridged method setup code copied from\r\n * {@link org.springframework.core.BridgeMethodResolverTests#withGenericParameter()}.\r\n */\r\nMethod getBridgeMethod() {\r\n    Method[] methods = StringGenericParameter.class.getMethods();\r\n    Method bridgeMethod = null;\r\n    Method bridgedMethod = null;\r\n    for (Method method : methods) {\r\n        if (\"getFor\".equals(method.getName()) && !method.getParameterTypes()[0].equals(Integer.class)) {\r\n            if (method.getReturnType().equals(Object.class)) {\r\n                bridgeMethod = method;\r\n            } else {\r\n                bridgedMethod = method;\r\n            }\r\n        }\r\n    }\r\n    assertThat(bridgeMethod != null && bridgeMethod.isBridge()).isTrue();\r\n    boolean condition = bridgedMethod != null && !bridgedMethod.isBridge();\r\n    assertThat(condition).isTrue();\r\n    return bridgeMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#getBridgeMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#assertGetAllMergedAnnotationsBehavior(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertGetAllMergedAnnotationsBehavior(AnnotatedElement element) {\r\n    assertThat(element).isNotNull();\r\n    Set<Cacheable> cacheables = getAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).hasSize(2);\r\n    Iterator<Cacheable> iterator = cacheables.iterator();\r\n    Cacheable fooCacheable = iterator.next();\r\n    Cacheable barCacheable = iterator.next();\r\n    assertThat(fooCacheable.key()).isEqualTo(\"fooKey\");\r\n    assertThat(fooCacheable.value()).isEqualTo(\"fooCache\");\r\n    assertThat(barCacheable.key()).isEqualTo(\"barKey\");\r\n    assertThat(barCacheable.value()).isEqualTo(\"barCache\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#assertGetAllMergedAnnotationsBehavior(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#assertFindAllMergedAnnotationsBehavior(AnnotatedElement)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertFindAllMergedAnnotationsBehavior(AnnotatedElement element) {\r\n    assertThat(element).isNotNull();\r\n    Set<Cacheable> cacheables = findAllMergedAnnotations(element, Cacheable.class);\r\n    assertThat(cacheables).isNotNull();\r\n    assertThat(cacheables).hasSize(2);\r\n    Iterator<Cacheable> iterator = cacheables.iterator();\r\n    Cacheable fooCacheable = iterator.next();\r\n    Cacheable barCacheable = iterator.next();\r\n    assertThat(fooCacheable.key()).isEqualTo(\"fooKey\");\r\n    assertThat(fooCacheable.value()).isEqualTo(\"fooCache\");\r\n    assertThat(barCacheable.key()).isEqualTo(\"barKey\");\r\n    assertThat(barCacheable.value()).isEqualTo(\"barCache\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#assertFindAllMergedAnnotationsBehavior(AnnotatedElement)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#multipleComposedCachesMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@FooCache(key = \"fooKey\")\r\n@BarCache(key = \"barKey\")\r\nprivate void multipleComposedCachesMethod() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#multipleComposedCachesMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#multipleComposedCachesMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@FooCache",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#multipleComposedCachesMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@BarCache",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#composedPlusLocalCachesMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Cacheable(cacheName = \"fooCache\", key = \"fooKey\")\r\n@BarCache(key = \"barKey\")\r\nprivate void composedPlusLocalCachesMethod() ;",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#composedPlusLocalCachesMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#composedPlusLocalCachesMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Cacheable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MultipleComposedAnnotationsOnSingleAnnotatedElementTests#composedPlusLocalCachesMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@BarCache",
    "tailType": "annotation"
  }
]