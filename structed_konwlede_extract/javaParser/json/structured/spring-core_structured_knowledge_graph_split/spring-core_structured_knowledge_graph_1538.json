[
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForJacksonCustomStrategy()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeForAnnotationOnMethodAndField() {\r\n    bindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);\r\n    assertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer2.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)).accepts(this.hints);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.BindingReflectionHintsRegistrarTests#registerTypeForAnnotationOnMethodAndField()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SampleEmptyClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SampleEmptyClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Type;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.ResolvableType;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BindingReflectionHintsRegistrar}.\n *\n * @author Sebastien Deleuze\n */\nclass BindingReflectionHintsRegistrarTests {\n\n\tprivate final BindingReflectionHintsRegistrar bindingRegistrar = new BindingReflectionHintsRegistrar();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerTypeForSerializationWithEmptyClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEmptyClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithExtendingClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleExtendingClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleExtendingClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithNoProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithNoProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithNoProperty.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithGetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithGetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithGetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithSetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithSetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithSetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithListProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithListProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithListProperty.class));\n\t\t\t\t\tassertThat(typeHint.methods()).satisfiesExactlyInAnyOrder(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithCycles() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithCycles.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithCycles.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithResolvableType() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithResolvableType.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType[].class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Type.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Class.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).hasSizeGreaterThan(1);\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getResolvableType\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithMultipleLevelsAndCollection() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassA.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassA.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassB.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassC.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Set.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithEnum() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEnum.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleEnum.class).withMemberCategories(\n\t\t\t\tMemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS)).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecord() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecord.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleRecord.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"name\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecordWithProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleRecordWithProperty.class, \"getNameProperty\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithAnonymousClass() {\n\t\tRunnable anonymousRunnable = () -> { };\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), anonymousRunnable.getClass());\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForInheritedJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithInheritedJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonCustomStrategy() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithJacksonCustomStrategy.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(PropertyNamingStrategies.UpperSnakeCaseStrategy.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleRecordWithJacksonCustomStrategy.Builder.class)\n\t\t\t\t.withMemberCategories(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForAnnotationOnMethodAndField() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer2.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\n\tstatic class SampleEmptyClass {\n\t}\n\n\tstatic class SampleExtendingClass extends SampleEmptyClass {\n\t}\n\n\tstatic class SampleClassWithNoProperty {\n\n\t\tString name() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithSetter {\n\n\t\tpublic void setName(String name) {\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithListProperty {\n\n\t\tpublic List<String> getNames() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic void setNames(List<String> names) {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithCycles {\n\n\t\tpublic SampleClassWithCycles getSampleClassWithCycles() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic List<SampleClassWithCycles> getSampleClassWithCyclesList() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithResolvableType {\n\n\t\tpublic ResolvableType getResolvableType() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassA {\n\t\tpublic Set<SampleClassB> getB() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassB {\n\t\tpublic SampleClassC getC() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassC {\n\t\tpublic String getString() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tenum SampleEnum {\n\t\tvalue1, value2\n\t}\n\n\trecord SampleRecord(String name) {}\n\n\trecord SampleRecordWithProperty(String name) {\n\n\t\tpublic String getNameProperty() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithJsonProperty {\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer1.class)\n\t\tprivate String privateField = \"\";\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer2.class)\n\t\tString packagePrivateMethod() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithInheritedJsonProperty extends SampleClassWithJsonProperty {}\n\n\t@JsonNaming(PropertyNamingStrategies.UpperSnakeCaseStrategy.class)\n\t@JsonDeserialize(builder = SampleRecordWithJacksonCustomStrategy.Builder.class)\n\trecord SampleRecordWithJacksonCustomStrategy(String name) {\n\n\t\t@JsonPOJOBuilder(withPrefix = \"\")\n\t\tpublic static class Builder {\n\t\t\tprivate String name;\n\n\t\t\tpublic static Builder newInstance() {\n\t\t\t\treturn new Builder();\n\t\t\t}\n\n\t\t\tpublic Builder name(String name) {\n\t\t\t\tthis.name = name;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tpublic SampleRecordWithJacksonCustomStrategy build() {\n\t\t\t\treturn new SampleRecordWithJacksonCustomStrategy(name);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer1 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer1() {\n\t\t\tsuper(CustomDeserializer1.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer2 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer2() {\n\t\t\tsuper(CustomDeserializer2.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SampleExtendingClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SampleExtendingClass",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Type;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.ResolvableType;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BindingReflectionHintsRegistrar}.\n *\n * @author Sebastien Deleuze\n */\nclass BindingReflectionHintsRegistrarTests {\n\n\tprivate final BindingReflectionHintsRegistrar bindingRegistrar = new BindingReflectionHintsRegistrar();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerTypeForSerializationWithEmptyClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEmptyClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithExtendingClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleExtendingClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleExtendingClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithNoProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithNoProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithNoProperty.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithGetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithGetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithGetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithSetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithSetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithSetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithListProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithListProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithListProperty.class));\n\t\t\t\t\tassertThat(typeHint.methods()).satisfiesExactlyInAnyOrder(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithCycles() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithCycles.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithCycles.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithResolvableType() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithResolvableType.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType[].class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Type.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Class.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).hasSizeGreaterThan(1);\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getResolvableType\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithMultipleLevelsAndCollection() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassA.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassA.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassB.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassC.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Set.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithEnum() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEnum.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleEnum.class).withMemberCategories(\n\t\t\t\tMemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS)).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecord() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecord.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleRecord.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"name\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecordWithProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleRecordWithProperty.class, \"getNameProperty\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithAnonymousClass() {\n\t\tRunnable anonymousRunnable = () -> { };\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), anonymousRunnable.getClass());\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForInheritedJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithInheritedJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonCustomStrategy() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithJacksonCustomStrategy.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(PropertyNamingStrategies.UpperSnakeCaseStrategy.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleRecordWithJacksonCustomStrategy.Builder.class)\n\t\t\t\t.withMemberCategories(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForAnnotationOnMethodAndField() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer2.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\n\tstatic class SampleEmptyClass {\n\t}\n\n\tstatic class SampleExtendingClass extends SampleEmptyClass {\n\t}\n\n\tstatic class SampleClassWithNoProperty {\n\n\t\tString name() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithSetter {\n\n\t\tpublic void setName(String name) {\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithListProperty {\n\n\t\tpublic List<String> getNames() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic void setNames(List<String> names) {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithCycles {\n\n\t\tpublic SampleClassWithCycles getSampleClassWithCycles() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic List<SampleClassWithCycles> getSampleClassWithCyclesList() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithResolvableType {\n\n\t\tpublic ResolvableType getResolvableType() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassA {\n\t\tpublic Set<SampleClassB> getB() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassB {\n\t\tpublic SampleClassC getC() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassC {\n\t\tpublic String getString() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tenum SampleEnum {\n\t\tvalue1, value2\n\t}\n\n\trecord SampleRecord(String name) {}\n\n\trecord SampleRecordWithProperty(String name) {\n\n\t\tpublic String getNameProperty() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithJsonProperty {\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer1.class)\n\t\tprivate String privateField = \"\";\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer2.class)\n\t\tString packagePrivateMethod() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithInheritedJsonProperty extends SampleClassWithJsonProperty {}\n\n\t@JsonNaming(PropertyNamingStrategies.UpperSnakeCaseStrategy.class)\n\t@JsonDeserialize(builder = SampleRecordWithJacksonCustomStrategy.Builder.class)\n\trecord SampleRecordWithJacksonCustomStrategy(String name) {\n\n\t\t@JsonPOJOBuilder(withPrefix = \"\")\n\t\tpublic static class Builder {\n\t\t\tprivate String name;\n\n\t\t\tpublic static Builder newInstance() {\n\t\t\t\treturn new Builder();\n\t\t\t}\n\n\t\t\tpublic Builder name(String name) {\n\t\t\t\tthis.name = name;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tpublic SampleRecordWithJacksonCustomStrategy build() {\n\t\t\t\treturn new SampleRecordWithJacksonCustomStrategy(name);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer1 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer1() {\n\t\t\tsuper(CustomDeserializer1.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer2 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer2() {\n\t\t\tsuper(CustomDeserializer2.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleExtendingClass",
    "headType": "class",
    "relation": "extend",
    "tail": "SampleEmptyClass",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SampleClassWithNoProperty",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithNoProperty",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Type;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.ResolvableType;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BindingReflectionHintsRegistrar}.\n *\n * @author Sebastien Deleuze\n */\nclass BindingReflectionHintsRegistrarTests {\n\n\tprivate final BindingReflectionHintsRegistrar bindingRegistrar = new BindingReflectionHintsRegistrar();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerTypeForSerializationWithEmptyClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEmptyClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithExtendingClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleExtendingClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleExtendingClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithNoProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithNoProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithNoProperty.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithGetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithGetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithGetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithSetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithSetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithSetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithListProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithListProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithListProperty.class));\n\t\t\t\t\tassertThat(typeHint.methods()).satisfiesExactlyInAnyOrder(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithCycles() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithCycles.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithCycles.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithResolvableType() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithResolvableType.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType[].class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Type.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Class.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).hasSizeGreaterThan(1);\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getResolvableType\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithMultipleLevelsAndCollection() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassA.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassA.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassB.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassC.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Set.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithEnum() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEnum.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleEnum.class).withMemberCategories(\n\t\t\t\tMemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS)).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecord() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecord.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleRecord.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"name\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecordWithProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleRecordWithProperty.class, \"getNameProperty\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithAnonymousClass() {\n\t\tRunnable anonymousRunnable = () -> { };\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), anonymousRunnable.getClass());\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForInheritedJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithInheritedJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonCustomStrategy() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithJacksonCustomStrategy.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(PropertyNamingStrategies.UpperSnakeCaseStrategy.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleRecordWithJacksonCustomStrategy.Builder.class)\n\t\t\t\t.withMemberCategories(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForAnnotationOnMethodAndField() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer2.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\n\tstatic class SampleEmptyClass {\n\t}\n\n\tstatic class SampleExtendingClass extends SampleEmptyClass {\n\t}\n\n\tstatic class SampleClassWithNoProperty {\n\n\t\tString name() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithSetter {\n\n\t\tpublic void setName(String name) {\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithListProperty {\n\n\t\tpublic List<String> getNames() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic void setNames(List<String> names) {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithCycles {\n\n\t\tpublic SampleClassWithCycles getSampleClassWithCycles() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic List<SampleClassWithCycles> getSampleClassWithCyclesList() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithResolvableType {\n\n\t\tpublic ResolvableType getResolvableType() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassA {\n\t\tpublic Set<SampleClassB> getB() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassB {\n\t\tpublic SampleClassC getC() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassC {\n\t\tpublic String getString() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tenum SampleEnum {\n\t\tvalue1, value2\n\t}\n\n\trecord SampleRecord(String name) {}\n\n\trecord SampleRecordWithProperty(String name) {\n\n\t\tpublic String getNameProperty() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithJsonProperty {\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer1.class)\n\t\tprivate String privateField = \"\";\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer2.class)\n\t\tString packagePrivateMethod() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithInheritedJsonProperty extends SampleClassWithJsonProperty {}\n\n\t@JsonNaming(PropertyNamingStrategies.UpperSnakeCaseStrategy.class)\n\t@JsonDeserialize(builder = SampleRecordWithJacksonCustomStrategy.Builder.class)\n\trecord SampleRecordWithJacksonCustomStrategy(String name) {\n\n\t\t@JsonPOJOBuilder(withPrefix = \"\")\n\t\tpublic static class Builder {\n\t\t\tprivate String name;\n\n\t\t\tpublic static Builder newInstance() {\n\t\t\t\treturn new Builder();\n\t\t\t}\n\n\t\t\tpublic Builder name(String name) {\n\t\t\t\tthis.name = name;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tpublic SampleRecordWithJacksonCustomStrategy build() {\n\t\t\t\treturn new SampleRecordWithJacksonCustomStrategy(name);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer1 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer1() {\n\t\t\tsuper(CustomDeserializer1.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer2 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer2() {\n\t\t\tsuper(CustomDeserializer2.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
    "headType": "method",
    "relation": "provide",
    "tail": "String name() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithNoProperty",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SampleClassWithNoProperty#name()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SampleClassWithGetter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithGetter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint;\n\nimport java.lang.reflect.Type;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.aot.hint.predicate.RuntimeHintsPredicates;\nimport org.springframework.core.ResolvableType;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link BindingReflectionHintsRegistrar}.\n *\n * @author Sebastien Deleuze\n */\nclass BindingReflectionHintsRegistrarTests {\n\n\tprivate final BindingReflectionHintsRegistrar bindingRegistrar = new BindingReflectionHintsRegistrar();\n\n\tprivate final RuntimeHints hints = new RuntimeHints();\n\n\t@Test\n\tvoid registerTypeForSerializationWithEmptyClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEmptyClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithExtendingClass() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleExtendingClass.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleEmptyClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleExtendingClass.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithNoProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithNoProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).singleElement()\n\t\t\t\t.satisfies(typeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithNoProperty.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithGetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithGetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithGetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithSetter() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithSetter.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithSetter.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setName\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithListProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithListProperty.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithListProperty.class));\n\t\t\t\t\tassertThat(typeHint.methods()).satisfiesExactlyInAnyOrder(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"setNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getNames\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithCycles() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithCycles.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithCycles.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(List.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithResolvableType() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithResolvableType.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType[].class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Type.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(Class.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(ResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).containsExactlyInAnyOrder(\n\t\t\t\t\t\t\tMemberCategory.ACCESS_DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).hasSizeGreaterThan(1);\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassWithResolvableType.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(\n\t\t\t\t\t\t\tmethodHint -> {\n\t\t\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"getResolvableType\");\n\t\t\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithMultipleLevelsAndCollection() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassA.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassA.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassB.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleClassC.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class)),\n\t\t\t\ttypeHint -> assertThat(typeHint.getType()).isEqualTo(TypeReference.of(Set.class)));\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithEnum() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleEnum.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleEnum.class).withMemberCategories(\n\t\t\t\tMemberCategory.INVOKE_PUBLIC_CONSTRUCTORS, MemberCategory.INVOKE_PUBLIC_METHODS)).accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecord() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecord.class);\n\t\tassertThat(this.hints.reflection().typeHints()).satisfiesExactlyInAnyOrder(\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(String.class));\n\t\t\t\t\tassertThat(typeHint.getMemberCategories()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.constructors()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.fields()).isEmpty();\n\t\t\t\t\tassertThat(typeHint.methods()).isEmpty();\n\t\t\t\t},\n\t\t\t\ttypeHint -> {\n\t\t\t\t\tassertThat(typeHint.getType()).isEqualTo(TypeReference.of(SampleRecord.class));\n\t\t\t\t\tassertThat(typeHint.methods()).singleElement().satisfies(methodHint -> {\n\t\t\t\t\t\tassertThat(methodHint.getName()).isEqualTo(\"name\");\n\t\t\t\t\t\tassertThat(methodHint.getMode()).isEqualTo(ExecutableMode.INVOKE);\n\t\t\t\t\t});\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithRecordWithProperty() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleRecordWithProperty.class, \"getNameProperty\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForSerializationWithAnonymousClass() {\n\t\tRunnable anonymousRunnable = () -> { };\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), anonymousRunnable.getClass());\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForInheritedJacksonAnnotations() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithInheritedJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onFieldAccess(SampleClassWithJsonProperty.class, \"privateField\"))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onMethodInvocation(SampleClassWithJsonProperty.class, \"packagePrivateMethod\"))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForJacksonCustomStrategy() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleRecordWithJacksonCustomStrategy.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(PropertyNamingStrategies.UpperSnakeCaseStrategy.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(SampleRecordWithJacksonCustomStrategy.Builder.class)\n\t\t\t\t.withMemberCategories(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\t@Test\n\tvoid registerTypeForAnnotationOnMethodAndField() {\n\t\tbindingRegistrar.registerReflectionHints(this.hints.reflection(), SampleClassWithJsonProperty.class);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer1.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t\tassertThat(RuntimeHintsPredicates.reflection().onType(CustomDeserializer2.class).withMemberCategory(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS))\n\t\t\t\t.accepts(this.hints);\n\t}\n\n\n\tstatic class SampleEmptyClass {\n\t}\n\n\tstatic class SampleExtendingClass extends SampleEmptyClass {\n\t}\n\n\tstatic class SampleClassWithNoProperty {\n\n\t\tString name() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithGetter {\n\n\t\tpublic String getName() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithSetter {\n\n\t\tpublic void setName(String name) {\n\t\t}\n\n\t\tpublic SampleEmptyClass unmanaged() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithListProperty {\n\n\t\tpublic List<String> getNames() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic void setNames(List<String> names) {\n\t\t}\n\t}\n\n\tstatic class SampleClassWithCycles {\n\n\t\tpublic SampleClassWithCycles getSampleClassWithCycles() {\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic List<SampleClassWithCycles> getSampleClassWithCyclesList() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassWithResolvableType {\n\n\t\tpublic ResolvableType getResolvableType() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassA {\n\t\tpublic Set<SampleClassB> getB() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassB {\n\t\tpublic SampleClassC getC() {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tstatic class SampleClassC {\n\t\tpublic String getString() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tenum SampleEnum {\n\t\tvalue1, value2\n\t}\n\n\trecord SampleRecord(String name) {}\n\n\trecord SampleRecordWithProperty(String name) {\n\n\t\tpublic String getNameProperty() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithJsonProperty {\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer1.class)\n\t\tprivate String privateField = \"\";\n\n\t\t@JsonProperty\n\t\t@JsonDeserialize(using = CustomDeserializer2.class)\n\t\tString packagePrivateMethod() {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tstatic class SampleClassWithInheritedJsonProperty extends SampleClassWithJsonProperty {}\n\n\t@JsonNaming(PropertyNamingStrategies.UpperSnakeCaseStrategy.class)\n\t@JsonDeserialize(builder = SampleRecordWithJacksonCustomStrategy.Builder.class)\n\trecord SampleRecordWithJacksonCustomStrategy(String name) {\n\n\t\t@JsonPOJOBuilder(withPrefix = \"\")\n\t\tpublic static class Builder {\n\t\t\tprivate String name;\n\n\t\t\tpublic static Builder newInstance() {\n\t\t\t\treturn new Builder();\n\t\t\t}\n\n\t\t\tpublic Builder name(String name) {\n\t\t\t\tthis.name = name;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tpublic SampleRecordWithJacksonCustomStrategy build() {\n\t\t\t\treturn new SampleRecordWithJacksonCustomStrategy(name);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer1 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer1() {\n\t\t\tsuper(CustomDeserializer1.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"serial\")\n\tstatic class CustomDeserializer2 extends StdDeserializer<LocalDate> {\n\n\t\tpublic CustomDeserializer2() {\n\t\t\tsuper(CustomDeserializer2.class);\n\t\t}\n\n\t\t@Override\n\t\tpublic LocalDate deserialize(JsonParser p, DeserializationContext ctxt) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithGetter#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "public String getName() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithGetter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SampleClassWithGetter#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithGetter#unmanaged()",
    "headType": "method",
    "relation": "provide",
    "tail": "public SampleEmptyClass unmanaged() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.SampleClassWithGetter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.SampleClassWithGetter#unmanaged()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.SampleClassWithSetter",
    "tailType": "class"
  }
]