[
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED",
    "headType": "field",
    "relation": "haveType",
    "tail": "Type",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED_SET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED_SET",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED_GET",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#ENABLED_GET",
    "headType": "field",
    "relation": "haveType",
    "tail": "Signature",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#filter",
    "tailType": "field"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#filter",
    "headType": "field",
    "relation": "haveType",
    "tail": "InterceptFieldFilter",
    "tailType": "type"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void begin_class(int version, int access, String className, Type superType, Type[] interfaces, String sourceFile) {\r\n    if (!TypeUtils.isInterface(access)) {\r\n        super.begin_class(version, access, className, superType, TypeUtils.add(interfaces, ENABLED), sourceFile);\r\n        super.declare_field(Constants.ACC_PRIVATE | Constants.ACC_TRANSIENT, CALLBACK_FIELD, CALLBACK, null);\r\n        CodeEmitter e;\r\n        e = super.begin_method(Constants.ACC_PUBLIC, ENABLED_GET, null);\r\n        e.load_this();\r\n        e.getfield(CALLBACK_FIELD);\r\n        e.return_value();\r\n        e.end_method();\r\n        e = super.begin_method(Constants.ACC_PUBLIC, ENABLED_SET, null);\r\n        e.load_this();\r\n        e.load_arg(0);\r\n        e.putfield(CALLBACK_FIELD);\r\n        e.return_value();\r\n        e.end_method();\r\n    } else {\r\n        super.begin_class(version, access, className, superType, interfaces, sourceFile);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_class(int,int,String,Type,Type[],String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void declare_field(int access, String name, Type type, Object value) {\r\n    super.declare_field(access, name, type, value);\r\n    if (!TypeUtils.isStatic(access)) {\r\n        if (filter.acceptRead(getClassType(), name)) {\r\n            addReadMethod(name, type);\r\n        }\r\n        if (filter.acceptWrite(getClassType(), name)) {\r\n            addWriteMethod(name, type);\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#declare_field(int,String,Type,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addReadMethod(String,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addReadMethod(String name, Type type) {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, readMethodSig(name, type.getDescriptor()), null);\r\n    e.load_this();\r\n    e.getfield(name);\r\n    e.load_this();\r\n    e.invoke_interface(ENABLED, ENABLED_GET);\r\n    Label intercept = e.make_label();\r\n    e.ifnonnull(intercept);\r\n    e.return_value();\r\n    e.mark(intercept);\r\n    Local result = e.make_local(type);\r\n    e.store_local(result);\r\n    e.load_this();\r\n    e.invoke_interface(ENABLED, ENABLED_GET);\r\n    e.load_this();\r\n    e.push(name);\r\n    e.load_local(result);\r\n    e.invoke_interface(CALLBACK, readCallbackSig(type));\r\n    if (!TypeUtils.isPrimitive(type)) {\r\n        e.checkcast(type);\r\n    }\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addReadMethod(String,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addWriteMethod(String,Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void addWriteMethod(String name, Type type) {\r\n    CodeEmitter e = super.begin_method(Constants.ACC_PUBLIC, writeMethodSig(name, type.getDescriptor()), null);\r\n    e.load_this();\r\n    e.dup();\r\n    e.invoke_interface(ENABLED, ENABLED_GET);\r\n    Label skip = e.make_label();\r\n    e.ifnull(skip);\r\n    e.load_this();\r\n    e.invoke_interface(ENABLED, ENABLED_GET);\r\n    e.load_this();\r\n    e.push(name);\r\n    e.load_this();\r\n    e.getfield(name);\r\n    e.load_arg(0);\r\n    e.invoke_interface(CALLBACK, writeCallbackSig(type));\r\n    if (!TypeUtils.isPrimitive(type)) {\r\n        e.checkcast(type);\r\n    }\r\n    Label go = e.make_label();\r\n    e.goTo(go);\r\n    e.mark(skip);\r\n    e.load_arg(0);\r\n    e.mark(go);\r\n    e.putfield(name);\r\n    e.return_value();\r\n    e.end_method();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#addWriteMethod(String,Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic CodeEmitter begin_method(int access, Signature sig, Type[] exceptions) {\r\n    return new CodeEmitter(super.begin_method(access, sig, exceptions)) {\r\n\r\n        @Override\r\n        public void visitFieldInsn(int opcode, String owner, String name, String desc) {\r\n            Type towner = TypeUtils.fromInternalName(owner);\r\n            switch(opcode) {\r\n                case Constants.GETFIELD:\r\n                    if (filter.acceptRead(towner, name)) {\r\n                        helper(towner, readMethodSig(name, desc));\r\n                        return;\r\n                    }\r\n                    break;\r\n                case Constants.PUTFIELD:\r\n                    if (filter.acceptWrite(towner, name)) {\r\n                        helper(towner, writeMethodSig(name, desc));\r\n                        return;\r\n                    }\r\n                    break;\r\n            }\r\n            super.visitFieldInsn(opcode, owner, name, desc);\r\n        }\r\n\r\n        private void helper(Type owner, Signature sig) {\r\n            invoke_virtual(owner, sig);\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.impl.InterceptFieldTransformer#begin_method(int,Signature,Type[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]