[
  {
    "head": "org.springframework.core.AttributeAccessor#attributeNames()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the names of all attributes.\r\n */\r\nString[] attributeNames();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessor",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessor#attributeNames()",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.AttributeAccessorSupport",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.io.Serializable;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\n/**\n * Support class for {@link AttributeAccessor AttributeAccessors}, providing\n * a base implementation of all methods. To be extended by subclasses.\n *\n * <p>{@link Serializable} if subclasses and all attribute values are {@link Serializable}.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @since 2.0\n */\n@SuppressWarnings(\"serial\")\npublic abstract class AttributeAccessorSupport implements AttributeAccessor, Serializable {\n\n\t/** Map with String keys and Object values. */\n\tprivate final Map<String, Object> attributes = new LinkedHashMap<>();\n\n\n\t@Override\n\tpublic void setAttribute(String name, @Nullable Object value) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tif (value != null) {\n\t\t\tthis.attributes.put(name, value);\n\t\t}\n\t\telse {\n\t\t\tremoveAttribute(name);\n\t\t}\n\t}\n\n\t@Override\n\tpublic @Nullable Object getAttribute(String name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\treturn this.attributes.get(name);\n\t}\n\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T computeAttribute(String name, Function<String, T> computeFunction) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\tAssert.notNull(computeFunction, \"Compute function must not be null\");\n\t\tObject value = this.attributes.computeIfAbsent(name, computeFunction);\n\t\tAssert.state(value != null,\n\t\t\t\t() -> String.format(\"Compute function must not return null for attribute named '%s'\", name));\n\t\treturn (T) value;\n\t}\n\n\t@Override\n\tpublic @Nullable Object removeAttribute(String name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\treturn this.attributes.remove(name);\n\t}\n\n\t@Override\n\tpublic boolean hasAttribute(String name) {\n\t\tAssert.notNull(name, \"Name must not be null\");\n\t\treturn this.attributes.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] attributeNames() {\n\t\treturn StringUtils.toStringArray(this.attributes.keySet());\n\t}\n\n\n\t/**\n\t * Copy the attributes from the supplied AttributeAccessor to this accessor.\n\t * @param source the AttributeAccessor to copy from\n\t */\n\tprotected void copyAttributesFrom(AttributeAccessor source) {\n\t\tAssert.notNull(source, \"Source must not be null\");\n\t\tString[] attributeNames = source.attributeNames();\n\t\tfor (String attributeName : attributeNames) {\n\t\t\tsetAttribute(attributeName, source.getAttribute(attributeName));\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic boolean equals(@Nullable Object other) {\n\t\treturn (this == other || (other instanceof AttributeAccessorSupport that &&\n\t\t\t\tthis.attributes.equals(that.attributes)));\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.attributes.hashCode();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.AttributeAccessorSupport#attributes",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#attributes",
    "headType": "field",
    "relation": "haveType",
    "tail": "Map<String, Object>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#setAttribute(String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void setAttribute(String name, @Nullable Object value) {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    if (value != null) {\r\n        this.attributes.put(name, value);\r\n    } else {\r\n        removeAttribute(name);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#setAttribute(String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#setAttribute(String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#getAttribute(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object getAttribute(String name) {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    return this.attributes.get(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#getAttribute(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#getAttribute(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#getAttribute(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#computeAttribute(String,Function<String,T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic <T> T computeAttribute(String name, Function<String, T> computeFunction) {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    Assert.notNull(computeFunction, \"Compute function must not be null\");\r\n    Object value = this.attributes.computeIfAbsent(name, computeFunction);\r\n    Assert.state(value != null, () -> String.format(\"Compute function must not return null for attribute named '%s'\", name));\r\n    return (T) value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.AttributeAccessorSupport#computeAttribute(String,Function<String,T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#computeAttribute(String,Function<String,T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#computeAttribute(String,Function<String,T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.AttributeAccessorSupport#removeAttribute(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object removeAttribute(String name) {\r\n    Assert.notNull(name, \"Name must not be null\");\r\n    return this.attributes.remove(name);\r\n}",
    "tailType": "method_code"
  }
]