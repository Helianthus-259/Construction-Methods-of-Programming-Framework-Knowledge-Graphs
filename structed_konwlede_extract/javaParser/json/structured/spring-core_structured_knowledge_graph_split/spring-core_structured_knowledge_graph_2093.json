[
  {
    "head": "org.springframework.core.ResolvableTypeTests#forConstructorParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forConstructorParameterMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forConstructorParameterMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forConstructorParameter(null, 0)).withMessage(\"Constructor must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forConstructorParameterMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forConstructorParameterMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndex()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodParameterByIndex() throws Exception {\r\n    Method method = Methods.class.getMethod(\"charSequenceParameter\", List.class);\r\n    ResolvableType type = ResolvableType.forMethodParameter(method, 0);\r\n    assertThat(type.getType()).isEqualTo(method.getGenericParameterTypes()[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndex()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndex()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndexMustNotBeNull()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodParameterByIndexMustNotBeNull() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> ResolvableType.forMethodParameter(null, 0)).withMessage(\"Method must not be null\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndexMustNotBeNull()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterByIndexMustNotBeNull()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid forMethodParameter() throws Exception {\r\n    Method method = Methods.class.getMethod(\"charSequenceParameter\", List.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(type.getType()).isEqualTo(method.getGenericParameterTypes()[0]);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameter()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNesting()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid forMethodParameterWithNesting() throws Exception {\r\n    Method method = Methods.class.getMethod(\"nested\", Map.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    methodParameter.increaseNestingLevel();\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(Byte.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(Long.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNesting()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNesting()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNesting()",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNestingAndLevels()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid forMethodParameterWithNestingAndLevels() throws Exception {\r\n    Method method = Methods.class.getMethod(\"nested\", Map.class);\r\n    MethodParameter methodParameter = MethodParameter.forExecutable(method, 0);\r\n    methodParameter.increaseNestingLevel();\r\n    methodParameter.setTypeIndexForCurrentLevel(0);\r\n    ResolvableType type = ResolvableType.forMethodParameter(methodParameter);\r\n    assertThat(type.resolve()).isEqualTo(Map.class);\r\n    assertThat(type.getGeneric(0).resolve()).isEqualTo(String.class);\r\n    assertThat(type.getGeneric(1).resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNestingAndLevels()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#forMethodParameterWithNestingAndLevels()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]