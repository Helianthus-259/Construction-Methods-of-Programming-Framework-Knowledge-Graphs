[
  {
    "head": "org.springframework.core.convert.Property#getObjectType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The object declaring this property, either directly or in a superclass the object extends.\r\n */\r\npublic Class<?> getObjectType() {\r\n    return this.objectType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getObjectType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getName()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The name of the property: for example, 'foo'.\r\n */\r\npublic String getName() {\r\n    return this.name;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The property type: for example, {@code java.lang.String}.\r\n */\r\npublic Class<?> getType() {\r\n    return this.methodParameter.getParameterType();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getReadMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The property getter method: for example, {@code getFoo()}.\r\n */\r\n@Nullable\r\npublic Method getReadMethod() {\r\n    return this.readMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getReadMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getReadMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#getWriteMethod()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * The property setter method: for example, {@code setFoo(String)}.\r\n */\r\n@Nullable\r\npublic Method getWriteMethod() {\r\n    return this.writeMethod;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getWriteMethod()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getWriteMethod()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.Property#getMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "// Package private\r\nMethodParameter getMethodParameter() {\r\n    return this.methodParameter;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getMethodParameter()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#getAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "Annotation[] getAnnotations() {\r\n    if (this.annotations == null) {\r\n        this.annotations = resolveAnnotations();\r\n    }\r\n    return this.annotations;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#getAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveName()",
    "headType": "method",
    "relation": "provide",
    "tail": "// Internal helpers\r\nprivate String resolveName() {\r\n    if (this.readMethod != null) {\r\n        int index = this.readMethod.getName().indexOf(\"get\");\r\n        if (index != -1) {\r\n            index += 3;\r\n        } else {\r\n            index = this.readMethod.getName().indexOf(\"is\");\r\n            if (index != -1) {\r\n                index += 2;\r\n            } else {\r\n                // Record-style plain accessor method, for example, name()\r\n                index = 0;\r\n            }\r\n        }\r\n        return StringUtils.uncapitalize(this.readMethod.getName().substring(index));\r\n    } else if (this.writeMethod != null) {\r\n        int index = this.writeMethod.getName().indexOf(\"set\");\r\n        if (index == -1) {\r\n            throw new IllegalArgumentException(\"Not a setter method\");\r\n        }\r\n        index += 3;\r\n        return StringUtils.uncapitalize(this.writeMethod.getName().substring(index));\r\n    } else {\r\n        throw new IllegalStateException(\"Property is neither readable nor writeable\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#resolveName()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.Property#resolveMethodParameter()",
    "headType": "method",
    "relation": "provide",
    "tail": "private MethodParameter resolveMethodParameter() {\r\n    MethodParameter read = resolveReadMethodParameter();\r\n    MethodParameter write = resolveWriteMethodParameter();\r\n    if (write == null) {\r\n        if (read == null) {\r\n            throw new IllegalStateException(\"Property is neither readable nor writeable\");\r\n        }\r\n        return read;\r\n    }\r\n    if (read != null) {\r\n        Class<?> readType = read.getParameterType();\r\n        Class<?> writeType = write.getParameterType();\r\n        if (!writeType.equals(readType) && writeType.isAssignableFrom(readType)) {\r\n            return read;\r\n        }\r\n    }\r\n    return write;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.Property",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.Property#resolveMethodParameter()",
    "tailType": "method"
  }
]