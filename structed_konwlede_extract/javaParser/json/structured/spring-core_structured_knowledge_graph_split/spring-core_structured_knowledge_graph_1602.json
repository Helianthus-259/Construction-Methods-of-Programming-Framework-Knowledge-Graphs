[
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor() {\r\n    assertGetMergedAnnotation(SingleLocationTransitiveImplicitAliasesWithSkippedLevelContextConfigClass.class, \"test.xml\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithTransitiveImplicitAliasesWithSkippedLevelWithSingleElementOverridingAnArrayViaAliasFor()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void assertGetMergedAnnotation(Class<?> element, String... expected) {\r\n    String name = ContextConfig.class.getName();\r\n    ContextConfig contextConfig = getMergedAnnotation(element, ContextConfig.class);\r\n    assertThat(contextConfig).as(\"Should find @ContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(contextConfig.locations()).as(\"locations\").isEqualTo(expected);\r\n    assertThat(contextConfig.value()).as(\"value\").isEqualTo(expected);\r\n    Object[] expecteds = new Class<?>[0];\r\n    assertThat(contextConfig.classes()).as(\"classes\").isEqualTo(expecteds);\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#assertGetMergedAnnotation(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation() {\r\n    Class<?> element = ComposedImplicitAliasesContextConfigClass.class;\r\n    String name = ImplicitAliasesContextConfig.class.getName();\r\n    ImplicitAliasesContextConfig config = getMergedAnnotation(element, ImplicitAliasesContextConfig.class);\r\n    String[] expected = asArray(\"A.xml\", \"B.xml\");\r\n    assertThat(config).as(\"Should find @ImplicitAliasesContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(config.groovyScripts()).as(\"groovyScripts\").isEqualTo(expected);\r\n    assertThat(config.xmlFiles()).as(\"xmlFiles\").isEqualTo(expected);\r\n    assertThat(config.locations()).as(\"locations\").isEqualTo(expected);\r\n    assertThat(config.value()).as(\"value\").isEqualTo(expected);\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation() {\r\n    Class<?> element = ImplicitAliasesWithDefaultsClass.class;\r\n    String name = AliasesWithDefaults.class.getName();\r\n    AliasesWithDefaults annotation = getMergedAnnotation(element, AliasesWithDefaults.class);\r\n    assertThat(annotation).as(\"Should find @AliasesWithDefaults on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(annotation.a1()).as(\"a1\").isEqualTo(\"ImplicitAliasesWithDefaults\");\r\n    assertThat(annotation.a2()).as(\"a2\").isEqualTo(\"ImplicitAliasesWithDefaults\");\r\n    // Verify contracts between utility methods:\r\n    assertThat(isAnnotated(element, name)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationWithImplicitAliasesWithDefaultsInMetaAnnotationOnComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation() {\r\n    Class<?> element = ShadowedAliasComposedContextConfigClass.class;\r\n    AnnotationAttributes attributes = getMergedAnnotationAttributes(element, ContextConfig.class);\r\n    String[] expected = asArray(\"test.xml\");\r\n    assertThat(attributes).as(\"Should find @ContextConfig on \" + element.getSimpleName()).isNotNull();\r\n    assertThat(attributes.getStringArray(\"locations\")).as(\"locations\").isEqualTo(expected);\r\n    assertThat(attributes.getStringArray(\"value\")).as(\"value\").isEqualTo(expected);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#getMergedAnnotationAttributesWithShadowedAliasComposedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationAttributesOnInheritedAnnotationInterface() {\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(InheritedAnnotationInterface.class, Transactional.class);\r\n    assertThat(attributes).as(\"Should find @Transactional on InheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid findMergedAnnotationAttributesOnSubInheritedAnnotationInterface() {\r\n    AnnotationAttributes attributes = findMergedAnnotationAttributes(SubInheritedAnnotationInterface.class, Transactional.class);\r\n    assertThat(attributes).as(\"Should find @Transactional on SubInheritedAnnotationInterface\").isNotNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotatedElementUtilsTests#findMergedAnnotationAttributesOnSubInheritedAnnotationInterface()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]