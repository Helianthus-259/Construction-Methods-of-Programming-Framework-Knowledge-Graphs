[
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#index",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#index",
    "headType": "field",
    "relation": "haveType",
    "tail": "int",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#method",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#method",
    "headType": "field",
    "relation": "haveType",
    "tail": "Method",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#result",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#result",
    "headType": "field",
    "relation": "haveType",
    "tail": "Object",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Type getType() {\r\n    Object result = this.result;\r\n    if (result == null) {\r\n        // Lazy invocation of the target method on the provided type\r\n        result = ReflectionUtils.invokeMethod(this.method, this.provider.getType());\r\n        // Cache the result for further calls to getType()\r\n        this.result = result;\r\n    }\r\n    return (result instanceof Type[] results ? results[this.index] : (Type) result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#getType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getSource()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\n@Nullable\r\npublic Object getSource() {\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#getSource()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#getSource()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider#readObject(ObjectInputStream)",
    "headType": "method",
    "relation": "provide",
    "tail": "private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {\r\n    inputStream.defaultReadObject();\r\n    Method method = ReflectionUtils.findMethod(this.declaringClass, this.methodName);\r\n    if (method == null) {\r\n        throw new IllegalStateException(\"Cannot find method on deserialization: \" + this.methodName);\r\n    }\r\n    if (method.getReturnType() != Type.class && method.getReturnType() != Type[].class) {\r\n        throw new IllegalStateException(\"Invalid return type on deserialized method - needs to be Type or Type[]: \" + method);\r\n    }\r\n    this.method = method;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.MethodInvokeTypeProvider",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.MethodInvokeTypeProvider#readObject(ObjectInputStream)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.serializer",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.serializer",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.serializer.DefaultDeserializer",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.serializer;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.ConfigurableObjectInputStream;\n\n/**\n * A default {@link Deserializer} implementation that reads an input stream\n * using Java serialization.\n *\n * @author Gary Russell\n * @author Mark Fisher\n * @author Juergen Hoeller\n * @since 3.0.5\n * @see ObjectInputStream\n */\npublic class DefaultDeserializer implements Deserializer<Object> {\n\n\tprivate final @Nullable ClassLoader classLoader;\n\n\n\t/**\n\t * Create a {@code DefaultDeserializer} with default {@link ObjectInputStream}\n\t * configuration, using the \"latest user-defined ClassLoader\".\n\t */\n\tpublic DefaultDeserializer() {\n\t\tthis.classLoader = null;\n\t}\n\n\t/**\n\t * Create a {@code DefaultDeserializer} for using an {@link ObjectInputStream}\n\t * with the given {@code ClassLoader}.\n\t * @param classLoader the ClassLoader to use\n\t * @since 4.2.1\n\t * @see ConfigurableObjectInputStream#ConfigurableObjectInputStream(InputStream, ClassLoader)\n\t */\n\tpublic DefaultDeserializer(@Nullable ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\n\t/**\n\t * Read from the supplied {@code InputStream} and deserialize the contents\n\t * into an object.\n\t * @see ObjectInputStream#readObject()\n\t */\n\t@Override\n\tpublic Object deserialize(InputStream inputStream) throws IOException {\n\t\tObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\n\t\ttry {\n\t\t\treturn objectInputStream.readObject();\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\tthrow new IOException(\"Failed to deserialize object type\", ex);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.serializer.DefaultDeserializer",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.serializer.DefaultDeserializer#classLoader",
    "tailType": "field"
  }
]