[
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(String,Class<T>,ArgumentResolver,FailureHandler)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(String,Class<T>,ArgumentResolver,FailureHandler)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactories(Class<T>,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load and instantiate the factory implementations of the given type from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader.\r\n * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.\r\n * <p>As of Spring Framework 5.3, if duplicate implementation class names are\r\n * discovered for a given factory type, only one instance of the duplicated\r\n * implementation type will be instantiated.\r\n * <p>For more advanced factory loading with {@link ArgumentResolver} or\r\n * {@link FailureHandler} support use {@link #forDefaultResourceLocation(ClassLoader)}\r\n * to obtain a {@link SpringFactoriesLoader} instance.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @param classLoader the ClassLoader to use for loading (can be {@code null}\r\n * to use the default)\r\n * @throws IllegalArgumentException if any factory implementation class cannot\r\n * be loaded or if an error occurs while instantiating any factory\r\n */\r\npublic static <T> List<T> loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader) {\r\n    return forDefaultResourceLocation(classLoader).load(factoryType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactories(Class<T>,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames(Class<?>,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Load the fully qualified class names of factory implementations of the\r\n * given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given\r\n * class loader.\r\n * <p>As of Spring Framework 5.3, if a particular implementation class name\r\n * is discovered more than once for the given factory type, duplicates will\r\n * be ignored.\r\n * @param factoryType the interface or abstract class representing the factory\r\n * @param classLoader the ClassLoader to use for loading resources; can be\r\n * {@code null} to use the default\r\n * @throws IllegalArgumentException if an error occurs while loading factory names\r\n * @see #loadFactories\r\n * @deprecated as of 6.0 in favor of {@link #load(Class, ArgumentResolver, FailureHandler)}\r\n */\r\n@Deprecated(since = \"6.0\")\r\npublic static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {\r\n    return forDefaultResourceLocation(classLoader).loadFactoryNames(factoryType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames(Class<?>,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames(Class<?>,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Deprecated",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link SpringFactoriesLoader} instance that will load and\r\n * instantiate the factory implementations from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the default class loader.\r\n * @return a {@link SpringFactoriesLoader} instance\r\n * @since 6.0\r\n * @see #forDefaultResourceLocation(ClassLoader)\r\n */\r\npublic static SpringFactoriesLoader forDefaultResourceLocation() {\r\n    return forDefaultResourceLocation(null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation(ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link SpringFactoriesLoader} instance that will load and\r\n * instantiate the factory implementations from\r\n * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader.\r\n * @param classLoader the ClassLoader to use for loading resources; can be\r\n * {@code null} to use the default\r\n * @return a {@link SpringFactoriesLoader} instance\r\n * @since 6.0\r\n * @see #forDefaultResourceLocation()\r\n */\r\npublic static SpringFactoriesLoader forDefaultResourceLocation(@Nullable ClassLoader classLoader) {\r\n    return forResourceLocation(FACTORIES_RESOURCE_LOCATION, classLoader);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation(ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link SpringFactoriesLoader} instance that will load and\r\n * instantiate the factory implementations from the given location,\r\n * using the default class loader.\r\n * @param resourceLocation the resource location to look for factories\r\n * @return a {@link SpringFactoriesLoader} instance\r\n * @since 6.0\r\n * @see #forResourceLocation(String, ClassLoader)\r\n */\r\npublic static SpringFactoriesLoader forResourceLocation(String resourceLocation) {\r\n    return forResourceLocation(resourceLocation, null);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(String,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a {@link SpringFactoriesLoader} instance that will load and\r\n * instantiate the factory implementations from the given location,\r\n * using the given class loader.\r\n * @param resourceLocation the resource location to look for factories\r\n * @param classLoader the ClassLoader to use for loading resources;\r\n * can be {@code null} to use the default\r\n * @return a {@link SpringFactoriesLoader} instance\r\n * @since 6.0\r\n * @see #forResourceLocation(String)\r\n */\r\npublic static SpringFactoriesLoader forResourceLocation(String resourceLocation, @Nullable ClassLoader classLoader) {\r\n    Assert.hasText(resourceLocation, \"'resourceLocation' must not be empty\");\r\n    ClassLoader resourceClassLoader = (classLoader != null ? classLoader : SpringFactoriesLoader.class.getClassLoader());\r\n    Map<String, SpringFactoriesLoader> loaders = cache.computeIfAbsent(resourceClassLoader, key -> new ConcurrentReferenceHashMap<>());\r\n    return loaders.computeIfAbsent(resourceLocation, key -> new SpringFactoriesLoader(classLoader, loadFactoriesResource(resourceClassLoader, resourceLocation)));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(String,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoriesResource(ClassLoader,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "protected static Map<String, List<String>> loadFactoriesResource(ClassLoader classLoader, String resourceLocation) {\r\n    Map<String, List<String>> result = new LinkedHashMap<>();\r\n    try {\r\n        Enumeration<URL> urls = classLoader.getResources(resourceLocation);\r\n        while (urls.hasMoreElements()) {\r\n            UrlResource resource = new UrlResource(urls.nextElement());\r\n            Properties properties = PropertiesLoaderUtils.loadProperties(resource);\r\n            properties.forEach((name, value) -> {\r\n                String[] factoryImplementationNames = StringUtils.commaDelimitedListToStringArray((String) value);\r\n                List<String> implementations = result.computeIfAbsent(((String) name).trim(), key -> new ArrayList<>(factoryImplementationNames.length));\r\n                Arrays.stream(factoryImplementationNames).map(String::trim).forEach(implementations::add);\r\n            });\r\n        }\r\n        result.replaceAll(SpringFactoriesLoader::toDistinctUnmodifiableList);\r\n    } catch (IOException ex) {\r\n        throw new IllegalArgumentException(\"Unable to load factories from location [\" + resourceLocation + \"]\", ex);\r\n    }\r\n    return Collections.unmodifiableMap(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#loadFactoriesResource(ClassLoader,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader#toDistinctUnmodifiableList(String,List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static List<String> toDistinctUnmodifiableList(String factoryType, List<String> implementations) {\r\n    return implementations.stream().distinct().toList();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.support.SpringFactoriesLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.support.SpringFactoriesLoader#toDistinctUnmodifiableList(String,List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.io.support.FactoryInstantiator",
    "tailType": "class"
  }
]