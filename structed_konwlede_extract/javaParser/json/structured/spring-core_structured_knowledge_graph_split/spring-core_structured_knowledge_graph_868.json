[
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#convertFromByteBuffer(ByteBuffer,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convertFromByteBuffer(ByteBuffer,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter#convertToByteBuffer(Object,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "private Object convertToByteBuffer(@Nullable Object source, TypeDescriptor sourceType) {\r\n    byte[] bytes = (byte[]) (source instanceof byte[] ? source : this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));\r\n    if (bytes == null) {\r\n        return ByteBuffer.wrap(new byte[0]);\r\n    }\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length);\r\n    byteBuffer.put(bytes);\r\n    return byteBuffer.rewind();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.ByteBufferConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.ByteBufferConverter#convertToByteBuffer(Object,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CharacterToNumberFactory",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumberFactory",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\nimport org.springframework.util.NumberUtils;\n\n/**\n * Converts from a Character to any JDK-standard Number implementation.\n *\n * <p>Support Number classes including Byte, Short, Integer, Float, Double, Long, BigInteger, BigDecimal. This class\n * delegates to {@link NumberUtils#convertNumberToTargetClass(Number, Class)} to perform the conversion.\n *\n * @author Keith Donald\n * @since 3.0\n * @see java.lang.Byte\n * @see java.lang.Short\n * @see java.lang.Integer\n * @see java.lang.Long\n * @see java.math.BigInteger\n * @see java.lang.Float\n * @see java.lang.Double\n * @see java.math.BigDecimal\n * @see NumberUtils\n */\nfinal class CharacterToNumberFactory implements ConverterFactory<Character, Number> {\n\n\t@Override\n\tpublic <T extends Number> Converter<Character, T> getConverter(Class<T> targetType) {\n\t\treturn new CharacterToNumber<>(targetType);\n\t}\n\n\tprivate static final class CharacterToNumber<T extends Number> implements Converter<Character, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic CharacterToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic T convert(Character source) {\n\t\t\treturn NumberUtils.convertNumberToTargetClass((short) source.charValue(), this.targetType);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumberFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic <T extends Number> Converter<Character, T> getConverter(Class<T> targetType) {\r\n    return new CharacterToNumber<>(targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumberFactory",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CharacterToNumberFactory#getConverter(Class<T>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumberFactory#getConverter(Class<T>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CharacterToNumber",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.core.convert.converter.ConverterFactory;\nimport org.springframework.util.NumberUtils;\n\n/**\n * Converts from a Character to any JDK-standard Number implementation.\n *\n * <p>Support Number classes including Byte, Short, Integer, Float, Double, Long, BigInteger, BigDecimal. This class\n * delegates to {@link NumberUtils#convertNumberToTargetClass(Number, Class)} to perform the conversion.\n *\n * @author Keith Donald\n * @since 3.0\n * @see java.lang.Byte\n * @see java.lang.Short\n * @see java.lang.Integer\n * @see java.lang.Long\n * @see java.math.BigInteger\n * @see java.lang.Float\n * @see java.lang.Double\n * @see java.math.BigDecimal\n * @see NumberUtils\n */\nfinal class CharacterToNumberFactory implements ConverterFactory<Character, Number> {\n\n\t@Override\n\tpublic <T extends Number> Converter<Character, T> getConverter(Class<T> targetType) {\n\t\treturn new CharacterToNumber<>(targetType);\n\t}\n\n\tprivate static final class CharacterToNumber<T extends Number> implements Converter<Character, T> {\n\n\t\tprivate final Class<T> targetType;\n\n\t\tpublic CharacterToNumber(Class<T> targetType) {\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic T convert(Character source) {\n\t\t\treturn NumberUtils.convertNumberToTargetClass((short) source.charValue(), this.targetType);\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.support.CharacterToNumber#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<T>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber#convert(Character)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic T convert(Character source) {\r\n    return NumberUtils.convertNumberToTargetClass((short) source.charValue(), this.targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.support.CharacterToNumber#convert(Character)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.support.CharacterToNumber#convert(Character)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core.convert.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core.convert.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.support.CollectionToArrayConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.support;\n\nimport java.lang.reflect.Array;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.core.convert.converter.ConditionalGenericConverter;\nimport org.springframework.util.Assert;\n\n/**\n * Converts a Collection to an array.\n *\n * <p>First, creates a new array of the requested targetType with a length equal to the\n * size of the source Collection. Then sets each collection element into the array.\n * Will perform an element conversion from the collection's parameterized type to the\n * array's component type if necessary.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n */\nfinal class CollectionToArrayConverter implements ConditionalGenericConverter {\n\n\tprivate final ConversionService conversionService;\n\n\n\tpublic CollectionToArrayConverter(ConversionService conversionService) {\n\t\tthis.conversionService = conversionService;\n\t}\n\n\n\t@Override\n\tpublic Set<ConvertiblePair> getConvertibleTypes() {\n\t\treturn Collections.singleton(new ConvertiblePair(Collection.class, Object[].class));\n\t}\n\n\t@Override\n\tpublic boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\treturn ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(),\n\t\t\t\ttargetType.getElementTypeDescriptor(), this.conversionService);\n\t}\n\n\t@Override\n\tpublic @Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n\t\tif (source == null) {\n\t\t\treturn null;\n\t\t}\n\t\tCollection<?> sourceCollection = (Collection<?>) source;\n\t\tTypeDescriptor targetElementType = targetType.getElementTypeDescriptor();\n\t\tAssert.state(targetElementType != null, \"No target element type\");\n\t\tObject array = Array.newInstance(targetElementType.getType(), sourceCollection.size());\n\t\tint i = 0;\n\t\tfor (Object sourceElement : sourceCollection) {\n\t\t\tObject targetElement = this.conversionService.convert(sourceElement,\n\t\t\t\t\tsourceType.elementTypeDescriptor(sourceElement), targetElementType);\n\t\t\tArray.set(array, i++, targetElement);\n\t\t}\n\t\treturn array;\n\t}\n\n}\n",
    "tailType": "class_code"
  }
]