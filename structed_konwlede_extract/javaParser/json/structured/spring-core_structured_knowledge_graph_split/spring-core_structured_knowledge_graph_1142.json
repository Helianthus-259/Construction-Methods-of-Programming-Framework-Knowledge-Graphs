[
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#equalsType(ResolvableType)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int hashCode() {\r\n    return (this.hash != null ? this.hash : calculateHashCode());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#hashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#hashCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#calculateHashCode()",
    "headType": "method",
    "relation": "provide",
    "tail": "private int calculateHashCode() {\r\n    int hashCode = ObjectUtils.nullSafeHashCode(this.type);\r\n    if (this.componentType != null) {\r\n        hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);\r\n    }\r\n    if (this.typeProvider != null) {\r\n        hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.typeProvider.getType());\r\n    }\r\n    if (this.variableResolver != null) {\r\n        hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());\r\n    }\r\n    return hashCode;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#calculateHashCode()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#asVariableResolver()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Adapts this {@code ResolvableType} to a {@link VariableResolver}.\r\n */\r\n@Nullable\r\nVariableResolver asVariableResolver() {\r\n    if (this == NONE) {\r\n        return null;\r\n    }\r\n    return new DefaultVariableResolver(this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#asVariableResolver()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#asVariableResolver()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#readResolve()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Custom serialization support for {@link #NONE}.\r\n */\r\nprivate Object readResolve() {\r\n    return (this.type == EmptyType.INSTANCE ? NONE : this);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#readResolve()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#toString()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a String representation of this type in its fully resolved form\r\n * (including any generic parameters).\r\n */\r\n@Override\r\npublic String toString() {\r\n    if (isArray()) {\r\n        return getComponentType() + \"[]\";\r\n    }\r\n    if (this.resolved == null) {\r\n        return \"?\";\r\n    }\r\n    if (this.type instanceof TypeVariable<?> variable) {\r\n        if (this.variableResolver == null || this.variableResolver.resolveVariable(variable) == null) {\r\n            // Don't bother with variable boundaries for toString()...\r\n            // Can cause infinite recursions in case of self-references\r\n            return \"?\";\r\n        }\r\n    }\r\n    if (hasGenerics()) {\r\n        return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), \", \") + '>';\r\n    }\r\n    return this.resolved.getName();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#toString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#toString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableType#forClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Factory methods\r\n/**\r\n * Return a {@code ResolvableType} for the specified {@link Class},\r\n * using the full generic type information for assignability checks.\r\n * <p>For example: {@code ResolvableType.forClass(MyArrayList.class)}.\r\n * @param clazz the class to introspect ({@code null} is semantically\r\n * equivalent to {@code Object.class} for typical use cases here)\r\n * @return a {@code ResolvableType} for the specified class\r\n * @see #forClass(Class, Class)\r\n * @see #forClassWithGenerics(Class, Class...)\r\n */\r\npublic static ResolvableType forClass(@Nullable Class<?> clazz) {\r\n    return new ResolvableType(clazz);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forRawClass(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified {@link Class},\r\n * doing assignability checks against the raw class only (analogous to\r\n * {@link Class#isAssignableFrom}, which this serves as a wrapper for).\r\n * <p>For example: {@code ResolvableType.forRawClass(List.class)}.\r\n * @param clazz the class to introspect ({@code null} is semantically\r\n * equivalent to {@code Object.class} for typical use cases here)\r\n * @return a {@code ResolvableType} for the specified class\r\n * @since 4.2\r\n * @see #forClass(Class)\r\n * @see #getRawClass()\r\n */\r\npublic static ResolvableType forRawClass(@Nullable Class<?> clazz) {\r\n    return new ResolvableType(clazz) {\r\n\r\n        @Override\r\n        public ResolvableType[] getGenerics() {\r\n            return EMPTY_TYPES_ARRAY;\r\n        }\r\n\r\n        @Override\r\n        public boolean isAssignableFrom(Class<?> other) {\r\n            return (clazz == null || ClassUtils.isAssignable(clazz, other));\r\n        }\r\n\r\n        @Override\r\n        public boolean isAssignableFrom(ResolvableType other) {\r\n            Class<?> otherClass = other.resolve();\r\n            return (otherClass != null && (clazz == null || ClassUtils.isAssignable(clazz, otherClass)));\r\n        }\r\n    };\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forRawClass(Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableType#forClass(Class<?>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return a {@code ResolvableType} for the specified base type\r\n * (interface or base class) with a given implementation class.\r\n * <p>For example: {@code ResolvableType.forClass(List.class, MyArrayList.class)}.\r\n * @param baseType the base type (must not be {@code null})\r\n * @param implementationClass the implementation class\r\n * @return a {@code ResolvableType} for the specified base type backed by the\r\n * given implementation class\r\n * @see #forClass(Class)\r\n * @see #forClassWithGenerics(Class, Class...)\r\n */\r\npublic static ResolvableType forClass(Class<?> baseType, Class<?> implementationClass) {\r\n    Assert.notNull(baseType, \"Base type must not be null\");\r\n    ResolvableType asType = forType(implementationClass).as(baseType);\r\n    return (asType == NONE ? forType(baseType) : asType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableType",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableType#forClass(Class<?>,Class<?>)",
    "tailType": "method"
  }
]