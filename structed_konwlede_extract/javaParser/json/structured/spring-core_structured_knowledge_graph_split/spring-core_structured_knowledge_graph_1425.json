[
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueSpliterator#estimateSize()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#estimateSize()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#getExactSizeIfKnown()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic long getExactSizeIfKnown() {\r\n    return this.delegate.getExactSizeIfKnown();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueSpliterator#getExactSizeIfKnown()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#getExactSizeIfKnown()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#characteristics()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic int characteristics() {\r\n    return this.delegate.characteristics();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueSpliterator#characteristics()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#characteristics()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#hasCharacteristics(int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean hasCharacteristics(int characteristics) {\r\n    return this.delegate.hasCharacteristics(characteristics);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueSpliterator#hasCharacteristics(int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#hasCharacteristics(int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#getComparator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic Comparator<? super List<T>> getComparator() {\r\n    return this.delegate.getComparator();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UnmodifiableValueSpliterator#getComparator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UnmodifiableValueSpliterator#getComparator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.util",
    "tailType": "package"
  },
  {
    "head": "org.springframework.util",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.util.UpdateMessageDigestInputStream",
    "tailType": "class"
  },
  {
    "head": "org.springframework.util.UpdateMessageDigestInputStream",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.MessageDigest;\n\n/**\n * Extension of {@link java.io.InputStream} that allows for optimized\n * implementations of message digesting.\n *\n * @author Craig Andrews\n * @since 4.2\n */\nabstract class UpdateMessageDigestInputStream extends InputStream {\n\n\t/**\n\t * Update the message digest with the rest of the bytes in this stream.\n\t * <p>Using this method is more optimized since it avoids creating new\n\t * byte arrays for each call.\n\t * @param messageDigest the message digest to update\n\t * @throws IOException when propagated from {@link #read()}\n\t */\n\tpublic void updateMessageDigest(MessageDigest messageDigest) throws IOException {\n\t\tint data;\n\t\twhile ((data = read()) != -1) {\n\t\t\tmessageDigest.update((byte) data);\n\t\t}\n\t}\n\n\t/**\n\t * Update the message digest with the next len bytes in this stream.\n\t * <p>Using this method is more optimized since it avoids creating new\n\t * byte arrays for each call.\n\t * @param messageDigest the message digest to update\n\t * @param len how many bytes to read from this stream and use to update the message digest\n\t * @throws IOException when propagated from {@link #read()}\n\t */\n\tpublic void updateMessageDigest(MessageDigest messageDigest, int len) throws IOException {\n\t\tint data;\n\t\tint bytesRead = 0;\n\t\twhile (bytesRead < len && (data = read()) != -1) {\n\t\t\tmessageDigest.update((byte) data);\n\t\t\tbytesRead++;\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.util.UpdateMessageDigestInputStream#updateMessageDigest(MessageDigest)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Update the message digest with the rest of the bytes in this stream.\r\n * <p>Using this method is more optimized since it avoids creating new\r\n * byte arrays for each call.\r\n * @param messageDigest the message digest to update\r\n * @throws IOException when propagated from {@link #read()}\r\n */\r\npublic void updateMessageDigest(MessageDigest messageDigest) throws IOException {\r\n    int data;\r\n    while ((data = read()) != -1) {\r\n        messageDigest.update((byte) data);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.UpdateMessageDigestInputStream",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.UpdateMessageDigestInputStream#updateMessageDigest(MessageDigest)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.UpdateMessageDigestInputStream#updateMessageDigest(MessageDigest,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Update the message digest with the next len bytes in this stream.\r\n * <p>Using this method is more optimized since it avoids creating new\r\n * byte arrays for each call.\r\n * @param messageDigest the message digest to update\r\n * @param len how many bytes to read from this stream and use to update the message digest\r\n * @throws IOException when propagated from {@link #read()}\r\n */\r\npublic void updateMessageDigest(MessageDigest messageDigest, int len) throws IOException {\r\n    int data;\r\n    int bytesRead = 0;\r\n    while (bytesRead < len && (data = read()) != -1) {\r\n        messageDigest.update((byte) data);\r\n        bytesRead++;\r\n    }\r\n}",
    "tailType": "method_code"
  }
]