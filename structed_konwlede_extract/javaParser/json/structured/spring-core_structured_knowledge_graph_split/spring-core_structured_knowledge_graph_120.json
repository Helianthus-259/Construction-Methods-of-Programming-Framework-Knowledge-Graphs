[
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.util.AntPathMatcherTests#dotSeparatedPathMatcher",
    "tailType": "field"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#dotSeparatedPathMatcher",
    "headType": "field",
    "relation": "haveType",
    "tail": "AntPathMatcher",
    "tailType": "type"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#match()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid match() {\r\n    // test exact matching\r\n    assertThat(pathMatcher.match(\"test\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/test\", \"/test\")).isTrue();\r\n    // SPR-14141\r\n    assertThat(pathMatcher.match(\"https://example.org\", \"https://example.org\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/test.jpg\", \"test.jpg\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test\", \"/test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/test\", \"test\")).isFalse();\r\n    // test matching with ?'s\r\n    assertThat(pathMatcher.match(\"t?st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"??st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"tes?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"te??\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"?es?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"tes?\", \"tes\")).isFalse();\r\n    assertThat(pathMatcher.match(\"tes?\", \"testt\")).isFalse();\r\n    assertThat(pathMatcher.match(\"tes?\", \"tsst\")).isFalse();\r\n    // test matching with *'s\r\n    assertThat(pathMatcher.match(\"*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"testTest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test/*\", \"test/Test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test/*\", \"test/t\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test/*\", \"test/\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*test*\", \"AnothertestTest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*test\", \"Anothertest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*.*\", \"test.\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*.*\", \"test.test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*.*\", \"test.test.test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"testblaaaa\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"tst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*\", \"tsttest\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*\", \"test/\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*\", \"test/t\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test/*\", \"test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*test*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*test\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*.*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"testblaaab\")).isFalse();\r\n    // test matching with ?'s and /'s\r\n    assertThat(pathMatcher.match(\"/?\", \"/a\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/?/a\", \"/a/a\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/a/?\", \"/a/b\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/??/a\", \"/aa/a\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/a/??\", \"/a/bb\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/?\", \"/a\")).isTrue();\r\n    // test matching with **'s\r\n    assertThat(pathMatcher.match(\"/**\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*/**\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/**/*\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/bla/**/bla\", \"/bla/testing/testing/bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/bla/**/bla\", \"/bla/testing/testing/bla/bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/**/test\", \"/bla/bla/test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/bla/**/**/bla\", \"/bla/bla/bla/bla/bla/bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/bla*bla/test\", \"/blaXXXbla/test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*bla/test\", \"/XXXbla/test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/bla*bla/test\", \"/blaXXXbl/test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/*bla/test\", \"XXXblab/test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/*bla/test\", \"XXXbl/test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/????\", \"/bala/bla\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/**/*bla\", \"/bla/bla/bla/bbb\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing/\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*bla*/**/bla/*\", \"/XXXblaXXXX/testing/testing/bla/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing.jpg\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing/\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing/testing\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/x/x/**/bla\", \"/x/x/x/\")).isFalse();\r\n    assertThat(pathMatcher.match(\"/foo/bar/**\", \"/foo/bar\")).isTrue();\r\n    assertThat(pathMatcher.match(\"\", \"\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/{bla}.*\", \"/testing.html\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/{bla}\", \"//x\\ny\")).isTrue();\r\n    assertThat(pathMatcher.match(\"/{var:.*}\", \"/x\\ny\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#match()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#match()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchWithNullPath()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchWithNullPath() {\r\n    assertThat(pathMatcher.match(\"/test\", null)).isFalse();\r\n    assertThat(pathMatcher.match(\"/\", null)).isFalse();\r\n    assertThat(pathMatcher.match(null, null)).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#matchWithNullPath()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchWithNullPath()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchWithTrimTokensEnabled()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-14247\r\n@Test\r\nvoid matchWithTrimTokensEnabled() {\r\n    pathMatcher.setTrimTokens(true);\r\n    assertThat(pathMatcher.match(\"/foo/bar\", \"/foo /bar\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#matchWithTrimTokensEnabled()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchWithTrimTokensEnabled()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchStart()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid matchStart() {\r\n    // test exact matching\r\n    assertThat(pathMatcher.matchStart(\"test\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/test\", \"/test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/test.jpg\", \"test.jpg\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test\", \"/test\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"/test\", \"test\")).isFalse();\r\n    // test matching with ?'s\r\n    assertThat(pathMatcher.matchStart(\"t?st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"??st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"tes?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"te??\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"?es?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"tes?\", \"tes\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"tes?\", \"testt\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"tes?\", \"tsst\")).isFalse();\r\n    // test matching with *'s\r\n    assertThat(pathMatcher.matchStart(\"*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"testTest\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test/*\", \"test/Test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test/*\", \"test/t\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test/*\", \"test/\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*test*\", \"AnothertestTest\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*test\", \"Anothertest\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*.*\", \"test.\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*.*\", \"test.test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*.*\", \"test.test.test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*aaa\", \"testblaaaa\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"tst\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"test/\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"tsttest\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"test/\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*\", \"test/t\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test/*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test/t*.txt\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*test*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"*test\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"*.*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*aaa\", \"test\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"test*aaa\", \"testblaaab\")).isFalse();\r\n    // test matching with ?'s and /'s\r\n    assertThat(pathMatcher.matchStart(\"/?\", \"/a\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/?/a\", \"/a/a\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/a/?\", \"/a/b\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/??/a\", \"/aa/a\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/a/??\", \"/a/bb\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/?\", \"/a\")).isTrue();\r\n    // test matching with **'s\r\n    assertThat(pathMatcher.matchStart(\"/**\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*/**\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/**/*\", \"/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*/**\", \"test/\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"test*/**\", \"test/t\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/bla/**/bla\", \"/bla/testing/testing/bla\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/bla/**/bla\", \"/bla/testing/testing/bla/bla\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/**/test\", \"/bla/bla/test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/bla/**/**/bla\", \"/bla/bla/bla/bla/bla/bla\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/bla*bla/test\", \"/blaXXXbla/test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*bla/test\", \"/XXXbla/test\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/bla*bla/test\", \"/blaXXXbl/test\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"/*bla/test\", \"XXXblab/test\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"/*bla/test\", \"XXXbl/test\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"/????\", \"/bala/bla\")).isFalse();\r\n    assertThat(pathMatcher.matchStart(\"/**/*bla\", \"/bla/bla/bla/bbb\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing/\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*bla*/**/bla/*\", \"/XXXblaXXXX/testing/testing/bla/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing.jpg\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing/\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing/testing\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"/x/x/**/bla\", \"/x/x/x/\")).isTrue();\r\n    assertThat(pathMatcher.matchStart(\"\", \"\")).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#matchStart()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#matchStart()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#uniqueDeliminator()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid uniqueDeliminator() {\r\n    pathMatcher.setPathSeparator(\".\");\r\n    // test exact matching\r\n    assertThat(pathMatcher.match(\"test\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\".test\", \".test\")).isTrue();\r\n    assertThat(pathMatcher.match(\".test/jpg\", \"test/jpg\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test\", \".test\")).isFalse();\r\n    assertThat(pathMatcher.match(\".test\", \"test\")).isFalse();\r\n    // test matching with ?'s\r\n    assertThat(pathMatcher.match(\"t?st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"??st\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"tes?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"te??\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"?es?\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"tes?\", \"tes\")).isFalse();\r\n    assertThat(pathMatcher.match(\"tes?\", \"testt\")).isFalse();\r\n    assertThat(pathMatcher.match(\"tes?\", \"tsst\")).isFalse();\r\n    // test matching with *'s\r\n    assertThat(pathMatcher.match(\"*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"testTest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*test*\", \"AnothertestTest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*test\", \"Anothertest\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*/*\", \"test/\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*/*\", \"test/test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"*/*\", \"test/test/test\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"testblaaaa\")).isTrue();\r\n    assertThat(pathMatcher.match(\"test*\", \"tst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*\", \"tsttest\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*test*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*test\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"*/*\", \"tsttst\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"test\")).isFalse();\r\n    assertThat(pathMatcher.match(\"test*aaa\", \"testblaaab\")).isFalse();\r\n    // test matching with ?'s and .'s\r\n    assertThat(pathMatcher.match(\".?\", \".a\")).isTrue();\r\n    assertThat(pathMatcher.match(\".?.a\", \".a.a\")).isTrue();\r\n    assertThat(pathMatcher.match(\".a.?\", \".a.b\")).isTrue();\r\n    assertThat(pathMatcher.match(\".??.a\", \".aa.a\")).isTrue();\r\n    assertThat(pathMatcher.match(\".a.??\", \".a.bb\")).isTrue();\r\n    assertThat(pathMatcher.match(\".?\", \".a\")).isTrue();\r\n    // test matching with **'s\r\n    assertThat(pathMatcher.match(\".**\", \".testing.testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\".*.**\", \".testing.testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\".**.*\", \".testing.testing\")).isTrue();\r\n    assertThat(pathMatcher.match(\".bla.**.bla\", \".bla.testing.testing.bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\".bla.**.bla\", \".bla.testing.testing.bla.bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\".**.test\", \".bla.bla.test\")).isTrue();\r\n    assertThat(pathMatcher.match(\".bla.**.**.bla\", \".bla.bla.bla.bla.bla.bla\")).isTrue();\r\n    assertThat(pathMatcher.match(\".bla*bla.test\", \".blaXXXbla.test\")).isTrue();\r\n    assertThat(pathMatcher.match(\".*bla.test\", \".XXXbla.test\")).isTrue();\r\n    assertThat(pathMatcher.match(\".bla*bla.test\", \".blaXXXbl.test\")).isFalse();\r\n    assertThat(pathMatcher.match(\".*bla.test\", \"XXXblab.test\")).isFalse();\r\n    assertThat(pathMatcher.match(\".*bla.test\", \"XXXbl.test\")).isFalse();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#uniqueDeliminator()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#uniqueDeliminator()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractPathWithinPattern()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid extractPathWithinPattern() {\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/commit.html\", \"/docs/commit.html\")).isEmpty();\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/*\", \"/docs/cvs/commit\")).isEqualTo(\"cvs/commit\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/cvs/*.html\", \"/docs/cvs/commit.html\")).isEqualTo(\"commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/**\", \"/docs/cvs/commit\")).isEqualTo(\"cvs/commit\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/**/*.html\", \"/docs/cvs/commit.html\")).isEqualTo(\"cvs/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/**/*.html\", \"/docs/commit.html\")).isEqualTo(\"commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/*.html\", \"/commit.html\")).isEqualTo(\"commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/*.html\", \"/docs/commit.html\")).isEqualTo(\"docs/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"*.html\", \"/commit.html\")).isEqualTo(\"/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"*.html\", \"/docs/commit.html\")).isEqualTo(\"/docs/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"**/*.*\", \"/docs/commit.html\")).isEqualTo(\"/docs/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"*\", \"/docs/commit.html\")).isEqualTo(\"/docs/commit.html\");\r\n    // SPR-10515\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"**/commit.html\", \"/docs/cvs/other/commit.html\")).isEqualTo(\"/docs/cvs/other/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/**/commit.html\", \"/docs/cvs/other/commit.html\")).isEqualTo(\"cvs/other/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/**/**/**/**\", \"/docs/cvs/other/commit.html\")).isEqualTo(\"cvs/other/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/d?cs/*\", \"/docs/cvs/commit\")).isEqualTo(\"docs/cvs/commit\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/docs/c?s/*.html\", \"/docs/cvs/commit.html\")).isEqualTo(\"cvs/commit.html\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/d?cs/**\", \"/docs/cvs/commit\")).isEqualTo(\"docs/cvs/commit\");\r\n    assertThat(pathMatcher.extractPathWithinPattern(\"/d?cs/**/*.html\", \"/docs/cvs/commit.html\")).isEqualTo(\"docs/cvs/commit.html\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.AntPathMatcherTests#extractPathWithinPattern()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.AntPathMatcherTests#extractPathWithinPattern()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]