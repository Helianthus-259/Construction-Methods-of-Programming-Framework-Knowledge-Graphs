[
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#registerDefaultValues(AnnotationAttributes)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Register the annotation-declared default values for the given attributes,\r\n * if available.\r\n * @param attributes the annotation attributes to process\r\n * @since 4.3.2\r\n */\r\npublic static void registerDefaultValues(AnnotationAttributes attributes) {\r\n    Class<? extends Annotation> annotationType = attributes.annotationType();\r\n    if (annotationType != null && Modifier.isPublic(annotationType.getModifiers()) && !AnnotationFilter.PLAIN.matches(annotationType)) {\r\n        Map<String, DefaultValueHolder> defaultValues = getDefaultValues(annotationType);\r\n        defaultValues.forEach(attributes::putIfAbsent);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#registerDefaultValues(AnnotationAttributes)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getDefaultValues(Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Map<String, DefaultValueHolder> getDefaultValues(Class<? extends Annotation> annotationType) {\r\n    return defaultValuesCache.computeIfAbsent(annotationType, AnnotationUtils::computeDefaultValues);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getDefaultValues(Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#computeDefaultValues(Class<? extends Annotation>)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static Map<String, DefaultValueHolder> computeDefaultValues(Class<? extends Annotation> annotationType) {\r\n    AttributeMethods methods = AttributeMethods.forAnnotationType(annotationType);\r\n    if (!methods.hasDefaultValueMethod()) {\r\n        return Collections.emptyMap();\r\n    }\r\n    Map<String, DefaultValueHolder> result = CollectionUtils.newLinkedHashMap(methods.size());\r\n    if (!methods.hasNestedAnnotation()) {\r\n        // Use simpler method if there are no nested annotations\r\n        for (int i = 0; i < methods.size(); i++) {\r\n            Method method = methods.get(i);\r\n            Object defaultValue = method.getDefaultValue();\r\n            if (defaultValue != null) {\r\n                result.put(method.getName(), new DefaultValueHolder(defaultValue));\r\n            }\r\n        }\r\n    } else {\r\n        // If we have nested annotations, we need them as nested maps\r\n        AnnotationAttributes attributes = MergedAnnotation.of(annotationType).asMap(annotation -> new AnnotationAttributes(annotation.getType(), true), Adapt.ANNOTATION_TO_MAP);\r\n        for (Map.Entry<String, Object> element : attributes.entrySet()) {\r\n            result.put(element.getKey(), new DefaultValueHolder(element.getValue()));\r\n        }\r\n    }\r\n    return result;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#computeDefaultValues(Class<? extends Annotation>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#postProcessAnnotationAttributes(Object,AnnotationAttributes,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Post-process the supplied {@link AnnotationAttributes}, preserving nested\r\n * annotations as {@code Annotation} instances.\r\n * <p>Specifically, this method enforces <em>attribute alias</em> semantics\r\n * for annotation attributes that are annotated with {@link AliasFor @AliasFor}\r\n * and replaces default value placeholders with their original default values.\r\n * @param annotatedElement the element that is annotated with an annotation or\r\n * annotation hierarchy from which the supplied attributes were created;\r\n * may be {@code null} if unknown\r\n * @param attributes the annotation attributes to post-process\r\n * @param classValuesAsString whether to convert Class references into Strings (for\r\n * compatibility with {@link org.springframework.core.type.AnnotationMetadata})\r\n * or to preserve them as Class references\r\n * @since 4.3.2\r\n * @see #getDefaultValue(Class, String)\r\n */\r\npublic static void postProcessAnnotationAttributes(@Nullable Object annotatedElement, @Nullable AnnotationAttributes attributes, boolean classValuesAsString) {\r\n    if (attributes == null) {\r\n        return;\r\n    }\r\n    if (!attributes.validated) {\r\n        Class<? extends Annotation> annotationType = attributes.annotationType();\r\n        if (annotationType == null) {\r\n            return;\r\n        }\r\n        AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);\r\n        for (int i = 0; i < mapping.getMirrorSets().size(); i++) {\r\n            MirrorSet mirrorSet = mapping.getMirrorSets().get(i);\r\n            int resolved = mirrorSet.resolve(attributes.displayName, attributes, AnnotationUtils::getAttributeValueForMirrorResolution);\r\n            if (resolved != -1) {\r\n                Method attribute = mapping.getAttributes().get(resolved);\r\n                Object value = attributes.get(attribute.getName());\r\n                for (int j = 0; j < mirrorSet.size(); j++) {\r\n                    Method mirror = mirrorSet.get(j);\r\n                    if (mirror != attribute) {\r\n                        attributes.put(mirror.getName(), adaptValue(annotatedElement, value, classValuesAsString));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (Map.Entry<String, Object> attributeEntry : attributes.entrySet()) {\r\n        String attributeName = attributeEntry.getKey();\r\n        Object value = attributeEntry.getValue();\r\n        if (value instanceof DefaultValueHolder defaultValueHolder) {\r\n            value = defaultValueHolder.defaultValue;\r\n            attributes.put(attributeName, adaptValue(annotatedElement, value, classValuesAsString));\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#postProcessAnnotationAttributes(Object,AnnotationAttributes,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAttributeValueForMirrorResolution(Method,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Object getAttributeValueForMirrorResolution(Method attribute, @Nullable Object attributes) {\r\n    if (!(attributes instanceof AnnotationAttributes annotationAttributes)) {\r\n        return null;\r\n    }\r\n    Object result = annotationAttributes.get(attribute.getName());\r\n    return (result instanceof DefaultValueHolder defaultValueHolder ? defaultValueHolder.defaultValue : result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getAttributeValueForMirrorResolution(Method,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getAttributeValueForMirrorResolution(Method,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#adaptValue(Object,Object,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Nullable\r\nprivate static Object adaptValue(@Nullable Object annotatedElement, @Nullable Object value, boolean classValuesAsString) {\r\n    if (classValuesAsString) {\r\n        if (value instanceof Class<?> clazz) {\r\n            return clazz.getName();\r\n        }\r\n        if (value instanceof Class<?>[] classes) {\r\n            String[] names = new String[classes.length];\r\n            for (int i = 0; i < classes.length; i++) {\r\n                names[i] = classes[i].getName();\r\n            }\r\n            return names;\r\n        }\r\n    }\r\n    if (value instanceof Annotation annotation) {\r\n        return MergedAnnotation.from(annotatedElement, annotation).synthesize();\r\n    }\r\n    if (value instanceof Annotation[] annotations) {\r\n        Annotation[] synthesized = (Annotation[]) Array.newInstance(annotations.getClass().componentType(), annotations.length);\r\n        for (int i = 0; i < annotations.length; i++) {\r\n            synthesized[i] = MergedAnnotation.from(annotatedElement, annotations[i]).synthesize();\r\n        }\r\n        return synthesized;\r\n    }\r\n    return value;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#adaptValue(Object,Object,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#adaptValue(Object,Object,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the <em>value</em> of the {@code value} attribute of a\r\n * single-element Annotation, given an annotation instance.\r\n * @param annotation the annotation instance from which to retrieve the value\r\n * @return the attribute value, or {@code null} if not found unless the attribute\r\n * value cannot be retrieved due to an {@link AnnotationConfigurationException},\r\n * in which case such an exception will be rethrown\r\n * @see #getValue(Annotation, String)\r\n */\r\n@Nullable\r\npublic static Object getValue(Annotation annotation) {\r\n    return getValue(annotation, VALUE);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Retrieve the <em>value</em> of a named attribute, given an annotation instance.\r\n * @param annotation the annotation instance from which to retrieve the value\r\n * @param attributeName the name of the attribute value to retrieve\r\n * @return the attribute value, or {@code null} if not found unless the attribute\r\n * value cannot be retrieved due to an {@link AnnotationConfigurationException},\r\n * in which case such an exception will be rethrown\r\n * @see #getValue(Annotation)\r\n */\r\n@Nullable\r\npublic static Object getValue(@Nullable Annotation annotation, @Nullable String attributeName) {\r\n    if (annotation == null || !StringUtils.hasText(attributeName)) {\r\n        return null;\r\n    }\r\n    try {\r\n        for (Method method : annotation.annotationType().getDeclaredMethods()) {\r\n            if (method.getName().equals(attributeName) && method.getParameterCount() == 0) {\r\n                return invokeAnnotationMethod(method, annotation);\r\n            }\r\n        }\r\n    } catch (Throwable ex) {\r\n        handleValueRetrievalFailure(annotation, ex);\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.AnnotationUtils#getValue(Annotation,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  }
]