[
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.GenericConverter",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.Assert;\n\n/**\n * Generic converter interface for converting between two or more types.\n *\n * <p>This is the most flexible of the Converter SPI interfaces, but also the most complex.\n * It is flexible in that a GenericConverter may support converting between multiple source/target\n * type pairs (see {@link #getConvertibleTypes()}). In addition, GenericConverter implementations\n * have access to source/target {@link TypeDescriptor field context} during the type conversion\n * process. This allows for resolving source and target field metadata such as annotations and\n * generics information, which can be used to influence the conversion logic.\n *\n * <p>This interface should generally not be used when the simpler {@link Converter} or\n * {@link ConverterFactory} interface is sufficient.\n *\n * <p>Implementations may additionally implement {@link ConditionalConverter}.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n * @see TypeDescriptor\n * @see Converter\n * @see ConverterFactory\n * @see ConditionalConverter\n */\npublic interface GenericConverter {\n\n\t/**\n\t * Return the source and target types that this converter can convert between.\n\t * <p>Each entry is a convertible source-to-target type pair.\n\t * <p>For {@link ConditionalConverter conditional converters} this method may return\n\t * {@code null} to indicate all source-to-target pairs should be considered.\n\t */\n\t@Nullable Set<ConvertiblePair> getConvertibleTypes();\n\n\t/**\n\t * Convert the source object to the targetType described by the {@code TypeDescriptor}.\n\t * @param source the source object to convert (may be {@code null})\n\t * @param sourceType the type descriptor of the field we are converting from\n\t * @param targetType the type descriptor of the field we are converting to\n\t * @return the converted object\n\t */\n\t@Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n\n\n\t/**\n\t * Holder for a source-to-target class pair.\n\t */\n\tfinal class ConvertiblePair {\n\n\t\tprivate final Class<?> sourceType;\n\n\t\tprivate final Class<?> targetType;\n\n\t\t/**\n\t\t * Create a new source-to-target pair.\n\t\t * @param sourceType the source type\n\t\t * @param targetType the target type\n\t\t */\n\t\tpublic ConvertiblePair(Class<?> sourceType, Class<?> targetType) {\n\t\t\tAssert.notNull(sourceType, \"Source type must not be null\");\n\t\t\tAssert.notNull(targetType, \"Target type must not be null\");\n\t\t\tthis.sourceType = sourceType;\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\tpublic Class<?> getSourceType() {\n\t\t\treturn this.sourceType;\n\t\t}\n\n\t\tpublic Class<?> getTargetType() {\n\t\t\treturn this.targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\tif (this == other) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (other == null || other.getClass() != ConvertiblePair.class) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tConvertiblePair otherPair = (ConvertiblePair) other;\n\t\t\treturn (this.sourceType == otherPair.sourceType && this.targetType == otherPair.targetType);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn (this.sourceType.hashCode() * 31 + this.targetType.hashCode());\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn (this.sourceType.getName() + \" -> \" + this.targetType.getName());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Return the source and target types that this converter can convert between.\r\n * <p>Each entry is a convertible source-to-target type pair.\r\n * <p>For {@link ConditionalConverter conditional converters} this method may return\r\n * {@code null} to indicate all source-to-target pairs should be considered.\r\n */\r\n@Nullable\r\nSet<ConvertiblePair> getConvertibleTypes();",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.GenericConverter#getConvertibleTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter#getConvertibleTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Convert the source object to the targetType described by the {@code TypeDescriptor}.\r\n * @param source the source object to convert (may be {@code null})\r\n * @param sourceType the type descriptor of the field we are converting from\r\n * @param targetType the type descriptor of the field we are converting to\r\n * @return the converted object\r\n */\r\n@Nullable\r\nObject convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType);",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.GenericConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.GenericConverter#convert(Object,TypeDescriptor,TypeDescriptor)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.convert.converter",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2017 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core.convert.converter;\n\nimport java.util.Set;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.util.Assert;\n\n/**\n * Generic converter interface for converting between two or more types.\n *\n * <p>This is the most flexible of the Converter SPI interfaces, but also the most complex.\n * It is flexible in that a GenericConverter may support converting between multiple source/target\n * type pairs (see {@link #getConvertibleTypes()}). In addition, GenericConverter implementations\n * have access to source/target {@link TypeDescriptor field context} during the type conversion\n * process. This allows for resolving source and target field metadata such as annotations and\n * generics information, which can be used to influence the conversion logic.\n *\n * <p>This interface should generally not be used when the simpler {@link Converter} or\n * {@link ConverterFactory} interface is sufficient.\n *\n * <p>Implementations may additionally implement {@link ConditionalConverter}.\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @since 3.0\n * @see TypeDescriptor\n * @see Converter\n * @see ConverterFactory\n * @see ConditionalConverter\n */\npublic interface GenericConverter {\n\n\t/**\n\t * Return the source and target types that this converter can convert between.\n\t * <p>Each entry is a convertible source-to-target type pair.\n\t * <p>For {@link ConditionalConverter conditional converters} this method may return\n\t * {@code null} to indicate all source-to-target pairs should be considered.\n\t */\n\t@Nullable Set<ConvertiblePair> getConvertibleTypes();\n\n\t/**\n\t * Convert the source object to the targetType described by the {@code TypeDescriptor}.\n\t * @param source the source object to convert (may be {@code null})\n\t * @param sourceType the type descriptor of the field we are converting from\n\t * @param targetType the type descriptor of the field we are converting to\n\t * @return the converted object\n\t */\n\t@Nullable Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n\n\n\t/**\n\t * Holder for a source-to-target class pair.\n\t */\n\tfinal class ConvertiblePair {\n\n\t\tprivate final Class<?> sourceType;\n\n\t\tprivate final Class<?> targetType;\n\n\t\t/**\n\t\t * Create a new source-to-target pair.\n\t\t * @param sourceType the source type\n\t\t * @param targetType the target type\n\t\t */\n\t\tpublic ConvertiblePair(Class<?> sourceType, Class<?> targetType) {\n\t\t\tAssert.notNull(sourceType, \"Source type must not be null\");\n\t\t\tAssert.notNull(targetType, \"Target type must not be null\");\n\t\t\tthis.sourceType = sourceType;\n\t\t\tthis.targetType = targetType;\n\t\t}\n\n\t\tpublic Class<?> getSourceType() {\n\t\t\treturn this.sourceType;\n\t\t}\n\n\t\tpublic Class<?> getTargetType() {\n\t\t\treturn this.targetType;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(@Nullable Object other) {\n\t\t\tif (this == other) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (other == null || other.getClass() != ConvertiblePair.class) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tConvertiblePair otherPair = (ConvertiblePair) other;\n\t\t\treturn (this.sourceType == otherPair.sourceType && this.targetType == otherPair.targetType);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn (this.sourceType.hashCode() * 31 + this.targetType.hashCode());\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn (this.sourceType.getName() + \" -> \" + this.targetType.getName());\n\t\t}\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#sourceType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#sourceType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveField",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#targetType",
    "tailType": "field"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#targetType",
    "headType": "field",
    "relation": "haveType",
    "tail": "Class<?>",
    "tailType": "type"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#getSourceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Class<?> getSourceType() {\r\n    return this.sourceType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#getSourceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#getTargetType()",
    "headType": "method",
    "relation": "provide",
    "tail": "public Class<?> getTargetType() {\r\n    return this.targetType;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#getTargetType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair#equals(Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean equals(@Nullable Object other) {\r\n    if (this == other) {\r\n        return true;\r\n    }\r\n    if (other == null || other.getClass() != ConvertiblePair.class) {\r\n        return false;\r\n    }\r\n    ConvertiblePair otherPair = (ConvertiblePair) other;\r\n    return (this.sourceType == otherPair.sourceType && this.targetType == otherPair.targetType);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.convert.converter.ConvertiblePair",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.convert.converter.ConvertiblePair#equals(Object)",
    "tailType": "method"
  }
]