[
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitEnd()",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitInnerClass(String name, String outerName, String innerName, int access) {\r\n    cv1.visitInnerClass(name, outerName, innerName, access);\r\n    cv2.visitInnerClass(name, outerName, innerName, access);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitInnerClass(String,String,String,int)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {\r\n    FieldVisitor fv1 = cv1.visitField(access, name, desc, signature, value);\r\n    FieldVisitor fv2 = cv2.visitField(access, name, desc, signature, value);\r\n    if (fv1 == null) {\r\n        return fv2;\r\n    }\r\n    if (fv2 == null) {\r\n        return fv1;\r\n    }\r\n    return new FieldVisitorTee(fv1, fv2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitField(int,String,String,String,Object)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\r\n    MethodVisitor mv1 = cv1.visitMethod(access, name, desc, signature, exceptions);\r\n    MethodVisitor mv2 = cv2.visitMethod(access, name, desc, signature, exceptions);\r\n    if (mv1 == null) {\r\n        return mv2;\r\n    }\r\n    if (mv2 == null) {\r\n        return mv1;\r\n    }\r\n    return new MethodVisitorTee(mv1, mv2);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitMethod(int,String,String,String,String[])",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitSource(String source, String debug) {\r\n    cv1.visitSource(source, debug);\r\n    cv2.visitSource(source, debug);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitSource(String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitOuterClass(String owner, String name, String desc) {\r\n    cv1.visitOuterClass(owner, name, desc);\r\n    cv2.visitOuterClass(owner, name, desc);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitOuterClass(String,String,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\r\n    return AnnotationVisitorTee.getInstance(cv1.visitAnnotation(desc, visible), cv2.visitAnnotation(desc, visible));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAnnotation(String,boolean)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.cglib.transform.ClassVisitorTee#visitAttribute(Attribute)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void visitAttribute(Attribute attrs) {\r\n    cv1.visitAttribute(attrs);\r\n    cv2.visitAttribute(attrs);\r\n}",
    "tailType": "method_code"
  }
]