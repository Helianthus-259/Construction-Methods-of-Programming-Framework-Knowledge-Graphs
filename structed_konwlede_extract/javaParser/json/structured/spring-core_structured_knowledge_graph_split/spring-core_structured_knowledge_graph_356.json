[
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleWithVariantContainingCountryCode()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-14718, SPR-7598\r\n@Test\r\nvoid parseJava7Variant() {\r\n    assertThat(StringUtils.parseLocaleString(\"sr__#LATN\").toString()).isEqualTo(\"sr__#LATN\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseJava7Variant()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16651\r\n@Test\r\nvoid availableLocalesWithLocaleString() {\r\n    for (Locale locale : Locale.getAvailableLocales()) {\r\n        Locale parsedLocale = StringUtils.parseLocaleString(locale.toString());\r\n        if (parsedLocale == null) {\r\n            assertThat(locale.getLanguage()).isEmpty();\r\n        } else {\r\n            assertThat(locale.toString()).isEqualTo(parsedLocale.toString());\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLocaleString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "// SPR-16651\r\n@Test\r\nvoid availableLocalesWithLanguageTag() {\r\n    for (Locale locale : Locale.getAvailableLocales()) {\r\n        Locale parsedLocale = StringUtils.parseLocale(locale.toLanguageTag());\r\n        if (parsedLocale == null) {\r\n            assertThat(locale.getLanguage()).isEmpty();\r\n        } else {\r\n            assertThat(locale.toLanguageTag()).isEqualTo(parsedLocale.toLanguageTag());\r\n        }\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#availableLocalesWithLanguageTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid invalidLocaleWithLocaleString() {\r\n    assertThat(StringUtils.parseLocaleString(\"invalid\")).isEqualTo(new Locale(\"invalid\"));\r\n    assertThat(StringUtils.parseLocaleString(\"invalidvalue\")).isEqualTo(new Locale(\"invalidvalue\"));\r\n    assertThat(StringUtils.parseLocaleString(\"invalidvalue_foo\")).isEqualTo(new Locale(\"invalidvalue\", \"foo\"));\r\n    assertThat(StringUtils.parseLocaleString(\"\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLocaleString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid invalidLocaleWithLanguageTag() {\r\n    assertThat(StringUtils.parseLocale(\"invalid\")).isEqualTo(new Locale(\"invalid\"));\r\n    assertThat(StringUtils.parseLocale(\"invalidvalue\")).isEqualTo(new Locale(\"invalidvalue\"));\r\n    assertThat(StringUtils.parseLocale(\"invalidvalue_foo\")).isEqualTo(new Locale(\"invalidvalue\", \"foo\"));\r\n    assertThat(StringUtils.parseLocale(\"\")).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#invalidLocaleWithLanguageTag()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid parseLocaleStringWithEmptyCountryAndVariant() {\r\n    assertThat(StringUtils.parseLocale(\"be__TARASK\").toString()).isEqualTo(\"be__TARASK\");\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.StringUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#parseLocaleStringWithEmptyCountryAndVariant()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.StringUtilsTests#split()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid split() {\r\n    assertThat(StringUtils.split(\"Hello, world\", \",\")).containsExactly(\"Hello\", \" world\");\r\n    assertThat(StringUtils.split(\",Hello world\", \",\")).containsExactly(\"\", \"Hello world\");\r\n    assertThat(StringUtils.split(\"Hello world,\", \",\")).containsExactly(\"Hello world\", \"\");\r\n    assertThat(StringUtils.split(\"Hello, world,\", \",\")).containsExactly(\"Hello\", \" world,\");\r\n}",
    "tailType": "method_code"
  }
]