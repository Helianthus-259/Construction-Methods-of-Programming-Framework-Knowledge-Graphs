[
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentIgnoresMissingClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeIfPresentIgnoresMissingClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTypeUsingType() {\r\n    this.reflectionHints.registerType(TypeReference.of(String.class), hint -> hint.withMembers(MemberCategory.DECLARED_FIELDS));\r\n    assertThat(this.reflectionHints.getTypeHint(String.class)).satisfies(typeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTypeUsingTypeReference() {\r\n    this.reflectionHints.registerType(String.class, MemberCategory.DECLARED_FIELDS);\r\n    assertThat(this.reflectionHints.getTypeHint(TypeReference.of(String.class))).satisfies(typeWithMemberCategories(String.class, MemberCategory.DECLARED_FIELDS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeUsingTypeReference()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getTypeForNonExistingType() {\r\n    assertThat(this.reflectionHints.getTypeHint(String.class)).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#getTypeForNonExistingType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerTypeReusesBuilder() {\r\n    this.reflectionHints.registerType(TypeReference.of(String.class), MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n    Field field = ReflectionUtils.findField(String.class, \"value\");\r\n    assertThat(field).isNotNull();\r\n    this.reflectionHints.registerField(field);\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeHint -> {\r\n        assertThat(typeHint.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\r\n        assertThat(typeHint.fields()).singleElement().satisfies(fieldHint -> assertThat(fieldHint.getName()).isEqualTo(\"value\"));\r\n        assertThat(typeHint.getMemberCategories()).containsOnly(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerTypeReusesBuilder()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerClass() {\r\n    this.reflectionHints.registerType(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS);\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid registerClassWithCustomizer() {\r\n    this.reflectionHints.registerType(Integer.class, typeHint -> typeHint.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\r\n    assertThat(this.reflectionHints.typeHints()).singleElement().satisfies(typeWithMemberCategories(Integer.class, MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.ReflectionHintsTests#registerClassWithCustomizer()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]