[
  {
    "head": "org.springframework.core.SimpleAliasRegistry#removeAlias(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#isAlias(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic boolean isAlias(String name) {\r\n    return this.aliasMap.containsKey(name);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#isAlias(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#isAlias(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#getAliases(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic String[] getAliases(String name) {\r\n    List<String> result = new ArrayList<>();\r\n    synchronized (this.aliasMap) {\r\n        retrieveAliases(name, result);\r\n    }\r\n    return StringUtils.toStringArray(result);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#getAliases(String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#getAliases(String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#retrieveAliases(String,List<String>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Transitively retrieve all aliases for the given name.\r\n * @param name the target name to find aliases for\r\n * @param result the resulting aliases list\r\n */\r\nprivate void retrieveAliases(String name, List<String> result) {\r\n    this.aliasMap.forEach((alias, registeredName) -> {\r\n        if (registeredName.equals(name)) {\r\n            result.add(alias);\r\n            retrieveAliases(alias, result);\r\n        }\r\n    });\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#retrieveAliases(String,List<String>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#resolveAliases(StringValueResolver)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Resolve all alias target names and aliases registered in this\r\n * registry, applying the given {@link StringValueResolver} to them.\r\n * <p>The value resolver may for example resolve placeholders\r\n * in target bean names and even in alias names.\r\n * @param valueResolver the StringValueResolver to apply\r\n */\r\npublic void resolveAliases(StringValueResolver valueResolver) {\r\n    Assert.notNull(valueResolver, \"StringValueResolver must not be null\");\r\n    synchronized (this.aliasMap) {\r\n        List<String> aliasNamesCopy = new ArrayList<>(this.aliasNames);\r\n        aliasNamesCopy.forEach(alias -> {\r\n            String registeredName = this.aliasMap.get(alias);\r\n            if (registeredName != null) {\r\n                String resolvedAlias = valueResolver.resolveStringValue(alias);\r\n                String resolvedName = valueResolver.resolveStringValue(registeredName);\r\n                if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {\r\n                    this.aliasMap.remove(alias);\r\n                    this.aliasNames.remove(alias);\r\n                } else if (!resolvedAlias.equals(alias)) {\r\n                    String existingName = this.aliasMap.get(resolvedAlias);\r\n                    if (existingName != null) {\r\n                        if (existingName.equals(resolvedName)) {\r\n                            // Pointing to existing alias - just remove placeholder\r\n                            this.aliasMap.remove(alias);\r\n                            this.aliasNames.remove(alias);\r\n                            return;\r\n                        }\r\n                        throw new IllegalStateException(\"Cannot register resolved alias '\" + resolvedAlias + \"' (original: '\" + alias + \"') for name '\" + resolvedName + \"': It is already registered for name '\" + existingName + \"'.\");\r\n                    }\r\n                    checkForAliasCircle(resolvedName, resolvedAlias);\r\n                    this.aliasMap.remove(alias);\r\n                    this.aliasNames.remove(alias);\r\n                    this.aliasMap.put(resolvedAlias, resolvedName);\r\n                    this.aliasNames.add(resolvedAlias);\r\n                } else if (!registeredName.equals(resolvedName)) {\r\n                    this.aliasMap.put(alias, resolvedName);\r\n                    this.aliasNames.add(alias);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#resolveAliases(StringValueResolver)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#checkForAliasCircle(String,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Check whether the given name points back to the given alias as an alias\r\n * in the other direction already, catching a circular reference upfront\r\n * and throwing a corresponding IllegalStateException.\r\n * @param name the candidate name\r\n * @param alias the candidate alias\r\n * @see #registerAlias\r\n * @see #hasAlias\r\n */\r\nprotected void checkForAliasCircle(String name, String alias) {\r\n    if (hasAlias(alias, name)) {\r\n        throw new IllegalStateException(\"Cannot register alias '\" + alias + \"' for name '\" + name + \"': Circular reference - '\" + name + \"' is a direct or indirect alias for '\" + alias + \"' already\");\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#checkForAliasCircle(String,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry#canonicalName(String)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine the raw name, resolving aliases to canonical names.\r\n * @param name the user-specified name\r\n * @return the transformed name\r\n */\r\npublic String canonicalName(String name) {\r\n    String canonicalName = name;\r\n    // Handle aliasing...\r\n    String resolvedName;\r\n    do {\r\n        resolvedName = this.aliasMap.get(canonicalName);\r\n        if (resolvedName != null) {\r\n            canonicalName = resolvedName;\r\n        }\r\n    } while (resolvedName != null);\r\n    return canonicalName;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SimpleAliasRegistry",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SimpleAliasRegistry#canonicalName(String)",
    "tailType": "method"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.core",
    "tailType": "package"
  },
  {
    "head": "org.springframework.core",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.core.SmartClassLoader",
    "tailType": "class"
  },
  {
    "head": "org.springframework.core.SmartClassLoader",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2021 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.core;\n\nimport java.security.ProtectionDomain;\n\nimport org.jspecify.annotations.Nullable;\n\n/**\n * Interface to be implemented by a reloading-aware ClassLoader\n * (for example, a Groovy-based ClassLoader). Detected for example by\n * Spring's CGLIB proxy factory for making a caching decision.\n *\n * <p>If a ClassLoader does <i>not</i> implement this interface,\n * then all the classes obtained from it should be considered\n * as not reloadable (i.e. cacheable).\n *\n * @author Juergen Hoeller\n * @since 2.5.1\n */\npublic interface SmartClassLoader {\n\n\t/**\n\t * Determine whether the given class is reloadable (in this ClassLoader).\n\t * <p>Typically used to check whether the result may be cached (for this\n\t * ClassLoader) or whether it should be reobtained every time.\n\t * The default implementation always returns {@code false}.\n\t * @param clazz the class to check (usually loaded from this ClassLoader)\n\t * @return whether the class should be expected to appear in a reloaded\n\t * version (with a different {@code Class} object) later on\n\t */\n\tdefault boolean isClassReloadable(Class<?> clazz) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return the original ClassLoader for this SmartClassLoader, or potentially\n\t * the present loader itself if it is self-sufficient.\n\t * <p>The default implementation returns the local ClassLoader reference as-is.\n\t * In case of a reloadable or other selectively overriding ClassLoader which\n\t * commonly deals with unaffected classes from a base application class loader,\n\t * this should get implemented to return the original ClassLoader that the\n\t * present loader got derived from (for example, through {@code return getParent();}).\n\t * <p>This gets specifically used in Spring's AOP framework to determine the\n\t * class loader for a specific proxy in case the target class has not been\n\t * defined in the present class loader. In case of a reloadable class loader,\n\t * we prefer the base application class loader for proxying general classes\n\t * not defined in the reloadable class loader itself.\n\t * @return the original ClassLoader (the same reference by default)\n\t * @since 5.3.5\n\t * @see ClassLoader#getParent()\n\t * @see org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator\n\t */\n\tdefault ClassLoader getOriginalClassLoader() {\n\t\treturn (ClassLoader) this;\n\t}\n\n\t/**\n\t * Define a custom class (typically a CGLIB proxy class) in this class loader.\n\t * <p>This is a public equivalent of the protected\n\t * {@code defineClass(String, byte[], int, int, ProtectionDomain)} method\n\t * in {@link ClassLoader} which is traditionally invoked via reflection.\n\t * A concrete implementation in a custom class loader should simply delegate\n\t * to that protected method in order to make classloader-specific definitions\n\t * publicly available without \"illegal access\" warnings on JDK 9+:\n\t * {@code return defineClass(name, b, 0, b.length, protectionDomain)}.\n\t * Note that the JDK 9+ {@code Lookup#defineClass} method does not support\n\t * a custom target class loader for the new definition; it rather always\n\t * defines the class in the same class loader as the lookup's context class.\n\t * @param name the name of the class\n\t * @param b the bytes defining the class\n\t * @param protectionDomain the protection domain for the class, if any\n\t * @return the newly created class\n\t * @throws LinkageError in case of a bad class definition\n\t * @throws SecurityException in case of an invalid definition attempt\n\t * @throws UnsupportedOperationException in case of a custom definition attempt\n\t * not being possible (thrown by the default implementation in this interface)\n\t * @since 5.3.4\n\t * @see ClassLoader#defineClass(String, byte[], int, int, ProtectionDomain)\n\t */\n\tdefault Class<?> publicDefineClass(String name, byte[] b, @Nullable ProtectionDomain protectionDomain) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.core.SmartClassLoader#isClassReloadable(Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Determine whether the given class is reloadable (in this ClassLoader).\r\n * <p>Typically used to check whether the result may be cached (for this\r\n * ClassLoader) or whether it should be reobtained every time.\r\n * The default implementation always returns {@code false}.\r\n * @param clazz the class to check (usually loaded from this ClassLoader)\r\n * @return whether the class should be expected to appear in a reloaded\r\n * version (with a different {@code Class} object) later on\r\n */\r\ndefault boolean isClassReloadable(Class<?> clazz) {\r\n    return false;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.SmartClassLoader",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.SmartClassLoader#isClassReloadable(Class<?>)",
    "tailType": "method"
  }
]