[
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#make_local()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#make_local(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public Local make_local(Type type) {\r\n    return new Local(newLocal(type.getSize()), type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#make_local(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#checkcast_this()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void checkcast_this() {\r\n    checkcast(ce.getClassType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#checkcast_this()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#checkcast(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void checkcast(Type type) {\r\n    if (!type.equals(Constants.TYPE_OBJECT)) {\r\n        emit_type(Constants.CHECKCAST, type);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#checkcast(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#instance_of(Type)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void instance_of(Type type) {\r\n    emit_type(Constants.INSTANCEOF, type);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#instance_of(Type)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
    "headType": "method",
    "relation": "provide",
    "tail": "public void instance_of_this() {\r\n    instance_of(ce.getClassType());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#instance_of_this()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void process_switch(int[] keys, ProcessSwitchCallback callback) {\r\n    float density;\r\n    if (keys.length == 0) {\r\n        density = 0;\r\n    } else {\r\n        density = (float) keys.length / (keys[keys.length - 1] - keys[0] + 1);\r\n    }\r\n    process_switch(keys, callback, density >= 0.5f);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void process_switch(int[] keys, ProcessSwitchCallback callback, boolean useTable) {\r\n    if (!isSorted(keys)) {\r\n        throw new IllegalArgumentException(\"keys to switch must be sorted ascending\");\r\n    }\r\n    Label def = make_label();\r\n    Label end = make_label();\r\n    try {\r\n        if (keys.length > 0) {\r\n            int len = keys.length;\r\n            int min = keys[0];\r\n            int max = keys[len - 1];\r\n            int range = max - min + 1;\r\n            if (useTable) {\r\n                Label[] labels = new Label[range];\r\n                Arrays.fill(labels, def);\r\n                for (int i = 0; i < len; i++) {\r\n                    labels[keys[i] - min] = make_label();\r\n                }\r\n                mv.visitTableSwitchInsn(min, max, def, labels);\r\n                for (int i = 0; i < range; i++) {\r\n                    Label label = labels[i];\r\n                    if (label != def) {\r\n                        mark(label);\r\n                        callback.processCase(i + min, end);\r\n                    }\r\n                }\r\n            } else {\r\n                Label[] labels = new Label[len];\r\n                for (int i = 0; i < len; i++) {\r\n                    labels[i] = make_label();\r\n                }\r\n                mv.visitLookupSwitchInsn(def, keys, labels);\r\n                for (int i = 0; i < len; i++) {\r\n                    mark(labels[i]);\r\n                    callback.processCase(keys[i], end);\r\n                }\r\n            }\r\n        }\r\n        mark(def);\r\n        callback.processDefault();\r\n        mark(end);\r\n    } catch (RuntimeException | Error e) {\r\n        throw e;\r\n    } catch (Exception e) {\r\n        throw new CodeGenerationException(e);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#process_switch(int[],ProcessSwitchCallback,boolean)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#isSorted(int[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean isSorted(int[] keys) {\r\n    for (int i = 1; i < keys.length; i++) {\r\n        if (keys[i] < keys[i - 1]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#isSorted(int[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
    "headType": "method",
    "relation": "provide",
    "tail": "public void mark(Label label) {\r\n    mv.visitLabel(label);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.cglib.core.CodeEmitter#mark(Label)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.cglib.core.CodeEmitter#mark()",
    "headType": "method",
    "relation": "provide",
    "tail": "Label mark() {\r\n    Label label = make_label();\r\n    mv.visitLabel(label);\r\n    return label;\r\n}",
    "tailType": "method_code"
  }
]