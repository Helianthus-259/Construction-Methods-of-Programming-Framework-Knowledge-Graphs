[
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherChunkSize(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherChunkSize(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStreamPublisherCancel(DataBufferFactory bufferFactory) throws InterruptedException {\r\n    super.bufferFactory = bufferFactory;\r\n    byte[] foo = \"foo\".getBytes(StandardCharsets.UTF_8);\r\n    byte[] bar = \"bar\".getBytes(StandardCharsets.UTF_8);\r\n    CountDownLatch latch = new CountDownLatch(1);\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(outputStream -> {\r\n        try {\r\n            assertThatIOException().isThrownBy(() -> {\r\n                outputStream.write(foo);\r\n                outputStream.flush();\r\n                outputStream.write(bar);\r\n                outputStream.flush();\r\n            }).withMessage(\"Subscription has been terminated\");\r\n        } finally {\r\n            latch.countDown();\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor());\r\n    StepVerifier.create(publisher, 1).consumeNextWith(stringConsumer(\"foo\")).thenCancel().verify();\r\n    latch.await();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherCancel(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherCancel(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherClosed(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid outputStreamPublisherClosed(DataBufferFactory bufferFactory) throws InterruptedException {\r\n    super.bufferFactory = bufferFactory;\r\n    CountDownLatch latch = new CountDownLatch(1);\r\n    Publisher<DataBuffer> publisher = DataBufferUtils.outputStreamPublisher(outputStream -> {\r\n        try {\r\n            OutputStreamWriter writer = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);\r\n            writer.write(\"foo\");\r\n            writer.close();\r\n            assertThatIOException().isThrownBy(() -> writer.write(\"bar\")).withMessage(\"Stream closed\");\r\n        } catch (IOException ex) {\r\n            fail(ex.getMessage(), ex);\r\n        } finally {\r\n            latch.countDown();\r\n        }\r\n    }, super.bufferFactory, Executors.newSingleThreadExecutor());\r\n    StepVerifier.create(publisher).consumeNextWith(stringConsumer(\"foo\")).verifyComplete();\r\n    latch.await();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherClosed(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#outputStreamPublisherClosed(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 3, 3, 64, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"foo\", \"bar\", \"baz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize2(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize2(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 3, 3, 1, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"foo\", \"bar\", \"baz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize2(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize2(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize3(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize3(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 3, 12, 1, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"foobarbaz\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize3(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize3(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize4(DataBufferFactory)",
    "headType": "method",
    "relation": "provide",
    "tail": "@ParameterizedDataBufferAllocatingTest\r\nvoid inputStreamSubscriberChunkSize4(DataBufferFactory factory) {\r\n    genericInputStreamSubscriberTest(factory, 3, 1, 1, List.of(\"foo\", \"bar\", \"baz\"), List.of(\"f\", \"o\", \"o\", \"b\", \"a\", \"r\", \"b\", \"a\", \"z\"));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize4(DataBufferFactory)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.io.buffer.DataBufferUtilsTests#inputStreamSubscriberChunkSize4(DataBufferFactory)",
    "headType": "method",
    "relation": "use",
    "tail": "@ParameterizedDataBufferAllocatingTest",
    "tailType": "annotation"
  }
]