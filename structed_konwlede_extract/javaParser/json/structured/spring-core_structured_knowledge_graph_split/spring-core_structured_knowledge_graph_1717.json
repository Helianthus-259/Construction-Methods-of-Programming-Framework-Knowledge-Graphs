[
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenDirect()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getRootWhenDirect() {\r\n    MergedAnnotations annotations = MergedAnnotations.from(ComposedTransactionalComponentClass.class);\r\n    MergedAnnotation<?> annotation = annotations.get(ComposedTransactionalComponent.class);\r\n    assertThat(annotation.getDistance()).isEqualTo(0);\r\n    assertThat(annotation.getRoot()).isSameAs(annotation);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenDirect()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getRootWhenDirect()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getMetaTypes()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid getMetaTypes() {\r\n    MergedAnnotation<?> annotation = MergedAnnotations.from(ComposedTransactionalComponentClass.class).get(TransactionalComponent.class);\r\n    assertThat(annotation.getMetaTypes()).containsExactly(ComposedTransactionalComponent.class, TransactionalComponent.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#getMetaTypes()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#getMetaTypes()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectMultiValueMapFromNonAnnotatedClass() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(NonAnnotatedClass.class).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).isEmpty();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromNonAnnotatedClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromNonAnnotatedClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectMultiValueMapFromClassWithLocalAnnotation() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(TxConfig.class).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"value\", List.of(\"TxConfig\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectMultiValueMapFromClassWithLocalComposedAnnotationAndInheritedAnnotation() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(SubClassWithInheritedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"qualifier\", List.of(\"composed2\", \"transactionManager\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFromClassWithLocalComposedAnnotationAndInheritedAnnotation()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectMultiValueMapFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(SubSubClassWithInheritedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"qualifier\", List.of(\"transactionManager\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid collectMultiValueMapFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\r\n    MultiValueMap<String, Object> map = MergedAnnotations.from(SubSubClassWithInheritedComposedAnnotation.class, SearchStrategy.INHERITED_ANNOTATIONS).stream(Transactional.class).collect(MergedAnnotationCollectors.toMultiValueMap());\r\n    assertThat(map).contains(entry(\"qualifier\", List.of(\"composed1\")));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotationsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotationsTests#collectMultiValueMapFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations()",
    "tailType": "method"
  }
]