[
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveBoundedTypeVariableWildcardResult()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableNotFound()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveVariableNotFound() throws Exception {\r\n    ResolvableType type = ResolvableType.forMethodReturnType(Methods.class.getMethod(\"typedReturn\"));\r\n    assertThat(type.resolve()).isNull();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveVariableNotFound()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveVariableNotFound()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleInterfaceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromSimpleInterfaceType() {\r\n    ResolvableType type = ResolvableType.forClass(MySimpleInterfaceType.class).as(MyInterfaceType.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleInterfaceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleInterfaceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionInterfaceType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromSimpleCollectionInterfaceType() {\r\n    ResolvableType type = ResolvableType.forClass(MyCollectionInterfaceType.class).as(MyInterfaceType.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(Collection.class);\r\n    assertThat(type.resolveGeneric(0, 0)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionInterfaceType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionInterfaceType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleSuperclassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromSimpleSuperclassType() {\r\n    ResolvableType type = ResolvableType.forClass(MySimpleSuperclassType.class).as(MySuperclassType.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleSuperclassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleSuperclassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionSuperclassType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromSimpleCollectionSuperclassType() {\r\n    ResolvableType type = ResolvableType.forClass(MyCollectionSuperclassType.class).as(MySuperclassType.class);\r\n    assertThat(type.resolveGeneric()).isEqualTo(Collection.class);\r\n    assertThat(type.resolveGeneric(0, 0)).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionSuperclassType()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromSimpleCollectionSuperclassType()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsClass()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromFieldTypeWithImplementsClass() throws Exception {\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"), TypedFields.class);\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(String.class);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsClass()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsClass()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.ResolvableTypeTests#resolveTypeVariableFromFieldTypeWithImplementsType()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid resolveTypeVariableFromFieldTypeWithImplementsType() throws Exception {\r\n    ResolvableType implementationType = ResolvableType.forClassWithGenerics(Fields.class, Integer.class);\r\n    ResolvableType type = ResolvableType.forField(Fields.class.getField(\"parameterizedType\"), implementationType);\r\n    assertThat(type.resolve()).isEqualTo(List.class);\r\n    assertThat(type.getGeneric().resolve()).isEqualTo(Integer.class);\r\n}",
    "tailType": "method_code"
  }
]