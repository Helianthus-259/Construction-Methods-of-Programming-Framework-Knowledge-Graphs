[
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance containing all\r\n * annotations and meta-annotations from the specified element and,\r\n * depending on the {@link SearchStrategy}, related inherited elements.\r\n * @param element the source element\r\n * @param searchStrategy the search strategy to use\r\n * @return a {@code MergedAnnotations} instance containing the merged\r\n * element annotations\r\n * @see #search(SearchStrategy)\r\n */\r\nstatic MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy) {\r\n    return from(element, searchStrategy, RepeatableContainers.standardRepeatables());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,RepeatableContainers)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance containing all\r\n * annotations and meta-annotations from the specified element and,\r\n * depending on the {@link SearchStrategy}, related inherited elements.\r\n * @param element the source element\r\n * @param searchStrategy the search strategy to use\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * the element annotations or the meta-annotations\r\n * @return a {@code MergedAnnotations} instance containing the merged\r\n * element annotations\r\n * @see #search(SearchStrategy)\r\n */\r\nstatic MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy, RepeatableContainers repeatableContainers) {\r\n    return from(element, searchStrategy, repeatableContainers, AnnotationFilter.PLAIN);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,RepeatableContainers)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,RepeatableContainers,AnnotationFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance containing all\r\n * annotations and meta-annotations from the specified element and,\r\n * depending on the {@link SearchStrategy}, related inherited elements.\r\n * @param element the source element\r\n * @param searchStrategy the search strategy to use\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * the element annotations or the meta-annotations\r\n * @param annotationFilter an annotation filter used to restrict the\r\n * annotations considered\r\n * @return a {@code MergedAnnotations} instance containing the merged\r\n * annotations for the supplied element\r\n * @see #search(SearchStrategy)\r\n */\r\nstatic MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy, RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {\r\n    return from(element, searchStrategy, Search.never, repeatableContainers, annotationFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,RepeatableContainers,AnnotationFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,Predicate<Class<?>>,RepeatableContainers,AnnotationFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "private static MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy, Predicate<Class<?>> searchEnclosingClass, RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {\r\n    Assert.notNull(element, \"AnnotatedElement must not be null\");\r\n    Assert.notNull(searchStrategy, \"SearchStrategy must not be null\");\r\n    Assert.notNull(searchEnclosingClass, \"Predicate must not be null\");\r\n    Assert.notNull(repeatableContainers, \"RepeatableContainers must not be null\");\r\n    Assert.notNull(annotationFilter, \"AnnotationFilter must not be null\");\r\n    return TypeMappedAnnotations.from(element, searchStrategy, searchEnclosingClass, repeatableContainers, annotationFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(AnnotatedElement,SearchStrategy,Predicate<Class<?>>,RepeatableContainers,AnnotationFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance from the specified\r\n * annotations.\r\n * @param annotations the annotations to include\r\n * @return a {@code MergedAnnotations} instance containing the annotations\r\n * @see #from(Object, Annotation...)\r\n */\r\nstatic MergedAnnotations from(Annotation... annotations) {\r\n    return from(annotations, annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance from the specified\r\n * annotations.\r\n * @param source the source for the annotations. This source is used only\r\n * for information and logging. It does not need to <em>actually</em>\r\n * contain the specified annotations, and it will not be searched.\r\n * @param annotations the annotations to include\r\n * @return a {@code MergedAnnotations} instance containing the annotations\r\n * @see #from(Annotation...)\r\n * @see #from(AnnotatedElement)\r\n */\r\nstatic MergedAnnotations from(Object source, Annotation... annotations) {\r\n    return from(source, annotations, RepeatableContainers.standardRepeatables());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation[],RepeatableContainers)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance from the specified\r\n * annotations.\r\n * @param source the source for the annotations. This source is used only\r\n * for information and logging. It does not need to <em>actually</em>\r\n * contain the specified annotations, and it will not be searched.\r\n * @param annotations the annotations to include\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * meta-annotations\r\n * @return a {@code MergedAnnotations} instance containing the annotations\r\n */\r\nstatic MergedAnnotations from(Object source, Annotation[] annotations, RepeatableContainers repeatableContainers) {\r\n    return from(source, annotations, repeatableContainers, AnnotationFilter.PLAIN);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation[],RepeatableContainers)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation[],RepeatableContainers,AnnotationFilter)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance from the specified\r\n * annotations.\r\n * @param source the source for the annotations. This source is used only\r\n * for information and logging. It does not need to <em>actually</em>\r\n * contain the specified annotations, and it will not be searched.\r\n * @param annotations the annotations to include\r\n * @param repeatableContainers the repeatable containers that may be used by\r\n * meta-annotations\r\n * @param annotationFilter an annotation filter used to restrict the\r\n * annotations considered\r\n * @return a {@code MergedAnnotations} instance containing the annotations\r\n */\r\nstatic MergedAnnotations from(Object source, Annotation[] annotations, RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {\r\n    Assert.notNull(repeatableContainers, \"RepeatableContainers must not be null\");\r\n    Assert.notNull(annotationFilter, \"AnnotationFilter must not be null\");\r\n    return TypeMappedAnnotations.from(source, annotations, repeatableContainers, annotationFilter);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#from(Object,Annotation[],RepeatableContainers,AnnotationFilter)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#of(Collection<MergedAnnotation<?>>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Create a new {@link MergedAnnotations} instance from the specified\r\n * collection of directly present annotations. This method allows a\r\n * {@code MergedAnnotations} instance to be created from annotations that\r\n * are not necessarily loaded using reflection. The provided annotations\r\n * must all be {@link MergedAnnotation#isDirectlyPresent() directly present}\r\n * and must have an {@link MergedAnnotation#getAggregateIndex() aggregate\r\n * index} of {@code 0}.\r\n * <p>The resulting {@code MergedAnnotations} instance will contain both the\r\n * specified annotations and any meta-annotations that can be read using\r\n * reflection.\r\n * @param annotations the annotations to include\r\n * @return a {@code MergedAnnotations} instance containing the annotations\r\n * @see MergedAnnotation#of(ClassLoader, Object, Class, java.util.Map)\r\n */\r\nstatic MergedAnnotations of(Collection<MergedAnnotation<?>> annotations) {\r\n    return MergedAnnotationsCollection.of(annotations);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#of(Collection<MergedAnnotation<?>>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations#search(SearchStrategy)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Find merged annotations using the supplied {@link SearchStrategy} and a\r\n * fluent API for configuring and performing the search.\r\n * <p>See {@link Search} for details.\r\n * @param searchStrategy the search strategy to use\r\n * @return a {@code Search} instance to perform the search\r\n * @since 6.0\r\n */\r\nstatic Search search(SearchStrategy searchStrategy) {\r\n    Assert.notNull(searchStrategy, \"SearchStrategy must not be null\");\r\n    return new Search(searchStrategy);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.annotation.MergedAnnotations",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.annotation.MergedAnnotations#search(SearchStrategy)",
    "tailType": "method"
  }
]