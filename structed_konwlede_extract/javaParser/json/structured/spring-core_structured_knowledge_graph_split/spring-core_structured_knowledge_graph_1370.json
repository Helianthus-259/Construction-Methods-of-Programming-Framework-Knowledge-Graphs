[
  {
    "head": "org.springframework.util.ReflectionUtils#handleInvocationTargetException(InvocationTargetException)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Handle the given invocation target exception. Should only be called if no\r\n * checked exception is expected to be thrown by the target method.\r\n * <p>Throws the underlying RuntimeException or Error in case of such a root\r\n * cause. Throws an UndeclaredThrowableException otherwise.\r\n * @param ex the invocation target exception to handle\r\n */\r\npublic static void handleInvocationTargetException(InvocationTargetException ex) {\r\n    rethrowRuntimeException(ex.getTargetException());\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#handleInvocationTargetException(InvocationTargetException)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#rethrowRuntimeException(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Rethrow the given {@link Throwable exception}, which is presumably the\r\n * <em>target exception</em> of an {@link InvocationTargetException}.\r\n * Should only be called if no checked exception is expected to be thrown\r\n * by the target method.\r\n * <p>Rethrows the underlying exception cast to a {@link RuntimeException} or\r\n * {@link Error} if appropriate; otherwise, throws an\r\n * {@link UndeclaredThrowableException}.\r\n * @param ex the exception to rethrow\r\n * @throws RuntimeException the rethrown exception\r\n */\r\npublic static void rethrowRuntimeException(@Nullable Throwable ex) {\r\n    if (ex instanceof RuntimeException runtimeException) {\r\n        throw runtimeException;\r\n    }\r\n    if (ex instanceof Error error) {\r\n        throw error;\r\n    }\r\n    throw new UndeclaredThrowableException(ex);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#rethrowRuntimeException(Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#rethrowException(Throwable)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Rethrow the given {@link Throwable exception}, which is presumably the\r\n * <em>target exception</em> of an {@link InvocationTargetException}.\r\n * Should only be called if no checked exception is expected to be thrown\r\n * by the target method.\r\n * <p>Rethrows the underlying exception cast to an {@link Exception} or\r\n * {@link Error} if appropriate; otherwise, throws an\r\n * {@link UndeclaredThrowableException}.\r\n * @param throwable the exception to rethrow\r\n * @throws Exception the rethrown exception (in case of a checked exception)\r\n */\r\npublic static void rethrowException(@Nullable Throwable throwable) throws Exception {\r\n    if (throwable instanceof Exception exception) {\r\n        throw exception;\r\n    }\r\n    if (throwable instanceof Error error) {\r\n        throw error;\r\n    }\r\n    throw new UndeclaredThrowableException(throwable);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#rethrowException(Throwable)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#accessibleConstructor(Class<T>,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Constructor handling\r\n/**\r\n * Obtain an accessible constructor for the given class and parameters.\r\n * @param clazz the clazz to check\r\n * @param parameterTypes the parameter types of the desired constructor\r\n * @return the constructor reference\r\n * @throws NoSuchMethodException if no such constructor exists\r\n * @since 5.0\r\n */\r\npublic static <T> Constructor<T> accessibleConstructor(Class<T> clazz, Class<?>... parameterTypes) throws NoSuchMethodException {\r\n    Constructor<T> ctor = clazz.getDeclaredConstructor(parameterTypes);\r\n    makeAccessible(ctor);\r\n    return ctor;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#accessibleConstructor(Class<T>,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#makeAccessible(Constructor<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Make the given constructor accessible, explicitly setting it accessible\r\n * if necessary. The {@code setAccessible(true)} method is only called\r\n * when actually necessary, to avoid unnecessary conflicts.\r\n * @param ctor the constructor to make accessible\r\n * @see java.lang.reflect.Constructor#setAccessible\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\npublic static void makeAccessible(Constructor<?> ctor) {\r\n    if ((!Modifier.isPublic(ctor.getModifiers()) || !Modifier.isPublic(ctor.getDeclaringClass().getModifiers())) && !ctor.isAccessible()) {\r\n        ctor.setAccessible(true);\r\n    }\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#makeAccessible(Constructor<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#makeAccessible(Constructor<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@SuppressWarnings",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String)",
    "headType": "method",
    "relation": "provide",
    "tail": "// Method handling\r\n/**\r\n * Attempt to find a {@link Method} on the supplied class with the supplied name\r\n * and no parameters. Searches all superclasses up to {@code Object}.\r\n * <p>Returns {@code null} if no {@link Method} can be found.\r\n * @param clazz the class to introspect\r\n * @param name the name of the method\r\n * @return the Method object, or {@code null} if none found\r\n */\r\n@Nullable\r\npublic static Method findMethod(Class<?> clazz, String name) {\r\n    return findMethod(clazz, name, EMPTY_CLASS_ARRAY);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Attempt to find a {@link Method} on the supplied class with the supplied name\r\n * and parameter types. Searches all superclasses up to {@code Object}.\r\n * <p>Returns {@code null} if no {@link Method} can be found.\r\n * @param clazz the class to introspect\r\n * @param name the name of the method\r\n * @param paramTypes the parameter types of the method\r\n * (may be {@code null} to indicate any signature)\r\n * @return the Method object, or {@code null} if none found\r\n */\r\n@Nullable\r\npublic static Method findMethod(Class<?> clazz, String name, Class<?>@Nullable ... paramTypes) {\r\n    Assert.notNull(clazz, \"Class must not be null\");\r\n    Assert.notNull(name, \"Method name must not be null\");\r\n    Class<?> searchType = clazz;\r\n    while (searchType != null) {\r\n        Method[] methods = (searchType.isInterface() ? searchType.getMethods() : getDeclaredMethods(searchType, false));\r\n        for (Method method : methods) {\r\n            if (name.equals(method.getName()) && (paramTypes == null || hasSameParams(method, paramTypes))) {\r\n                return method;\r\n            }\r\n        }\r\n        searchType = searchType.getSuperclass();\r\n    }\r\n    return null;\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String,Class<?>)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#findMethod(Class<?>,String,Class<?>)",
    "headType": "method",
    "relation": "use",
    "tail": "@Nullable",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#hasSameParams(Method,Class<?>[])",
    "headType": "method",
    "relation": "provide",
    "tail": "private static boolean hasSameParams(Method method, Class<?>[] paramTypes) {\r\n    return (paramTypes.length == method.getParameterCount() && Arrays.equals(paramTypes, method.getParameterTypes()));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.ReflectionUtils",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.ReflectionUtils#hasSameParams(Method,Class<?>[])",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.ReflectionUtils#invokeMethod(Method,Object)",
    "headType": "method",
    "relation": "provide",
    "tail": "/**\r\n * Invoke the specified {@link Method} against the supplied target object with no arguments.\r\n * The target object can be {@code null} when invoking a static {@link Method}.\r\n * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException}.\r\n * @param method the method to invoke\r\n * @param target the target object to invoke the method on\r\n * @return the invocation result, if any\r\n * @see #invokeMethod(java.lang.reflect.Method, Object, Object[])\r\n */\r\n@Nullable\r\npublic static Object invokeMethod(Method method, @Nullable Object target) {\r\n    return invokeMethod(method, target, EMPTY_OBJECT_ARRAY);\r\n}",
    "tailType": "method_code"
  }
]