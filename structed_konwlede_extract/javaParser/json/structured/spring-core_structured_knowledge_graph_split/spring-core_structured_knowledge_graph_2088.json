[
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#toFlowable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#toFlowable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#toObservable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toObservable() {\r\n    List<Integer> sequence = Arrays.asList(1, 2, 3);\r\n    Publisher<Integer> source = Flux.fromIterable(sequence);\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Observable.class).fromPublisher(source);\r\n    assertThat(target).isInstanceOf(io.reactivex.rxjava3.core.Observable.class);\r\n    assertThat(((io.reactivex.rxjava3.core.Observable<?>) target).toList().blockingGet()).isEqualTo(sequence);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#toObservable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#toObservable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#toSingle()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toSingle() {\r\n    Publisher<Integer> source = Flux.fromArray(new Integer[] { 1 });\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Single.class).fromPublisher(source);\r\n    assertThat(target).isInstanceOf(io.reactivex.rxjava3.core.Single.class);\r\n    assertThat(((io.reactivex.rxjava3.core.Single<Integer>) target).blockingGet()).isEqualTo(Integer.valueOf(1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#toSingle()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#toSingle()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#toCompletable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid toCompletable() {\r\n    Publisher<Integer> source = Flux.fromArray(new Integer[] { 1, 2, 3 });\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Completable.class).fromPublisher(source);\r\n    assertThat(target).isInstanceOf(io.reactivex.rxjava3.core.Completable.class);\r\n    ((io.reactivex.rxjava3.core.Completable) target).blockingAwait();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#toCompletable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#toCompletable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#fromFlowable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fromFlowable() {\r\n    List<Integer> sequence = Arrays.asList(1, 2, 3);\r\n    Object source = io.reactivex.rxjava3.core.Flowable.fromIterable(sequence);\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Flowable.class).toPublisher(source);\r\n    assertThat(target).as(\"Expected Flux Publisher: \" + target.getClass().getName()).isInstanceOf(Flux.class);\r\n    assertThat(((Flux<Integer>) target).collectList().block(FIVE_SECONDS)).isEqualTo(sequence);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#fromFlowable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#fromFlowable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#fromObservable()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fromObservable() {\r\n    List<Integer> sequence = Arrays.asList(1, 2, 3);\r\n    Object source = io.reactivex.rxjava3.core.Observable.fromIterable(sequence);\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Observable.class).toPublisher(source);\r\n    assertThat(target).as(\"Expected Flux Publisher: \" + target.getClass().getName()).isInstanceOf(Flux.class);\r\n    assertThat(((Flux<Integer>) target).collectList().block(FIVE_SECONDS)).isEqualTo(sequence);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#fromObservable()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#fromObservable()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.core.RxJava3#fromSingle()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid fromSingle() {\r\n    Object source = io.reactivex.rxjava3.core.Single.just(1);\r\n    Object target = getAdapter(io.reactivex.rxjava3.core.Single.class).toPublisher(source);\r\n    assertThat(target).as(\"Expected Mono Publisher: \" + target.getClass().getName()).isInstanceOf(Mono.class);\r\n    assertThat(((Mono<Integer>) target).block(FIVE_SECONDS)).isEqualTo(Integer.valueOf(1));\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.core.RxJava3",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.core.RxJava3#fromSingle()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.core.RxJava3#fromSingle()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  }
]