[
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyFromByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyToByteArray()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyToByteArray() throws IOException {\r\n    byte[] content = \"content\".getBytes();\r\n    ByteArrayInputStream in = new ByteArrayInputStream(content);\r\n    byte[] result = FileCopyUtils.copyToByteArray(in);\r\n    assertThat(Arrays.equals(content, result)).isTrue();\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyToByteArray()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyToByteArray()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromReader()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyFromReader() throws IOException {\r\n    String content = \"content\";\r\n    StringReader in = new StringReader(content);\r\n    StringWriter out = new StringWriter();\r\n    int count = FileCopyUtils.copy(in, out);\r\n    assertThat(count).isEqualTo(content.length());\r\n    assertThat(out.toString()).isEqualTo(content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyFromReader()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromReader()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyFromString() throws IOException {\r\n    String content = \"content\";\r\n    StringWriter out = new StringWriter();\r\n    FileCopyUtils.copy(content, out);\r\n    assertThat(out.toString()).isEqualTo(content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyFromString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyFromString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyToString()",
    "headType": "method",
    "relation": "provide",
    "tail": "@Test\r\nvoid copyToString() throws IOException {\r\n    String content = \"content\";\r\n    StringReader in = new StringReader(content);\r\n    String result = FileCopyUtils.copyToString(in);\r\n    assertThat(result).isEqualTo(content);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.util.FileCopyUtilsTests#copyToString()",
    "tailType": "method"
  },
  {
    "head": "org.springframework.util.FileCopyUtilsTests#copyToString()",
    "headType": "method",
    "relation": "use",
    "tail": "@Test",
    "tailType": "annotation"
  },
  {
    "head": "spring-core",
    "headType": "module",
    "relation": "has",
    "tail": "org.springframework.aot.hint.support",
    "tailType": "package"
  },
  {
    "head": "org.springframework.aot.hint.support",
    "headType": "package",
    "relation": "haveClass",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints",
    "tailType": "class"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints",
    "headType": "class",
    "relation": "provide",
    "tail": "/*\n * Copyright 2002-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aot.hint.support;\n\nimport java.time.LocalDate;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.jspecify.annotations.Nullable;\n\nimport org.springframework.aot.hint.ExecutableMode;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.ReflectionHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.aot.hint.TypeReference;\n\n/**\n * {@link RuntimeHintsRegistrar} to register hints for popular conventions in\n * {@code org.springframework.core.convert.support.ObjectToObjectConverter}.\n *\n * @author Sebastien Deleuze\n * @since 6.0\n */\nclass ObjectToObjectConverterRuntimeHints implements RuntimeHintsRegistrar {\n\n\t@Override\n\tpublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\n\t\tReflectionHints reflectionHints = hints.reflection();\n\t\tTypeReference sqlDateTypeReference = TypeReference.of(\"java.sql.Date\");\n\t\treflectionHints.registerTypeIfPresent(classLoader, sqlDateTypeReference.getName(), hint -> hint\n\t\t\t\t.withMethod(\"toLocalDate\", Collections.emptyList(), ExecutableMode.INVOKE)\n\t\t\t\t.onReachableType(sqlDateTypeReference)\n\t\t\t\t.withMethod(\"valueOf\", List.of(TypeReference.of(LocalDate.class)), ExecutableMode.INVOKE)\n\t\t\t\t.onReachableType(sqlDateTypeReference));\n\n\t\treflectionHints.registerTypeIfPresent(classLoader, \"org.springframework.http.HttpMethod\",\n\t\t\t\tbuilder -> builder.withMethod(\"valueOf\", List.of(TypeReference.of(String.class)), ExecutableMode.INVOKE));\n\t\treflectionHints.registerTypeIfPresent(classLoader, \"java.net.URI\", MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n\t}\n\n}\n",
    "tailType": "class_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "provide",
    "tail": "@Override\r\npublic void registerHints(RuntimeHints hints, @Nullable ClassLoader classLoader) {\r\n    ReflectionHints reflectionHints = hints.reflection();\r\n    TypeReference sqlDateTypeReference = TypeReference.of(\"java.sql.Date\");\r\n    reflectionHints.registerTypeIfPresent(classLoader, sqlDateTypeReference.getName(), hint -> hint.withMethod(\"toLocalDate\", Collections.emptyList(), ExecutableMode.INVOKE).onReachableType(sqlDateTypeReference).withMethod(\"valueOf\", List.of(TypeReference.of(LocalDate.class)), ExecutableMode.INVOKE).onReachableType(sqlDateTypeReference));\r\n    reflectionHints.registerTypeIfPresent(classLoader, \"org.springframework.http.HttpMethod\", builder -> builder.withMethod(\"valueOf\", List.of(TypeReference.of(String.class)), ExecutableMode.INVOKE));\r\n    reflectionHints.registerTypeIfPresent(classLoader, \"java.net.URI\", MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\r\n}",
    "tailType": "method_code"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints",
    "headType": "class",
    "relation": "haveMethod",
    "tail": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "tailType": "method"
  },
  {
    "head": "org.springframework.aot.hint.support.ObjectToObjectConverterRuntimeHints#registerHints(RuntimeHints,ClassLoader)",
    "headType": "method",
    "relation": "use",
    "tail": "@Override",
    "tailType": "annotation"
  }
]